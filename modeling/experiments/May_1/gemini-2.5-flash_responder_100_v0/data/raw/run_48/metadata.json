{
  "task_description": "In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "Okay, here are the improved instructions for the next run (Run 48), building on the results of the previous runs.\n\nInstructions for Run 48 of 100:\n\nThe unwavering primary objective remains achieving parameter recovery >= 0.7 for *all* learnable parameters. This is the critical benchmark for model usability. While improved BIC and accuracy are valuable secondary goals, they must not come at the expense of robust parameter recovery. A model with excellent fit but poor parameter identifiability is not suitable for drawing meaningful conclusions about the underlying cognitive processes.\n\nThe previous run (Run 47) successfully achieved parameter recovery above the 0.7 threshold for *both* of its learnable parameters (`beta_gain_linear_diff: r = 0.727`, `beta_loss_linear_diff: r = 0.966`), using a piecewise linear function of the *difference* from the fair ratio (`R_val - 1.0`). This reinforces that the piecewise structure, splitting based on the fair ratio (`R_val` vs 1.0), seems crucial for parameter identifiability with exactly two learnable parameters. However, the BIC (40.53) and accuracy (0.672) did not significantly improve compared to the current best *recoverable* model (the piecewise log-log ratio model, BIC 40.45, accuracy 0.662). This suggests the linear functional form applied to the difference might not provide the best fit to the data.\n\nThe core challenge persists: designing a mathematical structure for utility using exactly **2 learnable parameters** that ensures both parameters have distinct, identifiable influences on responder decisions (`trial_role == 1`) while also improving model fit (lower BIC, higher accuracy).\n\nFor this run, let's continue to leverage the successful *piecewise structure* based on the ratio `R_val` split at 1.0, maintaining exactly **2 learnable parameters**. We will explore a *hybrid* functional form, combining elements from previously successful models: **use a logarithmic function for the gain side (`R_val >= 1.0`) and a linear function of the difference for the loss side (`R_val < 1.0`)**. This attempts to combine the fit characteristics of the logarithmic form seen in the best recoverable model for favorable offers with the linear difference form that showed good recovery in the last run for unfavorable offers.\n\nDesign a computational model that predicts the utility of accepting an offer based on a **piecewise function of the ratio of the proposed percentage share to the participant's fair percentage share (`R_val`)**. For offers where `R_val >= 1.0`, utility should be a logarithmic function of `R_val` scaled by one learnable parameter. For offers where `R_val < 1.0`, utility should be a linear function of the *difference* (`R_val - 1.0`) scaled by a second learnable parameter.\n\n*   **Structural Direction (Piecewise Hybrid Function):** Model utility (`U`) based on `R_val`, using different functional forms and scaling parameters depending on whether `R_val` is non-negative (fair or generous offers) or negative (unfair offers).\n    *   Calculate the necessary intermediate variables as before:\n        *   `sum_tokens = token_self + token_opp`\n        *   `fair_perc_self_calc = IF(sum_tokens > 0, (token_self / sum_tokens) * 100.0, 50.0)` (Ensures `fair_perc_self_calc` is >= 0).\n        *   `epsilon_val = 1e-6` (Small constant for numerical stability).\n        *   `R_val = (split_perc_self + epsilon_val) / (fair_perc_self_calc + epsilon_val)` (Calculate the ratio, ensuring `R_val` is always positive).\n        *   `R_diff = R_val - 1.0` (Calculate the difference from the fair ratio).\n    *   Structure the utility (`U`) using a conditional statement based on the value of `R_val`:\n        *   If `R_val >= 1.0`: `U = beta_gain_log * log(R_val)` (Logarithmic scaling for gain/favorable offers, using `log(R_val)` where `R_val >= 1`).\n        *   If `R_val < 1.0`: `U = beta_loss_linear_diff * R_diff` (Linear scaling for loss/unfair offers, using the *difference* `R_diff = R_val - 1.0`, which will be negative here).\n    *   This structure uses two distinct learnable parameters (`beta_gain_log` and `beta_loss_linear_diff`) that scale the outcome of different functional forms applied based on whether the offer ratio is a gain or a loss relative to the fair point. This is a direct attempt to combine the piecewise identifiability success with potentially better functional forms.\n\n*   **Key Inputs & Calculated Variables:**\n    *   Use `split_perc_self`, `token_self`, `token_opp` as data variables.\n    *   Calculate `sum_tokens`, `fair_perc_self_calc`, `epsilon_val`, `R_val`, `R_diff`, and `U`.\n    *   Ensure these calculated variables are included in your <MODEL> tag calculations and <VARIABLES> descriptions.\n\n*   **Model Formula:** Define the utility (`U`) based on the conditional logic applied to `R_val` and your 2 learnable parameters. Include the calculation steps for necessary derived variables (`sum_tokens`, `fair_perc_self_calc`, `epsilon_val`, `R_val`, `R_diff`) before the final formula for `U`. Use clear mathematical notation (IF/ELSE or similar conditional structure), making sure to use `log()` for the logarithm.\n\n*   **Learnable Parameters:** Your model *must* have exactly **2 learnable parameters**.\n    *   `beta_gain_log`: Sensitivity parameter scaling `log(R_val)` when `R_val >= 1.0` (fair or favorable offers). Suggest generous bounds like [-10.0, 10.0].\n    *   `beta_loss_linear_diff`: Sensitivity parameter scaling the *difference* (`R_val - 1.0`) when `R_val < 1.0` (unfair offers). Suggest generous bounds like [-10.0, 10.0].\n    Choose descriptive names suitable for Python code that reflect the functional form (log vs linear) and the value they scale (ratio vs difference) and the ratio range (gain vs loss). Define clear, generous, finite numerical bounds for both.\n\n*   **Calculated Variables:** Ensure all calculated variables used in the model (`sum_tokens`, `fair_perc_self_calc`, `epsilon_val`, `R_val`, `R_diff`, `U`) are included in your <VARIABLES> descriptions with `source: \"calculated\"`. Include descriptions for all data variables used as inputs (`token_self`, `token_opp`, `split_perc_self`). Be mindful of the range for `R_diff` given its calculation (it can be negative).\n\n*   **Model Specification:** Provide the formal mathematical formula between <MODEL> tags. Include the calculation steps for necessary derived variables before the final formula for `U`. Use clear mathematical notation.\n\n*   **Variable Descriptions:** Provide variable descriptions in JSON format between <VARIABLES> tags for *all* variables used in the <MODEL> formula (data, calculated, learnable). Include source, range (with inclusive flags), distribution (if applicable), and learnable status.\n\n*   **Target Variable:** Specify \"accept\" as the target variable using <target_variable> tags.\n\n*   **Summary:** Provide a concise summary between <SUMMARY> tags, describing your model. Explain the core idea of how utility is determined by a piecewise function based on the ratio (`R_val`), using `log(R_val)` scaled by `beta_gain_log` for gain/favorable offers (`R_val >= 1.0`) and the linear difference (`R_val - 1.0`) scaled by `beta_loss_linear_diff` for loss/unfair offers (`R_val < 1.0`). Explain how this hybrid piecewise structure is designed to improve fit (BIC/Accuracy) by incorporating the log function for gains, while building on the successful piecewise structure and linear difference form for losses to maintain parameter identifiability.\n\nAvailable Data Variables:\n- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.\n\nPlease think through this step by step, then provide your model specification and variable descriptions. Remember that robust parameter identifiability *within* the constraints of **exactly 2 learnable parameters** is the absolute priority. Your goal is to find a mathematical structure where both parameters can be uniquely and reliably estimated from the data by ensuring their influences are clearly distinguishable. This piecewise hybrid approach is a direct attempt to combine successful elements from previous models. If this structure also meets recovery but doesn't significantly improve BIC/Accuracy, or if it fails recovery for either parameter, be prepared to think even further outside the box for the next iteration \u2013 consider alternative conceptualizations of fairness's influence (e.g., is it just a reference point, or does it modulate sensitivity in a non-linear way?), different ways of incorporating the absolute amounts or tokens themselves rather than just percentages, or exploring fundamentally different model structures (e.g., additive utility components instead of just scaled ratios/differences). The key is finding a structure where the two parameters\u2019 contributions to utility are as independent as possible across the dataset, while also capturing the behavioral patterns better than previous attempts.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: Okay, here are the improved instructions for the next run (Run 48), building on the results of the previous runs.\n\nInstructions for Run 48 of 100:\n\nThe unwavering primary objective remains achieving parameter recovery >= 0.7 for *all* learnable parameters. This is the critical benchmark for model usability. While improved BIC and accuracy are valuable secondary goals, they must not come at the expense of robust parameter recovery. A model with excellent fit but poor parameter identifiability is not suitable for drawing meaningful conclusions about the underlying cognitive processes.\n\nThe previous run (Run 47) successfully achieved parameter recovery above the 0.7 threshold for *both* of its learnable parameters (`beta_gain_linear_diff: r = 0.727`, `beta_loss_linear_diff: r = 0.966`), using a piecewise linear function of the *difference* from the fair ratio (`R_val - 1.0`). This reinforces that the piecewise structure, splitting based on the fair ratio (`R_val` vs 1.0), seems crucial for parameter identifiability with exactly two learnable parameters. However, the BIC (40.53) and accuracy (0.672) did not significantly improve compared to the current best *recoverable* model (the piecewise log-log ratio model, BIC 40.45, accuracy 0.662). This suggests the linear functional form applied to the difference might not provide the best fit to the data.\n\nThe core challenge persists: designing a mathematical structure for utility using exactly **2 learnable parameters** that ensures both parameters have distinct, identifiable influences on responder decisions (`trial_role == 1`) while also improving model fit (lower BIC, higher accuracy).\n\nFor this run, let's continue to leverage the successful *piecewise structure* based on the ratio `R_val` split at 1.0, maintaining exactly **2 learnable parameters**. We will explore a *hybrid* functional form, combining elements from previously successful models: **use a logarithmic function for the gain side (`R_val >= 1.0`) and a linear function of the difference for the loss side (`R_val < 1.0`)**. This attempts to combine the fit characteristics of the logarithmic form seen in the best recoverable model for favorable offers with the linear difference form that showed good recovery in the last run for unfavorable offers.\n\nDesign a computational model that predicts the utility of accepting an offer based on a **piecewise function of the ratio of the proposed percentage share to the participant's fair percentage share (`R_val`)**. For offers where `R_val >= 1.0`, utility should be a logarithmic function of `R_val` scaled by one learnable parameter. For offers where `R_val < 1.0`, utility should be a linear function of the *difference* (`R_val - 1.0`) scaled by a second learnable parameter.\n\n*   **Structural Direction (Piecewise Hybrid Function):** Model utility (`U`) based on `R_val`, using different functional forms and scaling parameters depending on whether `R_val` is non-negative (fair or generous offers) or negative (unfair offers).\n    *   Calculate the necessary intermediate variables as before:\n        *   `sum_tokens = token_self + token_opp`\n        *   `fair_perc_self_calc = IF(sum_tokens > 0, (token_self / sum_tokens) * 100.0, 50.0)` (Ensures `fair_perc_self_calc` is >= 0).\n        *   `epsilon_val = 1e-6` (Small constant for numerical stability).\n        *   `R_val = (split_perc_self + epsilon_val) / (fair_perc_self_calc + epsilon_val)` (Calculate the ratio, ensuring `R_val` is always positive).\n        *   `R_diff = R_val - 1.0` (Calculate the difference from the fair ratio).\n    *   Structure the utility (`U`) using a conditional statement based on the value of `R_val`:\n        *   If `R_val >= 1.0`: `U = beta_gain_log * log(R_val)` (Logarithmic scaling for gain/favorable offers, using `log(R_val)` where `R_val >= 1`).\n        *   If `R_val < 1.0`: `U = beta_loss_linear_diff * R_diff` (Linear scaling for loss/unfair offers, using the *difference* `R_diff = R_val - 1.0`, which will be negative here).\n    *   This structure uses two distinct learnable parameters (`beta_gain_log` and `beta_loss_linear_diff`) that scale the outcome of different functional forms applied based on whether the offer ratio is a gain or a loss relative to the fair point. This is a direct attempt to combine the piecewise identifiability success with potentially better functional forms.\n\n*   **Key Inputs & Calculated Variables:**\n    *   Use `split_perc_self`, `token_self`, `token_opp` as data variables.\n    *   Calculate `sum_tokens`, `fair_perc_self_calc`, `epsilon_val`, `R_val`, `R_diff`, and `U`.\n    *   Ensure these calculated variables are included in your <MODEL> tag calculations and <VARIABLES> descriptions.\n\n*   **Model Formula:** Define the utility (`U`) based on the conditional logic applied to `R_val` and your 2 learnable parameters. Include the calculation steps for necessary derived variables (`sum_tokens`, `fair_perc_self_calc`, `epsilon_val`, `R_val`, `R_diff`) before the final formula for `U`. Use clear mathematical notation (IF/ELSE or similar conditional structure), making sure to use `log()` for the logarithm.\n\n*   **Learnable Parameters:** Your model *must* have exactly **2 learnable parameters**.\n    *   `beta_gain_log`: Sensitivity parameter scaling `log(R_val)` when `R_val >= 1.0` (fair or favorable offers). Suggest generous bounds like [-10.0, 10.0].\n    *   `beta_loss_linear_diff`: Sensitivity parameter scaling the *difference* (`R_val - 1.0`) when `R_val < 1.0` (unfair offers). Suggest generous bounds like [-10.0, 10.0].\n    Choose descriptive names suitable for Python code that reflect the functional form (log vs linear) and the value they scale (ratio vs difference) and the ratio range (gain vs loss). Define clear, generous, finite numerical bounds for both.\n\n*   **Calculated Variables:** Ensure all calculated variables used in the model (`sum_tokens`, `fair_perc_self_calc`, `epsilon_val`, `R_val`, `R_diff`, `U`) are included in your <VARIABLES> descriptions with `source: \"calculated\"`. Include descriptions for all data variables used as inputs (`token_self`, `token_opp`, `split_perc_self`). Be mindful of the range for `R_diff` given its calculation (it can be negative).\n\n*   **Model Specification:** Provide the formal mathematical formula between <MODEL> tags. Include the calculation steps for necessary derived variables before the final formula for `U`. Use clear mathematical notation.\n\n*   **Variable Descriptions:** Provide variable descriptions in JSON format between <VARIABLES> tags for *all* variables used in the <MODEL> formula (data, calculated, learnable). Include source, range (with inclusive flags), distribution (if applicable), and learnable status.\n\n*   **Target Variable:** Specify \"accept\" as the target variable using <target_variable> tags.\n\n*   **Summary:** Provide a concise summary between <SUMMARY> tags, describing your model. Explain the core idea of how utility is determined by a piecewise function based on the ratio (`R_val`), using `log(R_val)` scaled by `beta_gain_log` for gain/favorable offers (`R_val >= 1.0`) and the linear difference (`R_val - 1.0`) scaled by `beta_loss_linear_diff` for loss/unfair offers (`R_val < 1.0`). Explain how this hybrid piecewise structure is designed to improve fit (BIC/Accuracy) by incorporating the log function for gains, while building on the successful piecewise structure and linear difference form for losses to maintain parameter identifiability.\n\nAvailable Data Variables:\n- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.\n\nPlease think through this step by step, then provide your model specification and variable descriptions. Remember that robust parameter identifiability *within* the constraints of **exactly 2 learnable parameters** is the absolute priority. Your goal is to find a mathematical structure where both parameters can be uniquely and reliably estimated from the data by ensuring their influences are clearly distinguishable. This piecewise hybrid approach is a direct attempt to combine successful elements from previous models. If this structure also meets recovery but doesn't significantly improve BIC/Accuracy, or if it fails recovery for either parameter, be prepared to think even further outside the box for the next iteration \u2013 consider alternative conceptualizations of fairness's influence (e.g., is it just a reference point, or does it modulate sensitivity in a non-linear way?), different ways of incorporating the absolute amounts or tokens themselves rather than just percentages, or exploring fundamentally different model structures (e.g., additive utility components instead of just scaled ratios/differences). The key is finding a structure where the two parameters\u2019 contributions to utility are as independent as possible across the dataset, while also capturing the behavioral patterns better than previous attempts.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<MODEL>\nsum_tokens = token_self + token_opp\nfair_perc_self_calc = IF(sum_tokens > 0, (token_self / sum_tokens) * 100.0, 50.0)\nepsilon_val = 1e-6\nR_val = (split_perc_self + epsilon_val) / (fair_perc_self_calc + epsilon_val)\nR_diff = R_val - 1.0\nU = IF(R_val >= 1.0, beta_gain_log * log(R_val), beta_loss_linear_diff * R_diff)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The proposed share for the participant in percentage\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"sum_tokens\": {\n      \"description\": \"Total number of tokens found by participant and opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fair_perc_self_calc\": {\n      \"description\": \"Calculated fair percentage share for the participant based on token contribution. Defaults to 50% if sum_tokens is 0.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"epsilon_val\": {\n      \"description\": \"Small constant added for numerical stability in ratio calculation.\",\n      \"range\": {\n        \"min\": 1e-6,\n        \"max\": 1e-6\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"R_val\": {\n      \"description\": \"Ratio of the proposed percentage share for self to the calculated fair percentage share for self.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"R_diff\": {\n      \"description\": \"Difference between R_val and 1.0, representing deviation from fair ratio.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_gain_log\": {\n      \"description\": \"Sensitivity parameter scaling the log of R_val for R_val >= 1.0.\",\n      \"range\": {\n        \"min\": -10.0,\n        \"max\": 10.0\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_loss_linear_diff\": {\n      \"description\": \"Sensitivity parameter scaling the linear difference R_diff for R_val < 1.0.\",\n      \"range\": {\n        \"min\": -10.0,\n        \"max\": 10.0\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Utility of accepting the proposed offer.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nThe model predicts the utility of accepting an offer for the responder using a piecewise function based on the ratio of the proposed percentage share to the participant's calculated fair percentage share (R_val). For offers where R_val is greater than or equal to 1.0 (fair or favorable), utility is determined by the logarithm of R_val scaled by the learnable parameter beta_gain_log. For offers where R_val is less than 1.0 (unfair), utility is determined by the linear difference (R_val - 1.0) scaled by the learnable parameter beta_loss_linear_diff. This piecewise hybrid structure aims to capture distinct sensitivities to gains and losses relative to the fairness reference point using exactly two identifiable learnable parameters.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['beta_gain_log', 'beta_loss_linear_diff']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                sum_tokens = token_self + token_opp\nfair_perc_self_calc = IF(sum_tokens > 0, (token_self / sum_tokens) * 100.0, 50.0)\nepsilon_val = 1e-6\nR_val = (split_perc_self + epsilon_val) / (fair_perc_self_calc + epsilon_val)\nR_diff = R_val - 1.0\nU = IF(R_val >= 1.0, beta_gain_log * log(R_val), beta_loss_linear_diff * R_diff)\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The proposed share for the participant in percentage\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"sum_tokens\": {\n      \"description\": \"Total number of tokens found by participant and opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fair_perc_self_calc\": {\n      \"description\": \"Calculated fair percentage share for the participant based on token contribution. Defaults to 50% if sum_tokens is 0.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"epsilon_val\": {\n      \"description\": \"Small constant added for numerical stability in ratio calculation.\",\n      \"range\": {\n        \"min\": 1e-06,\n        \"max\": 1e-06,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"R_val\": {\n      \"description\": \"Ratio of the proposed percentage share for self to the calculated fair percentage share for self.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"R_diff\": {\n      \"description\": \"Difference between R_val and 1.0, representing deviation from fair ratio.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_gain_log\": {\n      \"description\": \"Sensitivity parameter scaling the log of R_val for R_val >= 1.0.\",\n      \"range\": {\n        \"min\": -10.0,\n        \"max\": 10.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_loss_linear_diff\": {\n      \"description\": \"Sensitivity parameter scaling the linear difference R_diff for R_val < 1.0.\",\n      \"range\": {\n        \"min\": -10.0,\n        \"max\": 10.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Utility of accepting the proposed offer.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, beta_gain_log=1.0, beta_loss_linear_diff=1.0):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        split_perc_self = trial.get(\"splitperc_self\", 0)\n\n        sum_tokens = token_self + token_opp\n        fair_perc_self_calc = (token_self / sum_tokens) * 100.0 if sum_tokens > 0 else 50.0\n        epsilon_val = 1e-6\n        R_val = (split_perc_self + epsilon_val) / (fair_perc_self_calc + epsilon_val)\n        R_diff = R_val - 1.0\n\n        if R_val >= 1.0:\n            U = beta_gain_log * math.log(R_val)\n        else:\n            U = beta_loss_linear_diff * R_diff\n        \n        model_predictions.append(U)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '[{\"ID\": 0, \"group\": \"control\", \"trial_number\": 1, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 7, \"token_self\": 3, \"combined_earning\": 10, \"split_opp\": 6.3, \"split_self\": 3.6999999999999997, \"splitperc_opp\": 63, \"splitperc_self\": 37, \"accept\": 0.0, \"accepted_amount\": 0.0, \"accepted_perc\": 0.0, \"proposed_perc\": 37.0, \"proposed_amount\": 3.6999999999999997}, {\"ID\": 1, \"group\": \"control\", \"trial_number\": 2, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 3, \"token_self\": 7, \"combined_earning\": 10, \"split_opp\": 2.8, \"split_self\": 7.199999999999999, \"splitperc_opp\": 28, \"splitperc_self\": 72, \"accept\": 1.0, \"accepted_amount\": 7.199999999999999, \"accepted_perc\": 72.0, \"proposed_perc\": 72.0, \"proposed_amount\": 7.199999999999999}, {\"ID\": 2, \"group\": \"control\", \"trial_number\": 3, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 5, \"token_self\": 5, \"combined_earning\": 10, \"split_opp\": 6.0, \"split_self\": 4.0, \"splitperc_opp\": 60, \"splitperc_self\": 40, \"accept\": 0.0, \"accepted_amount\": 0.0, \"accepted_perc\": 0.0, \"proposed_perc\": 40.0, \"proposed_amount\": 4.0}, {\"ID\": 3, \"group\": \"control\", \"trial_number\": 4, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 4, \"token_self\": 6, \"combined_earning\": 10, \"split_opp\": 5.4, \"split_self\": 4.6, \"splitperc_opp\": 54, \"splitperc_self\": 46, \"accept\": 0.0, \"accepted_amount\": 0.0, \"accepted_perc\": 0.0, \"proposed_perc\": 46.0, \"proposed_amount\": 4.6}, {\"ID\": 4, \"group\": \"control\", \"trial_number\": 5, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 2, \"token_self\": 8, \"combined_earning\": 10, \"split_opp\": 1.7, \"split_self\": 8.3, \"splitperc_opp\": 17, \"splitperc_self\": 83, \"accept\": 1.0, \"accepted_amount\": 8.3, \"accepted_perc\": 83.0, \"proposed_perc\": 83.0, \"proposed_amount\": 8.3}]'\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n",
      "timestamp": 1746101814.328747
    }
  ],
  "learnable_parameters": {
    "beta_gain_log": {
      "description": "Sensitivity parameter scaling the log of R_val for R_val >= 1.0.",
      "range": {
        "min": -10.0,
        "max": 10.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta_loss_linear_diff": {
      "description": "Sensitivity parameter scaling the linear difference R_diff for R_val < 1.0.",
      "range": {
        "min": -10.0,
        "max": 10.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "sum_tokens = token_self + token_opp\nfair_perc_self_calc = IF(sum_tokens > 0, (token_self / sum_tokens) * 100.0, 50.0)\nepsilon_val = 1e-6\nR_val = (split_perc_self + epsilon_val) / (fair_perc_self_calc + epsilon_val)\nR_diff = R_val - 1.0\nU = IF(R_val >= 1.0, beta_gain_log * log(R_val), beta_loss_linear_diff * R_diff)",
  "variable_descriptions": {
    "token_self": {
      "description": "Number of tokens found by the participant",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "split_perc_self": {
      "description": "The proposed share for the participant in percentage",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "sum_tokens": {
      "description": "Total number of tokens found by participant and opponent",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "fair_perc_self_calc": {
      "description": "Calculated fair percentage share for the participant based on token contribution. Defaults to 50% if sum_tokens is 0.",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "epsilon_val": {
      "description": "Small constant added for numerical stability in ratio calculation.",
      "range": {
        "min": 1e-06,
        "max": 1e-06,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "R_val": {
      "description": "Ratio of the proposed percentage share for self to the calculated fair percentage share for self.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "R_diff": {
      "description": "Difference between R_val and 1.0, representing deviation from fair ratio.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "beta_gain_log": {
      "description": "Sensitivity parameter scaling the log of R_val for R_val >= 1.0.",
      "range": {
        "min": -10.0,
        "max": 10.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta_loss_linear_diff": {
      "description": "Sensitivity parameter scaling the linear difference R_diff for R_val < 1.0.",
      "range": {
        "min": -10.0,
        "max": 10.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "U": {
      "description": "Utility of accepting the proposed offer.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "The model predicts the utility of accepting an offer for the responder using a piecewise function based on the ratio of the proposed percentage share to the participant's calculated fair percentage share (R_val). For offers where R_val is greater than or equal to 1.0 (fair or favorable), utility is determined by the logarithm of R_val scaled by the learnable parameter beta_gain_log. For offers where R_val is less than 1.0 (unfair), utility is determined by the linear difference (R_val - 1.0) scaled by the learnable parameter beta_loss_linear_diff. This piecewise hybrid structure aims to capture distinct sensitivities to gains and losses relative to the fairness reference point using exactly two identifiable learnable parameters.",
  "target_variable": "accept",
  "full_reasoning": "<MODEL>\nsum_tokens = token_self + token_opp\nfair_perc_self_calc = IF(sum_tokens > 0, (token_self / sum_tokens) * 100.0, 50.0)\nepsilon_val = 1e-6\nR_val = (split_perc_self + epsilon_val) / (fair_perc_self_calc + epsilon_val)\nR_diff = R_val - 1.0\nU = IF(R_val >= 1.0, beta_gain_log * log(R_val), beta_loss_linear_diff * R_diff)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The proposed share for the participant in percentage\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"sum_tokens\": {\n      \"description\": \"Total number of tokens found by participant and opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fair_perc_self_calc\": {\n      \"description\": \"Calculated fair percentage share for the participant based on token contribution. Defaults to 50% if sum_tokens is 0.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"epsilon_val\": {\n      \"description\": \"Small constant added for numerical stability in ratio calculation.\",\n      \"range\": {\n        \"min\": 1e-6,\n        \"max\": 1e-6\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"R_val\": {\n      \"description\": \"Ratio of the proposed percentage share for self to the calculated fair percentage share for self.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"R_diff\": {\n      \"description\": \"Difference between R_val and 1.0, representing deviation from fair ratio.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_gain_log\": {\n      \"description\": \"Sensitivity parameter scaling the log of R_val for R_val >= 1.0.\",\n      \"range\": {\n        \"min\": -10.0,\n        \"max\": 10.0\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_loss_linear_diff\": {\n      \"description\": \"Sensitivity parameter scaling the linear difference R_diff for R_val < 1.0.\",\n      \"range\": {\n        \"min\": -10.0,\n        \"max\": 10.0\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Utility of accepting the proposed offer.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nThe model predicts the utility of accepting an offer for the responder using a piecewise function based on the ratio of the proposed percentage share to the participant's calculated fair percentage share (R_val). For offers where R_val is greater than or equal to 1.0 (fair or favorable), utility is determined by the logarithm of R_val scaled by the learnable parameter beta_gain_log. For offers where R_val is less than 1.0 (unfair), utility is determined by the linear difference (R_val - 1.0) scaled by the learnable parameter beta_loss_linear_diff. This piecewise hybrid structure aims to capture distinct sensitivities to gains and losses relative to the fairness reference point using exactly two identifiable learnable parameters.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: sum_tokens = token_self + token_opp\nfair_perc_self_calc = IF(sum_tokens > 0, (token_self / sum_tokens) * 100.0, 50.0)\nepsilon_val = 1e-6\nR_val = (split_perc_self + epsilon_val) / (fair_perc_self_calc + epsilon_val)\nR_diff = R_val - 1.0\nU = IF(R_val >= 1.0, beta_gain_log * log(R_val), beta_loss_linear_diff * R_diff)\nSummary: The model predicts the utility of accepting an offer for the responder using a piecewise function based on the ratio of the proposed percentage share to the participant's calculated fair percentage share (R_val). For offers where R_val is greater than or equal to 1.0 (fair or favorable), utility is determined by the logarithm of R_val scaled by the learnable parameter beta_gain_log. For offers where R_val is less than 1.0 (unfair), utility is determined by the linear difference (R_val - 1.0) scaled by the learnable parameter beta_loss_linear_diff. This piecewise hybrid structure aims to capture distinct sensitivities to gains and losses relative to the fairness reference point using exactly two identifiable learnable parameters.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, beta_gain_log=1.0, beta_loss_linear_diff=1.0):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        split_perc_self = trial.get(\"splitperc_self\", 0)\n\n        sum_tokens = token_self + token_opp\n        fair_perc_self_calc = (token_self / sum_tokens) * 100.0 if sum_tokens > 0 else 50.0\n        epsilon_val = 1e-6\n        R_val = (split_perc_self + epsilon_val) / (fair_perc_self_calc + epsilon_val)\n        R_diff = R_val - 1.0\n\n        if R_val >= 1.0:\n            U = beta_gain_log * math.log(R_val)\n        else:\n            U = beta_loss_linear_diff * R_diff\n        \n        model_predictions.append(U)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.6874236874236874,
  "group_accuracies": {
    "Control": 0.7177002583979328,
    "Cocaine": 0.6603009259259259
  },
  "group_parameter_averages": {
    "Control": {
      "beta_gain_log": 9.47047054377877,
      "beta_loss_linear_diff": -0.8636796950142213
    },
    "Cocaine": {
      "beta_gain_log": 7.542718485388669,
      "beta_loss_linear_diff": 1.730749621010374
    }
  },
  "fitting_results": [
    {
      "beta_gain_log": 2.4100833948176357,
      "beta_loss_linear_diff": 10.0,
      "success": true,
      "log_likelihood": -6.984811647590765,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_log": 10.0,
      "beta_loss_linear_diff": 1.6825973996762202,
      "success": true,
      "log_likelihood": -21.448146810125365,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_log": 10.0,
      "beta_loss_linear_diff": 1.7177685765839068,
      "success": true,
      "log_likelihood": -21.363139056315067,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_log": 10.0,
      "beta_loss_linear_diff": 2.5504789543198303,
      "success": true,
      "log_likelihood": -19.159005125625157,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_log": 10.0,
      "beta_loss_linear_diff": 2.6202001654617035,
      "success": true,
      "log_likelihood": -18.965115179095804,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_log": 10.0,
      "beta_loss_linear_diff": 0.48678785916472445,
      "success": true,
      "log_likelihood": -23.51971347924015,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_log": 10.0,
      "beta_loss_linear_diff": -10.0,
      "success": true,
      "log_likelihood": -3.3954824006343385,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_log": 10.0,
      "beta_loss_linear_diff": 0.23745831477864987,
      "success": true,
      "log_likelihood": -23.682510504702996,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_log": 10.0,
      "beta_loss_linear_diff": -10.0,
      "success": true,
      "log_likelihood": -3.395482400634339,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_log": 10.0,
      "beta_loss_linear_diff": 3.2817106402635625,
      "success": true,
      "log_likelihood": -17.129140649223753,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_log": 10.0,
      "beta_loss_linear_diff": 2.883080719514428,
      "success": true,
      "log_likelihood": -18.23189426251912,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_log": 2.410078423354066,
      "beta_loss_linear_diff": 9.168892319182632,
      "success": true,
      "log_likelihood": -8.205699793240125,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_log": 10.0,
      "beta_loss_linear_diff": 3.0519557381552564,
      "success": true,
      "log_likelihood": -17.762175697975387,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_log": 10.0,
      "beta_loss_linear_diff": -10.0,
      "success": true,
      "log_likelihood": -3.395482400634339,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_log": 10.0,
      "beta_loss_linear_diff": -10.0,
      "success": true,
      "log_likelihood": -3.395482400634338,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_log": 10.0,
      "beta_loss_linear_diff": -10.0,
      "success": true,
      "log_likelihood": -3.395482400634339,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_log": 10.0,
      "beta_loss_linear_diff": -10.0,
      "success": true,
      "log_likelihood": -3.39548240063434,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_log": 10.0,
      "beta_loss_linear_diff": -1.9806352087053005,
      "success": true,
      "log_likelihood": -20.701105277833907,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_log": 10.0,
      "beta_loss_linear_diff": -2.6280545386004075,
      "success": true,
      "log_likelihood": -18.943247515831416,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_log": 10.0,
      "beta_loss_linear_diff": -10.0,
      "success": true,
      "log_likelihood": -3.395482400634339,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_log": 10.0,
      "beta_loss_linear_diff": 1.2677220351361822,
      "success": true,
      "log_likelihood": -22.367921209193657,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_log": 10.0,
      "beta_loss_linear_diff": -2.1102723798012892,
      "success": true,
      "log_likelihood": -20.36026828510574,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_log": 10.0,
      "beta_loss_linear_diff": 2.659684931263324,
      "success": true,
      "log_likelihood": -18.85511949208704,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_log": 10.0,
      "beta_loss_linear_diff": 1.2941432715575218,
      "success": true,
      "log_likelihood": -22.314549563894296,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_log": 10.0,
      "beta_loss_linear_diff": 1.7831495579499759,
      "success": true,
      "log_likelihood": -21.202689399562228,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_log": 10.0,
      "beta_loss_linear_diff": 1.016169327290828,
      "success": true,
      "log_likelihood": -22.83378574326256,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_log": 10.0,
      "beta_loss_linear_diff": 1.3313939228294185,
      "success": true,
      "log_likelihood": -22.237972872450445,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_log": 10.0,
      "beta_loss_linear_diff": 6.028483625681052,
      "success": true,
      "log_likelihood": -10.95351655009258,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_log": 10.0,
      "beta_loss_linear_diff": -2.8917191688023176,
      "success": true,
      "log_likelihood": -18.207832641640906,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_log": 10.0,
      "beta_loss_linear_diff": -1.2257605224712804,
      "success": true,
      "log_likelihood": -22.451035219945165,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_log": 10.0,
      "beta_loss_linear_diff": -10.0,
      "success": true,
      "log_likelihood": -3.3954824006343394,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_log": 2.410071564315412,
      "beta_loss_linear_diff": 10.0,
      "success": true,
      "log_likelihood": -6.984811647593886,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_log": 10.0,
      "beta_loss_linear_diff": 1.8375539434579622,
      "success": true,
      "log_likelihood": -21.06691830457345,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_log": 10.0,
      "beta_loss_linear_diff": 2.9529129911065244,
      "success": true,
      "log_likelihood": -18.037371001572026,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_log": 10.0,
      "beta_loss_linear_diff": -10.0,
      "success": true,
      "log_likelihood": -3.3954824006343394,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_log": 10.0,
      "beta_loss_linear_diff": 0.3155151168414744,
      "success": true,
      "log_likelihood": -23.643345283395217,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_log": 10.0,
      "beta_loss_linear_diff": 0.04558702781930875,
      "success": true,
      "log_likelihood": -23.73201470451481,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_log": 10.0,
      "beta_loss_linear_diff": 1.7592364068827695,
      "success": true,
      "log_likelihood": -21.261728731248922,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_log": 10.0,
      "beta_loss_linear_diff": -0.04558689076622496,
      "success": true,
      "log_likelihood": -23.73201470488331,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_log": 10.0,
      "beta_loss_linear_diff": -3.739923730753843,
      "success": true,
      "log_likelihood": -15.902723972990955,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_log": 10.0,
      "beta_loss_linear_diff": 0.44956133010379784,
      "success": true,
      "log_likelihood": -23.550924435292774,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_log": 10.0,
      "beta_loss_linear_diff": 5.970162376579676,
      "success": true,
      "log_likelihood": -11.05350344332815,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_log": 10.0,
      "beta_loss_linear_diff": -8.908480997311583,
      "success": true,
      "log_likelihood": -7.342291395131675,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_log": 10.0,
      "beta_loss_linear_diff": 1.05135805552469,
      "success": true,
      "log_likelihood": -22.773483996965965,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_log": 10.0,
      "beta_loss_linear_diff": 0.6988380283263484,
      "success": true,
      "log_likelihood": -23.2975628136994,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_log": 10.0,
      "beta_loss_linear_diff": -0.7900318082219819,
      "success": true,
      "log_likelihood": -23.17970889413727,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_log": 10.0,
      "beta_loss_linear_diff": 1.4014326563014583,
      "success": true,
      "log_likelihood": -22.089955064767462,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_log": 10.0,
      "beta_loss_linear_diff": 2.3579827069225776,
      "success": true,
      "log_likelihood": -19.690527192259033,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_log": 10.0,
      "beta_loss_linear_diff": 2.7159079126194055,
      "success": true,
      "log_likelihood": -18.698336785750747,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_log": 2.410065604963171,
      "beta_loss_linear_diff": 0.3109108499487726,
      "success": true,
      "log_likelihood": -24.73528469404138,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_log": 10.0,
      "beta_loss_linear_diff": -0.5616289649769086,
      "success": true,
      "log_likelihood": -23.449825112602543,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_log": 2.4100922636613933,
      "beta_loss_linear_diff": 6.149200755925331,
      "success": true,
      "log_likelihood": -11.839900220276482,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_log": 10.0,
      "beta_loss_linear_diff": 1.1071282310759403,
      "success": true,
      "log_likelihood": -22.674557954546867,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_log": 2.410286460691167,
      "beta_loss_linear_diff": -0.013722681544287385,
      "success": true,
      "log_likelihood": -24.823072449955934,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_log": 10.0,
      "beta_loss_linear_diff": 2.2731740708675257,
      "success": true,
      "log_likelihood": -19.92206517736491,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_log": 10.0,
      "beta_loss_linear_diff": 4.582343469396626,
      "success": true,
      "log_likelihood": -13.833865122657103,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_log": 10.0,
      "beta_loss_linear_diff": 4.959532099559353,
      "success": true,
      "log_likelihood": -12.99977700861653,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_log": 10.0,
      "beta_loss_linear_diff": -5.620280667524185,
      "success": true,
      "log_likelihood": -11.680889146442869,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_log": 2.4100521462727302,
      "beta_loss_linear_diff": 8.446932051525073,
      "success": true,
      "log_likelihood": -8.865206212858867,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_log": 10.0,
      "beta_loss_linear_diff": -1.6304578245639543,
      "success": true,
      "log_likelihood": -21.572381898348358,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_log": 10.0,
      "beta_loss_linear_diff": 0.20082515336511916,
      "success": true,
      "log_likelihood": -23.69711962307491,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_log": 10.0,
      "beta_loss_linear_diff": 1.7831486516326374,
      "success": true,
      "log_likelihood": -21.202689418716023,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_log": 2.4100498500509717,
      "beta_loss_linear_diff": 10.0,
      "success": true,
      "log_likelihood": -6.984811647614398,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_log": 10.0,
      "beta_loss_linear_diff": 1.5115098092378743,
      "success": true,
      "log_likelihood": -21.847251035402497,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_log": 10.0,
      "beta_loss_linear_diff": 5.999160065481517,
      "success": true,
      "log_likelihood": -11.003631497397214,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_log": 10.0,
      "beta_loss_linear_diff": 1.2571968680044237,
      "success": true,
      "log_likelihood": -22.38896217273004,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_log": 10.0,
      "beta_loss_linear_diff": -3.646130029186443,
      "success": true,
      "log_likelihood": -16.14890647689556,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_log": 10.0,
      "beta_loss_linear_diff": -2.343681193982619,
      "success": true,
      "log_likelihood": -19.729707627380233,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_log": 10.0,
      "beta_loss_linear_diff": 1.0011563050429286,
      "success": true,
      "log_likelihood": -22.859002236469095,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_log": 10.0,
      "beta_loss_linear_diff": -4.239905804164965,
      "success": true,
      "log_likelihood": -14.64185785786487,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_log": 10.0,
      "beta_loss_linear_diff": 10.0,
      "success": true,
      "log_likelihood": -3.3954824006343385,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_log": 2.4100668058684276,
      "beta_loss_linear_diff": 6.211731341241423,
      "success": true,
      "log_likelihood": -11.736894654866754,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_log": 10.0,
      "beta_loss_linear_diff": 1.2362169308841275,
      "success": true,
      "log_likelihood": -22.43051876638775,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_log": 10.0,
      "beta_loss_linear_diff": -1.3851669746307869,
      "success": true,
      "log_likelihood": -22.124787393823116,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_log": -2.4101105969449246,
      "beta_loss_linear_diff": 0.8873366101295251,
      "success": true,
      "log_likelihood": -24.129277294059047,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_log": 10.0,
      "beta_loss_linear_diff": -0.1871004115535655,
      "success": true,
      "log_likelihood": -23.7019686760528,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_log": 10.0,
      "beta_loss_linear_diff": -4.94022624125351,
      "success": true,
      "log_likelihood": -13.041025925101389,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_log": -10.0,
      "beta_loss_linear_diff": 7.386787888543593,
      "success": true,
      "log_likelihood": -8.958467612941298,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_log": 10.0,
      "beta_loss_linear_diff": -0.2512110673011813,
      "success": true,
      "log_likelihood": -23.676402165150602,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_log": 2.410076967545695,
      "beta_loss_linear_diff": 10.0,
      "success": true,
      "log_likelihood": -6.984811647591755,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_log": 10.0,
      "beta_loss_linear_diff": 0.49611337350037915,
      "success": true,
      "log_likelihood": -23.51152265213431,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_log": 10.0,
      "beta_loss_linear_diff": -5.4033642643361555,
      "success": true,
      "log_likelihood": -12.094160447152833,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_log": -10.0,
      "beta_loss_linear_diff": 7.538046217975753,
      "success": true,
      "log_likelihood": -8.771924403398584,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_log": 10.0,
      "beta_loss_linear_diff": 1.7891533618072668,
      "success": true,
      "log_likelihood": -21.18780483312656,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_log": 10.0,
      "beta_loss_linear_diff": -0.28333561728966405,
      "success": true,
      "log_likelihood": -23.66081148921884,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_log": 10.0,
      "beta_loss_linear_diff": 10.0,
      "success": true,
      "log_likelihood": -5.895482361924296,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_log": 10.0,
      "beta_loss_linear_diff": -0.46350697355509857,
      "success": true,
      "log_likelihood": -23.53951111703489,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_log": -2.410092203452521,
      "beta_loss_linear_diff": 5.35755462975266,
      "success": true,
      "log_likelihood": -13.273163074689238,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_log": 10.0,
      "beta_loss_linear_diff": -4.7194382912320405,
      "success": true,
      "log_likelihood": -13.523847438851393,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_log": 10.0,
      "beta_loss_linear_diff": 1.7711731124929357,
      "success": true,
      "log_likelihood": -21.232308728531034,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_log": 10.0,
      "beta_loss_linear_diff": -0.9266805832699604,
      "success": true,
      "log_likelihood": -22.979482097649218,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "beta_gain_log": {
        "r": 0.6988921612051353,
        "p": 6.192662195257266e-16
      },
      "beta_loss_linear_diff": {
        "r": 0.9703758582916148,
        "p": 2.8943977718223806e-62
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 40.60060666209781,
  "bic_Control": 38.08552090978607,
  "bic_Cocaine": 42.85370431521041,
  "bic_results": {
    "average_bic": 40.60060666209781,
    "individual_bics": [
      21.13666117209375,
      50.06333149716295,
      49.89331598954235,
      45.48504812816253,
      45.097268235103826,
      54.20646483539252,
      13.958002678180897,
      54.53205888631821,
      13.958002678180897,
      41.425319175359725,
      43.63082640195046,
      23.57843746339247,
      42.69138927286299,
      13.958002678180897,
      13.958002678180897,
      13.958002678180897,
      13.9580026781809,
      48.56924843258003,
      45.05353290857505,
      13.958002678180897,
      51.90288029529953,
      47.8875744471237,
      44.8772768610863,
      51.79613700470081,
      49.572416676036674,
      52.83460936343734,
      51.64298362181311,
      29.074070977097378,
      43.58270316019403,
      52.06910831680255,
      13.958002678180899,
      21.13666117209999,
      49.300874486059115,
      43.24177988005627,
      13.958002678180899,
      54.45372844370265,
      54.63106728594184,
      49.69049533941006,
      54.631067286678835,
      38.97248582289413,
      54.26888674749777,
      29.27404476356852,
      21.85162066717557,
      52.71400587084415,
      53.76216350431102,
      53.52645566518676,
      51.34694800644714,
      46.548092261430284,
      44.56371144841371,
      56.637607264994976,
      54.066688102117304,
      30.846838317465185,
      52.51615378600595,
      56.813182776824085,
      47.01116823164204,
      34.83476812222643,
      33.16659189414528,
      30.528816169797956,
      24.897450302629956,
      50.31180167360893,
      54.56127712306204,
      49.572416714344264,
      21.136661172141018,
      50.86153994771721,
      29.17430087170665,
      51.9449622223723,
      39.46485083070334,
      46.62645313167268,
      52.88504234985041,
      36.45075359264196,
      13.958002678180897,
      30.64082718664573,
      52.028075409687716,
      51.41661266455845,
      55.42559246503031,
      54.57097522901782,
      33.249089727115,
      25.083973102794815,
      54.51984220721342,
      21.136661172095728,
      54.19008318118084,
      31.355358771217887,
      24.71088668370939,
      49.54264754316534,
      54.4886608553499,
      18.958002600760814,
      54.246060110982,
      33.7133640262907,
      34.21473275461501,
      49.63165533397429,
      53.12600207221065
    ],
    "group_enabled": true,
    "group_bics": {
      "Control": [
        21.13666117209375,
        50.06333149716295,
        49.89331598954235,
        45.48504812816253,
        45.097268235103826,
        54.20646483539252,
        13.958002678180897,
        54.53205888631821,
        13.958002678180897,
        41.425319175359725,
        43.63082640195046,
        23.57843746339247,
        42.69138927286299,
        13.958002678180897,
        13.958002678180897,
        13.958002678180897,
        13.9580026781809,
        48.56924843258003,
        45.05353290857505,
        13.958002678180897,
        51.90288029529953,
        47.8875744471237,
        44.8772768610863,
        51.79613700470081,
        49.572416676036674,
        52.83460936343734,
        51.64298362181311,
        29.074070977097378,
        43.58270316019403,
        52.06910831680255,
        13.958002678180899,
        21.13666117209999,
        49.300874486059115,
        43.24177988005627,
        13.958002678180899,
        54.45372844370265,
        54.63106728594184,
        49.69049533941006,
        54.631067286678835,
        38.97248582289413,
        54.26888674749777,
        29.27404476356852,
        21.85162066717557
      ],
      "Cocaine": [
        52.71400587084415,
        53.76216350431102,
        53.52645566518676,
        51.34694800644714,
        46.548092261430284,
        44.56371144841371,
        56.637607264994976,
        54.066688102117304,
        30.846838317465185,
        52.51615378600595,
        56.813182776824085,
        47.01116823164204,
        34.83476812222643,
        33.16659189414528,
        30.528816169797956,
        24.897450302629956,
        50.31180167360893,
        54.56127712306204,
        49.572416714344264,
        21.136661172141018,
        50.86153994771721,
        29.17430087170665,
        51.9449622223723,
        39.46485083070334,
        46.62645313167268,
        52.88504234985041,
        36.45075359264196,
        13.958002678180897,
        30.64082718664573,
        52.028075409687716,
        51.41661266455845,
        55.42559246503031,
        54.57097522901782,
        33.249089727115,
        25.083973102794815,
        54.51984220721342,
        21.136661172095728,
        54.19008318118084,
        31.355358771217887,
        24.71088668370939,
        49.54264754316534,
        54.4886608553499,
        18.958002600760814,
        54.246060110982,
        33.7133640262907,
        34.21473275461501,
        49.63165533397429,
        53.12600207221065
      ]
    },
    "num_parameters": 2,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- beta_gain_log: r = 0.699\n- beta_loss_linear_diff: r = 0.970",
  "previous_models": [
    "Specification: sum_tokens = token_self + token_opp\nfair_perc_self_calc = IF(sum_tokens > 0, (token_self / sum_tokens) * 100.0, 50.0)\nepsilon_val = 1e-6\nR_val = (split_perc_self + epsilon_val) / (fair_perc_self_calc + epsilon_val)\nR_diff = R_val - 1.0\nU = IF(R_val >= 1.0, beta_gain_log * log(R_val), beta_loss_linear_diff * R_diff)\nSummary: The model predicts the utility of accepting an offer for the responder using a piecewise function based on the ratio of the proposed percentage share to the participant's calculated fair percentage share (R_val). For offers where R_val is greater than or equal to 1.0 (fair or favorable), utility is determined by the logarithm of R_val scaled by the learnable parameter beta_gain_log. For offers where R_val is less than 1.0 (unfair), utility is determined by the linear difference (R_val - 1.0) scaled by the learnable parameter beta_loss_linear_diff. This piecewise hybrid structure aims to capture distinct sensitivities to gains and losses relative to the fairness reference point using exactly two identifiable learnable parameters.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 40.60060666209781\nOverall Accuracy: 0.6874\nGroup Accuracies:\n- Control: 0.7177\n- Cocaine: 0.6603\n\nParameter Recovery:\n- beta_gain_log: r = 0.699\n- beta_loss_linear_diff: r = 0.970"
  ]
}