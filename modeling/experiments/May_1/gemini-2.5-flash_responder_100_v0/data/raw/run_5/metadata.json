{
  "task_description": "In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "<new_instructions>Design a computational model for the described ultimatum game responder task. Your model must meet the following criteria:\n1.  **Predict only responder behavior** (target variable: \"accept\").\n2.  **Achieve excellent parameter recovery (>= 0.7 correlation) for ALL learnable parameters.** This is the *single most important* objective. A model is unusable if any learnable parameter cannot be reliably recovered. Models that do not meet this threshold will be rejected regardless of other performance metrics (BIC, accuracy). Prioritize model structures that inherently enhance parameter identifiability from the data.\n3.  **Be applicable to the dataset:** Use only the provided data structure and variables available during responder trials (trial_role == 1).\n4.  **Predict utility:** Utility values will be converted to acceptance probabilities using a logistic function (with temperature 1). A utility > 0 implies > 50% probability of acceptance.\n\n**Addressing Past Failures:** Previous model attempts, particularly those using simple linear combinations of features or mixing absolute (\u00a3) and percentage (%) values in the utility function, have consistently failed to achieve adequate parameter recovery. The parameters' influences were likely too correlated or not distinct enough given the data structure.\n\n**Guidance for the Next Model (Prioritizing Parameter Recovery):**\n\n*   **Consistent Scaling:** Given the variable `combined_earning` across trials, using percentages (`split_perc_self`) is likely a more robust approach for calculating utility related to the proposed offer and fairness deviations. **Strongly consider calculating *all* components of the utility function that relate to the offer amount and fairness deviations using percentages** (e.g., basing the 'self-interest' term on `split_perc_self` rather than `split_self`). This provides a consistent scale and may improve parameter identifiability.\n*   **Break Away from Linearity:** Standard linear additive models (e.g., `U = beta1*X1 + beta2*X2 + ...`) have proven insufficient for parameter recovery here. **Design a model with non-linear functional forms or non-additive interactions between components.** For example:\n    *   Instead of linear penalties for fairness deviations, explore quadratic penalties (e.g., `beta * max(0, norm - split_perc_self)^2`).\n    *   Consider parameters that modulate the strength or effect of other terms or variables in a non-linear way.\n    *   Explore reference-dependent utility where utility is explicitly a function of deviations from norms, but perhaps the sensitivity to positive vs. negative deviations is different, or the deviation itself is transformed non-linearly.\n    *   Think about how parameters could interact in a multiplicative or gating fashion, *if* this interaction helps make their individual influences distinct (be cautious of introducing more collinearity).\n*   **Ensure Distinct Parameter Influences:** Carefully define how each learnable parameter contributes to the overall utility. The contribution of one parameter should not be easily explained by a combination of other parameters. This is key to achieving parameter recovery.\n*   **Minimum Necessary Parameters (for identifiability):** While the structure is more important than just the count, a model with fewer, well-identified parameters is preferable to one with many poorly-identified parameters. Strive for parsimony *while ensuring identifiability*.\n\nFor any learnable parameters, you must specify generous, finite numerical bounds. The utility variable may be unbounded (-inf to inf).\n\nProvide your formal mathematical model between <MODEL> tags. Ensure *only* the mathematical formula is within these tags.\nProvide variable descriptions in JSON format between <VARIABLES> tags. Ensure learnable parameter names are clear and suitable for coding. Spell out Greek variables.\nSpecify the target variable using <target_variable> tags.\nProvide a concise, descriptive summary of the model between <SUMMARY> tags.\n\nAvailable Data Variables:\n- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.\nRemember to only model responder trials (where trial_role == 1).\n\nFirst, reason step by step about:\n*   The key psychological mechanisms involved in responder decisions (self-interest, aversion to 50% split unfairness, aversion to proportional split unfairness).\n*   **Crucial Design Choice:** How to consistently scale the offer and fairness terms. **Strongly advocate for and implement a model that uses *only* percentages (`split_perc_self`)** for all offer-related components in the utility function to improve consistency and potential identifiability across varying `combined_earning`.\n*   **Mandatory Non-linear Structure:** How to incorporate non-linear functional forms or interactions into the utility calculation (e.g., quadratic penalties, non-linear parameter interactions) to ensure parameter identifiability and break away from failed linear approaches.\n*   How the learnable parameters are defined to have maximally distinct and identifiable effects on utility, minimizing covariance.\n*   What is the *minimum necessary* set of learnable parameters that can robustly capture the essential aspects of the behavior while prioritizing parameter identifiability (>= 0.7 recovery)?\n*   How the model variables map to observable behavior (\"accept\") via the logistic function.\n\nPlease think through this step by step, focusing intently on how the model structure guarantees parameter identifiability, then provide your model specification, variable descriptions, target variable, and summary.\n</new_instructions>",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: <new_instructions>Design a computational model for the described ultimatum game responder task. Your model must meet the following criteria:\n1.  **Predict only responder behavior** (target variable: \"accept\").\n2.  **Achieve excellent parameter recovery (>= 0.7 correlation) for ALL learnable parameters.** This is the *single most important* objective. A model is unusable if any learnable parameter cannot be reliably recovered. Models that do not meet this threshold will be rejected regardless of other performance metrics (BIC, accuracy). Prioritize model structures that inherently enhance parameter identifiability from the data.\n3.  **Be applicable to the dataset:** Use only the provided data structure and variables available during responder trials (trial_role == 1).\n4.  **Predict utility:** Utility values will be converted to acceptance probabilities using a logistic function (with temperature 1). A utility > 0 implies > 50% probability of acceptance.\n\n**Addressing Past Failures:** Previous model attempts, particularly those using simple linear combinations of features or mixing absolute (\u00a3) and percentage (%) values in the utility function, have consistently failed to achieve adequate parameter recovery. The parameters' influences were likely too correlated or not distinct enough given the data structure.\n\n**Guidance for the Next Model (Prioritizing Parameter Recovery):**\n\n*   **Consistent Scaling:** Given the variable `combined_earning` across trials, using percentages (`split_perc_self`) is likely a more robust approach for calculating utility related to the proposed offer and fairness deviations. **Strongly consider calculating *all* components of the utility function that relate to the offer amount and fairness deviations using percentages** (e.g., basing the 'self-interest' term on `split_perc_self` rather than `split_self`). This provides a consistent scale and may improve parameter identifiability.\n*   **Break Away from Linearity:** Standard linear additive models (e.g., `U = beta1*X1 + beta2*X2 + ...`) have proven insufficient for parameter recovery here. **Design a model with non-linear functional forms or non-additive interactions between components.** For example:\n    *   Instead of linear penalties for fairness deviations, explore quadratic penalties (e.g., `beta * max(0, norm - split_perc_self)^2`).\n    *   Consider parameters that modulate the strength or effect of other terms or variables in a non-linear way.\n    *   Explore reference-dependent utility where utility is explicitly a function of deviations from norms, but perhaps the sensitivity to positive vs. negative deviations is different, or the deviation itself is transformed non-linearly.\n    *   Think about how parameters could interact in a multiplicative or gating fashion, *if* this interaction helps make their individual influences distinct (be cautious of introducing more collinearity).\n*   **Ensure Distinct Parameter Influences:** Carefully define how each learnable parameter contributes to the overall utility. The contribution of one parameter should not be easily explained by a combination of other parameters. This is key to achieving parameter recovery.\n*   **Minimum Necessary Parameters (for identifiability):** While the structure is more important than just the count, a model with fewer, well-identified parameters is preferable to one with many poorly-identified parameters. Strive for parsimony *while ensuring identifiability*.\n\nFor any learnable parameters, you must specify generous, finite numerical bounds. The utility variable may be unbounded (-inf to inf).\n\nProvide your formal mathematical model between <MODEL> tags. Ensure *only* the mathematical formula is within these tags.\nProvide variable descriptions in JSON format between <VARIABLES> tags. Ensure learnable parameter names are clear and suitable for coding. Spell out Greek variables.\nSpecify the target variable using <target_variable> tags.\nProvide a concise, descriptive summary of the model between <SUMMARY> tags.\n\nAvailable Data Variables:\n- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.\nRemember to only model responder trials (where trial_role == 1).\n\nFirst, reason step by step about:\n*   The key psychological mechanisms involved in responder decisions (self-interest, aversion to 50% split unfairness, aversion to proportional split unfairness).\n*   **Crucial Design Choice:** How to consistently scale the offer and fairness terms. **Strongly advocate for and implement a model that uses *only* percentages (`split_perc_self`)** for all offer-related components in the utility function to improve consistency and potential identifiability across varying `combined_earning`.\n*   **Mandatory Non-linear Structure:** How to incorporate non-linear functional forms or interactions into the utility calculation (e.g., quadratic penalties, non-linear parameter interactions) to ensure parameter identifiability and break away from failed linear approaches.\n*   How the learnable parameters are defined to have maximally distinct and identifiable effects on utility, minimizing covariance.\n*   What is the *minimum necessary* set of learnable parameters that can robustly capture the essential aspects of the behavior while prioritizing parameter identifiability (>= 0.7 recovery)?\n*   How the model variables map to observable behavior (\"accept\") via the logistic function.\n\nPlease think through this step by step, focusing intently on how the model structure guarantees parameter identifiability, then provide your model specification, variable descriptions, target variable, and summary.\n</new_instructions>\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "Okay, here is the computational model for the responder task in the ultimatum game, designed with parameter recovery and non-linearity in mind, and using consistent percentage scaling.\n\n```json\n<MODEL>\nfair_perc_self = token_self / (token_self + token_opp)\nreference_perc = alpha * 0.5 + (1 - alpha) * fair_perc_self\ndeviation_below_reference = max(0, reference_perc - split_perc_self)\nutility = beta_base + beta_split * split_perc_self - beta_unfairness * deviation_below_reference^2\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"utility\": {\n      \"description\": \"Calculated utility for accepting the proposed split.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_base\": {\n      \"description\": \"Baseline utility or inherent acceptance bias.\",\n      \"range\": {\n        \"min\": -10.0,\n        \"max\": 10.0\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_split\": {\n      \"description\": \"Sensitivity to the proposed percentage share for self.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 20.0\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_unfairness\": {\n      \"description\": \"Sensitivity to the quadratic penalty for receiving less than the reference percentage.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 20.0\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"alpha\": {\n      \"description\": \"Weight parameter determining the influence of the 50% norm versus the proportional share norm on the reference point.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 1.0\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The proposed share for the participant in percentage of the combined earning.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 1.0\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"fair_perc_self\": {\n      \"description\": \"The participant's proportional share of the combined earning based on their token contribution relative to the total tokens.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 1.0\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n     \"reference_perc\": {\n      \"description\": \"The dynamic reference point percentage, calculated as a weighted average of the 50% norm and the proportional fair share, weighted by alpha.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 1.0\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"deviation_below_reference\": {\n      \"description\": \"The difference between the reference percentage and the proposed percentage for self, clamped at 0 if the proposed percentage is higher than the reference.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 1.0\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA reference-dependent utility model for responder decisions, using only percentage-based values for fairness and offer evaluation. Utility is a function of a baseline parameter, the linear gain from the proposed percentage share, and a non-linear (quadratic) penalty for receiving less than a dynamic reference percentage. The reference percentage is a weighted average of the 50% equal split norm and the participant's proportional share based on contributions, with the weighting governed by a learnable parameter 'alpha'. This non-linear structure and dynamic reference point are designed to improve parameter identifiability. The model has four learnable parameters: a base utility (beta_base), sensitivity to the proposed split (beta_split), sensitivity to unfairness (beta_unfairness), and the weight for the reference point (alpha).\n</SUMMARY>\n```"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['beta_base', 'beta_split', 'beta_unfairness', 'alpha']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                fair_perc_self = token_self / (token_self + token_opp)\nreference_perc = alpha * 0.5 + (1 - alpha) * fair_perc_self\ndeviation_below_reference = max(0, reference_perc - split_perc_self)\nutility = beta_base + beta_split * split_perc_self - beta_unfairness * deviation_below_reference^2\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"utility\": {\n      \"description\": \"Calculated utility for accepting the proposed split.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_base\": {\n      \"description\": \"Baseline utility or inherent acceptance bias.\",\n      \"range\": {\n        \"min\": -10.0,\n        \"max\": 10.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_split\": {\n      \"description\": \"Sensitivity to the proposed percentage share for self.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 20.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_unfairness\": {\n      \"description\": \"Sensitivity to the quadratic penalty for receiving less than the reference percentage.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 20.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"alpha\": {\n      \"description\": \"Weight parameter determining the influence of the 50% norm versus the proportional share norm on the reference point.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The proposed share for the participant in percentage of the combined earning.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"fair_perc_self\": {\n      \"description\": \"The participant's proportional share of the combined earning based on their token contribution relative to the total tokens.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"reference_perc\": {\n      \"description\": \"The dynamic reference point percentage, calculated as a weighted average of the 50% norm and the proportional fair share, weighted by alpha.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"deviation_below_reference\": {\n      \"description\": \"The difference between the reference percentage and the proposed percentage for self, clamped at 0 if the proposed percentage is higher than the reference.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "python\nimport json\nimport math\n\ndef simulate_model(trial_data, beta_base=0, beta_split=1, beta_unfairness=1, alpha=0.5):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        split_perc_self = trial.get(\"splitperc_self\", 0) / 100 #Converting Percentage\n        \n        # Calculations\n        total_tokens = token_self + token_opp\n        if total_tokens == 0:\n            fair_perc_self = 0.5  #Handle the case where both are zero.\n        else:\n            fair_perc_self = token_self / total_tokens\n            \n        reference_perc = alpha * 0.5 + (1 - alpha) * fair_perc_self\n        deviation_below_reference = max(0, reference_perc - split_perc_self)\n        utility = beta_base + beta_split * split_perc_self - beta_unfairness * (deviation_below_reference**2)\n        \n        model_predictions.append(utility)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n",
      "timestamp": 1746096225.689986
    }
  ],
  "learnable_parameters": {
    "beta_base": {
      "description": "Baseline utility or inherent acceptance bias.",
      "range": {
        "min": -10.0,
        "max": 10.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta_split": {
      "description": "Sensitivity to the proposed percentage share for self.",
      "range": {
        "min": 0.0,
        "max": 20.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta_unfairness": {
      "description": "Sensitivity to the quadratic penalty for receiving less than the reference percentage.",
      "range": {
        "min": 0.0,
        "max": 20.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "alpha": {
      "description": "Weight parameter determining the influence of the 50% norm versus the proportional share norm on the reference point.",
      "range": {
        "min": 0.0,
        "max": 1.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "fair_perc_self = token_self / (token_self + token_opp)\nreference_perc = alpha * 0.5 + (1 - alpha) * fair_perc_self\ndeviation_below_reference = max(0, reference_perc - split_perc_self)\nutility = beta_base + beta_split * split_perc_self - beta_unfairness * deviation_below_reference^2",
  "variable_descriptions": {
    "utility": {
      "description": "Calculated utility for accepting the proposed split.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "beta_base": {
      "description": "Baseline utility or inherent acceptance bias.",
      "range": {
        "min": -10.0,
        "max": 10.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta_split": {
      "description": "Sensitivity to the proposed percentage share for self.",
      "range": {
        "min": 0.0,
        "max": 20.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta_unfairness": {
      "description": "Sensitivity to the quadratic penalty for receiving less than the reference percentage.",
      "range": {
        "min": 0.0,
        "max": 20.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "alpha": {
      "description": "Weight parameter determining the influence of the 50% norm versus the proportional share norm on the reference point.",
      "range": {
        "min": 0.0,
        "max": 1.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "split_perc_self": {
      "description": "The proposed share for the participant in percentage of the combined earning.",
      "range": {
        "min": 0.0,
        "max": 1.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Number of tokens found by the participant.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "fair_perc_self": {
      "description": "The participant's proportional share of the combined earning based on their token contribution relative to the total tokens.",
      "range": {
        "min": 0.0,
        "max": 1.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "reference_perc": {
      "description": "The dynamic reference point percentage, calculated as a weighted average of the 50% norm and the proportional fair share, weighted by alpha.",
      "range": {
        "min": 0.0,
        "max": 1.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "deviation_below_reference": {
      "description": "The difference between the reference percentage and the proposed percentage for self, clamped at 0 if the proposed percentage is higher than the reference.",
      "range": {
        "min": 0.0,
        "max": 1.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "A reference-dependent utility model for responder decisions, using only percentage-based values for fairness and offer evaluation. Utility is a function of a baseline parameter, the linear gain from the proposed percentage share, and a non-linear (quadratic) penalty for receiving less than a dynamic reference percentage. The reference percentage is a weighted average of the 50% equal split norm and the participant's proportional share based on contributions, with the weighting governed by a learnable parameter 'alpha'. This non-linear structure and dynamic reference point are designed to improve parameter identifiability. The model has four learnable parameters: a base utility (beta_base), sensitivity to the proposed split (beta_split), sensitivity to unfairness (beta_unfairness), and the weight for the reference point (alpha).",
  "target_variable": "accept",
  "full_reasoning": "Okay, here is the computational model for the responder task in the ultimatum game, designed with parameter recovery and non-linearity in mind, and using consistent percentage scaling.\n\n```json\n<MODEL>\nfair_perc_self = token_self / (token_self + token_opp)\nreference_perc = alpha * 0.5 + (1 - alpha) * fair_perc_self\ndeviation_below_reference = max(0, reference_perc - split_perc_self)\nutility = beta_base + beta_split * split_perc_self - beta_unfairness * deviation_below_reference^2\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"utility\": {\n      \"description\": \"Calculated utility for accepting the proposed split.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_base\": {\n      \"description\": \"Baseline utility or inherent acceptance bias.\",\n      \"range\": {\n        \"min\": -10.0,\n        \"max\": 10.0\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_split\": {\n      \"description\": \"Sensitivity to the proposed percentage share for self.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 20.0\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_unfairness\": {\n      \"description\": \"Sensitivity to the quadratic penalty for receiving less than the reference percentage.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 20.0\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"alpha\": {\n      \"description\": \"Weight parameter determining the influence of the 50% norm versus the proportional share norm on the reference point.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 1.0\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The proposed share for the participant in percentage of the combined earning.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 1.0\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"fair_perc_self\": {\n      \"description\": \"The participant's proportional share of the combined earning based on their token contribution relative to the total tokens.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 1.0\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n     \"reference_perc\": {\n      \"description\": \"The dynamic reference point percentage, calculated as a weighted average of the 50% norm and the proportional fair share, weighted by alpha.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 1.0\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"deviation_below_reference\": {\n      \"description\": \"The difference between the reference percentage and the proposed percentage for self, clamped at 0 if the proposed percentage is higher than the reference.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 1.0\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA reference-dependent utility model for responder decisions, using only percentage-based values for fairness and offer evaluation. Utility is a function of a baseline parameter, the linear gain from the proposed percentage share, and a non-linear (quadratic) penalty for receiving less than a dynamic reference percentage. The reference percentage is a weighted average of the 50% equal split norm and the participant's proportional share based on contributions, with the weighting governed by a learnable parameter 'alpha'. This non-linear structure and dynamic reference point are designed to improve parameter identifiability. The model has four learnable parameters: a base utility (beta_base), sensitivity to the proposed split (beta_split), sensitivity to unfairness (beta_unfairness), and the weight for the reference point (alpha).\n</SUMMARY>\n```",
  "prediction_type": "utility",
  "current_model": "Specification: fair_perc_self = token_self / (token_self + token_opp)\nreference_perc = alpha * 0.5 + (1 - alpha) * fair_perc_self\ndeviation_below_reference = max(0, reference_perc - split_perc_self)\nutility = beta_base + beta_split * split_perc_self - beta_unfairness * deviation_below_reference^2\nSummary: A reference-dependent utility model for responder decisions, using only percentage-based values for fairness and offer evaluation. Utility is a function of a baseline parameter, the linear gain from the proposed percentage share, and a non-linear (quadratic) penalty for receiving less than a dynamic reference percentage. The reference percentage is a weighted average of the 50% equal split norm and the participant's proportional share based on contributions, with the weighting governed by a learnable parameter 'alpha'. This non-linear structure and dynamic reference point are designed to improve parameter identifiability. The model has four learnable parameters: a base utility (beta_base), sensitivity to the proposed split (beta_split), sensitivity to unfairness (beta_unfairness), and the weight for the reference point (alpha).\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, beta_base=0, beta_split=1, beta_unfairness=1, alpha=0.5):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        split_perc_self = trial.get(\"splitperc_self\", 0) / 100 #Converting Percentage\n        \n        # Calculations\n        total_tokens = token_self + token_opp\n        if total_tokens == 0:\n            fair_perc_self = 0.5  #Handle the case where both are zero.\n        else:\n            fair_perc_self = token_self / total_tokens\n            \n        reference_perc = alpha * 0.5 + (1 - alpha) * fair_perc_self\n        deviation_below_reference = max(0, reference_perc - split_perc_self)\n        utility = beta_base + beta_split * split_perc_self - beta_unfairness * (deviation_below_reference**2)\n        \n        model_predictions.append(utility)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.8025030525030524,
  "group_accuracies": {
    "Control": 0.8313953488372093,
    "Cocaine": 0.7766203703703703
  },
  "group_parameter_averages": {
    "Control": {
      "beta_base": -0.046931719260864375,
      "beta_split": 14.064994953643236,
      "beta_unfairness": 14.917373824852401,
      "alpha": 0.439556265939879
    },
    "Cocaine": {
      "beta_base": -3.191059401257503,
      "beta_split": 12.23954144518728,
      "beta_unfairness": 13.133778646315367,
      "alpha": 0.4357619180627295
    }
  },
  "fitting_results": [
    {
      "beta_base": -9.606776209219749,
      "beta_split": 20.0,
      "beta_unfairness": 20.0,
      "alpha": 0.9999999178417146,
      "success": true,
      "log_likelihood": -2.8286978716347257,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_base": -1.6694141403922544,
      "beta_split": 8.76611658085428,
      "beta_unfairness": 20.0,
      "alpha": 0.3640058986275066,
      "success": true,
      "log_likelihood": -16.963209175639065,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_base": -1.291073926527683,
      "beta_split": 8.375575935457226,
      "beta_unfairness": 20.0,
      "alpha": 0.0,
      "success": true,
      "log_likelihood": -12.451238183956294,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_base": -4.321316840818539,
      "beta_split": 15.553463972191793,
      "beta_unfairness": 20.0,
      "alpha": 0.0,
      "success": true,
      "log_likelihood": -13.486066615087879,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_base": -0.8857404538496382,
      "beta_split": 5.396942969767959,
      "beta_unfairness": 20.0,
      "alpha": 0.0,
      "success": true,
      "log_likelihood": -13.416339050362547,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_base": -3.80926818388423,
      "beta_split": 20.0,
      "beta_unfairness": 17.988257830315906,
      "alpha": 0.0430071401021155,
      "success": true,
      "log_likelihood": -11.298415410494773,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_base": 10.0,
      "beta_split": 20.0,
      "beta_unfairness": 3.615886245911175,
      "alpha": 1.0,
      "success": true,
      "log_likelihood": -4.322925618565509e-05,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_base": -2.253108138309921,
      "beta_split": 15.463620079528972,
      "beta_unfairness": 20.0,
      "alpha": 0.16062253402186796,
      "success": true,
      "log_likelihood": -11.79788632754435,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_base": 10.0,
      "beta_split": 18.392095323450178,
      "beta_unfairness": 4.6016551686503835,
      "alpha": 1.0,
      "success": true,
      "log_likelihood": -6.126421109158081e-05,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_base": -2.9030050973513237,
      "beta_split": 10.568247936518786,
      "beta_unfairness": 20.0,
      "alpha": 0.0,
      "success": true,
      "log_likelihood": -13.429402383860065,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_base": -4.608625123315806,
      "beta_split": 17.151880185366768,
      "beta_unfairness": 20.0,
      "alpha": 0.0,
      "success": true,
      "log_likelihood": -9.880762101474868,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_base": -8.977660483652064,
      "beta_split": 20.0,
      "beta_unfairness": 20.0,
      "alpha": 0.0,
      "success": true,
      "log_likelihood": -5.242932021581034,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_base": -4.321311456317579,
      "beta_split": 15.553442970867476,
      "beta_unfairness": 20.0,
      "alpha": 0.0,
      "success": true,
      "log_likelihood": -12.574955504080055,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_base": 10.0,
      "beta_split": 15.635228494436872,
      "beta_unfairness": 0.0,
      "alpha": 1.0,
      "success": true,
      "log_likelihood": -5.014960759613936e-05,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_base": 10.0,
      "beta_split": 17.726273333330045,
      "beta_unfairness": 0.0,
      "alpha": 1.0,
      "success": true,
      "log_likelihood": -3.636925010118356e-05,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_base": 10.0,
      "beta_split": 18.09095601305154,
      "beta_unfairness": 0.8598595554186684,
      "alpha": 1.0,
      "success": true,
      "log_likelihood": -3.856179065375706e-05,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_base": 10.0,
      "beta_split": 15.046966005148267,
      "beta_unfairness": 0.0,
      "alpha": 1.0,
      "success": true,
      "log_likelihood": -5.513683151947702e-05,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_base": -1.041723254149221,
      "beta_split": 20.0,
      "beta_unfairness": 20.0,
      "alpha": 0.4060604572281106,
      "success": true,
      "log_likelihood": -4.125989333069502,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_base": 0.9249901059238381,
      "beta_split": 14.376731228351009,
      "beta_unfairness": 20.0,
      "alpha": 0.0,
      "success": true,
      "log_likelihood": -4.928467155530093,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_base": 10.0,
      "beta_split": 19.325178302502547,
      "beta_unfairness": 2.0300430952907496,
      "alpha": 0.9983648099719178,
      "success": true,
      "log_likelihood": -3.796141759064677e-05,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_base": -1.1153206771219064,
      "beta_split": 8.41534082364772,
      "beta_unfairness": 20.0,
      "alpha": 0.0,
      "success": true,
      "log_likelihood": -14.858497006020762,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_base": 0.6779370683538015,
      "beta_split": 11.795175476826111,
      "beta_unfairness": 20.0,
      "alpha": 0.3782493100629178,
      "success": true,
      "log_likelihood": -8.063097197644662,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_base": -6.358739851300483,
      "beta_split": 20.0,
      "beta_unfairness": 20.0,
      "alpha": 1.0,
      "success": true,
      "log_likelihood": -10.10577162395767,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_base": -3.283002564019366,
      "beta_split": 14.375963614623615,
      "beta_unfairness": 18.307417298304596,
      "alpha": 0.6253462537355899,
      "success": true,
      "log_likelihood": -15.162679550990847,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_base": -0.06079789386562036,
      "beta_split": 3.791903191290411,
      "beta_unfairness": 20.0,
      "alpha": 0.0,
      "success": true,
      "log_likelihood": -16.101599171868997,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_base": -1.4741390720863747,
      "beta_split": 10.324827693321613,
      "beta_unfairness": 20.0,
      "alpha": 0.0,
      "success": true,
      "log_likelihood": -14.22942749150072,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_base": -4.632673851206566,
      "beta_split": 20.0,
      "beta_unfairness": 20.0,
      "alpha": 0.7303544750859666,
      "success": true,
      "log_likelihood": -8.162596432793425,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_base": -6.228127248082816,
      "beta_split": 17.80518301456238,
      "beta_unfairness": 20.0,
      "alpha": 0.0,
      "success": true,
      "log_likelihood": -9.921000686313544,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_base": 3.256965370707173,
      "beta_split": 3.1091911686799687,
      "beta_unfairness": 19.783057213406522,
      "alpha": 0.0,
      "success": true,
      "log_likelihood": -8.44397807008293,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_base": 1.1601084036526623,
      "beta_split": 4.4444053680995115,
      "beta_unfairness": 14.211688266705197,
      "alpha": 0.0,
      "success": true,
      "log_likelihood": -14.610250017203175,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_base": 10.0,
      "beta_split": 20.0,
      "beta_unfairness": 0.4999221739669789,
      "alpha": 0.8157475795983644,
      "success": true,
      "log_likelihood": -2.8118981824301898e-05,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_base": -9.606777205207035,
      "beta_split": 20.0,
      "beta_unfairness": 20.0,
      "alpha": 1.0,
      "success": true,
      "log_likelihood": -2.828697871635736,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_base": -5.907868824105241,
      "beta_split": 19.814290038835942,
      "beta_unfairness": 17.130219490549862,
      "alpha": 1.0,
      "success": true,
      "log_likelihood": -13.374857783254141,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_base": -5.625032063463087,
      "beta_split": 18.692662168502224,
      "beta_unfairness": 20.0,
      "alpha": 0.28149263303647054,
      "success": true,
      "log_likelihood": -12.57980452883828,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_base": 10.0,
      "beta_split": 17.817033795211668,
      "beta_unfairness": 0.4294528795638282,
      "alpha": 1.0,
      "success": true,
      "log_likelihood": -3.793401277792531e-05,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_base": -3.8768315742007844,
      "beta_split": 20.0,
      "beta_unfairness": 20.0,
      "alpha": 0.9570010228620096,
      "success": true,
      "log_likelihood": -10.028024602926635,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_base": -3.0702577885923525,
      "beta_split": 20.0,
      "beta_unfairness": 20.0,
      "alpha": 0.0,
      "success": true,
      "log_likelihood": -7.989313530664439,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_base": -1.092910977973374,
      "beta_split": 7.133508328856295,
      "beta_unfairness": 20.0,
      "alpha": 0.0010654210998624887,
      "success": true,
      "log_likelihood": -16.265260489230528,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_base": 0.9375082073679308,
      "beta_split": 3.3260236986651277,
      "beta_unfairness": 20.0,
      "alpha": 0.43230727493096105,
      "success": true,
      "log_likelihood": -17.536402999848978,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_base": -0.698962491301948,
      "beta_split": 13.4380087869061,
      "beta_unfairness": 1.989615250569409,
      "alpha": 0.0,
      "success": true,
      "log_likelihood": -8.03681258258258,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_base": -0.13977585285196098,
      "beta_split": 5.727607944554379,
      "beta_unfairness": 20.0,
      "alpha": 0.7072947072094218,
      "success": true,
      "log_likelihood": -18.013964201280785,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_base": -3.6707478391187256,
      "beta_split": 9.36080345729712,
      "beta_unfairness": 20.0,
      "alpha": 0.0,
      "success": true,
      "log_likelihood": -12.980432407324432,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_base": 3.555415998063076,
      "beta_split": 0.00013510595523042943,
      "beta_unfairness": 0.0,
      "alpha": 1.0,
      "success": true,
      "log_likelihood": -4.569499630905319,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_base": -4.645748523884817,
      "beta_split": 20.0,
      "beta_unfairness": 20.0,
      "alpha": 1.0,
      "success": true,
      "log_likelihood": -10.98738600833181,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_base": -3.4906820250501154,
      "beta_split": 18.161403657200765,
      "beta_unfairness": 20.0,
      "alpha": 0.15097451088775618,
      "success": true,
      "log_likelihood": -12.243590961331051,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_base": 0.9635175758457671,
      "beta_split": 4.193769808707256,
      "beta_unfairness": 20.0,
      "alpha": 0.9471643026826664,
      "success": true,
      "log_likelihood": -16.41644982830715,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_base": -4.89413840454234,
      "beta_split": 20.0,
      "beta_unfairness": 20.0,
      "alpha": 0.9867012314926961,
      "success": true,
      "log_likelihood": -11.416743245898877,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_base": -3.920459598888297,
      "beta_split": 12.013063752059157,
      "beta_unfairness": 5.801775072303174,
      "alpha": 0.0,
      "success": true,
      "log_likelihood": -18.233261723577293,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_base": -0.5218123910831266,
      "beta_split": 3.764800566961294,
      "beta_unfairness": 20.0,
      "alpha": 0.0,
      "success": true,
      "log_likelihood": -15.341829572201373,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_base": -2.345302339107236,
      "beta_split": 8.249346127896406,
      "beta_unfairness": 0.0,
      "alpha": 1.0,
      "success": true,
      "log_likelihood": -22.20542089882786,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_base": -1.9238371031877295,
      "beta_split": 10.639669298344192,
      "beta_unfairness": 3.6894560439209325,
      "alpha": 0.44748650795072975,
      "success": true,
      "log_likelihood": -17.78318735134974,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_base": -8.678271895804945,
      "beta_split": 20.0,
      "beta_unfairness": 20.0,
      "alpha": 1.0,
      "success": true,
      "log_likelihood": -6.710475765003989,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_base": -3.7406502448176133,
      "beta_split": 16.10290471797473,
      "beta_unfairness": 20.0,
      "alpha": 1.0,
      "success": true,
      "log_likelihood": -14.203866523893002,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_base": -0.9840738654095423,
      "beta_split": 6.205831167035456,
      "beta_unfairness": 9.693737525310997,
      "alpha": 1.0,
      "success": true,
      "log_likelihood": -20.71079209003822,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_base": 0.5450092486525773,
      "beta_split": 0.0,
      "beta_unfairness": 20.0,
      "alpha": 0.0,
      "success": true,
      "log_likelihood": -17.603141825422473,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_base": -4.116791208385886,
      "beta_split": 13.02592754950076,
      "beta_unfairness": 20.0,
      "alpha": 0.0,
      "success": true,
      "log_likelihood": -11.55144022105094,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_base": -7.006630059819084,
      "beta_split": 20.0,
      "beta_unfairness": 20.0,
      "alpha": 0.0,
      "success": true,
      "log_likelihood": -9.783748629207842,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_base": 2.0794413893151567,
      "beta_split": 0.0,
      "beta_unfairness": 0.0,
      "alpha": 1.0,
      "success": true,
      "log_likelihood": -12.557955443149208,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_base": -9.047775092772689,
      "beta_split": 20.0,
      "beta_unfairness": 20.0,
      "alpha": 0.35335787483054487,
      "success": true,
      "log_likelihood": -4.367143866433178,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_base": -3.1143282525256537,
      "beta_split": 17.71229784118039,
      "beta_unfairness": 0.0,
      "alpha": 1.0,
      "success": true,
      "log_likelihood": -12.296716984603266,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_base": -2.9875657540708644,
      "beta_split": 12.202877628077442,
      "beta_unfairness": 1.1246424668969643,
      "alpha": 0.0,
      "success": true,
      "log_likelihood": -19.0890570121373,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_base": -2.2423079843206932,
      "beta_split": 10.691057484283924,
      "beta_unfairness": 20.0,
      "alpha": 0.2760590260688479,
      "success": true,
      "log_likelihood": -16.123151824397386,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_base": -9.606776087515868,
      "beta_split": 20.0,
      "beta_unfairness": 20.0,
      "alpha": 1.0,
      "success": true,
      "log_likelihood": -2.828697871634723,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_base": -4.362709539965506,
      "beta_split": 14.830862383049247,
      "beta_unfairness": 8.248100331535277,
      "alpha": 0.0,
      "success": true,
      "log_likelihood": -16.701918920049177,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_base": -7.558361626195952,
      "beta_split": 20.0,
      "beta_unfairness": 20.0,
      "alpha": 0.0,
      "success": true,
      "log_likelihood": -7.105935745721949,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_base": -4.626368881219937,
      "beta_split": 20.0,
      "beta_unfairness": 20.0,
      "alpha": 0.6710389600451432,
      "success": true,
      "log_likelihood": -11.091149426564655,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_base": -1.8169669261758945,
      "beta_split": 18.048755562654744,
      "beta_unfairness": 0.0,
      "alpha": 1.0,
      "success": true,
      "log_likelihood": -7.244796350936772,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_base": 1.7299446183828666,
      "beta_split": 6.073489797040839,
      "beta_unfairness": 15.80990001002007,
      "alpha": 0.0,
      "success": true,
      "log_likelihood": -10.0972588819457,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_base": -4.641512855702968,
      "beta_split": 20.0,
      "beta_unfairness": 20.0,
      "alpha": 0.8469361889186251,
      "success": true,
      "log_likelihood": -12.586355787507747,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_base": 3.3023297760582597,
      "beta_split": 0.0,
      "beta_unfairness": 10.749249906728487,
      "alpha": 0.0,
      "success": true,
      "log_likelihood": -9.422664093325498,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_base": -8.977638989633789,
      "beta_split": 20.0,
      "beta_unfairness": 20.0,
      "alpha": 0.0,
      "success": true,
      "log_likelihood": -5.637376465709436,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_base": -8.678271400944686,
      "beta_split": 20.0,
      "beta_unfairness": 20.0,
      "alpha": 1.0,
      "success": true,
      "log_likelihood": -5.4604757656330625,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_base": -3.2430480410799,
      "beta_split": 14.331365832793828,
      "beta_unfairness": 16.452168361620277,
      "alpha": 0.0,
      "success": true,
      "log_likelihood": -14.961722173329813,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_base": -2.1863568487237455,
      "beta_split": 13.753716445100059,
      "beta_unfairness": 2.6273467305829046,
      "alpha": 0.0,
      "success": true,
      "log_likelihood": -14.221917767096471,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_base": -1.109221445380818,
      "beta_split": 4.799554568111042,
      "beta_unfairness": 6.782613297155408,
      "alpha": 1.0,
      "success": true,
      "log_likelihood": -22.636866229916805,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_base": -3.331480207945929,
      "beta_split": 20.0,
      "beta_unfairness": 19.80079249003663,
      "alpha": 0.7568266386674013,
      "success": true,
      "log_likelihood": -11.137905189708931,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_base": 4.990660517579109,
      "beta_split": 0.0,
      "beta_unfairness": 20.0,
      "alpha": 0.0,
      "success": true,
      "log_likelihood": -5.507634175493685,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_base": -4.458688563949219,
      "beta_split": 5.0206846256104045,
      "beta_unfairness": 0.0,
      "alpha": 0.0,
      "success": true,
      "log_likelihood": -7.476491386738675,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_base": -1.0577403954744944,
      "beta_split": 5.13335487353215,
      "beta_unfairness": 0.0,
      "alpha": 0.0,
      "success": true,
      "log_likelihood": -22.93406229441999,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_base": -9.606776135505052,
      "beta_split": 20.0,
      "beta_unfairness": 20.0,
      "alpha": 0.9999997553758075,
      "success": true,
      "log_likelihood": -2.8286978716347275,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_base": -2.581098337580867,
      "beta_split": 9.046225159943548,
      "beta_unfairness": 0.0,
      "alpha": 1.0,
      "success": true,
      "log_likelihood": -21.773258028596263,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_base": 1.4282917361420429,
      "beta_split": 3.4047279056665256,
      "beta_unfairness": 0.0,
      "alpha": 1.0,
      "success": true,
      "log_likelihood": -10.15706980748671,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_base": -8.500849357187363,
      "beta_split": 18.831451550206605,
      "beta_unfairness": 20.0,
      "alpha": 0.0,
      "success": true,
      "log_likelihood": -7.435783857305668,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_base": -5.034849017917003,
      "beta_split": 20.0,
      "beta_unfairness": 20.0,
      "alpha": 0.12666960398465507,
      "success": true,
      "log_likelihood": -8.007683731113488,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_base": -0.09829243008039161,
      "beta_split": 2.3611458596617334,
      "beta_unfairness": 2.3225702127203367,
      "alpha": 0.0,
      "success": true,
      "log_likelihood": -23.505449556918546,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_base": -9.047774259627815,
      "beta_split": 20.0,
      "beta_unfairness": 20.0,
      "alpha": 0.3533575754059893,
      "success": true,
      "log_likelihood": -4.167143866502433,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_base": -0.9244106957201473,
      "beta_split": 8.042265789693333,
      "beta_unfairness": 7.319022574306181,
      "alpha": 0.0,
      "success": true,
      "log_likelihood": -17.921451735610283,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_base": -0.8832508015951349,
      "beta_split": 1.4375995544172555,
      "beta_unfairness": 20.0,
      "alpha": 0.0,
      "success": true,
      "log_likelihood": -14.298025254604639,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_base": 4.920672482446204,
      "beta_split": 0.3223306308758574,
      "beta_unfairness": 20.0,
      "alpha": 0.0,
      "success": true,
      "log_likelihood": -4.623621891088057,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_base": -5.384152625107651,
      "beta_split": 20.0,
      "beta_unfairness": 20.0,
      "alpha": 0.9999998907001548,
      "success": true,
      "log_likelihood": -8.937667672252244,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_base": -1.7537483908813645,
      "beta_split": 9.0975092314105,
      "beta_unfairness": 0.0,
      "alpha": 0.0,
      "success": true,
      "log_likelihood": -19.41725533778682,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "beta_base": {
        "r": 0.926497635638048,
        "p": 2.1881695682500523e-43
      },
      "beta_split": {
        "r": 0.382879459741262,
        "p": 8.439284463077733e-05
      },
      "beta_unfairness": {
        "r": 0.21932950901298373,
        "p": 0.02834415177634179
      },
      "alpha": {
        "r": 0.11481742047563356,
        "p": 0.2553271030855267
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 35.785469482359346,
  "bic_Control": 31.835783555524124,
  "bic_Cocaine": 39.32372979181589,
  "bic_results": {
    "average_bic": 35.785469482359346,
    "individual_bics": [
      19.99147149709389,
      48.260494105102566,
      39.23655212173703,
      41.30620898400019,
      41.16675385454953,
      36.93090657481399,
      14.33416221233681,
      37.929848408913145,
      14.334198282246623,
      41.192880521544566,
      34.09559995677418,
      24.81993979698651,
      39.48398676198455,
      14.334176053039632,
      14.334148492324642,
      14.334152877405748,
      14.334186027487478,
      22.586054419963446,
      24.191010064884626,
      14.334151676659621,
      44.05106976586596,
      30.460270149113764,
      34.54561900173978,
      44.65943485580613,
      46.53727409756243,
      42.79293073682588,
      30.65926861941129,
      34.17607712645153,
      31.222031893990298,
      43.55457578823079,
      14.334131991788087,
      19.99147149709591,
      41.08379132033272,
      39.493684811501,
      14.334151621849996,
      34.390124959677706,
      30.312702815153315,
      46.86459673228549,
      49.4068817535224,
      30.4077009189896,
      50.36200415638601,
      40.29494056847331,
      23.473075015635075,
      36.30884777048806,
      38.82125767648654,
      47.16697541043874,
      37.16756224562219,
      50.80059920097902,
      45.01773489822719,
      58.74491755148016,
      49.90045045652391,
      27.75502728383242,
      42.741808801610446,
      55.75565993390087,
      49.54035940466939,
      37.43695619592632,
      33.90157301224012,
      39.44998664012286,
      23.068363486690796,
      38.92750972303097,
      52.51218977809904,
      46.580379402619215,
      19.991471497093887,
      47.7379135939228,
      28.545947245268337,
      36.51637460695375,
      28.823668455697984,
      34.52859351771584,
      39.506787328839934,
      33.17940394047544,
      25.60882868524331,
      25.255027285090563,
      44.257520100484065,
      42.77791128801738,
      59.607808213658046,
      36.6098861332423,
      25.34934410481181,
      29.287058527301788,
      60.202200342664426,
      19.991471497093894,
      57.88059181101697,
      34.648215368797864,
      29.205643468435774,
      30.349443216051416,
      61.344974867661534,
      22.668363486829307,
      50.176979225045,
      42.93012626303371,
      23.581319536000553,
      32.20941109832893,
      53.168586429398076
    ],
    "group_enabled": true,
    "group_bics": {
      "Control": [
        19.99147149709389,
        48.260494105102566,
        39.23655212173703,
        41.30620898400019,
        41.16675385454953,
        36.93090657481399,
        14.33416221233681,
        37.929848408913145,
        14.334198282246623,
        41.192880521544566,
        34.09559995677418,
        24.81993979698651,
        39.48398676198455,
        14.334176053039632,
        14.334148492324642,
        14.334152877405748,
        14.334186027487478,
        22.586054419963446,
        24.191010064884626,
        14.334151676659621,
        44.05106976586596,
        30.460270149113764,
        34.54561900173978,
        44.65943485580613,
        46.53727409756243,
        42.79293073682588,
        30.65926861941129,
        34.17607712645153,
        31.222031893990298,
        43.55457578823079,
        14.334131991788087,
        19.99147149709591,
        41.08379132033272,
        39.493684811501,
        14.334151621849996,
        34.390124959677706,
        30.312702815153315,
        46.86459673228549,
        49.4068817535224,
        30.4077009189896,
        50.36200415638601,
        40.29494056847331,
        23.473075015635075
      ],
      "Cocaine": [
        36.30884777048806,
        38.82125767648654,
        47.16697541043874,
        37.16756224562219,
        50.80059920097902,
        45.01773489822719,
        58.74491755148016,
        49.90045045652391,
        27.75502728383242,
        42.741808801610446,
        55.75565993390087,
        49.54035940466939,
        37.43695619592632,
        33.90157301224012,
        39.44998664012286,
        23.068363486690796,
        38.92750972303097,
        52.51218977809904,
        46.580379402619215,
        19.991471497093887,
        47.7379135939228,
        28.545947245268337,
        36.51637460695375,
        28.823668455697984,
        34.52859351771584,
        39.506787328839934,
        33.17940394047544,
        25.60882868524331,
        25.255027285090563,
        44.257520100484065,
        42.77791128801738,
        59.607808213658046,
        36.6098861332423,
        25.34934410481181,
        29.287058527301788,
        60.202200342664426,
        19.991471497093894,
        57.88059181101697,
        34.648215368797864,
        29.205643468435774,
        30.349443216051416,
        61.344974867661534,
        22.668363486829307,
        50.176979225045,
        42.93012626303371,
        23.581319536000553,
        32.20941109832893,
        53.168586429398076
      ]
    },
    "num_parameters": 4,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- beta_base: r = 0.926\n- beta_split: r = 0.383\n- beta_unfairness: r = 0.219\n- alpha: r = 0.115",
  "previous_models": [
    "Specification: fair_perc_self = token_self / (token_self + token_opp)\nreference_perc = alpha * 0.5 + (1 - alpha) * fair_perc_self\ndeviation_below_reference = max(0, reference_perc - split_perc_self)\nutility = beta_base + beta_split * split_perc_self - beta_unfairness * deviation_below_reference^2\nSummary: A reference-dependent utility model for responder decisions, using only percentage-based values for fairness and offer evaluation. Utility is a function of a baseline parameter, the linear gain from the proposed percentage share, and a non-linear (quadratic) penalty for receiving less than a dynamic reference percentage. The reference percentage is a weighted average of the 50% equal split norm and the participant's proportional share based on contributions, with the weighting governed by a learnable parameter 'alpha'. This non-linear structure and dynamic reference point are designed to improve parameter identifiability. The model has four learnable parameters: a base utility (beta_base), sensitivity to the proposed split (beta_split), sensitivity to unfairness (beta_unfairness), and the weight for the reference point (alpha).\nTarget Variable: accept\nPrediction Type: utility\nBIC: 35.785469482359346\nOverall Accuracy: 0.8025\nGroup Accuracies:\n- Control: 0.8314\n- Cocaine: 0.7766\n\nParameter Recovery:\n- beta_base: r = 0.926\n- beta_split: r = 0.383\n- beta_unfairness: r = 0.219\n- alpha: r = 0.115"
  ]
}