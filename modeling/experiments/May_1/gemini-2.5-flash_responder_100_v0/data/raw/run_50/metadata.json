{
  "task_description": "In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "Okay, here are the improved instructions for the next run (Run 50), building on the results of the previous runs.\n\nInstructions for Run 50 of 100:\n\nThe unwavering primary objective remains achieving parameter recovery >= 0.7 for *all* learnable parameters. This is the critical benchmark for model usability. While improved BIC and accuracy are valuable secondary goals, they must not come at the expense of robust parameter recovery. A model with excellent fit but poor parameter identifiability is not suitable for drawing meaningful conclusions about the underlying cognitive processes.\n\nThe last run (Run 49) attempted a simple additive linear model (`U = beta_proposed_share * split_perc_self + beta_fair_share * fair_perc_self_calc`) and unfortunately failed the primary objective of achieving parameter recovery >= 0.7 for *all* learnable parameters, specifically for `beta_proposed_share` (r = 0.378). It also resulted in a very high BIC (371.03), indicating poor model fit despite reasonable accuracy (0.730). This suggests the simple additive structure based on `split_perc_self` and `fair_perc_self_calc` did not yield sufficiently separable parameter influences or capture the data structure well.\n\nThe core challenge persists: designing a mathematical structure for utility using exactly **2 learnable parameters** that ensures both parameters have distinct, identifiable influences on responder decisions (`trial_role == 1`) while also improving model fit (lower BIC, higher accuracy). We seek a model that achieves full recovery and improves upon the current best recoverable model (BIC 40.45, accuracy 0.662, recovery >= 0.795).\n\nGiven the failure of the simple additive structure in Run 49 to achieve necessary identifiability, let's explore an alternative linear approach that might better disentangle the influences of the offer's value and its fairness. Design a model where utility is a linear combination of the *proposed percentage share itself* and the *deviation of the proposed share from the calculated fair percentage share*. This is a linear model, but with components structured differently than in Run 49.\n\n*   **Structural Direction (Linear with Value and Deviation Components):** Model utility (`U`) as a weighted sum of the proposed share and the difference between the proposed share and the fair share.\n    *   Calculate the necessary intermediate variables to get `fair_perc_self_calc`:\n        *   `sum_tokens = token_self + token_opp`\n        *   `fair_perc_self_calc = IF(sum_tokens > 0, (token_self / sum_tokens) * 100.0, 50.0)` (Ensures `fair_perc_self_calc` is >= 0).\n    *   Calculate the deviation from fairness:\n        *   `fairness_deviation = split_perc_self - fair_perc_self_calc`\n    *   Structure the utility (`U`) using a linear combination of the proposed share and this deviation:\n        *   `U = beta_value * split_perc_self + beta_fairness_deviation * fairness_deviation`\n    *   This structure uses two distinct learnable parameters (`beta_value` and `beta_fairness_deviation`) that separately weight the influence of the proposed percentage itself and the degree to which it deviates from fairness. The hope is that using `split_perc_self` and `fairness_deviation` (which is a transformation involving both `split_perc_self` and `fair_perc_self_calc`) as the components will provide more separable influences on utility compared to the simple additive model in Run 49.\n\n*   **Key Inputs & Calculated Variables:**\n    *   Use `split_perc_self`, `token_self`, `token_opp` as data variables.\n    *   Calculate `sum_tokens`, `fair_perc_self_calc`, `fairness_deviation`, and `U`.\n    *   Ensure these calculated variables are included in your <MODEL> tag calculations and <VARIABLES> descriptions.\n\n*   **Model Formula:** Define the utility (`U`) using the linear combination. Include the calculation steps for necessary derived variables (`sum_tokens`, `fair_perc_self_calc`, `fairness_deviation`) before the final formula for `U`. Use clear mathematical notation.\n\n*   **Learnable Parameters:** Your model *must* have exactly **2 learnable parameters**.\n    *   `beta_value`: Sensitivity parameter scaling the proposed percentage share (`split_perc_self`). Suggest generous bounds like [-10.0, 10.0].\n    *   `beta_fairness_deviation`: Sensitivity parameter scaling the deviation from the fair percentage share (`fairness_deviation`). Suggest generous bounds like [-10.0, 10.0].\n    Choose descriptive names suitable for Python code that reflect the variable they scale. Define clear, generous, finite numerical bounds for both.\n\n*   **Calculated Variables:** Ensure all calculated variables used in the model (`sum_tokens`, `fair_perc_self_calc`, `fairness_deviation`, `U`) are included in your <VARIABLES> descriptions with `source: \"calculated\"`. Include descriptions for all data variables used as inputs (`token_self`, `token_opp`, `split_perc_self`).\n\n*   **Model Specification:** Provide the formal mathematical formula between <MODEL> tags. Include the calculation steps for necessary derived variables before the final formula for `U`. Use clear mathematical notation.\n\n*   **Variable Descriptions:** Provide variable descriptions in JSON format between <VARIABLES> tags for *all* variables used in the <MODEL> formula (data, calculated, learnable). Include source, range (with inclusive flags), distribution (if applicable), and learnable status.\n\n*   **Target Variable:** Specify \"accept\" as the target variable using <target_variable> tags.\n\n*   **Summary:** Provide a concise summary between <SUMMARY> tags, describing your model. Explain the core idea that utility is determined by a linear combination of the proposed percentage (`split_perc_self`) and its deviation from the calculated fair percentage (`fairness_deviation`). Explain how `beta_value` weights the influence of the proposed amount itself, and `beta_fairness_deviation` weights the influence of how far that offer is from the fairness point, noting that this structure attempts to improve parameter identifiability by separating these two influences on utility.\n\nAvailable Data Variables:\n- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.\n\nPlease think through this step by step, then provide your model specification and variable descriptions. Remember that robust parameter identifiability *within* the constraints of **exactly 2 learnable parameters** is the absolute priority. Your goal is to find a mathematical structure where both parameters can be uniquely and reliably estimated from the data by ensuring their influences are clearly distinguishable. This linear approach with components representing value and fairness deviation is a new structural attempt after the previous additive model failed. If this structure also fails to meet the recovery criterion for both parameters, continue to be prepared to think outside the box for subsequent iterations \u2013 consider alternative ways fairness might modulate sensitivity, or other combinations/transformations of variables that might create more separable parameter influences within the 2-parameter constraint. The key is finding a structure where the two parameters\u2019 contributions to utility are as independent as possible across the dataset.\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: Okay, here are the improved instructions for the next run (Run 50), building on the results of the previous runs.\n\nInstructions for Run 50 of 100:\n\nThe unwavering primary objective remains achieving parameter recovery >= 0.7 for *all* learnable parameters. This is the critical benchmark for model usability. While improved BIC and accuracy are valuable secondary goals, they must not come at the expense of robust parameter recovery. A model with excellent fit but poor parameter identifiability is not suitable for drawing meaningful conclusions about the underlying cognitive processes.\n\nThe last run (Run 49) attempted a simple additive linear model (`U = beta_proposed_share * split_perc_self + beta_fair_share * fair_perc_self_calc`) and unfortunately failed the primary objective of achieving parameter recovery >= 0.7 for *all* learnable parameters, specifically for `beta_proposed_share` (r = 0.378). It also resulted in a very high BIC (371.03), indicating poor model fit despite reasonable accuracy (0.730). This suggests the simple additive structure based on `split_perc_self` and `fair_perc_self_calc` did not yield sufficiently separable parameter influences or capture the data structure well.\n\nThe core challenge persists: designing a mathematical structure for utility using exactly **2 learnable parameters** that ensures both parameters have distinct, identifiable influences on responder decisions (`trial_role == 1`) while also improving model fit (lower BIC, higher accuracy). We seek a model that achieves full recovery and improves upon the current best recoverable model (BIC 40.45, accuracy 0.662, recovery >= 0.795).\n\nGiven the failure of the simple additive structure in Run 49 to achieve necessary identifiability, let's explore an alternative linear approach that might better disentangle the influences of the offer's value and its fairness. Design a model where utility is a linear combination of the *proposed percentage share itself* and the *deviation of the proposed share from the calculated fair percentage share*. This is a linear model, but with components structured differently than in Run 49.\n\n*   **Structural Direction (Linear with Value and Deviation Components):** Model utility (`U`) as a weighted sum of the proposed share and the difference between the proposed share and the fair share.\n    *   Calculate the necessary intermediate variables to get `fair_perc_self_calc`:\n        *   `sum_tokens = token_self + token_opp`\n        *   `fair_perc_self_calc = IF(sum_tokens > 0, (token_self / sum_tokens) * 100.0, 50.0)` (Ensures `fair_perc_self_calc` is >= 0).\n    *   Calculate the deviation from fairness:\n        *   `fairness_deviation = split_perc_self - fair_perc_self_calc`\n    *   Structure the utility (`U`) using a linear combination of the proposed share and this deviation:\n        *   `U = beta_value * split_perc_self + beta_fairness_deviation * fairness_deviation`\n    *   This structure uses two distinct learnable parameters (`beta_value` and `beta_fairness_deviation`) that separately weight the influence of the proposed percentage itself and the degree to which it deviates from fairness. The hope is that using `split_perc_self` and `fairness_deviation` (which is a transformation involving both `split_perc_self` and `fair_perc_self_calc`) as the components will provide more separable influences on utility compared to the simple additive model in Run 49.\n\n*   **Key Inputs & Calculated Variables:**\n    *   Use `split_perc_self`, `token_self`, `token_opp` as data variables.\n    *   Calculate `sum_tokens`, `fair_perc_self_calc`, `fairness_deviation`, and `U`.\n    *   Ensure these calculated variables are included in your <MODEL> tag calculations and <VARIABLES> descriptions.\n\n*   **Model Formula:** Define the utility (`U`) using the linear combination. Include the calculation steps for necessary derived variables (`sum_tokens`, `fair_perc_self_calc`, `fairness_deviation`) before the final formula for `U`. Use clear mathematical notation.\n\n*   **Learnable Parameters:** Your model *must* have exactly **2 learnable parameters**.\n    *   `beta_value`: Sensitivity parameter scaling the proposed percentage share (`split_perc_self`). Suggest generous bounds like [-10.0, 10.0].\n    *   `beta_fairness_deviation`: Sensitivity parameter scaling the deviation from the fair percentage share (`fairness_deviation`). Suggest generous bounds like [-10.0, 10.0].\n    Choose descriptive names suitable for Python code that reflect the variable they scale. Define clear, generous, finite numerical bounds for both.\n\n*   **Calculated Variables:** Ensure all calculated variables used in the model (`sum_tokens`, `fair_perc_self_calc`, `fairness_deviation`, `U`) are included in your <VARIABLES> descriptions with `source: \"calculated\"`. Include descriptions for all data variables used as inputs (`token_self`, `token_opp`, `split_perc_self`).\n\n*   **Model Specification:** Provide the formal mathematical formula between <MODEL> tags. Include the calculation steps for necessary derived variables before the final formula for `U`. Use clear mathematical notation.\n\n*   **Variable Descriptions:** Provide variable descriptions in JSON format between <VARIABLES> tags for *all* variables used in the <MODEL> formula (data, calculated, learnable). Include source, range (with inclusive flags), distribution (if applicable), and learnable status.\n\n*   **Target Variable:** Specify \"accept\" as the target variable using <target_variable> tags.\n\n*   **Summary:** Provide a concise summary between <SUMMARY> tags, describing your model. Explain the core idea that utility is determined by a linear combination of the proposed percentage (`split_perc_self`) and its deviation from the calculated fair percentage (`fairness_deviation`). Explain how `beta_value` weights the influence of the proposed amount itself, and `beta_fairness_deviation` weights the influence of how far that offer is from the fairness point, noting that this structure attempts to improve parameter identifiability by separating these two influences on utility.\n\nAvailable Data Variables:\n- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.\n\nPlease think through this step by step, then provide your model specification and variable descriptions. Remember that robust parameter identifiability *within* the constraints of **exactly 2 learnable parameters** is the absolute priority. Your goal is to find a mathematical structure where both parameters can be uniquely and reliably estimated from the data by ensuring their influences are clearly distinguishable. This linear approach with components representing value and fairness deviation is a new structural attempt after the previous additive model failed. If this structure also fails to meet the recovery criterion for both parameters, continue to be prepared to think outside the box for subsequent iterations \u2013 consider alternative ways fairness might modulate sensitivity, or other combinations/transformations of variables that might create more separable parameter influences within the 2-parameter constraint. The key is finding a structure where the two parameters\u2019 contributions to utility are as independent as possible across the dataset.\n\nPlease think through this step by step, then provide your model specification and variable descriptions.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<MODEL>\nsum_tokens = token_self + token_opp\nfair_perc_self_calc = (token_self / sum_tokens) * 100\nfairness_deviation = split_perc_self - fair_perc_self_calc\nU = beta_value * split_perc_self + beta_fairness_deviation * fairness_deviation\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The proposed share for the participant (in %).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"sum_tokens\": {\n      \"description\": \"Total number of tokens found by participant and opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fair_perc_self_calc\": {\n      \"description\": \"The calculated fair percentage share for the participant based on token contributions. Calculated as (token_self / sum_tokens) * 100 if sum_tokens > 0, otherwise 50.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fairness_deviation\": {\n      \"description\": \"The deviation of the proposed share for the participant from their calculated fair share.\",\n      \"range\": {\n        \"min\": -100,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_value\": {\n      \"description\": \"Sensitivity parameter for the proposed percentage share itself.\",\n      \"range\": {\n        \"min\": -10.0,\n        \"max\": 10.0\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_fairness_deviation\": {\n      \"description\": \"Sensitivity parameter for the deviation from the calculated fair percentage share.\",\n      \"range\": {\n        \"min\": -10.0,\n        \"max\": 10.0\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Utility of accepting the proposed offer.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA linear utility model for responder decisions. Utility to accept an offer is a weighted sum of the proposed percentage share for the participant and the deviation of this proposed share from the calculated fair share based on token contributions. The model uses two learnable parameters: beta_value, which scales the influence of the proposed percentage itself, and beta_fairness_deviation, which scales the influence of the fairness deviation. This structure aims to disentangle the value and fairness components of the offer to improve parameter identifiability.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['beta_value', 'beta_fairness_deviation']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                sum_tokens = token_self + token_opp\nfair_perc_self_calc = (token_self / sum_tokens) * 100\nfairness_deviation = split_perc_self - fair_perc_self_calc\nU = beta_value * split_perc_self + beta_fairness_deviation * fairness_deviation\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The proposed share for the participant (in %).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"sum_tokens\": {\n      \"description\": \"Total number of tokens found by participant and opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fair_perc_self_calc\": {\n      \"description\": \"The calculated fair percentage share for the participant based on token contributions. Calculated as (token_self / sum_tokens) * 100 if sum_tokens > 0, otherwise 50.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fairness_deviation\": {\n      \"description\": \"The deviation of the proposed share for the participant from their calculated fair share.\",\n      \"range\": {\n        \"min\": -100,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_value\": {\n      \"description\": \"Sensitivity parameter for the proposed percentage share itself.\",\n      \"range\": {\n        \"min\": -10.0,\n        \"max\": 10.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_fairness_deviation\": {\n      \"description\": \"Sensitivity parameter for the deviation from the calculated fair percentage share.\",\n      \"range\": {\n        \"min\": -10.0,\n        \"max\": 10.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Utility of accepting the proposed offer.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, beta_value=0.0, beta_fairness_deviation=0.0):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        split_perc_self = trial.get(\"splitperc_self\", 0)\n\n        sum_tokens = token_self + token_opp\n\n        if sum_tokens > 0:\n            fair_perc_self_calc = (token_self / sum_tokens) * 100\n        else:\n            fair_perc_self_calc = 50.0\n\n        fairness_deviation = split_perc_self - fair_perc_self_calc\n        U = beta_value * split_perc_self + beta_fairness_deviation * fairness_deviation\n\n        model_predictions.append(U)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n",
      "timestamp": 1746101903.500569
    }
  ],
  "learnable_parameters": {
    "beta_value": {
      "description": "Sensitivity parameter for the proposed percentage share itself.",
      "range": {
        "min": -10.0,
        "max": 10.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta_fairness_deviation": {
      "description": "Sensitivity parameter for the deviation from the calculated fair percentage share.",
      "range": {
        "min": -10.0,
        "max": 10.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "sum_tokens = token_self + token_opp\nfair_perc_self_calc = (token_self / sum_tokens) * 100\nfairness_deviation = split_perc_self - fair_perc_self_calc\nU = beta_value * split_perc_self + beta_fairness_deviation * fairness_deviation",
  "variable_descriptions": {
    "token_self": {
      "description": "Number of tokens found by the participant.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "split_perc_self": {
      "description": "The proposed share for the participant (in %).",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "sum_tokens": {
      "description": "Total number of tokens found by participant and opponent.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "fair_perc_self_calc": {
      "description": "The calculated fair percentage share for the participant based on token contributions. Calculated as (token_self / sum_tokens) * 100 if sum_tokens > 0, otherwise 50.",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "fairness_deviation": {
      "description": "The deviation of the proposed share for the participant from their calculated fair share.",
      "range": {
        "min": -100,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "beta_value": {
      "description": "Sensitivity parameter for the proposed percentage share itself.",
      "range": {
        "min": -10.0,
        "max": 10.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta_fairness_deviation": {
      "description": "Sensitivity parameter for the deviation from the calculated fair percentage share.",
      "range": {
        "min": -10.0,
        "max": 10.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "U": {
      "description": "Utility of accepting the proposed offer.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "A linear utility model for responder decisions. Utility to accept an offer is a weighted sum of the proposed percentage share for the participant and the deviation of this proposed share from the calculated fair share based on token contributions. The model uses two learnable parameters: beta_value, which scales the influence of the proposed percentage itself, and beta_fairness_deviation, which scales the influence of the fairness deviation. This structure aims to disentangle the value and fairness components of the offer to improve parameter identifiability.",
  "target_variable": "accept",
  "full_reasoning": "<MODEL>\nsum_tokens = token_self + token_opp\nfair_perc_self_calc = (token_self / sum_tokens) * 100\nfairness_deviation = split_perc_self - fair_perc_self_calc\nU = beta_value * split_perc_self + beta_fairness_deviation * fairness_deviation\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The proposed share for the participant (in %).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"sum_tokens\": {\n      \"description\": \"Total number of tokens found by participant and opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fair_perc_self_calc\": {\n      \"description\": \"The calculated fair percentage share for the participant based on token contributions. Calculated as (token_self / sum_tokens) * 100 if sum_tokens > 0, otherwise 50.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fairness_deviation\": {\n      \"description\": \"The deviation of the proposed share for the participant from their calculated fair share.\",\n      \"range\": {\n        \"min\": -100,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_value\": {\n      \"description\": \"Sensitivity parameter for the proposed percentage share itself.\",\n      \"range\": {\n        \"min\": -10.0,\n        \"max\": 10.0\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_fairness_deviation\": {\n      \"description\": \"Sensitivity parameter for the deviation from the calculated fair percentage share.\",\n      \"range\": {\n        \"min\": -10.0,\n        \"max\": 10.0\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Utility of accepting the proposed offer.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA linear utility model for responder decisions. Utility to accept an offer is a weighted sum of the proposed percentage share for the participant and the deviation of this proposed share from the calculated fair share based on token contributions. The model uses two learnable parameters: beta_value, which scales the influence of the proposed percentage itself, and beta_fairness_deviation, which scales the influence of the fairness deviation. This structure aims to disentangle the value and fairness components of the offer to improve parameter identifiability.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: sum_tokens = token_self + token_opp\nfair_perc_self_calc = (token_self / sum_tokens) * 100\nfairness_deviation = split_perc_self - fair_perc_self_calc\nU = beta_value * split_perc_self + beta_fairness_deviation * fairness_deviation\nSummary: A linear utility model for responder decisions. Utility to accept an offer is a weighted sum of the proposed percentage share for the participant and the deviation of this proposed share from the calculated fair share based on token contributions. The model uses two learnable parameters: beta_value, which scales the influence of the proposed percentage itself, and beta_fairness_deviation, which scales the influence of the fairness deviation. This structure aims to disentangle the value and fairness components of the offer to improve parameter identifiability.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, beta_value=0.0, beta_fairness_deviation=0.0):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        split_perc_self = trial.get(\"splitperc_self\", 0)\n\n        sum_tokens = token_self + token_opp\n\n        if sum_tokens > 0:\n            fair_perc_self_calc = (token_self / sum_tokens) * 100\n        else:\n            fair_perc_self_calc = 50.0\n\n        fairness_deviation = split_perc_self - fair_perc_self_calc\n        U = beta_value * split_perc_self + beta_fairness_deviation * fairness_deviation\n\n        model_predictions.append(U)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.7811355311355311,
  "group_accuracies": {
    "Control": 0.8087855297157622,
    "Cocaine": 0.7563657407407407
  },
  "group_parameter_averages": {
    "Control": {
      "beta_value": 3.393045075052402,
      "beta_fairness_deviation": -1.2087119161622488
    },
    "Cocaine": {
      "beta_value": 1.3034769230175525,
      "beta_fairness_deviation": 2.1168633047295247
    }
  },
  "fitting_results": [
    {
      "beta_value": -10.0,
      "beta_fairness_deviation": 2.1387535755268887,
      "success": true,
      "log_likelihood": -69.07755278652132,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 0.06895606599429188,
      "beta_fairness_deviation": 0.10186939285738482,
      "success": true,
      "log_likelihood": -15.87495239512273,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 7.0785894778240745,
      "beta_fairness_deviation": 0.04666097559352167,
      "success": true,
      "log_likelihood": -391.43946580708797,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": -2.3856859908557144,
      "beta_fairness_deviation": 4.002631759922956,
      "success": true,
      "log_likelihood": -345.3877639470068,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": -7.212127120772928,
      "beta_fairness_deviation": 0.06974446989910454,
      "success": true,
      "log_likelihood": -368.4136148770475,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 9.169239899901019,
      "beta_fairness_deviation": -6.859744749226961,
      "success": true,
      "log_likelihood": -299.33606208692606,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 10.0,
      "beta_fairness_deviation": -10.0,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 1.3260630225304668,
      "beta_fairness_deviation": 0.8989724305336805,
      "success": true,
      "log_likelihood": -67.75278647475675,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 10.0,
      "beta_fairness_deviation": -10.0,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 0.09185824209867982,
      "beta_fairness_deviation": 0.202379353633842,
      "success": true,
      "log_likelihood": -10.33735519308877,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 6.299581809798644,
      "beta_fairness_deviation": 10.0,
      "success": true,
      "log_likelihood": -0.0012398839547784616,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": -10.0,
      "beta_fairness_deviation": 10.0,
      "success": true,
      "log_likelihood": -92.10340371656179,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": -4.112412511299455,
      "beta_fairness_deviation": 2.304297880545473,
      "success": true,
      "log_likelihood": -345.387763947007,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 10.0,
      "beta_fairness_deviation": -10.0,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 10.0,
      "beta_fairness_deviation": -10.0,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 10.0,
      "beta_fairness_deviation": -10.0,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 10.0,
      "beta_fairness_deviation": -10.0,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 9.844142504785587,
      "beta_fairness_deviation": -2.332023929746578,
      "success": true,
      "log_likelihood": -115.12925464660226,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 4.683561164979094,
      "beta_fairness_deviation": 1.4637203086812762,
      "success": true,
      "log_likelihood": -46.011929548494244,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 10.0,
      "beta_fairness_deviation": -10.0,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 3.7386390551318183,
      "beta_fairness_deviation": -5.960222117333826,
      "success": true,
      "log_likelihood": -368.4136148770475,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 10.0,
      "beta_fairness_deviation": -10.0,
      "success": true,
      "log_likelihood": -115.12925464660225,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": -10.0,
      "beta_fairness_deviation": 10.0,
      "success": true,
      "log_likelihood": -299.33606208692606,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 2.402357161513201,
      "beta_fairness_deviation": -6.636165888189946,
      "success": true,
      "log_likelihood": -391.43953953492394,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 10.0,
      "beta_fairness_deviation": -1.087132479820457,
      "success": true,
      "log_likelihood": -414.46531673712843,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 0.10395625174663754,
      "beta_fairness_deviation": 0.12334554132413043,
      "success": true,
      "log_likelihood": -13.077543943045624,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 8.931175187315487,
      "beta_fairness_deviation": 9.537538106708771,
      "success": true,
      "log_likelihood": -138.15511150847374,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 0.17375769037110944,
      "beta_fairness_deviation": 0.5690056445697812,
      "success": true,
      "log_likelihood": -3.8046523376980486,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 10.0,
      "beta_fairness_deviation": -5.181443477531271,
      "success": true,
      "log_likelihood": -92.10340371656179,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 0.09024863243337,
      "beta_fairness_deviation": 0.05020323720831876,
      "success": true,
      "log_likelihood": -14.619922225447521,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 0.41518097643027163,
      "beta_fairness_deviation": -10.0,
      "success": true,
      "log_likelihood": -46.05170191875908,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": -10.0,
      "beta_fairness_deviation": 10.0,
      "success": true,
      "log_likelihood": -69.07755278652138,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 0.0049443816055154775,
      "beta_fairness_deviation": 8.895093053733817,
      "success": true,
      "log_likelihood": -277.6827467492436,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": -10.0,
      "beta_fairness_deviation": 10.0,
      "success": true,
      "log_likelihood": -322.3619130169665,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 10.0,
      "beta_fairness_deviation": -10.0,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 10.0,
      "beta_fairness_deviation": 6.935574326485403,
      "success": true,
      "log_likelihood": -115.13058830461512,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 10.0,
      "beta_fairness_deviation": -10.0,
      "success": true,
      "log_likelihood": -253.2843602268452,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 0.07834263207304326,
      "beta_fairness_deviation": 0.12150352091527443,
      "success": true,
      "log_likelihood": -14.385841645408375,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 8.758103319940354,
      "beta_fairness_deviation": 3.9541801464242297,
      "success": true,
      "log_likelihood": -184.20689303059063,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 7.7938081040128395,
      "beta_fairness_deviation": -1.2222259505959805,
      "success": true,
      "log_likelihood": -69.07755278652135,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 7.2882203217261905,
      "beta_fairness_deviation": 3.915885713954569,
      "success": true,
      "log_likelihood": -207.23267737288822,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": -8.729562052030316,
      "beta_fairness_deviation": 1.9729867589499008,
      "success": true,
      "log_likelihood": -184.20680743672372,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 10.0,
      "beta_fairness_deviation": -10.0,
      "success": true,
      "log_likelihood": -23.02585092644049,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 6.310937158873881,
      "beta_fairness_deviation": 5.083384253922332,
      "success": true,
      "log_likelihood": -161.08692000489899,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 9.939844872036298,
      "beta_fairness_deviation": -9.010929491581381,
      "success": true,
      "log_likelihood": -322.3619130169666,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 4.4638277265154525,
      "beta_fairness_deviation": 2.0606852258129362,
      "success": true,
      "log_likelihood": -138.1571840726473,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": -10.0,
      "beta_fairness_deviation": 10.0,
      "success": true,
      "log_likelihood": -437.49116766716884,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": -2.6903491340425507,
      "beta_fairness_deviation": 3.786585471945937,
      "success": true,
      "log_likelihood": -322.3619130169666,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": -10.0,
      "beta_fairness_deviation": 10.0,
      "success": true,
      "log_likelihood": -345.3877639470071,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.3034350404630594,
      "beta_fairness_deviation": -6.531869079840361,
      "success": true,
      "log_likelihood": -391.43908069795697,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 9.667817490077706,
      "beta_fairness_deviation": -7.966491576589116,
      "success": true,
      "log_likelihood": -253.28436022684522,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": -8.03079032070848,
      "beta_fairness_deviation": 2.276253629801701,
      "success": true,
      "log_likelihood": -115.12925464660226,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.12831657921080047,
      "beta_fairness_deviation": 0.04317226366397496,
      "success": true,
      "log_likelihood": -35.22524892548272,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 6.789510544441015,
      "beta_fairness_deviation": 4.255330520566847,
      "success": true,
      "log_likelihood": -253.28545463568318,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 1.1315787932996333,
      "beta_fairness_deviation": 7.920696945341068,
      "success": true,
      "log_likelihood": -162.5683084087416,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 2.4208671692102572,
      "beta_fairness_deviation": 5.648689680489864,
      "success": true,
      "log_likelihood": -24.41214682763213,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.06186072233289069,
      "beta_fairness_deviation": 0.20306443732289892,
      "success": true,
      "log_likelihood": -10.036664895470674,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 10.0,
      "beta_fairness_deviation": -10.0,
      "success": true,
      "log_likelihood": -92.1034037165618,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": -10.0,
      "beta_fairness_deviation": 10.0,
      "success": true,
      "log_likelihood": -92.10340371656181,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 3.5601742239787373,
      "beta_fairness_deviation": -0.9151306643801607,
      "success": true,
      "log_likelihood": -161.18095650668326,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.054873853452791305,
      "beta_fairness_deviation": 0.04916437174923776,
      "success": true,
      "log_likelihood": -19.45156166270239,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 9.829239408938356,
      "beta_fairness_deviation": -4.970686552546269,
      "success": true,
      "log_likelihood": -414.46531673712843,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": -3.745511070114331,
      "beta_fairness_deviation": 6.920650931323834,
      "success": true,
      "log_likelihood": -69.07755278652142,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 6.986541336573145,
      "beta_fairness_deviation": 7.703520884681003,
      "success": true,
      "log_likelihood": -184.20680806167223,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.039403904857464075,
      "beta_fairness_deviation": 0.17876966123400304,
      "success": true,
      "log_likelihood": -10.509606970855009,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.10000433355647974,
      "beta_fairness_deviation": 0.11783731350330019,
      "success": true,
      "log_likelihood": -13.479322740141704,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.13571275115136117,
      "beta_fairness_deviation": 0.02831766728032125,
      "success": true,
      "log_likelihood": -7.360851758934579,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 7.642220427216079,
      "beta_fairness_deviation": 3.57186884221203,
      "success": true,
      "log_likelihood": -69.07760055721444,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 9.975049910026565,
      "beta_fairness_deviation": 10.0,
      "success": true,
      "log_likelihood": -163.1374344728342,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 6.260634105578301,
      "beta_fairness_deviation": -2.023188354765768,
      "success": true,
      "log_likelihood": -69.07755278652137,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": -10.0,
      "beta_fairness_deviation": 10.0,
      "success": true,
      "log_likelihood": -92.10340371656183,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": -0.816366662408074,
      "beta_fairness_deviation": 3.66149545793459,
      "success": true,
      "log_likelihood": -92.10366631276013,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 5.85007024812578,
      "beta_fairness_deviation": 6.447858588802246,
      "success": true,
      "log_likelihood": -161.1806305638854,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 3.9795755832251842,
      "beta_fairness_deviation": 2.7524149041128108,
      "success": true,
      "log_likelihood": -98.37940219649659,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.022224558045331976,
      "beta_fairness_deviation": 0.029533549696833285,
      "success": true,
      "log_likelihood": -23.339677437018477,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": -6.889445924176664,
      "beta_fairness_deviation": 9.61629672646685,
      "success": true,
      "log_likelihood": -575.6462732474116,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 8.246575463182566,
      "beta_fairness_deviation": -7.116697049272571,
      "success": true,
      "log_likelihood": -46.051701856480875,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": -10.0,
      "beta_fairness_deviation": 10.0,
      "success": true,
      "log_likelihood": -46.051701856480925,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 10.0,
      "beta_fairness_deviation": -1.028664410183671,
      "success": true,
      "log_likelihood": -322.36191301696664,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": -10.0,
      "beta_fairness_deviation": -0.6045292793619659,
      "success": true,
      "log_likelihood": -69.07755278652135,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 9.960912560261464,
      "beta_fairness_deviation": 10.0,
      "success": true,
      "log_likelihood": -324.1593538550867,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 8.342329235518207,
      "beta_fairness_deviation": -3.168324159862048,
      "success": true,
      "log_likelihood": -69.07755278652131,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": -10.0,
      "beta_fairness_deviation": -0.13103839942241818,
      "success": true,
      "log_likelihood": -92.10340371656179,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.1143334219405307,
      "beta_fairness_deviation": 0.1595320556156988,
      "success": true,
      "log_likelihood": -11.513300185059824,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 3.155677335623875,
      "beta_fairness_deviation": 9.517943306522957,
      "success": true,
      "log_likelihood": -300.619980552859,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": -7.228842815504166,
      "beta_fairness_deviation": 0.6574392597646206,
      "success": true,
      "log_likelihood": -92.10340371656183,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 9.42419819212407,
      "beta_fairness_deviation": 5.182258590728736,
      "success": true,
      "log_likelihood": -230.25850930644995,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": -1.9200022854932541,
      "beta_fairness_deviation": 1.928682277443281,
      "success": true,
      "log_likelihood": -184.20680743672372,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 10.0,
      "beta_fairness_deviation": -10.0,
      "success": true,
      "log_likelihood": -46.05170185648088,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": -9.377383949547422,
      "beta_fairness_deviation": 3.864090119125496,
      "success": true,
      "log_likelihood": -391.4394658070879,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 8.367837517000174,
      "beta_fairness_deviation": 1.4114507077575134,
      "success": true,
      "log_likelihood": -253.28436226016643,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "beta_value": {
        "r": 0.7175732851247132,
        "p": 4.4728375800197716e-17
      },
      "beta_fairness_deviation": {
        "r": 0.6525415003825366,
        "p": 1.8995320829187262e-13
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 306.97131416331445,
  "bic_Control": 276.12155197443576,
  "bic_Cocaine": 334.6075594575183,
  "bic_results": {
    "average_bic": 306.97131416331445,
    "individual_bics": [
      145.32214344995486,
      38.91694266715768,
      790.0459694910882,
      697.9425657709259,
      743.9942676310072,
      605.8391620507643,
      7.167037869712219,
      142.6726108264257,
      7.167037869712219,
      27.841748263089762,
      7.169517644821776,
      191.3738453100358,
      697.9425657709262,
      7.167037869712219,
      7.167037869712219,
      7.167037869712219,
      7.167037869712219,
      237.42554717011674,
      99.1908969739007,
      7.167037869712219,
      743.9942676310072,
      237.42554717011672,
      605.8391620507643,
      790.0461169467601,
      836.0976713511691,
      33.32212576300347,
      283.4772608938597,
      14.776342552308318,
      191.3738453100358,
      36.40688232780726,
      99.27044171443038,
      145.32214344995498,
      562.5325313753995,
      651.8908639108453,
      7.167037869712219,
      237.42821448614245,
      513.7357583306026,
      35.93872116772897,
      375.5808239380935,
      145.32214344995492,
      421.63239262268866,
      375.58065275035966,
      53.2187397297932,
      329.3408778867102,
      651.8908639108454,
      283.48140602220684,
      882.1493732112499,
      651.8908639108454,
      697.9425657709264,
      790.0451992728262,
      513.7357583306027,
      237.42554717011674,
      77.61753572787765,
      513.7379471482786,
      332.3036546943954,
      55.99133153217648,
      27.24036766785357,
      191.37384531003582,
      191.37384531003585,
      329.52895089027874,
      46.070161202316996,
      836.0976713511691,
      145.32214344995506,
      375.5806540002567,
      28.18625181862224,
      34.125683357195626,
      21.888741394781377,
      145.3222389913411,
      333.4419068225806,
      145.32214344995495,
      191.37384531003588,
      191.37437050243247,
      329.528299004683,
      203.9258422699054,
      53.84639275094917,
      1158.4595843717354,
      99.27044158987397,
      99.27044158987407,
      651.8908639108455,
      145.32214344995492,
      655.4857455870856,
      145.32214344995484,
      191.3738453100358,
      30.19363824703187,
      608.4069989826302,
      191.37384531003588,
      467.6840564898121,
      375.58065275035966,
      99.27044158987398,
      790.045969491088,
      513.7357623972451
    ],
    "group_enabled": true,
    "group_bics": {
      "Control": [
        145.32214344995486,
        38.91694266715768,
        790.0459694910882,
        697.9425657709259,
        743.9942676310072,
        605.8391620507643,
        7.167037869712219,
        142.6726108264257,
        7.167037869712219,
        27.841748263089762,
        7.169517644821776,
        191.3738453100358,
        697.9425657709262,
        7.167037869712219,
        7.167037869712219,
        7.167037869712219,
        7.167037869712219,
        237.42554717011674,
        99.1908969739007,
        7.167037869712219,
        743.9942676310072,
        237.42554717011672,
        605.8391620507643,
        790.0461169467601,
        836.0976713511691,
        33.32212576300347,
        283.4772608938597,
        14.776342552308318,
        191.3738453100358,
        36.40688232780726,
        99.27044171443038,
        145.32214344995498,
        562.5325313753995,
        651.8908639108453,
        7.167037869712219,
        237.42821448614245,
        513.7357583306026,
        35.93872116772897,
        375.5808239380935,
        145.32214344995492,
        421.63239262268866,
        375.58065275035966,
        53.2187397297932
      ],
      "Cocaine": [
        329.3408778867102,
        651.8908639108454,
        283.48140602220684,
        882.1493732112499,
        651.8908639108454,
        697.9425657709264,
        790.0451992728262,
        513.7357583306027,
        237.42554717011674,
        77.61753572787765,
        513.7379471482786,
        332.3036546943954,
        55.99133153217648,
        27.24036766785357,
        191.37384531003582,
        191.37384531003585,
        329.52895089027874,
        46.070161202316996,
        836.0976713511691,
        145.32214344995506,
        375.5806540002567,
        28.18625181862224,
        34.125683357195626,
        21.888741394781377,
        145.3222389913411,
        333.4419068225806,
        145.32214344995495,
        191.37384531003588,
        191.37437050243247,
        329.528299004683,
        203.9258422699054,
        53.84639275094917,
        1158.4595843717354,
        99.27044158987397,
        99.27044158987407,
        651.8908639108455,
        145.32214344995492,
        655.4857455870856,
        145.32214344995484,
        191.3738453100358,
        30.19363824703187,
        608.4069989826302,
        191.37384531003588,
        467.6840564898121,
        375.58065275035966,
        99.27044158987398,
        790.045969491088,
        513.7357623972451
      ]
    },
    "num_parameters": 2,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- beta_value: r = 0.718\n- beta_fairness_deviation: r = 0.653",
  "previous_models": [
    "Specification: sum_tokens = token_self + token_opp\nfair_perc_self_calc = (token_self / sum_tokens) * 100\nfairness_deviation = split_perc_self - fair_perc_self_calc\nU = beta_value * split_perc_self + beta_fairness_deviation * fairness_deviation\nSummary: A linear utility model for responder decisions. Utility to accept an offer is a weighted sum of the proposed percentage share for the participant and the deviation of this proposed share from the calculated fair share based on token contributions. The model uses two learnable parameters: beta_value, which scales the influence of the proposed percentage itself, and beta_fairness_deviation, which scales the influence of the fairness deviation. This structure aims to disentangle the value and fairness components of the offer to improve parameter identifiability.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 306.97131416331445\nOverall Accuracy: 0.7811\nGroup Accuracies:\n- Control: 0.8088\n- Cocaine: 0.7564\n\nParameter Recovery:\n- beta_value: r = 0.718\n- beta_fairness_deviation: r = 0.653"
  ]
}