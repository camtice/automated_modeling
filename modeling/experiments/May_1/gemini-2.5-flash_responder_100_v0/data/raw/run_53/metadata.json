{
  "task_description": "In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "Okay, here are the improved instructions for the next run (Run 53), building on the results of the previous runs.\n\nInstructions for Run 53 of 100:\n\nThe unwavering primary objective remains achieving parameter recovery >= 0.7 for *all* learnable parameters. This is the critical benchmark for model usability. While improved BIC and accuracy are valuable secondary goals, they must not come at the expense of robust parameter recovery. A model with excellent fit but poor parameter identifiability is not suitable for drawing meaningful conclusions about the underlying cognitive processes.\n\nThe previous run (Run 52) implemented a piecewise linear model based on fairness difference (`U = beta_value * split_perc_self + beta_unfairness_penalty * MIN(0.0, perc_difference)`). While achieving decent accuracy (0.763) and a fair BIC (311.86), it unfortunately failed the parameter recovery test for `beta_unfairness_penalty` (r = 0.561). `beta_value` recovered well (r = 0.768).\n\nAnalysis of Run 52's failure: The structure, while piecewise on the fairness difference, had `beta_value` scaling `split_perc_self` across all trials (implicitly or explicitly), while `beta_unfairness_penalty` scaled a term (`MIN(0.0, perc_difference)`) that is linearly related to `split_perc_self` and `fair_perc_self_calc` only in the \"unfair\" regime, and is zero otherwise. This likely led to confounding influences between `beta_value` and `beta_unfairness_penalty` in the \"unfair\" regime, preventing `beta_unfairness_penalty` from being uniquely identifiable from `beta_value`'s influence on `split_perc_self`. The parameters' roles were not sufficiently structurally independent across the data to allow for reliable separate estimation of `beta_unfairness_penalty`.\n\nRecall the relative success of Run 1 (BIC 40.53, Acc 0.671, Recovery >= 0.727 for both parameters), which used a piecewise structure on the *ratio* (`R_val`) and applied *different functional forms* (log vs. linear difference) scaled by the two parameters (`beta_gain_log` and `beta_loss_linear_diff`) in distinct gain vs. loss regimes. This structure seems to have created more distinct influences for the two parameters.\n\nThe core challenge persists: designing a mathematical structure for utility using exactly **2 learnable parameters** such that *both* parameters have truly distinct and identifiable influences on responder decisions (`trial_role == 1`). This means designing the model such that the parameters' effects are mathematically separable.\n\nBased on this analysis, focus your exploration for Run 53 on model structures where the two learnable parameters scale terms that are mathematically distinct from each other, or whose influence is primarily expressed in distinct parts of the decision space. This can be effectively achieved via:\n\n*   **Piecewise Structures with Orthogonal Parameter Roles per Regime:** Continue exploring piecewise functions based on the fairness point (e.g., `R_val >= 1`, `R_diff >= 0`, or `perc_difference >= 0`). The key is to assign one learnable parameter to scale a specific term or function *exclusively or primarily* in one regime (e.g., gains/favorable offers), and the *other* learnable parameter to scale a *different* term or function *exclusively or primarily* in the other regime (e.g., losses/unfair offers). This ensures the parameters' main influences are in different parts of the data space. Avoid structures like Run 52 where one parameter scales a common input across all data while the other scales a modified input in only one regime; instead, aim for parameters to scale terms that are functionally distinct and active in different, separated regions.\n    *   *Structural Principle:* Design the model as `U = IF(Condition based on fairness, beta1 * f1(Inputs), beta2 * f2(Inputs))`, where `f1` and `f2` are different functions of the relevant inputs (like `split_perc_self`, `fair_perc_self_calc`, `R_val`, `R_diff`, etc.). This ensures `beta1` influences utility through `f1` only when the condition is met, and `beta2` influences utility through `f2` only when the condition is *not* met.\n    *   *Example Ideas:*\n        *   `U = IF(R_val >= 1.0, beta_gain_sensitivity * log(R_val + 1e-6), beta_loss_slope * (R_val - 1.0))` (Similar to Run 1, perhaps experiment with slightly different functions).\n        *   `U = IF(split_perc_self >= fair_perc_self_calc, beta_pos_gain * split_perc_self, beta_neg_fairness * (fair_perc_self_calc - split_perc_self)^2)` (One parameter scales proposed share for gains, other scales squared fairness difference for losses - using squared difference helps make it non-linear).\n        *   `U = IF(perc_difference >= 0, beta_good_offer * split_perc_self, beta_bad_offer * perc_difference)` (This is similar to Run 52, but perhaps re-evaluate if the linear terms were the issue - unlikely, but worth noting).\n        *   `U = IF(perc_difference >= 0, beta_value_gain * sqrt(split_perc_self), beta_penalty_loss * abs(perc_difference))` (Using non-linear transformations like sqrt and absolute difference).\n*   **Single Non-Linear Function with Orthogonal Parameter Roles:** If not using a piecewise structure, design a single non-linear function of the inputs (`split_perc_self`, `fair_perc_self_calc`, ratio, difference) such that the two parameters affect mathematically distinct properties of the function's shape or response. For example, one parameter could control the overall scale or sensitivity, while the other parameter controls an asymmetry, curvature, or a threshold effect in a non-linear way.\n\n*   **Avoid:** Any model that simplifies to `U = c1 * Input1 + c2 * Input2` where `c1` and `c2` are simple combinations of `beta1` and `beta2`. Avoid structures where the terms scaled by `beta1` and `beta2` are highly correlated or linearly dependent across the dataset. This was the likely downfall of Run 52.\n\n*   **Key Inputs & Calculated Variables:** Use `split_perc_self`, `token_self`, `token_opp` as data variables. Calculate `sum_tokens = token_self + token_opp` and `fair_perc_self_calc = IF(sum_tokens > 0, (token_self / sum_tokens) * 100.0, 50.0)`. Calculate intermediate variables like ratios (`R_val = split_perc_self / fair_perc_self_calc`), differences (`perc_difference = split_perc_self - fair_perc_self_calc`), or any other transformations (log, power, exp, sqrt, abs) as needed for your chosen structure.\n\n*   **Model Formula:** Define the utility (`U`). Include calculation steps for necessary derived variables *before* the final formula for `U`. Use clear mathematical notation within the <MODEL> tags.\n\n*   **Learnable Parameters:** Your model *must* have exactly **2 learnable parameters**. Choose descriptive names suitable for Python code. Define clear, generous, finite numerical bounds (e.g., [-20.0, 20.0] or wider/narrower if appropriate for the variable scale).\n\n*   **Calculated Variables:** Ensure all calculated variables used in the model formula (including `sum_tokens`, `fair_perc_self_calc`, any intermediate terms like ratios/differences/transformed values, and `U`) are included in your <VARIABLES> descriptions with `source: \"calculated\"`. Include descriptions for all data variables used as inputs (`token_self`, `token_opp`, `split_perc_self`) with `source: \"data\"`. Ensure the description for `fair_perc_self_calc` includes the `sum_tokens > 0` condition.\n\n*   **Model Specification:** Provide the formal mathematical formula between <MODEL> tags. Only the formula should be inside these tags.\n\n*   **Variable Descriptions:** Provide variable descriptions in JSON format between <VARIABLES> tags for *all* variables used in the <MODEL> formula (data, calculated, learnable). Include source, range (with inclusive flags), distribution (if applicable), and learnable status. Use `split_perc_self` as the variable name for the proposed percentage share for self.\n\n*   **Target Variable:** Specify \"accept\" as the target variable using <target_variable> tags.\n\n*   **Summary:** Provide a concise summary between <SUMMARY> tags. Describe the model's core idea and, crucially, how its specific mathematical structure is designed to ensure parameter identifiability for *both* learnable parameters (e.g., by having them scale distinct terms in different regimes, or influence separate, non-linearly related aspects of the utility calculation).\n\nAvailable Data Variables:\n- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.\n(Note: Use `split_perc_self` for the participant's proposed percentage share percentage).\n\nPlease think through this step by step, then provide your model specification and variable descriptions. Remember that robust parameter identifiability for *both* learnable parameters is the absolute priority. Your goal is to find a mathematical structure where both parameters can be uniquely and reliably estimated from the data by ensuring their influences are clearly distinguishable. This requires making their contributions to utility as distinct and non-overlapping as possible, often by having them scale different, non-linearly related terms or influence different regimes of the decision space. Be creative in designing the mathematical relationship between inputs, parameters, and utility to achieve this separation.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: Okay, here are the improved instructions for the next run (Run 53), building on the results of the previous runs.\n\nInstructions for Run 53 of 100:\n\nThe unwavering primary objective remains achieving parameter recovery >= 0.7 for *all* learnable parameters. This is the critical benchmark for model usability. While improved BIC and accuracy are valuable secondary goals, they must not come at the expense of robust parameter recovery. A model with excellent fit but poor parameter identifiability is not suitable for drawing meaningful conclusions about the underlying cognitive processes.\n\nThe previous run (Run 52) implemented a piecewise linear model based on fairness difference (`U = beta_value * split_perc_self + beta_unfairness_penalty * MIN(0.0, perc_difference)`). While achieving decent accuracy (0.763) and a fair BIC (311.86), it unfortunately failed the parameter recovery test for `beta_unfairness_penalty` (r = 0.561). `beta_value` recovered well (r = 0.768).\n\nAnalysis of Run 52's failure: The structure, while piecewise on the fairness difference, had `beta_value` scaling `split_perc_self` across all trials (implicitly or explicitly), while `beta_unfairness_penalty` scaled a term (`MIN(0.0, perc_difference)`) that is linearly related to `split_perc_self` and `fair_perc_self_calc` only in the \"unfair\" regime, and is zero otherwise. This likely led to confounding influences between `beta_value` and `beta_unfairness_penalty` in the \"unfair\" regime, preventing `beta_unfairness_penalty` from being uniquely identifiable from `beta_value`'s influence on `split_perc_self`. The parameters' roles were not sufficiently structurally independent across the data to allow for reliable separate estimation of `beta_unfairness_penalty`.\n\nRecall the relative success of Run 1 (BIC 40.53, Acc 0.671, Recovery >= 0.727 for both parameters), which used a piecewise structure on the *ratio* (`R_val`) and applied *different functional forms* (log vs. linear difference) scaled by the two parameters (`beta_gain_log` and `beta_loss_linear_diff`) in distinct gain vs. loss regimes. This structure seems to have created more distinct influences for the two parameters.\n\nThe core challenge persists: designing a mathematical structure for utility using exactly **2 learnable parameters** such that *both* parameters have truly distinct and identifiable influences on responder decisions (`trial_role == 1`). This means designing the model such that the parameters' effects are mathematically separable.\n\nBased on this analysis, focus your exploration for Run 53 on model structures where the two learnable parameters scale terms that are mathematically distinct from each other, or whose influence is primarily expressed in distinct parts of the decision space. This can be effectively achieved via:\n\n*   **Piecewise Structures with Orthogonal Parameter Roles per Regime:** Continue exploring piecewise functions based on the fairness point (e.g., `R_val >= 1`, `R_diff >= 0`, or `perc_difference >= 0`). The key is to assign one learnable parameter to scale a specific term or function *exclusively or primarily* in one regime (e.g., gains/favorable offers), and the *other* learnable parameter to scale a *different* term or function *exclusively or primarily* in the other regime (e.g., losses/unfair offers). This ensures the parameters' main influences are in different parts of the data space. Avoid structures like Run 52 where one parameter scales a common input across all data while the other scales a modified input in only one regime; instead, aim for parameters to scale terms that are functionally distinct and active in different, separated regions.\n    *   *Structural Principle:* Design the model as `U = IF(Condition based on fairness, beta1 * f1(Inputs), beta2 * f2(Inputs))`, where `f1` and `f2` are different functions of the relevant inputs (like `split_perc_self`, `fair_perc_self_calc`, `R_val`, `R_diff`, etc.). This ensures `beta1` influences utility through `f1` only when the condition is met, and `beta2` influences utility through `f2` only when the condition is *not* met.\n    *   *Example Ideas:*\n        *   `U = IF(R_val >= 1.0, beta_gain_sensitivity * log(R_val + 1e-6), beta_loss_slope * (R_val - 1.0))` (Similar to Run 1, perhaps experiment with slightly different functions).\n        *   `U = IF(split_perc_self >= fair_perc_self_calc, beta_pos_gain * split_perc_self, beta_neg_fairness * (fair_perc_self_calc - split_perc_self)^2)` (One parameter scales proposed share for gains, other scales squared fairness difference for losses - using squared difference helps make it non-linear).\n        *   `U = IF(perc_difference >= 0, beta_good_offer * split_perc_self, beta_bad_offer * perc_difference)` (This is similar to Run 52, but perhaps re-evaluate if the linear terms were the issue - unlikely, but worth noting).\n        *   `U = IF(perc_difference >= 0, beta_value_gain * sqrt(split_perc_self), beta_penalty_loss * abs(perc_difference))` (Using non-linear transformations like sqrt and absolute difference).\n*   **Single Non-Linear Function with Orthogonal Parameter Roles:** If not using a piecewise structure, design a single non-linear function of the inputs (`split_perc_self`, `fair_perc_self_calc`, ratio, difference) such that the two parameters affect mathematically distinct properties of the function's shape or response. For example, one parameter could control the overall scale or sensitivity, while the other parameter controls an asymmetry, curvature, or a threshold effect in a non-linear way.\n\n*   **Avoid:** Any model that simplifies to `U = c1 * Input1 + c2 * Input2` where `c1` and `c2` are simple combinations of `beta1` and `beta2`. Avoid structures where the terms scaled by `beta1` and `beta2` are highly correlated or linearly dependent across the dataset. This was the likely downfall of Run 52.\n\n*   **Key Inputs & Calculated Variables:** Use `split_perc_self`, `token_self`, `token_opp` as data variables. Calculate `sum_tokens = token_self + token_opp` and `fair_perc_self_calc = IF(sum_tokens > 0, (token_self / sum_tokens) * 100.0, 50.0)`. Calculate intermediate variables like ratios (`R_val = split_perc_self / fair_perc_self_calc`), differences (`perc_difference = split_perc_self - fair_perc_self_calc`), or any other transformations (log, power, exp, sqrt, abs) as needed for your chosen structure.\n\n*   **Model Formula:** Define the utility (`U`). Include calculation steps for necessary derived variables *before* the final formula for `U`. Use clear mathematical notation within the <MODEL> tags.\n\n*   **Learnable Parameters:** Your model *must* have exactly **2 learnable parameters**. Choose descriptive names suitable for Python code. Define clear, generous, finite numerical bounds (e.g., [-20.0, 20.0] or wider/narrower if appropriate for the variable scale).\n\n*   **Calculated Variables:** Ensure all calculated variables used in the model formula (including `sum_tokens`, `fair_perc_self_calc`, any intermediate terms like ratios/differences/transformed values, and `U`) are included in your <VARIABLES> descriptions with `source: \"calculated\"`. Include descriptions for all data variables used as inputs (`token_self`, `token_opp`, `split_perc_self`) with `source: \"data\"`. Ensure the description for `fair_perc_self_calc` includes the `sum_tokens > 0` condition.\n\n*   **Model Specification:** Provide the formal mathematical formula between <MODEL> tags. Only the formula should be inside these tags.\n\n*   **Variable Descriptions:** Provide variable descriptions in JSON format between <VARIABLES> tags for *all* variables used in the <MODEL> formula (data, calculated, learnable). Include source, range (with inclusive flags), distribution (if applicable), and learnable status. Use `split_perc_self` as the variable name for the proposed percentage share for self.\n\n*   **Target Variable:** Specify \"accept\" as the target variable using <target_variable> tags.\n\n*   **Summary:** Provide a concise summary between <SUMMARY> tags. Describe the model's core idea and, crucially, how its specific mathematical structure is designed to ensure parameter identifiability for *both* learnable parameters (e.g., by having them scale distinct terms in different regimes, or influence separate, non-linearly related aspects of the utility calculation).\n\nAvailable Data Variables:\n- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.\n(Note: Use `split_perc_self` for the participant's proposed percentage share percentage).\n\nPlease think through this step by step, then provide your model specification and variable descriptions. Remember that robust parameter identifiability for *both* learnable parameters is the absolute priority. Your goal is to find a mathematical structure where both parameters can be uniquely and reliably estimated from the data by ensuring their influences are clearly distinguishable. This requires making their contributions to utility as distinct and non-overlapping as possible, often by having them scale different, non-linearly related terms or influence different regimes of the decision space. Be creative in designing the mathematical relationship between inputs, parameters, and utility to achieve this separation.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "```json\n<MODEL>\nsum_tokens = token_self + token_opp\nfair_perc_self_calc = (sum_tokens > 0) ? (token_self / sum_tokens) * 100.0 : 50.0\nperc_difference = split_perc_self - fair_perc_self_calc\nabs_perc_difference = abs(perc_difference)\nU = perc_difference >= 0 ? beta_gain_scale * split_perc_self : beta_loss_penalty * abs_perc_difference\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The proposed percentage share for the participant\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"sum_tokens\": {\n      \"description\": \"Total number of tokens found by both participants\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 200,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fair_perc_self_calc\": {\n      \"description\": \"Calculated fair percentage share for the participant based on token contribution. If total tokens are zero, fair share is 50%.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"perc_difference\": {\n      \"description\": \"Difference between the proposed percentage share for the participant and their calculated fair percentage share.\",\n      \"range\": {\n        \"min\": -100.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n     \"abs_perc_difference\": {\n      \"description\": \"Absolute difference between the proposed percentage share for the participant and their calculated fair percentage share.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_gain_scale\": {\n      \"description\": \"Sensitivity parameter scaling utility for offers that are fair or favorable (percentage difference >= 0). Scales the proposed percentage itself.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 10.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_loss_penalty\": {\n      \"description\": \"Sensitivity parameter scaling utility for offers that are unfair (percentage difference < 0). Scales the absolute percentage difference from fairness; expected to be negative.\",\n      \"range\": {\n        \"min\": -10.0,\n        \"max\": 0.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Calculated utility of the proposed offer for the participant.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA piecewise linear utility model for responder behavior. Utility (U) is calculated based on the proposed percentage share (split_perc_self) relative to the participant's fair share (fair_perc_self_calc), derived from token contributions. When the proposed share is fair or favorable (percentage difference >= 0), utility is linearly proportional to split_perc_self, scaled by the learnable parameter beta_gain_scale. When the proposed share is unfair (percentage difference < 0), utility is linearly penalized based on the absolute deviation from fairness, scaled by the learnable parameter beta_loss_penalty (expected to be negative). This piecewise structure, applying the two learnable parameters to scale different input terms (split_perc_self vs. absolute percentage difference) in distinct decision regimes (fair/favorable vs. unfair), is designed to enhance parameter identifiability. The utility is converted to an acceptance probability using a logistic function.\n</SUMMARY>\n```"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['beta_gain_scale', 'beta_loss_penalty']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                sum_tokens = token_self + token_opp\nfair_perc_self_calc = (sum_tokens > 0) ? (token_self / sum_tokens) * 100.0 : 50.0\nperc_difference = split_perc_self - fair_perc_self_calc\nabs_perc_difference = abs(perc_difference)\nU = perc_difference >= 0 ? beta_gain_scale * split_perc_self : beta_loss_penalty * abs_perc_difference\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The proposed percentage share for the participant\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"sum_tokens\": {\n      \"description\": \"Total number of tokens found by both participants\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 200,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fair_perc_self_calc\": {\n      \"description\": \"Calculated fair percentage share for the participant based on token contribution. If total tokens are zero, fair share is 50%.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"perc_difference\": {\n      \"description\": \"Difference between the proposed percentage share for the participant and their calculated fair percentage share.\",\n      \"range\": {\n        \"min\": -100.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"abs_perc_difference\": {\n      \"description\": \"Absolute difference between the proposed percentage share for the participant and their calculated fair percentage share.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_gain_scale\": {\n      \"description\": \"Sensitivity parameter scaling utility for offers that are fair or favorable (percentage difference >= 0). Scales the proposed percentage itself.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 10.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_loss_penalty\": {\n      \"description\": \"Sensitivity parameter scaling utility for offers that are unfair (percentage difference < 0). Scales the absolute percentage difference from fairness; expected to be negative.\",\n      \"range\": {\n        \"min\": -10.0,\n        \"max\": 0.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Calculated utility of the proposed offer for the participant.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "python\nimport json\nimport math\n\ndef simulate_model(trial_data, beta_gain_scale=1.0, beta_loss_penalty=-1.0):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        split_perc_self = trial.get(\"splitperc_self\", 50.0)\n\n        sum_tokens = token_self + token_opp\n        fair_perc_self_calc = (token_self / sum_tokens) * 100.0 if sum_tokens > 0 else 50.0\n        perc_difference = split_perc_self - fair_perc_self_calc\n        abs_perc_difference = abs(perc_difference)\n\n        if perc_difference >= 0:\n            U = beta_gain_scale * split_perc_self\n        else:\n            U = beta_loss_penalty * abs_perc_difference\n\n        model_predictions.append(U)\n    return model_predictions\n```",
      "timestamp": 1746102104.173834
    }
  ],
  "learnable_parameters": {
    "beta_gain_scale": {
      "description": "Sensitivity parameter scaling utility for offers that are fair or favorable (percentage difference >= 0). Scales the proposed percentage itself.",
      "range": {
        "min": 0.0,
        "max": 10.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta_loss_penalty": {
      "description": "Sensitivity parameter scaling utility for offers that are unfair (percentage difference < 0). Scales the absolute percentage difference from fairness; expected to be negative.",
      "range": {
        "min": -10.0,
        "max": 0.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "sum_tokens = token_self + token_opp\nfair_perc_self_calc = (sum_tokens > 0) ? (token_self / sum_tokens) * 100.0 : 50.0\nperc_difference = split_perc_self - fair_perc_self_calc\nabs_perc_difference = abs(perc_difference)\nU = perc_difference >= 0 ? beta_gain_scale * split_perc_self : beta_loss_penalty * abs_perc_difference",
  "variable_descriptions": {
    "token_self": {
      "description": "Number of tokens found by the participant",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "split_perc_self": {
      "description": "The proposed percentage share for the participant",
      "range": {
        "min": 0.0,
        "max": 100.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "sum_tokens": {
      "description": "Total number of tokens found by both participants",
      "range": {
        "min": 0,
        "max": 200,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "fair_perc_self_calc": {
      "description": "Calculated fair percentage share for the participant based on token contribution. If total tokens are zero, fair share is 50%.",
      "range": {
        "min": 0.0,
        "max": 100.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "perc_difference": {
      "description": "Difference between the proposed percentage share for the participant and their calculated fair percentage share.",
      "range": {
        "min": -100.0,
        "max": 100.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "abs_perc_difference": {
      "description": "Absolute difference between the proposed percentage share for the participant and their calculated fair percentage share.",
      "range": {
        "min": 0.0,
        "max": 100.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "beta_gain_scale": {
      "description": "Sensitivity parameter scaling utility for offers that are fair or favorable (percentage difference >= 0). Scales the proposed percentage itself.",
      "range": {
        "min": 0.0,
        "max": 10.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta_loss_penalty": {
      "description": "Sensitivity parameter scaling utility for offers that are unfair (percentage difference < 0). Scales the absolute percentage difference from fairness; expected to be negative.",
      "range": {
        "min": -10.0,
        "max": 0.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "U": {
      "description": "Calculated utility of the proposed offer for the participant.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "A piecewise linear utility model for responder behavior. Utility (U) is calculated based on the proposed percentage share (split_perc_self) relative to the participant's fair share (fair_perc_self_calc), derived from token contributions. When the proposed share is fair or favorable (percentage difference >= 0), utility is linearly proportional to split_perc_self, scaled by the learnable parameter beta_gain_scale. When the proposed share is unfair (percentage difference < 0), utility is linearly penalized based on the absolute deviation from fairness, scaled by the learnable parameter beta_loss_penalty (expected to be negative). This piecewise structure, applying the two learnable parameters to scale different input terms (split_perc_self vs. absolute percentage difference) in distinct decision regimes (fair/favorable vs. unfair), is designed to enhance parameter identifiability. The utility is converted to an acceptance probability using a logistic function.",
  "target_variable": "accept",
  "full_reasoning": "```json\n<MODEL>\nsum_tokens = token_self + token_opp\nfair_perc_self_calc = (sum_tokens > 0) ? (token_self / sum_tokens) * 100.0 : 50.0\nperc_difference = split_perc_self - fair_perc_self_calc\nabs_perc_difference = abs(perc_difference)\nU = perc_difference >= 0 ? beta_gain_scale * split_perc_self : beta_loss_penalty * abs_perc_difference\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The proposed percentage share for the participant\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"sum_tokens\": {\n      \"description\": \"Total number of tokens found by both participants\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 200,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fair_perc_self_calc\": {\n      \"description\": \"Calculated fair percentage share for the participant based on token contribution. If total tokens are zero, fair share is 50%.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"perc_difference\": {\n      \"description\": \"Difference between the proposed percentage share for the participant and their calculated fair percentage share.\",\n      \"range\": {\n        \"min\": -100.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n     \"abs_perc_difference\": {\n      \"description\": \"Absolute difference between the proposed percentage share for the participant and their calculated fair percentage share.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_gain_scale\": {\n      \"description\": \"Sensitivity parameter scaling utility for offers that are fair or favorable (percentage difference >= 0). Scales the proposed percentage itself.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 10.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_loss_penalty\": {\n      \"description\": \"Sensitivity parameter scaling utility for offers that are unfair (percentage difference < 0). Scales the absolute percentage difference from fairness; expected to be negative.\",\n      \"range\": {\n        \"min\": -10.0,\n        \"max\": 0.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Calculated utility of the proposed offer for the participant.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA piecewise linear utility model for responder behavior. Utility (U) is calculated based on the proposed percentage share (split_perc_self) relative to the participant's fair share (fair_perc_self_calc), derived from token contributions. When the proposed share is fair or favorable (percentage difference >= 0), utility is linearly proportional to split_perc_self, scaled by the learnable parameter beta_gain_scale. When the proposed share is unfair (percentage difference < 0), utility is linearly penalized based on the absolute deviation from fairness, scaled by the learnable parameter beta_loss_penalty (expected to be negative). This piecewise structure, applying the two learnable parameters to scale different input terms (split_perc_self vs. absolute percentage difference) in distinct decision regimes (fair/favorable vs. unfair), is designed to enhance parameter identifiability. The utility is converted to an acceptance probability using a logistic function.\n</SUMMARY>\n```",
  "prediction_type": "utility",
  "current_model": "Specification: sum_tokens = token_self + token_opp\nfair_perc_self_calc = (sum_tokens > 0) ? (token_self / sum_tokens) * 100.0 : 50.0\nperc_difference = split_perc_self - fair_perc_self_calc\nabs_perc_difference = abs(perc_difference)\nU = perc_difference >= 0 ? beta_gain_scale * split_perc_self : beta_loss_penalty * abs_perc_difference\nSummary: A piecewise linear utility model for responder behavior. Utility (U) is calculated based on the proposed percentage share (split_perc_self) relative to the participant's fair share (fair_perc_self_calc), derived from token contributions. When the proposed share is fair or favorable (percentage difference >= 0), utility is linearly proportional to split_perc_self, scaled by the learnable parameter beta_gain_scale. When the proposed share is unfair (percentage difference < 0), utility is linearly penalized based on the absolute deviation from fairness, scaled by the learnable parameter beta_loss_penalty (expected to be negative). This piecewise structure, applying the two learnable parameters to scale different input terms (split_perc_self vs. absolute percentage difference) in distinct decision regimes (fair/favorable vs. unfair), is designed to enhance parameter identifiability. The utility is converted to an acceptance probability using a logistic function.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, beta_gain_scale=1.0, beta_loss_penalty=-1.0):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        split_perc_self = trial.get(\"splitperc_self\", 50.0)\n\n        sum_tokens = token_self + token_opp\n        fair_perc_self_calc = (token_self / sum_tokens) * 100.0 if sum_tokens > 0 else 50.0\n        perc_difference = split_perc_self - fair_perc_self_calc\n        abs_perc_difference = abs(perc_difference)\n\n        if perc_difference >= 0:\n            U = beta_gain_scale * split_perc_self\n        else:\n            U = beta_loss_penalty * abs_perc_difference\n\n        model_predictions.append(U)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.6361416361416361,
  "group_accuracies": {
    "Control": 0.6175710594315246,
    "Cocaine": 0.6527777777777778
  },
  "group_parameter_averages": {
    "Control": {
      "beta_gain_scale": 5.325513881007098,
      "beta_loss_penalty": -0.4263165788635963
    },
    "Cocaine": {
      "beta_gain_scale": 5.771470780223686,
      "beta_loss_penalty": -0.896340432641783
    }
  },
  "fitting_results": [
    {
      "beta_gain_scale": 3.449566623478634,
      "beta_loss_penalty": -0.1890505399403025,
      "success": true,
      "log_likelihood": -51.61969569225145,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_scale": 6.703116018824319,
      "beta_loss_penalty": -0.029775149269827418,
      "success": true,
      "log_likelihood": -19.999139411969725,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_scale": 6.519697545312742,
      "beta_loss_penalty": -0.03674396803782194,
      "success": true,
      "log_likelihood": -19.058796476161678,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_scale": 1.3179499195989142,
      "beta_loss_penalty": -0.04683745099146245,
      "success": true,
      "log_likelihood": -17.60199760420631,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_scale": 1.4168707592838337,
      "beta_loss_penalty": -0.057566015597989906,
      "success": true,
      "log_likelihood": -16.04212254168092,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_scale": 3.5613123718454984,
      "beta_loss_penalty": -0.009266834199514568,
      "success": true,
      "log_likelihood": -21.94243520060635,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_scale": 9.790767501727084,
      "beta_loss_penalty": 0.0,
      "success": true,
      "log_likelihood": -22.18070977111824,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_scale": 7.1026283960042385,
      "beta_loss_penalty": -0.005646521977448707,
      "success": true,
      "log_likelihood": -22.091462538153035,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_scale": 6.303914806066031,
      "beta_loss_penalty": 0.0,
      "success": true,
      "log_likelihood": -22.180709771118234,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_scale": 8.4665081779123,
      "beta_loss_penalty": -0.0640496102501869,
      "success": true,
      "log_likelihood": -15.131173282304312,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_scale": 4.180004139367402,
      "beta_loss_penalty": -0.05689990986946516,
      "success": true,
      "log_likelihood": -16.137509346459,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_scale": 5.1742406897734305,
      "beta_loss_penalty": -0.16651511386747142,
      "success": true,
      "log_likelihood": -52.50511767638969,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_scale": 7.4261105472977444,
      "beta_loss_penalty": -0.056243306017221446,
      "success": true,
      "log_likelihood": -16.231793986207116,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_scale": 8.360508587334103,
      "beta_loss_penalty": 0.0,
      "success": true,
      "log_likelihood": -22.180709771118238,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_scale": 7.882854128680355,
      "beta_loss_penalty": 0.0,
      "success": true,
      "log_likelihood": -22.180709771118238,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_scale": 4.008279724491583,
      "beta_loss_penalty": 0.0,
      "success": true,
      "log_likelihood": -22.180709771118234,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_scale": 4.129955671240342,
      "beta_loss_penalty": -8.768350769243279,
      "success": true,
      "log_likelihood": -736.823183040056,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.1111111111111111,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_scale": 3.6938890723092377,
      "beta_loss_penalty": 0.0,
      "success": true,
      "log_likelihood": -22.180709771118238,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_scale": 7.837216923862731,
      "beta_loss_penalty": 0.0,
      "success": true,
      "log_likelihood": -22.180709771118238,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_scale": 3.0514074288372073,
      "beta_loss_penalty": 0.0,
      "success": true,
      "log_likelihood": -22.180709771118234,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_scale": 0.9564904773894389,
      "beta_loss_penalty": -0.025661433940922226,
      "success": true,
      "log_likelihood": -20.506906174125355,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_scale": 5.404959162424868,
      "beta_loss_penalty": 0.0,
      "success": true,
      "log_likelihood": -22.180709771118238,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_scale": 4.403265577449962,
      "beta_loss_penalty": -0.04424340522098624,
      "success": true,
      "log_likelihood": -17.98140502854739,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_scale": 6.698535210646784,
      "beta_loss_penalty": -0.021439827223276763,
      "success": true,
      "log_likelihood": -20.977509588792746,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_scale": 5.142235410646936,
      "beta_loss_penalty": -0.03762400193356188,
      "success": true,
      "log_likelihood": -18.934854316389806,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_scale": 7.798047234212766,
      "beta_loss_penalty": -0.020420336266510318,
      "success": true,
      "log_likelihood": -21.082154455261605,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_scale": 2.897770651915793,
      "beta_loss_penalty": -0.020420343820768336,
      "success": true,
      "log_likelihood": -21.08215445525562,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_scale": 1.8856655001420897,
      "beta_loss_penalty": -0.11670554247101542,
      "success": true,
      "log_likelihood": -9.438069467110086,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_scale": 2.841146980563983,
      "beta_loss_penalty": 0.0,
      "success": true,
      "log_likelihood": -22.180709771118234,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_scale": 2.927243072243292,
      "beta_loss_penalty": 0.0,
      "success": true,
      "log_likelihood": -22.180709771118238,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_scale": 5.82903486082913,
      "beta_loss_penalty": 0.0,
      "success": true,
      "log_likelihood": -22.180709771118238,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_scale": 7.43789403167677,
      "beta_loss_penalty": -8.319623840338718,
      "success": true,
      "log_likelihood": -69.07755278652314,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_scale": 4.7662616285503665,
      "beta_loss_penalty": -0.027500073655011264,
      "success": true,
      "log_likelihood": -43.31129137991333,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_scale": 5.176582423238952,
      "beta_loss_penalty": -0.050722570126840574,
      "success": true,
      "log_likelihood": -17.03320950534957,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_scale": 8.712693925480169,
      "beta_loss_penalty": 0.0,
      "success": true,
      "log_likelihood": -22.180709771118238,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_scale": 3.3863278855305925,
      "beta_loss_penalty": -0.003261458617248185,
      "success": true,
      "log_likelihood": -22.150830552583923,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_scale": 2.584325175162104,
      "beta_loss_penalty": -0.0029643256521871097,
      "success": true,
      "log_likelihood": -22.15601870331449,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_scale": 7.30829069254564,
      "beta_loss_penalty": -0.034603631757038435,
      "success": true,
      "log_likelihood": -19.356019025527285,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_scale": 7.5145851279330556,
      "beta_loss_penalty": -0.00029615786657123357,
      "success": true,
      "log_likelihood": -22.180462978221932,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_scale": 1.5322926982498863,
      "beta_loss_penalty": 0.0,
      "success": true,
      "log_likelihood": -22.180709771118238,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_scale": 6.989107403069603,
      "beta_loss_penalty": -0.007147363770281963,
      "success": true,
      "log_likelihood": -22.038161248764744,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_scale": 8.741464331082325,
      "beta_loss_penalty": -0.11203338921171205,
      "success": true,
      "log_likelihood": -9.819175177941245,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_scale": 7.686078389072986,
      "beta_loss_penalty": 0.0,
      "success": true,
      "log_likelihood": -22.180709771118234,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_scale": 7.696999136918258,
      "beta_loss_penalty": -0.01517720403411727,
      "success": true,
      "log_likelihood": -21.556121362106808,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_scale": 0.5890760916641957,
      "beta_loss_penalty": -0.01296735905686089,
      "success": true,
      "log_likelihood": -21.720255942915017,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_scale": 7.793003636783595,
      "beta_loss_penalty": 0.0,
      "success": true,
      "log_likelihood": -22.180709771118238,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_scale": 4.155421638990898,
      "beta_loss_penalty": -0.02109852748274615,
      "success": true,
      "log_likelihood": -21.012957963228008,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_scale": 1.936967397241589,
      "beta_loss_penalty": -0.04082640989596479,
      "success": true,
      "log_likelihood": -18.477418684879975,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_scale": 7.876166796819249,
      "beta_loss_penalty": -0.05756595638651179,
      "success": true,
      "log_likelihood": -16.042122541538845,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_scale": 5.769057392599831,
      "beta_loss_penalty": -0.005048627606032679,
      "success": true,
      "log_likelihood": -45.1351383547591,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_scale": 8.949270609423577,
      "beta_loss_penalty": 0.0,
      "success": true,
      "log_likelihood": -22.180709771118238,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_scale": 2.6735863974411043,
      "beta_loss_penalty": -0.10578473093043289,
      "success": true,
      "log_likelihood": -56.41507383690323,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_scale": 7.059064822968142,
      "beta_loss_penalty": -0.016460722388683808,
      "success": true,
      "log_likelihood": -44.47652156753969,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_scale": 8.658753143880338,
      "beta_loss_penalty": 0.0,
      "success": true,
      "log_likelihood": -45.206560701158665,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_scale": 3.937941366360038,
      "beta_loss_penalty": -0.05249028678155694,
      "success": true,
      "log_likelihood": -16.775206655844634,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_scale": 5.391772571631142,
      "beta_loss_penalty": -0.09088053494489458,
      "success": true,
      "log_likelihood": -11.832341255297353,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_scale": 9.823869747983618,
      "beta_loss_penalty": -0.09231698474695228,
      "success": true,
      "log_likelihood": -11.679682623036612,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_scale": 4.369282562236378,
      "beta_loss_penalty": 0.0,
      "success": true,
      "log_likelihood": -22.180709771118234,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_scale": 9.387675979169707,
      "beta_loss_penalty": -8.767833373258627,
      "success": true,
      "log_likelihood": -92.10340371656227,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_scale": 1.3052858046127347,
      "beta_loss_penalty": 0.0,
      "success": true,
      "log_likelihood": -22.180709771118238,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_scale": 1.6722385185214983,
      "beta_loss_penalty": -0.0026674331560863117,
      "success": true,
      "log_likelihood": -22.16071183854699,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_scale": 5.750012307617757,
      "beta_loss_penalty": -0.03173872278363921,
      "success": true,
      "log_likelihood": -19.742876438033576,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_scale": 3.5693354597198166,
      "beta_loss_penalty": -0.18905095455606719,
      "success": true,
      "log_likelihood": -51.61969569258006,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_scale": 6.973631637449796,
      "beta_loss_penalty": -0.02787251919118596,
      "success": true,
      "log_likelihood": -43.26514885849538,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_scale": 9.318175061889683,
      "beta_loss_penalty": -0.105782304730612,
      "success": true,
      "log_likelihood": -10.36337197476746,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_scale": 2.5132663466099245,
      "beta_loss_penalty": -0.01974767029882754,
      "success": true,
      "log_likelihood": -21.149099759149305,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_scale": 3.2651220363416336,
      "beta_loss_penalty": 0.0,
      "success": true,
      "log_likelihood": -22.180709771118238,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_scale": 3.607287059009441,
      "beta_loss_penalty": 0.0,
      "success": true,
      "log_likelihood": -22.180709771118238,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_scale": 2.2964148278534244,
      "beta_loss_penalty": -0.015496575048885722,
      "success": true,
      "log_likelihood": -21.530560011032346,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_scale": 7.1419560662864345,
      "beta_loss_penalty": 0.0,
      "success": true,
      "log_likelihood": -22.180709771118238,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_scale": 7.6730526731488435,
      "beta_loss_penalty": -8.701144064190924,
      "success": true,
      "log_likelihood": 3.5994935918969497e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_scale": 6.017688132063118,
      "beta_loss_penalty": -0.10387272607977235,
      "success": true,
      "log_likelihood": -56.58977294600935,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_scale": 8.173428969369672,
      "beta_loss_penalty": -0.023872411213446566,
      "success": true,
      "log_likelihood": -20.71326537036759,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_scale": 4.054112445015012,
      "beta_loss_penalty": 0.0,
      "success": true,
      "log_likelihood": -22.180709771118238,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_scale": 7.759754884871216,
      "beta_loss_penalty": -0.012655070427424493,
      "success": true,
      "log_likelihood": -44.76745879122239,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_scale": 9.486609254812077,
      "beta_loss_penalty": 0.0,
      "success": true,
      "log_likelihood": -22.180709771118234,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_scale": 8.346347826942583,
      "beta_loss_penalty": 0.0,
      "success": true,
      "log_likelihood": -22.180709771118238,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_scale": 8.339196310373268,
      "beta_loss_penalty": -8.209357220345975,
      "success": true,
      "log_likelihood": -92.1034037165644,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_scale": 2.0395291797015433,
      "beta_loss_penalty": 0.0,
      "success": true,
      "log_likelihood": -22.180709771118234,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_scale": 0.004898204617963096,
      "beta_loss_penalty": -9.431883717756445,
      "success": true,
      "log_likelihood": -25.77399718257663,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_scale": 5.086921926197814,
      "beta_loss_penalty": -0.006545773077869973,
      "success": true,
      "log_likelihood": -22.060982874630234,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_scale": 9.932686191101377,
      "beta_loss_penalty": 0.0,
      "success": true,
      "log_likelihood": -22.180709771118234,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_scale": 3.217183308257703,
      "beta_loss_penalty": -0.1377480274992602,
      "success": true,
      "log_likelihood": -77.0398211454839,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_scale": 8.31755312636579,
      "beta_loss_penalty": -0.031340789646563574,
      "success": true,
      "log_likelihood": -19.795442325297586,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_scale": 7.131332754013702,
      "beta_loss_penalty": 0.0,
      "success": true,
      "log_likelihood": -22.180709771118238,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_scale": 8.049986886175386,
      "beta_loss_penalty": -6.557563107279146,
      "success": true,
      "log_likelihood": -46.0517018571236,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_scale": 1.0678140760415344,
      "beta_loss_penalty": 0.0,
      "success": true,
      "log_likelihood": -22.180709771118238,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_scale": 7.865831259869727,
      "beta_loss_penalty": -0.10777583248081514,
      "success": true,
      "log_likelihood": -56.23712032003968,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_scale": 9.363091120942391,
      "beta_loss_penalty": 0.0,
      "success": true,
      "log_likelihood": -22.180709771118234,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_scale": 9.333966679594752,
      "beta_loss_penalty": -0.029775129529254138,
      "success": true,
      "log_likelihood": -19.999139412030974,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_scale": 2.288977823237662,
      "beta_loss_penalty": 0.0,
      "success": true,
      "log_likelihood": -22.180709771118238,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "beta_gain_scale": {
        "r": 0.05795372994803636,
        "p": 0.566825640747348
      },
      "beta_loss_penalty": {
        "r": 0.30210031590250314,
        "p": 0.002252623205374475
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 76.6903033771508,
  "bic_Control": 86.93544942141648,
  "bic_Cocaine": 67.51236004582947,
  "bic_results": {
    "average_bic": 76.6903033771508,
    "individual_bics": [
      110.40642926141511,
      47.16531670085167,
      45.284630829235574,
      42.37103308532484,
      39.25128296027406,
      51.05190827812492,
      51.5284574191487,
      51.34996295321829,
      51.52845741914869,
      37.429384441520845,
      39.44205656983022,
      112.1772732296916,
      39.63062584932645,
      51.528457419148694,
      51.528457419148694,
      51.52845741914869,
      1480.8134039570243,
      51.528457419148694,
      51.528457419148694,
      51.52845741914869,
      48.18085022516293,
      51.528457419148694,
      43.129847934006996,
      49.12205705449771,
      45.03674650969183,
      49.33134678743543,
      49.331346787423456,
      26.04317681113239,
      51.52845741914869,
      51.528457419148694,
      51.528457419148694,
      145.3221434499585,
      93.78962063673887,
      41.23345688761136,
      51.528457419148694,
      51.46869898208006,
      51.4790752835412,
      45.87907592796679,
      51.52796383335608,
      51.528457419148694,
      51.24336037444171,
      26.805388232794712,
      51.52845741914869,
      50.27928060112583,
      50.60754976274225,
      51.528457419148694,
      49.19295380336823,
      44.12187524667217,
      39.25128295998991,
      97.43731458643042,
      51.528457419148694,
      119.99718555071868,
      96.1200810119916,
      97.58015927922955,
      40.71745118860149,
      30.831720387506927,
      30.526403122985442,
      51.52845741914869,
      191.37384531003676,
      51.528457419148694,
      51.4884615540062,
      46.65279075297937,
      110.40642926207234,
      93.69733559390298,
      27.89378182644714,
      49.46523739521083,
      51.528457419148694,
      51.528457419148694,
      50.22815789897691,
      51.528457419148694,
      7.167037869713233,
      120.34658376893091,
      48.5935686176474,
      51.528457419148694,
      96.701955459357,
      51.52845741914869,
      51.528457419148694,
      191.37384531004102,
      51.52845741914869,
      58.715032242065476,
      51.289003626172686,
      51.52845741914869,
      161.24668016788002,
      46.75792252750739,
      51.528457419148694,
      99.27044159115941,
      51.528457419148694,
      119.64127851699158,
      51.52845741914869,
      47.16531670097417,
      51.528457419148694
    ],
    "group_enabled": true,
    "group_bics": {
      "Control": [
        110.40642926141511,
        47.16531670085167,
        45.284630829235574,
        42.37103308532484,
        39.25128296027406,
        51.05190827812492,
        51.5284574191487,
        51.34996295321829,
        51.52845741914869,
        37.429384441520845,
        39.44205656983022,
        112.1772732296916,
        39.63062584932645,
        51.528457419148694,
        51.528457419148694,
        51.52845741914869,
        1480.8134039570243,
        51.528457419148694,
        51.528457419148694,
        51.52845741914869,
        48.18085022516293,
        51.528457419148694,
        43.129847934006996,
        49.12205705449771,
        45.03674650969183,
        49.33134678743543,
        49.331346787423456,
        26.04317681113239,
        51.52845741914869,
        51.528457419148694,
        51.528457419148694,
        145.3221434499585,
        93.78962063673887,
        41.23345688761136,
        51.528457419148694,
        51.46869898208006,
        51.4790752835412,
        45.87907592796679,
        51.52796383335608,
        51.528457419148694,
        51.24336037444171,
        26.805388232794712,
        51.52845741914869
      ],
      "Cocaine": [
        50.27928060112583,
        50.60754976274225,
        51.528457419148694,
        49.19295380336823,
        44.12187524667217,
        39.25128295998991,
        97.43731458643042,
        51.528457419148694,
        119.99718555071868,
        96.1200810119916,
        97.58015927922955,
        40.71745118860149,
        30.831720387506927,
        30.526403122985442,
        51.52845741914869,
        191.37384531003676,
        51.528457419148694,
        51.4884615540062,
        46.65279075297937,
        110.40642926207234,
        93.69733559390298,
        27.89378182644714,
        49.46523739521083,
        51.528457419148694,
        51.528457419148694,
        50.22815789897691,
        51.528457419148694,
        7.167037869713233,
        120.34658376893091,
        48.5935686176474,
        51.528457419148694,
        96.701955459357,
        51.52845741914869,
        51.528457419148694,
        191.37384531004102,
        51.52845741914869,
        58.715032242065476,
        51.289003626172686,
        51.52845741914869,
        161.24668016788002,
        46.75792252750739,
        51.528457419148694,
        99.27044159115941,
        51.528457419148694,
        119.64127851699158,
        51.52845741914869,
        47.16531670097417,
        51.528457419148694
      ]
    },
    "num_parameters": 2,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- beta_gain_scale: r = 0.058\n- beta_loss_penalty: r = 0.302",
  "previous_models": [
    "Specification: sum_tokens = token_self + token_opp\nfair_perc_self_calc = (sum_tokens > 0) ? (token_self / sum_tokens) * 100.0 : 50.0\nperc_difference = split_perc_self - fair_perc_self_calc\nabs_perc_difference = abs(perc_difference)\nU = perc_difference >= 0 ? beta_gain_scale * split_perc_self : beta_loss_penalty * abs_perc_difference\nSummary: A piecewise linear utility model for responder behavior. Utility (U) is calculated based on the proposed percentage share (split_perc_self) relative to the participant's fair share (fair_perc_self_calc), derived from token contributions. When the proposed share is fair or favorable (percentage difference >= 0), utility is linearly proportional to split_perc_self, scaled by the learnable parameter beta_gain_scale. When the proposed share is unfair (percentage difference < 0), utility is linearly penalized based on the absolute deviation from fairness, scaled by the learnable parameter beta_loss_penalty (expected to be negative). This piecewise structure, applying the two learnable parameters to scale different input terms (split_perc_self vs. absolute percentage difference) in distinct decision regimes (fair/favorable vs. unfair), is designed to enhance parameter identifiability. The utility is converted to an acceptance probability using a logistic function.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 76.6903033771508\nOverall Accuracy: 0.6361\nGroup Accuracies:\n- Control: 0.6176\n- Cocaine: 0.6528\n\nParameter Recovery:\n- beta_gain_scale: r = 0.058\n- beta_loss_penalty: r = 0.302"
  ]
}