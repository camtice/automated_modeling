{
  "task_description": "In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "Okay, here are the improved instructions for the next run (Run 54), building on the results of the previous runs.\n\nInstructions for Run 54 of 100:\n\nThe unwavering primary objective remains achieving parameter recovery >= 0.7 for *all* learnable parameters. This is the critical benchmark for model usability. While improved BIC and accuracy are valuable secondary goals, they must not come at the expense of robust parameter recovery. A model with excellent fit but poor parameter identifiability is not suitable for drawing meaningful conclusions about the underlying cognitive processes.\n\nThe previous run (Run 53) implemented a piecewise linear model based on fairness difference (`U = perc_difference >= 0 ? beta_gain_scale * split_perc_self : beta_loss_penalty * abs_perc_difference`). Despite having a piecewise structure, it unfortunately failed the parameter recovery test for *both* `beta_gain_scale` (r = 0.058) and `beta_loss_penalty` (r = 0.302). Its overall performance (BIC 76.69, Acc 0.636) was also poorer than several previous models.\n\nAnalysis of Run 53's failure: The structure assigned the parameters to scale `split_perc_self` in the gain regime and `abs_perc_difference` in the loss regime. While piecewise, these terms might still be too correlated or capture insufficiently distinct aspects of the offer value within their respective regimes for the parameters to be uniquely identified. Scaling linear terms, even in different parts of the input space, might not provide the necessary functional separation for robust estimation.\n\nRecall the relative success of Run 1 (BIC 40.53, Acc 0.671, Recovery >= 0.727 for both parameters), which used a piecewise structure on the *ratio* (`R_val`) and applied *different functional forms* (log vs. linear difference) scaled by the two parameters (`beta_gain_log` and `beta_loss_linear_diff`) in distinct gain vs. loss regimes. This structure seems to have created more distinct influences for the two parameters.\n\nThe core challenge persists: designing a mathematical structure for utility using exactly **2 learnable parameters** such that *both* parameters have truly distinct and identifiable influences on responder decisions (`trial_role == 1`). This requires making their contributions to utility as mathematically separable as possible across the data.\n\nBased on this analysis, focus your exploration for Run 54 on model structures where the two learnable parameters scale terms that are mathematically **maximally distinct** from each other, or whose influence is primarily expressed through **different, non-linearly related aspects** of the utility calculation. Simply scaling different linear terms in different regimes (as in Run 53) appears insufficient.\n\nConsider these strategies to enhance identifiability:\n\n*   **Piecewise Structures with Orthogonal, Non-Linear Parameter Roles per Regime:** Continue exploring piecewise functions based on a fairness split (e.g., `perc_difference >= 0` or `R_val >= 1`). The key is to assign `beta1` to scale a term or function `f1(Inputs)` *exclusively or primarily* in one regime (favorable offers) and `beta2` to scale a *different* term or function `f2(Inputs)` *exclusively or primarily* in the other regime (unfavorable offers). Crucially, ensure that `f1` and `f2` are mathematically diverse and non-linearly related transformations of the inputs.\n    *   *Structural Principle:* Design the model as `U = IF(Condition based on fairness, beta1 * f1(Inputs), beta2 * f2(Inputs))`, where `f1` and `f2` are distinct non-linear functions of the relevant inputs (like `split_perc_self`, `fair_perc_self_calc`, `R_val`, `perc_difference`). Avoid `f1` and `f2` being simple linear terms or linearly related transforms of the same base input.\n    *   *Example Ideas (building on Run 1's success with ratio/log):*\n        *   `U = IF(R_val >= 1.0, beta_gain_sensitivity * log(R_val + 1e-6), beta_loss_slope * (R_val - 1.0))` (Revisit Run 1 structure, perhaps refine bounds/inputs).\n        *   `U = IF(perc_difference >= 0, beta_pos_gain * sqrt(split_perc_self), beta_neg_fairness * exp(perc_difference))` (Using non-linear functions like sqrt and exp on relevant terms).\n        *   `U = IF(R_val >= 1.0, beta_gain_alpha * R_val^power_alpha, beta_loss_beta * (R_val - 1.0)^power_beta)` (Introducing exponents; note: this would require 4 parameters, maybe fix exponents or combine parameters differently). A better version: `U = IF(R_val >= 1.0, beta_gain_alpha * (R_val - 1.0)^2, beta_loss_beta * (1.0 - R_val)^2)` (Scaling squared deviation from 1 in each direction).\n\n*   **Single Highly Non-Linear Function with Orthogonal Parameter Roles:** If not using a piecewise structure, design a single, complex non-linear function of the inputs where `beta1` and `beta2` clearly influence distinct mathematical properties of the function's output. For instance, one parameter could control a general sensitivity or intercept, while the other specifically modulates a non-linearity, asymmetry, or threshold effect around the fairness point *within the unified formula*. This requires a more sophisticated function design than simple additive linear models. Think about functions that capture diminishing sensitivity to increasing gains or increasing sensitivity to losses relative to a reference point.\n\n*   **Avoid:** Any model structure where the terms scaled by `beta1` and `beta2` are linearly dependent or highly correlated across the dataset, or where one parameter's influence can be easily absorbed into the other. Linear scaling of simple input terms, even in piecewise models, appears insufficient for identifiability with this dataset, based on previous results.\n\n*   **Key Inputs & Calculated Variables:** Use `split_perc_self`, `token_self`, `token_opp` as data variables. Calculate `sum_tokens = token_self + token_opp` and `fair_perc_self_calc = IF(sum_tokens > 0, (token_self / sum_tokens) * 100.0, 50.0)`. It is highly recommended to also calculate intermediate variables like ratios (`R_val = split_perc_self / fair_perc_self_calc`) and differences (`perc_difference = split_perc_self - fair_perc_self_calc`) and use non-linear transformations (log, power, exp, sqrt, abs) of these or the raw inputs as needed to create separable parameter influences.\n\n*   **Model Formula:** Define the utility (`U`). Include calculation steps for necessary derived variables *before* the final formula for `U`. Use clear mathematical notation within the <MODEL> tags.\n\n*   **Learnable Parameters:** Your model *must* have exactly **2 learnable parameters**. Choose descriptive names suitable for Python code. Define clear, generous, finite numerical bounds (e.g., [-20.0, 20.0] or wider/narrower if appropriate for the variable scale). Consider whether parameters are expected to be positive or negative and set bounds accordingly, but keep them generous.\n\n*   **Calculated Variables:** Ensure all calculated variables used in the model formula (including `sum_tokens`, `fair_perc_self_calc`, any intermediate terms like ratios/differences/transformed values, and `U`) are included in your <VARIABLES> descriptions with `source: \"calculated\"`. Include descriptions for all data variables used as inputs (`token_self`, `token_opp`, `split_perc_self`) with `source: \"data\"`. Ensure the description for `fair_perc_self_calc` includes the `sum_tokens > 0` condition.\n\n*   **Model Specification:** Provide the formal mathematical formula between <MODEL> tags. Only the formula should be inside these tags.\n\n*   **Variable Descriptions:** Provide variable descriptions in JSON format between <VARIABLES> tags for *all* variables used in the <MODEL> formula (data, calculated, learnable). Include source, range (with inclusive flags), distribution (if applicable), and learnable status. Use `split_perc_self` as the variable name for the proposed percentage share for self.\n\n*   **Target Variable:** Specify \"accept\" as the target variable using <target_variable> tags.\n\n*   **Summary:** Provide a concise summary between <SUMMARY> tags. Describe the model's core idea and, crucially, explain how its specific mathematical structure is designed to ensure parameter identifiability for *both* learnable parameters (e.g., by having them scale distinct *non-linear* terms in different regimes, or by influencing separate, non-linearly related aspects of the utility calculation).\n\nAvailable Data Variables:\n- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.\n(Note: Use `split_perc_self` for the participant's proposed percentage share percentage).\n\nPlease think through this step by step, then provide your model specification and variable descriptions. Remember that robust parameter identifiability for *both* learnable parameters is the absolute priority. Your goal is to find a mathematical structure where both parameters can be uniquely and reliably estimated from the data by ensuring their influences are clearly distinguishable. This requires making their contributions to utility as distinct and non-overlapping as possible, often by having them scale different, non-linearly related terms or influence different regimes of the decision space. Be creative in designing the mathematical relationship between inputs, parameters, and utility to achieve this separation. Do not simply repeat structures that have failed recovery; propose a genuinely different way for the two parameters to influence the decision process.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: Okay, here are the improved instructions for the next run (Run 54), building on the results of the previous runs.\n\nInstructions for Run 54 of 100:\n\nThe unwavering primary objective remains achieving parameter recovery >= 0.7 for *all* learnable parameters. This is the critical benchmark for model usability. While improved BIC and accuracy are valuable secondary goals, they must not come at the expense of robust parameter recovery. A model with excellent fit but poor parameter identifiability is not suitable for drawing meaningful conclusions about the underlying cognitive processes.\n\nThe previous run (Run 53) implemented a piecewise linear model based on fairness difference (`U = perc_difference >= 0 ? beta_gain_scale * split_perc_self : beta_loss_penalty * abs_perc_difference`). Despite having a piecewise structure, it unfortunately failed the parameter recovery test for *both* `beta_gain_scale` (r = 0.058) and `beta_loss_penalty` (r = 0.302). Its overall performance (BIC 76.69, Acc 0.636) was also poorer than several previous models.\n\nAnalysis of Run 53's failure: The structure assigned the parameters to scale `split_perc_self` in the gain regime and `abs_perc_difference` in the loss regime. While piecewise, these terms might still be too correlated or capture insufficiently distinct aspects of the offer value within their respective regimes for the parameters to be uniquely identified. Scaling linear terms, even in different parts of the input space, might not provide the necessary functional separation for robust estimation.\n\nRecall the relative success of Run 1 (BIC 40.53, Acc 0.671, Recovery >= 0.727 for both parameters), which used a piecewise structure on the *ratio* (`R_val`) and applied *different functional forms* (log vs. linear difference) scaled by the two parameters (`beta_gain_log` and `beta_loss_linear_diff`) in distinct gain vs. loss regimes. This structure seems to have created more distinct influences for the two parameters.\n\nThe core challenge persists: designing a mathematical structure for utility using exactly **2 learnable parameters** such that *both* parameters have truly distinct and identifiable influences on responder decisions (`trial_role == 1`). This requires making their contributions to utility as mathematically separable as possible across the data.\n\nBased on this analysis, focus your exploration for Run 54 on model structures where the two learnable parameters scale terms that are mathematically **maximally distinct** from each other, or whose influence is primarily expressed through **different, non-linearly related aspects** of the utility calculation. Simply scaling different linear terms in different regimes (as in Run 53) appears insufficient.\n\nConsider these strategies to enhance identifiability:\n\n*   **Piecewise Structures with Orthogonal, Non-Linear Parameter Roles per Regime:** Continue exploring piecewise functions based on a fairness split (e.g., `perc_difference >= 0` or `R_val >= 1`). The key is to assign `beta1` to scale a term or function `f1(Inputs)` *exclusively or primarily* in one regime (favorable offers) and `beta2` to scale a *different* term or function `f2(Inputs)` *exclusively or primarily* in the other regime (unfavorable offers). Crucially, ensure that `f1` and `f2` are mathematically diverse and non-linearly related transformations of the inputs.\n    *   *Structural Principle:* Design the model as `U = IF(Condition based on fairness, beta1 * f1(Inputs), beta2 * f2(Inputs))`, where `f1` and `f2` are distinct non-linear functions of the relevant inputs (like `split_perc_self`, `fair_perc_self_calc`, `R_val`, `perc_difference`). Avoid `f1` and `f2` being simple linear terms or linearly related transforms of the same base input.\n    *   *Example Ideas (building on Run 1's success with ratio/log):*\n        *   `U = IF(R_val >= 1.0, beta_gain_sensitivity * log(R_val + 1e-6), beta_loss_slope * (R_val - 1.0))` (Revisit Run 1 structure, perhaps refine bounds/inputs).\n        *   `U = IF(perc_difference >= 0, beta_pos_gain * sqrt(split_perc_self), beta_neg_fairness * exp(perc_difference))` (Using non-linear functions like sqrt and exp on relevant terms).\n        *   `U = IF(R_val >= 1.0, beta_gain_alpha * R_val^power_alpha, beta_loss_beta * (R_val - 1.0)^power_beta)` (Introducing exponents; note: this would require 4 parameters, maybe fix exponents or combine parameters differently). A better version: `U = IF(R_val >= 1.0, beta_gain_alpha * (R_val - 1.0)^2, beta_loss_beta * (1.0 - R_val)^2)` (Scaling squared deviation from 1 in each direction).\n\n*   **Single Highly Non-Linear Function with Orthogonal Parameter Roles:** If not using a piecewise structure, design a single, complex non-linear function of the inputs where `beta1` and `beta2` clearly influence distinct mathematical properties of the function's output. For instance, one parameter could control a general sensitivity or intercept, while the other specifically modulates a non-linearity, asymmetry, or threshold effect around the fairness point *within the unified formula*. This requires a more sophisticated function design than simple additive linear models. Think about functions that capture diminishing sensitivity to increasing gains or increasing sensitivity to losses relative to a reference point.\n\n*   **Avoid:** Any model structure where the terms scaled by `beta1` and `beta2` are linearly dependent or highly correlated across the dataset, or where one parameter's influence can be easily absorbed into the other. Linear scaling of simple input terms, even in piecewise models, appears insufficient for identifiability with this dataset, based on previous results.\n\n*   **Key Inputs & Calculated Variables:** Use `split_perc_self`, `token_self`, `token_opp` as data variables. Calculate `sum_tokens = token_self + token_opp` and `fair_perc_self_calc = IF(sum_tokens > 0, (token_self / sum_tokens) * 100.0, 50.0)`. It is highly recommended to also calculate intermediate variables like ratios (`R_val = split_perc_self / fair_perc_self_calc`) and differences (`perc_difference = split_perc_self - fair_perc_self_calc`) and use non-linear transformations (log, power, exp, sqrt, abs) of these or the raw inputs as needed to create separable parameter influences.\n\n*   **Model Formula:** Define the utility (`U`). Include calculation steps for necessary derived variables *before* the final formula for `U`. Use clear mathematical notation within the <MODEL> tags.\n\n*   **Learnable Parameters:** Your model *must* have exactly **2 learnable parameters**. Choose descriptive names suitable for Python code. Define clear, generous, finite numerical bounds (e.g., [-20.0, 20.0] or wider/narrower if appropriate for the variable scale). Consider whether parameters are expected to be positive or negative and set bounds accordingly, but keep them generous.\n\n*   **Calculated Variables:** Ensure all calculated variables used in the model formula (including `sum_tokens`, `fair_perc_self_calc`, any intermediate terms like ratios/differences/transformed values, and `U`) are included in your <VARIABLES> descriptions with `source: \"calculated\"`. Include descriptions for all data variables used as inputs (`token_self`, `token_opp`, `split_perc_self`) with `source: \"data\"`. Ensure the description for `fair_perc_self_calc` includes the `sum_tokens > 0` condition.\n\n*   **Model Specification:** Provide the formal mathematical formula between <MODEL> tags. Only the formula should be inside these tags.\n\n*   **Variable Descriptions:** Provide variable descriptions in JSON format between <VARIABLES> tags for *all* variables used in the <MODEL> formula (data, calculated, learnable). Include source, range (with inclusive flags), distribution (if applicable), and learnable status. Use `split_perc_self` as the variable name for the proposed percentage share for self.\n\n*   **Target Variable:** Specify \"accept\" as the target variable using <target_variable> tags.\n\n*   **Summary:** Provide a concise summary between <SUMMARY> tags. Describe the model's core idea and, crucially, explain how its specific mathematical structure is designed to ensure parameter identifiability for *both* learnable parameters (e.g., by having them scale distinct *non-linear* terms in different regimes, or by influencing separate, non-linearly related aspects of the utility calculation).\n\nAvailable Data Variables:\n- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.\n(Note: Use `split_perc_self` for the participant's proposed percentage share percentage).\n\nPlease think through this step by step, then provide your model specification and variable descriptions. Remember that robust parameter identifiability for *both* learnable parameters is the absolute priority. Your goal is to find a mathematical structure where both parameters can be uniquely and reliably estimated from the data by ensuring their influences are clearly distinguishable. This requires making their contributions to utility as distinct and non-overlapping as possible, often by having them scale different, non-linearly related terms or influence different regimes of the decision space. Be creative in designing the mathematical relationship between inputs, parameters, and utility to achieve this separation. Do not simply repeat structures that have failed recovery; propose a genuinely different way for the two parameters to influence the decision process.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<MODEL>\nsum_tokens = token_self + token_opp\nfair_perc_self_calc = (sum_tokens > 0) ? (token_self / sum_tokens) * 100.0 : 50.0\nperc_difference = split_perc_self - fair_perc_self_calc\nepsilon = 1e-6 // Small constant to avoid sqrt(0) or squaring 0 when difference is exactly 0\nU = (perc_difference >= 0) ? beta_gain_sensitivity * sqrt(perc_difference + epsilon) : beta_loss_sensitivity * (fair_perc_self_calc - split_perc_self + epsilon)^2\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The proposed share for the participant (in %).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"sum_tokens\": {\n      \"description\": \"Total number of tokens found by both participant and opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fair_perc_self_calc\": {\n      \"description\": \"The calculated fair percentage share for the participant based on token contributions. Defaults to 50% if sum_tokens is 0.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"perc_difference\": {\n      \"description\": \"The difference between the proposed share for the participant (split_perc_self) and the calculated fair share (fair_perc_self_calc). Positive values indicate offers above fairness, negative values indicate offers below fairness.\",\n      \"range\": {\n        \"min\": -100,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_gain_sensitivity\": {\n      \"description\": \"Sensitivity parameter for utility when the proposed share is at or above the fair share. Scales the square root of the percentage gain.\",\n      \"range\": {\n        \"min\": -50.0,\n        \"max\": 50.0\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_loss_sensitivity\": {\n      \"description\": \"Sensitivity parameter for utility when the proposed share is below the fair share. Scales the squared percentage deviation from the fair share.\",\n      \"range\": {\n        \"min\": -50.0,\n        \"max\": 50.0\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"A small constant added to the arguments of sqrt and squaring functions to avoid potential issues with exactly zero inputs.\",\n      \"range\": {\n         \"min\": 1e-6,\n         \"max\": 1e-6\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"U\": {\n      \"description\": \"The calculated utility for accepting the proposed split.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA piecewise utility model for responder decisions. Utility is calculated based on the difference between the proposed percentage share for the participant and their calculated fair share based on token contributions. When the proposed share is fair or favorable (difference >= 0), utility is proportional to a 'beta_gain_sensitivity' parameter scaling the square root of the gain percentage. When the proposed share is unfavorable (difference < 0), utility is proportional to a 'beta_loss_sensitivity' parameter scaling the squared percentage deviation from the fair share. This piecewise structure, combined with distinct non-linear functions (square root vs. squaring) scaled by the two learnable parameters in the gain and loss regimes, aims to create mathematically separable influences for each parameter, thereby enhancing parameter identifiability.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['beta_gain_sensitivity', 'beta_loss_sensitivity']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                sum_tokens = token_self + token_opp\nfair_perc_self_calc = (sum_tokens > 0) ? (token_self / sum_tokens) * 100.0 : 50.0\nperc_difference = split_perc_self - fair_perc_self_calc\nepsilon = 1e-6 // Small constant to avoid sqrt(0) or squaring 0 when difference is exactly 0\nU = (perc_difference >= 0) ? beta_gain_sensitivity * sqrt(perc_difference + epsilon) : beta_loss_sensitivity * (fair_perc_self_calc - split_perc_self + epsilon)^2\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The proposed share for the participant (in %).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"sum_tokens\": {\n      \"description\": \"Total number of tokens found by both participant and opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fair_perc_self_calc\": {\n      \"description\": \"The calculated fair percentage share for the participant based on token contributions. Defaults to 50% if sum_tokens is 0.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"perc_difference\": {\n      \"description\": \"The difference between the proposed share for the participant (split_perc_self) and the calculated fair share (fair_perc_self_calc). Positive values indicate offers above fairness, negative values indicate offers below fairness.\",\n      \"range\": {\n        \"min\": -100,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_gain_sensitivity\": {\n      \"description\": \"Sensitivity parameter for utility when the proposed share is at or above the fair share. Scales the square root of the percentage gain.\",\n      \"range\": {\n        \"min\": -50.0,\n        \"max\": 50.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_loss_sensitivity\": {\n      \"description\": \"Sensitivity parameter for utility when the proposed share is below the fair share. Scales the squared percentage deviation from the fair share.\",\n      \"range\": {\n        \"min\": -50.0,\n        \"max\": 50.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"A small constant added to the arguments of sqrt and squaring functions to avoid potential issues with exactly zero inputs.\",\n      \"range\": {\n        \"min\": 1e-06,\n        \"max\": 1e-06,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"U\": {\n      \"description\": \"The calculated utility for accepting the proposed split.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, beta_gain_sensitivity=1.0, beta_loss_sensitivity=1.0):\n    model_predictions = []\n    epsilon = 1e-6\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        split_perc_self = trial.get(\"splitperc_self\", 50.0) # using splitperc_self column from dataset\n\n        sum_tokens = token_self + token_opp\n        fair_perc_self_calc = (token_self / sum_tokens) * 100.0 if sum_tokens > 0 else 50.0\n        perc_difference = split_perc_self - fair_perc_self_calc\n\n        if perc_difference >= 0:\n            U = beta_gain_sensitivity * math.sqrt(perc_difference + epsilon)\n        else:\n            U = beta_loss_sensitivity * (fair_perc_self_calc - split_perc_self + epsilon)**2\n\n        model_predictions.append(U)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = \"\"\"[\n    {\n        \"ID\": 0,\n        \"group\": \"extreme\",\n        \"trial_number\": 1,\n        \"trial_type\": 1,\n        \"trial_role\": 0,\n        \"token_opp\": 1,\n        \"token_self\": 9,\n        \"combined_earning\": 10,\n        \"split_opp\": 0.9,\n        \"split_self\": 9.1,\n        \"splitperc_opp\": 9,\n        \"splitperc_self\": 91,\n        \"accept\": 1.0,\n        \"accepted_amount\": 9.1,\n        \"accepted_perc\": 91.0,\n        \"proposed_perc\": 91.0,\n        \"proposed_amount\": 9.1\n    },\n    {\n        \"ID\": 1,\n        \"group\": \"extreme\",\n        \"trial_number\": 2,\n        \"trial_type\": 1,\n        \"trial_role\": 0,\n        \"token_opp\": 1,\n        \"token_self\": 9,\n        \"combined_earning\": 10,\n        \"split_opp\": 1.0,\n        \"split_self\": 9.0,\n        \"splitperc_opp\": 10,\n        \"splitperc_self\": 90,\n        \"accept\": 1.0,\n        \"accepted_amount\": 9.0,\n        \"accepted_perc\": 90.0,\n        \"proposed_perc\": 90.0,\n        \"proposed_amount\": 9.0\n    },\n    {\n        \"ID\": 2,\n        \"group\": \"extreme\",\n        \"trial_number\": 3,\n        \"trial_type\": 1,\n        \"trial_role\": 0,\n        \"token_opp\": 1,\n        \"token_self\": 9,\n        \"combined_earning\": 10,\n        \"split_opp\": 1.1,\n        \"split_self\": 8.9,\n        \"splitperc_opp\": 11,\n        \"splitperc_self\": 89,\n        \"accept\": 1.0,\n        \"accepted_amount\": 8.9,\n        \"accepted_perc\": 89.0,\n        \"proposed_perc\": 89.0,\n        \"proposed_amount\": 8.9\n    }\n]\"\"\"\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n```",
      "timestamp": 1746102164.136446
    }
  ],
  "learnable_parameters": {
    "beta_gain_sensitivity": {
      "description": "Sensitivity parameter for utility when the proposed share is at or above the fair share. Scales the square root of the percentage gain.",
      "range": {
        "min": -50.0,
        "max": 50.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta_loss_sensitivity": {
      "description": "Sensitivity parameter for utility when the proposed share is below the fair share. Scales the squared percentage deviation from the fair share.",
      "range": {
        "min": -50.0,
        "max": 50.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "sum_tokens = token_self + token_opp\nfair_perc_self_calc = (sum_tokens > 0) ? (token_self / sum_tokens) * 100.0 : 50.0\nperc_difference = split_perc_self - fair_perc_self_calc\nepsilon = 1e-6 // Small constant to avoid sqrt(0) or squaring 0 when difference is exactly 0\nU = (perc_difference >= 0) ? beta_gain_sensitivity * sqrt(perc_difference + epsilon) : beta_loss_sensitivity * (fair_perc_self_calc - split_perc_self + epsilon)^2",
  "variable_descriptions": {
    "token_opp": {
      "description": "Number of tokens found by the opponent.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Number of tokens found by the participant.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "split_perc_self": {
      "description": "The proposed share for the participant (in %).",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "sum_tokens": {
      "description": "Total number of tokens found by both participant and opponent.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "fair_perc_self_calc": {
      "description": "The calculated fair percentage share for the participant based on token contributions. Defaults to 50% if sum_tokens is 0.",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "perc_difference": {
      "description": "The difference between the proposed share for the participant (split_perc_self) and the calculated fair share (fair_perc_self_calc). Positive values indicate offers above fairness, negative values indicate offers below fairness.",
      "range": {
        "min": -100,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "beta_gain_sensitivity": {
      "description": "Sensitivity parameter for utility when the proposed share is at or above the fair share. Scales the square root of the percentage gain.",
      "range": {
        "min": -50.0,
        "max": 50.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta_loss_sensitivity": {
      "description": "Sensitivity parameter for utility when the proposed share is below the fair share. Scales the squared percentage deviation from the fair share.",
      "range": {
        "min": -50.0,
        "max": 50.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "epsilon": {
      "description": "A small constant added to the arguments of sqrt and squaring functions to avoid potential issues with exactly zero inputs.",
      "range": {
        "min": 1e-06,
        "max": 1e-06,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "U": {
      "description": "The calculated utility for accepting the proposed split.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "A piecewise utility model for responder decisions. Utility is calculated based on the difference between the proposed percentage share for the participant and their calculated fair share based on token contributions. When the proposed share is fair or favorable (difference >= 0), utility is proportional to a 'beta_gain_sensitivity' parameter scaling the square root of the gain percentage. When the proposed share is unfavorable (difference < 0), utility is proportional to a 'beta_loss_sensitivity' parameter scaling the squared percentage deviation from the fair share. This piecewise structure, combined with distinct non-linear functions (square root vs. squaring) scaled by the two learnable parameters in the gain and loss regimes, aims to create mathematically separable influences for each parameter, thereby enhancing parameter identifiability.",
  "target_variable": "accept",
  "full_reasoning": "<MODEL>\nsum_tokens = token_self + token_opp\nfair_perc_self_calc = (sum_tokens > 0) ? (token_self / sum_tokens) * 100.0 : 50.0\nperc_difference = split_perc_self - fair_perc_self_calc\nepsilon = 1e-6 // Small constant to avoid sqrt(0) or squaring 0 when difference is exactly 0\nU = (perc_difference >= 0) ? beta_gain_sensitivity * sqrt(perc_difference + epsilon) : beta_loss_sensitivity * (fair_perc_self_calc - split_perc_self + epsilon)^2\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The proposed share for the participant (in %).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"sum_tokens\": {\n      \"description\": \"Total number of tokens found by both participant and opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fair_perc_self_calc\": {\n      \"description\": \"The calculated fair percentage share for the participant based on token contributions. Defaults to 50% if sum_tokens is 0.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"perc_difference\": {\n      \"description\": \"The difference between the proposed share for the participant (split_perc_self) and the calculated fair share (fair_perc_self_calc). Positive values indicate offers above fairness, negative values indicate offers below fairness.\",\n      \"range\": {\n        \"min\": -100,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_gain_sensitivity\": {\n      \"description\": \"Sensitivity parameter for utility when the proposed share is at or above the fair share. Scales the square root of the percentage gain.\",\n      \"range\": {\n        \"min\": -50.0,\n        \"max\": 50.0\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_loss_sensitivity\": {\n      \"description\": \"Sensitivity parameter for utility when the proposed share is below the fair share. Scales the squared percentage deviation from the fair share.\",\n      \"range\": {\n        \"min\": -50.0,\n        \"max\": 50.0\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"A small constant added to the arguments of sqrt and squaring functions to avoid potential issues with exactly zero inputs.\",\n      \"range\": {\n         \"min\": 1e-6,\n         \"max\": 1e-6\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"U\": {\n      \"description\": \"The calculated utility for accepting the proposed split.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA piecewise utility model for responder decisions. Utility is calculated based on the difference between the proposed percentage share for the participant and their calculated fair share based on token contributions. When the proposed share is fair or favorable (difference >= 0), utility is proportional to a 'beta_gain_sensitivity' parameter scaling the square root of the gain percentage. When the proposed share is unfavorable (difference < 0), utility is proportional to a 'beta_loss_sensitivity' parameter scaling the squared percentage deviation from the fair share. This piecewise structure, combined with distinct non-linear functions (square root vs. squaring) scaled by the two learnable parameters in the gain and loss regimes, aims to create mathematically separable influences for each parameter, thereby enhancing parameter identifiability.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: sum_tokens = token_self + token_opp\nfair_perc_self_calc = (sum_tokens > 0) ? (token_self / sum_tokens) * 100.0 : 50.0\nperc_difference = split_perc_self - fair_perc_self_calc\nepsilon = 1e-6 // Small constant to avoid sqrt(0) or squaring 0 when difference is exactly 0\nU = (perc_difference >= 0) ? beta_gain_sensitivity * sqrt(perc_difference + epsilon) : beta_loss_sensitivity * (fair_perc_self_calc - split_perc_self + epsilon)^2\nSummary: A piecewise utility model for responder decisions. Utility is calculated based on the difference between the proposed percentage share for the participant and their calculated fair share based on token contributions. When the proposed share is fair or favorable (difference >= 0), utility is proportional to a 'beta_gain_sensitivity' parameter scaling the square root of the gain percentage. When the proposed share is unfavorable (difference < 0), utility is proportional to a 'beta_loss_sensitivity' parameter scaling the squared percentage deviation from the fair share. This piecewise structure, combined with distinct non-linear functions (square root vs. squaring) scaled by the two learnable parameters in the gain and loss regimes, aims to create mathematically separable influences for each parameter, thereby enhancing parameter identifiability.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, beta_gain_sensitivity=1.0, beta_loss_sensitivity=1.0):\n    model_predictions = []\n    epsilon = 1e-6\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        split_perc_self = trial.get(\"splitperc_self\", 50.0) # using splitperc_self column from dataset\n\n        sum_tokens = token_self + token_opp\n        fair_perc_self_calc = (token_self / sum_tokens) * 100.0 if sum_tokens > 0 else 50.0\n        perc_difference = split_perc_self - fair_perc_self_calc\n\n        if perc_difference >= 0:\n            U = beta_gain_sensitivity * math.sqrt(perc_difference + epsilon)\n        else:\n            U = beta_loss_sensitivity * (fair_perc_self_calc - split_perc_self + epsilon)**2\n\n        model_predictions.append(U)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.6968864468864469,
  "group_accuracies": {
    "Control": 0.7235142118863049,
    "Cocaine": 0.6730324074074074
  },
  "group_parameter_averages": {
    "Control": {
      "beta_gain_sensitivity": 25.015099176544226,
      "beta_loss_sensitivity": 5.405085107717305
    },
    "Cocaine": {
      "beta_gain_sensitivity": 23.396118788464833,
      "beta_loss_sensitivity": 0.05263179867752889
    }
  },
  "fitting_results": [
    {
      "beta_gain_sensitivity": 22.61440432915011,
      "beta_loss_sensitivity": -21.55329471548699,
      "success": true,
      "log_likelihood": -47.43812406749723,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_sensitivity": 50.0,
      "beta_loss_sensitivity": 41.34136234346505,
      "success": true,
      "log_likelihood": -415.80223603296474,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_sensitivity": 50.0,
      "beta_loss_sensitivity": -27.126446135515046,
      "success": true,
      "log_likelihood": -346.72468324284335,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_sensitivity": 44.91516293527706,
      "beta_loss_sensitivity": 8.777343026614162,
      "success": true,
      "log_likelihood": -484.88475302582066,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_sensitivity": 45.53982430441611,
      "beta_loss_sensitivity": -3.178308914126273,
      "success": true,
      "log_likelihood": -277.65147491081996,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_sensitivity": 50.0,
      "beta_loss_sensitivity": 50.0,
      "success": true,
      "log_likelihood": -300.6729813827624,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_sensitivity": 50.0,
      "beta_loss_sensitivity": 40.99067808114222,
      "success": true,
      "log_likelihood": -1.3369192922363264,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_sensitivity": 46.413556617289565,
      "beta_loss_sensitivity": 44.68199022474954,
      "success": true,
      "log_likelihood": -277.6506304674235,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_sensitivity": 39.4381927351155,
      "beta_loss_sensitivity": 13.075179109261967,
      "success": true,
      "log_likelihood": -1.3472449821568924,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_sensitivity": 50.0,
      "beta_loss_sensitivity": -12.41885531497909,
      "success": true,
      "log_likelihood": -231.5954285926409,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_sensitivity": 50.0,
      "beta_loss_sensitivity": -6.548334011085913,
      "success": true,
      "log_likelihood": -277.6471304527219,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_sensitivity": 0.13115060653506125,
      "beta_loss_sensitivity": -37.43924876005394,
      "success": true,
      "log_likelihood": -48.77557532023287,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_sensitivity": 26.007431182785208,
      "beta_loss_sensitivity": -0.0021694856008633323,
      "success": true,
      "log_likelihood": -16.667069844376,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_sensitivity": 28.10998012360842,
      "beta_loss_sensitivity": 10.336520309100486,
      "success": true,
      "log_likelihood": -1.3583819134439497,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_sensitivity": 50.0,
      "beta_loss_sensitivity": 48.19615516195955,
      "success": true,
      "log_likelihood": -1.3369192922363264,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_sensitivity": -32.6951703628169,
      "beta_loss_sensitivity": 45.22556553623987,
      "success": true,
      "log_likelihood": -47.47095861939586,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_sensitivity": 41.35279675786005,
      "beta_loss_sensitivity": 20.337750325772504,
      "success": true,
      "log_likelihood": -1.345369043562237,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_sensitivity": 17.26965602990171,
      "beta_loss_sensitivity": 18.348583630210157,
      "success": true,
      "log_likelihood": -116.498353910824,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_sensitivity": 50.0,
      "beta_loss_sensitivity": 50.0,
      "success": true,
      "log_likelihood": -93.44032301239811,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_sensitivity": 42.08720785384912,
      "beta_loss_sensitivity": 6.546869343010172,
      "success": true,
      "log_likelihood": -1.344649950060826,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_sensitivity": 28.348670284130254,
      "beta_loss_sensitivity": -28.26934650490649,
      "success": true,
      "log_likelihood": -369.7717614727383,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_sensitivity": -11.248734583056994,
      "beta_loss_sensitivity": 35.78842313858959,
      "success": true,
      "log_likelihood": -162.57610028934928,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_sensitivity": 35.94611082198772,
      "beta_loss_sensitivity": -28.336177814123143,
      "success": true,
      "log_likelihood": -208.58332963020004,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_sensitivity": 50.0,
      "beta_loss_sensitivity": -48.171239972477295,
      "success": true,
      "log_likelihood": -346.72468324284324,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_sensitivity": 50.0,
      "beta_loss_sensitivity": -32.93279560286049,
      "success": true,
      "log_likelihood": -323.6988323128029,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_sensitivity": 43.32987526624287,
      "beta_loss_sensitivity": 39.51467670054771,
      "success": true,
      "log_likelihood": -346.73119776547844,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_sensitivity": 50.0,
      "beta_loss_sensitivity": -33.81977136236476,
      "success": true,
      "log_likelihood": -369.7505341728839,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_sensitivity": 41.84156056691669,
      "beta_loss_sensitivity": -23.932529361468013,
      "success": true,
      "log_likelihood": -139.49999602412825,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_sensitivity": 21.87463404644031,
      "beta_loss_sensitivity": 43.030722149634656,
      "success": true,
      "log_likelihood": -93.46794306595828,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_sensitivity": 50.0,
      "beta_loss_sensitivity": 26.80175821855029,
      "success": true,
      "log_likelihood": -185.5437267325601,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_sensitivity": -42.52801873973256,
      "beta_loss_sensitivity": 0.9599725351151291,
      "success": true,
      "log_likelihood": -47.48102299182015,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_sensitivity": 39.7524129247392,
      "beta_loss_sensitivity": -26.193566889566345,
      "success": true,
      "log_likelihood": -47.438391254974206,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_sensitivity": 25.254946174332748,
      "beta_loss_sensitivity": -11.288684393071755,
      "success": true,
      "log_likelihood": -277.6966649666447,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_sensitivity": -37.9996877116484,
      "beta_loss_sensitivity": -23.431319969648477,
      "success": true,
      "log_likelihood": -277.73486617785846,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_sensitivity": 31.602981375788747,
      "beta_loss_sensitivity": -2.96121177032015,
      "success": true,
      "log_likelihood": -738.1820680833413,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.08333333333333333,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_sensitivity": -43.78687325649098,
      "beta_loss_sensitivity": 9.455527915208748,
      "success": true,
      "log_likelihood": -346.8183244654551,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_sensitivity": 12.802341383454692,
      "beta_loss_sensitivity": 0.9083426393779758,
      "success": true,
      "log_likelihood": -254.6579759805498,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_sensitivity": -45.60344212655368,
      "beta_loss_sensitivity": -46.533485122687736,
      "success": true,
      "log_likelihood": -369.84603255352175,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_sensitivity": 3.9020843258034863,
      "beta_loss_sensitivity": 40.301669894641435,
      "success": true,
      "log_likelihood": -277.6926494734566,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_sensitivity": 4.612607781318062,
      "beta_loss_sensitivity": 34.55062389917501,
      "success": true,
      "log_likelihood": -70.45924659014256,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_sensitivity": -33.54996187066935,
      "beta_loss_sensitivity": 3.4510290390557614,
      "success": true,
      "log_likelihood": -369.8337405866199,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_sensitivity": 29.913564815427932,
      "beta_loss_sensitivity": -8.24904099316921,
      "success": true,
      "log_likelihood": -93.46000820967203,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_sensitivity": 50.0,
      "beta_loss_sensitivity": 22.183743503934124,
      "success": true,
      "log_likelihood": -24.362770222276815,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_sensitivity": 48.45793713769974,
      "beta_loss_sensitivity": 9.140057947558425,
      "success": true,
      "log_likelihood": -369.7520382863295,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_sensitivity": 35.79827794921946,
      "beta_loss_sensitivity": 9.344360110480906,
      "success": true,
      "log_likelihood": -323.71272946201464,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_sensitivity": 17.454641741097436,
      "beta_loss_sensitivity": 37.30127935821818,
      "success": true,
      "log_likelihood": -231.62742518114968,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_sensitivity": 12.176840335345057,
      "beta_loss_sensitivity": -0.0007354815087991415,
      "success": true,
      "log_likelihood": -21.89436436412717,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_sensitivity": -22.512811453054155,
      "beta_loss_sensitivity": -20.91762444104084,
      "success": true,
      "log_likelihood": -277.71914503324814,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_sensitivity": 39.23472880031644,
      "beta_loss_sensitivity": 35.304766927100246,
      "success": true,
      "log_likelihood": -484.89031397568186,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_sensitivity": 29.326541125715995,
      "beta_loss_sensitivity": 6.855183681820144,
      "success": true,
      "log_likelihood": -392.796648630687,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_sensitivity": -25.76495175099819,
      "beta_loss_sensitivity": 0.23757815284784606,
      "success": true,
      "log_likelihood": -300.4987478264382,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_sensitivity": 36.46275511206043,
      "beta_loss_sensitivity": -13.430913828669922,
      "success": true,
      "log_likelihood": -93.49003044219769,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_sensitivity": 14.183991860939475,
      "beta_loss_sensitivity": 13.658135662168924,
      "success": true,
      "log_likelihood": -369.799959533952,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_sensitivity": 17.33023793084182,
      "beta_loss_sensitivity": 28.378587675751703,
      "success": true,
      "log_likelihood": -346.7568031533467,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_sensitivity": 49.99999999999999,
      "beta_loss_sensitivity": -19.50628767773608,
      "success": true,
      "log_likelihood": -231.5954285926409,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_sensitivity": 30.662452645008788,
      "beta_loss_sensitivity": -36.38243416999808,
      "success": true,
      "log_likelihood": -185.56267438229793,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_sensitivity": 50.0,
      "beta_loss_sensitivity": 2.37861143688837,
      "success": true,
      "log_likelihood": -599.9763181144402,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.2222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_sensitivity": -18.315433008101838,
      "beta_loss_sensitivity": 33.33932823068464,
      "success": true,
      "log_likelihood": -139.55979923313757,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_sensitivity": -35.80876911688738,
      "beta_loss_sensitivity": -46.17299048247989,
      "success": true,
      "log_likelihood": -70.46416769730179,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_sensitivity": 27.421428156778784,
      "beta_loss_sensitivity": 40.27067269085562,
      "success": true,
      "log_likelihood": -162.54001741724298,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_sensitivity": 13.020191905673808,
      "beta_loss_sensitivity": -0.00020140195562451106,
      "success": true,
      "log_likelihood": -23.406015560812875,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_sensitivity": 12.131483091157538,
      "beta_loss_sensitivity": -0.0010648879511061906,
      "success": true,
      "log_likelihood": -20.593871341774253,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_sensitivity": 13.101113381190562,
      "beta_loss_sensitivity": 33.36040623246109,
      "success": true,
      "log_likelihood": -738.2135470442861,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.1111111111111111,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_sensitivity": 5.592749130909711,
      "beta_loss_sensitivity": -47.328470441972264,
      "success": true,
      "log_likelihood": -300.72236480297903,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_sensitivity": 50.0,
      "beta_loss_sensitivity": -49.30696119719919,
      "success": true,
      "log_likelihood": -93.44032301239812,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_sensitivity": 50.0,
      "beta_loss_sensitivity": 43.775635221888336,
      "success": true,
      "log_likelihood": -369.75053417288376,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_sensitivity": 50.0,
      "beta_loss_sensitivity": 6.466805100707386,
      "success": true,
      "log_likelihood": -70.41447208235765,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_sensitivity": 50.0,
      "beta_loss_sensitivity": -32.33276003861509,
      "success": true,
      "log_likelihood": -623.0348944033287,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.25,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_sensitivity": 39.47273764113189,
      "beta_loss_sensitivity": -22.322873947235845,
      "success": true,
      "log_likelihood": -369.7608259993026,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_sensitivity": 50.0,
      "beta_loss_sensitivity": 46.8376248842479,
      "success": true,
      "log_likelihood": -70.4144720823577,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_sensitivity": 23.964571107881987,
      "beta_loss_sensitivity": -42.69550046128839,
      "success": true,
      "log_likelihood": -1.3624733579483341,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_sensitivity": 10.601509513945665,
      "beta_loss_sensitivity": -49.86671521605939,
      "success": true,
      "log_likelihood": -93.47686623990076,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_sensitivity": 50.0,
      "beta_loss_sensitivity": -13.525712296370472,
      "success": true,
      "log_likelihood": -346.72468324284335,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_sensitivity": 40.54137515047343,
      "beta_loss_sensitivity": 42.68568817130772,
      "success": true,
      "log_likelihood": -185.55297129513917,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_sensitivity": -23.93410607183624,
      "beta_loss_sensitivity": -27.505734097620703,
      "success": true,
      "log_likelihood": -369.8239865509746,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_sensitivity": 50.0,
      "beta_loss_sensitivity": 2.883441812380864,
      "success": true,
      "log_likelihood": -254.6212795226816,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_sensitivity": 49.99999999999999,
      "beta_loss_sensitivity": 4.441892925945957,
      "success": true,
      "log_likelihood": -47.3886211523172,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_sensitivity": 25.998724322727988,
      "beta_loss_sensitivity": -39.35064287267313,
      "success": true,
      "log_likelihood": -70.46401612609874,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_sensitivity": 37.186370046534726,
      "beta_loss_sensitivity": 37.39710199611099,
      "success": true,
      "log_likelihood": -323.71136669445957,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_sensitivity": 12.938394707244413,
      "beta_loss_sensitivity": -40.04327872819914,
      "success": true,
      "log_likelihood": -47.43800698186176,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_sensitivity": 29.971553414060317,
      "beta_loss_sensitivity": -10.707162234387567,
      "success": true,
      "log_likelihood": -346.7443113196172,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_sensitivity": 50.0,
      "beta_loss_sensitivity": 23.53595575118102,
      "success": true,
      "log_likelihood": -70.41447208235765,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_sensitivity": -38.00253008864235,
      "beta_loss_sensitivity": -3.13606478757886,
      "success": true,
      "log_likelihood": -70.4642081737906,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_sensitivity": 32.722195709201365,
      "beta_loss_sensitivity": 7.415568205031818,
      "success": true,
      "log_likelihood": -415.8191565759269,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_sensitivity": 48.3418866001927,
      "beta_loss_sensitivity": 47.38568761744722,
      "success": true,
      "log_likelihood": -323.7004496689163,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_sensitivity": -23.569852154536296,
      "beta_loss_sensitivity": -45.62875897973956,
      "success": true,
      "log_likelihood": -70.46398602870917,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_sensitivity": 50.0,
      "beta_loss_sensitivity": 29.624580807619594,
      "success": true,
      "log_likelihood": -254.62127952268148,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_sensitivity": 26.390187365430325,
      "beta_loss_sensitivity": -24.675262587157587,
      "success": true,
      "log_likelihood": -162.56742497304816,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_sensitivity": 37.11885760569266,
      "beta_loss_sensitivity": 25.79299805908255,
      "success": true,
      "log_likelihood": -47.4012217924271,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_sensitivity": 21.721536715311533,
      "beta_loss_sensitivity": -7.007859652012172,
      "success": true,
      "log_likelihood": -300.7007528651053,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_sensitivity": -28.403114713415533,
      "beta_loss_sensitivity": 26.560387586183637,
      "success": true,
      "log_likelihood": -300.750961240006,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "beta_gain_sensitivity": {
        "r": 0.33243832498319686,
        "p": 0.0007268782454117682
      },
      "beta_loss_sensitivity": {
        "r": 0.5959625068998353,
        "p": 6.098335852519426e-11
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 449.35608185179615,
  "bic_Control": 413.35313432443286,
  "bic_Cocaine": 481.6087223450591,
  "bic_results": {
    "average_bic": 449.35608185179615,
    "individual_bics": [
      102.04328601190667,
      838.7715099428417,
      700.6164043625989,
      976.9365439285535,
      562.4699876985521,
      608.513000642437,
      9.840876461384873,
      562.4682988117593,
      9.861527841226005,
      470.357895062194,
      562.461298782356,
      104.71818851737795,
      40.50117756566422,
      9.883801703800119,
      9.840876461384873,
      102.10895511570394,
      9.857775964036694,
      240.1637456985602,
      194.04768390170844,
      9.856337777033872,
      746.7105608223889,
      332.3192384556108,
      424.3336971373123,
      700.6164043625987,
      654.564702502518,
      700.6294334078691,
      746.66810622268,
      286.1670299251687,
      194.10292400882878,
      378.2544913420324,
      102.12908386055251,
      102.04382038686063,
      562.5603678102016,
      562.6367702326291,
      1483.5311740435948,
      700.8036868078224,
      516.4829898380118,
      746.8591029839557,
      562.5523368238254,
      148.08553105719733,
      746.834519050152,
      194.08705429625627,
      55.89257832146585,
      746.6711144495712,
      654.5924968009415,
      470.42188823921157,
      50.95576660516656,
      562.6053279434085,
      976.947665828276,
      792.7603351382862,
      608.1645335297886,
      194.1470987613076,
      746.7669569448162,
      700.6806441836056,
      470.357895062194,
      378.2923866415081,
      1207.1196741057927,
      286.28663634318735,
      148.0953732715158,
      332.2470727113982,
      53.97906899853797,
      48.354780560460725,
      1483.5941319654844,
      608.6117674828703,
      194.04768390170847,
      746.6681062226797,
      147.9959820416275,
      1253.2368266835697,
      746.6886898755174,
      147.99598204162763,
      9.891984592808889,
      194.12077035671373,
      700.6164043625989,
      378.27298046719056,
      746.8150109788614,
      516.4095969222755,
      101.94428018154662,
      148.0950701291097,
      654.5897712658314,
      102.04305184063574,
      700.6556605161467,
      147.9959820416275,
      148.0954542244934,
      838.805351028766,
      654.5679372147448,
      148.09500993433056,
      516.4095969222752,
      332.30188782300854,
      101.96948146176642,
      608.5685436071228,
      608.6689603569242
    ],
    "group_enabled": true,
    "group_bics": {
      "Control": [
        102.04328601190667,
        838.7715099428417,
        700.6164043625989,
        976.9365439285535,
        562.4699876985521,
        608.513000642437,
        9.840876461384873,
        562.4682988117593,
        9.861527841226005,
        470.357895062194,
        562.461298782356,
        104.71818851737795,
        40.50117756566422,
        9.883801703800119,
        9.840876461384873,
        102.10895511570394,
        9.857775964036694,
        240.1637456985602,
        194.04768390170844,
        9.856337777033872,
        746.7105608223889,
        332.3192384556108,
        424.3336971373123,
        700.6164043625987,
        654.564702502518,
        700.6294334078691,
        746.66810622268,
        286.1670299251687,
        194.10292400882878,
        378.2544913420324,
        102.12908386055251,
        102.04382038686063,
        562.5603678102016,
        562.6367702326291,
        1483.5311740435948,
        700.8036868078224,
        516.4829898380118,
        746.8591029839557,
        562.5523368238254,
        148.08553105719733,
        746.834519050152,
        194.08705429625627,
        55.89257832146585
      ],
      "Cocaine": [
        746.6711144495712,
        654.5924968009415,
        470.42188823921157,
        50.95576660516656,
        562.6053279434085,
        976.947665828276,
        792.7603351382862,
        608.1645335297886,
        194.1470987613076,
        746.7669569448162,
        700.6806441836056,
        470.357895062194,
        378.2923866415081,
        1207.1196741057927,
        286.28663634318735,
        148.0953732715158,
        332.2470727113982,
        53.97906899853797,
        48.354780560460725,
        1483.5941319654844,
        608.6117674828703,
        194.04768390170847,
        746.6681062226797,
        147.9959820416275,
        1253.2368266835697,
        746.6886898755174,
        147.99598204162763,
        9.891984592808889,
        194.12077035671373,
        700.6164043625989,
        378.27298046719056,
        746.8150109788614,
        516.4095969222755,
        101.94428018154662,
        148.0950701291097,
        654.5897712658314,
        102.04305184063574,
        700.6556605161467,
        147.9959820416275,
        148.0954542244934,
        838.805351028766,
        654.5679372147448,
        148.09500993433056,
        516.4095969222752,
        332.30188782300854,
        101.96948146176642,
        608.5685436071228,
        608.6689603569242
      ]
    },
    "num_parameters": 2,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- beta_gain_sensitivity: r = 0.332\n- beta_loss_sensitivity: r = 0.596",
  "previous_models": [
    "Specification: sum_tokens = token_self + token_opp\nfair_perc_self_calc = (sum_tokens > 0) ? (token_self / sum_tokens) * 100.0 : 50.0\nperc_difference = split_perc_self - fair_perc_self_calc\nepsilon = 1e-6 // Small constant to avoid sqrt(0) or squaring 0 when difference is exactly 0\nU = (perc_difference >= 0) ? beta_gain_sensitivity * sqrt(perc_difference + epsilon) : beta_loss_sensitivity * (fair_perc_self_calc - split_perc_self + epsilon)^2\nSummary: A piecewise utility model for responder decisions. Utility is calculated based on the difference between the proposed percentage share for the participant and their calculated fair share based on token contributions. When the proposed share is fair or favorable (difference >= 0), utility is proportional to a 'beta_gain_sensitivity' parameter scaling the square root of the gain percentage. When the proposed share is unfavorable (difference < 0), utility is proportional to a 'beta_loss_sensitivity' parameter scaling the squared percentage deviation from the fair share. This piecewise structure, combined with distinct non-linear functions (square root vs. squaring) scaled by the two learnable parameters in the gain and loss regimes, aims to create mathematically separable influences for each parameter, thereby enhancing parameter identifiability.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 449.35608185179615\nOverall Accuracy: 0.6969\nGroup Accuracies:\n- Control: 0.7235\n- Cocaine: 0.6730\n\nParameter Recovery:\n- beta_gain_sensitivity: r = 0.332\n- beta_loss_sensitivity: r = 0.596"
  ]
}