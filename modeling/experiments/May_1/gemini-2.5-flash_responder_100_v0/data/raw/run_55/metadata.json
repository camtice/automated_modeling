{
  "task_description": "In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "Task Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\nproposed_amount = same as above but in \u00a3\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified).\n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal.\n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied.\n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1:\n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = beta + epsilon*E + eta*N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (beta) constrained to [0,1] and an unconstrained environmental sensitivity parameter (epsilon). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like \\'lambda\\' and use alternatives like \\'learning_rate\\' or \\'lambda_param\\'.\n\nModel Type:\nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: Okay, here are the improved instructions for the next run (Run 55), building on the results of the previous runs.\n\nInstructions for Run 55 of 100:\n\nThe unwavering primary objective remains achieving parameter recovery >= 0.7 for *all* learnable parameters. This is the critical benchmark for model usability. While improved BIC and accuracy are valuable secondary goals, they must not come at the expense of robust parameter recovery. A model with excellent fit but poor parameter identifiability is not suitable for drawing meaningful conclusions about the underlying cognitive processes.\n\nThe previous run (Run 54) implemented a piecewise non-linear model based on fairness difference (`U = (perc_difference >= 0) ? beta_gain_sensitivity * sqrt(perc_difference + epsilon) : beta_loss_sensitivity * (fair_perc_self_calc - split_perc_self + epsilon)^2`). It unfortunately failed the parameter recovery test for *both* `beta_gain_sensitivity` (r = 0.332) and `beta_loss_sensitivity` (r = 0.596). Its overall performance (BIC 449.36, Acc 0.697) was also relatively poor.\n\nAnalysis of Run 54's failure and previous models: The piecewise structure in Run 54 assigned the two learnable parameters to scale distinct non-linear functions (`sqrt` vs. `square`) of the fairness deviation in gain vs. loss regimes. However, this approach, similar to previous attempts that scaled linear terms (Run 4) or combined linear terms (Run 1, 3), did not create sufficiently distinct influences for the parameters to be reliably estimated. We've observed a pattern where parameters scaling the absolute value of the offer or gain component (`beta_value` in Runs 1 & 3) sometimes achieve decent recovery, but parameters specifically scaling the *fairness deviation* or *loss penalty* (`beta_fairness_deviation`, `beta_unfairness_penalty`, `beta_loss_sensitivity`) consistently fail to reach the 0.7 threshold. This suggests the influence of the fairness deviation/penalty term is either too correlated with the absolute value term, or its impact is not captured in a mathematically separable way by simply scaling it.\n\nThe core challenge persists: designing a mathematical structure for utility using exactly **2 learnable parameters** such that *both* parameters have truly distinct and identifiable influences on responder decisions (`trial_role == 1`). We need to find a way for the second parameter (the fairness/penalty related one) to exert its influence in a manner that is mathematically orthogonal or highly distinct from the first parameter's influence (the value/gain related one).\n\nBased on this analysis, focus your exploration for Run 55 on model structures where the two learnable parameters contribute to utility in fundamentally different mathematical ways. Simply scaling different terms (linear or non-linear) within or across regimes hasn't consistently worked. Consider structures where one parameter influences the sensitivity to the *absolute* value of the offer (`split_perc_self`), while the other parameter influences sensitivity to the *relative* fairness (e.g., the ratio `R_val = split_perc_self / fair_perc_self_calc`) via a non-linear transformation.\n\nConsider this strategy to enhance identifiability:\n\n*   **Combine Linear Value with Non-Linear Relative Fairness:** Design a model where one parameter scales the proposed percentage itself (`split_perc_self`), capturing a general sensitivity to the absolute value being offered, and the second parameter scales a non-linear function of the *ratio* of the proposed percentage to the calculated fair percentage (`R_val`). The non-linear function of the ratio should capture the specific impact of relative fairness/unfairness.\n    *   *Structural Principle:* A potentially promising structure is `U = beta_value * split_perc_self + beta_relative_fairness * f(R_val)`, where `f` is a non-linear function like `log`, `sqrt`, or a power function. This allows `beta_value` to influence the baseline utility based on the offer size, while `beta_relative_fairness` modulates this based on how fair the offer is, via a distinct mathematical operation on the ratio.\n    *   *Example Idea (building on the ratio concept):* Consider using the logarithm of the ratio. `log(R_val)` is 0 when the offer is fair (R_val=1), positive for favorable offers (R_val>1), and negative for unfavorable offers (R_val<1), with decreasing marginal impact as R_val increases.\n        *   `U = beta_value * split_perc_self + beta_relative_fairness * log(R_val + epsilon)`\n        *   Where `sum_tokens = token_self + token_opp`\n        *   `fair_perc_self_calc = IF(sum_tokens > 0, (token_self / sum_tokens) * 100.0, 50.0)` (Ensure this handles `sum_tokens=0` correctly).\n        *   `R_val = IF(fair_perc_self_calc > 0, split_perc_self / fair_perc_self_calc, IF(split_perc_self > 0, 100.0, epsilon))` (Handle `fair_perc_self_calc = 0`. If fair is 0 and split is positive, treat as a large ratio (e.g., 100.0). If both are 0, treat R_val as close to 0 to get a large negative log).\n        *   `epsilon = 1e-6` (Small constant for log input).\n\n*   **Explore Other Structures:** If the above doesn't work, continue to think creatively about how two parameters can control mathematically separable aspects of the utility function. Could one parameter control a threshold or an exponent? Could they define the shape of a smooth function (e.g., sigmoid, power law) that takes fairness deviation as input? Avoid structures that simply scale linearly dependent terms.\n\n*   **Key Inputs & Calculated Variables:** Use `split_perc_self`, `token_self`, `token_opp` as data variables. Calculate `sum_tokens`, `fair_perc_self_calc`, and necessary intermediate terms like `R_val` and `epsilon`. Ensure `fair_perc_self_calc` is handled correctly when `sum_tokens` is 0.\n\n*   **Model Formula:** Define the utility (`U`). Include calculation steps for necessary derived variables *before* the final formula for `U`. Use clear mathematical notation within the <MODEL> tags.\n\n*   **Learnable Parameters:** Your model *must* have exactly **2 learnable parameters**. Choose descriptive names suitable for Python code. Define clear, generous, finite numerical bounds (e.g., [-50.0, 50.0] or wider/narrower if appropriate). Consider the expected sign and scale, but keep bounds wide enough.\n\n*   **Calculated Variables:** Ensure all calculated variables used in the model formula (including `sum_tokens`, `fair_perc_self_calc`, intermediate terms like `R_val` and `epsilon`, and `U`) are included in your <VARIABLES> descriptions with `source: \"calculated\"`. Include descriptions for all data variables used as inputs (`token_self`, `token_opp`, `split_perc_self`) with `source: \"data\"`. Ensure the description for `fair_perc_self_calc` explicitly mentions the `sum_tokens > 0` condition and the default value.\n\n*   **Model Specification:** Provide the formal mathematical formula between <MODEL> tags. Only the formula should be inside these tags.\n\n*   **Variable Descriptions:** Provide variable descriptions in JSON format between <VARIABLES> tags for *all* variables used in the <MODEL> formula (data, calculated, learnable). Include source, range (with inclusive flags), distribution (if applicable), and learnable status. Use `split_perc_self` as the variable name for the proposed percentage share for self.\n\n*   **Target Variable:** Specify \"accept\" as the target variable using <target_variable> tags.\n\n*   **Summary:** Provide a concise summary between <SUMMARY> tags. Describe the model's core idea and, crucially, explain how its specific mathematical structure is designed to ensure parameter identifiability for *both* learnable parameters (e.g., by having them scale distinct mathematical forms like linear value and non-linear relative fairness).\n\nAvailable Data Variables:\n- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.\n(Note: Use `split_perc_self` for the participant's proposed percentage share percentage).\n\nPlease think through this step by step, then provide your model specification and variable descriptions. Remember that robust parameter identifiability for *both* learnable parameters is the absolute priority. Your goal is to find a mathematical structure where both parameters can be uniquely and reliably estimated from the data by ensuring their influences are clearly distinguishable. Previous attempts scaling different terms (linear or non-linear) within or across regimes have struggled, particularly with the fairness/penalty parameter. Explore combining a term based on absolute value with a term based on a non-linear transformation of relative fairness (like the log of the ratio), or other structures that create highly distinct roles for the two parameters. Be creative in designing the mathematical relationship between inputs, parameters, and utility to achieve this separation.Task Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\nproposed_amount = same as above but in \u00a3\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified).\n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal.\n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied.\n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1:\n<EXAMPLE>\n(Model of a Random Choice Task):\\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = beta + epsilon*E + eta*N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (beta) constrained to [0,1] and an unconstrained environmental sensitivity parameter (epsilon). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like \\'lambda\\' and use alternatives like \\'learning_rate\\' or \\'lambda_param\\'.\n\nModel Type:\nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n<think>\nThe user wants improved instructions for Run 55.\nPrimary goal: Parameter Recovery >= 0.7 for *all* 2 learnable parameters.\nSecondary goals: Lower BIC, higher Accuracy.\nStateless LLM requires full context (task, variables, previous run analysis, objective, output format).\n\nPrevious run (Run 54) details:\n- Model: Piecewise non-linear (`sqrt` for gain, `square` for loss), scaling the transformed fairness difference.\n- Results: BIC 449.36, Acc 0.697, Rec beta_gain_sensitivity=0.332, beta_loss_sensitivity=0.596.\n- Failure: Poor recovery for *both* parameters.\n\nAnalysis of previous runs provided:\n- Run 1: Linear combination of `split_perc_self` and `fairness_deviation`. Rec: beta_value=0.718, beta_fairness_deviation=0.653. (Failed recovery on fairness param)\n- Run 2: Linear combo of `split_perc_self` and squared fairness penalty. Rec: beta_value=0.359, beta_fairness_penalty=0.630. (Failed recovery on both)\n- Run 3: Piecewise linear penalty below fair. Rec: beta_value=0.768, beta_unfairness_penalty=0.561. (Failed recovery on penalty param)\n- Run 4: Piecewise linear, scaling `split_perc_self` vs `abs_perc_difference`. Rec: beta_gain_scale=0.058, beta_loss_penalty=0.302. (Failed recovery on both, very low)\n- Run 5 (Run 54): Piecewise non-linear (`sqrt` vs `square`). Rec: beta_gain_sensitivity=0.332, beta_loss_sensitivity=0.596. (Failed recovery on both)\n\nPattern: Models often struggle to recover the parameter associated with fairness deviation or penalty terms, even when the parameter scaling the absolute value/gain is recovered well (Runs 1, 3). Simply scaling different terms (linear or non-linear) in piecewise models (Runs 4, 5) or combining them linearly (Runs 1, 2) hasn't consistently yielded distinct parameter influences for *both*.\n\nNew Strategy Idea: Combine a linear term for the absolute value (`split_perc_self`) with a *non-linear* term for *relative* fairness (ratio `R_val`). This attempts to create two dimensions of influence: absolute value sensitivity and non-linear relative fairness sensitivity.\nProposed structure: `U = beta_value * split_perc_self + beta_relative_fairness * log(R_val + epsilon)`\nNeed to define `R_val` and handle the `fair_perc_self_calc = 0` case.\n`R_val = split_perc_self / fair_perc_self_calc` if `fair_perc_self_calc > 0`.\nIf `fair_perc_self_calc == 0` (participant contributed 0 tokens), the fair share is 0. Any offer > 0 is infinitely fair in ratio terms, but absolute value still matters. Setting `R_val` to a large constant (e.g., 100.0) if `split_perc_self > 0` and fair is 0 seems like a reasonable heuristic for a very high relative gain. If both are 0, `R_val` should be handled to produce a large negative log utility (representing getting nothing when expecting nothing, maybe very low utility). Let's define `R_val = IF(fair_perc_self_calc > 0, split_perc_self / (fair_perc_self_calc + epsilon), IF(split_perc_self > 0, 100.0, epsilon))` where epsilon is small. This avoids division by zero and log of zero. Using `(fair_perc_self_calc + epsilon)` in the denominator is slightly safer mathematically than checking `>0` then dividing. Let's refine:\n`fair_perc_self_calc_safe = fair_perc_self_calc + epsilon` (add epsilon always to denominator)\n`R_val = split_perc_self / fair_perc_self_calc_safe`\n`U = beta_value * split_perc_self + beta_relative_fairness * log(R_val + epsilon)`\nThis looks cleaner. Need to define `fair_perc_self_calc_safe` and `epsilon` as calculated variables.\n\nThe instructions should:\n- State run number (55).\n- Restate primary objective (rec >= 0.7 for *both*).\n- Summarize Run 54 results and failure (poor rec on both, using piecewise non-linear).\n- Analyze pattern of failure across previous runs (fairness param recovery consistently failing).\n- Propose the new strategy: combine linear `split_perc_self` with non-linear `log(R_val)`. Explain *why* this might help identifiability (absolute value vs. log-relative value).\n- Provide the specific model structure proposed.\n- Remind about 2 params, bounds, variable descriptions (all variables used!), target variable, summary.\n- Encourage out-of-the-box thinking beyond the specific example, but stress the need for mathematically separable parameter influences.\n- Include full task/variable context.\n\nMake sure to update the Run number in the instructions title and body.\nEnsure variable descriptions cover all variables in the proposed model structure, including calculated intermediates and constants like epsilon.\nUse clear Python-compatible names for parameters.\n\nModel structure to propose:\n```\nsum_tokens = token_self + token_opp\nfair_perc_self_calc = IF(sum_tokens > 0, (token_self / sum_tokens) * 100.0, 50.0)\nepsilon = 1e-6\nfair_perc_self_calc_safe = fair_perc_self_calc + epsilon\nR_val = split_perc_self / fair_perc_self_calc_safe\nU = beta_value * split_perc_self + beta_relative_fairness * log(R_val + epsilon)\n```\nVariable descriptions needed for: `token_self`, `token_opp`, `split_perc_self` (data); `sum_tokens`, `fair_perc_self_calc`, `epsilon`, `fair_perc_self_calc_safe`, `R_val`, `U` (calculated); `beta_value`, `beta_relative_fairness` (learnable).\n\nCheck variable sources and learnable flags. Range for epsilon should be fixed min/max. Range for U should be -inf/inf. Bounds for learnable parameters should be finite and generous.\n\nThis new structure combines absolute value and relative fairness in a non-additive, non-piecewise way (within the second term). This might provide the necessary mathematical separation.\nOkay, here are the improved instructions for the next run (Run 55), building on the results of the previous runs.\n\nInstructions for Run 55 of 100:\n\nThe unwavering primary objective remains achieving parameter recovery >= 0.7 for *all* learnable parameters. This is the critical benchmark for model usability. While improved BIC and accuracy are valuable secondary goals, they must not come at the expense of robust parameter recovery. A model with excellent fit but poor parameter identifiability is not suitable for drawing meaningful conclusions about the underlying cognitive processes.\n\nThe previous run (Run 54) implemented a piecewise non-linear model based on fairness difference (`U = (perc_difference >= 0) ? beta_gain_sensitivity * sqrt(perc_difference + epsilon) : beta_loss_sensitivity * (fair_perc_self_calc - split_perc_self + epsilon)^2`). It unfortunately failed the parameter recovery test for *both* `beta_gain_sensitivity` (r = 0.332) and `beta_loss_sensitivity` (r = 0.596). Its overall performance (BIC 449.36, Acc 0.697) was also relatively poor compared to the better-fitting models.\n\nAnalysis of Run 54's failure and previous models: The piecewise structure in Run 54 assigned the two learnable parameters to scale distinct non-linear functions (`sqrt` vs. `square`) of the fairness deviation in gain vs. loss regimes. However, this approach, similar to previous attempts that scaled linear terms (Run 4) or combined linear terms (Run 1, 3), did not create sufficiently distinct influences for the parameters to be reliably estimated. We've observed a pattern where parameters scaling the absolute value of the offer or gain component (`beta_value` in Runs 1 & 3) sometimes achieve decent recovery, but parameters specifically scaling the *fairness deviation* or *loss penalty* (`beta_fairness_deviation`, `beta_unfairness_penalty`, `beta_loss_sensitivity`) consistently fail to reach the 0.7 threshold. This strongly suggests the influence of the fairness deviation/penalty term is either too correlated with the absolute value term across trials, or its impact is not captured in a mathematically separable way by simply scaling a function of the deviation.\n\nThe core challenge persists: designing a mathematical structure for utility using exactly **2 learnable parameters** such that *both* parameters have truly distinct and identifiable influences on responder decisions (`trial_role == 1`). We need to find a way for the second parameter (the fairness/penalty related one) to exert its influence in a manner that is mathematically orthogonal or highly distinct from the first parameter's influence (the value/gain related one).\n\nBased on this analysis, focus your exploration for Run 55 on model structures where the two learnable parameters contribute to utility in fundamentally different mathematical ways, beyond simply scaling different terms additively or piecewise. Consider structures where one parameter influences the sensitivity to the *absolute* value of the offer (`split_perc_self`), while the other parameter influences sensitivity to the *relative* fairness (e.g., the ratio `R_val = split_perc_self / fair_perc_self_calc`) via a non-linear transformation.\n\nConsider this strategy to enhance identifiability:\n\n*   **Combine Linear Value with Non-Linear Relative Fairness:** Design a model where one parameter scales the proposed percentage itself (`split_perc_self`), capturing a general sensitivity to the absolute value being offered, and the second parameter scales a non-linear function of the *ratio* of the proposed percentage to the calculated fair percentage (`R_val`). The non-linear function of the ratio should capture the specific impact of relative fairness/unfairness. This approach aims for parameter identifiability by having parameters scale terms that represent different dimensions (absolute vs. relative) via different mathematical operations (linear vs. non-linear transformation).\n    *   *Structural Principle:* A potentially promising structure is `U = beta_value * split_perc_self + beta_relative_fairness * f(R_val)`, where `f` is a non-linear function like `log`, `sqrt`, or a power function. This allows `beta_value` to influence the baseline utility based on the offer size, while `beta_relative_fairness` modulates this based on how fair the offer is, via a distinct mathematical operation on the ratio.\n    *   *Example Idea (using the logarithm of the ratio, addressing edge cases):* The logarithm of the ratio `log(R_val)` is 0 when the offer is fair (R_val=1), positive for favorable offers (R_val>1), and negative for unfavorable offers (R_val<1), offering a non-linear representation of relative value.\n        *   `sum_tokens = token_self + token_opp`\n        *   `fair_perc_self_calc = IF(sum_tokens > 0.0, (token_self / sum_tokens) * 100.0, 50.0)` (Ensure this handles `sum_tokens=0`).\n        *   `epsilon = 1e-6` (Small constant to handle division by zero and log of zero/negative).\n        *   `fair_perc_self_calc_safe = fair_perc_self_calc + epsilon` (Add epsilon to denominator to prevent division by zero when fair_perc_self_calc is 0).\n        *   `R_val = split_perc_self / fair_perc_self_calc_safe` (Calculate the ratio using the safe fair value).\n        *   `U = beta_value * split_perc_self + beta_relative_fairness * log(R_val + epsilon)` (Combine linear split percentage with log-transformed ratio).\n\n*   **Explore Other Structures:** If the above specific example doesn't seem optimal, continue to think creatively about how two parameters can control mathematically separable aspects of the utility function. Could one parameter control a threshold or an exponent in a non-trivial way? Could they define the shape of a smooth function (e.g., sigmoid, power law) that takes fairness deviation as input, where the parameters affect different parameters of the function (e.g., slope and inflection point)? Avoid structures that simply scale linearly dependent terms or rely solely on simple piecewise linear or piecewise scaled non-linear functions, as these have failed recovery for one or both parameters previously.\n\n*   **Key Inputs & Calculated Variables:** Use `split_perc_self`, `token_self`, `token_opp` as data variables. Calculate `sum_tokens`, `fair_perc_self_calc`, and necessary intermediate terms like `R_val`, `epsilon`, `fair_perc_self_calc_safe`. Ensure `fair_perc_self_calc` is handled correctly when `sum_tokens` is 0.\n\n*   **Model Formula:** Define the utility (`U`). Include calculation steps for necessary derived variables *before* the final formula for `U`. Use clear mathematical notation within the <MODEL> tags.\n\n*   **Learnable Parameters:** Your model *must* have exactly **2 learnable parameters**. Choose descriptive names suitable for Python code. Define clear, generous, finite numerical bounds (e.g., [-50.0, 50.0] or wider/narrower if appropriate). Consider the expected sign and scale, but keep bounds wide enough.\n\n*   **Calculated Variables:** Ensure all calculated variables used in the model formula (including `sum_tokens`, `fair_perc_self_calc`, intermediate terms like `epsilon`, `fair_perc_self_calc_safe`, `R_val`, and `U`) are included in your <VARIABLES> descriptions with `source: \"calculated\"`. Include descriptions for all data variables used as inputs (`token_self`, `token_opp`, `split_perc_self`) with `source: \"data\"`. Ensure the description for `fair_perc_self_calc` explicitly mentions the `sum_tokens > 0` condition and the default value.\n\n*   **Model Specification:** Provide the formal mathematical formula between <MODEL> tags. Only the formula should be inside these tags.\n\n*   **Variable Descriptions:** Provide variable descriptions in JSON format between <VARIABLES> tags for *all* variables used in the <MODEL> formula (data, calculated, learnable). Include source, range (with inclusive flags), distribution (if applicable), and learnable status. Use `split_perc_self` as the variable name for the participant's proposed percentage share percentage.\n\n*   **Target Variable:** Specify \"accept\" as the target variable using <target_variable> tags.\n\n*   **Summary:** Provide a concise summary between <SUMMARY> tags. Describe the model's core idea and, crucially, explain how its specific mathematical structure is designed to ensure parameter identifiability for *both* learnable parameters (e.g., by having them scale distinct mathematical forms like linear value and non-linear relative fairness).\n\nAvailable Data Variables:\n- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.\n(Note: Use `split_perc_self` for the participant's proposed percentage share percentage).\n\nPlease think through this step by step, then provide your model specification and variable descriptions. Remember that robust parameter identifiability for *both* learnable parameters is the absolute priority. Your goal is to find a mathematical structure where both parameters can be uniquely and reliably estimated from the data by ensuring their influences are clearly distinguishable. Previous attempts scaling different terms (linear or non-linear) within or across regimes have struggled, particularly with the fairness/penalty parameter. Explore combining a term based on absolute value with a term based on a non-linear transformation of relative fairness (like the log of the ratio), or other structures that create highly distinct roles for the two parameters. Be creative in designing the mathematical relationship between inputs, parameters, and utility to achieve this separation.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: Task Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\nproposed_amount = same as above but in \u00a3\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified).\n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal.\n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied.\n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1:\n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = beta + epsilon*E + eta*N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (beta) constrained to [0,1] and an unconstrained environmental sensitivity parameter (epsilon). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like \\'lambda\\' and use alternatives like \\'learning_rate\\' or \\'lambda_param\\'.\n\nModel Type:\nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: Okay, here are the improved instructions for the next run (Run 55), building on the results of the previous runs.\n\nInstructions for Run 55 of 100:\n\nThe unwavering primary objective remains achieving parameter recovery >= 0.7 for *all* learnable parameters. This is the critical benchmark for model usability. While improved BIC and accuracy are valuable secondary goals, they must not come at the expense of robust parameter recovery. A model with excellent fit but poor parameter identifiability is not suitable for drawing meaningful conclusions about the underlying cognitive processes.\n\nThe previous run (Run 54) implemented a piecewise non-linear model based on fairness difference (`U = (perc_difference >= 0) ? beta_gain_sensitivity * sqrt(perc_difference + epsilon) : beta_loss_sensitivity * (fair_perc_self_calc - split_perc_self + epsilon)^2`). It unfortunately failed the parameter recovery test for *both* `beta_gain_sensitivity` (r = 0.332) and `beta_loss_sensitivity` (r = 0.596). Its overall performance (BIC 449.36, Acc 0.697) was also relatively poor.\n\nAnalysis of Run 54's failure and previous models: The piecewise structure in Run 54 assigned the two learnable parameters to scale distinct non-linear functions (`sqrt` vs. `square`) of the fairness deviation in gain vs. loss regimes. However, this approach, similar to previous attempts that scaled linear terms (Run 4) or combined linear terms (Run 1, 3), did not create sufficiently distinct influences for the parameters to be reliably estimated. We've observed a pattern where parameters scaling the absolute value of the offer or gain component (`beta_value` in Runs 1 & 3) sometimes achieve decent recovery, but parameters specifically scaling the *fairness deviation* or *loss penalty* (`beta_fairness_deviation`, `beta_unfairness_penalty`, `beta_loss_sensitivity`) consistently fail to reach the 0.7 threshold. This suggests the influence of the fairness deviation/penalty term is either too correlated with the absolute value term, or its impact is not captured in a mathematically separable way by simply scaling it.\n\nThe core challenge persists: designing a mathematical structure for utility using exactly **2 learnable parameters** such that *both* parameters have truly distinct and identifiable influences on responder decisions (`trial_role == 1`). We need to find a way for the second parameter (the fairness/penalty related one) to exert its influence in a manner that is mathematically orthogonal or highly distinct from the first parameter's influence (the value/gain related one).\n\nBased on this analysis, focus your exploration for Run 55 on model structures where the two learnable parameters contribute to utility in fundamentally different mathematical ways. Simply scaling different terms (linear or non-linear) within or across regimes hasn't consistently worked. Consider structures where one parameter influences the sensitivity to the *absolute* value of the offer (`split_perc_self`), while the other parameter influences sensitivity to the *relative* fairness (e.g., the ratio `R_val = split_perc_self / fair_perc_self_calc`) via a non-linear transformation.\n\nConsider this strategy to enhance identifiability:\n\n*   **Combine Linear Value with Non-Linear Relative Fairness:** Design a model where one parameter scales the proposed percentage itself (`split_perc_self`), capturing a general sensitivity to the absolute value being offered, and the second parameter scales a non-linear function of the *ratio* of the proposed percentage to the calculated fair percentage (`R_val`). The non-linear function of the ratio should capture the specific impact of relative fairness/unfairness.\n    *   *Structural Principle:* A potentially promising structure is `U = beta_value * split_perc_self + beta_relative_fairness * f(R_val)`, where `f` is a non-linear function like `log`, `sqrt`, or a power function. This allows `beta_value` to influence the baseline utility based on the offer size, while `beta_relative_fairness` modulates this based on how fair the offer is, via a distinct mathematical operation on the ratio.\n    *   *Example Idea (building on the ratio concept):* Consider using the logarithm of the ratio. `log(R_val)` is 0 when the offer is fair (R_val=1), positive for favorable offers (R_val>1), and negative for unfavorable offers (R_val<1), with decreasing marginal impact as R_val increases.\n        *   `U = beta_value * split_perc_self + beta_relative_fairness * log(R_val + epsilon)`\n        *   Where `sum_tokens = token_self + token_opp`\n        *   `fair_perc_self_calc = IF(sum_tokens > 0, (token_self / sum_tokens) * 100.0, 50.0)` (Ensure this handles `sum_tokens=0` correctly).\n        *   `R_val = IF(fair_perc_self_calc > 0, split_perc_self / fair_perc_self_calc, IF(split_perc_self > 0, 100.0, epsilon))` (Handle `fair_perc_self_calc = 0`. If fair is 0 and split is positive, treat as a large ratio (e.g., 100.0). If both are 0, treat R_val as close to 0 to get a large negative log).\n        *   `epsilon = 1e-6` (Small constant for log input).\n\n*   **Explore Other Structures:** If the above doesn't work, continue to think creatively about how two parameters can control mathematically separable aspects of the utility function. Could one parameter control a threshold or an exponent? Could they define the shape of a smooth function (e.g., sigmoid, power law) that takes fairness deviation as input? Avoid structures that simply scale linearly dependent terms.\n\n*   **Key Inputs & Calculated Variables:** Use `split_perc_self`, `token_self`, `token_opp` as data variables. Calculate `sum_tokens`, `fair_perc_self_calc`, and necessary intermediate terms like `R_val` and `epsilon`. Ensure `fair_perc_self_calc` is handled correctly when `sum_tokens` is 0.\n\n*   **Model Formula:** Define the utility (`U`). Include calculation steps for necessary derived variables *before* the final formula for `U`. Use clear mathematical notation within the <MODEL> tags.\n\n*   **Learnable Parameters:** Your model *must* have exactly **2 learnable parameters**. Choose descriptive names suitable for Python code. Define clear, generous, finite numerical bounds (e.g., [-50.0, 50.0] or wider/narrower if appropriate). Consider the expected sign and scale, but keep bounds wide enough.\n\n*   **Calculated Variables:** Ensure all calculated variables used in the model formula (including `sum_tokens`, `fair_perc_self_calc`, intermediate terms like `R_val` and `epsilon`, and `U`) are included in your <VARIABLES> descriptions with `source: \"calculated\"`. Include descriptions for all data variables used as inputs (`token_self`, `token_opp`, `split_perc_self`) with `source: \"data\"`. Ensure the description for `fair_perc_self_calc` explicitly mentions the `sum_tokens > 0` condition and the default value.\n\n*   **Model Specification:** Provide the formal mathematical formula between <MODEL> tags. Only the formula should be inside these tags.\n\n*   **Variable Descriptions:** Provide variable descriptions in JSON format between <VARIABLES> tags for *all* variables used in the <MODEL> formula (data, calculated, learnable). Include source, range (with inclusive flags), distribution (if applicable), and learnable status. Use `split_perc_self` as the variable name for the proposed percentage share for self.\n\n*   **Target Variable:** Specify \"accept\" as the target variable using <target_variable> tags.\n\n*   **Summary:** Provide a concise summary between <SUMMARY> tags. Describe the model's core idea and, crucially, explain how its specific mathematical structure is designed to ensure parameter identifiability for *both* learnable parameters (e.g., by having them scale distinct mathematical forms like linear value and non-linear relative fairness).\n\nAvailable Data Variables:\n- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.\n(Note: Use `split_perc_self` for the participant's proposed percentage share percentage).\n\nPlease think through this step by step, then provide your model specification and variable descriptions. Remember that robust parameter identifiability for *both* learnable parameters is the absolute priority. Your goal is to find a mathematical structure where both parameters can be uniquely and reliably estimated from the data by ensuring their influences are clearly distinguishable. Previous attempts scaling different terms (linear or non-linear) within or across regimes have struggled, particularly with the fairness/penalty parameter. Explore combining a term based on absolute value with a term based on a non-linear transformation of relative fairness (like the log of the ratio), or other structures that create highly distinct roles for the two parameters. Be creative in designing the mathematical relationship between inputs, parameters, and utility to achieve this separation.Task Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\nproposed_amount = same as above but in \u00a3\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified).\n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal.\n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied.\n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1:\n<EXAMPLE>\n(Model of a Random Choice Task):\\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = beta + epsilon*E + eta*N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (beta) constrained to [0,1] and an unconstrained environmental sensitivity parameter (epsilon). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like \\'lambda\\' and use alternatives like \\'learning_rate\\' or \\'lambda_param\\'.\n\nModel Type:\nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n<think>\nThe user wants improved instructions for Run 55.\nPrimary goal: Parameter Recovery >= 0.7 for *all* 2 learnable parameters.\nSecondary goals: Lower BIC, higher Accuracy.\nStateless LLM requires full context (task, variables, previous run analysis, objective, output format).\n\nPrevious run (Run 54) details:\n- Model: Piecewise non-linear (`sqrt` for gain, `square` for loss), scaling the transformed fairness difference.\n- Results: BIC 449.36, Acc 0.697, Rec beta_gain_sensitivity=0.332, beta_loss_sensitivity=0.596.\n- Failure: Poor recovery for *both* parameters.\n\nAnalysis of previous runs provided:\n- Run 1: Linear combination of `split_perc_self` and `fairness_deviation`. Rec: beta_value=0.718, beta_fairness_deviation=0.653. (Failed recovery on fairness param)\n- Run 2: Linear combo of `split_perc_self` and squared fairness penalty. Rec: beta_value=0.359, beta_fairness_penalty=0.630. (Failed recovery on both)\n- Run 3: Piecewise linear penalty below fair. Rec: beta_value=0.768, beta_unfairness_penalty=0.561. (Failed recovery on penalty param)\n- Run 4: Piecewise linear, scaling `split_perc_self` vs `abs_perc_difference`. Rec: beta_gain_scale=0.058, beta_loss_penalty=0.302. (Failed recovery on both, very low)\n- Run 5 (Run 54): Piecewise non-linear (`sqrt` vs `square`). Rec: beta_gain_sensitivity=0.332, beta_loss_sensitivity=0.596. (Failed recovery on both)\n\nPattern: Models often struggle to recover the parameter associated with fairness deviation or penalty terms, even when the parameter scaling the absolute value/gain is recovered well (Runs 1, 3). Simply scaling different terms (linear or non-linear) in piecewise models (Runs 4, 5) or combining them linearly (Runs 1, 2) hasn't consistently yielded distinct parameter influences for *both*.\n\nNew Strategy Idea: Combine a linear term for the absolute value (`split_perc_self`) with a *non-linear* term for *relative* fairness (ratio `R_val`). This attempts to create two dimensions of influence: absolute value sensitivity and non-linear relative fairness sensitivity.\nProposed structure: `U = beta_value * split_perc_self + beta_relative_fairness * log(R_val + epsilon)`\nNeed to define `R_val` and handle the `fair_perc_self_calc = 0` case.\n`R_val = split_perc_self / fair_perc_self_calc` if `fair_perc_self_calc > 0`.\nIf `fair_perc_self_calc == 0` (participant contributed 0 tokens), the fair share is 0. Any offer > 0 is infinitely fair in ratio terms, but absolute value still matters. Setting `R_val` to a large constant (e.g., 100.0) if `split_perc_self > 0` and fair is 0 seems like a reasonable heuristic for a very high relative gain. If both are 0, `R_val` should be handled to produce a large negative log utility (representing getting nothing when expecting nothing, maybe very low utility). Let's define `R_val = IF(fair_perc_self_calc > 0, split_perc_self / (fair_perc_self_calc + epsilon), IF(split_perc_self > 0, 100.0, epsilon))` where epsilon is small. This avoids division by zero and log of zero. Using `(fair_perc_self_calc + epsilon)` in the denominator is slightly safer mathematically than checking `>0` then dividing. Let's refine:\n`fair_perc_self_calc_safe = fair_perc_self_calc + epsilon` (add epsilon always to denominator)\n`R_val = split_perc_self / fair_perc_self_calc_safe`\n`U = beta_value * split_perc_self + beta_relative_fairness * log(R_val + epsilon)`\nThis looks cleaner. Need to define `fair_perc_self_calc_safe` and `epsilon` as calculated variables.\n\nThe instructions should:\n- State run number (55).\n- Restate primary objective (rec >= 0.7 for *both*).\n- Summarize Run 54 results and failure (poor rec on both, using piecewise non-linear).\n- Analyze pattern of failure across previous runs (fairness param recovery consistently failing).\n- Propose the new strategy: combine linear `split_perc_self` with non-linear `log(R_val)`. Explain *why* this might help identifiability (absolute value vs. log-relative value).\n- Provide the specific model structure proposed.\n- Remind about 2 params, bounds, variable descriptions (all variables used!), target variable, summary.\n- Encourage out-of-the-box thinking beyond the specific example, but stress the need for mathematically separable parameter influences.\n- Include full task/variable context.\n\nMake sure to update the Run number in the instructions title and body.\nEnsure variable descriptions cover all variables in the proposed model structure, including calculated intermediates and constants like epsilon.\nUse clear Python-compatible names for parameters.\n\nModel structure to propose:\n```\nsum_tokens = token_self + token_opp\nfair_perc_self_calc = IF(sum_tokens > 0, (token_self / sum_tokens) * 100.0, 50.0)\nepsilon = 1e-6\nfair_perc_self_calc_safe = fair_perc_self_calc + epsilon\nR_val = split_perc_self / fair_perc_self_calc_safe\nU = beta_value * split_perc_self + beta_relative_fairness * log(R_val + epsilon)\n```\nVariable descriptions needed for: `token_self`, `token_opp`, `split_perc_self` (data); `sum_tokens`, `fair_perc_self_calc`, `epsilon`, `fair_perc_self_calc_safe`, `R_val`, `U` (calculated); `beta_value`, `beta_relative_fairness` (learnable).\n\nCheck variable sources and learnable flags. Range for epsilon should be fixed min/max. Range for U should be -inf/inf. Bounds for learnable parameters should be finite and generous.\n\nThis new structure combines absolute value and relative fairness in a non-additive, non-piecewise way (within the second term). This might provide the necessary mathematical separation.\nOkay, here are the improved instructions for the next run (Run 55), building on the results of the previous runs.\n\nInstructions for Run 55 of 100:\n\nThe unwavering primary objective remains achieving parameter recovery >= 0.7 for *all* learnable parameters. This is the critical benchmark for model usability. While improved BIC and accuracy are valuable secondary goals, they must not come at the expense of robust parameter recovery. A model with excellent fit but poor parameter identifiability is not suitable for drawing meaningful conclusions about the underlying cognitive processes.\n\nThe previous run (Run 54) implemented a piecewise non-linear model based on fairness difference (`U = (perc_difference >= 0) ? beta_gain_sensitivity * sqrt(perc_difference + epsilon) : beta_loss_sensitivity * (fair_perc_self_calc - split_perc_self + epsilon)^2`). It unfortunately failed the parameter recovery test for *both* `beta_gain_sensitivity` (r = 0.332) and `beta_loss_sensitivity` (r = 0.596). Its overall performance (BIC 449.36, Acc 0.697) was also relatively poor compared to the better-fitting models.\n\nAnalysis of Run 54's failure and previous models: The piecewise structure in Run 54 assigned the two learnable parameters to scale distinct non-linear functions (`sqrt` vs. `square`) of the fairness deviation in gain vs. loss regimes. However, this approach, similar to previous attempts that scaled linear terms (Run 4) or combined linear terms (Run 1, 3), did not create sufficiently distinct influences for the parameters to be reliably estimated. We've observed a pattern where parameters scaling the absolute value of the offer or gain component (`beta_value` in Runs 1 & 3) sometimes achieve decent recovery, but parameters specifically scaling the *fairness deviation* or *loss penalty* (`beta_fairness_deviation`, `beta_unfairness_penalty`, `beta_loss_sensitivity`) consistently fail to reach the 0.7 threshold. This strongly suggests the influence of the fairness deviation/penalty term is either too correlated with the absolute value term across trials, or its impact is not captured in a mathematically separable way by simply scaling a function of the deviation.\n\nThe core challenge persists: designing a mathematical structure for utility using exactly **2 learnable parameters** such that *both* parameters have truly distinct and identifiable influences on responder decisions (`trial_role == 1`). We need to find a way for the second parameter (the fairness/penalty related one) to exert its influence in a manner that is mathematically orthogonal or highly distinct from the first parameter's influence (the value/gain related one).\n\nBased on this analysis, focus your exploration for Run 55 on model structures where the two learnable parameters contribute to utility in fundamentally different mathematical ways, beyond simply scaling different terms additively or piecewise. Consider structures where one parameter influences the sensitivity to the *absolute* value of the offer (`split_perc_self`), while the other parameter influences sensitivity to the *relative* fairness (e.g., the ratio `R_val = split_perc_self / fair_perc_self_calc`) via a non-linear transformation.\n\nConsider this strategy to enhance identifiability:\n\n*   **Combine Linear Value with Non-Linear Relative Fairness:** Design a model where one parameter scales the proposed percentage itself (`split_perc_self`), capturing a general sensitivity to the absolute value being offered, and the second parameter scales a non-linear function of the *ratio* of the proposed percentage to the calculated fair percentage (`R_val`). The non-linear function of the ratio should capture the specific impact of relative fairness/unfairness. This approach aims for parameter identifiability by having parameters scale terms that represent different dimensions (absolute vs. relative) via different mathematical operations (linear vs. non-linear transformation).\n    *   *Structural Principle:* A potentially promising structure is `U = beta_value * split_perc_self + beta_relative_fairness * f(R_val)`, where `f` is a non-linear function like `log`, `sqrt`, or a power function. This allows `beta_value` to influence the baseline utility based on the offer size, while `beta_relative_fairness` modulates this based on how fair the offer is, via a distinct mathematical operation on the ratio.\n    *   *Example Idea (using the logarithm of the ratio, addressing edge cases):* The logarithm of the ratio `log(R_val)` is 0 when the offer is fair (R_val=1), positive for favorable offers (R_val>1), and negative for unfavorable offers (R_val<1), offering a non-linear representation of relative value.\n        *   `sum_tokens = token_self + token_opp`\n        *   `fair_perc_self_calc = IF(sum_tokens > 0.0, (token_self / sum_tokens) * 100.0, 50.0)` (Ensure this handles `sum_tokens=0`).\n        *   `epsilon = 1e-6` (Small constant to handle division by zero and log of zero/negative).\n        *   `fair_perc_self_calc_safe = fair_perc_self_calc + epsilon` (Add epsilon to denominator to prevent division by zero when fair_perc_self_calc is 0).\n        *   `R_val = split_perc_self / fair_perc_self_calc_safe` (Calculate the ratio using the safe fair value).\n        *   `U = beta_value * split_perc_self + beta_relative_fairness * log(R_val + epsilon)` (Combine linear split percentage with log-transformed ratio).\n\n*   **Explore Other Structures:** If the above specific example doesn't seem optimal, continue to think creatively about how two parameters can control mathematically separable aspects of the utility function. Could one parameter control a threshold or an exponent in a non-trivial way? Could they define the shape of a smooth function (e.g., sigmoid, power law) that takes fairness deviation as input, where the parameters affect different parameters of the function (e.g., slope and inflection point)? Avoid structures that simply scale linearly dependent terms or rely solely on simple piecewise linear or piecewise scaled non-linear functions, as these have failed recovery for one or both parameters previously.\n\n*   **Key Inputs & Calculated Variables:** Use `split_perc_self`, `token_self`, `token_opp` as data variables. Calculate `sum_tokens`, `fair_perc_self_calc`, and necessary intermediate terms like `R_val`, `epsilon`, `fair_perc_self_calc_safe`. Ensure `fair_perc_self_calc` is handled correctly when `sum_tokens` is 0.\n\n*   **Model Formula:** Define the utility (`U`). Include calculation steps for necessary derived variables *before* the final formula for `U`. Use clear mathematical notation within the <MODEL> tags.\n\n*   **Learnable Parameters:** Your model *must* have exactly **2 learnable parameters**. Choose descriptive names suitable for Python code. Define clear, generous, finite numerical bounds (e.g., [-50.0, 50.0] or wider/narrower if appropriate). Consider the expected sign and scale, but keep bounds wide enough.\n\n*   **Calculated Variables:** Ensure all calculated variables used in the model formula (including `sum_tokens`, `fair_perc_self_calc`, intermediate terms like `epsilon`, `fair_perc_self_calc_safe`, `R_val`, and `U`) are included in your <VARIABLES> descriptions with `source: \"calculated\"`. Include descriptions for all data variables used as inputs (`token_self`, `token_opp`, `split_perc_self`) with `source: \"data\"`. Ensure the description for `fair_perc_self_calc` explicitly mentions the `sum_tokens > 0` condition and the default value.\n\n*   **Model Specification:** Provide the formal mathematical formula between <MODEL> tags. Only the formula should be inside these tags.\n\n*   **Variable Descriptions:** Provide variable descriptions in JSON format between <VARIABLES> tags for *all* variables used in the <MODEL> formula (data, calculated, learnable). Include source, range (with inclusive flags), distribution (if applicable), and learnable status. Use `split_perc_self` as the variable name for the participant's proposed percentage share percentage.\n\n*   **Target Variable:** Specify \"accept\" as the target variable using <target_variable> tags.\n\n*   **Summary:** Provide a concise summary between <SUMMARY> tags. Describe the model's core idea and, crucially, explain how its specific mathematical structure is designed to ensure parameter identifiability for *both* learnable parameters (e.g., by having them scale distinct mathematical forms like linear value and non-linear relative fairness).\n\nAvailable Data Variables:\n- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.\n(Note: Use `split_perc_self` for the participant's proposed percentage share percentage).\n\nPlease think through this step by step, then provide your model specification and variable descriptions. Remember that robust parameter identifiability for *both* learnable parameters is the absolute priority. Your goal is to find a mathematical structure where both parameters can be uniquely and reliably estimated from the data by ensuring their influences are clearly distinguishable. Previous attempts scaling different terms (linear or non-linear) within or across regimes have struggled, particularly with the fairness/penalty parameter. Explore combining a term based on absolute value with a term based on a non-linear transformation of relative fairness (like the log of the ratio), or other structures that create highly distinct roles for the two parameters. Be creative in designing the mathematical relationship between inputs, parameters, and utility to achieve this separation.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<MODEL>\nsum_tokens = token_self + token_opp\nfair_perc_self_calc = IF(sum_tokens > 0.0, (token_self / sum_tokens) * 100.0, 50.0)\nepsilon_param = 1e-6\nfair_perc_self_calc_safe = fair_perc_self_calc + epsilon_param\nr_val = split_perc_self / fair_perc_self_calc_safe\nutility = beta_value * split_perc_self + beta_relative_fairness * log(r_val + epsilon_param)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The proposed share for the participant in percentage\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"sum_tokens\": {\n      \"description\": \"Total number of tokens found (participant + opponent)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 200,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fair_perc_self_calc\": {\n      \"description\": \"Calculated fair percentage share for the participant based on token contribution. 50.0 if sum_tokens is 0.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n     \"epsilon_param\": {\n      \"description\": \"A small constant added to prevent division by zero and log of zero/negative\",\n      \"range\": {\n        \"min\": 1e-6,\n        \"max\": 1e-6,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fair_perc_self_calc_safe\": {\n      \"description\": \"Fair percentage share plus epsilon, used as a safe denominator for ratio calculation\",\n      \"range\": {\n        \"min\": 1e-6,\n        \"max\": 100.0 + 1e-6,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"r_val\": {\n      \"description\": \"Ratio of proposed percentage share to calculated fair percentage share (using safe denominator)\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 1e100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_value\": {\n      \"description\": \"Learnable parameter representing sensitivity to the absolute proposed percentage share.\",\n      \"range\": {\n        \"min\": -10.0,\n        \"max\": 10.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_relative_fairness\": {\n      \"description\": \"Learnable parameter representing sensitivity to the relative fairness of the proposed share (log ratio).\",\n      \"range\": {\n        \"min\": -10.0,\n        \"max\": 10.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"utility\": {\n      \"description\": \"Utility of accepting the proposed offer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA utility model for responder decisions combining absolute value and relative fairness. Utility is a linear combination of the proposed percentage share for the participant, scaled by 'beta_value', and the logarithm of the ratio of the proposed share to the calculated fair share, scaled by 'beta_relative_fairness'. This structure aims to improve parameter identifiability by having the two learnable parameters scale terms representing different dimensions (absolute value vs. relative fairness) via different mathematical operations (linear vs. logarithmic transformation).\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: []\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                sum_tokens = token_self + token_opp\nfair_perc_self_calc = IF(sum_tokens > 0.0, (token_self / sum_tokens) * 100.0, 50.0)\nepsilon_param = 1e-6\nfair_perc_self_calc_safe = fair_perc_self_calc + epsilon_param\nr_val = split_perc_self / fair_perc_self_calc_safe\nutility = beta_value * split_perc_self + beta_relative_fairness * log(r_val + epsilon_param)\n\n                Variable Descriptions:\n                {\n  \"variables\": {}\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, beta_value=1.0, beta_relative_fairness=1.0):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        split_perc_self = trial.get(\"split_perc_self\", 0)\n\n        sum_tokens = token_self + token_opp\n        \n        if sum_tokens > 0.0:\n            fair_perc_self_calc = (token_self / sum_tokens) * 100.0\n        else:\n            fair_perc_self_calc = 50.0\n            \n        epsilon_param = 1e-6\n        fair_perc_self_calc_safe = fair_perc_self_calc + epsilon_param\n        r_val = split_perc_self / fair_perc_self_calc_safe\n        utility = beta_value * split_perc_self + beta_relative_fairness * math.log(r_val + epsilon_param)\n\n        model_predictions.append(utility)\n    return model_predictions\n```",
      "timestamp": 1746102254.790532
    }
  ],
  "parsing_error": "Failed to parse variable descriptions JSON",
  "model_specification": "sum_tokens = token_self + token_opp\nfair_perc_self_calc = IF(sum_tokens > 0.0, (token_self / sum_tokens) * 100.0, 50.0)\nepsilon_param = 1e-6\nfair_perc_self_calc_safe = fair_perc_self_calc + epsilon_param\nr_val = split_perc_self / fair_perc_self_calc_safe\nutility = beta_value * split_perc_self + beta_relative_fairness * log(r_val + epsilon_param)",
  "variable_descriptions": {},
  "model_summary": "A utility model for responder decisions combining absolute value and relative fairness. Utility is a linear combination of the proposed percentage share for the participant, scaled by 'beta_value', and the logarithm of the ratio of the proposed share to the calculated fair share, scaled by 'beta_relative_fairness'. This structure aims to improve parameter identifiability by having the two learnable parameters scale terms representing different dimensions (absolute value vs. relative fairness) via different mathematical operations (linear vs. logarithmic transformation).",
  "target_variable": "accept",
  "full_reasoning": "<MODEL>\nsum_tokens = token_self + token_opp\nfair_perc_self_calc = IF(sum_tokens > 0.0, (token_self / sum_tokens) * 100.0, 50.0)\nepsilon_param = 1e-6\nfair_perc_self_calc_safe = fair_perc_self_calc + epsilon_param\nr_val = split_perc_self / fair_perc_self_calc_safe\nutility = beta_value * split_perc_self + beta_relative_fairness * log(r_val + epsilon_param)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The proposed share for the participant in percentage\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"sum_tokens\": {\n      \"description\": \"Total number of tokens found (participant + opponent)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 200,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fair_perc_self_calc\": {\n      \"description\": \"Calculated fair percentage share for the participant based on token contribution. 50.0 if sum_tokens is 0.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n     \"epsilon_param\": {\n      \"description\": \"A small constant added to prevent division by zero and log of zero/negative\",\n      \"range\": {\n        \"min\": 1e-6,\n        \"max\": 1e-6,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fair_perc_self_calc_safe\": {\n      \"description\": \"Fair percentage share plus epsilon, used as a safe denominator for ratio calculation\",\n      \"range\": {\n        \"min\": 1e-6,\n        \"max\": 100.0 + 1e-6,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"r_val\": {\n      \"description\": \"Ratio of proposed percentage share to calculated fair percentage share (using safe denominator)\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 1e100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_value\": {\n      \"description\": \"Learnable parameter representing sensitivity to the absolute proposed percentage share.\",\n      \"range\": {\n        \"min\": -10.0,\n        \"max\": 10.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_relative_fairness\": {\n      \"description\": \"Learnable parameter representing sensitivity to the relative fairness of the proposed share (log ratio).\",\n      \"range\": {\n        \"min\": -10.0,\n        \"max\": 10.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"utility\": {\n      \"description\": \"Utility of accepting the proposed offer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA utility model for responder decisions combining absolute value and relative fairness. Utility is a linear combination of the proposed percentage share for the participant, scaled by 'beta_value', and the logarithm of the ratio of the proposed share to the calculated fair share, scaled by 'beta_relative_fairness'. This structure aims to improve parameter identifiability by having the two learnable parameters scale terms representing different dimensions (absolute value vs. relative fairness) via different mathematical operations (linear vs. logarithmic transformation).\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: sum_tokens = token_self + token_opp\nfair_perc_self_calc = IF(sum_tokens > 0.0, (token_self / sum_tokens) * 100.0, 50.0)\nepsilon_param = 1e-6\nfair_perc_self_calc_safe = fair_perc_self_calc + epsilon_param\nr_val = split_perc_self / fair_perc_self_calc_safe\nutility = beta_value * split_perc_self + beta_relative_fairness * log(r_val + epsilon_param)\nSummary: A utility model for responder decisions combining absolute value and relative fairness. Utility is a linear combination of the proposed percentage share for the participant, scaled by 'beta_value', and the logarithm of the ratio of the proposed share to the calculated fair share, scaled by 'beta_relative_fairness'. This structure aims to improve parameter identifiability by having the two learnable parameters scale terms representing different dimensions (absolute value vs. relative fairness) via different mathematical operations (linear vs. logarithmic transformation).\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, beta_value=1.0, beta_relative_fairness=1.0):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        split_perc_self = trial.get(\"split_perc_self\", 0)\n\n        sum_tokens = token_self + token_opp\n        \n        if sum_tokens > 0.0:\n            fair_perc_self_calc = (token_self / sum_tokens) * 100.0\n        else:\n            fair_perc_self_calc = 50.0\n            \n        epsilon_param = 1e-6\n        fair_perc_self_calc_safe = fair_perc_self_calc + epsilon_param\n        r_val = split_perc_self / fair_perc_self_calc_safe\n        utility = beta_value * split_perc_self + beta_relative_fairness * math.log(r_val + epsilon_param)\n\n        model_predictions.append(utility)\n    return model_predictions",
  "total_retries": 0,
  "fitting_warnings": [
    "Error fitting participant 1001: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 1002: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 1003: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 1004: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 1005: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 1006: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 1007: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 1008: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 1009: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 1010: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 1011: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 1012: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 1013: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 1015: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 1016: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 1017: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 1018: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 1019: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 1020: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 1021: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 1022: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 1023: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 1024: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 1025: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 1026: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 1027: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 1028: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 1029: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 1030: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 1031: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 1032: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 1033: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 1034: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 1035: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 1036: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 1037: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 1038: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 1039: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 1040: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 1041: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 1042: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 1043: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 1044: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 2001: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 2002: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 2003: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 2004: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 2005: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 2006: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 2007: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 2008: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 2009: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 2010: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 2011: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 2012: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 2013: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 2014: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 2015: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 2016: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 2017: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 2018: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 2019: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 2020: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 2021: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 2022: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 2023: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 2024: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 2025: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 2026: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 2027: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 2028: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 2029: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 2030: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 2031: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 2032: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 2033: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 2034: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 2035: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 2036: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 2037: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 2038: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 2039: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 2040: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 2041: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 2042: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 2043: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 2044: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 2045: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 2046: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 2047: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 2048: Error in parameter fitting: No valid parameter bounds found in learnable_params"
  ],
  "skipped_participants": [
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    }
  ],
  "num_skipped_participants": 91,
  "fitting_error": "No successful parameter fits obtained",
  "recovery_error": "No fitting results found",
  "previous_models": [
    "Specification: sum_tokens = token_self + token_opp\nfair_perc_self_calc = IF(sum_tokens > 0.0, (token_self / sum_tokens) * 100.0, 50.0)\nepsilon_param = 1e-6\nfair_perc_self_calc_safe = fair_perc_self_calc + epsilon_param\nr_val = split_perc_self / fair_perc_self_calc_safe\nutility = beta_value * split_perc_self + beta_relative_fairness * log(r_val + epsilon_param)\nSummary: A utility model for responder decisions combining absolute value and relative fairness. Utility is a linear combination of the proposed percentage share for the participant, scaled by 'beta_value', and the logarithm of the ratio of the proposed share to the calculated fair share, scaled by 'beta_relative_fairness'. This structure aims to improve parameter identifiability by having the two learnable parameters scale terms representing different dimensions (absolute value vs. relative fairness) via different mathematical operations (linear vs. logarithmic transformation).\nTarget Variable: accept\nPrediction Type: utility"
  ]
}