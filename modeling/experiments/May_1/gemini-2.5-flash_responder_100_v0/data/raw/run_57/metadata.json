{
  "task_description": "In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "Okay, here are the improved instructions for the next run (Run 57), building on the results of the previous runs.\n\nInstructions for Run 57 of 100:\n\nThe unwavering primary objective remains achieving parameter recovery >= 0.7 for *all* learnable parameters. This is the critical benchmark for model usability. While improved BIC (lower is better) and accuracy (higher is better) are valuable secondary goals, they must not come at the expense of robust parameter recovery. A model with excellent fit but poor parameter identifiability is not suitable for drawing meaningful conclusions about the underlying cognitive processes.\n\nThe previous run (Run 55) implemented the suggested linear value plus non-linear relative fairness model (`U = beta_value * split_perc_self + beta_relative_fairness * log(R_val + epsilon)`). Unfortunately, while `beta_value` recovery was acceptable (r = 0.703), `beta_relative_fairness` recovery was very poor (r = 0.046). Its overall performance (BIC 503.13, Acc 0.688) was also not optimal.\n\nAnalysis of Run 55's failure and previous models: The persistent challenge lies in finding a model structure where the parameter related to fairness, relative value, or penalty has an influence that is mathematically distinct enough from the parameter related to absolute value or gain (`split_perc_self`) to be reliably estimated. We have now explored linear additive models, piecewise linear models, piecewise non-linear models, and a linear + log-relative model. In most cases, the parameter scaling the fairness/relative term has failed recovery (Runs 1, 2, 3, 4, 54, 55). This suggests that simply scaling different terms, even when one is a non-linear function of the ratio or deviation, does not provide sufficient identifiability for the second parameter in the context of this dataset. The influence of the fairness/relative term appears too correlated with or overshadowed by the influence of the absolute offer value term when combined additively or piecewise.\n\nThe core challenge persists: designing a mathematical structure for utility using exactly **2 learnable parameters** such that *both* parameters have truly distinct and identifiable influences on responder decisions (`trial_role == 1`). We need to find a way for the second parameter (the fairness/relative/penalty related one) to exert its influence in a manner that is mathematically orthogonal or highly distinct from the first parameter's influence (the value/gain related one). We need to move beyond simple additive or piecewise combinations of value and fairness terms.\n\nBased on this ongoing difficulty, focus your exploration for Run 57 on model structures where the two learnable parameters contribute to utility in fundamentally different mathematical ways, potentially through multiplicative interactions or by shaping the *form* of the utility function in relation to fairness, rather than just scaling simple additive components. Avoid structures that closely resemble the failed attempts (linear combinations of value/deviation, simple piecewise models, linear value + non-linear additive fairness/ratio).\n\nConsider strategies to enhance identifiability by creating non-separable influences:\n\n*   **Introduce Multiplicative Interactions:** Design a model where one parameter scales a term involving the interaction of the proposed percentage and the fairness deviation. This makes the fairness influence dependent on the offer size, potentially creating a more unique signature in the utility function.\n    *   *Example Idea:* Let one parameter be a general intercept, and the other parameter scale a term that is the product of the offer percentage and the fairness deviation.\n        *   `sum_tokens = token_self + token_opp`\n        *   `fair_perc_self_calc = IF(sum_tokens > 0.0, (token_self / sum_tokens) * 100.0, 50.0)` (Ensure this handles `sum_tokens=0`).\n        *   `fairness_deviation = split_perc_self - fair_perc_self_calc` (Calculate the difference from fairness).\n        *   `U = intercept + beta_interaction * split_perc_self * fairness_deviation` (Combine an intercept with an interaction term).\n    *   *Structural Principle:* This structure (`U = beta1 + beta2 * X * Y`) is different from previous linear additive (`U = beta1 * X + beta2 * Y`) or simple piecewise structures. `beta1` provides a baseline utility, while `beta2` modulates utility based on a term (`split_perc_self * fairness_deviation`) that non-linearly combines offer size and fairness deviation. This non-linear interaction might make the parameters' effects more distinct.\n\n*   **Explore Other Novel Structures:** Continue to think creatively about how two parameters can control mathematically separable aspects of the utility function. Could parameters control exponents in a power-law model of fairness deviation? Could one parameter define a specific threshold or anchor point on the percentage scale, with the second parameter defining sensitivity to deviations from that anchor point? Could parameters influence the shape (e.g., slope, curvature) of a continuous, non-linear function of fairness deviation? Focus on structures where the parameters' influence is not simply a scaled addition of terms already explored.\n\n*   **Key Inputs & Calculated Variables:** Use `split_perc_self`, `token_self`, `token_opp` as data variables. Calculate `sum_tokens`, `fair_perc_self_calc`, and necessary intermediate terms like `fairness_deviation`. Ensure `fair_perc_self_calc` is handled correctly when `sum_tokens` is 0.\n\n*   **Model Formula:** Define the utility (`U`). Include calculation steps for necessary derived variables *before* the final formula for `U`. Use clear mathematical notation within the <MODEL> tags.\n\n*   **Learnable Parameters:** Your model *must* have exactly **2 learnable parameters**. Choose descriptive names suitable for Python code. Define clear, generous, finite numerical bounds (e.g., [-50.0, 50.0] or wider/narrower if appropriate for the scale of your terms). Consider the expected sign and scale, but keep bounds wide enough.\n\n*   **Calculated Variables:** Ensure all calculated variables used in the model formula (including `sum_tokens`, `fair_perc_self_calc`, intermediate terms like `fairness_deviation`, and `U`) are included in your <VARIABLES> descriptions with `source: \"calculated\"`. Include descriptions for all data variables used as inputs (`token_self`, `token_opp`, `split_perc_self`) with `source: \"data\"`. Ensure the description for `fair_perc_self_calc` explicitly mentions the `sum_tokens > 0` condition and the default value.\n\n*   **Model Specification:** Provide the formal mathematical formula between <MODEL> tags. Only the formula should be inside these tags.\n\n*   **Variable Descriptions:** Provide variable descriptions in JSON format between <VARIABLES> tags for *all* variables used in the <MODEL> formula (data, calculated, learnable). Include source, range (with inclusive flags), distribution (if applicable), and learnable status. Use `split_perc_self` as the variable name for the participant's proposed percentage share percentage.\n\n*   **Target Variable:** Specify \"accept\" as the target variable using <target_variable> tags.\n\n*   **Summary:** Provide a concise summary between <SUMMARY> tags. Describe the model's core idea and, crucially, explain *how its specific mathematical structure is designed to ensure parameter identifiability for *both* learnable parameters*, explicitly referencing the non-standard way the parameters influence utility (e.g., scaling an interaction term, defining curve shape, etc.) to make their roles distinct from previous failed attempts.\n\nAvailable Data Variables:\n- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.\n(Note: Use `split_perc_self` for the participant's proposed percentage share percentage).\n\nPlease think through this step by step, then provide your model specification and variable descriptions. Remember that robust parameter identifiability for *both* learnable parameters is the absolute priority. Your goal is to find a mathematical structure where both parameters can be uniquely and reliably estimated from the data by ensuring their influences are clearly distinguishable. Previous attempts combining linear value terms with linear or non-linear fairness/penalty terms (additively or piecewise) have struggled with the fairness parameter's recovery. Explore models with multiplicative interactions or parameters that define the shape of the utility function in fundamentally different ways to create more separable influences. Be creative in designing the mathematical relationship between inputs, parameters, and utility to achieve this separation.\n\nPlease think through this step by step, then provide your model specification and variable descriptions.\n</think>\nInstructions for Run 57 of 100:\n\nThe unwavering primary objective remains achieving parameter recovery >= 0.7 for *all* learnable parameters. This is the critical benchmark for model usability. While improved BIC (lower is better) and accuracy (higher is better) are valuable secondary goals, they must not come at the expense of robust parameter recovery. A model with excellent fit but poor parameter identifiability is not suitable for drawing meaningful conclusions about the underlying cognitive processes.\n\nThe previous run (Run 55) implemented the suggested linear value plus non-linear relative fairness model (`U = beta_value * split_perc_self + beta_relative_fairness * log(R_val + epsilon)`). Unfortunately, while `beta_value` recovery was acceptable (r = 0.703), `beta_relative_fairness` recovery was very poor (r = 0.046). Its overall performance (BIC 503.13, Acc 0.688) was also not optimal compared to some previous runs (e.g., BIC 76.69 from Run 4, though that model failed recovery badly).\n\nAnalysis of Run 55's failure and previous models: The persistent challenge lies in finding a model structure where the parameter related to fairness, relative value, or penalty has an influence that is mathematically distinct enough from the parameter related to absolute value or gain (`split_perc_self`) to be reliably estimated. We have now explored linear additive models, piecewise linear models, piecewise non-linear models, and a linear + log-relative model. In most cases, the parameter scaling the fairness/relative term has failed recovery (Runs 1, 2, 3, 4, 54, 55). This suggests that simply scaling different terms, even when one is a non-linear function of the ratio or deviation, does not provide sufficient identifiability for the second parameter in the context of this dataset. The influence of the fairness/relative term appears too correlated with or overshadowed by the influence of the absolute offer value term when combined additively or piecewise.\n\nThe core challenge persists: designing a mathematical structure for utility using exactly **2 learnable parameters** such that *both* parameters have truly distinct and identifiable influences on responder decisions (`trial_role == 1`). We need to find a way for the second parameter (the fairness/relative/penalty related one) to exert its influence in a manner that is mathematically orthogonal or highly distinct from the first parameter's influence (the value/gain related one). We need to move beyond simple additive or piecewise combinations of value and fairness terms.\n\nBased on this ongoing difficulty, focus your exploration for Run 57 on model structures where the two learnable parameters contribute to utility in fundamentally different mathematical ways, potentially through multiplicative interactions or by shaping the *form* of the utility function in relation to fairness, rather than just scaling simple additive components. Avoid structures that closely resemble the failed attempts (linear combinations of value/deviation, simple piecewise models, linear value + non-linear additive fairness/ratio).\n\nConsider strategies to enhance identifiability by creating non-separable influences:\n\n*   **Introduce Multiplicative Interactions:** Design a model where one parameter scales a term involving the interaction of the proposed percentage and the fairness deviation. This makes the fairness influence dependent on the offer size, potentially creating a more unique signature in the utility function.\n    *   *Example Idea:* Let one parameter be a general intercept, and the other parameter scale a term that is the product of the offer percentage and the fairness deviation.\n        *   `sum_tokens = token_self + token_opp`\n        *   `fair_perc_self_calc = IF(sum_tokens > 0.0, (token_self / sum_tokens) * 100.0, 50.0)` (Ensure this handles `sum_tokens=0`).\n        *   `fairness_deviation = split_perc_self - fair_perc_self_calc` (Calculate the difference from fairness).\n        *   `U = intercept + beta_interaction * split_perc_self * fairness_deviation` (Combine an intercept with an interaction term).\n    *   *Structural Principle:* This structure (`U = beta1 + beta2 * X * Y`) is different from previous linear additive (`U = beta1 * X + beta2 * Y`) or simple piecewise structures. `intercept` provides a baseline utility, while `beta_interaction` modulates utility based on a term (`split_perc_self * fairness_deviation`) that non-linearly combines offer size and fairness deviation. This non-linear interaction might make the parameters' effects more distinct and recoverable.\n\n*   **Explore Other Novel Structures:** Continue to think creatively about how two parameters can control mathematically separable aspects of the utility function. Could parameters control exponents in a power-law model of fairness deviation? Could one parameter define a specific threshold or anchor point on the percentage scale, with the second parameter defining sensitivity to deviations from that anchor point? Could parameters influence the shape (e.g., slope, curvature) of a continuous, non-linear function of fairness deviation? Focus on structures where the parameters' influence is not simply a scaled addition of terms already explored. Think about how the parameters can *jointly* determine the shape of the utility function across different offer percentages and fairness levels in a way that previous models have not.\n\n*   **Key Inputs & Calculated Variables:** Use `split_perc_self`, `token_self`, `token_opp` as data variables. Calculate `sum_tokens`, `fair_perc_self_calc`, and necessary intermediate terms like `fairness_deviation`. Ensure `fair_perc_self_calc` is handled correctly when `sum_tokens` is 0.\n\n*   **Model Formula:** Define the utility (`U`). Include calculation steps for necessary derived variables *before* the final formula for `U`. Use clear mathematical notation within the <MODEL> tags.\n\n*   **Learnable Parameters:** Your model *must* have exactly **2 learnable parameters**. Choose descriptive names suitable for Python code. Define clear, generous, finite numerical bounds (e.g., [-50.0, 50.0] or wider/narrower if appropriate for the scale of your terms). Consider the expected sign and scale, but keep bounds wide enough.\n\n*   **Calculated Variables:** Ensure all calculated variables used in the model formula (including `sum_tokens`, `fair_perc_self_calc`, intermediate terms like `fairness_deviation`, and `U`) are included in your <VARIABLES> descriptions with `source: \"calculated\"`. Include descriptions for all data variables used as inputs (`token_self`, `token_opp`, `split_perc_self`) with `source: \"data\"`. Ensure the description for `fair_perc_self_calc` explicitly mentions the `sum_tokens > 0` condition and the default value.\n\n*   **Model Specification:** Provide the formal mathematical formula between <MODEL> tags. Only the formula should be inside these tags.\n\n*   **Variable Descriptions:** Provide variable descriptions in JSON format between <VARIABLES> tags for *all* variables used in the <MODEL> formula (data, calculated, learnable). Include source, range (with inclusive flags), distribution (if applicable), and learnable status. Use `split_perc_self` as the variable name for the participant's proposed percentage share percentage.\n\n*   **Target Variable:** Specify \"accept\" as the target variable using <target_variable> tags.\n\n*   **Summary:** Provide a concise summary between <SUMMARY> tags. Describe the model's core idea and, crucially, explain *how its specific mathematical structure is designed to ensure parameter identifiability for *both* learnable parameters*, explicitly referencing the non-standard way the parameters influence utility (e.g., scaling an interaction term, defining curve shape, etc.) to make their roles distinct from previous failed attempts.\n\nAvailable Data Variables:\n- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.\n(Note: Use `split_perc_self` for the participant's proposed percentage share percentage).\n\nPlease think through this step by step, then provide your model specification and variable descriptions. Remember that robust parameter identifiability for *both* learnable parameters is the absolute priority. Your goal is to find a mathematical structure where both parameters can be uniquely and reliably estimated from the data by ensuring their influences are clearly distinguishable. Previous attempts combining linear value terms with linear or non-linear fairness/penalty terms (additively or piecewise) have struggled with the fairness parameter's recovery. Explore models with multiplicative interactions or parameters that define the shape of the utility function in fundamentally different ways to create more separable influences. Be creative in designing the mathematical relationship between inputs, parameters, and utility to achieve this separation.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: Okay, here are the improved instructions for the next run (Run 57), building on the results of the previous runs.\n\nInstructions for Run 57 of 100:\n\nThe unwavering primary objective remains achieving parameter recovery >= 0.7 for *all* learnable parameters. This is the critical benchmark for model usability. While improved BIC (lower is better) and accuracy (higher is better) are valuable secondary goals, they must not come at the expense of robust parameter recovery. A model with excellent fit but poor parameter identifiability is not suitable for drawing meaningful conclusions about the underlying cognitive processes.\n\nThe previous run (Run 55) implemented the suggested linear value plus non-linear relative fairness model (`U = beta_value * split_perc_self + beta_relative_fairness * log(R_val + epsilon)`). Unfortunately, while `beta_value` recovery was acceptable (r = 0.703), `beta_relative_fairness` recovery was very poor (r = 0.046). Its overall performance (BIC 503.13, Acc 0.688) was also not optimal.\n\nAnalysis of Run 55's failure and previous models: The persistent challenge lies in finding a model structure where the parameter related to fairness, relative value, or penalty has an influence that is mathematically distinct enough from the parameter related to absolute value or gain (`split_perc_self`) to be reliably estimated. We have now explored linear additive models, piecewise linear models, piecewise non-linear models, and a linear + log-relative model. In most cases, the parameter scaling the fairness/relative term has failed recovery (Runs 1, 2, 3, 4, 54, 55). This suggests that simply scaling different terms, even when one is a non-linear function of the ratio or deviation, does not provide sufficient identifiability for the second parameter in the context of this dataset. The influence of the fairness/relative term appears too correlated with or overshadowed by the influence of the absolute offer value term when combined additively or piecewise.\n\nThe core challenge persists: designing a mathematical structure for utility using exactly **2 learnable parameters** such that *both* parameters have truly distinct and identifiable influences on responder decisions (`trial_role == 1`). We need to find a way for the second parameter (the fairness/relative/penalty related one) to exert its influence in a manner that is mathematically orthogonal or highly distinct from the first parameter's influence (the value/gain related one). We need to move beyond simple additive or piecewise combinations of value and fairness terms.\n\nBased on this ongoing difficulty, focus your exploration for Run 57 on model structures where the two learnable parameters contribute to utility in fundamentally different mathematical ways, potentially through multiplicative interactions or by shaping the *form* of the utility function in relation to fairness, rather than just scaling simple additive components. Avoid structures that closely resemble the failed attempts (linear combinations of value/deviation, simple piecewise models, linear value + non-linear additive fairness/ratio).\n\nConsider strategies to enhance identifiability by creating non-separable influences:\n\n*   **Introduce Multiplicative Interactions:** Design a model where one parameter scales a term involving the interaction of the proposed percentage and the fairness deviation. This makes the fairness influence dependent on the offer size, potentially creating a more unique signature in the utility function.\n    *   *Example Idea:* Let one parameter be a general intercept, and the other parameter scale a term that is the product of the offer percentage and the fairness deviation.\n        *   `sum_tokens = token_self + token_opp`\n        *   `fair_perc_self_calc = IF(sum_tokens > 0.0, (token_self / sum_tokens) * 100.0, 50.0)` (Ensure this handles `sum_tokens=0`).\n        *   `fairness_deviation = split_perc_self - fair_perc_self_calc` (Calculate the difference from fairness).\n        *   `U = intercept + beta_interaction * split_perc_self * fairness_deviation` (Combine an intercept with an interaction term).\n    *   *Structural Principle:* This structure (`U = beta1 + beta2 * X * Y`) is different from previous linear additive (`U = beta1 * X + beta2 * Y`) or simple piecewise structures. `beta1` provides a baseline utility, while `beta2` modulates utility based on a term (`split_perc_self * fairness_deviation`) that non-linearly combines offer size and fairness deviation. This non-linear interaction might make the parameters' effects more distinct.\n\n*   **Explore Other Novel Structures:** Continue to think creatively about how two parameters can control mathematically separable aspects of the utility function. Could parameters control exponents in a power-law model of fairness deviation? Could one parameter define a specific threshold or anchor point on the percentage scale, with the second parameter defining sensitivity to deviations from that anchor point? Could parameters influence the shape (e.g., slope, curvature) of a continuous, non-linear function of fairness deviation? Focus on structures where the parameters' influence is not simply a scaled addition of terms already explored.\n\n*   **Key Inputs & Calculated Variables:** Use `split_perc_self`, `token_self`, `token_opp` as data variables. Calculate `sum_tokens`, `fair_perc_self_calc`, and necessary intermediate terms like `fairness_deviation`. Ensure `fair_perc_self_calc` is handled correctly when `sum_tokens` is 0.\n\n*   **Model Formula:** Define the utility (`U`). Include calculation steps for necessary derived variables *before* the final formula for `U`. Use clear mathematical notation within the <MODEL> tags.\n\n*   **Learnable Parameters:** Your model *must* have exactly **2 learnable parameters**. Choose descriptive names suitable for Python code. Define clear, generous, finite numerical bounds (e.g., [-50.0, 50.0] or wider/narrower if appropriate for the scale of your terms). Consider the expected sign and scale, but keep bounds wide enough.\n\n*   **Calculated Variables:** Ensure all calculated variables used in the model formula (including `sum_tokens`, `fair_perc_self_calc`, intermediate terms like `fairness_deviation`, and `U`) are included in your <VARIABLES> descriptions with `source: \"calculated\"`. Include descriptions for all data variables used as inputs (`token_self`, `token_opp`, `split_perc_self`) with `source: \"data\"`. Ensure the description for `fair_perc_self_calc` explicitly mentions the `sum_tokens > 0` condition and the default value.\n\n*   **Model Specification:** Provide the formal mathematical formula between <MODEL> tags. Only the formula should be inside these tags.\n\n*   **Variable Descriptions:** Provide variable descriptions in JSON format between <VARIABLES> tags for *all* variables used in the <MODEL> formula (data, calculated, learnable). Include source, range (with inclusive flags), distribution (if applicable), and learnable status. Use `split_perc_self` as the variable name for the participant's proposed percentage share percentage.\n\n*   **Target Variable:** Specify \"accept\" as the target variable using <target_variable> tags.\n\n*   **Summary:** Provide a concise summary between <SUMMARY> tags. Describe the model's core idea and, crucially, explain *how its specific mathematical structure is designed to ensure parameter identifiability for *both* learnable parameters*, explicitly referencing the non-standard way the parameters influence utility (e.g., scaling an interaction term, defining curve shape, etc.) to make their roles distinct from previous failed attempts.\n\nAvailable Data Variables:\n- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.\n(Note: Use `split_perc_self` for the participant's proposed percentage share percentage).\n\nPlease think through this step by step, then provide your model specification and variable descriptions. Remember that robust parameter identifiability for *both* learnable parameters is the absolute priority. Your goal is to find a mathematical structure where both parameters can be uniquely and reliably estimated from the data by ensuring their influences are clearly distinguishable. Previous attempts combining linear value terms with linear or non-linear fairness/penalty terms (additively or piecewise) have struggled with the fairness parameter's recovery. Explore models with multiplicative interactions or parameters that define the shape of the utility function in fundamentally different ways to create more separable influences. Be creative in designing the mathematical relationship between inputs, parameters, and utility to achieve this separation.\n\nPlease think through this step by step, then provide your model specification and variable descriptions.\n</think>\nInstructions for Run 57 of 100:\n\nThe unwavering primary objective remains achieving parameter recovery >= 0.7 for *all* learnable parameters. This is the critical benchmark for model usability. While improved BIC (lower is better) and accuracy (higher is better) are valuable secondary goals, they must not come at the expense of robust parameter recovery. A model with excellent fit but poor parameter identifiability is not suitable for drawing meaningful conclusions about the underlying cognitive processes.\n\nThe previous run (Run 55) implemented the suggested linear value plus non-linear relative fairness model (`U = beta_value * split_perc_self + beta_relative_fairness * log(R_val + epsilon)`). Unfortunately, while `beta_value` recovery was acceptable (r = 0.703), `beta_relative_fairness` recovery was very poor (r = 0.046). Its overall performance (BIC 503.13, Acc 0.688) was also not optimal compared to some previous runs (e.g., BIC 76.69 from Run 4, though that model failed recovery badly).\n\nAnalysis of Run 55's failure and previous models: The persistent challenge lies in finding a model structure where the parameter related to fairness, relative value, or penalty has an influence that is mathematically distinct enough from the parameter related to absolute value or gain (`split_perc_self`) to be reliably estimated. We have now explored linear additive models, piecewise linear models, piecewise non-linear models, and a linear + log-relative model. In most cases, the parameter scaling the fairness/relative term has failed recovery (Runs 1, 2, 3, 4, 54, 55). This suggests that simply scaling different terms, even when one is a non-linear function of the ratio or deviation, does not provide sufficient identifiability for the second parameter in the context of this dataset. The influence of the fairness/relative term appears too correlated with or overshadowed by the influence of the absolute offer value term when combined additively or piecewise.\n\nThe core challenge persists: designing a mathematical structure for utility using exactly **2 learnable parameters** such that *both* parameters have truly distinct and identifiable influences on responder decisions (`trial_role == 1`). We need to find a way for the second parameter (the fairness/relative/penalty related one) to exert its influence in a manner that is mathematically orthogonal or highly distinct from the first parameter's influence (the value/gain related one). We need to move beyond simple additive or piecewise combinations of value and fairness terms.\n\nBased on this ongoing difficulty, focus your exploration for Run 57 on model structures where the two learnable parameters contribute to utility in fundamentally different mathematical ways, potentially through multiplicative interactions or by shaping the *form* of the utility function in relation to fairness, rather than just scaling simple additive components. Avoid structures that closely resemble the failed attempts (linear combinations of value/deviation, simple piecewise models, linear value + non-linear additive fairness/ratio).\n\nConsider strategies to enhance identifiability by creating non-separable influences:\n\n*   **Introduce Multiplicative Interactions:** Design a model where one parameter scales a term involving the interaction of the proposed percentage and the fairness deviation. This makes the fairness influence dependent on the offer size, potentially creating a more unique signature in the utility function.\n    *   *Example Idea:* Let one parameter be a general intercept, and the other parameter scale a term that is the product of the offer percentage and the fairness deviation.\n        *   `sum_tokens = token_self + token_opp`\n        *   `fair_perc_self_calc = IF(sum_tokens > 0.0, (token_self / sum_tokens) * 100.0, 50.0)` (Ensure this handles `sum_tokens=0`).\n        *   `fairness_deviation = split_perc_self - fair_perc_self_calc` (Calculate the difference from fairness).\n        *   `U = intercept + beta_interaction * split_perc_self * fairness_deviation` (Combine an intercept with an interaction term).\n    *   *Structural Principle:* This structure (`U = beta1 + beta2 * X * Y`) is different from previous linear additive (`U = beta1 * X + beta2 * Y`) or simple piecewise structures. `intercept` provides a baseline utility, while `beta_interaction` modulates utility based on a term (`split_perc_self * fairness_deviation`) that non-linearly combines offer size and fairness deviation. This non-linear interaction might make the parameters' effects more distinct and recoverable.\n\n*   **Explore Other Novel Structures:** Continue to think creatively about how two parameters can control mathematically separable aspects of the utility function. Could parameters control exponents in a power-law model of fairness deviation? Could one parameter define a specific threshold or anchor point on the percentage scale, with the second parameter defining sensitivity to deviations from that anchor point? Could parameters influence the shape (e.g., slope, curvature) of a continuous, non-linear function of fairness deviation? Focus on structures where the parameters' influence is not simply a scaled addition of terms already explored. Think about how the parameters can *jointly* determine the shape of the utility function across different offer percentages and fairness levels in a way that previous models have not.\n\n*   **Key Inputs & Calculated Variables:** Use `split_perc_self`, `token_self`, `token_opp` as data variables. Calculate `sum_tokens`, `fair_perc_self_calc`, and necessary intermediate terms like `fairness_deviation`. Ensure `fair_perc_self_calc` is handled correctly when `sum_tokens` is 0.\n\n*   **Model Formula:** Define the utility (`U`). Include calculation steps for necessary derived variables *before* the final formula for `U`. Use clear mathematical notation within the <MODEL> tags.\n\n*   **Learnable Parameters:** Your model *must* have exactly **2 learnable parameters**. Choose descriptive names suitable for Python code. Define clear, generous, finite numerical bounds (e.g., [-50.0, 50.0] or wider/narrower if appropriate for the scale of your terms). Consider the expected sign and scale, but keep bounds wide enough.\n\n*   **Calculated Variables:** Ensure all calculated variables used in the model formula (including `sum_tokens`, `fair_perc_self_calc`, intermediate terms like `fairness_deviation`, and `U`) are included in your <VARIABLES> descriptions with `source: \"calculated\"`. Include descriptions for all data variables used as inputs (`token_self`, `token_opp`, `split_perc_self`) with `source: \"data\"`. Ensure the description for `fair_perc_self_calc` explicitly mentions the `sum_tokens > 0` condition and the default value.\n\n*   **Model Specification:** Provide the formal mathematical formula between <MODEL> tags. Only the formula should be inside these tags.\n\n*   **Variable Descriptions:** Provide variable descriptions in JSON format between <VARIABLES> tags for *all* variables used in the <MODEL> formula (data, calculated, learnable). Include source, range (with inclusive flags), distribution (if applicable), and learnable status. Use `split_perc_self` as the variable name for the participant's proposed percentage share percentage.\n\n*   **Target Variable:** Specify \"accept\" as the target variable using <target_variable> tags.\n\n*   **Summary:** Provide a concise summary between <SUMMARY> tags. Describe the model's core idea and, crucially, explain *how its specific mathematical structure is designed to ensure parameter identifiability for *both* learnable parameters*, explicitly referencing the non-standard way the parameters influence utility (e.g., scaling an interaction term, defining curve shape, etc.) to make their roles distinct from previous failed attempts.\n\nAvailable Data Variables:\n- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.\n(Note: Use `split_perc_self` for the participant's proposed percentage share percentage).\n\nPlease think through this step by step, then provide your model specification and variable descriptions. Remember that robust parameter identifiability for *both* learnable parameters is the absolute priority. Your goal is to find a mathematical structure where both parameters can be uniquely and reliably estimated from the data by ensuring their influences are clearly distinguishable. Previous attempts combining linear value terms with linear or non-linear fairness/penalty terms (additively or piecewise) have struggled with the fairness parameter's recovery. Explore models with multiplicative interactions or parameters that define the shape of the utility function in fundamentally different ways to create more separable influences. Be creative in designing the mathematical relationship between inputs, parameters, and utility to achieve this separation.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<MODEL>\nsum_tokens = token_self + token_opp\nfair_perc_self_calc = If(sum_tokens > 0.0, (token_self / sum_tokens) * 100.0, 50.0)\nfairness_deviation = split_perc_self - fair_perc_self_calc\nU = beta_zero + beta_interaction * split_perc_self * fairness_deviation\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The proposed share for the participant (in %) when the participant is the responder\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"sum_tokens\": {\n      \"description\": \"Total number of tokens found by participant and opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fair_perc_self_calc\": {\n      \"description\": \"Participant's 'fair' percentage based on tokens found relative to sum_tokens, 50% if sum_tokens is 0\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fairness_deviation\": {\n      \"description\": \"Difference between the proposed percentage and the calculated fair percentage for the participant\",\n      \"range\": {\n        \"min\": -100,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_zero\": {\n      \"description\": \"Intercept or baseline utility parameter\",\n      \"range\": {\n        \"min\": -50.0,\n        \"max\": 50.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_interaction\": {\n      \"description\": \"Sensitivity parameter scaling the interaction between offered percentage and fairness deviation\",\n      \"range\": {\n        \"min\": -10.0,\n        \"max\": 10.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Calculated utility of accepting the offer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA utility model predicting responder acceptance based on the proposed percentage for the participant relative to a calculated fair share. Utility is calculated as a baseline (beta_zero) plus an interaction term. The interaction term scales the product of the proposed percentage (split_perc_self) and the deviation from fairness (fairness_deviation) by a sensitivity parameter (beta_interaction). This non-linear multiplicative structure between the offered value, fairness deviation, and the scaling parameter aims to create mathematically distinct influences for the two learnable parameters (beta_zero and beta_interaction), enhancing their identifiability compared to additive models. The fair share calculation is based on token contributions, defaulting to 50% if total tokens are zero.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['beta_zero', 'beta_interaction']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                sum_tokens = token_self + token_opp\nfair_perc_self_calc = If(sum_tokens > 0.0, (token_self / sum_tokens) * 100.0, 50.0)\nfairness_deviation = split_perc_self - fair_perc_self_calc\nU = beta_zero + beta_interaction * split_perc_self * fairness_deviation\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The proposed share for the participant (in %) when the participant is the responder\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"sum_tokens\": {\n      \"description\": \"Total number of tokens found by participant and opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fair_perc_self_calc\": {\n      \"description\": \"Participant's 'fair' percentage based on tokens found relative to sum_tokens, 50% if sum_tokens is 0\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fairness_deviation\": {\n      \"description\": \"Difference between the proposed percentage and the calculated fair percentage for the participant\",\n      \"range\": {\n        \"min\": -100,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_zero\": {\n      \"description\": \"Intercept or baseline utility parameter\",\n      \"range\": {\n        \"min\": -50.0,\n        \"max\": 50.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_interaction\": {\n      \"description\": \"Sensitivity parameter scaling the interaction between offered percentage and fairness deviation\",\n      \"range\": {\n        \"min\": -10.0,\n        \"max\": 10.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Calculated utility of accepting the offer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, beta_zero=0.0, beta_interaction=0.0):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        split_perc_self = trial.get(\"splitperc_self\", 50)  # Use splitperc_self from the provided dataset\n        \n        sum_tokens = token_self + token_opp\n        \n        if sum_tokens > 0.0:\n            fair_perc_self_calc = (token_self / sum_tokens) * 100.0\n        else:\n            fair_perc_self_calc = 50.0\n        \n        fairness_deviation = split_perc_self - fair_perc_self_calc\n        \n        U = beta_zero + beta_interaction * split_perc_self * fairness_deviation\n        \n        model_predictions.append(U)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n",
      "timestamp": 1746102352.350699
    }
  ],
  "learnable_parameters": {
    "beta_zero": {
      "description": "Intercept or baseline utility parameter",
      "range": {
        "min": -50.0,
        "max": 50.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta_interaction": {
      "description": "Sensitivity parameter scaling the interaction between offered percentage and fairness deviation",
      "range": {
        "min": -10.0,
        "max": 10.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "sum_tokens = token_self + token_opp\nfair_perc_self_calc = If(sum_tokens > 0.0, (token_self / sum_tokens) * 100.0, 50.0)\nfairness_deviation = split_perc_self - fair_perc_self_calc\nU = beta_zero + beta_interaction * split_perc_self * fairness_deviation",
  "variable_descriptions": {
    "token_self": {
      "description": "Number of tokens found by the participant",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "split_perc_self": {
      "description": "The proposed share for the participant (in %) when the participant is the responder",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "sum_tokens": {
      "description": "Total number of tokens found by participant and opponent",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "fair_perc_self_calc": {
      "description": "Participant's 'fair' percentage based on tokens found relative to sum_tokens, 50% if sum_tokens is 0",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "fairness_deviation": {
      "description": "Difference between the proposed percentage and the calculated fair percentage for the participant",
      "range": {
        "min": -100,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "beta_zero": {
      "description": "Intercept or baseline utility parameter",
      "range": {
        "min": -50.0,
        "max": 50.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta_interaction": {
      "description": "Sensitivity parameter scaling the interaction between offered percentage and fairness deviation",
      "range": {
        "min": -10.0,
        "max": 10.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "U": {
      "description": "Calculated utility of accepting the offer",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "A utility model predicting responder acceptance based on the proposed percentage for the participant relative to a calculated fair share. Utility is calculated as a baseline (beta_zero) plus an interaction term. The interaction term scales the product of the proposed percentage (split_perc_self) and the deviation from fairness (fairness_deviation) by a sensitivity parameter (beta_interaction). This non-linear multiplicative structure between the offered value, fairness deviation, and the scaling parameter aims to create mathematically distinct influences for the two learnable parameters (beta_zero and beta_interaction), enhancing their identifiability compared to additive models. The fair share calculation is based on token contributions, defaulting to 50% if total tokens are zero.",
  "target_variable": "accept",
  "full_reasoning": "<MODEL>\nsum_tokens = token_self + token_opp\nfair_perc_self_calc = If(sum_tokens > 0.0, (token_self / sum_tokens) * 100.0, 50.0)\nfairness_deviation = split_perc_self - fair_perc_self_calc\nU = beta_zero + beta_interaction * split_perc_self * fairness_deviation\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The proposed share for the participant (in %) when the participant is the responder\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"sum_tokens\": {\n      \"description\": \"Total number of tokens found by participant and opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fair_perc_self_calc\": {\n      \"description\": \"Participant's 'fair' percentage based on tokens found relative to sum_tokens, 50% if sum_tokens is 0\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fairness_deviation\": {\n      \"description\": \"Difference between the proposed percentage and the calculated fair percentage for the participant\",\n      \"range\": {\n        \"min\": -100,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_zero\": {\n      \"description\": \"Intercept or baseline utility parameter\",\n      \"range\": {\n        \"min\": -50.0,\n        \"max\": 50.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_interaction\": {\n      \"description\": \"Sensitivity parameter scaling the interaction between offered percentage and fairness deviation\",\n      \"range\": {\n        \"min\": -10.0,\n        \"max\": 10.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Calculated utility of accepting the offer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA utility model predicting responder acceptance based on the proposed percentage for the participant relative to a calculated fair share. Utility is calculated as a baseline (beta_zero) plus an interaction term. The interaction term scales the product of the proposed percentage (split_perc_self) and the deviation from fairness (fairness_deviation) by a sensitivity parameter (beta_interaction). This non-linear multiplicative structure between the offered value, fairness deviation, and the scaling parameter aims to create mathematically distinct influences for the two learnable parameters (beta_zero and beta_interaction), enhancing their identifiability compared to additive models. The fair share calculation is based on token contributions, defaulting to 50% if total tokens are zero.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: sum_tokens = token_self + token_opp\nfair_perc_self_calc = If(sum_tokens > 0.0, (token_self / sum_tokens) * 100.0, 50.0)\nfairness_deviation = split_perc_self - fair_perc_self_calc\nU = beta_zero + beta_interaction * split_perc_self * fairness_deviation\nSummary: A utility model predicting responder acceptance based on the proposed percentage for the participant relative to a calculated fair share. Utility is calculated as a baseline (beta_zero) plus an interaction term. The interaction term scales the product of the proposed percentage (split_perc_self) and the deviation from fairness (fairness_deviation) by a sensitivity parameter (beta_interaction). This non-linear multiplicative structure between the offered value, fairness deviation, and the scaling parameter aims to create mathematically distinct influences for the two learnable parameters (beta_zero and beta_interaction), enhancing their identifiability compared to additive models. The fair share calculation is based on token contributions, defaulting to 50% if total tokens are zero.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, beta_zero=0.0, beta_interaction=0.0):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        split_perc_self = trial.get(\"splitperc_self\", 50)  # Use splitperc_self from the provided dataset\n        \n        sum_tokens = token_self + token_opp\n        \n        if sum_tokens > 0.0:\n            fair_perc_self_calc = (token_self / sum_tokens) * 100.0\n        else:\n            fair_perc_self_calc = 50.0\n        \n        fairness_deviation = split_perc_self - fair_perc_self_calc\n        \n        U = beta_zero + beta_interaction * split_perc_self * fairness_deviation\n        \n        model_predictions.append(U)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.6971916971916972,
  "group_accuracies": {
    "Control": 0.7034883720930233,
    "Cocaine": 0.6915509259259259
  },
  "group_parameter_averages": {
    "Control": {
      "beta_zero": 23.482076902445744,
      "beta_interaction": 0.02027906503587392
    },
    "Cocaine": {
      "beta_zero": 22.6727577489247,
      "beta_interaction": 0.3488576819520459
    }
  },
  "fitting_results": [
    {
      "beta_zero": -3.7861010423555305e-08,
      "beta_interaction": 9.229442011082167,
      "success": true,
      "log_likelihood": -47.43799621740079,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_zero": 1.2597073899922635,
      "beta_interaction": 0.0024870416461314966,
      "success": true,
      "log_likelihood": -21.741084932200263,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_zero": 17.230779772044187,
      "beta_interaction": 8.924354747518699,
      "success": true,
      "log_likelihood": -345.38776401274214,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_zero": 30.469053009239833,
      "beta_interaction": 10.0,
      "success": true,
      "log_likelihood": -253.28436022684522,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_zero": 40.6115302863175,
      "beta_interaction": 3.340808199881714,
      "success": true,
      "log_likelihood": -276.3102111568856,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_zero": 50.0,
      "beta_interaction": -0.6765035035900198,
      "success": true,
      "log_likelihood": -345.38776394700704,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_zero": 50.0,
      "beta_interaction": -7.769346664249541,
      "success": true,
      "log_likelihood": -46.05170185648091,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_zero": 49.404406741083676,
      "beta_interaction": -7.172236939225729,
      "success": true,
      "log_likelihood": -322.3619130169666,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_zero": 36.38474692354146,
      "beta_interaction": -2.8925401623357194,
      "success": true,
      "log_likelihood": -46.05170185648091,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_zero": -41.74698589259403,
      "beta_interaction": 2.1704372733206068,
      "success": true,
      "log_likelihood": -276.3102111420759,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_zero": 41.18339190980421,
      "beta_interaction": 10.0,
      "success": true,
      "log_likelihood": -276.3102111568856,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_zero": 33.863431801854304,
      "beta_interaction": 0.5742768797823885,
      "success": true,
      "log_likelihood": -92.10338373286376,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_zero": 11.689069241866175,
      "beta_interaction": 3.1915850475477257,
      "success": true,
      "log_likelihood": -253.28437699672318,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_zero": -45.0803184248593,
      "beta_interaction": -6.544049930704401,
      "success": true,
      "log_likelihood": -92.10340371603348,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_zero": 50.0,
      "beta_interaction": -1.7590933576639074,
      "success": true,
      "log_likelihood": -46.0517018564809,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_zero": -29.677984176518738,
      "beta_interaction": -0.5837513066664961,
      "success": true,
      "log_likelihood": -92.1008228533337,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_zero": 50.0,
      "beta_interaction": -6.620536825598231,
      "success": true,
      "log_likelihood": -46.05170185648093,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_zero": 32.54517691679963,
      "beta_interaction": -0.3328495295970164,
      "success": true,
      "log_likelihood": -161.1809565066833,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_zero": 50.0,
      "beta_interaction": -3.4859001087829906,
      "success": true,
      "log_likelihood": -138.1551055766428,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_zero": -37.087418207843506,
      "beta_interaction": -6.980159369454368,
      "success": true,
      "log_likelihood": -92.10340215280667,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_zero": 48.94283287646739,
      "beta_interaction": 5.186186081458173,
      "success": true,
      "log_likelihood": -368.41361487704745,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_zero": 50.0,
      "beta_interaction": -5.097982290317469,
      "success": true,
      "log_likelihood": -161.1809565066832,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_zero": -30.888768640648035,
      "beta_interaction": 8.15305978055883,
      "success": true,
      "log_likelihood": -253.28359087555162,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_zero": 0.8881843614767649,
      "beta_interaction": 0.0015356798392770566,
      "success": true,
      "log_likelihood": -23.44426434020228,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_zero": 33.02169194871185,
      "beta_interaction": 2.4602231522054314,
      "success": true,
      "log_likelihood": -322.3619130169666,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_zero": 27.423363191729763,
      "beta_interaction": 1.464084907014234,
      "success": true,
      "log_likelihood": -391.4394658070904,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_zero": -37.73759691620244,
      "beta_interaction": 8.093528208773726,
      "success": true,
      "log_likelihood": -414.4653159209224,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_zero": 50.0,
      "beta_interaction": 1.9800983698962007,
      "success": true,
      "log_likelihood": -138.15510557664285,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_zero": 50.0,
      "beta_interaction": -2.3441521626847166,
      "success": true,
      "log_likelihood": -138.15510557664282,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_zero": 9.132296542817343,
      "beta_interaction": -2.7813175373374683,
      "success": true,
      "log_likelihood": -230.25872551912508,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_zero": 50.0,
      "beta_interaction": -7.628060414500788,
      "success": true,
      "log_likelihood": -46.05170185648091,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_zero": 20.02917456314053,
      "beta_interaction": -1.2035153923083612,
      "success": true,
      "log_likelihood": -756.8076590854639,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.08333333333333333,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_zero": 3.5826189910290983e-06,
      "beta_interaction": 2.530650659686284,
      "success": true,
      "log_likelihood": -277.69650551780876,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_zero": 45.16690698894304,
      "beta_interaction": 3.3294539299648562,
      "success": true,
      "log_likelihood": -230.25850929680456,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_zero": 28.872866110049628,
      "beta_interaction": -1.5707925531154299,
      "success": true,
      "log_likelihood": -46.051701856481486,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_zero": 37.77132684014928,
      "beta_interaction": -9.46858085060696,
      "success": true,
      "log_likelihood": -345.38776394700704,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_zero": 37.33342572374741,
      "beta_interaction": -3.618864752066271,
      "success": true,
      "log_likelihood": -299.3360620869261,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_zero": 11.622530359106175,
      "beta_interaction": 8.584463381078798,
      "success": true,
      "log_likelihood": -322.3619309406493,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_zero": 9.434453491320896,
      "beta_interaction": -2.2702422614279723,
      "success": true,
      "log_likelihood": -322.36207285552365,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_zero": 50.0,
      "beta_interaction": -3.58807670804733,
      "success": true,
      "log_likelihood": -115.1292546466023,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_zero": 42.17007041486228,
      "beta_interaction": -8.894155823024114,
      "success": true,
      "log_likelihood": -368.4136148770475,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_zero": 36.202902619135415,
      "beta_interaction": 1.0004465370045068,
      "success": true,
      "log_likelihood": -92.10340371656186,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_zero": 49.29505549487406,
      "beta_interaction": 3.937586351588129,
      "success": true,
      "log_likelihood": -713.8013788276545,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.1388888888888889,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_zero": 50.0,
      "beta_interaction": 4.964430059983017,
      "success": true,
      "log_likelihood": -368.4136148770475,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_zero": 0.14856989581408447,
      "beta_interaction": 0.0002113061931533904,
      "success": true,
      "log_likelihood": -24.37640757404964,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_zero": 50.0,
      "beta_interaction": -4.64102613568198,
      "success": true,
      "log_likelihood": -276.31021115688566,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_zero": 33.094430554113245,
      "beta_interaction": -4.721655309953734,
      "success": true,
      "log_likelihood": -437.49116766716895,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_zero": 50.0,
      "beta_interaction": 5.107585473712559,
      "success": true,
      "log_likelihood": -230.25850929680468,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_zero": 32.9010270786728,
      "beta_interaction": 4.044645954394078,
      "success": true,
      "log_likelihood": -253.2843602268452,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_zero": 6.50740203781834,
      "beta_interaction": -9.568453198995837,
      "success": true,
      "log_likelihood": -391.44244828571635,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_zero": 27.44519233281244,
      "beta_interaction": -6.431355016755694,
      "success": true,
      "log_likelihood": -299.33606208692856,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_zero": -36.09347911971483,
      "beta_interaction": 3.5583365515704575,
      "success": true,
      "log_likelihood": -115.12925253408277,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_zero": -1.892959929869e-05,
      "beta_interaction": 4.931156049145615,
      "success": true,
      "log_likelihood": -369.799909238057,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_zero": 26.963151485402644,
      "beta_interaction": -5.759732480494395,
      "success": true,
      "log_likelihood": -345.38776394701097,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_zero": 41.34679808373107,
      "beta_interaction": 7.746753826969659,
      "success": true,
      "log_likelihood": -230.25850929680456,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_zero": 26.148305536352154,
      "beta_interaction": 3.2145824609052003,
      "success": true,
      "log_likelihood": -184.2068074367325,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_zero": 30.35664735934482,
      "beta_interaction": 2.8537707824728074,
      "success": true,
      "log_likelihood": -138.1551055766429,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_zero": 40.75641412734721,
      "beta_interaction": -3.007059194962496,
      "success": true,
      "log_likelihood": -138.15510557664285,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_zero": 7.518013409600548e-07,
      "beta_interaction": 8.209335105598903,
      "success": true,
      "log_likelihood": -70.46384714744143,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_zero": 38.28835470982598,
      "beta_interaction": -3.001206631688362,
      "success": true,
      "log_likelihood": -207.2326583667642,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_zero": 1.0862765735900501,
      "beta_interaction": 0.001226190086736523,
      "success": true,
      "log_likelihood": -23.150644324693108,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_zero": 33.34627107045455,
      "beta_interaction": -7.933261954976151,
      "success": true,
      "log_likelihood": -460.51701859720936,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_zero": 8.842613721493803e-07,
      "beta_interaction": 4.571269749390925,
      "success": true,
      "log_likelihood": -47.437996217401,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_zero": -3.72815548196405e-07,
      "beta_interaction": 9.277648850388605,
      "success": true,
      "log_likelihood": -300.722356447846,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_zero": 32.381117045718014,
      "beta_interaction": -7.260582402794833,
      "success": true,
      "log_likelihood": -690.775527897614,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.16666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_zero": 9.109092104934097,
      "beta_interaction": 4.05526888894004,
      "success": true,
      "log_likelihood": -368.41383617506943,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_zero": 40.34714340881122,
      "beta_interaction": -1.404658630162439,
      "success": true,
      "log_likelihood": -115.12925464660223,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_zero": 45.93888155859946,
      "beta_interaction": -9.693242947329372,
      "success": true,
      "log_likelihood": -161.18095650668317,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_zero": 38.768021740693825,
      "beta_interaction": 8.210997990089965,
      "success": true,
      "log_likelihood": -368.41361487704745,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_zero": 50.0,
      "beta_interaction": -2.8873492787316524,
      "success": true,
      "log_likelihood": -115.12925464660223,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_zero": 12.683285865982274,
      "beta_interaction": 0.8971345342092398,
      "success": true,
      "log_likelihood": -6.201492470410103e-06,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_zero": 1.8067764506594182e-06,
      "beta_interaction": 6.047939152786778,
      "success": true,
      "log_likelihood": -93.48969807748257,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_zero": 48.72303437563638,
      "beta_interaction": 6.23349934305816,
      "success": true,
      "log_likelihood": -345.38776394700704,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_zero": 25.63368151340427,
      "beta_interaction": -7.8836816889547245,
      "success": true,
      "log_likelihood": -230.25850929681948,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_zero": 43.738516116034276,
      "beta_interaction": 5.081147207519379,
      "success": true,
      "log_likelihood": -368.41361487704745,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_zero": 43.32002581541582,
      "beta_interaction": -5.2735928718665175,
      "success": true,
      "log_likelihood": -299.3360620869262,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_zero": -43.58535595225544,
      "beta_interaction": -0.8023790494910248,
      "success": true,
      "log_likelihood": -138.15510557428692,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_zero": -39.65260739070023,
      "beta_interaction": 9.534535633956622,
      "success": true,
      "log_likelihood": -92.10340365643177,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_zero": 50.0,
      "beta_interaction": 1.329611648429081,
      "success": true,
      "log_likelihood": -414.4653167371284,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_zero": 49.36337012990276,
      "beta_interaction": 5.137103362241033,
      "success": true,
      "log_likelihood": -69.07755278652135,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_zero": 50.0,
      "beta_interaction": 1.593541997860413,
      "success": true,
      "log_likelihood": -345.38776394700704,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_zero": 50.0,
      "beta_interaction": -7.137983171695728,
      "success": true,
      "log_likelihood": -115.12925464660223,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_zero": -1.7051244071032663,
      "beta_interaction": 0.0008611109276436807,
      "success": true,
      "log_likelihood": -12.310497488355496,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_zero": 9.271731057253495,
      "beta_interaction": 0.7020059354675539,
      "success": true,
      "log_likelihood": -322.3621010992716,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_zero": 21.790390205652628,
      "beta_interaction": -2.2490160093465477,
      "success": true,
      "log_likelihood": -368.4136148777355,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_zero": -3.016563449029038e-07,
      "beta_interaction": 3.119856982967743,
      "success": true,
      "log_likelihood": -24.41214528736038,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_zero": 45.610063907491465,
      "beta_interaction": -3.6797325947705106,
      "success": true,
      "log_likelihood": -299.3360620869261,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_zero": 21.767726470939394,
      "beta_interaction": 3.321640477639667,
      "success": true,
      "log_likelihood": -182.69855734712422,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_zero": 46.878280846870354,
      "beta_interaction": -4.21311928261294,
      "success": true,
      "log_likelihood": -92.10340371656179,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_zero": 14.172091167211192,
      "beta_interaction": 8.27601455996048,
      "success": true,
      "log_likelihood": -299.3360634870576,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_zero": -28.556339196438966,
      "beta_interaction": -7.727854601902373,
      "success": true,
      "log_likelihood": -345.3798515131162,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "beta_zero": {
        "r": 0.6352500311078967,
        "p": 1.2573734135794066e-12
      },
      "beta_interaction": {
        "r": 0.5842851912019807,
        "p": 1.7514289451619628e-10
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 465.07512450690257,
  "bic_Control": 455.850265425652,
  "bic_Cocaine": 473.33906076718955,
  "bic_results": {
    "average_bic": 465.07512450690257,
    "individual_bics": [
      102.04303031171379,
      50.64920774131274,
      697.9425659023965,
      513.7357583306027,
      559.7874601906834,
      697.9425657709263,
      99.27044158987404,
      651.8908639108454,
      99.27044158987404,
      559.787460161064,
      559.7874601906834,
      191.37380534263974,
      513.7357918703586,
      191.37384530897918,
      99.27044158987403,
      191.3686835835796,
      99.27044158987408,
      329.5289508902788,
      283.4772490301978,
      191.37384218252555,
      743.9942676310071,
      329.5289508902786,
      513.7342196280155,
      54.05556655731678,
      651.8908639108454,
      790.045969491093,
      836.0976697187571,
      283.4772490301979,
      283.47724903019787,
      467.6844889151624,
      99.27044158987404,
      1520.78235604784,
      562.5600489125297,
      467.68405647052134,
      99.27044158987519,
      697.9425657709263,
      605.8391620507645,
      651.8908997582108,
      651.8911835879595,
      237.42554717011683,
      743.9942676310072,
      191.37384531003593,
      1434.7697955322212,
      743.9942676310072,
      55.9198530250115,
      559.7874601906835,
      882.1493732112501,
      467.68405647052157,
      513.7357583306026,
      790.0519344483449,
      605.8391620507693,
      237.42554294507775,
      746.7668563530262,
      697.9425657709342,
      467.68405647052134,
      375.5806527503772,
      283.47724903019804,
      283.4772490301979,
      148.09473217179507,
      421.63235461044064,
      53.46832652629843,
      928.2010750713309,
      102.04303031171422,
      608.6117507726042,
      1388.7180936721402,
      743.9947102270511,
      237.4255471701167,
      329.52895089027857,
      743.9942676310071,
      237.4255471701167,
      7.16705027989716,
      194.14643403187736,
      697.9425657709263,
      467.6840564705512,
      743.9942676310071,
      605.8391620507646,
      283.47724902548606,
      191.37384518977575,
      836.097671351169,
      145.32214344995492,
      697.9425657709263,
      237.4255471701167,
      31.788032853623214,
      651.8912400754555,
      743.9942676323832,
      55.99132845163298,
      605.8391620507645,
      372.56415257116066,
      191.3738453100358,
      605.8391648510274,
      697.9267409031446
    ],
    "group_enabled": true,
    "group_bics": {
      "Control": [
        102.04303031171379,
        50.64920774131274,
        697.9425659023965,
        513.7357583306027,
        559.7874601906834,
        697.9425657709263,
        99.27044158987404,
        651.8908639108454,
        99.27044158987404,
        559.787460161064,
        559.7874601906834,
        191.37380534263974,
        513.7357918703586,
        191.37384530897918,
        99.27044158987403,
        191.3686835835796,
        99.27044158987408,
        329.5289508902788,
        283.4772490301978,
        191.37384218252555,
        743.9942676310071,
        329.5289508902786,
        513.7342196280155,
        54.05556655731678,
        651.8908639108454,
        790.045969491093,
        836.0976697187571,
        283.4772490301979,
        283.47724903019787,
        467.6844889151624,
        99.27044158987404,
        1520.78235604784,
        562.5600489125297,
        467.68405647052134,
        99.27044158987519,
        697.9425657709263,
        605.8391620507645,
        651.8908997582108,
        651.8911835879595,
        237.42554717011683,
        743.9942676310072,
        191.37384531003593,
        1434.7697955322212
      ],
      "Cocaine": [
        743.9942676310072,
        55.9198530250115,
        559.7874601906835,
        882.1493732112501,
        467.68405647052157,
        513.7357583306026,
        790.0519344483449,
        605.8391620507693,
        237.42554294507775,
        746.7668563530262,
        697.9425657709342,
        467.68405647052134,
        375.5806527503772,
        283.47724903019804,
        283.4772490301979,
        148.09473217179507,
        421.63235461044064,
        53.46832652629843,
        928.2010750713309,
        102.04303031171422,
        608.6117507726042,
        1388.7180936721402,
        743.9947102270511,
        237.4255471701167,
        329.52895089027857,
        743.9942676310071,
        237.4255471701167,
        7.16705027989716,
        194.14643403187736,
        697.9425657709263,
        467.6840564705512,
        743.9942676310071,
        605.8391620507646,
        283.47724902548606,
        191.37384518977575,
        836.097671351169,
        145.32214344995492,
        697.9425657709263,
        237.4255471701167,
        31.788032853623214,
        651.8912400754555,
        743.9942676323832,
        55.99132845163298,
        605.8391620507645,
        372.56415257116066,
        191.3738453100358,
        605.8391648510274,
        697.9267409031446
      ]
    },
    "num_parameters": 2,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- beta_zero: r = 0.635\n- beta_interaction: r = 0.584",
  "previous_models": [
    "Specification: sum_tokens = token_self + token_opp\nfair_perc_self_calc = If(sum_tokens > 0.0, (token_self / sum_tokens) * 100.0, 50.0)\nfairness_deviation = split_perc_self - fair_perc_self_calc\nU = beta_zero + beta_interaction * split_perc_self * fairness_deviation\nSummary: A utility model predicting responder acceptance based on the proposed percentage for the participant relative to a calculated fair share. Utility is calculated as a baseline (beta_zero) plus an interaction term. The interaction term scales the product of the proposed percentage (split_perc_self) and the deviation from fairness (fairness_deviation) by a sensitivity parameter (beta_interaction). This non-linear multiplicative structure between the offered value, fairness deviation, and the scaling parameter aims to create mathematically distinct influences for the two learnable parameters (beta_zero and beta_interaction), enhancing their identifiability compared to additive models. The fair share calculation is based on token contributions, defaulting to 50% if total tokens are zero.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 465.07512450690257\nOverall Accuracy: 0.6972\nGroup Accuracies:\n- Control: 0.7035\n- Cocaine: 0.6916\n\nParameter Recovery:\n- beta_zero: r = 0.635\n- beta_interaction: r = 0.584"
  ]
}