{
  "task_description": "In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "Okay, here are the improved instructions for the next run (Run 58), building on the results of the previous runs.\n\nInstructions for Run 58 of 100:\n\nThe unwavering primary objective remains achieving parameter recovery >= 0.7 for *all* learnable parameters. This is the critical benchmark for model usability. While improved BIC (lower is better) and accuracy (higher is better) are valuable secondary goals, they must not come at the expense of robust parameter recovery. A model with excellent fit but poor parameter identifiability is not suitable for drawing meaningful conclusions about the underlying cognitive processes.\n\nThe previous run (Run 57) explored a multiplicative interaction model (`U = beta_zero + beta_interaction * split_perc_self * fairness_deviation`), based on the analysis that simple additive or piecewise scaling of value and fairness terms was failing parameter recovery. Unfortunately, Run 57 also failed the primary objective, with both `beta_zero` (r = 0.635) and `beta_interaction` (r = 0.584) falling below the 0.7 threshold. Its overall performance (BIC 465.08, Acc 0.697) was moderate.\n\nAnalysis of Run 57's failure and previous models: The core identifiability challenge persists. It seems that simply combining terms additively, piecewise, or even through a linear multiplicative interaction has not created sufficiently distinct influences for the two learnable parameters to be reliably estimated from this dataset. The influence of fairness/relative value is still somehow confounded with or overshadowed by the influence of the absolute proposed value, regardless of the exact mathematical form (linear, log, quadratic, interaction) or combination method (additive, piecewise) used previously.\n\nWe need to find a mathematical structure for utility, still using exactly **2 learnable parameters**, where their influence on responder decisions (`trial_role == 1`) is fundamentally more separable. This requires moving beyond models where parameters primarily serve as simple scaling factors for additive components.\n\nBased on the persistent difficulty with previously explored structures (additive value + fairness, simple piecewise, linear + log, linear + interaction), focus your exploration for Run 58 on a model structure that combines features in a novel, potentially asymmetric, or piecewise manner designed specifically to isolate the influence of different components.\n\nConsider the following strategy to enhance identifiability by making the parameters' influences active in distinct ways:\n\n*   **Asymmetric Piecewise Additive Model:** Design a model where one parameter scales the *absolute proposed percentage share*, which influences utility on *all* trials. The second parameter, however, *only* influences utility on trials where the offer is *unfair* (below the calculated fair share), and it scales the *magnitude of that unfair deviation*.\n    *   *Example Idea:* Let one parameter (`beta_value`) scale `split_perc_self`. Let the second parameter (`beta_unfairness_effect`) scale the magnitude of the *negative* deviation from fairness (`fair_perc_self_calc - split_perc_self`), but only when this deviation is positive (i.e., when `split_perc_self` is less than `fair_perc_self_calc`).\n        *   `sum_tokens = token_self + token_opp`\n        *   `fair_perc_self_calc = IF(sum_tokens > 0.0, (token_self / sum_tokens) * 100.0, 50.0)` (Ensure this handles `sum_tokens=0`).\n        *   `unfair_deviation_magnitude = max(0, fair_perc_self_calc - split_perc_self)` (This term is 0 if the offer is fair or better, and positive if unfair, representing the degree of unfairness).\n        *   `U = beta_value * split_perc_self + beta_unfairness_effect * unfair_deviation_magnitude` (Combine linear value with a term representing the magnitude of unfairness, expecting `beta_unfairness_effect` to be negative to apply a penalty).\n    *   *Structural Principle:* This structure attempts identifiability by having `beta_value` exert influence across the entire range of `split_perc_self`, while `beta_unfairness_effect` *only* exerts influence in the specific regime of unfair offers, scaling a term (`unfair_deviation_magnitude`) that specifically captures the *size* of the unfairness, not the proposed value itself. This asymmetry and specific targeting of unfairness magnitude by one parameter, while the other scales overall value, is intended to create more separable effects than previous models.\n\n*   **Key Inputs & Calculated Variables:** Use `split_perc_self`, `token_self`, `token_opp` as data variables. Calculate `sum_tokens`, `fair_perc_self_calc`, and the specific intermediate term `unfair_deviation_magnitude` as defined above. Ensure `fair_perc_self_calc` is handled correctly when `sum_tokens` is 0.\n\n*   **Model Formula:** Define the utility (`U`). Include calculation steps for necessary derived variables *before* the final formula for `U`. Use clear mathematical notation within the <MODEL> tags.\n\n*   **Learnable Parameters:** Your model *must* have exactly **2 learnable parameters**. For the suggested model, use names like `beta_value` and `beta_unfairness_effect`. Choose descriptive names suitable for Python code. Define clear, generous, finite numerical bounds (e.g., [-10.0, 10.0] or wider/narrower if appropriate for the scale of your terms, which are percentages). Consider the expected sign (e.g., `beta_unfairness_effect` should likely be negative), but keep bounds wide enough.\n\n*   **Calculated Variables:** Ensure all calculated variables used in the model formula (including `sum_tokens`, `fair_perc_self_calc`, `unfair_deviation_magnitude`, and `U`) are included in your <VARIABLES> descriptions with `source: \"calculated\"`. Include descriptions for all data variables used as inputs (`token_self`, `token_opp`, `split_perc_self`) with `source: \"data\"`. Ensure the description for `fair_perc_self_calc` explicitly mentions the `sum_tokens > 0` condition and the default value. The description for `unfair_deviation_magnitude` should clarify what it represents and when it's non-zero.\n\n*   **Model Specification:** Provide the formal mathematical formula between <MODEL> tags. Only the formula should be inside these tags.\n\n*   **Variable Descriptions:** Provide variable descriptions in JSON format between <VARIABLES> tags for *all* variables used in the <MODEL> formula (data, calculated, learnable). Include source, range (with inclusive flags), distribution (if applicable), and learnable status. Use `split_perc_self` as the variable name for the participant's proposed percentage share percentage.\n\n*   **Target Variable:** Specify \"accept\" as the target variable using <target_variable> tags.\n\n*   **Summary:** Provide a concise summary between <SUMMARY> tags. Describe the model's core idea and, crucially, explain *how its specific mathematical structure (e.g., the asymmetric piecewise influence, one parameter scaling overall value, the other scaling specific unfairness magnitude only in the loss domain) is designed to ensure parameter identifiability for *both* learnable parameters*, making their roles distinct from previously attempted additive or simple multiplicative models.\n\nAvailable Data Variables:\n- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.\n(Note: Use `split_perc_self` for the participant's proposed percentage share percentage).\n\nPlease think through this step by step, then provide your model specification and variable descriptions. Remember that robust parameter identifiability for *both* learnable parameters is the absolute priority. Your goal is to find a mathematical structure where both parameters can be uniquely and reliably estimated from the data by ensuring their influences are clearly distinguishable. Previous attempts combining linear value terms with linear or non-linear fairness/penalty terms (additively or piecewise) have struggled with the fairness parameter's recovery. Explore models with asymmetric piecewise structures like the one suggested, where parameters target different aspects (overall value vs. specific unfairness magnitude) and different regimes (all offers vs. only unfair offers), to create more separable influences. Be creative in designing the mathematical relationship between inputs, parameters, and utility to achieve this separation.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: Okay, here are the improved instructions for the next run (Run 58), building on the results of the previous runs.\n\nInstructions for Run 58 of 100:\n\nThe unwavering primary objective remains achieving parameter recovery >= 0.7 for *all* learnable parameters. This is the critical benchmark for model usability. While improved BIC (lower is better) and accuracy (higher is better) are valuable secondary goals, they must not come at the expense of robust parameter recovery. A model with excellent fit but poor parameter identifiability is not suitable for drawing meaningful conclusions about the underlying cognitive processes.\n\nThe previous run (Run 57) explored a multiplicative interaction model (`U = beta_zero + beta_interaction * split_perc_self * fairness_deviation`), based on the analysis that simple additive or piecewise scaling of value and fairness terms was failing parameter recovery. Unfortunately, Run 57 also failed the primary objective, with both `beta_zero` (r = 0.635) and `beta_interaction` (r = 0.584) falling below the 0.7 threshold. Its overall performance (BIC 465.08, Acc 0.697) was moderate.\n\nAnalysis of Run 57's failure and previous models: The core identifiability challenge persists. It seems that simply combining terms additively, piecewise, or even through a linear multiplicative interaction has not created sufficiently distinct influences for the two learnable parameters to be reliably estimated from this dataset. The influence of fairness/relative value is still somehow confounded with or overshadowed by the influence of the absolute proposed value, regardless of the exact mathematical form (linear, log, quadratic, interaction) or combination method (additive, piecewise) used previously.\n\nWe need to find a mathematical structure for utility, still using exactly **2 learnable parameters**, where their influence on responder decisions (`trial_role == 1`) is fundamentally more separable. This requires moving beyond models where parameters primarily serve as simple scaling factors for additive components.\n\nBased on the persistent difficulty with previously explored structures (additive value + fairness, simple piecewise, linear + log, linear + interaction), focus your exploration for Run 58 on a model structure that combines features in a novel, potentially asymmetric, or piecewise manner designed specifically to isolate the influence of different components.\n\nConsider the following strategy to enhance identifiability by making the parameters' influences active in distinct ways:\n\n*   **Asymmetric Piecewise Additive Model:** Design a model where one parameter scales the *absolute proposed percentage share*, which influences utility on *all* trials. The second parameter, however, *only* influences utility on trials where the offer is *unfair* (below the calculated fair share), and it scales the *magnitude of that unfair deviation*.\n    *   *Example Idea:* Let one parameter (`beta_value`) scale `split_perc_self`. Let the second parameter (`beta_unfairness_effect`) scale the magnitude of the *negative* deviation from fairness (`fair_perc_self_calc - split_perc_self`), but only when this deviation is positive (i.e., when `split_perc_self` is less than `fair_perc_self_calc`).\n        *   `sum_tokens = token_self + token_opp`\n        *   `fair_perc_self_calc = IF(sum_tokens > 0.0, (token_self / sum_tokens) * 100.0, 50.0)` (Ensure this handles `sum_tokens=0`).\n        *   `unfair_deviation_magnitude = max(0, fair_perc_self_calc - split_perc_self)` (This term is 0 if the offer is fair or better, and positive if unfair, representing the degree of unfairness).\n        *   `U = beta_value * split_perc_self + beta_unfairness_effect * unfair_deviation_magnitude` (Combine linear value with a term representing the magnitude of unfairness, expecting `beta_unfairness_effect` to be negative to apply a penalty).\n    *   *Structural Principle:* This structure attempts identifiability by having `beta_value` exert influence across the entire range of `split_perc_self`, while `beta_unfairness_effect` *only* exerts influence in the specific regime of unfair offers, scaling a term (`unfair_deviation_magnitude`) that specifically captures the *size* of the unfairness, not the proposed value itself. This asymmetry and specific targeting of unfairness magnitude by one parameter, while the other scales overall value, is intended to create more separable effects than previous models.\n\n*   **Key Inputs & Calculated Variables:** Use `split_perc_self`, `token_self`, `token_opp` as data variables. Calculate `sum_tokens`, `fair_perc_self_calc`, and the specific intermediate term `unfair_deviation_magnitude` as defined above. Ensure `fair_perc_self_calc` is handled correctly when `sum_tokens` is 0.\n\n*   **Model Formula:** Define the utility (`U`). Include calculation steps for necessary derived variables *before* the final formula for `U`. Use clear mathematical notation within the <MODEL> tags.\n\n*   **Learnable Parameters:** Your model *must* have exactly **2 learnable parameters**. For the suggested model, use names like `beta_value` and `beta_unfairness_effect`. Choose descriptive names suitable for Python code. Define clear, generous, finite numerical bounds (e.g., [-10.0, 10.0] or wider/narrower if appropriate for the scale of your terms, which are percentages). Consider the expected sign (e.g., `beta_unfairness_effect` should likely be negative), but keep bounds wide enough.\n\n*   **Calculated Variables:** Ensure all calculated variables used in the model formula (including `sum_tokens`, `fair_perc_self_calc`, `unfair_deviation_magnitude`, and `U`) are included in your <VARIABLES> descriptions with `source: \"calculated\"`. Include descriptions for all data variables used as inputs (`token_self`, `token_opp`, `split_perc_self`) with `source: \"data\"`. Ensure the description for `fair_perc_self_calc` explicitly mentions the `sum_tokens > 0` condition and the default value. The description for `unfair_deviation_magnitude` should clarify what it represents and when it's non-zero.\n\n*   **Model Specification:** Provide the formal mathematical formula between <MODEL> tags. Only the formula should be inside these tags.\n\n*   **Variable Descriptions:** Provide variable descriptions in JSON format between <VARIABLES> tags for *all* variables used in the <MODEL> formula (data, calculated, learnable). Include source, range (with inclusive flags), distribution (if applicable), and learnable status. Use `split_perc_self` as the variable name for the participant's proposed percentage share percentage.\n\n*   **Target Variable:** Specify \"accept\" as the target variable using <target_variable> tags.\n\n*   **Summary:** Provide a concise summary between <SUMMARY> tags. Describe the model's core idea and, crucially, explain *how its specific mathematical structure (e.g., the asymmetric piecewise influence, one parameter scaling overall value, the other scaling specific unfairness magnitude only in the loss domain) is designed to ensure parameter identifiability for *both* learnable parameters*, making their roles distinct from previously attempted additive or simple multiplicative models.\n\nAvailable Data Variables:\n- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.\n(Note: Use `split_perc_self` for the participant's proposed percentage share percentage).\n\nPlease think through this step by step, then provide your model specification and variable descriptions. Remember that robust parameter identifiability for *both* learnable parameters is the absolute priority. Your goal is to find a mathematical structure where both parameters can be uniquely and reliably estimated from the data by ensuring their influences are clearly distinguishable. Previous attempts combining linear value terms with linear or non-linear fairness/penalty terms (additively or piecewise) have struggled with the fairness parameter's recovery. Explore models with asymmetric piecewise structures like the one suggested, where parameters target different aspects (overall value vs. specific unfairness magnitude) and different regimes (all offers vs. only unfair offers), to create more separable influences. Be creative in designing the mathematical relationship between inputs, parameters, and utility to achieve this separation.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "Okay, here is the computational model for predicting responder behavior in the described ultimatum game, designed with parameter identifiability as the primary objective, using an asymmetric piecewise structure.\n\n<MODEL>\nU = beta_value * split_perc_self + beta_unfairness_effect * unfair_deviation_magnitude\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"Proposed share for the participant (in % of combined earning)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"sum_tokens\": {\n      \"description\": \"Total number of tokens found by both participant and opponent (token_self + token_opp)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fair_perc_self_calc\": {\n      \"description\": \"Calculated fair percentage share for the participant based on token contribution. Computed as (token_self / sum_tokens) * 100 if sum_tokens > 0, otherwise 50.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"unfair_deviation_magnitude\": {\n      \"description\": \"Magnitude of the negative deviation from the calculated fair share percentage. Computed as max(0.0, fair_perc_self_calc - split_perc_self). It is 0 if the proposed share (split_perc_self) is greater than or equal to the calculated fair share (fair_perc_self_calc), and positive otherwise.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_value\": {\n      \"description\": \"Parameter scaling the influence of the proposed percentage share for self (split_perc_self) on utility. Represents sensitivity to the absolute value of the offer.\",\n      \"range\": {\n        \"min\": -10.0,\n        \"max\": 10.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_unfairness_effect\": {\n      \"description\": \"Parameter scaling the penalty applied for unfair offers, specifically the magnitude of the negative deviation from fair share (unfair_deviation_magnitude). Represents sensitivity to the degree of unfairness when the offer is below fair share.\",\n      \"range\": {\n        \"min\": -10.0,\n        \"max\": 10.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Utility of accepting the proposed offer. Used in a logistic function to determine the probability of acceptance.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nThis model predicts the utility of accepting an offer in the ultimatum game responder role using two learnable parameters. The utility is an additive combination of two components: the proposed percentage share for the participant (scaled by beta_value) and a penalty for unfair offers (scaled by beta_unfairness_effect). The unfairness penalty is calculated based on the magnitude of the negative deviation from the token-based fair share and is only active when the proposed share is below the fair share. This asymmetric and piecewise structure is designed to enhance parameter identifiability by allowing beta_value to influence utility across all offers based on their absolute value, while beta_unfairness_effect specifically penalizes the degree of unfairness only when the offer is disadvantageous, creating distinct functional roles for the parameters.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['beta_value', 'beta_unfairness_effect']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                U = beta_value * split_perc_self + beta_unfairness_effect * unfair_deviation_magnitude\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"Proposed share for the participant (in % of combined earning)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"sum_tokens\": {\n      \"description\": \"Total number of tokens found by both participant and opponent (token_self + token_opp)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fair_perc_self_calc\": {\n      \"description\": \"Calculated fair percentage share for the participant based on token contribution. Computed as (token_self / sum_tokens) * 100 if sum_tokens > 0, otherwise 50.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"unfair_deviation_magnitude\": {\n      \"description\": \"Magnitude of the negative deviation from the calculated fair share percentage. Computed as max(0.0, fair_perc_self_calc - split_perc_self). It is 0 if the proposed share (split_perc_self) is greater than or equal to the calculated fair share (fair_perc_self_calc), and positive otherwise.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_value\": {\n      \"description\": \"Parameter scaling the influence of the proposed percentage share for self (split_perc_self) on utility. Represents sensitivity to the absolute value of the offer.\",\n      \"range\": {\n        \"min\": -10.0,\n        \"max\": 10.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_unfairness_effect\": {\n      \"description\": \"Parameter scaling the penalty applied for unfair offers, specifically the magnitude of the negative deviation from fair share (unfair_deviation_magnitude). Represents sensitivity to the degree of unfairness when the offer is below fair share.\",\n      \"range\": {\n        \"min\": -10.0,\n        \"max\": 10.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Utility of accepting the proposed offer. Used in a logistic function to determine the probability of acceptance.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, beta_value=1, beta_unfairness_effect=1):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        split_perc_self = trial.get(\"splitperc_self\", 0)\n\n        sum_tokens = token_self + token_opp\n        if sum_tokens > 0:\n            fair_perc_self_calc = (token_self / sum_tokens) * 100\n        else:\n            fair_perc_self_calc = 50.0\n\n        unfair_deviation_magnitude = max(0.0, fair_perc_self_calc - split_perc_self)\n\n        U = beta_value * split_perc_self + beta_unfairness_effect * unfair_deviation_magnitude\n        model_predictions.append(U)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '[{\"ID\": 1, \"group\": \"control\", \"trial_number\": 1, \"trial_type\": 0, \"trial_role\": 0, \"token_opp\": 3, \"token_self\": 7, \"combined_earning\": 10, \"split_opp\": 7.0, \"split_self\": 3.0, \"splitperc_opp\": 70, \"splitperc_self\": 30, \"accept\": 0.0, \"accepted_amount\": 0.0, \"accepted_perc\": 0.0, \"proposed_perc\": 30.0, \"proposed_amount\": 3.0}, {\"ID\": 2, \"group\": \"control\", \"trial_number\": 2, \"trial_type\": 0, \"trial_role\": 0, \"token_opp\": 6, \"token_self\": 4, \"combined_earning\": 10, \"split_opp\": 4.0, \"split_self\": 6.0, \"splitperc_opp\": 40, \"splitperc_self\": 60, \"accept\": 1.0, \"accepted_amount\": 6.0, \"accepted_perc\": 60.0, \"proposed_perc\": 60.0, \"proposed_amount\": 6.0}]'\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n```",
      "timestamp": 1746102421.379457
    }
  ],
  "learnable_parameters": {
    "beta_value": {
      "description": "Parameter scaling the influence of the proposed percentage share for self (split_perc_self) on utility. Represents sensitivity to the absolute value of the offer.",
      "range": {
        "min": -10.0,
        "max": 10.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta_unfairness_effect": {
      "description": "Parameter scaling the penalty applied for unfair offers, specifically the magnitude of the negative deviation from fair share (unfair_deviation_magnitude). Represents sensitivity to the degree of unfairness when the offer is below fair share.",
      "range": {
        "min": -10.0,
        "max": 10.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "U = beta_value * split_perc_self + beta_unfairness_effect * unfair_deviation_magnitude",
  "variable_descriptions": {
    "token_opp": {
      "description": "Number of tokens found by the opponent",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Number of tokens found by the participant",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "split_perc_self": {
      "description": "Proposed share for the participant (in % of combined earning)",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "sum_tokens": {
      "description": "Total number of tokens found by both participant and opponent (token_self + token_opp)",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "fair_perc_self_calc": {
      "description": "Calculated fair percentage share for the participant based on token contribution. Computed as (token_self / sum_tokens) * 100 if sum_tokens > 0, otherwise 50.",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "unfair_deviation_magnitude": {
      "description": "Magnitude of the negative deviation from the calculated fair share percentage. Computed as max(0.0, fair_perc_self_calc - split_perc_self). It is 0 if the proposed share (split_perc_self) is greater than or equal to the calculated fair share (fair_perc_self_calc), and positive otherwise.",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "beta_value": {
      "description": "Parameter scaling the influence of the proposed percentage share for self (split_perc_self) on utility. Represents sensitivity to the absolute value of the offer.",
      "range": {
        "min": -10.0,
        "max": 10.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta_unfairness_effect": {
      "description": "Parameter scaling the penalty applied for unfair offers, specifically the magnitude of the negative deviation from fair share (unfair_deviation_magnitude). Represents sensitivity to the degree of unfairness when the offer is below fair share.",
      "range": {
        "min": -10.0,
        "max": 10.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "U": {
      "description": "Utility of accepting the proposed offer. Used in a logistic function to determine the probability of acceptance.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "This model predicts the utility of accepting an offer in the ultimatum game responder role using two learnable parameters. The utility is an additive combination of two components: the proposed percentage share for the participant (scaled by beta_value) and a penalty for unfair offers (scaled by beta_unfairness_effect). The unfairness penalty is calculated based on the magnitude of the negative deviation from the token-based fair share and is only active when the proposed share is below the fair share. This asymmetric and piecewise structure is designed to enhance parameter identifiability by allowing beta_value to influence utility across all offers based on their absolute value, while beta_unfairness_effect specifically penalizes the degree of unfairness only when the offer is disadvantageous, creating distinct functional roles for the parameters.",
  "target_variable": "accept",
  "full_reasoning": "Okay, here is the computational model for predicting responder behavior in the described ultimatum game, designed with parameter identifiability as the primary objective, using an asymmetric piecewise structure.\n\n<MODEL>\nU = beta_value * split_perc_self + beta_unfairness_effect * unfair_deviation_magnitude\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"Proposed share for the participant (in % of combined earning)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"sum_tokens\": {\n      \"description\": \"Total number of tokens found by both participant and opponent (token_self + token_opp)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fair_perc_self_calc\": {\n      \"description\": \"Calculated fair percentage share for the participant based on token contribution. Computed as (token_self / sum_tokens) * 100 if sum_tokens > 0, otherwise 50.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"unfair_deviation_magnitude\": {\n      \"description\": \"Magnitude of the negative deviation from the calculated fair share percentage. Computed as max(0.0, fair_perc_self_calc - split_perc_self). It is 0 if the proposed share (split_perc_self) is greater than or equal to the calculated fair share (fair_perc_self_calc), and positive otherwise.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_value\": {\n      \"description\": \"Parameter scaling the influence of the proposed percentage share for self (split_perc_self) on utility. Represents sensitivity to the absolute value of the offer.\",\n      \"range\": {\n        \"min\": -10.0,\n        \"max\": 10.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_unfairness_effect\": {\n      \"description\": \"Parameter scaling the penalty applied for unfair offers, specifically the magnitude of the negative deviation from fair share (unfair_deviation_magnitude). Represents sensitivity to the degree of unfairness when the offer is below fair share.\",\n      \"range\": {\n        \"min\": -10.0,\n        \"max\": 10.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Utility of accepting the proposed offer. Used in a logistic function to determine the probability of acceptance.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nThis model predicts the utility of accepting an offer in the ultimatum game responder role using two learnable parameters. The utility is an additive combination of two components: the proposed percentage share for the participant (scaled by beta_value) and a penalty for unfair offers (scaled by beta_unfairness_effect). The unfairness penalty is calculated based on the magnitude of the negative deviation from the token-based fair share and is only active when the proposed share is below the fair share. This asymmetric and piecewise structure is designed to enhance parameter identifiability by allowing beta_value to influence utility across all offers based on their absolute value, while beta_unfairness_effect specifically penalizes the degree of unfairness only when the offer is disadvantageous, creating distinct functional roles for the parameters.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: U = beta_value * split_perc_self + beta_unfairness_effect * unfair_deviation_magnitude\nSummary: This model predicts the utility of accepting an offer in the ultimatum game responder role using two learnable parameters. The utility is an additive combination of two components: the proposed percentage share for the participant (scaled by beta_value) and a penalty for unfair offers (scaled by beta_unfairness_effect). The unfairness penalty is calculated based on the magnitude of the negative deviation from the token-based fair share and is only active when the proposed share is below the fair share. This asymmetric and piecewise structure is designed to enhance parameter identifiability by allowing beta_value to influence utility across all offers based on their absolute value, while beta_unfairness_effect specifically penalizes the degree of unfairness only when the offer is disadvantageous, creating distinct functional roles for the parameters.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, beta_value=1, beta_unfairness_effect=1):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        split_perc_self = trial.get(\"splitperc_self\", 0)\n\n        sum_tokens = token_self + token_opp\n        if sum_tokens > 0:\n            fair_perc_self_calc = (token_self / sum_tokens) * 100\n        else:\n            fair_perc_self_calc = 50.0\n\n        unfair_deviation_magnitude = max(0.0, fair_perc_self_calc - split_perc_self)\n\n        U = beta_value * split_perc_self + beta_unfairness_effect * unfair_deviation_magnitude\n        model_predictions.append(U)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.7670940170940171,
  "group_accuracies": {
    "Control": 0.7958656330749354,
    "Cocaine": 0.7413194444444444
  },
  "group_parameter_averages": {
    "Control": {
      "beta_value": 3.501414675173151,
      "beta_unfairness_effect": 2.375585199658225
    },
    "Cocaine": {
      "beta_value": 0.8345283756183483,
      "beta_unfairness_effect": -1.916951168893484
    }
  },
  "fitting_results": [
    {
      "beta_value": -3.931132606634426,
      "beta_unfairness_effect": -7.1397377232125265,
      "success": true,
      "log_likelihood": -69.07755278652132,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 3.1965534311086983,
      "beta_unfairness_effect": -4.798638280754067,
      "success": true,
      "log_likelihood": -102.89045035165465,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 0.1431187301710131,
      "beta_unfairness_effect": -0.21188258794106996,
      "success": true,
      "log_likelihood": -9.4673648254916,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": -10.0,
      "beta_unfairness_effect": -10.0,
      "success": true,
      "log_likelihood": -345.38776394700693,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 0.12568875530961995,
      "beta_unfairness_effect": -0.24373301645651776,
      "success": true,
      "log_likelihood": -8.841688294449492,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 10.0,
      "beta_unfairness_effect": 10.0,
      "success": true,
      "log_likelihood": -299.33606208692606,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 10.0,
      "beta_unfairness_effect": 10.0,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 2.0199898798582687,
      "beta_unfairness_effect": 7.545793608175149,
      "success": true,
      "log_likelihood": -276.31021115688566,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 7.500943075016835,
      "beta_unfairness_effect": 8.07863290695176,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": -10.0,
      "beta_unfairness_effect": -10.0,
      "success": true,
      "log_likelihood": -322.3619130169666,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 1.7387281755021284,
      "beta_unfairness_effect": 9.899919021467866,
      "success": true,
      "log_likelihood": -460.5170185972094,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": -3.25992540061387,
      "beta_unfairness_effect": -3.545555053211089,
      "success": true,
      "log_likelihood": -92.10340371656179,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": -1.1090811512400567,
      "beta_unfairness_effect": -8.51750938560751,
      "success": true,
      "log_likelihood": -345.38776394592475,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 2.8218014463450225,
      "beta_unfairness_effect": 10.0,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 10.0,
      "beta_unfairness_effect": 10.0,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 10.0,
      "beta_unfairness_effect": 10.0,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 2.9904656091670887,
      "beta_unfairness_effect": 3.4012202523662722,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 5.660234136375555,
      "beta_unfairness_effect": 6.655525394561671,
      "success": true,
      "log_likelihood": -115.12925464660226,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 0.2352651504206237,
      "beta_unfairness_effect": -0.10479083900569373,
      "success": true,
      "log_likelihood": -5.648458713451613,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 7.760919540782506,
      "beta_unfairness_effect": -0.7733325161073275,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 10.0,
      "beta_unfairness_effect": 9.244190229522925,
      "success": true,
      "log_likelihood": -368.4136148770475,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 7.706537894559219,
      "beta_unfairness_effect": 2.9960447952809552,
      "success": true,
      "log_likelihood": -115.12925464660225,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 8.692650107918436,
      "beta_unfairness_effect": -10.0,
      "success": true,
      "log_likelihood": -207.23265836676882,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 0.07195056032747675,
      "beta_unfairness_effect": -0.09136643669639707,
      "success": true,
      "log_likelihood": -16.453331013290434,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 0.07930505534954503,
      "beta_unfairness_effect": -0.1282926709777641,
      "success": true,
      "log_likelihood": -14.151797204780188,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 6.632903165821684,
      "beta_unfairness_effect": 7.71268871928822,
      "success": true,
      "log_likelihood": -345.38776394700704,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 10.0,
      "beta_unfairness_effect": 10.0,
      "success": true,
      "log_likelihood": -368.4136148770475,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 0.1740982369240882,
      "beta_unfairness_effect": -0.570042265749111,
      "success": true,
      "log_likelihood": -3.8057495943709725,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 7.1261463351738215,
      "beta_unfairness_effect": -0.8942587740956824,
      "success": true,
      "log_likelihood": -92.07431023593955,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 10.0,
      "beta_unfairness_effect": 10.0,
      "success": true,
      "log_likelihood": -184.20680743672378,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 10.0,
      "beta_unfairness_effect": 10.0,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": -10.0,
      "beta_unfairness_effect": -10.0,
      "success": true,
      "log_likelihood": -69.07755278652138,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 0.03678871925609559,
      "beta_unfairness_effect": -0.06324030672790804,
      "success": true,
      "log_likelihood": -20.34236091062127,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": -10.0,
      "beta_unfairness_effect": -10.0,
      "success": true,
      "log_likelihood": -322.3619130169665,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 7.312862369183786,
      "beta_unfairness_effect": 10.0,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 10.0,
      "beta_unfairness_effect": 10.0,
      "success": true,
      "log_likelihood": -299.3360620869261,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 8.11485478958285,
      "beta_unfairness_effect": 7.090421333352587,
      "success": true,
      "log_likelihood": -253.2843602268452,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 8.809014539830052,
      "beta_unfairness_effect": -7.659756988260069,
      "success": true,
      "log_likelihood": -207.22601707492336,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 10.0,
      "beta_unfairness_effect": 10.0,
      "success": true,
      "log_likelihood": -276.3102111568857,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 8.702629680322769,
      "beta_unfairness_effect": 5.316117057017372,
      "success": true,
      "log_likelihood": -69.07755278652135,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 0.0680399770746299,
      "beta_unfairness_effect": -0.06620977714992562,
      "success": true,
      "log_likelihood": -17.76753395888749,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": -8.86051917044796,
      "beta_unfairness_effect": -0.9820431107284442,
      "success": true,
      "log_likelihood": -184.20680743672372,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 10.0,
      "beta_unfairness_effect": 10.0,
      "success": true,
      "log_likelihood": -23.02585092644049,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 0.08039596483553234,
      "beta_unfairness_effect": -0.08977067378944541,
      "success": true,
      "log_likelihood": -15.896322253626165,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 8.63286839809038,
      "beta_unfairness_effect": -8.671810542228144,
      "success": true,
      "log_likelihood": -116.92669195400225,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 10.0,
      "beta_unfairness_effect": 2.5375309140593343,
      "success": true,
      "log_likelihood": -230.2585092968047,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 7.40964029301745,
      "beta_unfairness_effect": -8.207052620684284,
      "success": true,
      "log_likelihood": -161.1809566295936,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": -8.394980903095096,
      "beta_unfairness_effect": -6.919714225419851,
      "success": true,
      "log_likelihood": -322.3619130169666,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": -1.6981234921126607,
      "beta_unfairness_effect": -8.240677282720231,
      "success": true,
      "log_likelihood": -345.3877639470071,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.025722506188575415,
      "beta_unfairness_effect": -0.02681789273174143,
      "success": true,
      "log_likelihood": -23.343993381789225,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.06392095209661934,
      "beta_unfairness_effect": -0.03989256067610145,
      "success": true,
      "log_likelihood": -18.16915208954115,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.004900059508795825,
      "beta_unfairness_effect": -10.0,
      "success": true,
      "log_likelihood": -71.82569904319038,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.0612867643347045,
      "beta_unfairness_effect": -0.073061007380236,
      "success": true,
      "log_likelihood": -18.165343857347892,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 7.339326628664473,
      "beta_unfairness_effect": -4.61691721038291,
      "success": true,
      "log_likelihood": -253.28500535871362,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": -10.0,
      "beta_unfairness_effect": -10.0,
      "success": true,
      "log_likelihood": -322.36191301696647,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": -2.2896602402042854,
      "beta_unfairness_effect": -6.533595894400907,
      "success": true,
      "log_likelihood": -276.31021115688554,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 10.0,
      "beta_unfairness_effect": 10.0,
      "success": true,
      "log_likelihood": -598.672124177452,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.2777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 10.0,
      "beta_unfairness_effect": 10.0,
      "success": true,
      "log_likelihood": -92.1034037165618,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": -1.5258292846823842,
      "beta_unfairness_effect": -9.727546039064567,
      "success": true,
      "log_likelihood": -92.10340371656181,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 9.999999052236559,
      "beta_unfairness_effect": -4.504245092987767,
      "success": true,
      "log_likelihood": -115.12929188849344,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.05563421005659512,
      "beta_unfairness_effect": -0.04960057762641138,
      "success": true,
      "log_likelihood": -19.513547549974067,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": -10.0,
      "beta_unfairness_effect": -10.0,
      "success": true,
      "log_likelihood": -414.4653167371285,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": -10.0,
      "beta_unfairness_effect": -10.0,
      "success": true,
      "log_likelihood": -69.07755278652142,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": -5.6295950263218515,
      "beta_unfairness_effect": -0.3478030249457227,
      "success": true,
      "log_likelihood": -368.4136148770475,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": -10.0,
      "beta_unfairness_effect": -10.0,
      "success": true,
      "log_likelihood": -184.20680743672384,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 7.088672384406589,
      "beta_unfairness_effect": -8.87662716274722,
      "success": true,
      "log_likelihood": -137.63909262241228,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 1.4927325178221817,
      "beta_unfairness_effect": 10.0,
      "success": true,
      "log_likelihood": -69.07755278652131,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 5.932688863096301,
      "beta_unfairness_effect": -2.7711977113590427,
      "success": true,
      "log_likelihood": -69.07798330055518,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 10.0,
      "beta_unfairness_effect": 1.0146170280395543,
      "success": true,
      "log_likelihood": -368.41361487704756,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 5.102037968357056,
      "beta_unfairness_effect": 6.566928027883659,
      "success": true,
      "log_likelihood": -69.07755278652137,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": -6.70263589187824,
      "beta_unfairness_effect": 0.057083313500413624,
      "success": true,
      "log_likelihood": -92.10340371656183,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": -4.39846603856938,
      "beta_unfairness_effect": -3.8985921288582386,
      "success": true,
      "log_likelihood": -115.12925464660226,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.07662379719894487,
      "beta_unfairness_effect": -0.10035752871504733,
      "success": true,
      "log_likelihood": -15.707387974729427,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.08693084724472533,
      "beta_unfairness_effect": -0.04128623836497585,
      "success": true,
      "log_likelihood": -14.600412499553485,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.026054502441526687,
      "beta_unfairness_effect": -0.03539460360461153,
      "success": true,
      "log_likelihood": -22.956302610952708,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 7.146913128970805,
      "beta_unfairness_effect": -0.553366472473396,
      "success": true,
      "log_likelihood": -253.28436022684528,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 10.0,
      "beta_unfairness_effect": 10.0,
      "success": true,
      "log_likelihood": -46.051701856480875,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": -10.0,
      "beta_unfairness_effect": -10.0,
      "success": true,
      "log_likelihood": -46.051701856480925,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.029729355941385815,
      "beta_unfairness_effect": -0.01919757824842426,
      "success": true,
      "log_likelihood": -22.884050062009273,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": -1.3754096289821334,
      "beta_unfairness_effect": -1.8672797136679051,
      "success": true,
      "log_likelihood": -69.07755278652135,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.02867383616565353,
      "beta_unfairness_effect": -0.0309734621853713,
      "success": true,
      "log_likelihood": -22.967419506763882,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 10.0,
      "beta_unfairness_effect": 10.0,
      "success": true,
      "log_likelihood": -69.07755278652131,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": -10.0,
      "beta_unfairness_effect": -10.0,
      "success": true,
      "log_likelihood": -92.10340371656179,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.11492802211362625,
      "beta_unfairness_effect": -0.16027589984661153,
      "success": true,
      "log_likelihood": -11.522953143336728,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 9.517776583109569,
      "beta_unfairness_effect": 0.3412133723672106,
      "success": true,
      "log_likelihood": -322.36191301696664,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": -7.567131675395364,
      "beta_unfairness_effect": -8.140192822877681,
      "success": true,
      "log_likelihood": -92.10340371656183,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.07002798118586895,
      "beta_unfairness_effect": -0.04924347956449232,
      "success": true,
      "log_likelihood": -17.53997354040106,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": -10.0,
      "beta_unfairness_effect": -10.0,
      "success": true,
      "log_likelihood": -184.20680743672372,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 10.0,
      "beta_unfairness_effect": 10.0,
      "success": true,
      "log_likelihood": -46.05170185648088,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 5.549822894711391,
      "beta_unfairness_effect": -7.88431684005104,
      "success": true,
      "log_likelihood": -133.03155348656273,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 3.701886699126799,
      "beta_unfairness_effect": 9.945777524864972,
      "success": true,
      "log_likelihood": -253.28436022684528,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "beta_value": {
        "r": 0.7735260886369447,
        "p": 4.0068907594570086e-21
      },
      "beta_unfairness_effect": {
        "r": 0.6594151910310619,
        "p": 8.658064275644778e-14
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 286.16232437259384,
  "bic_Control": 282.03885325463744,
  "bic_Cocaine": 289.8562672490964,
  "bic_results": {
    "average_bic": 286.16232437259384,
    "individual_bics": [
      145.32214344995486,
      212.94793858022152,
      26.10176752789542,
      697.9425657709261,
      24.850414465811205,
      605.8391620507643,
      7.167037869712219,
      559.7874601906835,
      7.167037869712219,
      651.8908639108454,
      928.201075071331,
      191.3738453100358,
      697.9425657687617,
      7.167037869712219,
      7.167037869712219,
      7.167037869712219,
      7.167037869712219,
      237.42554717011674,
      18.463955303815446,
      7.167037869712219,
      743.9942676310072,
      237.42554717011672,
      421.63235461044985,
      40.073699903493086,
      35.47063228647259,
      697.9425657709263,
      743.9942676310072,
      14.778537065654165,
      191.31565834879132,
      375.5806527503598,
      7.167037869712219,
      145.32214344995498,
      47.85175969815476,
      651.8908639108453,
      7.167037869712219,
      605.8391620507645,
      513.7357583306026,
      421.61907202675894,
      559.7874601906836,
      145.32214344995492,
      42.7021057946872,
      375.58065275035966,
      53.2187397297932,
      38.95968238416455,
      241.02042178491672,
      467.6840564705216,
      329.5289511360994,
      651.8908639108454,
      697.9425657709264,
      53.85502464049067,
      43.50534205599452,
      150.81843596329298,
      43.497725591608,
      513.7370485943395,
      651.8908639108452,
      559.7874601906833,
      1204.5112862318163,
      191.37384531003582,
      191.37384531003585,
      237.4256216538991,
      46.19413297686035,
      836.0976713511692,
      145.32214344995506,
      743.9942676310072,
      375.5806527503599,
      282.4452231217368,
      145.32214344995484,
      145.32300447802257,
      743.9942676310073,
      145.32214344995495,
      191.37384531003588,
      237.42554717011674,
      38.581813826371075,
      36.36786287601919,
      53.079643098817634,
      513.7357583306028,
      99.27044158987397,
      99.27044158987407,
      52.93513800093076,
      145.32214344995492,
      53.10187689043998,
      145.32214344995484,
      191.3738453100358,
      30.212944163585675,
      651.8908639108455,
      191.37384531003588,
      42.24698495771434,
      375.58065275035966,
      99.27044158987398,
      273.2301448500377,
      513.7357583306028
    ],
    "group_enabled": true,
    "group_bics": {
      "Control": [
        145.32214344995486,
        212.94793858022152,
        26.10176752789542,
        697.9425657709261,
        24.850414465811205,
        605.8391620507643,
        7.167037869712219,
        559.7874601906835,
        7.167037869712219,
        651.8908639108454,
        928.201075071331,
        191.3738453100358,
        697.9425657687617,
        7.167037869712219,
        7.167037869712219,
        7.167037869712219,
        7.167037869712219,
        237.42554717011674,
        18.463955303815446,
        7.167037869712219,
        743.9942676310072,
        237.42554717011672,
        421.63235461044985,
        40.073699903493086,
        35.47063228647259,
        697.9425657709263,
        743.9942676310072,
        14.778537065654165,
        191.31565834879132,
        375.5806527503598,
        7.167037869712219,
        145.32214344995498,
        47.85175969815476,
        651.8908639108453,
        7.167037869712219,
        605.8391620507645,
        513.7357583306026,
        421.61907202675894,
        559.7874601906836,
        145.32214344995492,
        42.7021057946872,
        375.58065275035966,
        53.2187397297932
      ],
      "Cocaine": [
        38.95968238416455,
        241.02042178491672,
        467.6840564705216,
        329.5289511360994,
        651.8908639108454,
        697.9425657709264,
        53.85502464049067,
        43.50534205599452,
        150.81843596329298,
        43.497725591608,
        513.7370485943395,
        651.8908639108452,
        559.7874601906833,
        1204.5112862318163,
        191.37384531003582,
        191.37384531003585,
        237.4256216538991,
        46.19413297686035,
        836.0976713511692,
        145.32214344995506,
        743.9942676310072,
        375.5806527503599,
        282.4452231217368,
        145.32214344995484,
        145.32300447802257,
        743.9942676310073,
        145.32214344995495,
        191.37384531003588,
        237.42554717011674,
        38.581813826371075,
        36.36786287601919,
        53.079643098817634,
        513.7357583306028,
        99.27044158987397,
        99.27044158987407,
        52.93513800093076,
        145.32214344995492,
        53.10187689043998,
        145.32214344995484,
        191.3738453100358,
        30.212944163585675,
        651.8908639108455,
        191.37384531003588,
        42.24698495771434,
        375.58065275035966,
        99.27044158987398,
        273.2301448500377,
        513.7357583306028
      ]
    },
    "num_parameters": 2,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- beta_value: r = 0.774\n- beta_unfairness_effect: r = 0.659",
  "previous_models": [
    "Specification: U = beta_value * split_perc_self + beta_unfairness_effect * unfair_deviation_magnitude\nSummary: This model predicts the utility of accepting an offer in the ultimatum game responder role using two learnable parameters. The utility is an additive combination of two components: the proposed percentage share for the participant (scaled by beta_value) and a penalty for unfair offers (scaled by beta_unfairness_effect). The unfairness penalty is calculated based on the magnitude of the negative deviation from the token-based fair share and is only active when the proposed share is below the fair share. This asymmetric and piecewise structure is designed to enhance parameter identifiability by allowing beta_value to influence utility across all offers based on their absolute value, while beta_unfairness_effect specifically penalizes the degree of unfairness only when the offer is disadvantageous, creating distinct functional roles for the parameters.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 286.16232437259384\nOverall Accuracy: 0.7671\nGroup Accuracies:\n- Control: 0.7959\n- Cocaine: 0.7413\n\nParameter Recovery:\n- beta_value: r = 0.774\n- beta_unfairness_effect: r = 0.659"
  ]
}