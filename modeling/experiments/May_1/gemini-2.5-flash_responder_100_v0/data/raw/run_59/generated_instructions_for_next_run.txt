Okay, here are the improved instructions for the next run, focusing intensely on designing a model structure that ensures parameter identifiability for *both* learnable parameters.

Instructions for Run 60 of 100:

The **unwavering primary objective remains achieving parameter recovery >= 0.7 for *all* learnable parameters**. This is the critical benchmark for model usability. While improved BIC (lower is better) and accuracy (higher is better) are valuable secondary goals, they must not come at the expense of robust parameter recovery. A model with excellent fit but poor parameter identifiability is not suitable for drawing meaningful conclusions about the underlying cognitive processes.

The previous attempts, including the one exploring an asymmetric piecewise structure with a squared unfairness term, have consistently struggled to achieve sufficient parameter identifiability for *both* of the two learnable parameters. This suggests that the simple additive or piecewise linear/squared structures explored so far, even with asymmetric domains, do not create mathematically distinct enough contributions from the two parameters to allow for their unique estimation from the data.

We need to find a mathematical structure for utility, still using exactly **2 learnable parameters**, where their influence on responder decisions (`trial_role == 1`) is fundamentally more separable and distinguishable than in previous models. This requires exploring mathematical forms beyond simple linear combinations or squared deviations.

Based on the persistent difficulty, focus your exploration for Run 60 on designing a utility function where the influence of the two parameters is inherently distinct through more complex or interactive non-linearities.

Consider the following strategies to enhance identifiability by making the two parameters' contributions qualitatively different:

*   **Explore Multiplicative Interactions:** Instead of purely additive terms, consider models where one parameter modulates the *relationship* between different factors. For example, a parameter could scale the *product* of a value term and a fairness term, or scale a non-linear function that combines value and fairness information.
*   **Non-linear Functions of Ratios or Deviations:** If using fairness measures like the ratio (`split_perc_self / fair_perc_self_calc`) or deviation (`split_perc_self - fair_perc_self_calc`), explore scaling *different* non-linear transformations of these measures with the two parameters. Avoid simple linear or squared terms if they seem to overlap in influence. Consider transformations like cubic terms, logarithms, exponentials, or sigmoids applied to the fairness measure, scaled by a parameter.
*   **Piecewise Functions with Distinct Forms:** If using a piecewise structure (e.g., one rule for fair/favorable offers, another for unfair), ensure the mathematical form of the utility function is fundamentally different across the pieces, and that the parameters scale terms whose influence is unique to that piece and distinct from terms in other pieces.
*   **Parameter Influencing Shape/Slope:** Design a model where one parameter primarily shifts or scales the utility function overall, while the second parameter primarily affects its *shape*, *slope*, or *curvature* with respect to `split_perc_self` or the fairness measure, making their effects distinguishable.

The goal is to create a structure where changes in the first parameter affect utility differently across the range of inputs compared to changes in the second parameter. **Avoid structures where, for any significant portion of the data, the utility is simply a linear combination of input variables scaled by the two parameters.**

*   **Key Inputs & Calculated Variables:** Use `split_perc_self`, `token_self`, `token_opp` as data variables. Calculate necessary intermediate variables like `sum_tokens`, `fair_perc_self_calc`, and any other derived measures of value, fairness, or their interactions as needed by your model structure. Ensure `fair_perc_self_calc` is handled correctly when `sum_tokens` is 0. Use a small epsilon for numerical stability where necessary (e.g., in denominators, logarithms).
*   **Model Formula:** Define the utility (`U`). Include calculation steps for necessary derived variables *before* the final formula for `U`. Use clear mathematical notation within the <MODEL> tags. Only the formula should be inside these tags.
*   **Learnable Parameters:** Your model *must* have exactly **2 learnable parameters**. Choose descriptive names suitable for Python code (e.g., `beta_value`, `beta_fairness_sensitivity`, or names reflecting their specific roles in your new structure). Define clear, generous, finite numerical bounds (e.g., [-10.0, 10.0] or wider/narrower if appropriate).
*   **Calculated Variables:** Ensure all calculated variables used in the model formula (including U) are included in your <VARIABLES> descriptions with `source: "calculated"`. Include descriptions for all data variables used as inputs (`token_self`, `token_opp`, `split_perc_self`) with `source: "data"`. Provide detailed descriptions for *calculated* variables, explaining how they are derived and what they represent.
*   **Variable Descriptions:** Provide variable descriptions in JSON format between <VARIABLES> tags for *all* variables used in the <MODEL> formula (data, calculated, learnable). Include source, range (with inclusive flags), distribution (if applicable), and learnable status. Use `split_perc_self` as the variable name for the participant's proposed percentage share percentage.
*   **Target Variable:** Specify "accept" as the target variable using <target_variable> tags.
*   **Summary:** Provide a concise summary between <SUMMARY> tags. Describe the model's core idea and, crucially, explain *how its specific mathematical structure (e.g., the use of a multiplicative term, a novel non-linear function, or a specific piecewise definition) is designed to ensure parameter identifiability for *both* learnable parameters*, making their roles mathematically distinct from previously attempted additive or simple piecewise linear/squared models.

Available Data Variables:
- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.
(Note: Use `split_perc_self` for the participant's proposed percentage share percentage).

Please think through this step by step, then provide your model specification and variable descriptions. Remember that robust parameter identifiability for *both* learnable parameters is the absolute priority. Your goal is to find a mathematical structure where both parameters can be uniquely and reliably estimated from the data by ensuring their influences are clearly distinguishable across the range of possible offers and fairness conditions. Be creative in designing the mathematical relationship between inputs, parameters, and utility to achieve this separation, moving beyond simple linear or squared additive components.