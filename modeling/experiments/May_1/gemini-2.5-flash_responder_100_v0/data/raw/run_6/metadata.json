{
  "task_description": "In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "<new_instructions>Design a computational model for the described ultimatum game responder task. Your model must meet the following criteria:\n1.  **Predict only responder behavior** (target variable: \"accept\").\n2.  **Achieve excellent parameter recovery (>= 0.7 correlation) for ALL learnable parameters.** This remains the *single most important* objective. Previous attempts have failed here. A model is unusable if any learnable parameter cannot be reliably recovered, regardless of other metrics. Prioritize model structures that inherently enhance parameter identifiability from the data.\n3.  **Be applicable to the dataset:** Use only the provided data structure and variables available during responder trials (trial_role == 1).\n4.  **Predict utility:** Utility values will be converted to acceptance probabilities using a logistic function (with temperature 1). A utility > 0 implies > 50% probability of acceptance.\n\n**Analysis of Previous Attempt (Run 5):** The last model achieved a very good BIC and decent accuracy. However, it critically failed the parameter recovery test for most of its learnable parameters (`beta_split`, `beta_unfairness`, `alpha` all < 0.5). This indicates that despite using percentage scaling and a non-linear (quadratic) penalty term based on a dynamic reference, the influences of the parameters were still too correlated or not sufficiently distinct given the data. The parameters controlling sensitivity to the split percentage, sensitivity to deviation below the reference, and the weighting of the reference point likely had overlapping or substitutable effects on the overall utility.\n\n**Guidance for the Next Model (Radically Prioritizing Parameter Recovery):** We need a fundamentally different approach to ensure parameters have separable and identifiable effects. Simple additive structures, even with non-linear terms on features, have not worked.\n\n*   **Push Beyond Simple Penalties:** Instead of just adding or subtracting penalties from a base utility, consider models where parameters scale different *qualities* of the offer or fairness in distinct ways.\n*   **Explore Different Non-linearities and Interactions:** If quadratic didn't work for the deviation, consider other functional forms (e.g., exponential decay of utility for low offers, piecewise functions with sharp transitions around norms like 50% or proportional share, multiplicative interactions between sensitivity parameters and fairness deviations). Think about how parameters could define the *shape* or *rate* of change of utility, not just the scale of an added/subtracted term.\n*   **Distinct Parameter Roles:** Design parameters so their influence on utility is as orthogonal as possible. Could one parameter control the steepness of the utility curve *only* for offers below a norm, while another controls it *only* for offers above? Could a parameter modulate the *impact* of the proportional share norm relative to the 50% norm, but in a way that is less directly tied to a simple weighted average reference point that the penalty then scales?\n*   **Focus on Percentages (Still Important):** Continue to use `split_perc_self` and `fair_perc_self` (derived from `token_self`, `token_opp`) for calculating utility components related to the offer and fairness to maintain consistent scaling. Mixing percentages and absolute values has proven problematic.\n*   **Simplicity is Key (But Not at the Cost of Identifiability):** Aim for the minimum number of learnable parameters required to capture the essential trade-offs (self-interest vs. fairness) *while guaranteeing parameter identifiability*. A complex model with poor recovery is useless. A simpler model with excellent recovery is valuable.\n\nFor any learnable parameters, you must specify generous, finite numerical bounds. The utility variable may be unbounded (-inf to inf).\n\nProvide your formal mathematical model between <MODEL> tags. Ensure *only* the mathematical formula is within these tags.\nProvide variable descriptions in JSON format between <VARIABLES> tags. Ensure learnable parameter names are clear and suitable for coding. Spell out Greek variables.\nSpecify the target variable using <target_variable> tags.\nProvide a concise, descriptive summary of the model between <SUMMARY> tags.\n\nAvailable Data Variables:\n- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.\nRemember to only model responder trials (where trial_role == 1).\n\nFirst, reason step by step about:\n*   The key psychological mechanisms involved in responder decisions (self-interest, aversion to 50% split unfairness, aversion to proportional split unfairness).\n*   **Crucial Design Choice:** How to formulate the utility function using percentage-based values (`split_perc_self`, `fair_perc_self`) in a way that inherently makes the learnable parameters' influences *distinct* and *identifiable*, avoiding the collinearity seen in previous models.\n*   **Mandatory Non-linear Structure for Identifiability:** How to incorporate non-linear functional forms or parameter interactions that ensure parameters have separable effects. Think outside the box \u2013 can parameters define thresholds, exponents, or interaction terms that are clearly distinct from each other's roles?\n*   How the learnable parameters are defined to have maximally distinct and identifiable effects on utility, minimizing covariance based on the *specific* data characteristics (e.g., correlation between split_perc_self and fair_perc_self).\n*   What is the *minimum necessary* set of learnable parameters that can robustly capture the essential aspects of the behavior while prioritizing parameter identifiability (>= 0.7 recovery)?\n*   How the model variables map to observable behavior (\"accept\") via the logistic function.\n\nPlease think through this step by step, focusing intently on how the *specific mathematical structure* of the model guarantees parameter identifiability and distinguishes the influence of each parameter, then provide your model specification, variable descriptions, target variable, and summary.\n</new_instructions>",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: <new_instructions>Design a computational model for the described ultimatum game responder task. Your model must meet the following criteria:\n1.  **Predict only responder behavior** (target variable: \"accept\").\n2.  **Achieve excellent parameter recovery (>= 0.7 correlation) for ALL learnable parameters.** This remains the *single most important* objective. Previous attempts have failed here. A model is unusable if any learnable parameter cannot be reliably recovered, regardless of other metrics. Prioritize model structures that inherently enhance parameter identifiability from the data.\n3.  **Be applicable to the dataset:** Use only the provided data structure and variables available during responder trials (trial_role == 1).\n4.  **Predict utility:** Utility values will be converted to acceptance probabilities using a logistic function (with temperature 1). A utility > 0 implies > 50% probability of acceptance.\n\n**Analysis of Previous Attempt (Run 5):** The last model achieved a very good BIC and decent accuracy. However, it critically failed the parameter recovery test for most of its learnable parameters (`beta_split`, `beta_unfairness`, `alpha` all < 0.5). This indicates that despite using percentage scaling and a non-linear (quadratic) penalty term based on a dynamic reference, the influences of the parameters were still too correlated or not sufficiently distinct given the data. The parameters controlling sensitivity to the split percentage, sensitivity to deviation below the reference, and the weighting of the reference point likely had overlapping or substitutable effects on the overall utility.\n\n**Guidance for the Next Model (Radically Prioritizing Parameter Recovery):** We need a fundamentally different approach to ensure parameters have separable and identifiable effects. Simple additive structures, even with non-linear terms on features, have not worked.\n\n*   **Push Beyond Simple Penalties:** Instead of just adding or subtracting penalties from a base utility, consider models where parameters scale different *qualities* of the offer or fairness in distinct ways.\n*   **Explore Different Non-linearities and Interactions:** If quadratic didn't work for the deviation, consider other functional forms (e.g., exponential decay of utility for low offers, piecewise functions with sharp transitions around norms like 50% or proportional share, multiplicative interactions between sensitivity parameters and fairness deviations). Think about how parameters could define the *shape* or *rate* of change of utility, not just the scale of an added/subtracted term.\n*   **Distinct Parameter Roles:** Design parameters so their influence on utility is as orthogonal as possible. Could one parameter control the steepness of the utility curve *only* for offers below a norm, while another controls it *only* for offers above? Could a parameter modulate the *impact* of the proportional share norm relative to the 50% norm, but in a way that is less directly tied to a simple weighted average reference point that the penalty then scales?\n*   **Focus on Percentages (Still Important):** Continue to use `split_perc_self` and `fair_perc_self` (derived from `token_self`, `token_opp`) for calculating utility components related to the offer and fairness to maintain consistent scaling. Mixing percentages and absolute values has proven problematic.\n*   **Simplicity is Key (But Not at the Cost of Identifiability):** Aim for the minimum number of learnable parameters required to capture the essential trade-offs (self-interest vs. fairness) *while guaranteeing parameter identifiability*. A complex model with poor recovery is useless. A simpler model with excellent recovery is valuable.\n\nFor any learnable parameters, you must specify generous, finite numerical bounds. The utility variable may be unbounded (-inf to inf).\n\nProvide your formal mathematical model between <MODEL> tags. Ensure *only* the mathematical formula is within these tags.\nProvide variable descriptions in JSON format between <VARIABLES> tags. Ensure learnable parameter names are clear and suitable for coding. Spell out Greek variables.\nSpecify the target variable using <target_variable> tags.\nProvide a concise, descriptive summary of the model between <SUMMARY> tags.\n\nAvailable Data Variables:\n- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.\nRemember to only model responder trials (where trial_role == 1).\n\nFirst, reason step by step about:\n*   The key psychological mechanisms involved in responder decisions (self-interest, aversion to 50% split unfairness, aversion to proportional split unfairness).\n*   **Crucial Design Choice:** How to formulate the utility function using percentage-based values (`split_perc_self`, `fair_perc_self`) in a way that inherently makes the learnable parameters' influences *distinct* and *identifiable*, avoiding the collinearity seen in previous models.\n*   **Mandatory Non-linear Structure for Identifiability:** How to incorporate non-linear functional forms or parameter interactions that ensure parameters have separable effects. Think outside the box \u2013 can parameters define thresholds, exponents, or interaction terms that are clearly distinct from each other's roles?\n*   How the learnable parameters are defined to have maximally distinct and identifiable effects on utility, minimizing covariance based on the *specific* data characteristics (e.g., correlation between split_perc_self and fair_perc_self).\n*   What is the *minimum necessary* set of learnable parameters that can robustly capture the essential aspects of the behavior while prioritizing parameter identifiability (>= 0.7 recovery)?\n*   How the model variables map to observable behavior (\"accept\") via the logistic function.\n\nPlease think through this step by step, focusing intently on how the *specific mathematical structure* of the model guarantees parameter identifiability and distinguishes the influence of each parameter, then provide your model specification, variable descriptions, target variable, and summary.\n</new_instructions>\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<MODEL>\nU = beta_gain * split_perc_self - gamma_50 * max(0, 50 - split_perc_self)^2 - gamma_prop * max(0, fair_perc_self - split_perc_self)^2\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the proposed split for the participant\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_gain\": {\n      \"description\": \"Parameter scaling the linear utility of the participant's share percentage\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma_50\": {\n      \"description\": \"Parameter scaling the quadratic penalty for offers below 50%\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma_prop\": {\n      \"description\": \"Parameter scaling the quadratic penalty for offers below the proportional fair share\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The proposed share for the participant in percentage of combined earning\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n     \"fair_perc_self\": {\n      \"description\": \"The proportional fair share for the participant in percentage, calculated as (token_self / (token_self + token_opp)) * 100\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA utility model for the responder's decision. Utility of acceptance is calculated as a linear gain from the participant's proposed percentage share, minus quadratic penalties that activate specifically when the proposed share falls below two distinct fairness norms: 50% of the total pot and the participant's proportional share based on token contributions. Learnable parameters scale the sensitivity to the linear gain (beta_gain), the quadratic penalty for offers below 50% (gamma_50), and the quadratic penalty for offers below the proportional share (gamma_prop). Utility is converted to acceptance probability via a logistic function.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['beta_gain', 'gamma_50', 'gamma_prop']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                U = beta_gain * split_perc_self - gamma_50 * max(0, 50 - split_perc_self)^2 - gamma_prop * max(0, fair_perc_self - split_perc_self)^2\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the proposed split for the participant\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_gain\": {\n      \"description\": \"Parameter scaling the linear utility of the participant's share percentage\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma_50\": {\n      \"description\": \"Parameter scaling the quadratic penalty for offers below 50%\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma_prop\": {\n      \"description\": \"Parameter scaling the quadratic penalty for offers below the proportional fair share\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The proposed share for the participant in percentage of combined earning\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"fair_perc_self\": {\n      \"description\": \"The proportional fair share for the participant in percentage, calculated as (token_self / (token_self + token_opp)) * 100\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, beta_gain=1, gamma_50=1, gamma_prop=1):\n    model_predictions = []\n    for trial in trial_data:\n        split_perc_self = trial.get(\"splitperc_self\", 0)\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        \n        # Calculate fair_perc_self\n        if (token_self + token_opp) == 0:\n            fair_perc_self = 50  # If both are 0, assume equal split is fair\n        else:\n            fair_perc_self = (token_self / (token_self + token_opp)) * 100\n\n        # Calculate utility\n        utility = (beta_gain * split_perc_self) - (gamma_50 * max(0, 50 - split_perc_self)**2) - (gamma_prop * max(0, fair_perc_self - split_perc_self)**2)\n        \n        model_predictions.append(utility)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '''\n[\n  {\n    \"ID\": 0,\n    \"group\": \"control\",\n    \"trial_number\": 1,\n    \"trial_type\": 0,\n    \"trial_role\": 1,\n    \"token_opp\": 6,\n    \"token_self\": 6,\n    \"combined_earning\": 10,\n    \"split_opp\": 5.0,\n    \"split_self\": 5.0,\n    \"splitperc_opp\": 50,\n    \"splitperc_self\": 50,\n    \"accept\": 1.0,\n    \"accepted_amount\": 5.0,\n    \"accepted_perc\": 50.0,\n    \"proposed_perc\": 50.0,\n    \"proposed_amount\": 5.0\n  },\n  {\n    \"ID\": 1,\n    \"group\": \"control\",\n    \"trial_number\": 2,\n    \"trial_type\": 0,\n    \"trial_role\": 1,\n    \"token_opp\": 6,\n    \"token_self\": 6,\n    \"combined_earning\": 10,\n    \"split_opp\": 7.0,\n    \"split_self\": 3.0,\n    \"splitperc_opp\": 70,\n    \"splitperc_self\": 30,\n    \"accept\": 0.0,\n    \"accepted_amount\": 0.0,\n    \"accepted_perc\": 0.0,\n    \"proposed_perc\": 30.0,\n    \"proposed_amount\": 3.0\n  }\n]\n'''\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n",
      "timestamp": 1746096315.561258
    }
  ],
  "learnable_parameters": {
    "beta_gain": {
      "description": "Parameter scaling the linear utility of the participant's share percentage",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "gamma_50": {
      "description": "Parameter scaling the quadratic penalty for offers below 50%",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "gamma_prop": {
      "description": "Parameter scaling the quadratic penalty for offers below the proportional fair share",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "U = beta_gain * split_perc_self - gamma_50 * max(0, 50 - split_perc_self)^2 - gamma_prop * max(0, fair_perc_self - split_perc_self)^2",
  "variable_descriptions": {
    "U": {
      "description": "Utility of accepting the proposed split for the participant",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "beta_gain": {
      "description": "Parameter scaling the linear utility of the participant's share percentage",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "gamma_50": {
      "description": "Parameter scaling the quadratic penalty for offers below 50%",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "gamma_prop": {
      "description": "Parameter scaling the quadratic penalty for offers below the proportional fair share",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "split_perc_self": {
      "description": "The proposed share for the participant in percentage of combined earning",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Number of tokens found by the participant",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "fair_perc_self": {
      "description": "The proportional fair share for the participant in percentage, calculated as (token_self / (token_self + token_opp)) * 100",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "A utility model for the responder's decision. Utility of acceptance is calculated as a linear gain from the participant's proposed percentage share, minus quadratic penalties that activate specifically when the proposed share falls below two distinct fairness norms: 50% of the total pot and the participant's proportional share based on token contributions. Learnable parameters scale the sensitivity to the linear gain (beta_gain), the quadratic penalty for offers below 50% (gamma_50), and the quadratic penalty for offers below the proportional share (gamma_prop). Utility is converted to acceptance probability via a logistic function.",
  "target_variable": "accept",
  "full_reasoning": "<MODEL>\nU = beta_gain * split_perc_self - gamma_50 * max(0, 50 - split_perc_self)^2 - gamma_prop * max(0, fair_perc_self - split_perc_self)^2\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the proposed split for the participant\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_gain\": {\n      \"description\": \"Parameter scaling the linear utility of the participant's share percentage\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma_50\": {\n      \"description\": \"Parameter scaling the quadratic penalty for offers below 50%\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma_prop\": {\n      \"description\": \"Parameter scaling the quadratic penalty for offers below the proportional fair share\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The proposed share for the participant in percentage of combined earning\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n     \"fair_perc_self\": {\n      \"description\": \"The proportional fair share for the participant in percentage, calculated as (token_self / (token_self + token_opp)) * 100\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA utility model for the responder's decision. Utility of acceptance is calculated as a linear gain from the participant's proposed percentage share, minus quadratic penalties that activate specifically when the proposed share falls below two distinct fairness norms: 50% of the total pot and the participant's proportional share based on token contributions. Learnable parameters scale the sensitivity to the linear gain (beta_gain), the quadratic penalty for offers below 50% (gamma_50), and the quadratic penalty for offers below the proportional share (gamma_prop). Utility is converted to acceptance probability via a logistic function.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: U = beta_gain * split_perc_self - gamma_50 * max(0, 50 - split_perc_self)^2 - gamma_prop * max(0, fair_perc_self - split_perc_self)^2\nSummary: A utility model for the responder's decision. Utility of acceptance is calculated as a linear gain from the participant's proposed percentage share, minus quadratic penalties that activate specifically when the proposed share falls below two distinct fairness norms: 50% of the total pot and the participant's proportional share based on token contributions. Learnable parameters scale the sensitivity to the linear gain (beta_gain), the quadratic penalty for offers below 50% (gamma_50), and the quadratic penalty for offers below the proportional share (gamma_prop). Utility is converted to acceptance probability via a logistic function.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, beta_gain=1, gamma_50=1, gamma_prop=1):\n    model_predictions = []\n    for trial in trial_data:\n        split_perc_self = trial.get(\"splitperc_self\", 0)\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        \n        # Calculate fair_perc_self\n        if (token_self + token_opp) == 0:\n            fair_perc_self = 50  # If both are 0, assume equal split is fair\n        else:\n            fair_perc_self = (token_self / (token_self + token_opp)) * 100\n\n        # Calculate utility\n        utility = (beta_gain * split_perc_self) - (gamma_50 * max(0, 50 - split_perc_self)**2) - (gamma_prop * max(0, fair_perc_self - split_perc_self)**2)\n        \n        model_predictions.append(utility)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.5341880341880342,
  "group_accuracies": {
    "Control": 0.4844961240310077,
    "Cocaine": 0.5787037037037037
  },
  "group_parameter_averages": {
    "Control": {
      "beta_gain": 57.920983253929606,
      "gamma_50": 26.29327441759046,
      "gamma_prop": 47.694235013720615
    },
    "Cocaine": {
      "beta_gain": 53.45880394367468,
      "gamma_50": 43.14946582742548,
      "gamma_prop": 46.29206990208409
    }
  },
  "fitting_results": [
    {
      "beta_gain": 43.74081737956137,
      "gamma_50": 41.18910617527484,
      "gamma_prop": 36.23210682053438,
      "success": true,
      "log_likelihood": -23.025850926440484,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 75.25271458234086,
      "gamma_50": 26.855811862034574,
      "gamma_prop": 71.9392078059906,
      "success": true,
      "log_likelihood": -322.36191301696664,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 39.51144743779735,
      "gamma_50": 78.1994883003684,
      "gamma_prop": 94.84759189341436,
      "success": true,
      "log_likelihood": -391.43946580708797,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 44.98473999142292,
      "gamma_50": 9.039882284018685,
      "gamma_prop": 96.5886373198835,
      "success": true,
      "log_likelihood": -253.2843602268451,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 54.15149151390503,
      "gamma_50": 17.609863326591878,
      "gamma_prop": 0.38527934649983386,
      "success": true,
      "log_likelihood": -253.28436022684522,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 65.820207947873,
      "gamma_50": 1.749100565170536,
      "gamma_prop": 22.974044620833045,
      "success": true,
      "log_likelihood": -299.336062086926,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 1.1167291295225201,
      "gamma_50": 50.37561493334684,
      "gamma_prop": 55.21505559077025,
      "success": true,
      "log_likelihood": -782.8789316177758,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.05555555555555555,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 77.6756416608379,
      "gamma_50": 3.967290427947856,
      "gamma_prop": 58.96486692412033,
      "success": true,
      "log_likelihood": -368.4136148770475,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 77.84329268353065,
      "gamma_50": 30.86759754795897,
      "gamma_prop": 30.809177224736896,
      "success": true,
      "log_likelihood": -736.8272297576988,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.1111111111111111,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 83.64320757885021,
      "gamma_50": 21.120838429320887,
      "gamma_prop": 10.231449302815532,
      "success": true,
      "log_likelihood": -207.23265836676416,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 86.11364022652207,
      "gamma_50": 61.54809373792251,
      "gamma_prop": 54.385144407392275,
      "success": true,
      "log_likelihood": -322.3619130169665,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 6.662936823615951,
      "gamma_50": 65.93616026738829,
      "gamma_prop": 68.76540142325752,
      "success": true,
      "log_likelihood": -46.05170185648087,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 29.164756196083463,
      "gamma_50": 3.087362693635032,
      "gamma_prop": 65.5591912001977,
      "success": true,
      "log_likelihood": -253.28436022684514,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 70.01093987310757,
      "gamma_50": 56.95679931955908,
      "gamma_prop": 63.955677561068455,
      "success": true,
      "log_likelihood": -782.8789316177758,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.05555555555555555,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 68.18608461018613,
      "gamma_50": 19.341002793845497,
      "gamma_prop": 59.18257019065633,
      "success": true,
      "log_likelihood": -736.8272297576949,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.1111111111111111,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 10.888706862049514,
      "gamma_50": 1.9380313122345116,
      "gamma_prop": 60.93736543879468,
      "success": true,
      "log_likelihood": -736.8272297576949,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.1111111111111111,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 95.88076024992822,
      "gamma_50": 2.4211430311985027,
      "gamma_prop": 70.4040612616403,
      "success": true,
      "log_likelihood": -644.7238260375331,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.2222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 60.00053577668027,
      "gamma_50": 21.741363293367254,
      "gamma_prop": 62.326680683737024,
      "success": true,
      "log_likelihood": -621.6979751074927,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.25,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 71.78612487575745,
      "gamma_50": 2.077816855183401,
      "gamma_prop": 22.6350586308953,
      "success": true,
      "log_likelihood": -506.5687204572903,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 82.81087719085426,
      "gamma_50": 14.234117425671567,
      "gamma_prop": 36.76861373106862,
      "success": true,
      "log_likelihood": -736.8272297576949,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.1111111111111111,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 90.68710464405552,
      "gamma_50": 24.669611056635897,
      "gamma_prop": 91.62844547050472,
      "success": true,
      "log_likelihood": -368.41361487704745,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 61.418802624318616,
      "gamma_50": 78.97876593547875,
      "gamma_prop": 3.1319329435757215,
      "success": true,
      "log_likelihood": -644.723826037533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.2222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 22.578545386259762,
      "gamma_50": 29.507777713525297,
      "gamma_prop": 84.52234323166415,
      "success": true,
      "log_likelihood": -253.28436022684514,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 43.66764914334003,
      "gamma_50": 9.285091119010369,
      "gamma_prop": 54.22783267952824,
      "success": true,
      "log_likelihood": -345.38776394700693,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 71.35002916131454,
      "gamma_50": 35.065646202459554,
      "gamma_prop": 17.755259843296912,
      "success": true,
      "log_likelihood": -368.4136148770475,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 71.99577856096376,
      "gamma_50": 4.993738246097323,
      "gamma_prop": 90.01277219675168,
      "success": true,
      "log_likelihood": -391.43946580708797,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 49.64166904365749,
      "gamma_50": 0.27136931860601843,
      "gamma_prop": 14.27145074288938,
      "success": true,
      "log_likelihood": -207.2326583667642,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 45.65742372123892,
      "gamma_50": 10.372028960868096,
      "gamma_prop": 16.76684767955966,
      "success": true,
      "log_likelihood": -138.15510557664285,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 67.99921657816571,
      "gamma_50": 15.17575804420883,
      "gamma_prop": 53.382107984183754,
      "success": true,
      "log_likelihood": -644.7238260375331,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.2222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 75.49832902721731,
      "gamma_50": 21.11275143953796,
      "gamma_prop": 6.079399334528535,
      "success": true,
      "log_likelihood": -483.5428695272498,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 90.28645359447228,
      "gamma_50": 18.10289122173917,
      "gamma_prop": 78.12336200517646,
      "success": true,
      "log_likelihood": -736.8272297576949,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.1111111111111111,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 48.135864624816094,
      "gamma_50": 47.86214286101335,
      "gamma_prop": 76.2360747987607,
      "success": true,
      "log_likelihood": -23.025850926440466,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 1.1167938981281211,
      "gamma_50": 18.515596425508697,
      "gamma_prop": 47.82860002943876,
      "success": true,
      "log_likelihood": -299.3360620869262,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 84.96363439518916,
      "gamma_50": 48.429135186134346,
      "gamma_prop": 14.107899178806827,
      "success": true,
      "log_likelihood": -253.284360226845,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 90.54578776743573,
      "gamma_50": 13.142191150602455,
      "gamma_prop": 29.834403650404962,
      "success": true,
      "log_likelihood": -736.8272297576948,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.1111111111111111,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 57.98742720507316,
      "gamma_50": 79.11166743451274,
      "gamma_prop": 7.1653363246939605,
      "success": true,
      "log_likelihood": -460.51701859720936,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 77.48529796288503,
      "gamma_50": 7.144395270946746,
      "gamma_prop": 4.306124684654922,
      "success": true,
      "log_likelihood": -299.336062086926,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 49.31411555167158,
      "gamma_50": 10.88896576627022,
      "gamma_prop": 97.25928913513768,
      "success": true,
      "log_likelihood": -322.3619130169665,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 32.45667424815938,
      "gamma_50": 88.8803941984092,
      "gamma_prop": 78.03898410473413,
      "success": true,
      "log_likelihood": -506.5687204572903,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 86.76306852386985,
      "gamma_50": 22.238297611042967,
      "gamma_prop": 15.425445332164433,
      "success": true,
      "log_likelihood": -644.723826037533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.2222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 12.045545173802875,
      "gamma_50": 2.5550173492732586,
      "gamma_prop": 57.36778945542657,
      "success": true,
      "log_likelihood": -414.46531673712843,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 47.86191205988859,
      "gamma_50": 5.535595641543678,
      "gamma_prop": 43.20845080952693,
      "success": true,
      "log_likelihood": -92.10340371656186,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 65.89950443262292,
      "gamma_50": 8.515487220925744,
      "gamma_prop": 27.06477259627035,
      "success": true,
      "log_likelihood": -713.8013788276545,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.1388888888888889,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 13.348671568145132,
      "gamma_50": 87.8915829700917,
      "gamma_prop": 13.177729718340881,
      "success": true,
      "log_likelihood": -414.46531673712843,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 33.37121142027149,
      "gamma_50": 85.15189852248886,
      "gamma_prop": 2.0580082170404634,
      "success": true,
      "log_likelihood": -437.4911676671689,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 89.78579514687668,
      "gamma_50": 28.66623453141677,
      "gamma_prop": 27.415895559036784,
      "success": true,
      "log_likelihood": -506.5687204572903,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 42.19565588007173,
      "gamma_50": 58.86192695633924,
      "gamma_prop": 6.165954563520259,
      "success": true,
      "log_likelihood": -368.41361487704745,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 60.28258694341366,
      "gamma_50": 12.2628989328051,
      "gamma_prop": 17.132879276340418,
      "success": true,
      "log_likelihood": -230.25850929680468,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 10.344894621977307,
      "gamma_50": 56.134937211080825,
      "gamma_prop": 96.93190822592673,
      "success": true,
      "log_likelihood": -299.3360620869261,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 75.36427002083784,
      "gamma_50": 36.6968496600454,
      "gamma_prop": 65.29437799425075,
      "success": true,
      "log_likelihood": -391.43946580708797,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 55.773446147620355,
      "gamma_50": 29.701686772529857,
      "gamma_prop": 35.330049478438816,
      "success": true,
      "log_likelihood": -529.5945713873307,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 24.698581334032134,
      "gamma_50": 23.115987628627778,
      "gamma_prop": 3.2168247284864226,
      "success": true,
      "log_likelihood": -46.0517018564809,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 91.3794905553975,
      "gamma_50": 14.193060691005922,
      "gamma_prop": 33.403743968991485,
      "success": true,
      "log_likelihood": -391.439465807088,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 100.0,
      "gamma_50": 0.0,
      "gamma_prop": 86.05386730317066,
      "success": true,
      "log_likelihood": -391.43946580708797,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 46.260995710682785,
      "gamma_50": 10.522747277161793,
      "gamma_prop": 33.262562747952714,
      "success": true,
      "log_likelihood": -230.25850929680456,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 63.2350296844562,
      "gamma_50": 33.00856436822725,
      "gamma_prop": 75.73241734024691,
      "success": true,
      "log_likelihood": -230.25850929680468,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 59.66433308458321,
      "gamma_50": 67.79987325054184,
      "gamma_prop": 46.92090099887972,
      "success": true,
      "log_likelihood": -184.20680743672372,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 19.800441861151807,
      "gamma_50": 50.91727126486039,
      "gamma_prop": 37.8631217534859,
      "success": true,
      "log_likelihood": -690.775527897614,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.16666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 16.612416669719863,
      "gamma_50": 61.50898213246987,
      "gamma_prop": 94.79044267771674,
      "success": true,
      "log_likelihood": -46.05170185648094,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 71.80549581299232,
      "gamma_50": 26.952917839919067,
      "gamma_prop": 71.8015613194341,
      "success": true,
      "log_likelihood": -575.6462732474117,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 59.19110294969159,
      "gamma_50": 11.30802329732019,
      "gamma_prop": 11.562576961481042,
      "success": true,
      "log_likelihood": -368.41361487704745,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 91.50782505483488,
      "gamma_50": 16.76545615131645,
      "gamma_prop": 73.52774753988471,
      "success": true,
      "log_likelihood": -322.36191301696664,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 53.24921417991856,
      "gamma_50": 47.348297175134824,
      "gamma_prop": 53.11905388379721,
      "success": true,
      "log_likelihood": -23.025850926440462,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 78.34180027044185,
      "gamma_50": 91.3662603824032,
      "gamma_prop": 20.168816656513798,
      "success": true,
      "log_likelihood": -322.3619130169666,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 55.94946328194481,
      "gamma_50": 12.475407133867034,
      "gamma_prop": 82.36488944574091,
      "success": true,
      "log_likelihood": -92.10340371656179,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 73.13443608907444,
      "gamma_50": 99.98822637299325,
      "gamma_prop": 98.3138229782907,
      "success": true,
      "log_likelihood": -414.4653167371285,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 89.14052905439347,
      "gamma_50": 10.376431301111245,
      "gamma_prop": 10.732488567524479,
      "success": true,
      "log_likelihood": -552.6204223173711,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3333333333333333,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 64.23452675869214,
      "gamma_50": 12.594039088285847,
      "gamma_prop": 97.69152598576744,
      "success": true,
      "log_likelihood": -621.6979751074924,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.25,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 1.6573818772163351,
      "gamma_50": 60.899081658629726,
      "gamma_prop": 93.52813504169767,
      "success": true,
      "log_likelihood": -414.4653167371284,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 99.2200290416081,
      "gamma_50": 36.607009177857776,
      "gamma_prop": 80.67310331298577,
      "success": true,
      "log_likelihood": -667.7496769675735,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.19444444444444445,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 62.77356163689897,
      "gamma_50": 21.8236058351185,
      "gamma_prop": 60.305453504239324,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 94.71711416166211,
      "gamma_50": 62.63697216761221,
      "gamma_prop": 29.56887158532514,
      "success": true,
      "log_likelihood": -69.07755278652141,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 99.27224674550386,
      "gamma_50": 18.208680073277993,
      "gamma_prop": 10.987979020007966,
      "success": true,
      "log_likelihood": -276.3102111568856,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 8.925996895832267,
      "gamma_50": 72.3976722945551,
      "gamma_prop": 1.500476997000344,
      "success": true,
      "log_likelihood": -575.6462732474117,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 15.910970913816481,
      "gamma_50": 95.08101280390896,
      "gamma_prop": 30.533582822497063,
      "success": true,
      "log_likelihood": -414.4653167371284,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 16.102405053995604,
      "gamma_50": 3.5564691443902396,
      "gamma_prop": 21.21026940670462,
      "success": true,
      "log_likelihood": -483.54286952724976,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 67.19192373355067,
      "gamma_50": 83.84336007311319,
      "gamma_prop": 61.97819325413426,
      "success": true,
      "log_likelihood": -736.8272297576949,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.1111111111111111,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 12.015971852765217,
      "gamma_50": 98.4438467901519,
      "gamma_prop": 34.83976778130262,
      "success": true,
      "log_likelihood": -46.05170185648095,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 35.325030674518054,
      "gamma_50": 4.06403893623305,
      "gamma_prop": 87.18443096683409,
      "success": true,
      "log_likelihood": -414.4653167371284,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 53.387470004026724,
      "gamma_50": 50.87014089398851,
      "gamma_prop": 0.17780516539960267,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 86.43987190522725,
      "gamma_50": 86.77213297228843,
      "gamma_prop": 91.01340471303013,
      "success": true,
      "log_likelihood": -391.43946580708797,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 66.21512532833978,
      "gamma_50": 17.88601067163398,
      "gamma_prop": 39.70111739799373,
      "success": true,
      "log_likelihood": -667.7496769675735,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.19444444444444445,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 52.27005262109608,
      "gamma_50": 95.42745791043973,
      "gamma_prop": 11.124616168036871,
      "success": true,
      "log_likelihood": -92.10340371656187,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 19.390866550415296,
      "gamma_50": 98.31276107014376,
      "gamma_prop": 32.86364590286165,
      "success": true,
      "log_likelihood": -368.41361487704745,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 88.87145755650327,
      "gamma_50": 9.511152536908462,
      "gamma_prop": 6.26636362444124,
      "success": true,
      "log_likelihood": -414.46531673712843,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 8.735135016201612,
      "gamma_50": 93.06728457666232,
      "gamma_prop": 62.874563029985545,
      "success": true,
      "log_likelihood": -46.05170185648093,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 94.01941208694699,
      "gamma_50": 2.8865934563292672,
      "gamma_prop": 31.19880766295524,
      "success": true,
      "log_likelihood": -345.387763947007,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 74.37351507234233,
      "gamma_50": 4.119254703283115,
      "gamma_prop": 46.49685140325387,
      "success": true,
      "log_likelihood": -92.10340371656179,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 15.77443318454186,
      "gamma_50": 0.5776368394368459,
      "gamma_prop": 95.26536491566995,
      "success": true,
      "log_likelihood": -690.775527897614,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.16666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 29.603842947077975,
      "gamma_50": 53.76599202592149,
      "gamma_prop": 7.175204085117171,
      "success": true,
      "log_likelihood": -345.38776394700693,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 25.156560335076104,
      "gamma_50": 14.806632192494861,
      "gamma_prop": 91.51817964830218,
      "success": true,
      "log_likelihood": -529.5945713873307,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "beta_gain": {
        "r": 0.14154460119612688,
        "p": 0.16010049261703685
      },
      "gamma_50": {
        "r": 0.1134330708491668,
        "p": 0.26114004754625875
      },
      "gamma_prop": {
        "r": -0.05192887942240071,
        "p": 0.6078768594164029
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 783.0021726156795,
  "bic_Control": 865.3844657464147,
  "bic_Cocaine": 709.2013683527291,
  "bic_results": {
    "average_bic": 783.0021726156795,
    "individual_bics": [
      56.802258668249294,
      655.4743828493016,
      793.6294884295443,
      517.3192772690586,
      517.3192772690588,
      609.4226809892203,
      1576.50842005092,
      747.5777865694633,
      1484.4050163307659,
      425.21587354889664,
      655.4743828493014,
      102.85396052833006,
      517.3192772690586,
      1576.50842005092,
      1484.4050163307581,
      1484.4050163307581,
      1300.1982088904344,
      1254.1465070303536,
      1023.8879977299489,
      1484.4050163307581,
      747.5777865694632,
      1300.1982088904342,
      517.3192772690586,
      701.5260847093822,
      747.5777865694633,
      793.6294884295443,
      425.21587354889675,
      287.06076796865403,
      1300.1982088904344,
      977.836295869868,
      1484.4050163307581,
      56.802258668249266,
      609.4226809892207,
      517.3192772690584,
      1484.405016330758,
      931.784594009787,
      609.4226809892203,
      655.4743828493014,
      1023.8879977299489,
      1300.1982088904342,
      839.6811902896252,
      194.95736424849204,
      1438.3533144706773,
      839.6811902896252,
      885.7328921497061,
      1023.8879977299489,
      747.5777865694632,
      471.2675754089777,
      609.4226809892206,
      793.6294884295443,
      1069.9396995900297,
      102.85396052833013,
      793.6294884295444,
      793.6294884295443,
      471.26757540897745,
      471.2675754089777,
      379.16417168881577,
      1392.3016126105963,
      102.8539605283302,
      1162.0431033101918,
      747.5777865694632,
      655.4743828493016,
      56.80225866824925,
      655.4743828493015,
      194.9573642484919,
      839.6811902896253,
      1115.9914014501105,
      1254.1465070303532,
      839.6811902896251,
      1346.2499107505153,
      10.75055680816833,
      148.90566238841114,
      563.3709791291395,
      1162.0431033101918,
      839.6811902896251,
      977.8362958698679,
      1484.4050163307581,
      102.85396052833023,
      839.6811902896251,
      10.75055680816833,
      793.6294884295443,
      1346.2499107505153,
      194.95736424849207,
      747.5777865694632,
      839.6811902896252,
      102.85396052833019,
      701.5260847093823,
      194.9573642484919,
      1392.3016126105963,
      701.5260847093822,
      1069.9396995900297
    ],
    "group_enabled": true,
    "group_bics": {
      "Control": [
        56.802258668249294,
        655.4743828493016,
        793.6294884295443,
        517.3192772690586,
        517.3192772690588,
        609.4226809892203,
        1576.50842005092,
        747.5777865694633,
        1484.4050163307659,
        425.21587354889664,
        655.4743828493014,
        102.85396052833006,
        517.3192772690586,
        1576.50842005092,
        1484.4050163307581,
        1484.4050163307581,
        1300.1982088904344,
        1254.1465070303536,
        1023.8879977299489,
        1484.4050163307581,
        747.5777865694632,
        1300.1982088904342,
        517.3192772690586,
        701.5260847093822,
        747.5777865694633,
        793.6294884295443,
        425.21587354889675,
        287.06076796865403,
        1300.1982088904344,
        977.836295869868,
        1484.4050163307581,
        56.802258668249266,
        609.4226809892207,
        517.3192772690584,
        1484.405016330758,
        931.784594009787,
        609.4226809892203,
        655.4743828493014,
        1023.8879977299489,
        1300.1982088904342,
        839.6811902896252,
        194.95736424849204,
        1438.3533144706773
      ],
      "Cocaine": [
        839.6811902896252,
        885.7328921497061,
        1023.8879977299489,
        747.5777865694632,
        471.2675754089777,
        609.4226809892206,
        793.6294884295443,
        1069.9396995900297,
        102.85396052833013,
        793.6294884295444,
        793.6294884295443,
        471.26757540897745,
        471.2675754089777,
        379.16417168881577,
        1392.3016126105963,
        102.8539605283302,
        1162.0431033101918,
        747.5777865694632,
        655.4743828493016,
        56.80225866824925,
        655.4743828493015,
        194.9573642484919,
        839.6811902896253,
        1115.9914014501105,
        1254.1465070303532,
        839.6811902896251,
        1346.2499107505153,
        10.75055680816833,
        148.90566238841114,
        563.3709791291395,
        1162.0431033101918,
        839.6811902896251,
        977.8362958698679,
        1484.4050163307581,
        102.85396052833023,
        839.6811902896251,
        10.75055680816833,
        793.6294884295443,
        1346.2499107505153,
        194.95736424849207,
        747.5777865694632,
        839.6811902896252,
        102.85396052833019,
        701.5260847093823,
        194.9573642484919,
        1392.3016126105963,
        701.5260847093822,
        1069.9396995900297
      ]
    },
    "num_parameters": 3,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- beta_gain: r = 0.142\n- gamma_50: r = 0.113\n- gamma_prop: r = -0.052",
  "previous_models": [
    "Specification: U = beta_gain * split_perc_self - gamma_50 * max(0, 50 - split_perc_self)^2 - gamma_prop * max(0, fair_perc_self - split_perc_self)^2\nSummary: A utility model for the responder's decision. Utility of acceptance is calculated as a linear gain from the participant's proposed percentage share, minus quadratic penalties that activate specifically when the proposed share falls below two distinct fairness norms: 50% of the total pot and the participant's proportional share based on token contributions. Learnable parameters scale the sensitivity to the linear gain (beta_gain), the quadratic penalty for offers below 50% (gamma_50), and the quadratic penalty for offers below the proportional share (gamma_prop). Utility is converted to acceptance probability via a logistic function.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 783.0021726156795\nOverall Accuracy: 0.5342\nGroup Accuracies:\n- Control: 0.4845\n- Cocaine: 0.5787\n\nParameter Recovery:\n- beta_gain: r = 0.142\n- gamma_50: r = 0.113\n- gamma_prop: r = -0.052"
  ]
}