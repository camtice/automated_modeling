{
  "task_description": "In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "Okay, here are the improved instructions for the next run, focusing intensely on designing a model structure that ensures parameter identifiability for *both* learnable parameters.\n\nInstructions for Run 60 of 100:\n\nThe **unwavering primary objective remains achieving parameter recovery >= 0.7 for *all* learnable parameters**. This is the critical benchmark for model usability. While improved BIC (lower is better) and accuracy (higher is better) are valuable secondary goals, they must not come at the expense of robust parameter recovery. A model with excellent fit but poor parameter identifiability is not suitable for drawing meaningful conclusions about the underlying cognitive processes.\n\nThe previous attempts, including the one exploring an asymmetric piecewise structure with a squared unfairness term, have consistently struggled to achieve sufficient parameter identifiability for *both* of the two learnable parameters. This suggests that the simple additive or piecewise linear/squared structures explored so far, even with asymmetric domains, do not create mathematically distinct enough contributions from the two parameters to allow for their unique estimation from the data.\n\nWe need to find a mathematical structure for utility, still using exactly **2 learnable parameters**, where their influence on responder decisions (`trial_role == 1`) is fundamentally more separable and distinguishable than in previous models. This requires exploring mathematical forms beyond simple linear combinations or squared deviations.\n\nBased on the persistent difficulty, focus your exploration for Run 60 on designing a utility function where the influence of the two parameters is inherently distinct through more complex or interactive non-linearities.\n\nConsider the following strategies to enhance identifiability by making the two parameters' contributions qualitatively different:\n\n*   **Explore Multiplicative Interactions:** Instead of purely additive terms, consider models where one parameter modulates the *relationship* between different factors. For example, a parameter could scale the *product* of a value term and a fairness term, or scale a non-linear function that combines value and fairness information.\n*   **Non-linear Functions of Ratios or Deviations:** If using fairness measures like the ratio (`split_perc_self / fair_perc_self_calc`) or deviation (`split_perc_self - fair_perc_self_calc`), explore scaling *different* non-linear transformations of these measures with the two parameters. Avoid simple linear or squared terms if they seem to overlap in influence. Consider transformations like cubic terms, logarithms, exponentials, or sigmoids applied to the fairness measure, scaled by a parameter.\n*   **Piecewise Functions with Distinct Forms:** If using a piecewise structure (e.g., one rule for fair/favorable offers, another for unfair), ensure the mathematical form of the utility function is fundamentally different across the pieces, and that the parameters scale terms whose influence is unique to that piece and distinct from terms in other pieces.\n*   **Parameter Influencing Shape/Slope:** Design a model where one parameter primarily shifts or scales the utility function overall, while the second parameter primarily affects its *shape*, *slope*, or *curvature* with respect to `split_perc_self` or the fairness measure, making their effects distinguishable.\n\nThe goal is to create a structure where changes in the first parameter affect utility differently across the range of inputs compared to changes in the second parameter. **Avoid structures where, for any significant portion of the data, the utility is simply a linear combination of input variables scaled by the two parameters.**\n\n*   **Key Inputs & Calculated Variables:** Use `split_perc_self`, `token_self`, `token_opp` as data variables. Calculate necessary intermediate variables like `sum_tokens`, `fair_perc_self_calc`, and any other derived measures of value, fairness, or their interactions as needed by your model structure. Ensure `fair_perc_self_calc` is handled correctly when `sum_tokens` is 0. Use a small epsilon for numerical stability where necessary (e.g., in denominators, logarithms).\n*   **Model Formula:** Define the utility (`U`). Include calculation steps for necessary derived variables *before* the final formula for `U`. Use clear mathematical notation within the <MODEL> tags. Only the formula should be inside these tags.\n*   **Learnable Parameters:** Your model *must* have exactly **2 learnable parameters**. Choose descriptive names suitable for Python code (e.g., `beta_value`, `beta_fairness_sensitivity`, or names reflecting their specific roles in your new structure). Define clear, generous, finite numerical bounds (e.g., [-10.0, 10.0] or wider/narrower if appropriate).\n*   **Calculated Variables:** Ensure all calculated variables used in the model formula (including U) are included in your <VARIABLES> descriptions with `source: \"calculated\"`. Include descriptions for all data variables used as inputs (`token_self`, `token_opp`, `split_perc_self`) with `source: \"data\"`. Provide detailed descriptions for *calculated* variables, explaining how they are derived and what they represent.\n*   **Variable Descriptions:** Provide variable descriptions in JSON format between <VARIABLES> tags for *all* variables used in the <MODEL> formula (data, calculated, learnable). Include source, range (with inclusive flags), distribution (if applicable), and learnable status. Use `split_perc_self` as the variable name for the participant's proposed percentage share percentage.\n*   **Target Variable:** Specify \"accept\" as the target variable using <target_variable> tags.\n*   **Summary:** Provide a concise summary between <SUMMARY> tags. Describe the model's core idea and, crucially, explain *how its specific mathematical structure (e.g., the use of a multiplicative term, a novel non-linear function, or a specific piecewise definition) is designed to ensure parameter identifiability for *both* learnable parameters*, making their roles mathematically distinct from previously attempted additive or simple piecewise linear/squared models.\n\nAvailable Data Variables:\n- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.\n(Note: Use `split_perc_self` for the participant's proposed percentage share percentage).\n\nPlease think through this step by step, then provide your model specification and variable descriptions. Remember that robust parameter identifiability for *both* learnable parameters is the absolute priority. Your goal is to find a mathematical structure where both parameters can be uniquely and reliably estimated from the data by ensuring their influences are clearly distinguishable across the range of possible offers and fairness conditions. Be creative in designing the mathematical relationship between inputs, parameters, and utility to achieve this separation, moving beyond simple linear or squared additive components.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: Okay, here are the improved instructions for the next run, focusing intensely on designing a model structure that ensures parameter identifiability for *both* learnable parameters.\n\nInstructions for Run 60 of 100:\n\nThe **unwavering primary objective remains achieving parameter recovery >= 0.7 for *all* learnable parameters**. This is the critical benchmark for model usability. While improved BIC (lower is better) and accuracy (higher is better) are valuable secondary goals, they must not come at the expense of robust parameter recovery. A model with excellent fit but poor parameter identifiability is not suitable for drawing meaningful conclusions about the underlying cognitive processes.\n\nThe previous attempts, including the one exploring an asymmetric piecewise structure with a squared unfairness term, have consistently struggled to achieve sufficient parameter identifiability for *both* of the two learnable parameters. This suggests that the simple additive or piecewise linear/squared structures explored so far, even with asymmetric domains, do not create mathematically distinct enough contributions from the two parameters to allow for their unique estimation from the data.\n\nWe need to find a mathematical structure for utility, still using exactly **2 learnable parameters**, where their influence on responder decisions (`trial_role == 1`) is fundamentally more separable and distinguishable than in previous models. This requires exploring mathematical forms beyond simple linear combinations or squared deviations.\n\nBased on the persistent difficulty, focus your exploration for Run 60 on designing a utility function where the influence of the two parameters is inherently distinct through more complex or interactive non-linearities.\n\nConsider the following strategies to enhance identifiability by making the two parameters' contributions qualitatively different:\n\n*   **Explore Multiplicative Interactions:** Instead of purely additive terms, consider models where one parameter modulates the *relationship* between different factors. For example, a parameter could scale the *product* of a value term and a fairness term, or scale a non-linear function that combines value and fairness information.\n*   **Non-linear Functions of Ratios or Deviations:** If using fairness measures like the ratio (`split_perc_self / fair_perc_self_calc`) or deviation (`split_perc_self - fair_perc_self_calc`), explore scaling *different* non-linear transformations of these measures with the two parameters. Avoid simple linear or squared terms if they seem to overlap in influence. Consider transformations like cubic terms, logarithms, exponentials, or sigmoids applied to the fairness measure, scaled by a parameter.\n*   **Piecewise Functions with Distinct Forms:** If using a piecewise structure (e.g., one rule for fair/favorable offers, another for unfair), ensure the mathematical form of the utility function is fundamentally different across the pieces, and that the parameters scale terms whose influence is unique to that piece and distinct from terms in other pieces.\n*   **Parameter Influencing Shape/Slope:** Design a model where one parameter primarily shifts or scales the utility function overall, while the second parameter primarily affects its *shape*, *slope*, or *curvature* with respect to `split_perc_self` or the fairness measure, making their effects distinguishable.\n\nThe goal is to create a structure where changes in the first parameter affect utility differently across the range of inputs compared to changes in the second parameter. **Avoid structures where, for any significant portion of the data, the utility is simply a linear combination of input variables scaled by the two parameters.**\n\n*   **Key Inputs & Calculated Variables:** Use `split_perc_self`, `token_self`, `token_opp` as data variables. Calculate necessary intermediate variables like `sum_tokens`, `fair_perc_self_calc`, and any other derived measures of value, fairness, or their interactions as needed by your model structure. Ensure `fair_perc_self_calc` is handled correctly when `sum_tokens` is 0. Use a small epsilon for numerical stability where necessary (e.g., in denominators, logarithms).\n*   **Model Formula:** Define the utility (`U`). Include calculation steps for necessary derived variables *before* the final formula for `U`. Use clear mathematical notation within the <MODEL> tags. Only the formula should be inside these tags.\n*   **Learnable Parameters:** Your model *must* have exactly **2 learnable parameters**. Choose descriptive names suitable for Python code (e.g., `beta_value`, `beta_fairness_sensitivity`, or names reflecting their specific roles in your new structure). Define clear, generous, finite numerical bounds (e.g., [-10.0, 10.0] or wider/narrower if appropriate).\n*   **Calculated Variables:** Ensure all calculated variables used in the model formula (including U) are included in your <VARIABLES> descriptions with `source: \"calculated\"`. Include descriptions for all data variables used as inputs (`token_self`, `token_opp`, `split_perc_self`) with `source: \"data\"`. Provide detailed descriptions for *calculated* variables, explaining how they are derived and what they represent.\n*   **Variable Descriptions:** Provide variable descriptions in JSON format between <VARIABLES> tags for *all* variables used in the <MODEL> formula (data, calculated, learnable). Include source, range (with inclusive flags), distribution (if applicable), and learnable status. Use `split_perc_self` as the variable name for the participant's proposed percentage share percentage.\n*   **Target Variable:** Specify \"accept\" as the target variable using <target_variable> tags.\n*   **Summary:** Provide a concise summary between <SUMMARY> tags. Describe the model's core idea and, crucially, explain *how its specific mathematical structure (e.g., the use of a multiplicative term, a novel non-linear function, or a specific piecewise definition) is designed to ensure parameter identifiability for *both* learnable parameters*, making their roles mathematically distinct from previously attempted additive or simple piecewise linear/squared models.\n\nAvailable Data Variables:\n- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.\n(Note: Use `split_perc_self` for the participant's proposed percentage share percentage).\n\nPlease think through this step by step, then provide your model specification and variable descriptions. Remember that robust parameter identifiability for *both* learnable parameters is the absolute priority. Your goal is to find a mathematical structure where both parameters can be uniquely and reliably estimated from the data by ensuring their influences are clearly distinguishable across the range of possible offers and fairness conditions. Be creative in designing the mathematical relationship between inputs, parameters, and utility to achieve this separation, moving beyond simple linear or squared additive components.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<MODEL>\nsum_tokens = token_self + token_opp\nfair_perc_self_calc = IF(sum_tokens == 0, 50.0, (token_self / sum_tokens) * 100.0)\ndeviation_from_fairness = split_perc_self - fair_perc_self_calc\nU = beta_value * split_perc_self + beta_fairness_interaction * split_perc_self * deviation_from_fairness\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 20,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 20,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The proposed share for the participant in percentage (0-100).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"sum_tokens\": {\n      \"description\": \"Total number of tokens found by both participant and opponent (token_self + token_opp).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 40,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fair_perc_self_calc\": {\n      \"description\": \"Calculated 'fair' percentage share for the participant based on their token contribution. Calculated as (token_self / sum_tokens) * 100.0. If sum_tokens is 0, it is set to 50.0.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"deviation_from_fairness\": {\n      \"description\": \"The difference between the proposed percentage share for the participant and the calculated fair percentage share (split_perc_self - fair_perc_self_calc).\",\n      \"range\": {\n        \"min\": -100.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_value\": {\n      \"description\": \"Parameter scaling the direct influence of the proposed share percentage on utility.\",\n      \"range\": {\n        \"min\": -10.0,\n        \"max\": 10.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_fairness_interaction\": {\n      \"description\": \"Parameter scaling the multiplicative interaction between the proposed share percentage and the deviation from the calculated fair share. This term modulates the value of the offer based on its fairness.\",\n      \"range\": {\n        \"min\": -10.0,\n        \"max\": 10.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Utility of accepting the proposed offer.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA utility model predicting responder acceptance based on two factors: the percentage offered to the participant and the interaction between this percentage and the deviation from a contribution-based fairness norm. Utility is calculated as a linear combination of the proposed percentage scaled by 'beta_value' and a multiplicative term combining the proposed percentage and the deviation from fairness, scaled by 'beta_fairness_interaction'. This multiplicative structure is designed to ensure distinct contributions from the two learnable parameters ('beta_value' captures general value sensitivity, 'beta_fairness_interaction' captures how fairness deviation modulates this value sensitivity), thereby enhancing parameter identifiability compared to models using only additive terms or simpler piecewise functions.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['beta_value', 'beta_fairness_interaction']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                sum_tokens = token_self + token_opp\nfair_perc_self_calc = IF(sum_tokens == 0, 50.0, (token_self / sum_tokens) * 100.0)\ndeviation_from_fairness = split_perc_self - fair_perc_self_calc\nU = beta_value * split_perc_self + beta_fairness_interaction * split_perc_self * deviation_from_fairness\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 20,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 20,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The proposed share for the participant in percentage (0-100).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"sum_tokens\": {\n      \"description\": \"Total number of tokens found by both participant and opponent (token_self + token_opp).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 40,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fair_perc_self_calc\": {\n      \"description\": \"Calculated 'fair' percentage share for the participant based on their token contribution. Calculated as (token_self / sum_tokens) * 100.0. If sum_tokens is 0, it is set to 50.0.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"deviation_from_fairness\": {\n      \"description\": \"The difference between the proposed percentage share for the participant and the calculated fair percentage share (split_perc_self - fair_perc_self_calc).\",\n      \"range\": {\n        \"min\": -100.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_value\": {\n      \"description\": \"Parameter scaling the direct influence of the proposed share percentage on utility.\",\n      \"range\": {\n        \"min\": -10.0,\n        \"max\": 10.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_fairness_interaction\": {\n      \"description\": \"Parameter scaling the multiplicative interaction between the proposed share percentage and the deviation from the calculated fair share. This term modulates the value of the offer based on its fairness.\",\n      \"range\": {\n        \"min\": -10.0,\n        \"max\": 10.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Utility of accepting the proposed offer.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, beta_value=1, beta_fairness_interaction=1):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        split_perc_self = trial.get(\"splitperc_self\", 0)\n\n        sum_tokens = token_self + token_opp\n\n        if sum_tokens == 0:\n            fair_perc_self_calc = 50.0\n        else:\n            fair_perc_self_calc = (token_self / sum_tokens) * 100.0\n\n        deviation_from_fairness = split_perc_self - fair_perc_self_calc\n\n        U = beta_value * split_perc_self + beta_fairness_interaction * split_perc_self * deviation_from_fairness\n        model_predictions.append(U)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '[{\"ID\": 1, \"group\": \"control\", \"trial_number\": 1, \"trial_type\": 1, \"trial_role\": 2, \"token_opp\": 10, \"token_self\": 10, \"combined_earning\": 20, \"split_opp\": 10.0, \"split_self\": 10.0, \"splitperc_opp\": 50, \"splitperc_self\": 50, \"accept\": 1.0, \"accepted_amount\": 10.0, \"accepted_perc\": 50.0, \"proposed_perc\": 50.0, \"proposed_amount\": 10.0}, {\"ID\": 2, \"group\": \"control\", \"trial_number\": 2, \"trial_type\": 1, \"trial_role\": 2, \"token_opp\": 10, \"token_self\": 10, \"combined_earning\": 20, \"split_opp\": 14.0, \"split_self\": 6.0, \"splitperc_opp\": 70, \"splitperc_self\": 30, \"accept\": 0.0, \"accepted_amount\": 0.0, \"accepted_perc\": 0.0, \"proposed_perc\": 30.0, \"proposed_amount\": 6.0}, {\"ID\": 3, \"group\": \"control\", \"trial_number\": 3, \"trial_type\": 1, \"trial_role\": 2, \"token_opp\": 10, \"token_self\": 10, \"combined_earning\": 20, \"split_opp\": 16.0, \"split_self\": 4.0, \"splitperc_opp\": 80, \"splitperc_self\": 20, \"accept\": 0.0, \"accepted_amount\": 0.0, \"accepted_perc\": 0.0, \"proposed_perc\": 20.0, \"proposed_amount\": 4.0}]'\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n```",
      "timestamp": 1746102561.592853
    }
  ],
  "learnable_parameters": {
    "beta_value": {
      "description": "Parameter scaling the direct influence of the proposed share percentage on utility.",
      "range": {
        "min": -10.0,
        "max": 10.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta_fairness_interaction": {
      "description": "Parameter scaling the multiplicative interaction between the proposed share percentage and the deviation from the calculated fair share. This term modulates the value of the offer based on its fairness.",
      "range": {
        "min": -10.0,
        "max": 10.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "sum_tokens = token_self + token_opp\nfair_perc_self_calc = IF(sum_tokens == 0, 50.0, (token_self / sum_tokens) * 100.0)\ndeviation_from_fairness = split_perc_self - fair_perc_self_calc\nU = beta_value * split_perc_self + beta_fairness_interaction * split_perc_self * deviation_from_fairness",
  "variable_descriptions": {
    "token_self": {
      "description": "Number of tokens found by the participant.",
      "range": {
        "min": 0,
        "max": 20,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent.",
      "range": {
        "min": 0,
        "max": 20,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "split_perc_self": {
      "description": "The proposed share for the participant in percentage (0-100).",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "sum_tokens": {
      "description": "Total number of tokens found by both participant and opponent (token_self + token_opp).",
      "range": {
        "min": 0,
        "max": 40,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "fair_perc_self_calc": {
      "description": "Calculated 'fair' percentage share for the participant based on their token contribution. Calculated as (token_self / sum_tokens) * 100.0. If sum_tokens is 0, it is set to 50.0.",
      "range": {
        "min": 0.0,
        "max": 100.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "deviation_from_fairness": {
      "description": "The difference between the proposed percentage share for the participant and the calculated fair percentage share (split_perc_self - fair_perc_self_calc).",
      "range": {
        "min": -100.0,
        "max": 100.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "beta_value": {
      "description": "Parameter scaling the direct influence of the proposed share percentage on utility.",
      "range": {
        "min": -10.0,
        "max": 10.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta_fairness_interaction": {
      "description": "Parameter scaling the multiplicative interaction between the proposed share percentage and the deviation from the calculated fair share. This term modulates the value of the offer based on its fairness.",
      "range": {
        "min": -10.0,
        "max": 10.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "U": {
      "description": "Utility of accepting the proposed offer.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "A utility model predicting responder acceptance based on two factors: the percentage offered to the participant and the interaction between this percentage and the deviation from a contribution-based fairness norm. Utility is calculated as a linear combination of the proposed percentage scaled by 'beta_value' and a multiplicative term combining the proposed percentage and the deviation from fairness, scaled by 'beta_fairness_interaction'. This multiplicative structure is designed to ensure distinct contributions from the two learnable parameters ('beta_value' captures general value sensitivity, 'beta_fairness_interaction' captures how fairness deviation modulates this value sensitivity), thereby enhancing parameter identifiability compared to models using only additive terms or simpler piecewise functions.",
  "target_variable": "accept",
  "full_reasoning": "<MODEL>\nsum_tokens = token_self + token_opp\nfair_perc_self_calc = IF(sum_tokens == 0, 50.0, (token_self / sum_tokens) * 100.0)\ndeviation_from_fairness = split_perc_self - fair_perc_self_calc\nU = beta_value * split_perc_self + beta_fairness_interaction * split_perc_self * deviation_from_fairness\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 20,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 20,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The proposed share for the participant in percentage (0-100).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"sum_tokens\": {\n      \"description\": \"Total number of tokens found by both participant and opponent (token_self + token_opp).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 40,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fair_perc_self_calc\": {\n      \"description\": \"Calculated 'fair' percentage share for the participant based on their token contribution. Calculated as (token_self / sum_tokens) * 100.0. If sum_tokens is 0, it is set to 50.0.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"deviation_from_fairness\": {\n      \"description\": \"The difference between the proposed percentage share for the participant and the calculated fair percentage share (split_perc_self - fair_perc_self_calc).\",\n      \"range\": {\n        \"min\": -100.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_value\": {\n      \"description\": \"Parameter scaling the direct influence of the proposed share percentage on utility.\",\n      \"range\": {\n        \"min\": -10.0,\n        \"max\": 10.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_fairness_interaction\": {\n      \"description\": \"Parameter scaling the multiplicative interaction between the proposed share percentage and the deviation from the calculated fair share. This term modulates the value of the offer based on its fairness.\",\n      \"range\": {\n        \"min\": -10.0,\n        \"max\": 10.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Utility of accepting the proposed offer.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA utility model predicting responder acceptance based on two factors: the percentage offered to the participant and the interaction between this percentage and the deviation from a contribution-based fairness norm. Utility is calculated as a linear combination of the proposed percentage scaled by 'beta_value' and a multiplicative term combining the proposed percentage and the deviation from fairness, scaled by 'beta_fairness_interaction'. This multiplicative structure is designed to ensure distinct contributions from the two learnable parameters ('beta_value' captures general value sensitivity, 'beta_fairness_interaction' captures how fairness deviation modulates this value sensitivity), thereby enhancing parameter identifiability compared to models using only additive terms or simpler piecewise functions.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: sum_tokens = token_self + token_opp\nfair_perc_self_calc = IF(sum_tokens == 0, 50.0, (token_self / sum_tokens) * 100.0)\ndeviation_from_fairness = split_perc_self - fair_perc_self_calc\nU = beta_value * split_perc_self + beta_fairness_interaction * split_perc_self * deviation_from_fairness\nSummary: A utility model predicting responder acceptance based on two factors: the percentage offered to the participant and the interaction between this percentage and the deviation from a contribution-based fairness norm. Utility is calculated as a linear combination of the proposed percentage scaled by 'beta_value' and a multiplicative term combining the proposed percentage and the deviation from fairness, scaled by 'beta_fairness_interaction'. This multiplicative structure is designed to ensure distinct contributions from the two learnable parameters ('beta_value' captures general value sensitivity, 'beta_fairness_interaction' captures how fairness deviation modulates this value sensitivity), thereby enhancing parameter identifiability compared to models using only additive terms or simpler piecewise functions.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, beta_value=1, beta_fairness_interaction=1):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        split_perc_self = trial.get(\"splitperc_self\", 0)\n\n        sum_tokens = token_self + token_opp\n\n        if sum_tokens == 0:\n            fair_perc_self_calc = 50.0\n        else:\n            fair_perc_self_calc = (token_self / sum_tokens) * 100.0\n\n        deviation_from_fairness = split_perc_self - fair_perc_self_calc\n\n        U = beta_value * split_perc_self + beta_fairness_interaction * split_perc_self * deviation_from_fairness\n        model_predictions.append(U)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.7130647130647131,
  "group_accuracies": {
    "Control": 0.7403100775193798,
    "Cocaine": 0.6886574074074074
  },
  "group_parameter_averages": {
    "Control": {
      "beta_value": 2.458857509077444,
      "beta_fairness_interaction": -0.48157146061191486
    },
    "Cocaine": {
      "beta_value": 3.253916527576558,
      "beta_fairness_interaction": 0.22910276500843693
    }
  },
  "fitting_results": [
    {
      "beta_value": 1.1570151537033961,
      "beta_fairness_interaction": 4.850926212472629,
      "success": true,
      "log_likelihood": -69.07755278652135,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": -1.7562623973942912,
      "beta_fairness_interaction": 6.852304495870428,
      "success": true,
      "log_likelihood": -368.41361487704756,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": -9.860054906979814,
      "beta_fairness_interaction": 6.401980714546205,
      "success": true,
      "log_likelihood": -391.43946580708797,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 2.1785874131516803,
      "beta_fairness_interaction": 3.773961575488393,
      "success": true,
      "log_likelihood": -253.2843602268451,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": -9.946404034474687,
      "beta_fairness_interaction": 8.110220293250986,
      "success": true,
      "log_likelihood": -322.3619130169665,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 10.0,
      "beta_fairness_interaction": -2.2196269428757986,
      "success": true,
      "log_likelihood": -345.38776394700704,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 8.473692119736572,
      "beta_fairness_interaction": -9.912529150448693,
      "success": true,
      "log_likelihood": -46.05170185648091,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 3.3353411945983344,
      "beta_fairness_interaction": 0.09275637551051905,
      "success": true,
      "log_likelihood": -115.06339003337159,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 1.8851863313880042,
      "beta_fairness_interaction": -8.775877556562426,
      "success": true,
      "log_likelihood": -46.05170185648091,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 0.8824921354113302,
      "beta_fairness_interaction": 4.242034733441404,
      "success": true,
      "log_likelihood": -230.2585092968046,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 1.9706805053716856,
      "beta_fairness_interaction": 9.37824635553729,
      "success": true,
      "log_likelihood": -276.3102111568856,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 0.8506192227507299,
      "beta_fairness_interaction": 4.880815553017337,
      "success": true,
      "log_likelihood": -92.10338595315116,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 9.220212529500563,
      "beta_fairness_interaction": 0.7264208941387312,
      "success": true,
      "log_likelihood": -92.10349440930673,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 6.7903805555584995,
      "beta_fairness_interaction": -7.662259067175501,
      "success": true,
      "log_likelihood": -46.05170185648089,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 3.8604931457404295,
      "beta_fairness_interaction": -9.900673375937995,
      "success": true,
      "log_likelihood": -46.0517018564809,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 9.466906688051768,
      "beta_fairness_interaction": -2.6314699692466466,
      "success": true,
      "log_likelihood": -46.051701856480875,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 2.6998842544862427,
      "beta_fairness_interaction": -2.6506997962848855,
      "success": true,
      "log_likelihood": -46.05170185648093,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 7.892940115314143,
      "beta_fairness_interaction": -6.396886978226424,
      "success": true,
      "log_likelihood": -161.18095650668332,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": -1.5309019007177866,
      "beta_fairness_interaction": -9.443047266284925,
      "success": true,
      "log_likelihood": -184.20680743672395,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 9.352795870377808,
      "beta_fairness_interaction": -7.041897217449309,
      "success": true,
      "log_likelihood": -46.05170185648089,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 5.680224105991439,
      "beta_fairness_interaction": 0.2840111221316208,
      "success": true,
      "log_likelihood": -94.8759841797489,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 9.878539116327868,
      "beta_fairness_interaction": -7.784499888225409,
      "success": true,
      "log_likelihood": -161.1809565066832,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 4.719641286632513,
      "beta_fairness_interaction": 2.5914027912500757,
      "success": true,
      "log_likelihood": -207.23265836676427,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": -10.0,
      "beta_fairness_interaction": 10.0,
      "success": true,
      "log_likelihood": -391.4394658070879,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 7.043302869162236,
      "beta_fairness_interaction": 2.6161781019931567,
      "success": true,
      "log_likelihood": -322.3619130169638,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 3.1287839482856388,
      "beta_fairness_interaction": 4.817898253702314,
      "success": true,
      "log_likelihood": -391.43946580708797,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 10.0,
      "beta_fairness_interaction": 10.0,
      "success": true,
      "log_likelihood": -368.41361487704756,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": -1.2038279507221095,
      "beta_fairness_interaction": 3.1564081210128982,
      "success": true,
      "log_likelihood": -184.20680743671164,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 0.511693129557127,
      "beta_fairness_interaction": -6.03366325271065,
      "success": true,
      "log_likelihood": -138.15510557794173,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": -9.09427784680246,
      "beta_fairness_interaction": -6.458117422542998,
      "success": true,
      "log_likelihood": -276.31021115688566,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 4.00772103156145,
      "beta_fairness_interaction": -9.87836585573694,
      "success": true,
      "log_likelihood": -46.05170185648091,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 1.7997941688079813,
      "beta_fairness_interaction": 6.937837531027231,
      "success": true,
      "log_likelihood": -69.07755278652134,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": -8.195537432350763,
      "beta_fairness_interaction": 0.9691611460488616,
      "success": true,
      "log_likelihood": -322.36191301696664,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": -4.3014011553285725,
      "beta_fairness_interaction": 5.674017085106103,
      "success": true,
      "log_likelihood": -276.3102111568855,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 10.0,
      "beta_fairness_interaction": -3.165168401874244,
      "success": true,
      "log_likelihood": -46.0517018564809,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 7.1705309155896195,
      "beta_fairness_interaction": -8.998729450633158,
      "success": true,
      "log_likelihood": -345.38776394700704,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 2.5869547296439883,
      "beta_fairness_interaction": -1.1830422842050314,
      "success": true,
      "log_likelihood": -299.3360620869261,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 6.073057220916954,
      "beta_fairness_interaction": 7.028121571384453,
      "success": true,
      "log_likelihood": -322.3619130169665,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 10.0,
      "beta_fairness_interaction": -10.0,
      "success": true,
      "log_likelihood": -322.36191301696664,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": -8.965877325436226,
      "beta_fairness_interaction": -4.557036276267532,
      "success": true,
      "log_likelihood": -161.1809565066832,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 1.6223436221103924,
      "beta_fairness_interaction": -2.414724577422125,
      "success": true,
      "log_likelihood": -368.4136148770475,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 5.704682270827833,
      "beta_fairness_interaction": 1.4601307252671618,
      "success": true,
      "log_likelihood": -46.0517018565054,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 0.6409221899805644,
      "beta_fairness_interaction": 1.5559082716005541,
      "success": true,
      "log_likelihood": -713.8013788276618,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.1388888888888889,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 3.7067110390924434,
      "beta_fairness_interaction": -0.7146418843765101,
      "success": true,
      "log_likelihood": -414.4653167328807,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 5.294352081838527,
      "beta_fairness_interaction": -7.575809631547356,
      "success": true,
      "log_likelihood": -368.4136148770475,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": -1.0250774551709885,
      "beta_fairness_interaction": -1.3499639671340624,
      "success": true,
      "log_likelihood": -322.3619130013855,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 7.986807176393933,
      "beta_fairness_interaction": 7.557844826030447,
      "success": true,
      "log_likelihood": -345.38776394700693,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 2.3045087583941353,
      "beta_fairness_interaction": -8.622156772661524,
      "success": true,
      "log_likelihood": -552.6204223173711,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3333333333333333,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 6.185681999108002,
      "beta_fairness_interaction": 1.5611510038044702,
      "success": true,
      "log_likelihood": -207.23265836676458,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 3.935988231217028,
      "beta_fairness_interaction": -6.098014245023653,
      "success": true,
      "log_likelihood": -391.43946580708797,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 10.0,
      "beta_fairness_interaction": -10.0,
      "success": true,
      "log_likelihood": -299.3360620869262,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 7.7168756763792565,
      "beta_fairness_interaction": 7.795094010413365,
      "success": true,
      "log_likelihood": -115.12925464660226,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 5.1951459483703175,
      "beta_fairness_interaction": 3.177832600197302,
      "success": true,
      "log_likelihood": -391.439465807088,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 8.142287722692096,
      "beta_fairness_interaction": -4.605815690601636,
      "success": true,
      "log_likelihood": -345.3877639470071,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 6.477308119211323,
      "beta_fairness_interaction": 0.25966533614337695,
      "success": true,
      "log_likelihood": -199.84182950683837,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.5832282654094492,
      "beta_fairness_interaction": 3.6270577688988936,
      "success": true,
      "log_likelihood": -184.20680743679773,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 2.1632367452842356,
      "beta_fairness_interaction": 1.0445897177174217,
      "success": true,
      "log_likelihood": -138.1551055108015,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 7.9277127020304725,
      "beta_fairness_interaction": -9.671450578092491,
      "success": true,
      "log_likelihood": -138.15510557664285,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": -6.017616090231524,
      "beta_fairness_interaction": 4.9926595955444455,
      "success": true,
      "log_likelihood": -92.10340371656183,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 5.404016700332839,
      "beta_fairness_interaction": -3.985673953331414,
      "success": true,
      "log_likelihood": -207.2326583667642,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": -8.456918963974188,
      "beta_fairness_interaction": -4.3927413776235,
      "success": true,
      "log_likelihood": -414.4653167371285,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 3.577291515212561,
      "beta_fairness_interaction": 0.6269213878834224,
      "success": true,
      "log_likelihood": -230.25850965702878,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": -1.3291003650296638,
      "beta_fairness_interaction": 0.6062489652775973,
      "success": true,
      "log_likelihood": -69.07755278652137,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 6.638867502633129,
      "beta_fairness_interaction": 7.858304704102345,
      "success": true,
      "log_likelihood": -322.3619130169666,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 10.0,
      "beta_fairness_interaction": 10.0,
      "success": true,
      "log_likelihood": -92.10340371656179,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 9.490199085805713,
      "beta_fairness_interaction": 7.162770250071734,
      "success": true,
      "log_likelihood": -368.41361487704756,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.17365917322708024,
      "beta_fairness_interaction": 0.0026218675868413845,
      "success": true,
      "log_likelihood": -7.263157788775317,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 6.265784661682719,
      "beta_fairness_interaction": -7.949339085636473,
      "success": true,
      "log_likelihood": -161.18095650668317,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 7.458016121406768,
      "beta_fairness_interaction": 1.3348121150983228,
      "success": true,
      "log_likelihood": -322.3619130169689,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 10.0,
      "beta_fairness_interaction": -0.3107591209968707,
      "success": true,
      "log_likelihood": -69.07755278652137,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 10.0,
      "beta_fairness_interaction": 10.0,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 6.261715387876901,
      "beta_fairness_interaction": -6.392875706314345,
      "success": true,
      "log_likelihood": -713.8013788276543,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.1388888888888889,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": -3.6221198808140525,
      "beta_fairness_interaction": 2.6704018811166357,
      "success": true,
      "log_likelihood": -391.43946580708797,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 10.0,
      "beta_fairness_interaction": -8.920990981625401,
      "success": true,
      "log_likelihood": -230.25850929680476,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": -3.8059528449925324,
      "beta_fairness_interaction": 3.628520492258396,
      "success": true,
      "log_likelihood": -414.46531673712843,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 4.95196870216226,
      "beta_fairness_interaction": 6.610811810689789,
      "success": true,
      "log_likelihood": -483.54286952724976,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": -1.2205443528077708,
      "beta_fairness_interaction": -8.34733446674604,
      "success": true,
      "log_likelihood": -138.15510557663654,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.6038242735587911,
      "beta_fairness_interaction": 7.706806959111724,
      "success": true,
      "log_likelihood": -91.8227724685811,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 6.029944548800625,
      "beta_fairness_interaction": 2.4398128188179165,
      "success": true,
      "log_likelihood": -414.4653167371284,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": -9.35066354480756,
      "beta_fairness_interaction": 3.475605686796115,
      "success": true,
      "log_likelihood": -69.07755278652135,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 7.512333778531751,
      "beta_fairness_interaction": 8.441657867454374,
      "success": true,
      "log_likelihood": -345.38776394700704,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 2.159598449880008,
      "beta_fairness_interaction": -4.133693146547275,
      "success": true,
      "log_likelihood": -115.12925464660223,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": -6.642866915290655,
      "beta_fairness_interaction": 3.167731693964768,
      "success": true,
      "log_likelihood": -138.1551055766427,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": -9.379387500294662,
      "beta_fairness_interaction": 3.543783663013544,
      "success": true,
      "log_likelihood": -368.41361487704745,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 4.744373523672348,
      "beta_fairness_interaction": -5.346451322113392,
      "success": true,
      "log_likelihood": -368.41361487704756,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.004898993294224813,
      "beta_fairness_interaction": 0.3704339601617974,
      "success": true,
      "log_likelihood": -24.39992405419637,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 6.055899878693204,
      "beta_fairness_interaction": -0.5831826782164935,
      "success": true,
      "log_likelihood": -276.3102111568856,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": -9.530936359796264,
      "beta_fairness_interaction": 5.806929759333855,
      "success": true,
      "log_likelihood": -184.20680743672366,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 10.0,
      "beta_fairness_interaction": -9.90925725207662,
      "success": true,
      "log_likelihood": -92.10340371656179,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 4.436462386587207,
      "beta_fairness_interaction": 8.734580800252168,
      "success": true,
      "log_likelihood": -299.336062086926,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 7.18047844810528,
      "beta_fairness_interaction": -4.297566960671038,
      "success": true,
      "log_likelihood": -299.3360620869262,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "beta_value": {
        "r": 0.3358642120439541,
        "p": 0.0006349735613580559
      },
      "beta_fairness_interaction": {
        "r": 0.6284216441682062,
        "p": 2.5679866120143104e-12
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 475.8617745968535,
  "bic_Control": 430.32601024862345,
  "bic_Cocaine": 516.6542301588096,
  "bic_results": {
    "average_bic": 475.8617745968535,
    "individual_bics": [
      145.32214344995492,
      743.9942676310073,
      790.0459694910882,
      513.7357583306025,
      651.8908639108453,
      697.9425657709263,
      99.27044158987404,
      237.2938179436554,
      99.27044158987404,
      467.6840564705214,
      559.7874601906834,
      191.37380978321454,
      191.37402669552569,
      99.270441589874,
      99.27044158987403,
      99.27044158987397,
      99.27044158987408,
      329.52895089027885,
      375.5806527503601,
      99.270441589874,
      196.91900623641,
      329.5289508902786,
      421.63235461044076,
      790.045969491088,
      651.8908639108398,
      790.0459694910882,
      743.9942676310073,
      375.5806527503355,
      283.47724903279567,
      559.7874601906835,
      99.27044158987404,
      145.3221434499549,
      651.8908639108455,
      559.7874601906832,
      99.27044158987403,
      697.9425657709263,
      605.8391620507645,
      651.8908639108453,
      651.8908639108455,
      329.5289508902786,
      743.9942676310072,
      99.27044158992302,
      1434.7697955322358,
      836.0976713426736,
      743.9942676310072,
      651.8908638796833,
      697.9425657709261,
      1112.4078825116544,
      421.6323546104414,
      790.0459694910882,
      605.8391620507646,
      237.42554717011674,
      790.0459694910883,
      697.9425657709264,
      406.85069689058895,
      375.5806527505077,
      283.4772488985152,
      283.4772490301979,
      191.37384531003588,
      421.63235461044064,
      836.0976713511692,
      467.6840571909698,
      145.32214344995495,
      651.8908639108454,
      191.3738453100358,
      743.9942676310073,
      21.69335345446285,
      329.52895089027857,
      651.89086391085,
      145.32214344995495,
      7.167037869712219,
      1434.7697955322208,
      790.0459694910882,
      467.68405647052174,
      836.0976713511691,
      974.2527769314117,
      283.4772490301853,
      190.81258281407443,
      836.097671351169,
      145.32214344995492,
      697.9425657709263,
      237.4255471701167,
      283.47724903019764,
      743.9942676310071,
      743.9942676310073,
      55.966885985304955,
      559.7874601906834,
      375.58065275035955,
      191.3738453100358,
      605.8391620507642,
      605.8391620507646
    ],
    "group_enabled": true,
    "group_bics": {
      "Control": [
        145.32214344995492,
        743.9942676310073,
        790.0459694910882,
        513.7357583306025,
        651.8908639108453,
        697.9425657709263,
        99.27044158987404,
        237.2938179436554,
        99.27044158987404,
        467.6840564705214,
        559.7874601906834,
        191.37380978321454,
        191.37402669552569,
        99.270441589874,
        99.27044158987403,
        99.27044158987397,
        99.27044158987408,
        329.52895089027885,
        375.5806527503601,
        99.270441589874,
        196.91900623641,
        329.5289508902786,
        421.63235461044076,
        790.045969491088,
        651.8908639108398,
        790.0459694910882,
        743.9942676310073,
        375.5806527503355,
        283.47724903279567,
        559.7874601906835,
        99.27044158987404,
        145.3221434499549,
        651.8908639108455,
        559.7874601906832,
        99.27044158987403,
        697.9425657709263,
        605.8391620507645,
        651.8908639108453,
        651.8908639108455,
        329.5289508902786,
        743.9942676310072,
        99.27044158992302,
        1434.7697955322358
      ],
      "Cocaine": [
        836.0976713426736,
        743.9942676310072,
        651.8908638796833,
        697.9425657709261,
        1112.4078825116544,
        421.6323546104414,
        790.0459694910882,
        605.8391620507646,
        237.42554717011674,
        790.0459694910883,
        697.9425657709264,
        406.85069689058895,
        375.5806527505077,
        283.4772488985152,
        283.4772490301979,
        191.37384531003588,
        421.63235461044064,
        836.0976713511692,
        467.6840571909698,
        145.32214344995495,
        651.8908639108454,
        191.3738453100358,
        743.9942676310073,
        21.69335345446285,
        329.52895089027857,
        651.89086391085,
        145.32214344995495,
        7.167037869712219,
        1434.7697955322208,
        790.0459694910882,
        467.68405647052174,
        836.0976713511691,
        974.2527769314117,
        283.4772490301853,
        190.81258281407443,
        836.097671351169,
        145.32214344995492,
        697.9425657709263,
        237.4255471701167,
        283.47724903019764,
        743.9942676310071,
        743.9942676310073,
        55.966885985304955,
        559.7874601906834,
        375.58065275035955,
        191.3738453100358,
        605.8391620507642,
        605.8391620507646
      ]
    },
    "num_parameters": 2,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- beta_value: r = 0.336\n- beta_fairness_interaction: r = 0.628",
  "previous_models": [
    "Specification: sum_tokens = token_self + token_opp\nfair_perc_self_calc = IF(sum_tokens == 0, 50.0, (token_self / sum_tokens) * 100.0)\ndeviation_from_fairness = split_perc_self - fair_perc_self_calc\nU = beta_value * split_perc_self + beta_fairness_interaction * split_perc_self * deviation_from_fairness\nSummary: A utility model predicting responder acceptance based on two factors: the percentage offered to the participant and the interaction between this percentage and the deviation from a contribution-based fairness norm. Utility is calculated as a linear combination of the proposed percentage scaled by 'beta_value' and a multiplicative term combining the proposed percentage and the deviation from fairness, scaled by 'beta_fairness_interaction'. This multiplicative structure is designed to ensure distinct contributions from the two learnable parameters ('beta_value' captures general value sensitivity, 'beta_fairness_interaction' captures how fairness deviation modulates this value sensitivity), thereby enhancing parameter identifiability compared to models using only additive terms or simpler piecewise functions.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 475.8617745968535\nOverall Accuracy: 0.7131\nGroup Accuracies:\n- Control: 0.7403\n- Cocaine: 0.6887\n\nParameter Recovery:\n- beta_value: r = 0.336\n- beta_fairness_interaction: r = 0.628"
  ]
}