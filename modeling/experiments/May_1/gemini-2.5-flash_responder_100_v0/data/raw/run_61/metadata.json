{
  "task_description": "In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "Okay, here are the improved instructions for the next run, focusing intensely on designing a model structure that ensures parameter identifiability for *both* learnable parameters.\n\nInstructions for Run 61 of 100:\n\nThe **unwavering primary objective remains achieving parameter recovery >= 0.7 for *all* learnable parameters**. This is the critical benchmark for model usability. While improved BIC (lower is better) and accuracy (higher is better) are valuable secondary goals, they must not come at the expense of robust parameter recovery. A model with excellent fit but poor parameter identifiability is not suitable for drawing meaningful conclusions about the underlying cognitive processes.\n\nThe previous attempts have consistently struggled to achieve sufficient parameter identifiability for *both* of the two learnable parameters. The most recent model, which used a multiplicative interaction term (`split_perc_self * deviation_from_fairness`), resulted in recovery values of 0.336 and 0.628, failing the criterion for both parameters. This further reinforces that simple additive or linear/multiplicative interaction terms, even when combining value and fairness, do not create mathematically distinct enough contributions across the data space.\n\nHowever, reviewing previous runs, one model (BIC ~286) achieved a recovery of 0.774 for its `beta_value` parameter by using a structure that combined a linear value term (`split_perc_self`) with a *piecewise linear* penalty term for unfairness (`max(0, fair_perc_self_calc - split_perc_self)`), scaled by a second parameter (`beta_unfairness_effect`, which had recovery 0.659). This suggests that separating the influence into a general value component and a specific fairness deviation component, particularly active for unfair offers, is a promising direction for `beta_value` identifiability.\n\nThe challenge for this run is to build upon this intuition and design a structure that maintains good recovery for the value parameter while significantly improving the recovery for the second parameter (the one associated with fairness/unfairness). This requires making the influence of the second parameter even *more* mathematically distinct from the first, especially for the range of unfair offers.\n\nWe need to find a mathematical structure for utility, still using exactly **2 learnable parameters**, where their influence on responder decisions (`trial_role == 1`) is fundamentally more separable and distinguishable than in previous models.\n\nBased on the persistent difficulty with the second parameter's identifiability, focus your exploration for Run 61 on designing a utility function where:\n1. One parameter primarily scales a term related to the perceived *value* of the offer (e.g., `split_perc_self`).\n2. The second parameter scales a term that specifically captures sensitivity to *unfairness*, but crucially, this term should have a **stronger non-linear form** than previously attempted (linear or squared deviations), especially when the offer is *unfair* (`split_perc_self < fair_perc_self_calc`).\n\nConsider strategies for the unfairness term (active when `split_perc_self < fair_perc_self_calc`):\n*   **Strongly Non-linear Penalties:** Instead of piecewise linear or squared functions of `fair_perc_self_calc - split_perc_self`, explore exponential penalties (e.g., scaling `exp(k * (fair_perc_self_calc - split_perc_self))`), cubic penalties (scaling `(fair_perc_self_calc - split_perc_self)^3`), or other non-linear functions that increase rapidly as unfairness increases. You may need a fixed 'steepness' parameter (like `k`) within the function if you only have 2 learnable parameters.\n*   **Ratio-based Non-linearities:** Explore non-linear functions (e.g., inverse, exponential of the inverse, polynomial) of the ratio of fair share to proposed share (`fair_perc_self_calc / split_perc_self`) when the offer is unfair.\n*   **Threshold-dependent Sensitivity:** Design a model where the sensitivity to `split_perc_self` itself is modulated by fairness, but the modulation is highly non-linear or has sharp changes around the fairness point, controlled by the second parameter.\n\nThe goal is to create a structure where changes in the first parameter primarily affect the baseline utility across all offers, while changes in the second parameter have a disproportionately strong and non-linear effect *only* when offers are unfair, making their influences clearly distinguishable.\n\n*   **Key Inputs & Calculated Variables:** Use `split_perc_self`, `token_self`, `token_opp` as data variables. Calculate necessary intermediate variables like `sum_tokens`, `fair_perc_self_calc`, and any other derived measures of value, fairness, or their interactions as needed by your model structure. Ensure `fair_perc_self_calc` is handled correctly when `sum_tokens` is 0. Use a small epsilon for numerical stability where necessary (e.g., in denominators, logarithms, exponential inputs if they could cause overflow/underflow).\n*   **Model Formula:** Define the utility (`U`). Include calculation steps for necessary derived variables *before* the final formula for `U`. Use clear mathematical notation within the <MODEL> tags. Only the formula should be inside these tags.\n*   **Learnable Parameters:** Your model *must* have exactly **2 learnable parameters**. Choose descriptive names suitable for Python code (e.g., `beta_value`, `beta_unfairness_penalty`, `beta_non_linear_fairness_sensitivity`, etc., reflecting their specific roles in your new non-linear/asymmetric structure). Define clear, generous, finite numerical bounds (e.g., [-10.0, 10.0] or wider/narrower if appropriate).\n*   **Calculated Variables:** Ensure all calculated variables used in the model formula (including U) are included in your <VARIABLES> descriptions with `source: \"calculated\"`. Include descriptions for all data variables used as inputs (`token_self`, `token_opp`, `split_perc_self`) with `source: \"data\"`. Provide detailed descriptions for *calculated* variables, explaining how they are derived and what they represent.\n*   **Variable Descriptions:** Provide variable descriptions in JSON format between <VARIABLES> tags for *all* variables used in the <MODEL> formula (data, calculated, learnable). Include source, range (with inclusive flags), distribution (if applicable), and learnable status. Use `split_perc_self` as the variable name for the participant's proposed percentage share percentage.\n*   **Target Variable:** Specify \"accept\" as the target variable using <target_variable> tags.\n*   **Summary:** Provide a concise summary between <SUMMARY> tags. Describe the model's core idea and, crucially, explain *how its specific non-linear, asymmetric, or threshold-dependent mathematical structure is designed to ensure parameter identifiability for *both* learnable parameters*, making their roles mathematically distinct from previously attempted additive, linear, or simple piecewise structures.\n\nAvailable Data Variables:\n- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.\n(Note: Use `split_perc_self` for the participant's proposed percentage share percentage).\n\nPlease think through this step by step, then provide your model specification and variable descriptions. Remember that robust parameter identifiability for *both* learnable parameters is the absolute priority. Your goal is to find a mathematical structure where both parameters can be uniquely and reliably estimated from the data by ensuring their influences are clearly distinguishable across the range of possible offers and fairness conditions, particularly by making the 'fairness penalty' term highly non-linear and distinct from the basic 'value' term. Be creative in designing this non-linear interaction.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: Okay, here are the improved instructions for the next run, focusing intensely on designing a model structure that ensures parameter identifiability for *both* learnable parameters.\n\nInstructions for Run 61 of 100:\n\nThe **unwavering primary objective remains achieving parameter recovery >= 0.7 for *all* learnable parameters**. This is the critical benchmark for model usability. While improved BIC (lower is better) and accuracy (higher is better) are valuable secondary goals, they must not come at the expense of robust parameter recovery. A model with excellent fit but poor parameter identifiability is not suitable for drawing meaningful conclusions about the underlying cognitive processes.\n\nThe previous attempts have consistently struggled to achieve sufficient parameter identifiability for *both* of the two learnable parameters. The most recent model, which used a multiplicative interaction term (`split_perc_self * deviation_from_fairness`), resulted in recovery values of 0.336 and 0.628, failing the criterion for both parameters. This further reinforces that simple additive or linear/multiplicative interaction terms, even when combining value and fairness, do not create mathematically distinct enough contributions across the data space.\n\nHowever, reviewing previous runs, one model (BIC ~286) achieved a recovery of 0.774 for its `beta_value` parameter by using a structure that combined a linear value term (`split_perc_self`) with a *piecewise linear* penalty term for unfairness (`max(0, fair_perc_self_calc - split_perc_self)`), scaled by a second parameter (`beta_unfairness_effect`, which had recovery 0.659). This suggests that separating the influence into a general value component and a specific fairness deviation component, particularly active for unfair offers, is a promising direction for `beta_value` identifiability.\n\nThe challenge for this run is to build upon this intuition and design a structure that maintains good recovery for the value parameter while significantly improving the recovery for the second parameter (the one associated with fairness/unfairness). This requires making the influence of the second parameter even *more* mathematically distinct from the first, especially for the range of unfair offers.\n\nWe need to find a mathematical structure for utility, still using exactly **2 learnable parameters**, where their influence on responder decisions (`trial_role == 1`) is fundamentally more separable and distinguishable than in previous models.\n\nBased on the persistent difficulty with the second parameter's identifiability, focus your exploration for Run 61 on designing a utility function where:\n1. One parameter primarily scales a term related to the perceived *value* of the offer (e.g., `split_perc_self`).\n2. The second parameter scales a term that specifically captures sensitivity to *unfairness*, but crucially, this term should have a **stronger non-linear form** than previously attempted (linear or squared deviations), especially when the offer is *unfair* (`split_perc_self < fair_perc_self_calc`).\n\nConsider strategies for the unfairness term (active when `split_perc_self < fair_perc_self_calc`):\n*   **Strongly Non-linear Penalties:** Instead of piecewise linear or squared functions of `fair_perc_self_calc - split_perc_self`, explore exponential penalties (e.g., scaling `exp(k * (fair_perc_self_calc - split_perc_self))`), cubic penalties (scaling `(fair_perc_self_calc - split_perc_self)^3`), or other non-linear functions that increase rapidly as unfairness increases. You may need a fixed 'steepness' parameter (like `k`) within the function if you only have 2 learnable parameters.\n*   **Ratio-based Non-linearities:** Explore non-linear functions (e.g., inverse, exponential of the inverse, polynomial) of the ratio of fair share to proposed share (`fair_perc_self_calc / split_perc_self`) when the offer is unfair.\n*   **Threshold-dependent Sensitivity:** Design a model where the sensitivity to `split_perc_self` itself is modulated by fairness, but the modulation is highly non-linear or has sharp changes around the fairness point, controlled by the second parameter.\n\nThe goal is to create a structure where changes in the first parameter primarily affect the baseline utility across all offers, while changes in the second parameter have a disproportionately strong and non-linear effect *only* when offers are unfair, making their influences clearly distinguishable.\n\n*   **Key Inputs & Calculated Variables:** Use `split_perc_self`, `token_self`, `token_opp` as data variables. Calculate necessary intermediate variables like `sum_tokens`, `fair_perc_self_calc`, and any other derived measures of value, fairness, or their interactions as needed by your model structure. Ensure `fair_perc_self_calc` is handled correctly when `sum_tokens` is 0. Use a small epsilon for numerical stability where necessary (e.g., in denominators, logarithms, exponential inputs if they could cause overflow/underflow).\n*   **Model Formula:** Define the utility (`U`). Include calculation steps for necessary derived variables *before* the final formula for `U`. Use clear mathematical notation within the <MODEL> tags. Only the formula should be inside these tags.\n*   **Learnable Parameters:** Your model *must* have exactly **2 learnable parameters**. Choose descriptive names suitable for Python code (e.g., `beta_value`, `beta_unfairness_penalty`, `beta_non_linear_fairness_sensitivity`, etc., reflecting their specific roles in your new non-linear/asymmetric structure). Define clear, generous, finite numerical bounds (e.g., [-10.0, 10.0] or wider/narrower if appropriate).\n*   **Calculated Variables:** Ensure all calculated variables used in the model formula (including U) are included in your <VARIABLES> descriptions with `source: \"calculated\"`. Include descriptions for all data variables used as inputs (`token_self`, `token_opp`, `split_perc_self`) with `source: \"data\"`. Provide detailed descriptions for *calculated* variables, explaining how they are derived and what they represent.\n*   **Variable Descriptions:** Provide variable descriptions in JSON format between <VARIABLES> tags for *all* variables used in the <MODEL> formula (data, calculated, learnable). Include source, range (with inclusive flags), distribution (if applicable), and learnable status. Use `split_perc_self` as the variable name for the participant's proposed percentage share percentage.\n*   **Target Variable:** Specify \"accept\" as the target variable using <target_variable> tags.\n*   **Summary:** Provide a concise summary between <SUMMARY> tags. Describe the model's core idea and, crucially, explain *how its specific non-linear, asymmetric, or threshold-dependent mathematical structure is designed to ensure parameter identifiability for *both* learnable parameters*, making their roles mathematically distinct from previously attempted additive, linear, or simple piecewise structures.\n\nAvailable Data Variables:\n- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.\n(Note: Use `split_perc_self` for the participant's proposed percentage share percentage).\n\nPlease think through this step by step, then provide your model specification and variable descriptions. Remember that robust parameter identifiability for *both* learnable parameters is the absolute priority. Your goal is to find a mathematical structure where both parameters can be uniquely and reliably estimated from the data by ensuring their influences are clearly distinguishable across the range of possible offers and fairness conditions, particularly by making the 'fairness penalty' term highly non-linear and distinct from the basic 'value' term. Be creative in designing this non-linear interaction.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "Okay, here is the computational model for the responder's decision in the ultimatum game, designed with parameter identifiability for the two learnable parameters as a primary goal.\n\n<MODEL>\nfair_perc_self_calc = token_self / (token_self + token_opp) IF token_self + token_opp > 0 ELSE 0.5\ndeviation_from_fairness = fair_perc_self_calc - split_perc_self\nunfairness_penalty_term = max(0, deviation_from_fairness)^3\nU = beta_value * split_perc_self - beta_unfairness * unfairness_penalty_term\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The proposed share for the participant in percentage\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"fair_perc_self_calc\": {\n      \"description\": \"The calculated fair percentage share for the participant based on token contribution (token_self / sum_tokens), with 0.5 used if sum_tokens is 0.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"deviation_from_fairness\": {\n      \"description\": \"The difference between the calculated fair percentage and the proposed percentage for the participant (fair_perc_self_calc - split_perc_self). Positive values indicate the offer is less than fair for the participant.\",\n      \"range\": {\n        \"min\": -1,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n     \"unfairness_penalty_term\": {\n      \"description\": \"A term representing the cubic deviation from fairness, applied only when the offer is less than fair (deviation_from_fairness > 0). It is the cube of the positive deviation from fairness, max(0, deviation_from_fairness)^3.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_value\": {\n      \"description\": \"Parameter scaling the influence of the proposed percentage on utility.\",\n      \"range\": {\n        \"min\": -10.0,\n        \"max\": 10.0\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_unfairness\": {\n      \"description\": \"Parameter scaling the cubic penalty applied when the proposed percentage is less than the fair percentage.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 50.0\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Utility of accepting the offer.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nThis model predicts a responder's decision to accept or reject an ultimatum game offer based on the utility of accepting. Utility is calculated as a combination of two terms: a linear component scaled by 'beta_value' representing the intrinsic utility of the proposed percentage share ('split_perc_self'), and a non-linear penalty component scaled by 'beta_unfairness'. The penalty component is based on the cubic deviation from the calculated fair share ('fair_perc_self_calc') and is only applied when the offer is less than fair for the participant. This cubic and asymmetric structure is designed to make the influence of the 'beta_unfairness' parameter mathematically distinct from 'beta_value', particularly for unfair offers, thereby improving the identifiability of both parameters.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['beta_value', 'beta_unfairness']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                fair_perc_self_calc = token_self / (token_self + token_opp) IF token_self + token_opp > 0 ELSE 0.5\ndeviation_from_fairness = fair_perc_self_calc - split_perc_self\nunfairness_penalty_term = max(0, deviation_from_fairness)^3\nU = beta_value * split_perc_self - beta_unfairness * unfairness_penalty_term\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The proposed share for the participant in percentage\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"fair_perc_self_calc\": {\n      \"description\": \"The calculated fair percentage share for the participant based on token contribution (token_self / sum_tokens), with 0.5 used if sum_tokens is 0.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"deviation_from_fairness\": {\n      \"description\": \"The difference between the calculated fair percentage and the proposed percentage for the participant (fair_perc_self_calc - split_perc_self). Positive values indicate the offer is less than fair for the participant.\",\n      \"range\": {\n        \"min\": -1,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"unfairness_penalty_term\": {\n      \"description\": \"A term representing the cubic deviation from fairness, applied only when the offer is less than fair (deviation_from_fairness > 0). It is the cube of the positive deviation from fairness, max(0, deviation_from_fairness)^3.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_value\": {\n      \"description\": \"Parameter scaling the influence of the proposed percentage on utility.\",\n      \"range\": {\n        \"min\": -10.0,\n        \"max\": 10.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_unfairness\": {\n      \"description\": \"Parameter scaling the cubic penalty applied when the proposed percentage is less than the fair percentage.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 50.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Utility of accepting the offer.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, beta_value=1, beta_unfairness=1):\n    model_predictions = []\n    for trial in trial_data:\n        token_opp = trial.get(\"token_opp\", 0)\n        token_self = trial.get(\"token_self\", 0)\n        split_perc_self = trial.get(\"split_self\", 0)\n\n        if token_self + token_opp > 0:\n            fair_perc_self_calc = token_self / (token_self + token_opp)\n        else:\n            fair_perc_self_calc = 0.5\n\n        deviation_from_fairness = fair_perc_self_calc - split_perc_self\n        unfairness_penalty_term = max(0, deviation_from_fairness)**3\n\n        U = beta_value * split_perc_self - beta_unfairness * unfairness_penalty_term\n        model_predictions.append(U)\n    return model_predictions\n```",
      "timestamp": 1746102617.424795
    }
  ],
  "learnable_parameters": {
    "beta_value": {
      "description": "Parameter scaling the influence of the proposed percentage on utility.",
      "range": {
        "min": -10.0,
        "max": 10.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta_unfairness": {
      "description": "Parameter scaling the cubic penalty applied when the proposed percentage is less than the fair percentage.",
      "range": {
        "min": 0.0,
        "max": 50.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "fair_perc_self_calc = token_self / (token_self + token_opp) IF token_self + token_opp > 0 ELSE 0.5\ndeviation_from_fairness = fair_perc_self_calc - split_perc_self\nunfairness_penalty_term = max(0, deviation_from_fairness)^3\nU = beta_value * split_perc_self - beta_unfairness * unfairness_penalty_term",
  "variable_descriptions": {
    "token_opp": {
      "description": "Number of tokens found by the opponent",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Number of tokens found by the participant",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "split_perc_self": {
      "description": "The proposed share for the participant in percentage",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "fair_perc_self_calc": {
      "description": "The calculated fair percentage share for the participant based on token contribution (token_self / sum_tokens), with 0.5 used if sum_tokens is 0.",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "deviation_from_fairness": {
      "description": "The difference between the calculated fair percentage and the proposed percentage for the participant (fair_perc_self_calc - split_perc_self). Positive values indicate the offer is less than fair for the participant.",
      "range": {
        "min": -1,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "unfairness_penalty_term": {
      "description": "A term representing the cubic deviation from fairness, applied only when the offer is less than fair (deviation_from_fairness > 0). It is the cube of the positive deviation from fairness, max(0, deviation_from_fairness)^3.",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "beta_value": {
      "description": "Parameter scaling the influence of the proposed percentage on utility.",
      "range": {
        "min": -10.0,
        "max": 10.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta_unfairness": {
      "description": "Parameter scaling the cubic penalty applied when the proposed percentage is less than the fair percentage.",
      "range": {
        "min": 0.0,
        "max": 50.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "U": {
      "description": "Utility of accepting the offer.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "This model predicts a responder's decision to accept or reject an ultimatum game offer based on the utility of accepting. Utility is calculated as a combination of two terms: a linear component scaled by 'beta_value' representing the intrinsic utility of the proposed percentage share ('split_perc_self'), and a non-linear penalty component scaled by 'beta_unfairness'. The penalty component is based on the cubic deviation from the calculated fair share ('fair_perc_self_calc') and is only applied when the offer is less than fair for the participant. This cubic and asymmetric structure is designed to make the influence of the 'beta_unfairness' parameter mathematically distinct from 'beta_value', particularly for unfair offers, thereby improving the identifiability of both parameters.",
  "target_variable": "accept",
  "full_reasoning": "Okay, here is the computational model for the responder's decision in the ultimatum game, designed with parameter identifiability for the two learnable parameters as a primary goal.\n\n<MODEL>\nfair_perc_self_calc = token_self / (token_self + token_opp) IF token_self + token_opp > 0 ELSE 0.5\ndeviation_from_fairness = fair_perc_self_calc - split_perc_self\nunfairness_penalty_term = max(0, deviation_from_fairness)^3\nU = beta_value * split_perc_self - beta_unfairness * unfairness_penalty_term\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The proposed share for the participant in percentage\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"fair_perc_self_calc\": {\n      \"description\": \"The calculated fair percentage share for the participant based on token contribution (token_self / sum_tokens), with 0.5 used if sum_tokens is 0.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"deviation_from_fairness\": {\n      \"description\": \"The difference between the calculated fair percentage and the proposed percentage for the participant (fair_perc_self_calc - split_perc_self). Positive values indicate the offer is less than fair for the participant.\",\n      \"range\": {\n        \"min\": -1,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n     \"unfairness_penalty_term\": {\n      \"description\": \"A term representing the cubic deviation from fairness, applied only when the offer is less than fair (deviation_from_fairness > 0). It is the cube of the positive deviation from fairness, max(0, deviation_from_fairness)^3.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_value\": {\n      \"description\": \"Parameter scaling the influence of the proposed percentage on utility.\",\n      \"range\": {\n        \"min\": -10.0,\n        \"max\": 10.0\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_unfairness\": {\n      \"description\": \"Parameter scaling the cubic penalty applied when the proposed percentage is less than the fair percentage.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 50.0\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Utility of accepting the offer.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nThis model predicts a responder's decision to accept or reject an ultimatum game offer based on the utility of accepting. Utility is calculated as a combination of two terms: a linear component scaled by 'beta_value' representing the intrinsic utility of the proposed percentage share ('split_perc_self'), and a non-linear penalty component scaled by 'beta_unfairness'. The penalty component is based on the cubic deviation from the calculated fair share ('fair_perc_self_calc') and is only applied when the offer is less than fair for the participant. This cubic and asymmetric structure is designed to make the influence of the 'beta_unfairness' parameter mathematically distinct from 'beta_value', particularly for unfair offers, thereby improving the identifiability of both parameters.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: fair_perc_self_calc = token_self / (token_self + token_opp) IF token_self + token_opp > 0 ELSE 0.5\ndeviation_from_fairness = fair_perc_self_calc - split_perc_self\nunfairness_penalty_term = max(0, deviation_from_fairness)^3\nU = beta_value * split_perc_self - beta_unfairness * unfairness_penalty_term\nSummary: This model predicts a responder's decision to accept or reject an ultimatum game offer based on the utility of accepting. Utility is calculated as a combination of two terms: a linear component scaled by 'beta_value' representing the intrinsic utility of the proposed percentage share ('split_perc_self'), and a non-linear penalty component scaled by 'beta_unfairness'. The penalty component is based on the cubic deviation from the calculated fair share ('fair_perc_self_calc') and is only applied when the offer is less than fair for the participant. This cubic and asymmetric structure is designed to make the influence of the 'beta_unfairness' parameter mathematically distinct from 'beta_value', particularly for unfair offers, thereby improving the identifiability of both parameters.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, beta_value=1, beta_unfairness=1):\n    model_predictions = []\n    for trial in trial_data:\n        token_opp = trial.get(\"token_opp\", 0)\n        token_self = trial.get(\"token_self\", 0)\n        split_perc_self = trial.get(\"split_self\", 0)\n\n        if token_self + token_opp > 0:\n            fair_perc_self_calc = token_self / (token_self + token_opp)\n        else:\n            fair_perc_self_calc = 0.5\n\n        deviation_from_fairness = fair_perc_self_calc - split_perc_self\n        unfairness_penalty_term = max(0, deviation_from_fairness)**3\n\n        U = beta_value * split_perc_self - beta_unfairness * unfairness_penalty_term\n        model_predictions.append(U)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.6614774114774115,
  "group_accuracies": {
    "Control": 0.6983204134366925,
    "Cocaine": 0.6284722222222222
  },
  "group_parameter_averages": {
    "Control": {
      "beta_value": 2.441834858786364,
      "beta_unfairness": 26.651476502148068
    },
    "Cocaine": {
      "beta_value": -0.08026710803966138,
      "beta_unfairness": 24.754604666139215
    }
  },
  "fitting_results": [
    {
      "beta_value": -0.4689292124398369,
      "beta_unfairness": 19.252604173259318,
      "success": true,
      "log_likelihood": -15.92646952668798,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 0.0827348282591991,
      "beta_unfairness": 30.081934214974066,
      "success": true,
      "log_likelihood": -24.485634924123975,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 0.11963044456457379,
      "beta_unfairness": 30.119063691055608,
      "success": true,
      "log_likelihood": -24.000718264251553,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 0.03976815826935618,
      "beta_unfairness": 30.16564879131857,
      "success": true,
      "log_likelihood": -24.843158217402866,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 0.009637681517254726,
      "beta_unfairness": 21.917483975109526,
      "success": true,
      "log_likelihood": -24.946793805217535,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 0.25013085014826014,
      "beta_unfairness": 48.28973479183905,
      "success": true,
      "log_likelihood": -21.355363563519436,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 10.0,
      "beta_unfairness": 27.747796865471802,
      "success": true,
      "log_likelihood": -1.2942703121847535e-05,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 0.2661703934603666,
      "beta_unfairness": 47.442167943782266,
      "success": true,
      "log_likelihood": -20.96822205916518,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 10.0,
      "beta_unfairness": 14.403969899239645,
      "success": true,
      "log_likelihood": -1.2942703121847536e-05,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": -0.0225113566809669,
      "beta_unfairness": 18.35571804486192,
      "success": true,
      "log_likelihood": -24.917865838005948,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 0.0484580216731373,
      "beta_unfairness": 1.6958418357604033,
      "success": true,
      "log_likelihood": -24.79022741356752,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": -0.3787687463796066,
      "beta_unfairness": 37.68685747221913,
      "success": true,
      "log_likelihood": -18.140893024197993,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": -0.0021412452415327395,
      "beta_unfairness": 13.891330653702994,
      "success": true,
      "log_likelihood": -24.95297730917181,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 10.0,
      "beta_unfairness": 14.53773723044156,
      "success": true,
      "log_likelihood": -1.2942703121847535e-05,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 10.0,
      "beta_unfairness": 25.069029911771985,
      "success": true,
      "log_likelihood": -1.2942703121847536e-05,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 10.0,
      "beta_unfairness": 5.634623647529025,
      "success": true,
      "log_likelihood": -1.2942703121847535e-05,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 10.0,
      "beta_unfairness": 29.19981138023484,
      "success": true,
      "log_likelihood": -1.2942703121847536e-05,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 0.8152526023750659,
      "beta_unfairness": 18.85699809205765,
      "success": true,
      "log_likelihood": -9.314100511662495,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 0.7606746424636217,
      "beta_unfairness": 36.96510487665204,
      "success": true,
      "log_likelihood": -10.140702625318681,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 10.0,
      "beta_unfairness": 29.493148709669992,
      "success": true,
      "log_likelihood": -1.2942703121847535e-05,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 0.1149095277481068,
      "beta_unfairness": 19.354784334272285,
      "success": true,
      "log_likelihood": -24.071078385483514,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 0.6615445891053839,
      "beta_unfairness": 37.037706497512445,
      "success": true,
      "log_likelihood": -11.841496386815523,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": -0.011780715619738978,
      "beta_unfairness": 45.73236555111263,
      "success": true,
      "log_likelihood": -24.943581057924543,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 0.13280525250142178,
      "beta_unfairness": 7.736152337327706,
      "success": true,
      "log_likelihood": -23.79249880598733,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 0.03868523584917908,
      "beta_unfairness": 29.667164816167375,
      "success": true,
      "log_likelihood": -24.84904221371525,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 0.1863192124386054,
      "beta_unfairness": 19.351004704755574,
      "success": true,
      "log_likelihood": -22.79024942728022,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 0.17173291436357302,
      "beta_unfairness": 46.46140997818235,
      "success": true,
      "log_likelihood": -23.085578162895924,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": -0.13767068674282573,
      "beta_unfairness": 27.40554799601696,
      "success": true,
      "log_likelihood": -23.71135807345019,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 0.7013517525689424,
      "beta_unfairness": 35.33592040409531,
      "success": true,
      "log_likelihood": -11.12639404475831,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 0.38102995093248065,
      "beta_unfairness": 8.194252157428556,
      "success": true,
      "log_likelihood": -18.083908515344824,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 10.0,
      "beta_unfairness": 19.656817000688854,
      "success": true,
      "log_likelihood": -1.2942703121847535e-05,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": -0.46892932223244194,
      "beta_unfairness": 49.069510432383154,
      "success": true,
      "log_likelihood": -15.926469526687894,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 0.02251112365811558,
      "beta_unfairness": 11.575145476491222,
      "success": true,
      "log_likelihood": -24.91786583800254,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": -0.009637689154093337,
      "beta_unfairness": 17.913218846031842,
      "success": true,
      "log_likelihood": -24.9467938052175,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 10.0,
      "beta_unfairness": 22.262692011349934,
      "success": true,
      "log_likelihood": -1.2942703121847536e-05,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 0.320835059921035,
      "beta_unfairness": 29.3442302186505,
      "success": true,
      "log_likelihood": -19.6066295113049,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 0.3548252684098521,
      "beta_unfairness": 28.054010718755222,
      "success": true,
      "log_likelihood": -18.74587340446788,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 0.0649051687819207,
      "beta_unfairness": 29.376701201177312,
      "success": true,
      "log_likelihood": -24.662735720511918,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 0.22429351572636141,
      "beta_unfairness": 35.961814523799454,
      "success": true,
      "log_likelihood": -21.95989738246431,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 0.7830102948082449,
      "beta_unfairness": 23.924244493205197,
      "success": true,
      "log_likelihood": -9.793428384046871,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 0.15504997840700482,
      "beta_unfairness": 41.078477972278336,
      "success": true,
      "log_likelihood": -23.404100097564527,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": -0.20699856564637029,
      "beta_unfairness": 49.76653293668083,
      "success": true,
      "log_likelihood": -22.347952156545496,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 10.0,
      "beta_unfairness": 10.94717878305248,
      "success": true,
      "log_likelihood": -23.025863872743603,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 0.16524963914197696,
      "beta_unfairness": 9.4759715257824,
      "success": true,
      "log_likelihood": -23.211941130874166,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.22429363708939806,
      "beta_unfairness": 17.33776255420731,
      "success": true,
      "log_likelihood": -21.95989738256119,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.3833080315124345,
      "beta_unfairness": 21.96496712675764,
      "success": true,
      "log_likelihood": -18.026583391287957,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.11490916332987336,
      "beta_unfairness": 29.05794046408769,
      "success": true,
      "log_likelihood": -24.07107838547944,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": -0.0021412378278561498,
      "beta_unfairness": 20.081894366724345,
      "success": true,
      "log_likelihood": -24.95297730917181,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": -0.03760297908652752,
      "beta_unfairness": 18.661434603481553,
      "success": true,
      "log_likelihood": -24.854763821401804,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.09979409004406355,
      "beta_unfairness": 5.921337408557115,
      "success": true,
      "log_likelihood": -24.28035957188958,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.3004777645883399,
      "beta_unfairness": 44.352859158676736,
      "success": true,
      "log_likelihood": -20.119051304074254,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": -0.3444759088028644,
      "beta_unfairness": 29.329100948928392,
      "success": true,
      "log_likelihood": -19.00809179073946,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.14505003579370412,
      "beta_unfairness": 3.4093736280994436,
      "success": true,
      "log_likelihood": -23.584141130446675,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.18901951026683336,
      "beta_unfairness": 41.720288970587276,
      "success": true,
      "log_likelihood": -22.733949252323,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": -0.06380149792316935,
      "beta_unfairness": 6.692086444074574,
      "success": true,
      "log_likelihood": -24.672388702061138,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": -0.06933183917833129,
      "beta_unfairness": 24.34239456928419,
      "success": true,
      "log_likelihood": -24.622465589139757,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": -0.1340175974653609,
      "beta_unfairness": 15.910299585184607,
      "success": true,
      "log_likelihood": -23.772487114945385,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.5688293588242266,
      "beta_unfairness": 38.88465946363792,
      "success": true,
      "log_likelihood": -13.680488206347645,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": -0.3856021824217814,
      "beta_unfairness": 26.97493704823204,
      "success": true,
      "log_likelihood": -17.968915329011608,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.5167564628459883,
      "beta_unfairness": 36.41842244779047,
      "success": true,
      "log_likelihood": -14.818891996285048,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.1783056764320007,
      "beta_unfairness": 44.46188520552168,
      "success": true,
      "log_likelihood": -22.95431939341773,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.06269882946805606,
      "beta_unfairness": 37.20327684348114,
      "success": true,
      "log_likelihood": -24.68187620814021,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": -10.0,
      "beta_unfairness": 15.55326510462272,
      "success": true,
      "log_likelihood": -69.077565732252,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.05282318698737475,
      "beta_unfairness": 17.435270205117348,
      "success": true,
      "log_likelihood": -24.759843936645016,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": -0.17698384273008994,
      "beta_unfairness": 11.461044480233063,
      "success": true,
      "log_likelihood": -22.980966057043215,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.17435102080064602,
      "beta_unfairness": 16.11577914191414,
      "success": true,
      "log_likelihood": -23.03366591826319,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.83257614325792,
      "beta_unfairness": 11.354934547183742,
      "success": true,
      "log_likelihood": -9.066947778244963,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.5896561386420052,
      "beta_unfairness": 18.460666863812648,
      "success": true,
      "log_likelihood": -13.246139502909934,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.20841232664000883,
      "beta_unfairness": 44.057776310955845,
      "success": true,
      "log_likelihood": -22.316796444522844,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.6780229348060343,
      "beta_unfairness": 30.74037090632827,
      "success": true,
      "log_likelihood": -11.540124489362146,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": -0.3810296033233623,
      "beta_unfairness": 39.40726568007166,
      "success": true,
      "log_likelihood": -18.083908512844374,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": -0.33442882909085636,
      "beta_unfairness": 14.527879771784068,
      "success": true,
      "log_likelihood": -19.26266280339385,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.12678056872055796,
      "beta_unfairness": 45.34356859159347,
      "success": true,
      "log_likelihood": -23.88983960376393,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.4659777323355044,
      "beta_unfairness": 16.74280567750932,
      "success": true,
      "log_likelihood": -15.996587227445914,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.06380145833205274,
      "beta_unfairness": 44.368564647979056,
      "success": true,
      "log_likelihood": -24.672388702067916,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.2863672479334282,
      "beta_unfairness": 14.911222697896937,
      "success": true,
      "log_likelihood": -20.471103341018647,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.9232196667887939,
      "beta_unfairness": 48.96879071402181,
      "success": true,
      "log_likelihood": -7.884388686839373,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": -0.6780230128193381,
      "beta_unfairness": 34.48531510289887,
      "success": true,
      "log_likelihood": -11.540124451138574,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.18766657833348777,
      "beta_unfairness": 8.4437685997216,
      "success": true,
      "log_likelihood": -22.762200671268012,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": -0.4689292652782871,
      "beta_unfairness": 30.385661882485287,
      "success": true,
      "log_likelihood": -15.926469526687866,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.08048708630461249,
      "beta_unfairness": 43.41038159746221,
      "success": true,
      "log_likelihood": -24.510118074706682,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.6669466739505082,
      "beta_unfairness": 26.170251025041253,
      "success": true,
      "log_likelihood": -11.741860654220226,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": -0.4119369050045239,
      "beta_unfairness": 32.23567240079412,
      "success": true,
      "log_likelihood": -17.31123246544748,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.1614002461121004,
      "beta_unfairness": 47.9729262427461,
      "success": true,
      "log_likelihood": -23.285436190905948,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.11608604716354386,
      "beta_unfairness": 18.59598903711326,
      "success": true,
      "log_likelihood": -24.053753761539088,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": -0.40454571915540544,
      "beta_unfairness": 2.822844687418713,
      "success": true,
      "log_likelihood": -17.49493470856575,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.2645355530238454,
      "beta_unfairness": 5.206630174125365,
      "success": true,
      "log_likelihood": -21.00802489860219,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": -0.22576817731626406,
      "beta_unfairness": 17.929528225932206,
      "success": true,
      "log_likelihood": -21.92614281477296,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 1.0443814344701108,
      "beta_unfairness": 4.240961455385034,
      "success": true,
      "log_likelihood": -6.560712655500889,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.145049969172276,
      "beta_unfairness": 16.233897643778377,
      "success": true,
      "log_likelihood": -23.584141130475825,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.2485631984085653,
      "beta_unfairness": 38.43709819565936,
      "success": true,
      "log_likelihood": -21.392765533338956,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "beta_value": {
        "r": 0.9168363962483564,
        "p": 7.336797033760047e-41
      },
      "beta_unfairness": {
        "r": -0.17190833861918461,
        "p": 0.08722392272733263
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 44.74443461588408,
  "bic_Control": 40.0235977996952,
  "bic_Cocaine": 48.97351759705329,
  "bic_results": {
    "average_bic": 44.74443461588408,
    "individual_bics": [
      39.01997693028818,
      56.13830772516017,
      55.168474405415324,
      56.85335431171795,
      57.06062548734729,
      49.87776500395109,
      7.167063762318463,
      49.103481995242575,
      7.167063762318463,
      57.002769552924114,
      56.74749270404726,
      43.448823925308204,
      57.07299249525584,
      7.167063762318463,
      7.167063762318463,
      7.167063762318463,
      7.167063762318463,
      25.79523890023721,
      27.44844312754958,
      7.167063762318463,
      55.309194647879245,
      30.850030650543268,
      57.054199992761305,
      54.752035488886875,
      56.86512230434272,
      52.74753673147266,
      53.33819420270407,
      54.589754023812596,
      29.41982596642884,
      43.334854907601866,
      7.167063762318463,
      39.01997693028801,
      57.0027695529173,
      57.06062548734722,
      7.167063762318463,
      46.380296899522016,
      44.65878468584798,
      56.492509317936054,
      51.086832641840836,
      26.753894645005964,
      53.97523807204127,
      51.86294219000321,
      53.218765622399424,
      53.59092013866055,
      51.0868326420346,
      43.22020465948813,
      55.309194647871095,
      57.07299249525584,
      56.876565519715825,
      55.72775702069138,
      47.40514048506073,
      45.18322145839114,
      54.33532013780557,
      52.63493638155822,
      56.511815281034494,
      56.41196905519173,
      54.71201210680299,
      34.52801428960751,
      43.104868534935434,
      36.80482186948232,
      53.07567666374768,
      56.53079029319264,
      145.3221693414162,
      56.68672575020225,
      53.12896999099865,
      53.234369713438596,
      25.300933433402143,
      33.659316882732085,
      51.800630765957905,
      30.24728685563651,
      43.334854902600966,
      45.69236348369992,
      54.94671708444008,
      39.16021233180405,
      56.51181528104805,
      48.10924455894951,
      22.935815250590966,
      30.247286779189366,
      52.69143921944824,
      39.01997693028795,
      56.18727402632558,
      30.65075918535267,
      41.789502807807175,
      53.73791025872411,
      55.274545399990394,
      42.15690729404372,
      49.1830876741166,
      51.019323506458136,
      20.288463187913997,
      54.33532013786387,
      49.95256894359013
    ],
    "group_enabled": true,
    "group_bics": {
      "Control": [
        39.01997693028818,
        56.13830772516017,
        55.168474405415324,
        56.85335431171795,
        57.06062548734729,
        49.87776500395109,
        7.167063762318463,
        49.103481995242575,
        7.167063762318463,
        57.002769552924114,
        56.74749270404726,
        43.448823925308204,
        57.07299249525584,
        7.167063762318463,
        7.167063762318463,
        7.167063762318463,
        7.167063762318463,
        25.79523890023721,
        27.44844312754958,
        7.167063762318463,
        55.309194647879245,
        30.850030650543268,
        57.054199992761305,
        54.752035488886875,
        56.86512230434272,
        52.74753673147266,
        53.33819420270407,
        54.589754023812596,
        29.41982596642884,
        43.334854907601866,
        7.167063762318463,
        39.01997693028801,
        57.0027695529173,
        57.06062548734722,
        7.167063762318463,
        46.380296899522016,
        44.65878468584798,
        56.492509317936054,
        51.086832641840836,
        26.753894645005964,
        53.97523807204127,
        51.86294219000321,
        53.218765622399424
      ],
      "Cocaine": [
        53.59092013866055,
        51.0868326420346,
        43.22020465948813,
        55.309194647871095,
        57.07299249525584,
        56.876565519715825,
        55.72775702069138,
        47.40514048506073,
        45.18322145839114,
        54.33532013780557,
        52.63493638155822,
        56.511815281034494,
        56.41196905519173,
        54.71201210680299,
        34.52801428960751,
        43.104868534935434,
        36.80482186948232,
        53.07567666374768,
        56.53079029319264,
        145.3221693414162,
        56.68672575020225,
        53.12896999099865,
        53.234369713438596,
        25.300933433402143,
        33.659316882732085,
        51.800630765957905,
        30.24728685563651,
        43.334854902600966,
        45.69236348369992,
        54.94671708444008,
        39.16021233180405,
        56.51181528104805,
        48.10924455894951,
        22.935815250590966,
        30.247286779189366,
        52.69143921944824,
        39.01997693028795,
        56.18727402632558,
        30.65075918535267,
        41.789502807807175,
        53.73791025872411,
        55.274545399990394,
        42.15690729404372,
        49.1830876741166,
        51.019323506458136,
        20.288463187913997,
        54.33532013786387,
        49.95256894359013
      ]
    },
    "num_parameters": 2,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- beta_value: r = 0.917\n- beta_unfairness: r = -0.172",
  "previous_models": [
    "Specification: fair_perc_self_calc = token_self / (token_self + token_opp) IF token_self + token_opp > 0 ELSE 0.5\ndeviation_from_fairness = fair_perc_self_calc - split_perc_self\nunfairness_penalty_term = max(0, deviation_from_fairness)^3\nU = beta_value * split_perc_self - beta_unfairness * unfairness_penalty_term\nSummary: This model predicts a responder's decision to accept or reject an ultimatum game offer based on the utility of accepting. Utility is calculated as a combination of two terms: a linear component scaled by 'beta_value' representing the intrinsic utility of the proposed percentage share ('split_perc_self'), and a non-linear penalty component scaled by 'beta_unfairness'. The penalty component is based on the cubic deviation from the calculated fair share ('fair_perc_self_calc') and is only applied when the offer is less than fair for the participant. This cubic and asymmetric structure is designed to make the influence of the 'beta_unfairness' parameter mathematically distinct from 'beta_value', particularly for unfair offers, thereby improving the identifiability of both parameters.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 44.74443461588408\nOverall Accuracy: 0.6615\nGroup Accuracies:\n- Control: 0.6983\n- Cocaine: 0.6285\n\nParameter Recovery:\n- beta_value: r = 0.917\n- beta_unfairness: r = -0.172"
  ]
}