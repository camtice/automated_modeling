{
  "task_description": "In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "Okay, here are the improved instructions for the next run, focusing intensely on designing a model structure that ensures parameter identifiability for *both* learnable parameters while building on the successes and addressing the failures of the previous attempts.\n\nInstructions for Run 62 of 100:\n\nThe **unwavering primary objective remains achieving parameter recovery >= 0.7 for *all* learnable parameters**. This is the critical benchmark for model usability. While improved BIC (lower is better) and accuracy (higher is better) are valuable secondary goals, they must not come at the expense of robust parameter recovery. A model with excellent fit but poor parameter identifiability is not suitable for drawing meaningful conclusions about the underlying cognitive processes.\n\nThe previous run (Run 61) implemented a model (`U = beta_value * split_perc_self - beta_unfairness * max(0, fair_perc_self_calc - split_perc_self)^3`) based on the suggestion to use a linear value term and a **strongly non-linear (cubic), asymmetric unfairness penalty**. This model achieved a significantly lower BIC (44.74) than many previous attempts, indicating good fit to the data, and yielded excellent parameter recovery for `beta_value` (r = 0.917). However, it critically failed to achieve sufficient parameter recovery for `beta_unfairness` (r = -0.172). The negative recovery correlation is a strong indicator that this specific non-linear structure, while fitting the data well and isolating the value parameter, does *not* result in a recoverable estimate for the fairness parameter.\n\nThis demonstrates that simply adding a non-linear penalty term, even one as strong as cubic, is not sufficient to guarantee identifiability for the second parameter when combined additively/subtractively with a linear value term. We need a more sophisticated approach where the influence of the second parameter is mathematically distinct from the first across the data space, particularly for unfair offers, but in a way that allows for reliable estimation.\n\nThe challenge for this run is to leverage the insights from previous successes (e.g., the value term often has better recovery when structured linearly, and lower BIC suggests the combination of value and fairness is important) while fundamentally redesigning the second parameter's role to ensure its identifiability. The simple additive/subtractive structure `U = beta_value * ValueTerm \u00b1 beta_unfairness * PenaltyTerm` where PenaltyTerm is a function of deviation seems insufficient.\n\nWe need to find a mathematical structure for utility, still using exactly **2 learnable parameters**, where their influence on responder decisions (`trial_role == 1`) is profoundly separable and distinguishable. Given the failure of the cubic penalty term, consider strategies that move beyond simply scaling a pre-calculated non-linear deviation:\n\nThink **\"Out of the Box\"**: You have a tendency to propose models that are variations of `Value + Penalty`. While this class of models is relevant, the specific implementations tried so far have failed on parameter recovery for the second parameter. The negative recovery for `beta_unfairness` is a clear sign that the cubic penalty term is not working as intended for identifiability. Explore structures where the two parameters interact with the variables in a fundamentally different mathematical way, or where the second parameter's influence is integrated into the model structure differently.\n\nConsider alternative strategies for incorporating the second parameter, focusing on mathematical distinctiveness from the first parameter's influence (likely still tied to `split_perc_self`):\n\n*   **Non-linear Weighting/Modulation:** Instead of scaling a separate penalty term, could the second parameter **non-linearly modulate the weight or sensitivity** of the `split_perc_self` term itself based on fairness? For example, `U = beta_value * split_perc_self * f(fair_perc_self_calc, split_perc_self, beta_unfairness)`, where `f` is a non-linear function that is 1 when the offer is fair/favorable and decreases rapidly as unfairness increases, controlled by `beta_unfairness`. This integrates the fairness sensitivity directly into the value term's contribution.\n*   **Ratio-based Utility:** Can utility be structured based on ratios of `split_perc_self` and `fair_perc_self_calc` directly, perhaps scaled by the two parameters? E.g., `U = beta_value * log(split_perc_self + epsilon) + beta_unfairness * log((split_perc_self + epsilon) / (fair_perc_self_calc + epsilon))` or similar ratio-based forms that inherently capture relative value and fairness, each scaled by a different parameter.\n*   **Hybrid Non-linearities:** Combine different non-linear functions in a novel way. For instance, one parameter scales a term involving an exponential or logarithmic function of the deviation/ratio, while the other scales a simpler function.\n*   **Threshold-Influencing Parameter:** While predicting utility, could one parameter influence the \"baseline\" utility and the other parameter influence how far below fairness an offer must be before a strong, non-linear rejection pressure kicks in? This might involve piecewise functions with non-linear slopes or intercepts influenced by the second parameter.\n\nThe goal is to design a utility calculation `U` involving `split_perc_self`, `fair_perc_self_calc` (derived from `token_self`, `token_opp`), and exactly two learnable parameters (`beta_X`, `beta_Y`) such that the influence of `beta_X` on `U` is as mathematically independent from the influence of `beta_Y` as possible across the range of `split_perc_self` and `fair_perc_self_calc` values in the data, particularly focusing on making the second parameter's effect pronounced and non-linear specifically in the unfair regime, but in a way that *is* recoverable.\n\n*   **Key Inputs & Calculated Variables:** Use `split_perc_self`, `token_self`, `token_opp` as data variables. Calculate `sum_tokens`, `fair_perc_self_calc`, and any other necessary intermediate variables. Ensure `fair_perc_self_calc` handles `sum_tokens == 0` correctly (defaulting to 0.5). Use a small epsilon (`1e-6` or similar) for numerical stability if needed (e.g., denominators, logarithms).\n*   **Model Formula:** Define `U`. Include calculation steps for derived variables *before* the formula for `U`. Use clear mathematical notation within the <MODEL> tags (only the formula).\n*   **Learnable Parameters:** Exactly **2 learnable parameters**. Choose descriptive, Python-safe names. Define clear, generous, finite numerical bounds (e.g., [-10.0, 10.0], [-50.0, 50.0], [0.0, 100.0], etc. appropriate for the scale of their influence).\n*   **Calculated Variables:** Include descriptions for *all* calculated variables used in the model (including U) with `source: \"calculated\"`. Include descriptions for all data variables used as inputs (`token_self`, `token_opp`, `split_perc_self`) with `source: \"data\"`.\n*   **Variable Descriptions:** Provide variable descriptions in JSON format between <VARIABLES> tags for *all* variables in the <MODEL> formula. Include source, range (with inclusive flags), distribution (if applicable), and learnable status.\n*   **Target Variable:** Specify \"accept\" using <target_variable> tags.\n*   **Summary:** Provide a concise summary between <SUMMARY> tags. Describe the model's core idea and, crucially, explain *how its specific non-linear, asymmetric, or modulated mathematical structure is fundamentally different from simple additive/subtractive penalties and how this difference is intended to ensure robust parameter identifiability for *both* learnable parameters*. Explicitly contrast it with the failed cubic penalty approach and explain why the new structure should allow for better recovery of the second parameter.\n\nAvailable Data Variables:\n- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.\n(Note: Use `split_perc_self` for the participant's proposed percentage share percentage).\n\nPlease think through this step by step, then provide your model specification and variable descriptions. Remember that robust parameter identifiability for *both* learnable parameters (>= 0.7 recovery for both) is the absolute priority. The excellent BIC and value recovery of the previous run are positive signs, but the second parameter's failure means that specific structure isn't the final answer. Your goal is to find a structure where both parameters' influences are clearly distinguishable across the range of possible offers, leading to reliable estimates. Be creative and explore structures that move beyond simple penalty scaling.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: Okay, here are the improved instructions for the next run, focusing intensely on designing a model structure that ensures parameter identifiability for *both* learnable parameters while building on the successes and addressing the failures of the previous attempts.\n\nInstructions for Run 62 of 100:\n\nThe **unwavering primary objective remains achieving parameter recovery >= 0.7 for *all* learnable parameters**. This is the critical benchmark for model usability. While improved BIC (lower is better) and accuracy (higher is better) are valuable secondary goals, they must not come at the expense of robust parameter recovery. A model with excellent fit but poor parameter identifiability is not suitable for drawing meaningful conclusions about the underlying cognitive processes.\n\nThe previous run (Run 61) implemented a model (`U = beta_value * split_perc_self - beta_unfairness * max(0, fair_perc_self_calc - split_perc_self)^3`) based on the suggestion to use a linear value term and a **strongly non-linear (cubic), asymmetric unfairness penalty**. This model achieved a significantly lower BIC (44.74) than many previous attempts, indicating good fit to the data, and yielded excellent parameter recovery for `beta_value` (r = 0.917). However, it critically failed to achieve sufficient parameter recovery for `beta_unfairness` (r = -0.172). The negative recovery correlation is a strong indicator that this specific non-linear structure, while fitting the data well and isolating the value parameter, does *not* result in a recoverable estimate for the fairness parameter.\n\nThis demonstrates that simply adding a non-linear penalty term, even one as strong as cubic, is not sufficient to guarantee identifiability for the second parameter when combined additively/subtractively with a linear value term. We need a more sophisticated approach where the influence of the second parameter is mathematically distinct from the first across the data space, particularly for unfair offers, but in a way that allows for reliable estimation.\n\nThe challenge for this run is to leverage the insights from previous successes (e.g., the value term often has better recovery when structured linearly, and lower BIC suggests the combination of value and fairness is important) while fundamentally redesigning the second parameter's role to ensure its identifiability. The simple additive/subtractive structure `U = beta_value * ValueTerm \u00b1 beta_unfairness * PenaltyTerm` where PenaltyTerm is a function of deviation seems insufficient.\n\nWe need to find a mathematical structure for utility, still using exactly **2 learnable parameters**, where their influence on responder decisions (`trial_role == 1`) is profoundly separable and distinguishable. Given the failure of the cubic penalty term, consider strategies that move beyond simply scaling a pre-calculated non-linear deviation:\n\nThink **\"Out of the Box\"**: You have a tendency to propose models that are variations of `Value + Penalty`. While this class of models is relevant, the specific implementations tried so far have failed on parameter recovery for the second parameter. The negative recovery for `beta_unfairness` is a clear sign that the cubic penalty term is not working as intended for identifiability. Explore structures where the two parameters interact with the variables in a fundamentally different mathematical way, or where the second parameter's influence is integrated into the model structure differently.\n\nConsider alternative strategies for incorporating the second parameter, focusing on mathematical distinctiveness from the first parameter's influence (likely still tied to `split_perc_self`):\n\n*   **Non-linear Weighting/Modulation:** Instead of scaling a separate penalty term, could the second parameter **non-linearly modulate the weight or sensitivity** of the `split_perc_self` term itself based on fairness? For example, `U = beta_value * split_perc_self * f(fair_perc_self_calc, split_perc_self, beta_unfairness)`, where `f` is a non-linear function that is 1 when the offer is fair/favorable and decreases rapidly as unfairness increases, controlled by `beta_unfairness`. This integrates the fairness sensitivity directly into the value term's contribution.\n*   **Ratio-based Utility:** Can utility be structured based on ratios of `split_perc_self` and `fair_perc_self_calc` directly, perhaps scaled by the two parameters? E.g., `U = beta_value * log(split_perc_self + epsilon) + beta_unfairness * log((split_perc_self + epsilon) / (fair_perc_self_calc + epsilon))` or similar ratio-based forms that inherently capture relative value and fairness, each scaled by a different parameter.\n*   **Hybrid Non-linearities:** Combine different non-linear functions in a novel way. For instance, one parameter scales a term involving an exponential or logarithmic function of the deviation/ratio, while the other scales a simpler function.\n*   **Threshold-Influencing Parameter:** While predicting utility, could one parameter influence the \"baseline\" utility and the other parameter influence how far below fairness an offer must be before a strong, non-linear rejection pressure kicks in? This might involve piecewise functions with non-linear slopes or intercepts influenced by the second parameter.\n\nThe goal is to design a utility calculation `U` involving `split_perc_self`, `fair_perc_self_calc` (derived from `token_self`, `token_opp`), and exactly two learnable parameters (`beta_X`, `beta_Y`) such that the influence of `beta_X` on `U` is as mathematically independent from the influence of `beta_Y` as possible across the range of `split_perc_self` and `fair_perc_self_calc` values in the data, particularly focusing on making the second parameter's effect pronounced and non-linear specifically in the unfair regime, but in a way that *is* recoverable.\n\n*   **Key Inputs & Calculated Variables:** Use `split_perc_self`, `token_self`, `token_opp` as data variables. Calculate `sum_tokens`, `fair_perc_self_calc`, and any other necessary intermediate variables. Ensure `fair_perc_self_calc` handles `sum_tokens == 0` correctly (defaulting to 0.5). Use a small epsilon (`1e-6` or similar) for numerical stability if needed (e.g., denominators, logarithms).\n*   **Model Formula:** Define `U`. Include calculation steps for derived variables *before* the formula for `U`. Use clear mathematical notation within the <MODEL> tags (only the formula).\n*   **Learnable Parameters:** Exactly **2 learnable parameters**. Choose descriptive, Python-safe names. Define clear, generous, finite numerical bounds (e.g., [-10.0, 10.0], [-50.0, 50.0], [0.0, 100.0], etc. appropriate for the scale of their influence).\n*   **Calculated Variables:** Include descriptions for *all* calculated variables used in the model (including U) with `source: \"calculated\"`. Include descriptions for all data variables used as inputs (`token_self`, `token_opp`, `split_perc_self`) with `source: \"data\"`.\n*   **Variable Descriptions:** Provide variable descriptions in JSON format between <VARIABLES> tags for *all* variables in the <MODEL> formula. Include source, range (with inclusive flags), distribution (if applicable), and learnable status.\n*   **Target Variable:** Specify \"accept\" using <target_variable> tags.\n*   **Summary:** Provide a concise summary between <SUMMARY> tags. Describe the model's core idea and, crucially, explain *how its specific non-linear, asymmetric, or modulated mathematical structure is fundamentally different from simple additive/subtractive penalties and how this difference is intended to ensure robust parameter identifiability for *both* learnable parameters*. Explicitly contrast it with the failed cubic penalty approach and explain why the new structure should allow for better recovery of the second parameter.\n\nAvailable Data Variables:\n- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.\n(Note: Use `split_perc_self` for the participant's proposed percentage share percentage).\n\nPlease think through this step by step, then provide your model specification and variable descriptions. Remember that robust parameter identifiability for *both* learnable parameters (>= 0.7 recovery for both) is the absolute priority. The excellent BIC and value recovery of the previous run are positive signs, but the second parameter's failure means that specific structure isn't the final answer. Your goal is to find a structure where both parameters' influences are clearly distinguishable across the range of possible offers, leading to reliable estimates. Be creative and explore structures that move beyond simple penalty scaling.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<MODEL>\nsum_tokens = token_self + token_opp\nfair_perc_self_calc = IF sum_tokens == 0 THEN 50.0 ELSE (token_self / sum_tokens) * 100.0 END IF\ndeviation = fair_perc_self_calc - split_perc_self\nmax_deviation_positive = max(0, deviation)\nU = beta_value * split_perc_self * exp(-beta_unfairness * max_deviation_positive)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The proposed percentage share for the participant\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"sum_tokens\": {\n      \"description\": \"Total number of tokens found by participant and opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fair_perc_self_calc\": {\n      \"description\": \"Calculated fair percentage share for the participant based on token contributions. Defaults to 50% if total tokens are zero.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"deviation\": {\n      \"description\": \"The difference between the calculated fair percentage and the proposed percentage for the participant.\",\n      \"range\": {\n        \"min\": -100.0,\n        \"max\": 100.0\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n     \"max_deviation_positive\": {\n      \"description\": \"The positive part of the deviation (deviation when > 0, else 0). Represents the degree of unfairness against the participant.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_value\": {\n      \"description\": \"Parameter scaling the perceived value of the proposed percentage share.\",\n      \"range\": {\n        \"min\": -20.0,\n        \"max\": 20.0\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_unfairness\": {\n      \"description\": \"Parameter controlling the strength of the exponential penalty applied for unfair offers.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 50.0\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Utility of accepting the proposed offer.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nThis model calculates the utility of accepting a proposed offer for the participant acting as a responder. Utility is based on the participant's proposed percentage share (split_perc_self) and the perceived fairness of the offer, derived from token contributions (token_self, token_opp). The model uses two learnable parameters. beta_value linearly scales the perceived value of the proposed share. beta_unfairness controls an exponential decay factor that is applied multiplicatively to this value, but *only* when the offer is unfair (split_perc_self < fair_perc_self_calc). The rate of this exponential decay increases with beta_unfairness and the degree of unfairness. This multiplicative, conditional, and non-linear influence of the unfairness parameter is intended to be mathematically distinct from the linear scaling by beta_value, thus improving the identifiability of both parameters compared to simple additive penalty structures where the second parameter merely scales a deviation term subtracted from a value term.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['beta_value', 'beta_unfairness']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                sum_tokens = token_self + token_opp\nfair_perc_self_calc = IF sum_tokens == 0 THEN 50.0 ELSE (token_self / sum_tokens) * 100.0 END IF\ndeviation = fair_perc_self_calc - split_perc_self\nmax_deviation_positive = max(0, deviation)\nU = beta_value * split_perc_self * exp(-beta_unfairness * max_deviation_positive)\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The proposed percentage share for the participant\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"sum_tokens\": {\n      \"description\": \"Total number of tokens found by participant and opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fair_perc_self_calc\": {\n      \"description\": \"Calculated fair percentage share for the participant based on token contributions. Defaults to 50% if total tokens are zero.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"deviation\": {\n      \"description\": \"The difference between the calculated fair percentage and the proposed percentage for the participant.\",\n      \"range\": {\n        \"min\": -100.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"max_deviation_positive\": {\n      \"description\": \"The positive part of the deviation (deviation when > 0, else 0). Represents the degree of unfairness against the participant.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_value\": {\n      \"description\": \"Parameter scaling the perceived value of the proposed percentage share.\",\n      \"range\": {\n        \"min\": -20.0,\n        \"max\": 20.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_unfairness\": {\n      \"description\": \"Parameter controlling the strength of the exponential penalty applied for unfair offers.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 50.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Utility of accepting the proposed offer.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, beta_value=1.0, beta_unfairness=0.0):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        split_perc_self = trial.get(\"splitperc_self\", 0)\n\n        sum_tokens = token_self + token_opp\n        if sum_tokens == 0:\n            fair_perc_self_calc = 50.0\n        else:\n            fair_perc_self_calc = (token_self / sum_tokens) * 100.0\n\n        deviation = fair_perc_self_calc - split_perc_self\n        max_deviation_positive = max(0, deviation)\n\n        U = beta_value * split_perc_self * math.exp(-beta_unfairness * max_deviation_positive)\n        model_predictions.append(U)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n```",
      "timestamp": 1746102678.274318
    }
  ],
  "learnable_parameters": {
    "beta_value": {
      "description": "Parameter scaling the perceived value of the proposed percentage share.",
      "range": {
        "min": -20.0,
        "max": 20.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta_unfairness": {
      "description": "Parameter controlling the strength of the exponential penalty applied for unfair offers.",
      "range": {
        "min": 0.0,
        "max": 50.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "sum_tokens = token_self + token_opp\nfair_perc_self_calc = IF sum_tokens == 0 THEN 50.0 ELSE (token_self / sum_tokens) * 100.0 END IF\ndeviation = fair_perc_self_calc - split_perc_self\nmax_deviation_positive = max(0, deviation)\nU = beta_value * split_perc_self * exp(-beta_unfairness * max_deviation_positive)",
  "variable_descriptions": {
    "token_self": {
      "description": "Number of tokens found by the participant",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "split_perc_self": {
      "description": "The proposed percentage share for the participant",
      "range": {
        "min": 0.0,
        "max": 100.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "sum_tokens": {
      "description": "Total number of tokens found by participant and opponent",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "fair_perc_self_calc": {
      "description": "Calculated fair percentage share for the participant based on token contributions. Defaults to 50% if total tokens are zero.",
      "range": {
        "min": 0.0,
        "max": 100.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "deviation": {
      "description": "The difference between the calculated fair percentage and the proposed percentage for the participant.",
      "range": {
        "min": -100.0,
        "max": 100.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "max_deviation_positive": {
      "description": "The positive part of the deviation (deviation when > 0, else 0). Represents the degree of unfairness against the participant.",
      "range": {
        "min": 0.0,
        "max": 100.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "beta_value": {
      "description": "Parameter scaling the perceived value of the proposed percentage share.",
      "range": {
        "min": -20.0,
        "max": 20.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta_unfairness": {
      "description": "Parameter controlling the strength of the exponential penalty applied for unfair offers.",
      "range": {
        "min": 0.0,
        "max": 50.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "U": {
      "description": "Utility of accepting the proposed offer.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "This model calculates the utility of accepting a proposed offer for the participant acting as a responder. Utility is based on the participant's proposed percentage share (split_perc_self) and the perceived fairness of the offer, derived from token contributions (token_self, token_opp). The model uses two learnable parameters. beta_value linearly scales the perceived value of the proposed share. beta_unfairness controls an exponential decay factor that is applied multiplicatively to this value, but *only* when the offer is unfair (split_perc_self < fair_perc_self_calc). The rate of this exponential decay increases with beta_unfairness and the degree of unfairness. This multiplicative, conditional, and non-linear influence of the unfairness parameter is intended to be mathematically distinct from the linear scaling by beta_value, thus improving the identifiability of both parameters compared to simple additive penalty structures where the second parameter merely scales a deviation term subtracted from a value term.",
  "target_variable": "accept",
  "full_reasoning": "<MODEL>\nsum_tokens = token_self + token_opp\nfair_perc_self_calc = IF sum_tokens == 0 THEN 50.0 ELSE (token_self / sum_tokens) * 100.0 END IF\ndeviation = fair_perc_self_calc - split_perc_self\nmax_deviation_positive = max(0, deviation)\nU = beta_value * split_perc_self * exp(-beta_unfairness * max_deviation_positive)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The proposed percentage share for the participant\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"sum_tokens\": {\n      \"description\": \"Total number of tokens found by participant and opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fair_perc_self_calc\": {\n      \"description\": \"Calculated fair percentage share for the participant based on token contributions. Defaults to 50% if total tokens are zero.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"deviation\": {\n      \"description\": \"The difference between the calculated fair percentage and the proposed percentage for the participant.\",\n      \"range\": {\n        \"min\": -100.0,\n        \"max\": 100.0\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n     \"max_deviation_positive\": {\n      \"description\": \"The positive part of the deviation (deviation when > 0, else 0). Represents the degree of unfairness against the participant.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_value\": {\n      \"description\": \"Parameter scaling the perceived value of the proposed percentage share.\",\n      \"range\": {\n        \"min\": -20.0,\n        \"max\": 20.0\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_unfairness\": {\n      \"description\": \"Parameter controlling the strength of the exponential penalty applied for unfair offers.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 50.0\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Utility of accepting the proposed offer.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nThis model calculates the utility of accepting a proposed offer for the participant acting as a responder. Utility is based on the participant's proposed percentage share (split_perc_self) and the perceived fairness of the offer, derived from token contributions (token_self, token_opp). The model uses two learnable parameters. beta_value linearly scales the perceived value of the proposed share. beta_unfairness controls an exponential decay factor that is applied multiplicatively to this value, but *only* when the offer is unfair (split_perc_self < fair_perc_self_calc). The rate of this exponential decay increases with beta_unfairness and the degree of unfairness. This multiplicative, conditional, and non-linear influence of the unfairness parameter is intended to be mathematically distinct from the linear scaling by beta_value, thus improving the identifiability of both parameters compared to simple additive penalty structures where the second parameter merely scales a deviation term subtracted from a value term.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: sum_tokens = token_self + token_opp\nfair_perc_self_calc = IF sum_tokens == 0 THEN 50.0 ELSE (token_self / sum_tokens) * 100.0 END IF\ndeviation = fair_perc_self_calc - split_perc_self\nmax_deviation_positive = max(0, deviation)\nU = beta_value * split_perc_self * exp(-beta_unfairness * max_deviation_positive)\nSummary: This model calculates the utility of accepting a proposed offer for the participant acting as a responder. Utility is based on the participant's proposed percentage share (split_perc_self) and the perceived fairness of the offer, derived from token contributions (token_self, token_opp). The model uses two learnable parameters. beta_value linearly scales the perceived value of the proposed share. beta_unfairness controls an exponential decay factor that is applied multiplicatively to this value, but *only* when the offer is unfair (split_perc_self < fair_perc_self_calc). The rate of this exponential decay increases with beta_unfairness and the degree of unfairness. This multiplicative, conditional, and non-linear influence of the unfairness parameter is intended to be mathematically distinct from the linear scaling by beta_value, thus improving the identifiability of both parameters compared to simple additive penalty structures where the second parameter merely scales a deviation term subtracted from a value term.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, beta_value=1.0, beta_unfairness=0.0):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        split_perc_self = trial.get(\"splitperc_self\", 0)\n\n        sum_tokens = token_self + token_opp\n        if sum_tokens == 0:\n            fair_perc_self_calc = 50.0\n        else:\n            fair_perc_self_calc = (token_self / sum_tokens) * 100.0\n\n        deviation = fair_perc_self_calc - split_perc_self\n        max_deviation_positive = max(0, deviation)\n\n        U = beta_value * split_perc_self * math.exp(-beta_unfairness * max_deviation_positive)\n        model_predictions.append(U)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.5439560439560439,
  "group_accuracies": {
    "Control": 0.5523255813953488,
    "Cocaine": 0.5364583333333334
  },
  "group_parameter_averages": {
    "Control": {
      "beta_value": 8.009164978387787,
      "beta_unfairness": 22.808153378470596
    },
    "Cocaine": {
      "beta_value": 5.443805657545929,
      "beta_unfairness": 21.775010720597216
    }
  },
  "fitting_results": [
    {
      "beta_value": -4.822726040548543,
      "beta_unfairness": 3.5758053294625785,
      "success": true,
      "log_likelihood": -68.23144534281596,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 8.378086943889606,
      "beta_unfairness": 47.5534624104969,
      "success": true,
      "log_likelihood": -22.180709771118238,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 13.357386730502483,
      "beta_unfairness": 9.301953978773913,
      "success": true,
      "log_likelihood": -22.18070977110453,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 15.337612499023138,
      "beta_unfairness": 49.51515576496587,
      "success": true,
      "log_likelihood": -22.180709771118238,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 1.1495080378512732,
      "beta_unfairness": 32.860388771432994,
      "success": true,
      "log_likelihood": -22.180709771118238,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 11.276589891456158,
      "beta_unfairness": 22.058058661455526,
      "success": true,
      "log_likelihood": -22.180709771118234,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 18.7201771451582,
      "beta_unfairness": 0.0,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 16.24738566002671,
      "beta_unfairness": 30.95008893483504,
      "success": true,
      "log_likelihood": -22.180709771118234,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 16.656004038831476,
      "beta_unfairness": 14.416333406182137,
      "success": true,
      "log_likelihood": -22.180709771118234,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 18.957899740468292,
      "beta_unfairness": 22.279665953516865,
      "success": true,
      "log_likelihood": -22.180709771118238,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 10.697401684828776,
      "beta_unfairness": 9.791485199907191,
      "success": true,
      "log_likelihood": -22.180709771116092,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": -4.335428029691979,
      "beta_unfairness": 43.39276560452889,
      "success": true,
      "log_likelihood": -68.23241163119914,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 13.067531759704266,
      "beta_unfairness": 27.03858137083519,
      "success": true,
      "log_likelihood": -22.180709771118238,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 6.143708091019281,
      "beta_unfairness": 36.37415481772799,
      "success": true,
      "log_likelihood": -22.180709771118238,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 8.39829630709648,
      "beta_unfairness": 11.89481913816165,
      "success": true,
      "log_likelihood": -22.180709771118234,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 14.764690969088761,
      "beta_unfairness": 18.141116311480783,
      "success": true,
      "log_likelihood": -22.180709771118234,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 11.845600260633336,
      "beta_unfairness": 15.693558042060557,
      "success": true,
      "log_likelihood": -22.180709771118238,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 5.761644591916962,
      "beta_unfairness": 25.990803771321907,
      "success": true,
      "log_likelihood": -22.180709771118238,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 10.704428108827445,
      "beta_unfairness": 0.1479076713832679,
      "success": true,
      "log_likelihood": -5.825997821695639,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 0.9058637632413731,
      "beta_unfairness": 5.553277553293954,
      "success": true,
      "log_likelihood": -22.18070952278212,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 12.365506349353659,
      "beta_unfairness": 22.913069134074664,
      "success": true,
      "log_likelihood": -22.180709771118234,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": -4.487323271909439,
      "beta_unfairness": 11.747307408291979,
      "success": true,
      "log_likelihood": -114.28411349128004,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 19.813837473627906,
      "beta_unfairness": 38.914948676583386,
      "success": true,
      "log_likelihood": -22.180709771118238,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 15.612659793543038,
      "beta_unfairness": 7.403433102130519,
      "success": true,
      "log_likelihood": -22.180709771118195,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 11.588977327704963,
      "beta_unfairness": 21.9399215392734,
      "success": true,
      "log_likelihood": -22.180709771118234,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 12.641913204959515,
      "beta_unfairness": 0.34536182504012664,
      "success": true,
      "log_likelihood": -15.127279183473416,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": -19.184427411399035,
      "beta_unfairness": 45.70504218093391,
      "success": true,
      "log_likelihood": -114.28411349128005,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": -19.49769484046501,
      "beta_unfairness": 33.87335085936897,
      "success": true,
      "log_likelihood": -114.28411349128004,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 1.2851765689960413,
      "beta_unfairness": 14.264346867703624,
      "success": true,
      "log_likelihood": -22.180709771118234,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 20.0,
      "beta_unfairness": 9.67367231030234,
      "success": true,
      "log_likelihood": -22.180709771112294,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 19.19717999762188,
      "beta_unfairness": 22.731846218999113,
      "success": true,
      "log_likelihood": -22.180709771118238,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 19.240699988538395,
      "beta_unfairness": 33.06405978910294,
      "success": true,
      "log_likelihood": -68.23241163119913,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 7.018190374288867,
      "beta_unfairness": 43.9857998184336,
      "success": true,
      "log_likelihood": -45.20656070115867,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": -1.6819431805621403,
      "beta_unfairness": 43.715380863724796,
      "success": true,
      "log_likelihood": -114.28411349128002,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": -7.318021980184168,
      "beta_unfairness": 13.763296101218142,
      "success": true,
      "log_likelihood": -114.28411349128007,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 13.894208933115944,
      "beta_unfairness": 0.8963728143032781,
      "success": true,
      "log_likelihood": -19.45063571734168,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 6.574907756748715,
      "beta_unfairness": 40.96939386575822,
      "success": true,
      "log_likelihood": -22.180709771118238,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 3.1385618177539527,
      "beta_unfairness": 17.002258804499892,
      "success": true,
      "log_likelihood": -22.180709771118238,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": -3.4029730332576165,
      "beta_unfairness": 14.419175596514611,
      "success": true,
      "log_likelihood": -114.28411349128004,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 6.419029640831258,
      "beta_unfairness": 0.17229951570362728,
      "success": true,
      "log_likelihood": -9.15983763704456,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 10.292233805085885,
      "beta_unfairness": 31.99493824273002,
      "success": true,
      "log_likelihood": -22.180709771118238,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 12.81623717444269,
      "beta_unfairness": 42.493805292353365,
      "success": true,
      "log_likelihood": -22.180709771118234,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 14.855495428516058,
      "beta_unfairness": 42.232131755367945,
      "success": true,
      "log_likelihood": -22.180709771118234,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 5.725542215898901,
      "beta_unfairness": 3.6408408991485164,
      "success": true,
      "log_likelihood": -22.179786449954797,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 3.708694879090455,
      "beta_unfairness": 38.57122282781768,
      "success": true,
      "log_likelihood": -22.180709771118238,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.6720798015373917,
      "beta_unfairness": 4.739851263479796,
      "success": true,
      "log_likelihood": -22.18070699721382,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 7.035682584061746,
      "beta_unfairness": 41.094162340846985,
      "success": true,
      "log_likelihood": -22.180709771118238,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": -3.836517079183711,
      "beta_unfairness": 29.122626152890724,
      "success": true,
      "log_likelihood": -114.28411349128002,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 5.670968158587147,
      "beta_unfairness": 32.01195227736131,
      "success": true,
      "log_likelihood": -22.180709771118238,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 8.020818200338205,
      "beta_unfairness": 22.00262680969717,
      "success": true,
      "log_likelihood": -45.20656070115868,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 5.260575731513132,
      "beta_unfairness": 21.220067640086604,
      "success": true,
      "log_likelihood": -22.180709771118238,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 1.4642332869741672,
      "beta_unfairness": 45.31955967949911,
      "success": true,
      "log_likelihood": -68.23241163119914,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 12.609419174040683,
      "beta_unfairness": 0.8767788812974597,
      "success": true,
      "log_likelihood": -42.47684606795188,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 19.650651239002308,
      "beta_unfairness": 28.601939094443434,
      "success": true,
      "log_likelihood": -45.206560701158665,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 15.335208650955735,
      "beta_unfairness": 16.909437485554324,
      "success": true,
      "log_likelihood": -22.180709771118234,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 14.210098904564255,
      "beta_unfairness": 6.53295372363758,
      "success": true,
      "log_likelihood": -22.180709622419045,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 9.206635463879271,
      "beta_unfairness": 50.0,
      "success": true,
      "log_likelihood": -22.180709771118238,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 6.15252636951919,
      "beta_unfairness": 6.020537332627779,
      "success": true,
      "log_likelihood": -22.180709415851762,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": -0.8147023467154533,
      "beta_unfairness": 7.4928074637763356,
      "success": true,
      "log_likelihood": -68.23241159011407,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 4.064549938261905,
      "beta_unfairness": 8.081444084168982,
      "success": true,
      "log_likelihood": -22.180709770874433,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": -4.829016828321265,
      "beta_unfairness": 45.932321381338575,
      "success": true,
      "log_likelihood": -114.28411349128002,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 9.160893938782646,
      "beta_unfairness": 18.98196849782976,
      "success": true,
      "log_likelihood": -22.180709771118238,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": -17.850720474797942,
      "beta_unfairness": 40.774138043219196,
      "success": true,
      "log_likelihood": -68.23241163119911,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 2.3316924046506706,
      "beta_unfairness": 14.480674930050192,
      "success": true,
      "log_likelihood": -45.206560701158665,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 11.731704523946192,
      "beta_unfairness": 31.626656888769684,
      "success": true,
      "log_likelihood": -22.180709771118234,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 7.775307792910425,
      "beta_unfairness": 39.52870550359168,
      "success": true,
      "log_likelihood": -22.180709771118234,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 15.863896940586601,
      "beta_unfairness": 3.939743979245738,
      "success": true,
      "log_likelihood": -22.1797661932013,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 20.0,
      "beta_unfairness": 19.627531358123314,
      "success": true,
      "log_likelihood": -22.180709771118238,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 1.018016952089667,
      "beta_unfairness": 17.490873403939165,
      "success": true,
      "log_likelihood": -22.180709771118234,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 5.0625349668003565,
      "beta_unfairness": 43.14139746403603,
      "success": true,
      "log_likelihood": -22.180709771118238,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 7.994202508213132,
      "beta_unfairness": 8.700288781828524,
      "success": true,
      "log_likelihood": -22.180709771179185,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.0048989831479953555,
      "beta_unfairness": 19.04627666559911,
      "success": true,
      "log_likelihood": -24.928856026630072,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 8.393518101167107,
      "beta_unfairness": 29.7886255826132,
      "success": true,
      "log_likelihood": -22.180709771118234,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 18.94742880844636,
      "beta_unfairness": 26.969205729492597,
      "success": true,
      "log_likelihood": -22.180709771118238,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": -6.611488351824558,
      "beta_unfairness": 11.561538564123165,
      "success": true,
      "log_likelihood": -91.25826256123959,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 6.434938066020294,
      "beta_unfairness": 7.543929281731831,
      "success": true,
      "log_likelihood": -22.180709768802384,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 11.334254481083615,
      "beta_unfairness": 29.675657821600897,
      "success": true,
      "log_likelihood": -22.180709771118238,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": -13.315557684330932,
      "beta_unfairness": 4.275537468602673,
      "success": true,
      "log_likelihood": -45.20630224591105,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 20.0,
      "beta_unfairness": 1.0095537493482472,
      "success": true,
      "log_likelihood": -19.487792395412203,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": -7.002962812430145,
      "beta_unfairness": 4.929806076704121,
      "success": true,
      "log_likelihood": -68.23239628810182,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 14.264804800076107,
      "beta_unfairness": 4.852011231758146,
      "success": true,
      "log_likelihood": -22.180709771528168,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 2.4682545549470056,
      "beta_unfairness": 24.949435048133868,
      "success": true,
      "log_likelihood": -22.180709771118234,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": -17.059286039737344,
      "beta_unfairness": 40.5571935850533,
      "success": true,
      "log_likelihood": -45.20656070115866,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 17.987812579063988,
      "beta_unfairness": 22.011339400317286,
      "success": true,
      "log_likelihood": -22.180709771118238,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 9.304131253378891,
      "beta_unfairness": 45.634749075136384,
      "success": true,
      "log_likelihood": -22.180709771118238,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 3.2007572288314408,
      "beta_unfairness": 4.379306483201299,
      "success": true,
      "log_likelihood": -45.2066046579343,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": -7.652860989238173,
      "beta_unfairness": 27.040691782705405,
      "success": true,
      "log_likelihood": -114.28411349128004,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3333333333333333,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 8.623390112890354,
      "beta_unfairness": 4.115534885772235,
      "success": true,
      "log_likelihood": -68.2321262318678,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": -2.042477666238007,
      "beta_unfairness": 36.524183800834265,
      "success": true,
      "log_likelihood": -114.28411349128004,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 19.02748118935562,
      "beta_unfairness": 14.806229866109765,
      "success": true,
      "log_likelihood": -22.180709771118238,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 2.600657050409147,
      "beta_unfairness": 39.06660030152298,
      "success": true,
      "log_likelihood": -22.180709771118238,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "beta_value": {
        "r": 0.5713320801176489,
        "p": 5.380720687883572e-10
      },
      "beta_unfairness": {
        "r": -0.07266064044078871,
        "p": 0.4724973915842056
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 84.02767447545435,
  "bic_Control": 81.87546271193366,
  "bic_Cocaine": 85.95569751360829,
  "bic_results": {
    "average_bic": 84.02767447545435,
    "individual_bics": [
      143.62992856254414,
      51.528457419148694,
      51.52845741912128,
      51.528457419148694,
      51.528457419148694,
      51.52845741914869,
      7.167037869712219,
      51.52845741914869,
      51.52845741914869,
      51.528457419148694,
      51.5284574191444,
      143.6318611393105,
      51.528457419148694,
      51.528457419148694,
      51.52845741914869,
      51.52845741914869,
      51.528457419148694,
      51.528457419148694,
      18.8190335203035,
      51.52845692247646,
      51.52845741914869,
      235.7352648594723,
      51.528457419148694,
      51.52845741914861,
      51.52845741914869,
      37.42159624385905,
      235.73526485947232,
      235.7352648594723,
      51.52845741914869,
      51.52845741913681,
      51.528457419148694,
      143.63186113931047,
      97.58015927922956,
      235.73526485947227,
      235.73526485947235,
      46.06830931159558,
      51.528457419148694,
      51.528457419148694,
      235.7352648594723,
      25.48671315100134,
      51.528457419148694,
      51.52845741914869,
      51.52845741914869,
      51.52661077682181,
      51.528457419148694,
      51.52845187133986,
      51.528457419148694,
      235.73526485947227,
      51.528457419148694,
      97.58015927922958,
      51.528457419148694,
      143.6318611393105,
      92.12073001281598,
      97.58015927922955,
      51.52845741914869,
      51.52845712175031,
      51.528457419148694,
      51.52845670861574,
      143.63186105714036,
      51.528457418661084,
      235.73526485947227,
      51.528457419148694,
      143.63186113931044,
      97.58015927922955,
      51.52845741914869,
      51.52845741914869,
      51.52657026331482,
      51.528457419148694,
      51.52845741914869,
      51.528457419148694,
      51.52845741927059,
      57.02474993017236,
      51.52845741914869,
      51.528457419148694,
      189.6835629993914,
      51.528457414516986,
      51.528457419148694,
      97.57964236873431,
      46.142622667736624,
      143.63183045311587,
      51.528457419968554,
      51.52845741914869,
      97.58015927922953,
      51.528457419148694,
      51.528457419148694,
      97.58024719278082,
      235.7352648594723,
      143.6312903406478,
      235.7352648594723,
      51.528457419148694,
      51.528457419148694
    ],
    "group_enabled": true,
    "group_bics": {
      "Control": [
        143.62992856254414,
        51.528457419148694,
        51.52845741912128,
        51.528457419148694,
        51.528457419148694,
        51.52845741914869,
        7.167037869712219,
        51.52845741914869,
        51.52845741914869,
        51.528457419148694,
        51.5284574191444,
        143.6318611393105,
        51.528457419148694,
        51.528457419148694,
        51.52845741914869,
        51.52845741914869,
        51.528457419148694,
        51.528457419148694,
        18.8190335203035,
        51.52845692247646,
        51.52845741914869,
        235.7352648594723,
        51.528457419148694,
        51.52845741914861,
        51.52845741914869,
        37.42159624385905,
        235.73526485947232,
        235.7352648594723,
        51.52845741914869,
        51.52845741913681,
        51.528457419148694,
        143.63186113931047,
        97.58015927922956,
        235.73526485947227,
        235.73526485947235,
        46.06830931159558,
        51.528457419148694,
        51.528457419148694,
        235.7352648594723,
        25.48671315100134,
        51.528457419148694,
        51.52845741914869,
        51.52845741914869
      ],
      "Cocaine": [
        51.52661077682181,
        51.528457419148694,
        51.52845187133986,
        51.528457419148694,
        235.73526485947227,
        51.528457419148694,
        97.58015927922958,
        51.528457419148694,
        143.6318611393105,
        92.12073001281598,
        97.58015927922955,
        51.52845741914869,
        51.52845712175031,
        51.528457419148694,
        51.52845670861574,
        143.63186105714036,
        51.528457418661084,
        235.73526485947227,
        51.528457419148694,
        143.63186113931044,
        97.58015927922955,
        51.52845741914869,
        51.52845741914869,
        51.52657026331482,
        51.528457419148694,
        51.52845741914869,
        51.528457419148694,
        51.52845741927059,
        57.02474993017236,
        51.52845741914869,
        51.528457419148694,
        189.6835629993914,
        51.528457414516986,
        51.528457419148694,
        97.57964236873431,
        46.142622667736624,
        143.63183045311587,
        51.528457419968554,
        51.52845741914869,
        97.58015927922953,
        51.528457419148694,
        51.528457419148694,
        97.58024719278082,
        235.7352648594723,
        143.6312903406478,
        235.7352648594723,
        51.528457419148694,
        51.528457419148694
      ]
    },
    "num_parameters": 2,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- beta_value: r = 0.571\n- beta_unfairness: r = -0.073",
  "previous_models": [
    "Specification: sum_tokens = token_self + token_opp\nfair_perc_self_calc = IF sum_tokens == 0 THEN 50.0 ELSE (token_self / sum_tokens) * 100.0 END IF\ndeviation = fair_perc_self_calc - split_perc_self\nmax_deviation_positive = max(0, deviation)\nU = beta_value * split_perc_self * exp(-beta_unfairness * max_deviation_positive)\nSummary: This model calculates the utility of accepting a proposed offer for the participant acting as a responder. Utility is based on the participant's proposed percentage share (split_perc_self) and the perceived fairness of the offer, derived from token contributions (token_self, token_opp). The model uses two learnable parameters. beta_value linearly scales the perceived value of the proposed share. beta_unfairness controls an exponential decay factor that is applied multiplicatively to this value, but *only* when the offer is unfair (split_perc_self < fair_perc_self_calc). The rate of this exponential decay increases with beta_unfairness and the degree of unfairness. This multiplicative, conditional, and non-linear influence of the unfairness parameter is intended to be mathematically distinct from the linear scaling by beta_value, thus improving the identifiability of both parameters compared to simple additive penalty structures where the second parameter merely scales a deviation term subtracted from a value term.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 84.02767447545435\nOverall Accuracy: 0.5440\nGroup Accuracies:\n- Control: 0.5523\n- Cocaine: 0.5365\n\nParameter Recovery:\n- beta_value: r = 0.571\n- beta_unfairness: r = -0.073"
  ]
}