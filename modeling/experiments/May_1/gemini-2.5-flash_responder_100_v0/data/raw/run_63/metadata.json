{
  "task_description": "In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "Okay, here are the improved instructions for the next run, focusing intensely on designing a model structure that ensures parameter identifiability for *both* learnable parameters while building on the successes and addressing the failures of the previous attempts.\n\nInstructions for Run 63 of 100:\n\nThe **unwavering primary objective remains achieving parameter recovery >= 0.7 for *all* learnable parameters**. This is the critical benchmark for model usability. While improved BIC (lower is better) and accuracy (higher is better) are valuable secondary goals, they must not come at the expense of robust parameter recovery. A model with excellent fit but poor parameter identifiability is not suitable for drawing meaningful conclusions about the underlying cognitive processes.\n\nThe previous run (Run 62) implemented a model (`U = beta_value * split_perc_self * exp(-beta_unfairness * max_deviation_positive)`) which attempted to use a **multiplicative, non-linear modulation** of the value term based on unfairness. This model critically failed to achieve sufficient parameter recovery for *both* `beta_value` (r = 0.571) and `beta_unfairness` (r = -0.073). Furthermore, it resulted in significantly worse BIC (84.03) and accuracy (0.544) compared to previous attempts, including the cubic penalty model from Run 61. This indicates that the specific multiplicative exponential structure was not effective for capturing the decision process in this dataset *or* for ensuring parameter identifiability.\n\nThe cubic penalty model (Run 61: `U = beta_value * split_perc_self - beta_unfairness * max(0, fair_perc_self_calc - split_perc_self)^3`) achieved a much lower BIC (44.74) and good recovery for `beta_value` (r = 0.917), but still failed on `beta_unfairness` recovery (r = -0.172). This highlights that while a non-linear penalty term can improve fit and isolate one parameter in an *additive* structure, it may not provide sufficient identifiability for the penalty parameter itself.\n\nThe challenge for this run is to design a model where the influence of the two learnable parameters is mathematically distinct and sufficiently strong across the data space to allow for reliable estimation of *both*. We know that simple additive/subtractive penalty structures often struggle with the second parameter's recovery, and the specific multiplicative exponential structure attempted last failed completely.\n\nWe need to find a mathematical structure for utility, still using exactly **2 learnable parameters**, where their influence on responder decisions (`trial_role == 1`) is profoundly separable and distinguishable. Given the failures so far, consider fundamentally different ways the parameters can interact with `split_perc_self` and `fair_perc_self_calc`.\n\nThink **\"Out of the Box\"**: Avoid simply scaling a fairness deviation and adding/subtracting it from a value term. The multiplicative modulation attempt in Run 62 also failed. The problem might lie in the *form* of the function linking the second parameter to fairness and value. Explore structures where the parameters' influence is not just additive or a simple multiplicative decay, but integrated in a novel way.\n\nConsider alternative strategies focusing on creating mathematically distinct parameter influences:\n\n*   **Different Non-linear Combinations:** Can utility be a combination of terms where *each* term involves a different parameter and uses a different non-linear function of the relevant variables (`split_perc_self`, `fair_perc_self_calc`, or derived deviations/ratios)? For example, `U = f(split_perc_self, beta_value) + g(fair_perc_self_calc, split_perc_self, beta_unfairness)`, where `f` and `g` are distinct non-linear functions (e.g., logarithmic, power, sigmoidal, exponential, but used differently than the failed Run 62 attempt).\n*   **Ratio-based Utility (Revisited):** Structure utility as a ratio of components influenced by the parameters. E.g., `U = (ValueTerm(split_perc_self, beta_value)) / (PenaltyTerm(fair_perc_self_calc, split_perc_self, beta_unfairness))` or similar, being careful to handle potential divisions by zero (use epsilon).\n*   **Interaction beyond Simple Modulation:** Explore structures where the parameters' influence is truly interactive, perhaps in a way that changes the *shape* of the utility function as a function of `split_perc_self` differently depending on the fairness and the second parameter's value. This might involve polynomials or other functions where coefficients or exponents are determined by the parameters and fairness.\n*   ** piecewise Utility with Parameter-Controlled Breakpoints or Slopes:** While conceptually complex, a piecewise function where the transition point or the slope/curvature around the fairness point is controlled by the second parameter could create distinct influences.\n\nThe goal is to design a utility calculation `U` involving `split_perc_self`, `fair_perc_self_calc` (derived from `token_self`, `token_opp`), and exactly two learnable parameters (`beta_X`, `beta_Y`) such that the influence of `beta_X` on `U` is as mathematically independent from the influence of `beta_Y` as possible across the range of `split_perc_self` and `fair_perc_self_calc` values in the data, particularly focusing on making the second parameter's effect pronounced and non-linear specifically in the unfair regime, but in a way that *is* recoverable. Avoid structures where the parameters are simply scaling additive components.\n\n*   **Key Inputs & Calculated Variables:** Use `split_perc_self`, `token_self`, `token_opp` as data variables. Calculate `sum_tokens`, `fair_perc_self_calc`, and any other necessary intermediate variables. Ensure `fair_perc_self_calc` handles `sum_tokens == 0` correctly (defaulting to 0.5). Use a small epsilon (`1e-6` or similar) for numerical stability if needed (e.g., denominators, logarithms).\n*   **Model Formula:** Define `U`. Include calculation steps for derived variables *before* the formula for `U`. Use clear mathematical notation within the <MODEL> tags (only the formula).\n*   **Learnable Parameters:** Exactly **2 learnable parameters**. Choose descriptive, Python-safe names. Define clear, generous, finite numerical bounds (e.g., [-10.0, 10.0], [-50.0, 50.0], [0.0, 100.0], etc. appropriate for the scale of their influence).\n*   **Calculated Variables:** Include descriptions for *all* calculated variables used in the model (including U) with `source: \"calculated\"`. Include descriptions for all data variables used as inputs (`token_self`, `token_opp`, `split_perc_self`) with `source: \"data\"`.\n*   **Variable Descriptions:** Provide variable descriptions in JSON format between <VARIABLES> tags for *all* variables in the <MODEL> formula. Include source, range (with inclusive flags), distribution (if applicable), and learnable status.\n*   **Target Variable:** Specify \"accept\" using <target_variable> tags.\n*   **Summary:** Provide a concise summary between <SUMMARY> tags. Describe the model's core idea and, crucially, explain *how its specific non-linear, asymmetric, or interactive mathematical structure is fundamentally different from simple additive/subtractive penalties and the failed multiplicative exponential, and how this difference is intended to ensure robust parameter identifiability for *both* learnable parameters*. Explicitly explain why this new structure should allow for better recovery of the second parameter compared to previous attempts.\n\nAvailable Data Variables:\n- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.\n(Note: Use `split_perc_self` for the participant's proposed percentage share percentage).\n\nPlease think through this step by step, then provide your model specification and variable descriptions. Remember that robust parameter identifiability for *both* learnable parameters (>= 0.7 recovery for both) is the absolute priority. Your goal is to find a structure where both parameters' influences are clearly distinguishable across the range of possible offers, leading to reliable estimates. Be creative and explore structures that move beyond simple additive penalties and simple multiplicative modulation.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: Okay, here are the improved instructions for the next run, focusing intensely on designing a model structure that ensures parameter identifiability for *both* learnable parameters while building on the successes and addressing the failures of the previous attempts.\n\nInstructions for Run 63 of 100:\n\nThe **unwavering primary objective remains achieving parameter recovery >= 0.7 for *all* learnable parameters**. This is the critical benchmark for model usability. While improved BIC (lower is better) and accuracy (higher is better) are valuable secondary goals, they must not come at the expense of robust parameter recovery. A model with excellent fit but poor parameter identifiability is not suitable for drawing meaningful conclusions about the underlying cognitive processes.\n\nThe previous run (Run 62) implemented a model (`U = beta_value * split_perc_self * exp(-beta_unfairness * max_deviation_positive)`) which attempted to use a **multiplicative, non-linear modulation** of the value term based on unfairness. This model critically failed to achieve sufficient parameter recovery for *both* `beta_value` (r = 0.571) and `beta_unfairness` (r = -0.073). Furthermore, it resulted in significantly worse BIC (84.03) and accuracy (0.544) compared to previous attempts, including the cubic penalty model from Run 61. This indicates that the specific multiplicative exponential structure was not effective for capturing the decision process in this dataset *or* for ensuring parameter identifiability.\n\nThe cubic penalty model (Run 61: `U = beta_value * split_perc_self - beta_unfairness * max(0, fair_perc_self_calc - split_perc_self)^3`) achieved a much lower BIC (44.74) and good recovery for `beta_value` (r = 0.917), but still failed on `beta_unfairness` recovery (r = -0.172). This highlights that while a non-linear penalty term can improve fit and isolate one parameter in an *additive* structure, it may not provide sufficient identifiability for the penalty parameter itself.\n\nThe challenge for this run is to design a model where the influence of the two learnable parameters is mathematically distinct and sufficiently strong across the data space to allow for reliable estimation of *both*. We know that simple additive/subtractive penalty structures often struggle with the second parameter's recovery, and the specific multiplicative exponential structure attempted last failed completely.\n\nWe need to find a mathematical structure for utility, still using exactly **2 learnable parameters**, where their influence on responder decisions (`trial_role == 1`) is profoundly separable and distinguishable. Given the failures so far, consider fundamentally different ways the parameters can interact with `split_perc_self` and `fair_perc_self_calc`.\n\nThink **\"Out of the Box\"**: Avoid simply scaling a fairness deviation and adding/subtracting it from a value term. The multiplicative modulation attempt in Run 62 also failed. The problem might lie in the *form* of the function linking the second parameter to fairness and value. Explore structures where the parameters' influence is not just additive or a simple multiplicative decay, but integrated in a novel way.\n\nConsider alternative strategies focusing on creating mathematically distinct parameter influences:\n\n*   **Different Non-linear Combinations:** Can utility be a combination of terms where *each* term involves a different parameter and uses a different non-linear function of the relevant variables (`split_perc_self`, `fair_perc_self_calc`, or derived deviations/ratios)? For example, `U = f(split_perc_self, beta_value) + g(fair_perc_self_calc, split_perc_self, beta_unfairness)`, where `f` and `g` are distinct non-linear functions (e.g., logarithmic, power, sigmoidal, exponential, but used differently than the failed Run 62 attempt).\n*   **Ratio-based Utility (Revisited):** Structure utility as a ratio of components influenced by the parameters. E.g., `U = (ValueTerm(split_perc_self, beta_value)) / (PenaltyTerm(fair_perc_self_calc, split_perc_self, beta_unfairness))` or similar, being careful to handle potential divisions by zero (use epsilon).\n*   **Interaction beyond Simple Modulation:** Explore structures where the parameters' influence is truly interactive, perhaps in a way that changes the *shape* of the utility function as a function of `split_perc_self` differently depending on the fairness and the second parameter's value. This might involve polynomials or other functions where coefficients or exponents are determined by the parameters and fairness.\n*   ** piecewise Utility with Parameter-Controlled Breakpoints or Slopes:** While conceptually complex, a piecewise function where the transition point or the slope/curvature around the fairness point is controlled by the second parameter could create distinct influences.\n\nThe goal is to design a utility calculation `U` involving `split_perc_self`, `fair_perc_self_calc` (derived from `token_self`, `token_opp`), and exactly two learnable parameters (`beta_X`, `beta_Y`) such that the influence of `beta_X` on `U` is as mathematically independent from the influence of `beta_Y` as possible across the range of `split_perc_self` and `fair_perc_self_calc` values in the data, particularly focusing on making the second parameter's effect pronounced and non-linear specifically in the unfair regime, but in a way that *is* recoverable. Avoid structures where the parameters are simply scaling additive components.\n\n*   **Key Inputs & Calculated Variables:** Use `split_perc_self`, `token_self`, `token_opp` as data variables. Calculate `sum_tokens`, `fair_perc_self_calc`, and any other necessary intermediate variables. Ensure `fair_perc_self_calc` handles `sum_tokens == 0` correctly (defaulting to 0.5). Use a small epsilon (`1e-6` or similar) for numerical stability if needed (e.g., denominators, logarithms).\n*   **Model Formula:** Define `U`. Include calculation steps for derived variables *before* the formula for `U`. Use clear mathematical notation within the <MODEL> tags (only the formula).\n*   **Learnable Parameters:** Exactly **2 learnable parameters**. Choose descriptive, Python-safe names. Define clear, generous, finite numerical bounds (e.g., [-10.0, 10.0], [-50.0, 50.0], [0.0, 100.0], etc. appropriate for the scale of their influence).\n*   **Calculated Variables:** Include descriptions for *all* calculated variables used in the model (including U) with `source: \"calculated\"`. Include descriptions for all data variables used as inputs (`token_self`, `token_opp`, `split_perc_self`) with `source: \"data\"`.\n*   **Variable Descriptions:** Provide variable descriptions in JSON format between <VARIABLES> tags for *all* variables in the <MODEL> formula. Include source, range (with inclusive flags), distribution (if applicable), and learnable status.\n*   **Target Variable:** Specify \"accept\" using <target_variable> tags.\n*   **Summary:** Provide a concise summary between <SUMMARY> tags. Describe the model's core idea and, crucially, explain *how its specific non-linear, asymmetric, or interactive mathematical structure is fundamentally different from simple additive/subtractive penalties and the failed multiplicative exponential, and how this difference is intended to ensure robust parameter identifiability for *both* learnable parameters*. Explicitly explain why this new structure should allow for better recovery of the second parameter compared to previous attempts.\n\nAvailable Data Variables:\n- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.\n(Note: Use `split_perc_self` for the participant's proposed percentage share percentage).\n\nPlease think through this step by step, then provide your model specification and variable descriptions. Remember that robust parameter identifiability for *both* learnable parameters (>= 0.7 recovery for both) is the absolute priority. Your goal is to find a structure where both parameters' influences are clearly distinguishable across the range of possible offers, leading to reliable estimates. Be creative and explore structures that move beyond simple additive penalties and simple multiplicative modulation.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<MODEL>\nsum_tokens = token_self + token_opp\nfair_perc_self_calc = 50.0 if sum_tokens == 0 else (token_self / sum_tokens) * 100.0\ndeviation = fair_perc_self_calc - split_perc_self\nunfairness_penalty_term = max(0.0, deviation)\nU = (beta_value * split_perc_self) / (1.0 + beta_unfairness * unfairness_penalty_term)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": { \"min\": 0, \"max\": \"inf\", \"inclusive_min\": true, \"inclusive_max\": false },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": { \"min\": 0, \"max\": \"inf\", \"inclusive_min\": true, \"inclusive_max\": false },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"Proposed share for the participant in percentage\",\n      \"range\": { \"min\": 0, \"max\": 100, \"inclusive_min\": true, \"inclusive_max\": true },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n     \"sum_tokens\": {\n      \"description\": \"Total number of tokens found by participant and opponent\",\n      \"range\": { \"min\": 0, \"max\": \"inf\", \"inclusive_min\": true, \"inclusive_max\": false },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fair_perc_self_calc\": {\n      \"description\": \"Fair percentage share for the participant based on token contribution (50% if total tokens is 0)\",\n      \"range\": { \"min\": 0.0, \"max\": 100.0, \"inclusive_min\": true, \"inclusive_max\": true },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"deviation\": {\n      \"description\": \"Difference between fair percentage share and proposed percentage share for the participant (fair - proposed)\",\n      \"range\": { \"min\": -100.0, \"max\": 100.0, \"inclusive_min\": true, \"inclusive_max\": true },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"unfairness_penalty_term\": {\n      \"description\": \"The positive deviation from fair share for the participant, representing potential unfairness felt (max(0, fair_perc_self_calc - split_perc_self))\",\n      \"range\": { \"min\": 0.0, \"max\": 100.0, \"inclusive_min\": true, \"inclusive_max\": true },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_value\": {\n      \"description\": \"Sensitivity to the proposed percentage share (value parameter)\",\n      \"range\": { \"min\": -10.0, \"max\": 10.0, \"inclusive_min\": true, \"inclusive_max\": true },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_unfairness\": {\n      \"description\": \"Sensitivity to the penalty for unfair offers based on contribution (unfairness parameter)\",\n      \"range\": { \"min\": 0.0, \"max\": 10.0, \"inclusive_min\": true, \"inclusive_max\": true },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Utility of accepting the proposed offer\",\n      \"range\": { \"min\": \"-inf\", \"max\": \"inf\", \"inclusive_min\": false, \"inclusive_max\": false },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA ratio model calculates the utility of accepting a proposed offer for the responder. Utility is defined as the offered percentage scaled by 'beta_value', divided by a penalty term. The penalty term is 1 plus the positive deviation between the fair share (based on contribution) and the offered share, scaled by 'beta_unfairness'. 'beta_unfairness' is constrained to be non-negative, imposing a disutility for offers below the calculated fair share. This ratio structure and the non-linear penalty applied only to unfair offers create distinct mathematical influences for 'beta_value' (primarily scaling value across offers, linearly for fair/generous offers) and 'beta_unfairness' (specifically modulating utility non-linearly only in the unfair domain), which is intended to improve the identifiability of both parameters compared to previous additive or simple multiplicative models.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['beta_value', 'beta_unfairness']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                sum_tokens = token_self + token_opp\nfair_perc_self_calc = 50.0 if sum_tokens == 0 else (token_self / sum_tokens) * 100.0\ndeviation = fair_perc_self_calc - split_perc_self\nunfairness_penalty_term = max(0.0, deviation)\nU = (beta_value * split_perc_self) / (1.0 + beta_unfairness * unfairness_penalty_term)\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"Proposed share for the participant in percentage\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"sum_tokens\": {\n      \"description\": \"Total number of tokens found by participant and opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fair_perc_self_calc\": {\n      \"description\": \"Fair percentage share for the participant based on token contribution (50% if total tokens is 0)\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"deviation\": {\n      \"description\": \"Difference between fair percentage share and proposed percentage share for the participant (fair - proposed)\",\n      \"range\": {\n        \"min\": -100.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"unfairness_penalty_term\": {\n      \"description\": \"The positive deviation from fair share for the participant, representing potential unfairness felt (max(0, fair_perc_self_calc - split_perc_self))\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_value\": {\n      \"description\": \"Sensitivity to the proposed percentage share (value parameter)\",\n      \"range\": {\n        \"min\": -10.0,\n        \"max\": 10.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_unfairness\": {\n      \"description\": \"Sensitivity to the penalty for unfair offers based on contribution (unfairness parameter)\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 10.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Utility of accepting the proposed offer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, beta_value=1.0, beta_unfairness=0.0):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        split_perc_self = trial.get(\"splitperc_self\", 0)\n\n        sum_tokens = token_self + token_opp\n        fair_perc_self_calc = 50.0 if sum_tokens == 0 else (token_self / sum_tokens) * 100.0\n        deviation = fair_perc_self_calc - split_perc_self\n        unfairness_penalty_term = max(0.0, deviation)\n        \n        U = (beta_value * split_perc_self) / (1.0 + beta_unfairness * unfairness_penalty_term)\n        \n        model_predictions.append(U)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = \"\"\"\n[\n  {\n    \"ID\": 0,\n    \"group\": \"control\",\n    \"trial_number\": 1,\n    \"trial_type\": 0,\n    \"trial_role\": 1,\n    \"token_opp\": 7,\n    \"token_self\": 3,\n    \"combined_earning\": 10,\n    \"split_opp\": 7.0,\n    \"split_self\": 3.0,\n    \"splitperc_opp\": 70,\n    \"splitperc_self\": 30,\n    \"accept\": 0.0,\n    \"accepted_amount\": 0.0,\n    \"accepted_perc\": 0.0,\n    \"proposed_perc\": 30.0,\n    \"proposed_amount\": 3.0\n  },\n  {\n    \"ID\": 1,\n    \"group\": \"control\",\n    \"trial_number\": 2,\n    \"trial_type\": 0,\n    \"trial_role\": 1,\n    \"token_opp\": 7,\n    \"token_self\": 3,\n    \"combined_earning\": 10,\n    \"split_opp\": 7.0,\n    \"split_self\": 3.0,\n    \"splitperc_opp\": 70,\n    \"splitperc_self\": 30,\n    \"accept\": 0.0,\n    \"accepted_amount\": 0.0,\n    \"accepted_perc\": 0.0,\n    \"proposed_perc\": 30.0,\n    \"proposed_amount\": 3.0\n  }\n]\n\"\"\"\n\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n```",
      "timestamp": 1746102774.80367
    }
  ],
  "learnable_parameters": {
    "beta_value": {
      "description": "Sensitivity to the proposed percentage share (value parameter)",
      "range": {
        "min": -10.0,
        "max": 10.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta_unfairness": {
      "description": "Sensitivity to the penalty for unfair offers based on contribution (unfairness parameter)",
      "range": {
        "min": 0.0,
        "max": 10.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "sum_tokens = token_self + token_opp\nfair_perc_self_calc = 50.0 if sum_tokens == 0 else (token_self / sum_tokens) * 100.0\ndeviation = fair_perc_self_calc - split_perc_self\nunfairness_penalty_term = max(0.0, deviation)\nU = (beta_value * split_perc_self) / (1.0 + beta_unfairness * unfairness_penalty_term)",
  "variable_descriptions": {
    "token_self": {
      "description": "Number of tokens found by the participant",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "split_perc_self": {
      "description": "Proposed share for the participant in percentage",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "sum_tokens": {
      "description": "Total number of tokens found by participant and opponent",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "fair_perc_self_calc": {
      "description": "Fair percentage share for the participant based on token contribution (50% if total tokens is 0)",
      "range": {
        "min": 0.0,
        "max": 100.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "deviation": {
      "description": "Difference between fair percentage share and proposed percentage share for the participant (fair - proposed)",
      "range": {
        "min": -100.0,
        "max": 100.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "unfairness_penalty_term": {
      "description": "The positive deviation from fair share for the participant, representing potential unfairness felt (max(0, fair_perc_self_calc - split_perc_self))",
      "range": {
        "min": 0.0,
        "max": 100.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "beta_value": {
      "description": "Sensitivity to the proposed percentage share (value parameter)",
      "range": {
        "min": -10.0,
        "max": 10.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta_unfairness": {
      "description": "Sensitivity to the penalty for unfair offers based on contribution (unfairness parameter)",
      "range": {
        "min": 0.0,
        "max": 10.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "U": {
      "description": "Utility of accepting the proposed offer",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "A ratio model calculates the utility of accepting a proposed offer for the responder. Utility is defined as the offered percentage scaled by 'beta_value', divided by a penalty term. The penalty term is 1 plus the positive deviation between the fair share (based on contribution) and the offered share, scaled by 'beta_unfairness'. 'beta_unfairness' is constrained to be non-negative, imposing a disutility for offers below the calculated fair share. This ratio structure and the non-linear penalty applied only to unfair offers create distinct mathematical influences for 'beta_value' (primarily scaling value across offers, linearly for fair/generous offers) and 'beta_unfairness' (specifically modulating utility non-linearly only in the unfair domain), which is intended to improve the identifiability of both parameters compared to previous additive or simple multiplicative models.",
  "target_variable": "accept",
  "full_reasoning": "<MODEL>\nsum_tokens = token_self + token_opp\nfair_perc_self_calc = 50.0 if sum_tokens == 0 else (token_self / sum_tokens) * 100.0\ndeviation = fair_perc_self_calc - split_perc_self\nunfairness_penalty_term = max(0.0, deviation)\nU = (beta_value * split_perc_self) / (1.0 + beta_unfairness * unfairness_penalty_term)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": { \"min\": 0, \"max\": \"inf\", \"inclusive_min\": true, \"inclusive_max\": false },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": { \"min\": 0, \"max\": \"inf\", \"inclusive_min\": true, \"inclusive_max\": false },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"Proposed share for the participant in percentage\",\n      \"range\": { \"min\": 0, \"max\": 100, \"inclusive_min\": true, \"inclusive_max\": true },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n     \"sum_tokens\": {\n      \"description\": \"Total number of tokens found by participant and opponent\",\n      \"range\": { \"min\": 0, \"max\": \"inf\", \"inclusive_min\": true, \"inclusive_max\": false },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fair_perc_self_calc\": {\n      \"description\": \"Fair percentage share for the participant based on token contribution (50% if total tokens is 0)\",\n      \"range\": { \"min\": 0.0, \"max\": 100.0, \"inclusive_min\": true, \"inclusive_max\": true },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"deviation\": {\n      \"description\": \"Difference between fair percentage share and proposed percentage share for the participant (fair - proposed)\",\n      \"range\": { \"min\": -100.0, \"max\": 100.0, \"inclusive_min\": true, \"inclusive_max\": true },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"unfairness_penalty_term\": {\n      \"description\": \"The positive deviation from fair share for the participant, representing potential unfairness felt (max(0, fair_perc_self_calc - split_perc_self))\",\n      \"range\": { \"min\": 0.0, \"max\": 100.0, \"inclusive_min\": true, \"inclusive_max\": true },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_value\": {\n      \"description\": \"Sensitivity to the proposed percentage share (value parameter)\",\n      \"range\": { \"min\": -10.0, \"max\": 10.0, \"inclusive_min\": true, \"inclusive_max\": true },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_unfairness\": {\n      \"description\": \"Sensitivity to the penalty for unfair offers based on contribution (unfairness parameter)\",\n      \"range\": { \"min\": 0.0, \"max\": 10.0, \"inclusive_min\": true, \"inclusive_max\": true },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Utility of accepting the proposed offer\",\n      \"range\": { \"min\": \"-inf\", \"max\": \"inf\", \"inclusive_min\": false, \"inclusive_max\": false },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA ratio model calculates the utility of accepting a proposed offer for the responder. Utility is defined as the offered percentage scaled by 'beta_value', divided by a penalty term. The penalty term is 1 plus the positive deviation between the fair share (based on contribution) and the offered share, scaled by 'beta_unfairness'. 'beta_unfairness' is constrained to be non-negative, imposing a disutility for offers below the calculated fair share. This ratio structure and the non-linear penalty applied only to unfair offers create distinct mathematical influences for 'beta_value' (primarily scaling value across offers, linearly for fair/generous offers) and 'beta_unfairness' (specifically modulating utility non-linearly only in the unfair domain), which is intended to improve the identifiability of both parameters compared to previous additive or simple multiplicative models.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: sum_tokens = token_self + token_opp\nfair_perc_self_calc = 50.0 if sum_tokens == 0 else (token_self / sum_tokens) * 100.0\ndeviation = fair_perc_self_calc - split_perc_self\nunfairness_penalty_term = max(0.0, deviation)\nU = (beta_value * split_perc_self) / (1.0 + beta_unfairness * unfairness_penalty_term)\nSummary: A ratio model calculates the utility of accepting a proposed offer for the responder. Utility is defined as the offered percentage scaled by 'beta_value', divided by a penalty term. The penalty term is 1 plus the positive deviation between the fair share (based on contribution) and the offered share, scaled by 'beta_unfairness'. 'beta_unfairness' is constrained to be non-negative, imposing a disutility for offers below the calculated fair share. This ratio structure and the non-linear penalty applied only to unfair offers create distinct mathematical influences for 'beta_value' (primarily scaling value across offers, linearly for fair/generous offers) and 'beta_unfairness' (specifically modulating utility non-linearly only in the unfair domain), which is intended to improve the identifiability of both parameters compared to previous additive or simple multiplicative models.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, beta_value=1.0, beta_unfairness=0.0):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        split_perc_self = trial.get(\"splitperc_self\", 0)\n\n        sum_tokens = token_self + token_opp\n        fair_perc_self_calc = 50.0 if sum_tokens == 0 else (token_self / sum_tokens) * 100.0\n        deviation = fair_perc_self_calc - split_perc_self\n        unfairness_penalty_term = max(0.0, deviation)\n        \n        U = (beta_value * split_perc_self) / (1.0 + beta_unfairness * unfairness_penalty_term)\n        \n        model_predictions.append(U)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.6907814407814408,
  "group_accuracies": {
    "Control": 0.7267441860465116,
    "Cocaine": 0.6585648148148148
  },
  "group_parameter_averages": {
    "Control": {
      "beta_value": 4.786940268825825,
      "beta_unfairness": 5.930795983099347
    },
    "Cocaine": {
      "beta_value": 1.2821892969671964,
      "beta_unfairness": 6.245264242803728
    }
  },
  "fitting_results": [
    {
      "beta_value": -0.05758370203180722,
      "beta_unfairness": 0.0,
      "success": true,
      "log_likelihood": -15.36777148213685,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 2.5960161718336554,
      "beta_unfairness": 10.0,
      "success": true,
      "log_likelihood": -20.18024372895197,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 3.698400056883025,
      "beta_unfairness": 10.0,
      "success": true,
      "log_likelihood": -18.97208967652325,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 0.6133569662415992,
      "beta_unfairness": 10.0,
      "success": true,
      "log_likelihood": -22.02779610779471,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 2.307845429223538,
      "beta_unfairness": 10.0,
      "success": true,
      "log_likelihood": -20.50336667887319,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 5.9258349987610694,
      "beta_unfairness": 10.0,
      "success": true,
      "log_likelihood": -16.86888094873955,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 4.189707556514068,
      "beta_unfairness": 0.0,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 6.8520468570946695,
      "beta_unfairness": 10.0,
      "success": true,
      "log_likelihood": -16.108829949457217,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 10.0,
      "beta_unfairness": 2.8184826836582094e-17,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 1.347358483519669,
      "beta_unfairness": 10.0,
      "success": true,
      "log_likelihood": -21.501984459302932,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 2.715367861286473,
      "beta_unfairness": 10.0,
      "success": true,
      "log_likelihood": -20.046205216172883,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": -0.04909400482645518,
      "beta_unfairness": 0.0,
      "success": true,
      "log_likelihood": -17.229581771370686,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 2.1076413622123322,
      "beta_unfairness": 10.0,
      "success": true,
      "log_likelihood": -20.725261870781114,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 5.5001917616266205,
      "beta_unfairness": 0.0,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 8.741939361746763,
      "beta_unfairness": 0.0,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 10.0,
      "beta_unfairness": 0.0,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 10.0,
      "beta_unfairness": 0.0,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 10.0,
      "beta_unfairness": 4.355401922409314,
      "success": true,
      "log_likelihood": -7.845097663670661,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 10.0,
      "beta_unfairness": 3.96071275733448,
      "success": true,
      "log_likelihood": -7.165002849826886,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 10.0,
      "beta_unfairness": 0.0,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 3.8563021526868493,
      "beta_unfairness": 10.0,
      "success": true,
      "log_likelihood": -18.807572081170715,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 10.0,
      "beta_unfairness": 4.94938598396394,
      "success": true,
      "log_likelihood": -8.780715768754607,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 0.10780747305241187,
      "beta_unfairness": 10.0,
      "success": true,
      "log_likelihood": -22.37459869666872,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 0.13946034486837225,
      "beta_unfairness": 0.594179007942982,
      "success": true,
      "log_likelihood": -21.08299696112446,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3333333333333333,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 2.780808274480247,
      "beta_unfairness": 10.0,
      "success": true,
      "log_likelihood": -19.972827017141,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 4.458421834406547,
      "beta_unfairness": 10.0,
      "success": true,
      "log_likelihood": -18.20236408514285,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 4.025767159273633,
      "beta_unfairness": 10.0,
      "success": true,
      "log_likelihood": -18.63336878293613,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 0.3148822602777285,
      "beta_unfairness": 10.0,
      "success": true,
      "log_likelihood": -22.13979812411902,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 10.0,
      "beta_unfairness": 4.7726714256881895,
      "success": true,
      "log_likelihood": -8.512582932531776,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 9.77290952041767,
      "beta_unfairness": 10.0,
      "success": true,
      "log_likelihood": -13.994261230745812,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 10.0,
      "beta_unfairness": 0.0,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": -0.05758354773795457,
      "beta_unfairness": 0.0,
      "success": true,
      "log_likelihood": -15.367771482090959,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 0.027704996482972723,
      "beta_unfairness": 4.952483199273388,
      "success": true,
      "log_likelihood": -24.301458801942783,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 0.6078758936140567,
      "beta_unfairness": 10.0,
      "success": true,
      "log_likelihood": -22.030444056378077,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 10.0,
      "beta_unfairness": 0.0,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 4.558080966277793,
      "beta_unfairness": 10.0,
      "success": true,
      "log_likelihood": -18.10583256940727,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 6.958918935120332,
      "beta_unfairness": 8.125483251822192,
      "success": true,
      "log_likelihood": -14.826049487557832,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 2.7011391983031166,
      "beta_unfairness": 10.0,
      "success": true,
      "log_likelihood": -20.06216857561844,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 4.784412385289157,
      "beta_unfairness": 9.126855535367387,
      "success": true,
      "log_likelihood": -17.470365610496987,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 10.0,
      "beta_unfairness": 4.187054189470022,
      "success": true,
      "log_likelihood": -7.567879075574142,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 4.078744436900155,
      "beta_unfairness": 10.0,
      "success": true,
      "log_likelihood": -18.57956382680541,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 0.1076165403389276,
      "beta_unfairness": 10.0,
      "success": true,
      "log_likelihood": -22.375960261354876,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 0.12613357537323935,
      "beta_unfairness": 0.0,
      "success": true,
      "log_likelihood": -5.497311257803049,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 2.672940446517415,
      "beta_unfairness": 10.0,
      "success": true,
      "log_likelihood": -20.093822107872164,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 4.6929318221697836,
      "beta_unfairness": 10.0,
      "success": true,
      "log_likelihood": -17.976650412181392,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 3.821727462267917,
      "beta_unfairness": 7.833139909560166,
      "success": true,
      "log_likelihood": -17.81638961554169,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 2.8535278791665197,
      "beta_unfairness": 9.995644015971438,
      "success": true,
      "log_likelihood": -19.884524196049163,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.16127503041592323,
      "beta_unfairness": 10.0,
      "success": true,
      "log_likelihood": -22.196773235913103,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 1.5389711437518683,
      "beta_unfairness": 10.0,
      "success": true,
      "log_likelihood": -21.321202318750693,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.02805656437352985,
      "beta_unfairness": 6.727085346096054,
      "success": true,
      "log_likelihood": -24.288403217396876,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 4.110142818873885,
      "beta_unfairness": 10.0,
      "success": true,
      "log_likelihood": -18.547852161808798,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": -6.438305582588981,
      "beta_unfairness": 8.998723284578958,
      "success": true,
      "log_likelihood": -61.93311824925577,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 3.2425533948969023,
      "beta_unfairness": 10.0,
      "success": true,
      "log_likelihood": -42.48696570825633,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 1.3145344938352437,
      "beta_unfairness": 9.99886073939143,
      "success": true,
      "log_likelihood": -44.557187964382734,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.16388636682474778,
      "beta_unfairness": 10.0,
      "success": true,
      "log_likelihood": -22.196090670114263,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.9860291189384688,
      "beta_unfairness": 10.0,
      "success": true,
      "log_likelihood": -21.799397852108896,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.11909938986399053,
      "beta_unfairness": 10.0,
      "success": true,
      "log_likelihood": -22.3083217172801,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.06336676135103103,
      "beta_unfairness": 0.0,
      "success": true,
      "log_likelihood": -14.159667079559698,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": -4.276856796397045,
      "beta_unfairness": 4.926514216333992,
      "success": true,
      "log_likelihood": -60.82070670453181,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 3.084005181891171,
      "beta_unfairness": 2.8658008234316803,
      "success": true,
      "log_likelihood": -13.457781273209227,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.108481211423693,
      "beta_unfairness": 0.2873104352573436,
      "success": true,
      "log_likelihood": -20.500940898714667,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 2.9074745495308307,
      "beta_unfairness": 10.0,
      "success": true,
      "log_likelihood": -19.83124396989019,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": -4.351267672775543,
      "beta_unfairness": 2.5091522224986678,
      "success": true,
      "log_likelihood": -56.042222990844174,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.02745044944152615,
      "beta_unfairness": 10.0,
      "success": true,
      "log_likelihood": -24.312218956280006,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.01885192559686439,
      "beta_unfairness": 0.27973785207740054,
      "success": true,
      "log_likelihood": -24.60032774124535,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 3.9030190636591735,
      "beta_unfairness": 10.0,
      "success": true,
      "log_likelihood": -18.759106890106775,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 10.0,
      "beta_unfairness": 3.822368609182569,
      "success": true,
      "log_likelihood": -6.922487037613291,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 10.0,
      "beta_unfairness": 6.224804643295795,
      "success": true,
      "log_likelihood": -10.495765595351921,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 1.571915118891522,
      "beta_unfairness": 8.617800603119987,
      "success": true,
      "log_likelihood": -21.033251317042517,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 9.998335313409331,
      "beta_unfairness": 5.969426733246621,
      "success": true,
      "log_likelihood": -10.189974856090084,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.08689323107986031,
      "beta_unfairness": 9.88197552416061,
      "success": true,
      "log_likelihood": -22.58307414497299,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": -6.02578612977172,
      "beta_unfairness": 8.529747136037845,
      "success": true,
      "log_likelihood": -62.003366000034724,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 1.3091248243038072,
      "beta_unfairness": 7.6368191015572435,
      "success": true,
      "log_likelihood": -21.15593417231593,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.08159281639212213,
      "beta_unfairness": 0.029203797936031825,
      "success": true,
      "log_likelihood": -15.641761356790456,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 1.2210751848543102,
      "beta_unfairness": 9.392572014501328,
      "success": true,
      "log_likelihood": -44.571688273969514,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.3301689804965884,
      "beta_unfairness": 0.44453395484930436,
      "success": true,
      "log_likelihood": -16.644041546416815,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 10.0,
      "beta_unfairness": 3.3006980966107267,
      "success": true,
      "log_likelihood": -5.9313748433925495,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": -9.229032019025581,
      "beta_unfairness": 2.3133025938467786,
      "success": true,
      "log_likelihood": -27.32291965104108,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 2.161859067033194,
      "beta_unfairness": 10.0,
      "success": true,
      "log_likelihood": -20.66552297445363,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": -0.05758016319955588,
      "beta_unfairness": 0.0,
      "success": true,
      "log_likelihood": -15.367771503321928,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.16966423386149546,
      "beta_unfairness": 10.0,
      "success": true,
      "log_likelihood": -22.190204688827485,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.08320484217858676,
      "beta_unfairness": 0.0,
      "success": true,
      "log_likelihood": -10.53747130642013,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": -0.05134915616369641,
      "beta_unfairness": 0.0,
      "success": true,
      "log_likelihood": -16.727467235844095,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.1276556550126655,
      "beta_unfairness": 0.561364913911635,
      "success": true,
      "log_likelihood": -21.203814663791142,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 1.4607179658551523,
      "beta_unfairness": 10.0,
      "success": true,
      "log_likelihood": -21.396647673827676,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": -8.15637311764416,
      "beta_unfairness": 4.73338705474417,
      "success": true,
      "log_likelihood": -79.08798751254619,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 5.448207325504973,
      "beta_unfairness": 10.0,
      "success": true,
      "log_likelihood": -17.28336818839658,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": -2.2586499346018968e-05,
      "beta_unfairness": 5.243706844757257,
      "success": true,
      "log_likelihood": -24.95329796918943,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 10.0,
      "beta_unfairness": 3.1072449215105737,
      "success": true,
      "log_likelihood": -5.545358879241055,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.19116597585832973,
      "beta_unfairness": 5.456505294532683,
      "success": true,
      "log_likelihood": -22.141521074690917,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.07175386896862827,
      "beta_unfairness": 0.08525297158064979,
      "success": true,
      "log_likelihood": -19.795673732177185,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "beta_value": {
        "r": 0.9248759523280351,
        "p": 6.127863598423449e-43
      },
      "beta_unfairness": {
        "r": 0.6077908351093765,
        "p": 2.0042646318311383e-11
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 46.16727227659617,
  "bic_Control": 34.29392174000835,
  "bic_Cocaine": 56.80381546562277,
  "bic_results": {
    "average_bic": 46.16727227659617,
    "individual_bics": [
      37.90258084118592,
      47.52752533481616,
      45.11121722995872,
      51.22263009250164,
      48.173771234658595,
      40.90479977439132,
      7.167037869712219,
      39.38469777582665,
      7.167037869712219,
      50.17100679551808,
      47.259448309257984,
      41.62620141965359,
      48.61756161847445,
      7.167037869712219,
      7.167037869712219,
      7.167037869712219,
      7.167037869712219,
      22.85723320425354,
      21.497043576565993,
      7.167037869712219,
      44.78218203925365,
      24.728469414421433,
      51.91623527024966,
      49.33303179916114,
      47.11269191119422,
      43.57176604719792,
      44.43377544278448,
      51.44663412515026,
      24.192203741975774,
      35.155560338403845,
      7.167037869712219,
      37.902580841094135,
      55.76995548079778,
      51.22792598966837,
      7.167037869712219,
      43.37870301572676,
      36.81913685202788,
      47.2913750281491,
      42.10776909790619,
      22.302796028060506,
      44.326165530523035,
      51.91895839962197,
      18.161660392518318,
      47.354682092656546,
      43.120338701275,
      42.7998171079956,
      46.936086269010545,
      51.56058434873842,
      49.809442514413604,
      55.74384431170597,
      44.262742200529814,
      131.03327437542376,
      92.14096929342487,
      96.28141380567769,
      51.55921921714074,
      50.76583358113001,
      51.78368131147242,
      35.48637203603162,
      128.80845128597585,
      34.082600423330675,
      48.16891967434155,
      46.829525816692595,
      119.25148385860057,
      55.79147578947223,
      56.36769335940292,
      44.68525165712577,
      21.012011952138803,
      28.158569067616064,
      49.23354051099725,
      27.54698758909239,
      52.3331861668582,
      131.17376987698168,
      49.47890622154408,
      38.45056059049313,
      96.31041442485125,
      40.45512096974585,
      19.02978756369732,
      61.81287717899438,
      48.49808382581948,
      37.90258088355608,
      51.54744725456719,
      28.24198048975248,
      40.62197234860041,
      49.5746672044945,
      49.96033322456757,
      165.3430129020046,
      41.73377425370538,
      57.073633815291075,
      18.257755635394332,
      51.45008002629405,
      46.75838534126659
    ],
    "group_enabled": true,
    "group_bics": {
      "Control": [
        37.90258084118592,
        47.52752533481616,
        45.11121722995872,
        51.22263009250164,
        48.173771234658595,
        40.90479977439132,
        7.167037869712219,
        39.38469777582665,
        7.167037869712219,
        50.17100679551808,
        47.259448309257984,
        41.62620141965359,
        48.61756161847445,
        7.167037869712219,
        7.167037869712219,
        7.167037869712219,
        7.167037869712219,
        22.85723320425354,
        21.497043576565993,
        7.167037869712219,
        44.78218203925365,
        24.728469414421433,
        51.91623527024966,
        49.33303179916114,
        47.11269191119422,
        43.57176604719792,
        44.43377544278448,
        51.44663412515026,
        24.192203741975774,
        35.155560338403845,
        7.167037869712219,
        37.902580841094135,
        55.76995548079778,
        51.22792598966837,
        7.167037869712219,
        43.37870301572676,
        36.81913685202788,
        47.2913750281491,
        42.10776909790619,
        22.302796028060506,
        44.326165530523035,
        51.91895839962197,
        18.161660392518318
      ],
      "Cocaine": [
        47.354682092656546,
        43.120338701275,
        42.7998171079956,
        46.936086269010545,
        51.56058434873842,
        49.809442514413604,
        55.74384431170597,
        44.262742200529814,
        131.03327437542376,
        92.14096929342487,
        96.28141380567769,
        51.55921921714074,
        50.76583358113001,
        51.78368131147242,
        35.48637203603162,
        128.80845128597585,
        34.082600423330675,
        48.16891967434155,
        46.829525816692595,
        119.25148385860057,
        55.79147578947223,
        56.36769335940292,
        44.68525165712577,
        21.012011952138803,
        28.158569067616064,
        49.23354051099725,
        27.54698758909239,
        52.3331861668582,
        131.17376987698168,
        49.47890622154408,
        38.45056059049313,
        96.31041442485125,
        40.45512096974585,
        19.02978756369732,
        61.81287717899438,
        48.49808382581948,
        37.90258088355608,
        51.54744725456719,
        28.24198048975248,
        40.62197234860041,
        49.5746672044945,
        49.96033322456757,
        165.3430129020046,
        41.73377425370538,
        57.073633815291075,
        18.257755635394332,
        51.45008002629405,
        46.75838534126659
      ]
    },
    "num_parameters": 2,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- beta_value: r = 0.925\n- beta_unfairness: r = 0.608",
  "previous_models": [
    "Specification: sum_tokens = token_self + token_opp\nfair_perc_self_calc = 50.0 if sum_tokens == 0 else (token_self / sum_tokens) * 100.0\ndeviation = fair_perc_self_calc - split_perc_self\nunfairness_penalty_term = max(0.0, deviation)\nU = (beta_value * split_perc_self) / (1.0 + beta_unfairness * unfairness_penalty_term)\nSummary: A ratio model calculates the utility of accepting a proposed offer for the responder. Utility is defined as the offered percentage scaled by 'beta_value', divided by a penalty term. The penalty term is 1 plus the positive deviation between the fair share (based on contribution) and the offered share, scaled by 'beta_unfairness'. 'beta_unfairness' is constrained to be non-negative, imposing a disutility for offers below the calculated fair share. This ratio structure and the non-linear penalty applied only to unfair offers create distinct mathematical influences for 'beta_value' (primarily scaling value across offers, linearly for fair/generous offers) and 'beta_unfairness' (specifically modulating utility non-linearly only in the unfair domain), which is intended to improve the identifiability of both parameters compared to previous additive or simple multiplicative models.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 46.16727227659617\nOverall Accuracy: 0.6908\nGroup Accuracies:\n- Control: 0.7267\n- Cocaine: 0.6586\n\nParameter Recovery:\n- beta_value: r = 0.925\n- beta_unfairness: r = 0.608"
  ]
}