{
  "task_description": "In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "Okay, here are the improved instructions for the next run, focusing intensely on designing a model structure that ensures parameter identifiability for *both* learnable parameters while building on the successes and addressing the failures of the previous attempts.\n\nInstructions for Run 64 of 100:\n\nThe **unwavering primary objective remains achieving parameter recovery >= 0.7 for *all* learnable parameters**. This is the critical benchmark for model usability. While improved BIC (lower is better) and accuracy (higher is better) are valuable secondary goals, they must not come at the expense of robust parameter recovery. A model with excellent fit but poor parameter identifiability is not suitable for drawing meaningful conclusions about the underlying cognitive processes.\n\nThe previous run (Run 63) implemented a ratio model (`U = (beta_value * split_perc_self) / (1.0 + beta_unfairness * unfairness_penalty_term)`, where `unfairness_penalty_term = max(0.0, fair_perc_self_calc - split_perc_self)`). This model achieved promising results for BIC (46.17) and Accuracy (0.691), and excellent recovery for `beta_value` (r = 0.925). However, it critically failed the parameter recovery test for `beta_unfairness` (r = 0.608).\n\nComparing this to the cubic additive penalty model (Run 61: BIC 44.74, Accuracy 0.661, `beta_value` r=0.917, `beta_unfairness` r=-0.172), we see a pattern: models combining a value term (`beta_value * split_perc_self`) with a fairness/penalty term struggle to recover the parameter associated with the penalty. While Run 63's ratio structure showed better recovery for the second parameter (0.608) than Run 61's additive structure (-0.172), it still wasn't sufficient.\n\nThe consistent challenge lies in designing the mathematical interaction such that the influence of `beta_value` and the influence of `beta_unfairness` are sufficiently independent across the data to allow for reliable simultaneous estimation of both. Simply scaling a linear or cubic penalty term (whether added, subtracted, or in a denominator) by the second parameter hasn't achieved this separation for `beta_unfairness`.\n\nThe challenge for this run is to refine the model structure, perhaps building on the promise of the ratio approach or exploring other non-linear combinations, specifically focusing on making the influence of `beta_unfairness` profoundly distinct and reliably estimable.\n\nWe need a mathematical structure for utility, still using exactly **2 learnable parameters**, where their influence on responder decisions (`trial_role == 1`) is profoundly separable and distinguishable. Given the failures so far, consider fundamentally different ways `beta_unfairness` interacts with the unfairness deviation (`max(0, fair_perc_self_calc - split_perc_self)`).\n\nThink **\"Out of the Box\" Again**: The problem might be that `beta_unfairness` is just linearly scaling a penalty term. What if `beta_unfairness` interacts with the *shape* of the penalty function itself? Or if the penalty term scaled by `beta_unfairness` is itself a non-linear function of the deviation?\n\nConsider alternative strategies focusing on creating mathematically distinct parameter influences, building on previous attempts:\n\n*   **Ratio with Non-linear Penalty Component:** Enhance the ratio structure from Run 63. Instead of `1.0 + beta_unfairness * unfairness_penalty_term`, make the penalty term in the denominator a non-linear function of `unfairness_penalty_term`, where `beta_unfairness` scales *that* non-linear function. For example, `U = (beta_value * split_perc_self) / (1.0 + beta_unfairness * max(0.0, fair_perc_self_calc - split_perc_self)^2)`. (Using a quadratic penalty term scaled by beta_unfairness in the denominator). This structure makes the disutility grow quadratically with unfairness, controlled by `beta_unfairness`.\n*   **Additive with Different Non-linear Penalty:** Revisit the additive penalty structure, but use a different non-linear function than the cubic one that failed in Run 61. For instance, `U = beta_value * split_perc_self - beta_unfairness * max(0, fair_perc_self_calc - split_perc_self)^2`. (Using a quadratic penalty term scaled by beta_unfairness). This might provide a less aggressive, more stable penalty shape than the cubic, potentially improving `beta_unfairness` recovery.\n*   **Multiplicative with Non-linear Penalty Factor:** Explore `U = beta_value * split_perc_self * (1.0 - beta_unfairness * max(0, fair_perc_self_calc - split_perc_self)^2)`. This is similar to the ratio structure for large denominators, but the interaction is multiplicative. Be careful with the range of the penalty factor `(1.0 - ...)`.\n\nThe goal is to design a utility calculation `U` involving `split_perc_self`, `fair_perc_self_calc` (derived from `token_self`, `token_opp`), and exactly two learnable parameters (`beta_value`, `beta_unfairness`) such that the influence of `beta_value` on `U` is mathematically distinct from the influence of `beta_unfairness` across the range of possible offers. Focus on making `beta_unfairness` influence the utility in a way that is clearly non-linear and specifically tied to the *degree* of unfairness, distinguishing it from the general value sensitivity captured by `beta_value`.\n\n*   **Key Inputs & Calculated Variables:** Use `split_perc_self`, `token_self`, `token_opp` as data variables. Calculate `sum_tokens`, `fair_perc_self_calc`, and any other necessary intermediate variables like `deviation` and `unfairness_penalty_term = max(0.0, deviation)`. Ensure `fair_perc_self_calc` handles `sum_tokens == 0` correctly (defaulting to 0.5 or 50.0 depending on scale). Use a small epsilon (`1e-6` or similar) for numerical stability if needed (e.g., denominators, logarithms).\n*   **Model Formula:** Define `U`. Include calculation steps for derived variables *before* the formula for `U`. Use clear mathematical notation within the <MODEL> tags (only the formula).\n*   **Learnable Parameters:** Exactly **2 learnable parameters**. Choose descriptive, Python-safe names (e.g., `beta_value`, `beta_unfairness`). Define clear, generous, finite numerical bounds (e.g., [-10.0, 10.0], [-50.0, 50.0], [0.0, 100.0], etc. appropriate for the scale of their influence). For parameters scaling penalty terms (like `beta_unfairness`), consider if a positive constraint `[0.0, 10.0]` makes theoretical sense and aids recovery.\n*   **Calculated Variables:** Include descriptions for *all* calculated variables used in the model (including U) with `source: \"calculated\"`. Include descriptions for all data variables used as inputs (`token_self`, `token_opp`, `split_perc_self`) with `source: \"data\"`.\n*   **Variable Descriptions:** Provide variable descriptions in JSON format between <VARIABLES> tags for *all* variables in the <MODEL> formula. Include source, range (with inclusive flags), distribution (if applicable), and learnable status.\n*   **Target Variable:** Specify \"accept\" using <target_variable> tags.\n*   **Summary:** Provide a concise summary between <SUMMARY> tags. Describe the model's core idea and, crucially, explain *how its specific non-linear, asymmetric, or interactive mathematical structure is fundamentally different from the previous failed models (simple additive/subtractive, simple multiplicative exponential, and the linear penalty in the ratio denominator) and how this difference is specifically intended to ensure robust parameter identifiability for *both* learnable parameters*, particularly improving the recovery of the fairness/penalty parameter. Explicitly explain why this new structure should allow for better recovery of the second parameter compared to previous attempts, referencing the previous results (especially Run 63's near-miss).\n\nAvailable Data Variables:\n- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.\n(Note: Use `split_perc_self` for the participant's proposed percentage share percentage).\n\nPlease think through this step by step, then provide your model specification and variable descriptions. Remember that robust parameter identifiability for *both* learnable parameters (>= 0.7 recovery for both) is the absolute priority. Your goal is to find a structure where both parameters' influences are clearly distinguishable across the range of possible offers, leading to reliable estimates. Be creative and explore structures that make the second parameter's influence on utility more non-linear and distinct than simple linear scaling of a deviation term.\n\nPlease think through this step by step, then provide your model specification and variable descriptions.\n</previous_instructions>",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: Okay, here are the improved instructions for the next run, focusing intensely on designing a model structure that ensures parameter identifiability for *both* learnable parameters while building on the successes and addressing the failures of the previous attempts.\n\nInstructions for Run 64 of 100:\n\nThe **unwavering primary objective remains achieving parameter recovery >= 0.7 for *all* learnable parameters**. This is the critical benchmark for model usability. While improved BIC (lower is better) and accuracy (higher is better) are valuable secondary goals, they must not come at the expense of robust parameter recovery. A model with excellent fit but poor parameter identifiability is not suitable for drawing meaningful conclusions about the underlying cognitive processes.\n\nThe previous run (Run 63) implemented a ratio model (`U = (beta_value * split_perc_self) / (1.0 + beta_unfairness * unfairness_penalty_term)`, where `unfairness_penalty_term = max(0.0, fair_perc_self_calc - split_perc_self)`). This model achieved promising results for BIC (46.17) and Accuracy (0.691), and excellent recovery for `beta_value` (r = 0.925). However, it critically failed the parameter recovery test for `beta_unfairness` (r = 0.608).\n\nComparing this to the cubic additive penalty model (Run 61: BIC 44.74, Accuracy 0.661, `beta_value` r=0.917, `beta_unfairness` r=-0.172), we see a pattern: models combining a value term (`beta_value * split_perc_self`) with a fairness/penalty term struggle to recover the parameter associated with the penalty. While Run 63's ratio structure showed better recovery for the second parameter (0.608) than Run 61's additive structure (-0.172), it still wasn't sufficient.\n\nThe consistent challenge lies in designing the mathematical interaction such that the influence of `beta_value` and the influence of `beta_unfairness` are sufficiently independent across the data to allow for reliable simultaneous estimation of both. Simply scaling a linear or cubic penalty term (whether added, subtracted, or in a denominator) by the second parameter hasn't achieved this separation for `beta_unfairness`.\n\nThe challenge for this run is to refine the model structure, perhaps building on the promise of the ratio approach or exploring other non-linear combinations, specifically focusing on making the influence of `beta_unfairness` profoundly distinct and reliably estimable.\n\nWe need a mathematical structure for utility, still using exactly **2 learnable parameters**, where their influence on responder decisions (`trial_role == 1`) is profoundly separable and distinguishable. Given the failures so far, consider fundamentally different ways `beta_unfairness` interacts with the unfairness deviation (`max(0, fair_perc_self_calc - split_perc_self)`).\n\nThink **\"Out of the Box\" Again**: The problem might be that `beta_unfairness` is just linearly scaling a penalty term. What if `beta_unfairness` interacts with the *shape* of the penalty function itself? Or if the penalty term scaled by `beta_unfairness` is itself a non-linear function of the deviation?\n\nConsider alternative strategies focusing on creating mathematically distinct parameter influences, building on previous attempts:\n\n*   **Ratio with Non-linear Penalty Component:** Enhance the ratio structure from Run 63. Instead of `1.0 + beta_unfairness * unfairness_penalty_term`, make the penalty term in the denominator a non-linear function of `unfairness_penalty_term`, where `beta_unfairness` scales *that* non-linear function. For example, `U = (beta_value * split_perc_self) / (1.0 + beta_unfairness * max(0.0, fair_perc_self_calc - split_perc_self)^2)`. (Using a quadratic penalty term scaled by beta_unfairness in the denominator). This structure makes the disutility grow quadratically with unfairness, controlled by `beta_unfairness`.\n*   **Additive with Different Non-linear Penalty:** Revisit the additive penalty structure, but use a different non-linear function than the cubic one that failed in Run 61. For instance, `U = beta_value * split_perc_self - beta_unfairness * max(0, fair_perc_self_calc - split_perc_self)^2`. (Using a quadratic penalty term scaled by beta_unfairness). This might provide a less aggressive, more stable penalty shape than the cubic, potentially improving `beta_unfairness` recovery.\n*   **Multiplicative with Non-linear Penalty Factor:** Explore `U = beta_value * split_perc_self * (1.0 - beta_unfairness * max(0, fair_perc_self_calc - split_perc_self)^2)`. This is similar to the ratio structure for large denominators, but the interaction is multiplicative. Be careful with the range of the penalty factor `(1.0 - ...)`.\n\nThe goal is to design a utility calculation `U` involving `split_perc_self`, `fair_perc_self_calc` (derived from `token_self`, `token_opp`), and exactly two learnable parameters (`beta_value`, `beta_unfairness`) such that the influence of `beta_value` on `U` is mathematically distinct from the influence of `beta_unfairness` across the range of possible offers. Focus on making `beta_unfairness` influence the utility in a way that is clearly non-linear and specifically tied to the *degree* of unfairness, distinguishing it from the general value sensitivity captured by `beta_value`.\n\n*   **Key Inputs & Calculated Variables:** Use `split_perc_self`, `token_self`, `token_opp` as data variables. Calculate `sum_tokens`, `fair_perc_self_calc`, and any other necessary intermediate variables like `deviation` and `unfairness_penalty_term = max(0.0, deviation)`. Ensure `fair_perc_self_calc` handles `sum_tokens == 0` correctly (defaulting to 0.5 or 50.0 depending on scale). Use a small epsilon (`1e-6` or similar) for numerical stability if needed (e.g., denominators, logarithms).\n*   **Model Formula:** Define `U`. Include calculation steps for derived variables *before* the formula for `U`. Use clear mathematical notation within the <MODEL> tags (only the formula).\n*   **Learnable Parameters:** Exactly **2 learnable parameters**. Choose descriptive, Python-safe names (e.g., `beta_value`, `beta_unfairness`). Define clear, generous, finite numerical bounds (e.g., [-10.0, 10.0], [-50.0, 50.0], [0.0, 100.0], etc. appropriate for the scale of their influence). For parameters scaling penalty terms (like `beta_unfairness`), consider if a positive constraint `[0.0, 10.0]` makes theoretical sense and aids recovery.\n*   **Calculated Variables:** Include descriptions for *all* calculated variables used in the model (including U) with `source: \"calculated\"`. Include descriptions for all data variables used as inputs (`token_self`, `token_opp`, `split_perc_self`) with `source: \"data\"`.\n*   **Variable Descriptions:** Provide variable descriptions in JSON format between <VARIABLES> tags for *all* variables in the <MODEL> formula. Include source, range (with inclusive flags), distribution (if applicable), and learnable status.\n*   **Target Variable:** Specify \"accept\" using <target_variable> tags.\n*   **Summary:** Provide a concise summary between <SUMMARY> tags. Describe the model's core idea and, crucially, explain *how its specific non-linear, asymmetric, or interactive mathematical structure is fundamentally different from the previous failed models (simple additive/subtractive, simple multiplicative exponential, and the linear penalty in the ratio denominator) and how this difference is specifically intended to ensure robust parameter identifiability for *both* learnable parameters*, particularly improving the recovery of the fairness/penalty parameter. Explicitly explain why this new structure should allow for better recovery of the second parameter compared to previous attempts, referencing the previous results (especially Run 63's near-miss).\n\nAvailable Data Variables:\n- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.\n(Note: Use `split_perc_self` for the participant's proposed percentage share percentage).\n\nPlease think through this step by step, then provide your model specification and variable descriptions. Remember that robust parameter identifiability for *both* learnable parameters (>= 0.7 recovery for both) is the absolute priority. Your goal is to find a structure where both parameters' influences are clearly distinguishable across the range of possible offers, leading to reliable estimates. Be creative and explore structures that make the second parameter's influence on utility more non-linear and distinct than simple linear scaling of a deviation term.\n\nPlease think through this step by step, then provide your model specification and variable descriptions.\n</previous_instructions>\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<MODEL>\nsum_tokens = token_self + token_opp\nfair_perc_self_calc = (token_self / max(1e-6, sum_tokens)) * 100.0\ndeviation = fair_perc_self_calc - split_perc_self\nunfairness_penalty_term = max(0.0, deviation)\nU = (beta_value * split_perc_self) / (1.0 + beta_unfairness * unfairness_penalty_term^2)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The proposed share for the participant (in %)\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"sum_tokens\": {\n      \"description\": \"Total number of tokens found by participant and opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fair_perc_self_calc\": {\n      \"description\": \"Participant's calculated fair percentage share based on token contribution\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"deviation\": {\n      \"description\": \"Difference between participant's calculated fair share and the proposed share\",\n      \"range\": {\n        \"min\": -100.0,\n        \"max\": 100.0\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"unfairness_penalty_term\": {\n      \"description\": \"Magnitude of unfairness against the participant (positive deviation)\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_value\": {\n      \"description\": \"Sensitivity parameter for the proposed value percentage\",\n      \"range\": {\n        \"min\": -10.0,\n        \"max\": 10.0\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_unfairness\": {\n      \"description\": \"Sensitivity parameter for the unfairness penalty term, scaling the squared deviation\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 10.0\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Utility of accepting the proposed offer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA ratio model predicting responder utility based on the proposed percentage share and the perceived unfairness relative to token contributions. Utility is calculated as the proposed percentage scaled by 'beta_value', divided by a term that penalizes unfair offers. This penalty term is 1.0 plus the squared positive deviation from the calculated fair share, scaled by 'beta_unfairness'. Constraining 'beta_unfairness' to be non-negative ensures the penalty increases utility and maintains denominator stability. This structure attempts to improve parameter identifiability, particularly for 'beta_unfairness', by applying it as a scaling factor to a non-linear (squared) penalty term within the denominator, aiming for a more distinct influence compared to simpler additive or linear scaling models like those in Run 61 and Run 63.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['beta_value', 'beta_unfairness']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                sum_tokens = token_self + token_opp\nfair_perc_self_calc = (token_self / max(1e-6, sum_tokens)) * 100.0\ndeviation = fair_perc_self_calc - split_perc_self\nunfairness_penalty_term = max(0.0, deviation)\nU = (beta_value * split_perc_self) / (1.0 + beta_unfairness * unfairness_penalty_term^2)\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The proposed share for the participant (in %)\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"sum_tokens\": {\n      \"description\": \"Total number of tokens found by participant and opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fair_perc_self_calc\": {\n      \"description\": \"Participant's calculated fair percentage share based on token contribution\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"deviation\": {\n      \"description\": \"Difference between participant's calculated fair share and the proposed share\",\n      \"range\": {\n        \"min\": -100.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"unfairness_penalty_term\": {\n      \"description\": \"Magnitude of unfairness against the participant (positive deviation)\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_value\": {\n      \"description\": \"Sensitivity parameter for the proposed value percentage\",\n      \"range\": {\n        \"min\": -10.0,\n        \"max\": 10.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_unfairness\": {\n      \"description\": \"Sensitivity parameter for the unfairness penalty term, scaling the squared deviation\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 10.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Utility of accepting the proposed offer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, beta_value=1.0, beta_unfairness=0.0):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        split_perc_self = trial.get(\"splitperc_self\", 0.0)\n        \n        sum_tokens = token_self + token_opp\n        fair_perc_self_calc = (token_self / max(1e-6, sum_tokens)) * 100.0\n        deviation = fair_perc_self_calc - split_perc_self\n        unfairness_penalty_term = max(0.0, deviation)\n        \n        U = (beta_value * split_perc_self) / (1.0 + beta_unfairness * unfairness_penalty_term**2)\n        \n        model_predictions.append(U)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data, beta_value=0.5, beta_unfairness=0.2)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n```",
      "timestamp": 1746102841.100786
    }
  ],
  "learnable_parameters": {
    "beta_value": {
      "description": "Sensitivity parameter for the proposed value percentage",
      "range": {
        "min": -10.0,
        "max": 10.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta_unfairness": {
      "description": "Sensitivity parameter for the unfairness penalty term, scaling the squared deviation",
      "range": {
        "min": 0.0,
        "max": 10.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "sum_tokens = token_self + token_opp\nfair_perc_self_calc = (token_self / max(1e-6, sum_tokens)) * 100.0\ndeviation = fair_perc_self_calc - split_perc_self\nunfairness_penalty_term = max(0.0, deviation)\nU = (beta_value * split_perc_self) / (1.0 + beta_unfairness * unfairness_penalty_term^2)",
  "variable_descriptions": {
    "token_self": {
      "description": "Number of tokens found by the participant",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "split_perc_self": {
      "description": "The proposed share for the participant (in %)",
      "range": {
        "min": 0.0,
        "max": 100.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "sum_tokens": {
      "description": "Total number of tokens found by participant and opponent",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "fair_perc_self_calc": {
      "description": "Participant's calculated fair percentage share based on token contribution",
      "range": {
        "min": 0.0,
        "max": 100.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "deviation": {
      "description": "Difference between participant's calculated fair share and the proposed share",
      "range": {
        "min": -100.0,
        "max": 100.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "unfairness_penalty_term": {
      "description": "Magnitude of unfairness against the participant (positive deviation)",
      "range": {
        "min": 0.0,
        "max": 100.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "beta_value": {
      "description": "Sensitivity parameter for the proposed value percentage",
      "range": {
        "min": -10.0,
        "max": 10.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta_unfairness": {
      "description": "Sensitivity parameter for the unfairness penalty term, scaling the squared deviation",
      "range": {
        "min": 0.0,
        "max": 10.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "U": {
      "description": "Utility of accepting the proposed offer",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "A ratio model predicting responder utility based on the proposed percentage share and the perceived unfairness relative to token contributions. Utility is calculated as the proposed percentage scaled by 'beta_value', divided by a term that penalizes unfair offers. This penalty term is 1.0 plus the squared positive deviation from the calculated fair share, scaled by 'beta_unfairness'. Constraining 'beta_unfairness' to be non-negative ensures the penalty increases utility and maintains denominator stability. This structure attempts to improve parameter identifiability, particularly for 'beta_unfairness', by applying it as a scaling factor to a non-linear (squared) penalty term within the denominator, aiming for a more distinct influence compared to simpler additive or linear scaling models like those in Run 61 and Run 63.",
  "target_variable": "accept",
  "full_reasoning": "<MODEL>\nsum_tokens = token_self + token_opp\nfair_perc_self_calc = (token_self / max(1e-6, sum_tokens)) * 100.0\ndeviation = fair_perc_self_calc - split_perc_self\nunfairness_penalty_term = max(0.0, deviation)\nU = (beta_value * split_perc_self) / (1.0 + beta_unfairness * unfairness_penalty_term^2)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The proposed share for the participant (in %)\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"sum_tokens\": {\n      \"description\": \"Total number of tokens found by participant and opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fair_perc_self_calc\": {\n      \"description\": \"Participant's calculated fair percentage share based on token contribution\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"deviation\": {\n      \"description\": \"Difference between participant's calculated fair share and the proposed share\",\n      \"range\": {\n        \"min\": -100.0,\n        \"max\": 100.0\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"unfairness_penalty_term\": {\n      \"description\": \"Magnitude of unfairness against the participant (positive deviation)\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_value\": {\n      \"description\": \"Sensitivity parameter for the proposed value percentage\",\n      \"range\": {\n        \"min\": -10.0,\n        \"max\": 10.0\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_unfairness\": {\n      \"description\": \"Sensitivity parameter for the unfairness penalty term, scaling the squared deviation\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 10.0\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Utility of accepting the proposed offer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA ratio model predicting responder utility based on the proposed percentage share and the perceived unfairness relative to token contributions. Utility is calculated as the proposed percentage scaled by 'beta_value', divided by a term that penalizes unfair offers. This penalty term is 1.0 plus the squared positive deviation from the calculated fair share, scaled by 'beta_unfairness'. Constraining 'beta_unfairness' to be non-negative ensures the penalty increases utility and maintains denominator stability. This structure attempts to improve parameter identifiability, particularly for 'beta_unfairness', by applying it as a scaling factor to a non-linear (squared) penalty term within the denominator, aiming for a more distinct influence compared to simpler additive or linear scaling models like those in Run 61 and Run 63.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: sum_tokens = token_self + token_opp\nfair_perc_self_calc = (token_self / max(1e-6, sum_tokens)) * 100.0\ndeviation = fair_perc_self_calc - split_perc_self\nunfairness_penalty_term = max(0.0, deviation)\nU = (beta_value * split_perc_self) / (1.0 + beta_unfairness * unfairness_penalty_term^2)\nSummary: A ratio model predicting responder utility based on the proposed percentage share and the perceived unfairness relative to token contributions. Utility is calculated as the proposed percentage scaled by 'beta_value', divided by a term that penalizes unfair offers. This penalty term is 1.0 plus the squared positive deviation from the calculated fair share, scaled by 'beta_unfairness'. Constraining 'beta_unfairness' to be non-negative ensures the penalty increases utility and maintains denominator stability. This structure attempts to improve parameter identifiability, particularly for 'beta_unfairness', by applying it as a scaling factor to a non-linear (squared) penalty term within the denominator, aiming for a more distinct influence compared to simpler additive or linear scaling models like those in Run 61 and Run 63.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, beta_value=1.0, beta_unfairness=0.0):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        split_perc_self = trial.get(\"splitperc_self\", 0.0)\n        \n        sum_tokens = token_self + token_opp\n        fair_perc_self_calc = (token_self / max(1e-6, sum_tokens)) * 100.0\n        deviation = fair_perc_self_calc - split_perc_self\n        unfairness_penalty_term = max(0.0, deviation)\n        \n        U = (beta_value * split_perc_self) / (1.0 + beta_unfairness * unfairness_penalty_term**2)\n        \n        model_predictions.append(U)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.6904761904761905,
  "group_accuracies": {
    "Control": 0.7616279069767442,
    "Cocaine": 0.6267361111111112
  },
  "group_parameter_averages": {
    "Control": {
      "beta_value": 7.600369431331876,
      "beta_unfairness": 2.0756086315414106
    },
    "Cocaine": {
      "beta_value": 3.676998210010071,
      "beta_unfairness": 4.0156842156198955
    }
  },
  "fitting_results": [
    {
      "beta_value": -9.999412562151917,
      "beta_unfairness": 0.3949342980270576,
      "success": true,
      "log_likelihood": -58.377297682882585,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 10.0,
      "beta_unfairness": 2.985274573049733,
      "success": true,
      "log_likelihood": -18.80359486301319,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 9.998397814594396,
      "beta_unfairness": 1.4017973936702086,
      "success": true,
      "log_likelihood": -17.192207450916417,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 3.2563428081684966,
      "beta_unfairness": 9.998247782658972,
      "success": true,
      "log_likelihood": -21.949320078696438,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 10.0,
      "beta_unfairness": 2.688696645764638,
      "success": true,
      "log_likelihood": -18.625931958219244,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 10.0,
      "beta_unfairness": 1.0309080916566111,
      "success": true,
      "log_likelihood": -16.271907364781885,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 10.0,
      "beta_unfairness": 1.8402458393755517e-16,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 10.0,
      "beta_unfairness": 0.7404572175211324,
      "success": true,
      "log_likelihood": -15.09339498022265,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 10.0,
      "beta_unfairness": 0.0,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 10.0,
      "beta_unfairness": 6.106767142110978,
      "success": true,
      "log_likelihood": -19.96709199502146,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 10.0,
      "beta_unfairness": 2.1855148755724367,
      "success": true,
      "log_likelihood": -18.242193303745015,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": -0.04910601600292812,
      "beta_unfairness": 0.0,
      "success": true,
      "log_likelihood": -17.229582100283135,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 10.0,
      "beta_unfairness": 3.27610728732439,
      "success": true,
      "log_likelihood": -18.948419668686387,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 10.0,
      "beta_unfairness": 0.0,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 10.0,
      "beta_unfairness": 0.0,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 10.0,
      "beta_unfairness": 0.0,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 10.0,
      "beta_unfairness": 0.0,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 10.0,
      "beta_unfairness": 0.15130895191956228,
      "success": true,
      "log_likelihood": -7.404997599378248,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 9.999997201140381,
      "beta_unfairness": 0.12465405243829245,
      "success": true,
      "log_likelihood": -6.476609133403043,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 10.0,
      "beta_unfairness": 0.0,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 10.0,
      "beta_unfairness": 1.4872744714854673,
      "success": true,
      "log_likelihood": -17.352518526073215,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 10.0,
      "beta_unfairness": 0.1742375940545588,
      "success": true,
      "log_likelihood": -8.09948006871236,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 0.13976725450996158,
      "beta_unfairness": 10.0,
      "success": true,
      "log_likelihood": -22.244010316926307,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 0.07249277593749988,
      "beta_unfairness": 0.01256825701646035,
      "success": true,
      "log_likelihood": -20.792176928367354,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 10.0,
      "beta_unfairness": 2.2044118368241046,
      "success": true,
      "log_likelihood": -18.258871559154503,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 10.0,
      "beta_unfairness": 1.2280523367733058,
      "success": true,
      "log_likelihood": -16.812958241337263,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 10.0,
      "beta_unfairness": 1.7158289544429781,
      "success": true,
      "log_likelihood": -17.71559763645357,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 10.0,
      "beta_unfairness": 9.798946095958808,
      "success": true,
      "log_likelihood": -20.772370712346454,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 10.0,
      "beta_unfairness": 0.16810940460786125,
      "success": true,
      "log_likelihood": -7.921599331487934,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 10.0,
      "beta_unfairness": 0.4897843289377031,
      "success": true,
      "log_likelihood": -13.337591423461582,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 10.0,
      "beta_unfairness": 4.466528144750055e-18,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": -0.05758299389248866,
      "beta_unfairness": 0.0,
      "success": true,
      "log_likelihood": -15.367771482654405,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 0.027642897118526192,
      "beta_unfairness": 2.6646902799093057,
      "success": true,
      "log_likelihood": -24.30487149132133,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 6.5964203466576015,
      "beta_unfairness": 10.0,
      "success": true,
      "log_likelihood": -21.40437662182843,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 10.0,
      "beta_unfairness": 0.0,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 8.290706912859955,
      "beta_unfairness": 2.1110590032844456,
      "success": true,
      "log_likelihood": -18.541122069408022,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 7.9905964352173635,
      "beta_unfairness": 0.47978700600020385,
      "success": true,
      "log_likelihood": -14.261087794908395,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 10.0,
      "beta_unfairness": 2.6015621923060537,
      "success": true,
      "log_likelihood": -18.568352711269966,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 10.0,
      "beta_unfairness": 1.170919642176634,
      "success": true,
      "log_likelihood": -16.67111746312084,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 9.999928796984094,
      "beta_unfairness": 0.1658938744088101,
      "success": true,
      "log_likelihood": -7.866646118200396,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 10.0,
      "beta_unfairness": 1.6933775663799493,
      "success": true,
      "log_likelihood": -17.682957532673466,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 0.4235603381053336,
      "beta_unfairness": 10.0,
      "success": true,
      "log_likelihood": -22.17650005509458,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 0.12613353802436866,
      "beta_unfairness": 0.0,
      "success": true,
      "log_likelihood": -5.497311257805739,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 10.0,
      "beta_unfairness": 5.441646948450829,
      "success": true,
      "log_likelihood": -19.774373740235674,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 10.0,
      "beta_unfairness": 1.5362217542280057,
      "success": true,
      "log_likelihood": -17.44176794231017,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 9.991245680006989,
      "beta_unfairness": 2.5054113594061747,
      "success": true,
      "log_likelihood": -18.507963748656532,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 10.0,
      "beta_unfairness": 3.8913694639550385,
      "success": true,
      "log_likelihood": -19.231641469601396,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 1.3050256032845824,
      "beta_unfairness": 6.320818696421223,
      "success": true,
      "log_likelihood": -22.084414477906808,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 10.0,
      "beta_unfairness": 5.317967436557154,
      "success": true,
      "log_likelihood": -19.734404951560528,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.027646713644891296,
      "beta_unfairness": 7.3384804397683405,
      "success": true,
      "log_likelihood": -24.30492012255481,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 10.0,
      "beta_unfairness": 3.1480554043763225,
      "success": true,
      "log_likelihood": -18.88907874984704,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": -3.9142641966845506,
      "beta_unfairness": 0.6721269637025991,
      "success": true,
      "log_likelihood": -63.80651836995385,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 10.0,
      "beta_unfairness": 3.4924107503894057,
      "success": true,
      "log_likelihood": -42.08651255741094,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 1.862253349156492,
      "beta_unfairness": 5.686445853389095,
      "success": true,
      "log_likelihood": -44.973555328288555,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 5.404318218632996,
      "beta_unfairness": 10.0,
      "success": true,
      "log_likelihood": -21.614693387215073,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 10.0,
      "beta_unfairness": 6.766153066451561,
      "success": true,
      "log_likelihood": -20.14264085571177,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.1888488140507977,
      "beta_unfairness": 10.0,
      "success": true,
      "log_likelihood": -22.190375511691723,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 9.88294606931864,
      "beta_unfairness": 9.981029290258725,
      "success": true,
      "log_likelihood": -20.82596912098289,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": -0.04800974821328444,
      "beta_unfairness": 0.0,
      "success": true,
      "log_likelihood": -17.472329539011653,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.1293195539098657,
      "beta_unfairness": 0.0030422333703562844,
      "success": true,
      "log_likelihood": -13.712608616077349,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 2.9828603211268345,
      "beta_unfairness": 5.697835990473186,
      "success": true,
      "log_likelihood": -21.65161869906796,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 10.0,
      "beta_unfairness": 2.342482914746378,
      "success": true,
      "log_likelihood": -18.376983131477317,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": -9.999896851893823,
      "beta_unfairness": 0.3950050642592052,
      "success": true,
      "log_likelihood": -58.37729867191702,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.02747264931669914,
      "beta_unfairness": 10.0,
      "success": true,
      "log_likelihood": -24.311629788776088,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.14327656538596217,
      "beta_unfairness": 10.0,
      "success": true,
      "log_likelihood": -22.236361378578856,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 10.0,
      "beta_unfairness": 1.7579059468946787,
      "success": true,
      "log_likelihood": -17.772067158800425,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 9.796154133872882,
      "beta_unfairness": 0.13404850309494368,
      "success": true,
      "log_likelihood": -6.924400120539906,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 9.999195788806464,
      "beta_unfairness": 0.28387936614620823,
      "success": true,
      "log_likelihood": -10.624244346672107,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.06792853676281464,
      "beta_unfairness": 0.010115337818822819,
      "success": true,
      "log_likelihood": -20.82938410811355,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 9.997124389718932,
      "beta_unfairness": 0.3020769889444721,
      "success": true,
      "log_likelihood": -10.952111006478095,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.13192889541509795,
      "beta_unfairness": 10.0,
      "success": true,
      "log_likelihood": -22.264807339138223,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.0046481281895186,
      "beta_unfairness": 9.301331593996595,
      "success": true,
      "log_likelihood": -24.931282227179754,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.07121650449448205,
      "beta_unfairness": 0.01180640337959122,
      "success": true,
      "log_likelihood": -20.796979254576424,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.07745270410636239,
      "beta_unfairness": 0.0009530437944494741,
      "success": true,
      "log_likelihood": -15.320657929997552,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 3.0842340855927826,
      "beta_unfairness": 6.989044938272723,
      "success": true,
      "log_likelihood": -44.8113290356928,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.10440100502079655,
      "beta_unfairness": 0.00452400772103645,
      "success": true,
      "log_likelihood": -16.645146188896913,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 10.0,
      "beta_unfairness": 0.10223637366091162,
      "success": true,
      "log_likelihood": -5.575138040851662,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": -9.999975250042725,
      "beta_unfairness": 0.08492572894150466,
      "success": true,
      "log_likelihood": -27.807671452398132,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 10.0,
      "beta_unfairness": 6.282407602925778,
      "success": true,
      "log_likelihood": -20.016556834854576,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.003715523033434989,
      "beta_unfairness": 2.116251792642363,
      "success": true,
      "log_likelihood": -24.939193122388602,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.22386745892512205,
      "beta_unfairness": 8.403807785382272,
      "success": true,
      "log_likelihood": -22.184522414610438,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.08320531261841171,
      "beta_unfairness": 0.0,
      "success": true,
      "log_likelihood": -10.537471306221233,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": -1.3866383692302766,
      "beta_unfairness": 1.2697290986515781,
      "success": true,
      "log_likelihood": -43.75871398001755,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.22041708678642052,
      "beta_unfairness": 0.3929744519254167,
      "success": true,
      "log_likelihood": -21.72347725980363,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 5.778545012863524,
      "beta_unfairness": 6.993317312873751,
      "success": true,
      "log_likelihood": -21.108491852244015,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.027234072195377903,
      "beta_unfairness": 9.688984353057755,
      "success": true,
      "log_likelihood": -24.3208866982916,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 10.0,
      "beta_unfairness": 1.3144122166738155,
      "success": true,
      "log_likelihood": -17.01583559213249,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.00023220327466291502,
      "beta_unfairness": 6.674545065564147,
      "success": true,
      "log_likelihood": -24.953243224927323,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 10.0,
      "beta_unfairness": 0.09486466958482702,
      "success": true,
      "log_likelihood": -5.245155244897074,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.17241815802131139,
      "beta_unfairness": 10.0,
      "success": true,
      "log_likelihood": -22.199347133869843,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.05556595901490315,
      "beta_unfairness": 0.0021961376037342674,
      "success": true,
      "log_likelihood": -19.84145494929841,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "beta_value": {
        "r": 0.829577447534558,
        "p": 1.5290834847969973e-26
      },
      "beta_unfairness": {
        "r": 0.4505898940348498,
        "p": 2.5492044743174942e-06
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 44.421522832322815,
  "bic_Control": 35.08479776014272,
  "bic_Cocaine": 52.78567237615081,
  "bic_results": {
    "average_bic": 44.421522832322815,
    "individual_bics": [
      123.92163324267739,
      44.774227602938595,
      41.55145277874505,
      51.065678034305094,
      44.418901793350706,
      39.71085260647599,
      7.167037869712219,
      37.35382783735752,
      7.167037869712219,
      47.101221866955136,
      43.65142448440225,
      41.62620207747849,
      45.06387721428499,
      7.167037869712219,
      7.167037869712219,
      7.167037869712219,
      7.167037869712219,
      21.977033075668714,
      20.120256143718308,
      7.167037869712219,
      41.87207492905865,
      23.365998014336938,
      51.65505851076483,
      48.751391733646926,
      43.684780995221224,
      40.792954359586744,
      42.59823314981936,
      48.71177930160513,
      23.010236539888087,
      33.84222072383538,
      7.167037869712219,
      37.90258084222103,
      55.776780859554876,
      49.97579112056908,
      7.167037869712219,
      44.24928201572826,
      35.68921346672901,
      44.30374329945215,
      40.5092728031539,
      22.90033011331301,
      42.53295294225915,
      51.520037987101375,
      18.1616603925237,
      46.71578535738357,
      42.05057376153256,
      44.18296537422528,
      45.63032081611501,
      51.335866832725834,
      46.635847780033274,
      55.77687812202184,
      44.9451953766063,
      134.78007461681992,
      91.3400629917341,
      97.11414853348933,
      50.396424651342365,
      47.45231958833576,
      51.547788900295664,
      48.818976118878,
      42.111696954935525,
      34.59225510906692,
      50.47027527504814,
      43.92100413986685,
      123.92163522074625,
      55.790297454464394,
      51.63976063406993,
      42.71117219451307,
      21.015838117992033,
      28.415526570256432,
      48.82580609313932,
      29.071259889868408,
      51.69665255518866,
      57.029602331271725,
      48.76099638606507,
      37.80835373690732,
      96.78969594829782,
      40.457330254706044,
      18.317313958615543,
      62.78238078170848,
      47.20015154662137,
      57.04542412168942,
      51.536082706133094,
      28.241980489354688,
      94.68446583694733,
      50.61399239651948,
      49.38402158140025,
      55.808811273495415,
      41.1987090611772,
      57.073524326766865,
      17.657348366706366,
      51.5657321446519,
      46.84994777550904
    ],
    "group_enabled": true,
    "group_bics": {
      "Control": [
        123.92163324267739,
        44.774227602938595,
        41.55145277874505,
        51.065678034305094,
        44.418901793350706,
        39.71085260647599,
        7.167037869712219,
        37.35382783735752,
        7.167037869712219,
        47.101221866955136,
        43.65142448440225,
        41.62620207747849,
        45.06387721428499,
        7.167037869712219,
        7.167037869712219,
        7.167037869712219,
        7.167037869712219,
        21.977033075668714,
        20.120256143718308,
        7.167037869712219,
        41.87207492905865,
        23.365998014336938,
        51.65505851076483,
        48.751391733646926,
        43.684780995221224,
        40.792954359586744,
        42.59823314981936,
        48.71177930160513,
        23.010236539888087,
        33.84222072383538,
        7.167037869712219,
        37.90258084222103,
        55.776780859554876,
        49.97579112056908,
        7.167037869712219,
        44.24928201572826,
        35.68921346672901,
        44.30374329945215,
        40.5092728031539,
        22.90033011331301,
        42.53295294225915,
        51.520037987101375,
        18.1616603925237
      ],
      "Cocaine": [
        46.71578535738357,
        42.05057376153256,
        44.18296537422528,
        45.63032081611501,
        51.335866832725834,
        46.635847780033274,
        55.77687812202184,
        44.9451953766063,
        134.78007461681992,
        91.3400629917341,
        97.11414853348933,
        50.396424651342365,
        47.45231958833576,
        51.547788900295664,
        48.818976118878,
        42.111696954935525,
        34.59225510906692,
        50.47027527504814,
        43.92100413986685,
        123.92163522074625,
        55.790297454464394,
        51.63976063406993,
        42.71117219451307,
        21.015838117992033,
        28.415526570256432,
        48.82580609313932,
        29.071259889868408,
        51.69665255518866,
        57.029602331271725,
        48.76099638606507,
        37.80835373690732,
        96.78969594829782,
        40.457330254706044,
        18.317313958615543,
        62.78238078170848,
        47.20015154662137,
        57.04542412168942,
        51.536082706133094,
        28.241980489354688,
        94.68446583694733,
        50.61399239651948,
        49.38402158140025,
        55.808811273495415,
        41.1987090611772,
        57.073524326766865,
        17.657348366706366,
        51.5657321446519,
        46.84994777550904
      ]
    },
    "num_parameters": 2,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- beta_value: r = 0.830\n- beta_unfairness: r = 0.451",
  "previous_models": [
    "Specification: sum_tokens = token_self + token_opp\nfair_perc_self_calc = (token_self / max(1e-6, sum_tokens)) * 100.0\ndeviation = fair_perc_self_calc - split_perc_self\nunfairness_penalty_term = max(0.0, deviation)\nU = (beta_value * split_perc_self) / (1.0 + beta_unfairness * unfairness_penalty_term^2)\nSummary: A ratio model predicting responder utility based on the proposed percentage share and the perceived unfairness relative to token contributions. Utility is calculated as the proposed percentage scaled by 'beta_value', divided by a term that penalizes unfair offers. This penalty term is 1.0 plus the squared positive deviation from the calculated fair share, scaled by 'beta_unfairness'. Constraining 'beta_unfairness' to be non-negative ensures the penalty increases utility and maintains denominator stability. This structure attempts to improve parameter identifiability, particularly for 'beta_unfairness', by applying it as a scaling factor to a non-linear (squared) penalty term within the denominator, aiming for a more distinct influence compared to simpler additive or linear scaling models like those in Run 61 and Run 63.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 44.421522832322815\nOverall Accuracy: 0.6905\nGroup Accuracies:\n- Control: 0.7616\n- Cocaine: 0.6267\n\nParameter Recovery:\n- beta_value: r = 0.830\n- beta_unfairness: r = 0.451"
  ]
}