{
  "task_description": "In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "Okay, here are the improved instructions for the next run, focusing intensely on designing a model structure that ensures parameter identifiability for *both* learnable parameters while building on the successes and addressing the failures of the previous attempts.\n\nInstructions for Run 66 of 100:\n\nThe **unwavering primary objective remains achieving parameter recovery >= 0.7 for *all* learnable parameters**. This is the critical benchmark for model usability. While improved BIC (lower is better) and accuracy (higher is better) are valuable secondary goals, they must not come at the expense of robust parameter recovery. A model with excellent fit but poor parameter identifiability is not suitable for drawing meaningful conclusions about the underlying cognitive processes.\n\nRun 65 explored a power-law multiplicative decay structure: `U = beta_value * split_perc_self * (penalty_factor)^beta_unfairness`, where `penalty_factor` was based on the simple unfairness difference. This attempt was unfortunately unsuccessful, yielding poor parameter recovery for *both* `beta_value` (r = -0.086) and `beta_unfairness` (r = -0.179), alongside worse BIC (57.07) and accuracy (0.495) compared to previous models. This indicates that placing `beta_unfairness` directly in the exponent of a penalty factor derived from the simple difference did not create the necessary distinct mathematical influence and likely introduced new identifiability or modeling issues, potentially related to how the penalty factor reaches its bounds or how the exponent interacts with the value term.\n\nPrevious attempts have shown that linear additive models struggle with the unfairness parameter (Run 61: cubic additive, `beta_unfairness` r = -0.172) and ratio models applying a penalty based on the *difference* also haven't consistently reached the 0.7 threshold for the unfairness parameter (Run 63: linear ratio, `beta_unfairness` r = 0.608; Run 64: quadratic ratio, `beta_unfairness` r = 0.451). While Run 63's linear ratio model achieved the best `beta_unfairness` recovery so far (0.608), it was still just shy of the target, suggesting the simple difference-based penalty term (`max(0.0, fair_perc_self_calc - split_perc_self)`) might be too correlated with the value term (`split_perc_self`) to allow perfect separation of the two parameters' influences in these structures.\n\nFor Run 66, let's try a different approach to defining the *unfairness penalty term* itself. Instead of using the *absolute difference* between the fair share and the offered share, let's define the penalty based on the *ratio* of the fair share to the offered share. This captures *relative* unfairness \u2013 how much smaller the offer is *compared to* the fair share.\n\nConsider an additive model structure similar to Run 61, but using this new ratio-based penalty term.\nProposed Structure Concept: `U = beta_value * split_perc_self - beta_unfairness * RatioPenaltyTerm`.\nHere, `RatioPenaltyTerm` should be zero for fair or generous offers and increase as the offer becomes more unfair relative to the fair share. A possible calculation for `RatioPenaltyTerm` is `max(0.0, (fair_perc_self_calc / split_perc_self) - 1.0)`. This term represents the proportional difference between the fair share and the offered share, but only when the offer is less than fair. *Care must be taken to handle the case where `split_perc_self` is zero or very small, which would represent a maximally unfair offer*. Using `max(1e-6, split_perc_self)` in the denominator can prevent division errors and produce a very large penalty term for zero/very small offers, which is conceptually appropriate.\n\nThe goal is to design a utility calculation `U` involving `split_perc_self`, `fair_perc_self_calc` (derived from `token_self`, `token_opp`), and exactly two learnable parameters (`beta_value`, `beta_unfairness`). Design the model using an additive structure where `beta_value` scales the `split_perc_self` and `beta_unfairness` scales a *ratio-based* penalty term calculated as described above. Focus on clearly defining this new penalty term and articulating how its unique mathematical relationship with the input variables (compared to the simple difference penalty) is intended to help disentangle the influences of `beta_value` and `beta_unfairness` and improve parameter identifiability.\n\n*   **Key Inputs & Calculated Variables:** Use `split_perc_self`, `token_self`, `token_opp` as data variables. Calculate `sum_tokens`, `fair_perc_self_calc` (handling `sum_tokens == 0` defaulting to 50.0), and a new `ratio_penalty_term` based on `max(0.0, (fair_perc_self_calc / max(1e-6, split_perc_self)) - 1.0)` or a similar ratio-based definition of relative unfairness. Include any other necessary intermediate variables.\n*   **Model Formula:** Define `U` using an additive structure: `U = beta_value * split_perc_self - beta_unfairness * RatioPenaltyTerm`. Include calculation steps for derived variables *before* the formula for `U`. Use clear mathematical notation within the <MODEL> tags (only the formula).\n*   **Learnable Parameters:** Exactly **2 learnable parameters**: `beta_value` and `beta_unfairness`. Choose descriptive, Python-safe names. Define clear, generous, finite numerical bounds. Given the additive structure and penalty term definition, non-negative bounds for both parameters (e.g., `[0.0, 50.0]`, `[0.0, 100.0]`) are theoretically appropriate (higher `beta_value` increases utility for better offers, higher `beta_unfairness` increases penalty for unfairness) and may aid recovery.\n*   **Calculated Variables:** Include descriptions for *all* calculated variables used in the model (including U, sum_tokens, fair_perc_self_calc, and your chosen ratio-based penalty term variable) with `source: \"calculated\"`. Include descriptions for all data variables used as inputs (`token_self`, `token_opp`, `split_perc_self`) with `source: \"data\"`.\n*   **Variable Descriptions:** Provide variable descriptions in JSON format between <VARIABLES> tags for *all* variables in the <MODEL> formula. Include source, range (with inclusive flags), distribution (if applicable), and learnable status.\n*   **Target Variable:** Specify \"accept\" using <target_variable> tags.\n*   **Summary:** Provide a concise summary between <SUMMARY> tags. Describe the model's core idea (additive structure, value and penalty components). Crucially, explain *how the definition of the penalty term based on the *ratio* of fair share to offered share (instead of the simple difference) creates a different mathematical relationship between the terms scaled by `beta_value` and `beta_unfairness`, and how this difference is specifically intended to improve robust parameter identifiability for *both* learnable parameters*, particularly for `beta_unfairness`, which has struggled in previous models. Explain why this ratio-based approach might be better at separating the influences than previous additive or ratio models using the simple difference penalty.\n\nAvailable Data Variables:\n- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.\n(Note: Use `split_perc_self` for the participant's proposed percentage share percentage).\n\nPlease think through this step by step, then provide your model specification and variable descriptions. Remember that robust parameter identifiability for *both* learnable parameters (>= 0.7 recovery for both) is the absolute priority. Your goal is to find a structure where both parameters' influences are clearly distinguishable across the range of possible offers, leading to reliable estimates. Be creative in how you define and utilize the ratio-based penalty term to maximize this distinction.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: Okay, here are the improved instructions for the next run, focusing intensely on designing a model structure that ensures parameter identifiability for *both* learnable parameters while building on the successes and addressing the failures of the previous attempts.\n\nInstructions for Run 66 of 100:\n\nThe **unwavering primary objective remains achieving parameter recovery >= 0.7 for *all* learnable parameters**. This is the critical benchmark for model usability. While improved BIC (lower is better) and accuracy (higher is better) are valuable secondary goals, they must not come at the expense of robust parameter recovery. A model with excellent fit but poor parameter identifiability is not suitable for drawing meaningful conclusions about the underlying cognitive processes.\n\nRun 65 explored a power-law multiplicative decay structure: `U = beta_value * split_perc_self * (penalty_factor)^beta_unfairness`, where `penalty_factor` was based on the simple unfairness difference. This attempt was unfortunately unsuccessful, yielding poor parameter recovery for *both* `beta_value` (r = -0.086) and `beta_unfairness` (r = -0.179), alongside worse BIC (57.07) and accuracy (0.495) compared to previous models. This indicates that placing `beta_unfairness` directly in the exponent of a penalty factor derived from the simple difference did not create the necessary distinct mathematical influence and likely introduced new identifiability or modeling issues, potentially related to how the penalty factor reaches its bounds or how the exponent interacts with the value term.\n\nPrevious attempts have shown that linear additive models struggle with the unfairness parameter (Run 61: cubic additive, `beta_unfairness` r = -0.172) and ratio models applying a penalty based on the *difference* also haven't consistently reached the 0.7 threshold for the unfairness parameter (Run 63: linear ratio, `beta_unfairness` r = 0.608; Run 64: quadratic ratio, `beta_unfairness` r = 0.451). While Run 63's linear ratio model achieved the best `beta_unfairness` recovery so far (0.608), it was still just shy of the target, suggesting the simple difference-based penalty term (`max(0.0, fair_perc_self_calc - split_perc_self)`) might be too correlated with the value term (`split_perc_self`) to allow perfect separation of the two parameters' influences in these structures.\n\nFor Run 66, let's try a different approach to defining the *unfairness penalty term* itself. Instead of using the *absolute difference* between the fair share and the offered share, let's define the penalty based on the *ratio* of the fair share to the offered share. This captures *relative* unfairness \u2013 how much smaller the offer is *compared to* the fair share.\n\nConsider an additive model structure similar to Run 61, but using this new ratio-based penalty term.\nProposed Structure Concept: `U = beta_value * split_perc_self - beta_unfairness * RatioPenaltyTerm`.\nHere, `RatioPenaltyTerm` should be zero for fair or generous offers and increase as the offer becomes more unfair relative to the fair share. A possible calculation for `RatioPenaltyTerm` is `max(0.0, (fair_perc_self_calc / split_perc_self) - 1.0)`. This term represents the proportional difference between the fair share and the offered share, but only when the offer is less than fair. *Care must be taken to handle the case where `split_perc_self` is zero or very small, which would represent a maximally unfair offer*. Using `max(1e-6, split_perc_self)` in the denominator can prevent division errors and produce a very large penalty term for zero/very small offers, which is conceptually appropriate.\n\nThe goal is to design a utility calculation `U` involving `split_perc_self`, `fair_perc_self_calc` (derived from `token_self`, `token_opp`), and exactly two learnable parameters (`beta_value`, `beta_unfairness`). Design the model using an additive structure where `beta_value` scales the `split_perc_self` and `beta_unfairness` scales a *ratio-based* penalty term calculated as described above. Focus on clearly defining this new penalty term and articulating how its unique mathematical relationship with the input variables (compared to the simple difference penalty) is intended to help disentangle the influences of `beta_value` and `beta_unfairness` and improve parameter identifiability.\n\n*   **Key Inputs & Calculated Variables:** Use `split_perc_self`, `token_self`, `token_opp` as data variables. Calculate `sum_tokens`, `fair_perc_self_calc` (handling `sum_tokens == 0` defaulting to 50.0), and a new `ratio_penalty_term` based on `max(0.0, (fair_perc_self_calc / max(1e-6, split_perc_self)) - 1.0)` or a similar ratio-based definition of relative unfairness. Include any other necessary intermediate variables.\n*   **Model Formula:** Define `U` using an additive structure: `U = beta_value * split_perc_self - beta_unfairness * RatioPenaltyTerm`. Include calculation steps for derived variables *before* the formula for `U`. Use clear mathematical notation within the <MODEL> tags (only the formula).\n*   **Learnable Parameters:** Exactly **2 learnable parameters**: `beta_value` and `beta_unfairness`. Choose descriptive, Python-safe names. Define clear, generous, finite numerical bounds. Given the additive structure and penalty term definition, non-negative bounds for both parameters (e.g., `[0.0, 50.0]`, `[0.0, 100.0]`) are theoretically appropriate (higher `beta_value` increases utility for better offers, higher `beta_unfairness` increases penalty for unfairness) and may aid recovery.\n*   **Calculated Variables:** Include descriptions for *all* calculated variables used in the model (including U, sum_tokens, fair_perc_self_calc, and your chosen ratio-based penalty term variable) with `source: \"calculated\"`. Include descriptions for all data variables used as inputs (`token_self`, `token_opp`, `split_perc_self`) with `source: \"data\"`.\n*   **Variable Descriptions:** Provide variable descriptions in JSON format between <VARIABLES> tags for *all* variables in the <MODEL> formula. Include source, range (with inclusive flags), distribution (if applicable), and learnable status.\n*   **Target Variable:** Specify \"accept\" using <target_variable> tags.\n*   **Summary:** Provide a concise summary between <SUMMARY> tags. Describe the model's core idea (additive structure, value and penalty components). Crucially, explain *how the definition of the penalty term based on the *ratio* of fair share to offered share (instead of the simple difference) creates a different mathematical relationship between the terms scaled by `beta_value` and `beta_unfairness`, and how this difference is specifically intended to improve robust parameter identifiability for *both* learnable parameters*, particularly for `beta_unfairness`, which has struggled in previous models. Explain why this ratio-based approach might be better at separating the influences than previous additive or ratio models using the simple difference penalty.\n\nAvailable Data Variables:\n- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.\n(Note: Use `split_perc_self` for the participant's proposed percentage share percentage).\n\nPlease think through this step by step, then provide your model specification and variable descriptions. Remember that robust parameter identifiability for *both* learnable parameters (>= 0.7 recovery for both) is the absolute priority. Your goal is to find a structure where both parameters' influences are clearly distinguishable across the range of possible offers, leading to reliable estimates. Be creative in how you define and utilize the ratio-based penalty term to maximize this distinction.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "Okay, let's design a computational model for the responder's decision in the ultimatum game experiment, focusing on achieving robust parameter identifiability using a ratio-based penalty term for unfair offers.\n\nHere is the model specification:\n\n<MODEL>\nsum_tokens = token_self + token_opp\nfair_perc_self_calc = 50.0 if sum_tokens == 0 else (token_self / sum_tokens) * 100.0\nsafe_split_perc_self = max(1e-6, split_perc_self)\nratio_penalty_term = max(0.0, (fair_perc_self_calc / safe_split_perc_self) - 1.0)\nU = beta_value * split_perc_self - beta_unfairness * ratio_penalty_term\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The proposed share for the participant in percentage\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"sum_tokens\": {\n      \"description\": \"Total number of tokens (participant + opponent)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 2000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fair_perc_self_calc\": {\n      \"description\": \"Calculated fair percentage share for the participant based on token contribution. Defaults to 50% if total tokens is zero.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"safe_split_perc_self\": {\n      \"description\": \"The proposed share for the participant in percentage, with a minimum value of 1e-6 to prevent division by zero.\",\n      \"range\": {\n        \"min\": 1e-6,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"ratio_penalty_term\": {\n      \"description\": \"Penalty term based on the ratio of the fair share to the proposed share. Zero if proposed share is fair or generous, increases as proposed share becomes a smaller proportion of the fair share.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_value\": {\n      \"description\": \"Sensitivity parameter for the proposed percentage share. Higher values increase utility for higher offers.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_unfairness\": {\n      \"description\": \"Sensitivity parameter for the relative unfairness penalty. Higher values increase the penalty for relatively unfair offers.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Utility of accepting the proposed offer.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nAn additive utility model for responder decisions based on the offered percentage share and a penalty for relative unfairness. Utility is calculated as a linear combination of the proposed percentage share (`split_perc_self`), scaled by `beta_value`, and a ratio-based unfairness penalty term, scaled by `beta_unfairness`. The unfairness penalty is derived from the ratio of the calculated fair share (based on token contributions) to the proposed share, applying only when the offer is less than fair. This ratio-based penalty term introduces a non-linear (inverse) relationship with the proposed share, distinct from the linear relationship of the value term. This difference in mathematical influence is specifically designed to enhance the identifiability of the two learnable parameters, `beta_value` and `beta_unfairness`, allowing for more robust parameter recovery compared to models using a simple difference-based penalty term. Both learnable parameters are constrained to be non-negative within generous finite bounds [0.0, 100.0].\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['beta_value', 'beta_unfairness']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                sum_tokens = token_self + token_opp\nfair_perc_self_calc = 50.0 if sum_tokens == 0 else (token_self / sum_tokens) * 100.0\nsafe_split_perc_self = max(1e-6, split_perc_self)\nratio_penalty_term = max(0.0, (fair_perc_self_calc / safe_split_perc_self) - 1.0)\nU = beta_value * split_perc_self - beta_unfairness * ratio_penalty_term\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The proposed share for the participant in percentage\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"sum_tokens\": {\n      \"description\": \"Total number of tokens (participant + opponent)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 2000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fair_perc_self_calc\": {\n      \"description\": \"Calculated fair percentage share for the participant based on token contribution. Defaults to 50% if total tokens is zero.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"safe_split_perc_self\": {\n      \"description\": \"The proposed share for the participant in percentage, with a minimum value of 1e-6 to prevent division by zero.\",\n      \"range\": {\n        \"min\": 1e-06,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"ratio_penalty_term\": {\n      \"description\": \"Penalty term based on the ratio of the fair share to the proposed share. Zero if proposed share is fair or generous, increases as proposed share becomes a smaller proportion of the fair share.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_value\": {\n      \"description\": \"Sensitivity parameter for the proposed percentage share. Higher values increase utility for higher offers.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_unfairness\": {\n      \"description\": \"Sensitivity parameter for the relative unfairness penalty. Higher values increase the penalty for relatively unfair offers.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Utility of accepting the proposed offer.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, beta_value=1, beta_unfairness=1):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        split_perc_self = trial.get(\"splitperc_self\", 0.0)\n\n        sum_tokens = token_self + token_opp\n        fair_perc_self_calc = 50.0 if sum_tokens == 0 else (token_self / sum_tokens) * 100.0\n        safe_split_perc_self = max(1e-6, split_perc_self)\n        ratio_penalty_term = max(0.0, (fair_perc_self_calc / safe_split_perc_self) - 1.0)\n        U = beta_value * split_perc_self - beta_unfairness * ratio_penalty_term\n        model_predictions.append(U)\n    return model_predictions\n```",
      "timestamp": 1746103001.961347
    }
  ],
  "learnable_parameters": {
    "beta_value": {
      "description": "Sensitivity parameter for the proposed percentage share. Higher values increase utility for higher offers.",
      "range": {
        "min": 0.0,
        "max": 100.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta_unfairness": {
      "description": "Sensitivity parameter for the relative unfairness penalty. Higher values increase the penalty for relatively unfair offers.",
      "range": {
        "min": 0.0,
        "max": 100.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "sum_tokens = token_self + token_opp\nfair_perc_self_calc = 50.0 if sum_tokens == 0 else (token_self / sum_tokens) * 100.0\nsafe_split_perc_self = max(1e-6, split_perc_self)\nratio_penalty_term = max(0.0, (fair_perc_self_calc / safe_split_perc_self) - 1.0)\nU = beta_value * split_perc_self - beta_unfairness * ratio_penalty_term",
  "variable_descriptions": {
    "token_self": {
      "description": "Number of tokens found by the participant",
      "range": {
        "min": 0,
        "max": 1000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent",
      "range": {
        "min": 0,
        "max": 1000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "split_perc_self": {
      "description": "The proposed share for the participant in percentage",
      "range": {
        "min": 0.0,
        "max": 100.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "sum_tokens": {
      "description": "Total number of tokens (participant + opponent)",
      "range": {
        "min": 0,
        "max": 2000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "fair_perc_self_calc": {
      "description": "Calculated fair percentage share for the participant based on token contribution. Defaults to 50% if total tokens is zero.",
      "range": {
        "min": 0.0,
        "max": 100.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "safe_split_perc_self": {
      "description": "The proposed share for the participant in percentage, with a minimum value of 1e-6 to prevent division by zero.",
      "range": {
        "min": 1e-06,
        "max": 100.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "ratio_penalty_term": {
      "description": "Penalty term based on the ratio of the fair share to the proposed share. Zero if proposed share is fair or generous, increases as proposed share becomes a smaller proportion of the fair share.",
      "range": {
        "min": 0.0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "beta_value": {
      "description": "Sensitivity parameter for the proposed percentage share. Higher values increase utility for higher offers.",
      "range": {
        "min": 0.0,
        "max": 100.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta_unfairness": {
      "description": "Sensitivity parameter for the relative unfairness penalty. Higher values increase the penalty for relatively unfair offers.",
      "range": {
        "min": 0.0,
        "max": 100.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "U": {
      "description": "Utility of accepting the proposed offer.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "An additive utility model for responder decisions based on the offered percentage share and a penalty for relative unfairness. Utility is calculated as a linear combination of the proposed percentage share (`split_perc_self`), scaled by `beta_value`, and a ratio-based unfairness penalty term, scaled by `beta_unfairness`. The unfairness penalty is derived from the ratio of the calculated fair share (based on token contributions) to the proposed share, applying only when the offer is less than fair. This ratio-based penalty term introduces a non-linear (inverse) relationship with the proposed share, distinct from the linear relationship of the value term. This difference in mathematical influence is specifically designed to enhance the identifiability of the two learnable parameters, `beta_value` and `beta_unfairness`, allowing for more robust parameter recovery compared to models using a simple difference-based penalty term. Both learnable parameters are constrained to be non-negative within generous finite bounds [0.0, 100.0].",
  "target_variable": "accept",
  "full_reasoning": "Okay, let's design a computational model for the responder's decision in the ultimatum game experiment, focusing on achieving robust parameter identifiability using a ratio-based penalty term for unfair offers.\n\nHere is the model specification:\n\n<MODEL>\nsum_tokens = token_self + token_opp\nfair_perc_self_calc = 50.0 if sum_tokens == 0 else (token_self / sum_tokens) * 100.0\nsafe_split_perc_self = max(1e-6, split_perc_self)\nratio_penalty_term = max(0.0, (fair_perc_self_calc / safe_split_perc_self) - 1.0)\nU = beta_value * split_perc_self - beta_unfairness * ratio_penalty_term\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The proposed share for the participant in percentage\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"sum_tokens\": {\n      \"description\": \"Total number of tokens (participant + opponent)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 2000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fair_perc_self_calc\": {\n      \"description\": \"Calculated fair percentage share for the participant based on token contribution. Defaults to 50% if total tokens is zero.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"safe_split_perc_self\": {\n      \"description\": \"The proposed share for the participant in percentage, with a minimum value of 1e-6 to prevent division by zero.\",\n      \"range\": {\n        \"min\": 1e-6,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"ratio_penalty_term\": {\n      \"description\": \"Penalty term based on the ratio of the fair share to the proposed share. Zero if proposed share is fair or generous, increases as proposed share becomes a smaller proportion of the fair share.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_value\": {\n      \"description\": \"Sensitivity parameter for the proposed percentage share. Higher values increase utility for higher offers.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_unfairness\": {\n      \"description\": \"Sensitivity parameter for the relative unfairness penalty. Higher values increase the penalty for relatively unfair offers.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Utility of accepting the proposed offer.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nAn additive utility model for responder decisions based on the offered percentage share and a penalty for relative unfairness. Utility is calculated as a linear combination of the proposed percentage share (`split_perc_self`), scaled by `beta_value`, and a ratio-based unfairness penalty term, scaled by `beta_unfairness`. The unfairness penalty is derived from the ratio of the calculated fair share (based on token contributions) to the proposed share, applying only when the offer is less than fair. This ratio-based penalty term introduces a non-linear (inverse) relationship with the proposed share, distinct from the linear relationship of the value term. This difference in mathematical influence is specifically designed to enhance the identifiability of the two learnable parameters, `beta_value` and `beta_unfairness`, allowing for more robust parameter recovery compared to models using a simple difference-based penalty term. Both learnable parameters are constrained to be non-negative within generous finite bounds [0.0, 100.0].\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: sum_tokens = token_self + token_opp\nfair_perc_self_calc = 50.0 if sum_tokens == 0 else (token_self / sum_tokens) * 100.0\nsafe_split_perc_self = max(1e-6, split_perc_self)\nratio_penalty_term = max(0.0, (fair_perc_self_calc / safe_split_perc_self) - 1.0)\nU = beta_value * split_perc_self - beta_unfairness * ratio_penalty_term\nSummary: An additive utility model for responder decisions based on the offered percentage share and a penalty for relative unfairness. Utility is calculated as a linear combination of the proposed percentage share (`split_perc_self`), scaled by `beta_value`, and a ratio-based unfairness penalty term, scaled by `beta_unfairness`. The unfairness penalty is derived from the ratio of the calculated fair share (based on token contributions) to the proposed share, applying only when the offer is less than fair. This ratio-based penalty term introduces a non-linear (inverse) relationship with the proposed share, distinct from the linear relationship of the value term. This difference in mathematical influence is specifically designed to enhance the identifiability of the two learnable parameters, `beta_value` and `beta_unfairness`, allowing for more robust parameter recovery compared to models using a simple difference-based penalty term. Both learnable parameters are constrained to be non-negative within generous finite bounds [0.0, 100.0].\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, beta_value=1, beta_unfairness=1):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        split_perc_self = trial.get(\"splitperc_self\", 0.0)\n\n        sum_tokens = token_self + token_opp\n        fair_perc_self_calc = 50.0 if sum_tokens == 0 else (token_self / sum_tokens) * 100.0\n        safe_split_perc_self = max(1e-6, split_perc_self)\n        ratio_penalty_term = max(0.0, (fair_perc_self_calc / safe_split_perc_self) - 1.0)\n        U = beta_value * split_perc_self - beta_unfairness * ratio_penalty_term\n        model_predictions.append(U)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.6562881562881563,
  "group_accuracies": {
    "Control": 0.7396640826873385,
    "Cocaine": 0.5815972222222222
  },
  "group_parameter_averages": {
    "Control": {
      "beta_value": 38.66483700677947,
      "beta_unfairness": 51.98933882539418
    },
    "Cocaine": {
      "beta_value": 36.93225066841726,
      "beta_unfairness": 50.0954468870807
    }
  },
  "fitting_results": [
    {
      "beta_value": 0.00500090456404597,
      "beta_unfairness": 86.21613641566246,
      "success": true,
      "log_likelihood": -25.769946358480542,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 18.987497237754937,
      "beta_unfairness": 66.12290945056463,
      "success": true,
      "log_likelihood": -345.3879686688554,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 0.0862401113903068,
      "beta_unfairness": 3.6500614237348477,
      "success": true,
      "log_likelihood": -11.619426993897335,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 0.05798000165204949,
      "beta_unfairness": 3.413336952858354,
      "success": true,
      "log_likelihood": -13.605872074296945,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 18.52653678706678,
      "beta_unfairness": 28.438387947286703,
      "success": true,
      "log_likelihood": -460.5170185972094,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 77.697639936729,
      "beta_unfairness": 92.47098357119697,
      "success": true,
      "log_likelihood": -299.33606208692606,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 57.74049860577348,
      "beta_unfairness": 61.19210803427861,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 82.08219291210636,
      "beta_unfairness": 67.33402502177648,
      "success": true,
      "log_likelihood": -276.31021115688566,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 21.67794845718985,
      "beta_unfairness": 29.503807051289304,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 12.701446757072532,
      "beta_unfairness": 70.58096092742035,
      "success": true,
      "log_likelihood": -437.49116766716895,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 39.37962936796744,
      "beta_unfairness": 85.64549912395788,
      "success": true,
      "log_likelihood": -437.49116766716895,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 0.008531675956618726,
      "beta_unfairness": 7.0998102356924715,
      "success": true,
      "log_likelihood": -8.055756898109147,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 49.97513234443127,
      "beta_unfairness": 92.03816994554589,
      "success": true,
      "log_likelihood": -483.5428695272499,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 61.16226315061151,
      "beta_unfairness": 26.912198779081642,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 70.99321109078187,
      "beta_unfairness": 52.81157886670189,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 36.900335328438196,
      "beta_unfairness": 83.516200635845,
      "success": true,
      "log_likelihood": -23.025850926432504,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 84.42720715397205,
      "beta_unfairness": 26.92606813190015,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 57.809393425156316,
      "beta_unfairness": 13.025723807655353,
      "success": true,
      "log_likelihood": -115.12925464660226,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 29.38276591701144,
      "beta_unfairness": 83.30105758119443,
      "success": true,
      "log_likelihood": -46.05170185648086,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 80.46809866127731,
      "beta_unfairness": 31.23263509991809,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 9.643529430235299,
      "beta_unfairness": 86.67363347981498,
      "success": true,
      "log_likelihood": -276.3102965800404,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 19.1704622641296,
      "beta_unfairness": 50.46959458757515,
      "success": true,
      "log_likelihood": -69.07759094453412,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 1.6286365142029982,
      "beta_unfairness": 75.9744016746427,
      "success": true,
      "log_likelihood": -132.7365551097809,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 0.058581345676849805,
      "beta_unfairness": 1.9904190904664762,
      "success": true,
      "log_likelihood": -15.990812247261644,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 23.023131849685516,
      "beta_unfairness": 79.59522868031704,
      "success": true,
      "log_likelihood": -345.38795663006846,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 0.07377543891863145,
      "beta_unfairness": 2.2445206426637285,
      "success": true,
      "log_likelihood": -14.203614753941338,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 38.80162873449351,
      "beta_unfairness": 98.64980856236465,
      "success": true,
      "log_likelihood": -322.363295825901,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 0.26708482438606823,
      "beta_unfairness": 38.25197943482096,
      "success": true,
      "log_likelihood": -2.212156778982434,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 24.29004287326538,
      "beta_unfairness": 54.138841445956054,
      "success": true,
      "log_likelihood": -69.07755278652584,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 68.0132956990016,
      "beta_unfairness": 33.65519755633678,
      "success": true,
      "log_likelihood": -184.20680743672378,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 90.9178438802994,
      "beta_unfairness": 79.73291475894237,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 65.92827178600892,
      "beta_unfairness": 79.05882118684465,
      "success": true,
      "log_likelihood": -759.8530806877352,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.08333333333333333,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 0.7344190490518419,
      "beta_unfairness": 53.115589722559015,
      "success": true,
      "log_likelihood": -137.99636030021094,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 24.97614392305212,
      "beta_unfairness": 64.34154724907016,
      "success": true,
      "log_likelihood": -460.51751655325126,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 59.7276728159361,
      "beta_unfairness": 39.031425106550266,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 44.75337713625858,
      "beta_unfairness": 20.810876475018368,
      "success": true,
      "log_likelihood": -299.3360620869261,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 27.395428290641235,
      "beta_unfairness": 94.33716177490335,
      "success": true,
      "log_likelihood": -184.20692397850763,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 62.12410509363428,
      "beta_unfairness": 18.179598065982372,
      "success": true,
      "log_likelihood": -414.46531673712843,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 73.53683006064375,
      "beta_unfairness": 53.911631528178546,
      "success": true,
      "log_likelihood": -276.3102111568857,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 47.555542837243905,
      "beta_unfairness": 53.18841578881974,
      "success": true,
      "log_likelihood": -69.07755278652135,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 90.33628692642513,
      "beta_unfairness": 6.737678256860025,
      "success": true,
      "log_likelihood": -322.3619130169666,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 42.82506745361181,
      "beta_unfairness": 91.9233417169251,
      "success": true,
      "log_likelihood": -621.6979751074925,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.25,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 46.73728323781135,
      "beta_unfairness": 48.097283702775705,
      "success": true,
      "log_likelihood": -23.02585092644049,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 92.90663564565372,
      "beta_unfairness": 56.46850528579754,
      "success": true,
      "log_likelihood": -368.4136148770475,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 18.078397573295035,
      "beta_unfairness": 69.87175052496707,
      "success": true,
      "log_likelihood": -253.28436022684548,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 11.875600303145168,
      "beta_unfairness": 42.57127956978619,
      "success": true,
      "log_likelihood": -161.18108522295282,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 30.36108859061998,
      "beta_unfairness": 69.90588925005696,
      "success": true,
      "log_likelihood": -368.08984620221514,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 10.108378846047309,
      "beta_unfairness": 95.53995219379804,
      "success": true,
      "log_likelihood": -414.4653320377498,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 28.18115199865423,
      "beta_unfairness": 30.28872656801863,
      "success": true,
      "log_likelihood": -483.5428695272498,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 14.473311184522341,
      "beta_unfairness": 17.231169090358335,
      "success": true,
      "log_likelihood": -391.43946580708797,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 4.612816078459479,
      "beta_unfairness": 61.50420820313995,
      "success": true,
      "log_likelihood": -162.56520400137444,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 61.744291032925666,
      "beta_unfairness": 34.484686661309695,
      "success": true,
      "log_likelihood": -713.8013788276545,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.1388888888888889,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 6.072844117504871,
      "beta_unfairness": 86.59944842458769,
      "success": true,
      "log_likelihood": -230.25949292031746,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 22.763073270331255,
      "beta_unfairness": 48.34452993190549,
      "success": true,
      "log_likelihood": -322.3619004528834,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 47.377567411952406,
      "beta_unfairness": 51.97294546683041,
      "success": true,
      "log_likelihood": -506.56872045729034,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 85.76469128161611,
      "beta_unfairness": 30.24109324741281,
      "success": true,
      "log_likelihood": -552.6204223173712,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3333333333333333,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 47.64154885189603,
      "beta_unfairness": 31.68711549223121,
      "success": true,
      "log_likelihood": -598.672124177452,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.2777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 22.32516870245405,
      "beta_unfairness": 25.82418060030698,
      "success": true,
      "log_likelihood": -92.1034037165618,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 75.10301321476267,
      "beta_unfairness": 87.79986235449194,
      "success": true,
      "log_likelihood": -736.8272297576949,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.1111111111111111,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 60.29933322576761,
      "beta_unfairness": 17.064947489220785,
      "success": true,
      "log_likelihood": -161.18095650668326,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.038759142495769616,
      "beta_unfairness": 0.5985883444056624,
      "success": true,
      "log_likelihood": -20.452283139864434,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.055340934231639966,
      "beta_unfairness": 2.2202531011239177,
      "success": true,
      "log_likelihood": -15.873165585667211,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.001107271719423761,
      "beta_unfairness": 7.650760872278914,
      "success": true,
      "log_likelihood": -7.17632258939519,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 1.5325246785641593,
      "beta_unfairness": 68.98557338748977,
      "success": true,
      "log_likelihood": -116.58593607730765,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 39.36087668176396,
      "beta_unfairness": 100.0,
      "success": true,
      "log_likelihood": -598.6737989620979,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.2777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 77.91399934654522,
      "beta_unfairness": 86.31602535017181,
      "success": true,
      "log_likelihood": -368.41361487704745,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 86.7494198640261,
      "beta_unfairness": 51.02043315440928,
      "success": true,
      "log_likelihood": -69.07755278652131,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 58.86461860397231,
      "beta_unfairness": 80.84234577406333,
      "success": true,
      "log_likelihood": -115.1292546466023,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 66.94610919087866,
      "beta_unfairness": 6.730856143722419,
      "success": true,
      "log_likelihood": -368.41361487704756,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 52.88528535571414,
      "beta_unfairness": 84.8246340729728,
      "success": true,
      "log_likelihood": -69.07755278652137,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 32.699081076095084,
      "beta_unfairness": 10.563089132352477,
      "success": true,
      "log_likelihood": -736.8272297576949,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.1111111111111111,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 24.53244732853709,
      "beta_unfairness": 42.82352896931852,
      "success": true,
      "log_likelihood": -713.8010990905822,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.1388888888888889,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 2.032225985389877,
      "beta_unfairness": 95.54412683048933,
      "success": true,
      "log_likelihood": -69.31447876953409,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 17.220728199336953,
      "beta_unfairness": 65.875989421215,
      "success": true,
      "log_likelihood": -161.18095650669252,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 50.87922339118375,
      "beta_unfairness": 65.17210629435863,
      "success": true,
      "log_likelihood": -414.4653167371285,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 5.933699308407954,
      "beta_unfairness": 79.11582269801768,
      "success": true,
      "log_likelihood": -116.51554909285512,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 58.79026022948327,
      "beta_unfairness": 68.40433233777968,
      "success": true,
      "log_likelihood": -46.051701856480875,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 75.26000645738056,
      "beta_unfairness": 5.301468484819161,
      "success": true,
      "log_likelihood": -782.8789316177758,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.05555555555555555,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 43.85011875182722,
      "beta_unfairness": 65.8844038567453,
      "success": true,
      "log_likelihood": -322.36191301696664,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 23.872727682088946,
      "beta_unfairness": 49.25179255469321,
      "success": true,
      "log_likelihood": -736.8277654482907,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.1111111111111111,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 20.63574955120681,
      "beta_unfairness": 100.0,
      "success": true,
      "log_likelihood": -322.36191301696664,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 76.455148778413,
      "beta_unfairness": 73.98743114006709,
      "success": true,
      "log_likelihood": -69.07755278652131,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 4.327485057206466,
      "beta_unfairness": 17.177191008521223,
      "success": true,
      "log_likelihood": -667.7499364420648,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.19444444444444445,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.1134060236955367,
      "beta_unfairness": 4.812477306366989,
      "success": true,
      "log_likelihood": -9.1844039666413,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 3.5406559022703976,
      "beta_unfairness": 66.77423101833313,
      "success": true,
      "log_likelihood": -253.26970384691555,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 66.1215662317467,
      "beta_unfairness": 21.50649300023134,
      "success": true,
      "log_likelihood": -736.8272297576948,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.1111111111111111,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.050728446091532466,
      "beta_unfairness": 0.5595235976963746,
      "success": true,
      "log_likelihood": -18.391360427604287,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 94.96502409621812,
      "beta_unfairness": 88.77721869589475,
      "success": true,
      "log_likelihood": -644.723826037533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.2222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 44.73830660659589,
      "beta_unfairness": 46.915855702530564,
      "success": true,
      "log_likelihood": -46.05170185648088,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 7.2381308149808685,
      "beta_unfairness": 80.49692712796303,
      "success": true,
      "log_likelihood": -321.7307369016534,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 95.45435976635305,
      "beta_unfairness": 9.047680847622475,
      "success": true,
      "log_likelihood": -253.28436022684528,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "beta_value": {
        "r": 0.2930086751666915,
        "p": 0.0030917020164844713
      },
      "beta_unfairness": {
        "r": 0.052138928191076295,
        "p": 0.6064239207423916
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 527.8896279440379,
  "bic_Control": 378.5042321805769,
  "bic_Cocaine": 661.7140449821384,
  "bic_results": {
    "average_bic": 527.8896279440379,
    "individual_bics": [
      58.7069305938733,
      697.9429752146231,
      30.405891864706888,
      34.37878202550611,
      928.201075071331,
      605.8391620507643,
      7.167037869712219,
      559.7874601906835,
      7.167037869712219,
      882.1493732112501,
      882.1493732112501,
      23.278551673130515,
      974.252776931412,
      7.167037869712219,
      7.167037869712219,
      53.218739729777226,
      7.167037869712219,
      237.42554717011674,
      99.27044158987394,
      7.167037869712219,
      559.787631036993,
      145.32221976598046,
      272.64014809647404,
      39.148662371435506,
      697.9429511370491,
      35.574267384794894,
      651.8936295287142,
      11.591351434877087,
      145.3221434499639,
      375.5806527503598,
      7.167037869712219,
      1526.8731992523826,
      283.1597584773341,
      928.2020709834147,
      7.167037869712219,
      605.8391620507645,
      375.5808858339275,
      836.0976713511691,
      559.7874601906836,
      145.32214344995492,
      651.8908639108454,
      1250.5629880918973,
      53.2187397297932,
      743.9942676310072,
      513.7357583306032,
      329.52920832281785,
      743.3467302813425,
      836.0977019524119,
      974.2527769314119,
      790.0459694910882,
      332.2974458796611,
      1434.7697955322212,
      467.68602371754713,
      651.890838782679,
      1020.3044787914929,
      1112.4078825116546,
      1204.5112862318163,
      191.37384531003582,
      1480.821497392302,
      329.52895089027874,
      48.07160415664109,
      38.91336904824664,
      21.5196830557026,
      240.33891003152752,
      1204.514635801108,
      743.9942676310071,
      145.32214344995484,
      237.42554717011683,
      743.9942676310073,
      145.32214344995495,
      1480.821497392302,
      1434.7692360580766,
      145.7959954159804,
      329.52895089029727,
      836.0976713511692,
      240.19813606262247,
      99.27044158987397,
      1572.9249011124639,
      651.8908639108455,
      1480.8225687734937,
      651.8908639108455,
      145.32214344995484,
      1342.666910761042,
      25.53584581019482,
      513.7064455707433,
      1480.8214973923018,
      43.94975873212079,
      1296.614689951978,
      99.27044158987398,
      650.628511680219,
      513.7357583306028
    ],
    "group_enabled": true,
    "group_bics": {
      "Control": [
        58.7069305938733,
        697.9429752146231,
        30.405891864706888,
        34.37878202550611,
        928.201075071331,
        605.8391620507643,
        7.167037869712219,
        559.7874601906835,
        7.167037869712219,
        882.1493732112501,
        882.1493732112501,
        23.278551673130515,
        974.252776931412,
        7.167037869712219,
        7.167037869712219,
        53.218739729777226,
        7.167037869712219,
        237.42554717011674,
        99.27044158987394,
        7.167037869712219,
        559.787631036993,
        145.32221976598046,
        272.64014809647404,
        39.148662371435506,
        697.9429511370491,
        35.574267384794894,
        651.8936295287142,
        11.591351434877087,
        145.3221434499639,
        375.5806527503598,
        7.167037869712219,
        1526.8731992523826,
        283.1597584773341,
        928.2020709834147,
        7.167037869712219,
        605.8391620507645,
        375.5808858339275,
        836.0976713511691,
        559.7874601906836,
        145.32214344995492,
        651.8908639108454,
        1250.5629880918973,
        53.2187397297932
      ],
      "Cocaine": [
        743.9942676310072,
        513.7357583306032,
        329.52920832281785,
        743.3467302813425,
        836.0977019524119,
        974.2527769314119,
        790.0459694910882,
        332.2974458796611,
        1434.7697955322212,
        467.68602371754713,
        651.890838782679,
        1020.3044787914929,
        1112.4078825116546,
        1204.5112862318163,
        191.37384531003582,
        1480.821497392302,
        329.52895089027874,
        48.07160415664109,
        38.91336904824664,
        21.5196830557026,
        240.33891003152752,
        1204.514635801108,
        743.9942676310071,
        145.32214344995484,
        237.42554717011683,
        743.9942676310073,
        145.32214344995495,
        1480.821497392302,
        1434.7692360580766,
        145.7959954159804,
        329.52895089029727,
        836.0976713511692,
        240.19813606262247,
        99.27044158987397,
        1572.9249011124639,
        651.8908639108455,
        1480.8225687734937,
        651.8908639108455,
        145.32214344995484,
        1342.666910761042,
        25.53584581019482,
        513.7064455707433,
        1480.8214973923018,
        43.94975873212079,
        1296.614689951978,
        99.27044158987398,
        650.628511680219,
        513.7357583306028
      ]
    },
    "num_parameters": 2,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- beta_value: r = 0.293\n- beta_unfairness: r = 0.052",
  "previous_models": [
    "Specification: sum_tokens = token_self + token_opp\nfair_perc_self_calc = 50.0 if sum_tokens == 0 else (token_self / sum_tokens) * 100.0\nsafe_split_perc_self = max(1e-6, split_perc_self)\nratio_penalty_term = max(0.0, (fair_perc_self_calc / safe_split_perc_self) - 1.0)\nU = beta_value * split_perc_self - beta_unfairness * ratio_penalty_term\nSummary: An additive utility model for responder decisions based on the offered percentage share and a penalty for relative unfairness. Utility is calculated as a linear combination of the proposed percentage share (`split_perc_self`), scaled by `beta_value`, and a ratio-based unfairness penalty term, scaled by `beta_unfairness`. The unfairness penalty is derived from the ratio of the calculated fair share (based on token contributions) to the proposed share, applying only when the offer is less than fair. This ratio-based penalty term introduces a non-linear (inverse) relationship with the proposed share, distinct from the linear relationship of the value term. This difference in mathematical influence is specifically designed to enhance the identifiability of the two learnable parameters, `beta_value` and `beta_unfairness`, allowing for more robust parameter recovery compared to models using a simple difference-based penalty term. Both learnable parameters are constrained to be non-negative within generous finite bounds [0.0, 100.0].\nTarget Variable: accept\nPrediction Type: utility\nBIC: 527.8896279440379\nOverall Accuracy: 0.6563\nGroup Accuracies:\n- Control: 0.7397\n- Cocaine: 0.5816\n\nParameter Recovery:\n- beta_value: r = 0.293\n- beta_unfairness: r = 0.052"
  ]
}