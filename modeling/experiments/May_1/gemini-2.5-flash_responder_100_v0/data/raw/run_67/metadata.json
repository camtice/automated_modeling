{
  "task_description": "In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "Okay, here are the improved instructions for the next run (Run 67), building on the analysis of previous attempts and focusing intensely on achieving robust parameter identifiability for *both* learnable parameters.\n\nInstructions for Run 67 of 100:\n\nThe **unwavering primary objective remains achieving parameter recovery >= 0.7 for *all* learnable parameters**. This is the critical benchmark for model usability. While improved BIC (lower is better) and accuracy (higher is better) are valuable secondary goals, they must not come at the expense of robust parameter recovery.\n\nRun 66 attempted an additive model structure `U = beta_value * split_perc_self - beta_unfairness * ratio_penalty_term` using a ratio penalty term defined as `max(0.0, (fair_perc_self_calc / safe_split_perc_self) - 1.0)`. This model performed poorly across the board: high BIC (527.89), moderate accuracy (0.656), and critically, terrible parameter recovery for *both* `beta_value` (r=0.293) and `beta_unfairness` (r=0.052). This suggests that the additive structure combined with this specific, potentially unbounded ratio penalty term did not effectively separate the influences of the two parameters, possibly due to numerical instability or high correlation between the terms being scaled.\n\nIn contrast, Run 63, which used a *ratio* model structure (`U = (beta_value * split_perc_self) / (1.0 + beta_unfairness * unfairness_penalty_term)`) with a *difference-based* penalty term (`max(0.0, fair_perc_self_calc - split_perc_self)`), showed significantly better performance: lower BIC (46.17), higher accuracy (0.691), and better parameter recovery, particularly for `beta_value` (r=0.925). While `beta_unfairness` recovery (r=0.608) in Run 63 was still just shy of the 0.7 target, it was the best recovery for the unfairness parameter seen in models using a difference-based penalty term.\n\nThis suggests that a *ratio structure* might be more conducive to parameter identifiability for this task than additive structures. However, the simple difference penalty term used in Run 63 might still have too much correlation with `split_perc_self` to allow `beta_unfairness` to be fully disentangled from `beta_value`.\n\nFor Run 67, let's combine the promising *ratio structure* from Run 63 with a *different approach to the unfairness penalty term* \u2013 specifically, a ratio-based penalty, but one that is **bounded** and potentially less correlated with the value term than the simple difference.\n\nLet's define the penalty based on the *relative* shortfall: `1 - (offered_share / fair_share)`, applicable only when the offer is less than fair. This term naturally ranges from 0 (when offered == fair) up to 1 (when offered == 0 and fair > 0).\n\nProposed Model Structure: A ratio model where the utility is the scaled value term divided by a term that increases with unfairness.\n`U = (beta_value * split_perc_self) / (1.0 + beta_unfairness * BoundedRatioPenaltyTerm)`\n\nHere, `BoundedRatioPenaltyTerm` should be 0 for fair or generous offers and increase as the offer becomes more unfair *relative to the fair share*. A suitable definition that is bounded between 0 and 1 (when `split_perc_self >= 0`) is `max(0.0, 1.0 - (split_perc_self / fair_perc_self_calc))`. Special care must be taken when `fair_perc_self_calc` is 0 (which happens when `token_self` is 0 and `token_opp` > 0). If `fair_perc_self_calc` is 0, any non-negative offer is \"fair\" or \"generous\" relative to a 0 fair share, so the penalty should be 0.\n\nThe goal is to design a utility calculation `U` involving `split_perc_self`, `fair_perc_self_calc` (derived from `token_self`, `token_opp`), and exactly two learnable parameters (`beta_value`, `beta_unfairness`). Design the model using the ratio structure `U = (beta_value * split_perc_self) / (1.0 + beta_unfairness * BoundedRatioPenaltyTerm)` where `BoundedRatioPenaltyTerm` is calculated as `max(0.0, 1.0 - (split_perc_self / fair_perc_self_calc))` but is explicitly set to 0 if `fair_perc_self_calc` is 0.\n\nFocus on clearly defining this new, bounded ratio penalty term and articulating how its unique mathematical relationship with the input variables (compared to the simple difference penalty or the unbounded ratio penalty from Run 66) is intended to help disentangle the influences of `beta_value` and `beta_unfairness` and improve parameter identifiability within the ratio structure.\n\n*   **Key Inputs & Calculated Variables:** Use `split_perc_self`, `token_self`, `token_opp` as data variables. Calculate `sum_tokens`, `fair_perc_self_calc` (handling `sum_tokens == 0` defaulting to 50.0), and a new `bounded_ratio_penalty_term` based on `max(0.0, 1.0 - (split_perc_self / fair_perc_self_calc))`, explicitly handling the case where `fair_perc_self_calc` is 0 (setting the penalty to 0 in that case). Include any other necessary intermediate variables.\n*   **Model Formula:** Define `U` using the ratio structure: `U = (beta_value * split_perc_self) / (1.0 + beta_unfairness * BoundedRatioPenaltyTerm)`. Include calculation steps for derived variables *before* the formula for `U`. Use clear mathematical notation within the <MODEL> tags (only the formula).\n*   **Learnable Parameters:** Exactly **2 learnable parameters**: `beta_value` and `beta_unfairness`. Choose descriptive, Python-safe names. Define clear, generous, finite numerical bounds. Non-negative bounds (e.g., `[0.0, 100.0]` for both) are theoretically appropriate (higher `beta_value` increases utility for better offers, higher `beta_unfairness` increases the denominator penalty for unfairness) and may aid recovery.\n*   **Calculated Variables:** Include descriptions for *all* calculated variables used in the model (including U, sum_tokens, fair_perc_self_calc, and your chosen bounded ratio-based penalty term variable) with `source: \"calculated\"`. Include descriptions for all data variables used as inputs (`token_self`, `token_opp`, `split_perc_self`) with `source: \"data\"`.\n*   **Variable Descriptions:** Provide variable descriptions in JSON format between <VARIABLES> tags for *all* variables in the <MODEL> formula. Include source, range (with inclusive flags), distribution (if applicable), and learnable status.\n*   **Target Variable:** Specify \"accept\" using <target_variable> tags.\n*   **Summary:** Provide a concise summary between <SUMMARY> tags. Describe the model's core idea (ratio structure, value numerator, penalty denominator). Crucially, explain *how the definition of the penalty term based on the *bounded ratio* of offered share to fair share (instead of the simple difference or unbounded ratio) within the denominator of the ratio structure is intended to improve robust parameter identifiability for *both* learnable parameters*, particularly `beta_unfairness`, by creating distinct mathematical influences for the two parameters across the range of offers. Explain why this approach builds on the relative success of the Run 63 ratio model while attempting to address its parameter recovery limitations by using a better-behaved penalty term.\n\nAvailable Data Variables:\n- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.\n(Note: Use `split_perc_self` for the participant's proposed percentage share percentage).\n\nPlease think through this step by step, then provide your model specification and variable descriptions. Remember that robust parameter identifiability for *both* learnable parameters (>= 0.7 recovery for both) is the absolute priority. Your goal is to find a structure where both parameters' influences are clearly distinguishable across the range of possible offers, leading to reliable estimates. Be creative in how you define and utilize the bounded ratio-based penalty term to maximize this distinction within the ratio structure. Find a model structure that truly shines in parameter recovery.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: Okay, here are the improved instructions for the next run (Run 67), building on the analysis of previous attempts and focusing intensely on achieving robust parameter identifiability for *both* learnable parameters.\n\nInstructions for Run 67 of 100:\n\nThe **unwavering primary objective remains achieving parameter recovery >= 0.7 for *all* learnable parameters**. This is the critical benchmark for model usability. While improved BIC (lower is better) and accuracy (higher is better) are valuable secondary goals, they must not come at the expense of robust parameter recovery.\n\nRun 66 attempted an additive model structure `U = beta_value * split_perc_self - beta_unfairness * ratio_penalty_term` using a ratio penalty term defined as `max(0.0, (fair_perc_self_calc / safe_split_perc_self) - 1.0)`. This model performed poorly across the board: high BIC (527.89), moderate accuracy (0.656), and critically, terrible parameter recovery for *both* `beta_value` (r=0.293) and `beta_unfairness` (r=0.052). This suggests that the additive structure combined with this specific, potentially unbounded ratio penalty term did not effectively separate the influences of the two parameters, possibly due to numerical instability or high correlation between the terms being scaled.\n\nIn contrast, Run 63, which used a *ratio* model structure (`U = (beta_value * split_perc_self) / (1.0 + beta_unfairness * unfairness_penalty_term)`) with a *difference-based* penalty term (`max(0.0, fair_perc_self_calc - split_perc_self)`), showed significantly better performance: lower BIC (46.17), higher accuracy (0.691), and better parameter recovery, particularly for `beta_value` (r=0.925). While `beta_unfairness` recovery (r=0.608) in Run 63 was still just shy of the 0.7 target, it was the best recovery for the unfairness parameter seen in models using a difference-based penalty term.\n\nThis suggests that a *ratio structure* might be more conducive to parameter identifiability for this task than additive structures. However, the simple difference penalty term used in Run 63 might still have too much correlation with `split_perc_self` to allow `beta_unfairness` to be fully disentangled from `beta_value`.\n\nFor Run 67, let's combine the promising *ratio structure* from Run 63 with a *different approach to the unfairness penalty term* \u2013 specifically, a ratio-based penalty, but one that is **bounded** and potentially less correlated with the value term than the simple difference.\n\nLet's define the penalty based on the *relative* shortfall: `1 - (offered_share / fair_share)`, applicable only when the offer is less than fair. This term naturally ranges from 0 (when offered == fair) up to 1 (when offered == 0 and fair > 0).\n\nProposed Model Structure: A ratio model where the utility is the scaled value term divided by a term that increases with unfairness.\n`U = (beta_value * split_perc_self) / (1.0 + beta_unfairness * BoundedRatioPenaltyTerm)`\n\nHere, `BoundedRatioPenaltyTerm` should be 0 for fair or generous offers and increase as the offer becomes more unfair *relative to the fair share*. A suitable definition that is bounded between 0 and 1 (when `split_perc_self >= 0`) is `max(0.0, 1.0 - (split_perc_self / fair_perc_self_calc))`. Special care must be taken when `fair_perc_self_calc` is 0 (which happens when `token_self` is 0 and `token_opp` > 0). If `fair_perc_self_calc` is 0, any non-negative offer is \"fair\" or \"generous\" relative to a 0 fair share, so the penalty should be 0.\n\nThe goal is to design a utility calculation `U` involving `split_perc_self`, `fair_perc_self_calc` (derived from `token_self`, `token_opp`), and exactly two learnable parameters (`beta_value`, `beta_unfairness`). Design the model using the ratio structure `U = (beta_value * split_perc_self) / (1.0 + beta_unfairness * BoundedRatioPenaltyTerm)` where `BoundedRatioPenaltyTerm` is calculated as `max(0.0, 1.0 - (split_perc_self / fair_perc_self_calc))` but is explicitly set to 0 if `fair_perc_self_calc` is 0.\n\nFocus on clearly defining this new, bounded ratio penalty term and articulating how its unique mathematical relationship with the input variables (compared to the simple difference penalty or the unbounded ratio penalty from Run 66) is intended to help disentangle the influences of `beta_value` and `beta_unfairness` and improve parameter identifiability within the ratio structure.\n\n*   **Key Inputs & Calculated Variables:** Use `split_perc_self`, `token_self`, `token_opp` as data variables. Calculate `sum_tokens`, `fair_perc_self_calc` (handling `sum_tokens == 0` defaulting to 50.0), and a new `bounded_ratio_penalty_term` based on `max(0.0, 1.0 - (split_perc_self / fair_perc_self_calc))`, explicitly handling the case where `fair_perc_self_calc` is 0 (setting the penalty to 0 in that case). Include any other necessary intermediate variables.\n*   **Model Formula:** Define `U` using the ratio structure: `U = (beta_value * split_perc_self) / (1.0 + beta_unfairness * BoundedRatioPenaltyTerm)`. Include calculation steps for derived variables *before* the formula for `U`. Use clear mathematical notation within the <MODEL> tags (only the formula).\n*   **Learnable Parameters:** Exactly **2 learnable parameters**: `beta_value` and `beta_unfairness`. Choose descriptive, Python-safe names. Define clear, generous, finite numerical bounds. Non-negative bounds (e.g., `[0.0, 100.0]` for both) are theoretically appropriate (higher `beta_value` increases utility for better offers, higher `beta_unfairness` increases the denominator penalty for unfairness) and may aid recovery.\n*   **Calculated Variables:** Include descriptions for *all* calculated variables used in the model (including U, sum_tokens, fair_perc_self_calc, and your chosen bounded ratio-based penalty term variable) with `source: \"calculated\"`. Include descriptions for all data variables used as inputs (`token_self`, `token_opp`, `split_perc_self`) with `source: \"data\"`.\n*   **Variable Descriptions:** Provide variable descriptions in JSON format between <VARIABLES> tags for *all* variables in the <MODEL> formula. Include source, range (with inclusive flags), distribution (if applicable), and learnable status.\n*   **Target Variable:** Specify \"accept\" using <target_variable> tags.\n*   **Summary:** Provide a concise summary between <SUMMARY> tags. Describe the model's core idea (ratio structure, value numerator, penalty denominator). Crucially, explain *how the definition of the penalty term based on the *bounded ratio* of offered share to fair share (instead of the simple difference or unbounded ratio) within the denominator of the ratio structure is intended to improve robust parameter identifiability for *both* learnable parameters*, particularly `beta_unfairness`, by creating distinct mathematical influences for the two parameters across the range of offers. Explain why this approach builds on the relative success of the Run 63 ratio model while attempting to address its parameter recovery limitations by using a better-behaved penalty term.\n\nAvailable Data Variables:\n- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.\n(Note: Use `split_perc_self` for the participant's proposed percentage share percentage).\n\nPlease think through this step by step, then provide your model specification and variable descriptions. Remember that robust parameter identifiability for *both* learnable parameters (>= 0.7 recovery for both) is the absolute priority. Your goal is to find a structure where both parameters' influences are clearly distinguishable across the range of possible offers, leading to reliable estimates. Be creative in how you define and utilize the bounded ratio-based penalty term to maximize this distinction within the ratio structure. Find a model structure that truly shines in parameter recovery.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<MODEL>\nsum_tokens = token_self + token_opp\nfair_perc_self_calc = (sum_tokens > 0) ? (token_self / sum_tokens * 100.0) : 50.0\nraw_penalty = (fair_perc_self_calc > 0) ? (1.0 - (split_perc_self / fair_perc_self_calc)) : 0.0\nbounded_ratio_penalty_term = max(0.0, raw_penalty)\nU = (beta_value * split_perc_self) / (1.0 + beta_unfairness * bounded_ratio_penalty_term)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The proposed share for the participant in percentage.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"accept\": {\n      \"description\": \"Whether the participant responded accept (1) or reject (0). This is the target variable.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"sum_tokens\": {\n      \"description\": \"The sum of tokens found by the participant and the opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fair_perc_self_calc\": {\n      \"description\": \"The calculated fair percentage share for the participant based on their token contribution relative to the total tokens. Defaults to 50% if sum_tokens is 0.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"raw_penalty\": {\n      \"description\": \"The raw penalty term calculated as 1.0 minus the ratio of the offered share to the fair share percentage. Negative if offer is generous.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": 1.0,\n        \"inclusive_min\": false,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"bounded_ratio_penalty_term\": {\n      \"description\": \"The bounded ratio-based penalty term. Calculated as max(0.0, 1.0 - (split_perc_self / fair_perc_self_calc)), handling the case where fair_perc_self_calc is 0 (penalty is 0). This term is 0 for fair/generous offers and increases towards 1 for unfair offers.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_value\": {\n      \"description\": \"Parameter representing sensitivity to the value of the proposed share.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_unfairness\": {\n      \"description\": \"Parameter representing sensitivity to receiving less than the calculated fair share, scaling the penalty term.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Utility of accepting the proposed offer.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA computational model predicting responder acceptance decisions using a ratio utility function. The utility (U) of accepting an offer is calculated as the proposed percentage share (scaled by beta_value) divided by a term reflecting the sensitivity to unfairness (1.0 plus a bounded ratio-based penalty scaled by beta_unfairness). The bounded ratio-based penalty term quantifies how much the offer falls short of the calculated fair share percentage, relative to the fair share, being zero for fair or generous offers and increasing towards one for increasingly unfair offers, explicitly handling cases where the fair share is zero. This ratio structure, combined with a penalty based on relative and bounded unfairness, is designed to create distinguishable influences for the beta_value (scaling the overall value component) and beta_unfairness (scaling the unfairness penalty component) across the range of possible offers, aiming to improve robust parameter identifiability.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['beta_value', 'beta_unfairness']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                sum_tokens = token_self + token_opp\nfair_perc_self_calc = (sum_tokens > 0) ? (token_self / sum_tokens * 100.0) : 50.0\nraw_penalty = (fair_perc_self_calc > 0) ? (1.0 - (split_perc_self / fair_perc_self_calc)) : 0.0\nbounded_ratio_penalty_term = max(0.0, raw_penalty)\nU = (beta_value * split_perc_self) / (1.0 + beta_unfairness * bounded_ratio_penalty_term)\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The proposed share for the participant in percentage.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"accept\": {\n      \"description\": \"Whether the participant responded accept (1) or reject (0). This is the target variable.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"sum_tokens\": {\n      \"description\": \"The sum of tokens found by the participant and the opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fair_perc_self_calc\": {\n      \"description\": \"The calculated fair percentage share for the participant based on their token contribution relative to the total tokens. Defaults to 50% if sum_tokens is 0.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"raw_penalty\": {\n      \"description\": \"The raw penalty term calculated as 1.0 minus the ratio of the offered share to the fair share percentage. Negative if offer is generous.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": 1.0,\n        \"inclusive_min\": false,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"bounded_ratio_penalty_term\": {\n      \"description\": \"The bounded ratio-based penalty term. Calculated as max(0.0, 1.0 - (split_perc_self / fair_perc_self_calc)), handling the case where fair_perc_self_calc is 0 (penalty is 0). This term is 0 for fair/generous offers and increases towards 1 for unfair offers.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_value\": {\n      \"description\": \"Parameter representing sensitivity to the value of the proposed share.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_unfairness\": {\n      \"description\": \"Parameter representing sensitivity to receiving less than the calculated fair share, scaling the penalty term.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Utility of accepting the proposed offer.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, beta_value=1.0, beta_unfairness=1.0):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        split_perc_self = trial.get(\"splitperc_self\", 0)\n\n        sum_tokens = token_self + token_opp\n\n        if sum_tokens > 0:\n            fair_perc_self_calc = (token_self / sum_tokens) * 100.0\n        else:\n            fair_perc_self_calc = 50.0\n\n        if fair_perc_self_calc > 0:\n            raw_penalty = 1.0 - (split_perc_self / fair_perc_self_calc)\n        else:\n            raw_penalty = 0.0\n\n        bounded_ratio_penalty_term = max(0.0, raw_penalty)\n\n        U = (beta_value * split_perc_self) / (1.0 + beta_unfairness * bounded_ratio_penalty_term)\n\n        model_predictions.append(U)\n    return model_predictions\n```",
      "timestamp": 1746103065.425747
    }
  ],
  "learnable_parameters": {
    "beta_value": {
      "description": "Parameter representing sensitivity to the value of the proposed share.",
      "range": {
        "min": 0.0,
        "max": 100.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta_unfairness": {
      "description": "Parameter representing sensitivity to receiving less than the calculated fair share, scaling the penalty term.",
      "range": {
        "min": 0.0,
        "max": 100.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "sum_tokens = token_self + token_opp\nfair_perc_self_calc = (sum_tokens > 0) ? (token_self / sum_tokens * 100.0) : 50.0\nraw_penalty = (fair_perc_self_calc > 0) ? (1.0 - (split_perc_self / fair_perc_self_calc)) : 0.0\nbounded_ratio_penalty_term = max(0.0, raw_penalty)\nU = (beta_value * split_perc_self) / (1.0 + beta_unfairness * bounded_ratio_penalty_term)",
  "variable_descriptions": {
    "token_self": {
      "description": "Number of tokens found by the participant.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "split_perc_self": {
      "description": "The proposed share for the participant in percentage.",
      "range": {
        "min": 0.0,
        "max": 100.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "accept": {
      "description": "Whether the participant responded accept (1) or reject (0). This is the target variable.",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "sum_tokens": {
      "description": "The sum of tokens found by the participant and the opponent.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "fair_perc_self_calc": {
      "description": "The calculated fair percentage share for the participant based on their token contribution relative to the total tokens. Defaults to 50% if sum_tokens is 0.",
      "range": {
        "min": 0.0,
        "max": 100.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "raw_penalty": {
      "description": "The raw penalty term calculated as 1.0 minus the ratio of the offered share to the fair share percentage. Negative if offer is generous.",
      "range": {
        "min": "-inf",
        "max": 1.0,
        "inclusive_min": false,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "bounded_ratio_penalty_term": {
      "description": "The bounded ratio-based penalty term. Calculated as max(0.0, 1.0 - (split_perc_self / fair_perc_self_calc)), handling the case where fair_perc_self_calc is 0 (penalty is 0). This term is 0 for fair/generous offers and increases towards 1 for unfair offers.",
      "range": {
        "min": 0.0,
        "max": 1.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "beta_value": {
      "description": "Parameter representing sensitivity to the value of the proposed share.",
      "range": {
        "min": 0.0,
        "max": 100.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta_unfairness": {
      "description": "Parameter representing sensitivity to receiving less than the calculated fair share, scaling the penalty term.",
      "range": {
        "min": 0.0,
        "max": 100.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "U": {
      "description": "Utility of accepting the proposed offer.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "A computational model predicting responder acceptance decisions using a ratio utility function. The utility (U) of accepting an offer is calculated as the proposed percentage share (scaled by beta_value) divided by a term reflecting the sensitivity to unfairness (1.0 plus a bounded ratio-based penalty scaled by beta_unfairness). The bounded ratio-based penalty term quantifies how much the offer falls short of the calculated fair share percentage, relative to the fair share, being zero for fair or generous offers and increasing towards one for increasingly unfair offers, explicitly handling cases where the fair share is zero. This ratio structure, combined with a penalty based on relative and bounded unfairness, is designed to create distinguishable influences for the beta_value (scaling the overall value component) and beta_unfairness (scaling the unfairness penalty component) across the range of possible offers, aiming to improve robust parameter identifiability.",
  "target_variable": "accept",
  "full_reasoning": "<MODEL>\nsum_tokens = token_self + token_opp\nfair_perc_self_calc = (sum_tokens > 0) ? (token_self / sum_tokens * 100.0) : 50.0\nraw_penalty = (fair_perc_self_calc > 0) ? (1.0 - (split_perc_self / fair_perc_self_calc)) : 0.0\nbounded_ratio_penalty_term = max(0.0, raw_penalty)\nU = (beta_value * split_perc_self) / (1.0 + beta_unfairness * bounded_ratio_penalty_term)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The proposed share for the participant in percentage.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"accept\": {\n      \"description\": \"Whether the participant responded accept (1) or reject (0). This is the target variable.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"sum_tokens\": {\n      \"description\": \"The sum of tokens found by the participant and the opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fair_perc_self_calc\": {\n      \"description\": \"The calculated fair percentage share for the participant based on their token contribution relative to the total tokens. Defaults to 50% if sum_tokens is 0.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"raw_penalty\": {\n      \"description\": \"The raw penalty term calculated as 1.0 minus the ratio of the offered share to the fair share percentage. Negative if offer is generous.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": 1.0,\n        \"inclusive_min\": false,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"bounded_ratio_penalty_term\": {\n      \"description\": \"The bounded ratio-based penalty term. Calculated as max(0.0, 1.0 - (split_perc_self / fair_perc_self_calc)), handling the case where fair_perc_self_calc is 0 (penalty is 0). This term is 0 for fair/generous offers and increases towards 1 for unfair offers.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_value\": {\n      \"description\": \"Parameter representing sensitivity to the value of the proposed share.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_unfairness\": {\n      \"description\": \"Parameter representing sensitivity to receiving less than the calculated fair share, scaling the penalty term.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Utility of accepting the proposed offer.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA computational model predicting responder acceptance decisions using a ratio utility function. The utility (U) of accepting an offer is calculated as the proposed percentage share (scaled by beta_value) divided by a term reflecting the sensitivity to unfairness (1.0 plus a bounded ratio-based penalty scaled by beta_unfairness). The bounded ratio-based penalty term quantifies how much the offer falls short of the calculated fair share percentage, relative to the fair share, being zero for fair or generous offers and increasing towards one for increasingly unfair offers, explicitly handling cases where the fair share is zero. This ratio structure, combined with a penalty based on relative and bounded unfairness, is designed to create distinguishable influences for the beta_value (scaling the overall value component) and beta_unfairness (scaling the unfairness penalty component) across the range of possible offers, aiming to improve robust parameter identifiability.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: sum_tokens = token_self + token_opp\nfair_perc_self_calc = (sum_tokens > 0) ? (token_self / sum_tokens * 100.0) : 50.0\nraw_penalty = (fair_perc_self_calc > 0) ? (1.0 - (split_perc_self / fair_perc_self_calc)) : 0.0\nbounded_ratio_penalty_term = max(0.0, raw_penalty)\nU = (beta_value * split_perc_self) / (1.0 + beta_unfairness * bounded_ratio_penalty_term)\nSummary: A computational model predicting responder acceptance decisions using a ratio utility function. The utility (U) of accepting an offer is calculated as the proposed percentage share (scaled by beta_value) divided by a term reflecting the sensitivity to unfairness (1.0 plus a bounded ratio-based penalty scaled by beta_unfairness). The bounded ratio-based penalty term quantifies how much the offer falls short of the calculated fair share percentage, relative to the fair share, being zero for fair or generous offers and increasing towards one for increasingly unfair offers, explicitly handling cases where the fair share is zero. This ratio structure, combined with a penalty based on relative and bounded unfairness, is designed to create distinguishable influences for the beta_value (scaling the overall value component) and beta_unfairness (scaling the unfairness penalty component) across the range of possible offers, aiming to improve robust parameter identifiability.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, beta_value=1.0, beta_unfairness=1.0):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        split_perc_self = trial.get(\"splitperc_self\", 0)\n\n        sum_tokens = token_self + token_opp\n\n        if sum_tokens > 0:\n            fair_perc_self_calc = (token_self / sum_tokens) * 100.0\n        else:\n            fair_perc_self_calc = 50.0\n\n        if fair_perc_self_calc > 0:\n            raw_penalty = 1.0 - (split_perc_self / fair_perc_self_calc)\n        else:\n            raw_penalty = 0.0\n\n        bounded_ratio_penalty_term = max(0.0, raw_penalty)\n\n        U = (beta_value * split_perc_self) / (1.0 + beta_unfairness * bounded_ratio_penalty_term)\n\n        model_predictions.append(U)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.67002442002442,
  "group_accuracies": {
    "Control": 0.7332041343669251,
    "Cocaine": 0.6134259259259259
  },
  "group_parameter_averages": {
    "Control": {
      "beta_value": 20.848232120306058,
      "beta_unfairness": 70.03715871545066
    },
    "Cocaine": {
      "beta_value": 6.428050714981291,
      "beta_unfairness": 82.05085524324465
    }
  },
  "fitting_results": [
    {
      "beta_value": 0.0,
      "beta_unfairness": 100.0,
      "success": true,
      "log_likelihood": -24.95329849295801,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 0.2557293093019656,
      "beta_unfairness": 45.831871317314395,
      "success": true,
      "log_likelihood": -20.715574947530108,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 42.13293733911563,
      "beta_unfairness": 24.242833494247584,
      "success": true,
      "log_likelihood": -384.4289969006968,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 0.15694389120227648,
      "beta_unfairness": 99.6468208501448,
      "success": true,
      "log_likelihood": -22.061980700217322,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 0.3870920955720929,
      "beta_unfairness": 100.0,
      "success": true,
      "log_likelihood": -21.32163436208898,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 1.2838535340474289,
      "beta_unfairness": 100.0,
      "success": true,
      "log_likelihood": -16.81312686152087,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 11.196948397091013,
      "beta_unfairness": 9.116287095168435,
      "success": true,
      "log_likelihood": -4.1951080981428345e-06,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 1.385579043610463,
      "beta_unfairness": 100.0,
      "success": true,
      "log_likelihood": -16.344376179579946,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 65.11218919094216,
      "beta_unfairness": 45.73392035253546,
      "success": true,
      "log_likelihood": -9.500861741781777e-08,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 0.17750378245970555,
      "beta_unfairness": 86.14943753105453,
      "success": true,
      "log_likelihood": -21.942693028267502,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 0.5308165412367687,
      "beta_unfairness": 100.0,
      "success": true,
      "log_likelihood": -20.67495931191265,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 0.0,
      "beta_unfairness": 100.0,
      "success": true,
      "log_likelihood": -24.95329849295801,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 0.39475759251267445,
      "beta_unfairness": 98.66875159254255,
      "success": true,
      "log_likelihood": -21.269521293996025,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 79.28281046993305,
      "beta_unfairness": 19.638708443241292,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 61.62421924956678,
      "beta_unfairness": 5.641442588490653,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 46.501757933941235,
      "beta_unfairness": 10.108751754276557,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 86.46031072596215,
      "beta_unfairness": 20.17865645366188,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 4.4294595395317184,
      "beta_unfairness": 99.97846685324825,
      "success": true,
      "log_likelihood": -7.833009246119988,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 4.470959693908987,
      "beta_unfairness": 98.65099339159941,
      "success": true,
      "log_likelihood": -7.662519706938523,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 80.72762829440609,
      "beta_unfairness": 13.863295163821299,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 0.7639671113362598,
      "beta_unfairness": 99.57608898368176,
      "success": true,
      "log_likelihood": -19.4537137185771,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 3.675358767460552,
      "beta_unfairness": 99.42621674352901,
      "success": true,
      "log_likelihood": -9.236907300595712,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 0.07941062985997858,
      "beta_unfairness": 100.0,
      "success": true,
      "log_likelihood": -22.6633842203596,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 0.4834017487749832,
      "beta_unfairness": 100.0,
      "success": true,
      "log_likelihood": -20.900438717673726,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 0.22415205045884654,
      "beta_unfairness": 43.69498358746877,
      "success": true,
      "log_likelihood": -20.93091353854252,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 0.8957651808212554,
      "beta_unfairness": 100.0,
      "success": true,
      "log_likelihood": -18.767528336292376,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 95.08295904684168,
      "beta_unfairness": 48.30794476161038,
      "success": true,
      "log_likelihood": -367.3278916537441,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 0.09911808859454918,
      "beta_unfairness": 100.0,
      "success": true,
      "log_likelihood": -22.38811208894686,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 93.07392588349276,
      "beta_unfairness": 0.284203254827331,
      "success": true,
      "log_likelihood": -92.10340371656179,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 1.8636936493799856,
      "beta_unfairness": 100.0,
      "success": true,
      "log_likelihood": -14.382373411297278,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 60.92250174061387,
      "beta_unfairness": 43.439462767697435,
      "success": true,
      "log_likelihood": -1.265333869470997e-07,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 0.0,
      "beta_unfairness": 87.0545326254839,
      "success": true,
      "log_likelihood": -24.95329849295801,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 0.02871604924136223,
      "beta_unfairness": 40.358934392303276,
      "success": true,
      "log_likelihood": -24.236754798924434,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 0.13488839443339776,
      "beta_unfairness": 100.0,
      "success": true,
      "log_likelihood": -22.14403072451153,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 94.44928072605705,
      "beta_unfairness": 18.20275124577513,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 0.38761926286620435,
      "beta_unfairness": 30.448918377291015,
      "success": true,
      "log_likelihood": -17.44191640487496,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 1.7269191180445016,
      "beta_unfairness": 100.0,
      "success": true,
      "log_likelihood": -14.90642733538298,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 0.5298541563746962,
      "beta_unfairness": 100.0,
      "success": true,
      "log_likelihood": -20.679622139820403,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 1.0670034901876935,
      "beta_unfairness": 100.0,
      "success": true,
      "log_likelihood": -17.875823256353833,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 4.646673119726061,
      "beta_unfairness": 100.0,
      "success": true,
      "log_likelihood": -7.471405275623745,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 0.8904880853989255,
      "beta_unfairness": 100.0,
      "success": true,
      "log_likelihood": -18.795513311502642,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 0.06612234845686214,
      "beta_unfairness": 100.0,
      "success": true,
      "log_likelihood": -22.947305898883048,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 48.87066590039685,
      "beta_unfairness": 23.353551143363227,
      "success": true,
      "log_likelihood": -23.025850926502784,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 0.6976772509908788,
      "beta_unfairness": 100.0,
      "success": true,
      "log_likelihood": -19.8224297321164,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 1.0505627978954033,
      "beta_unfairness": 100.0,
      "success": true,
      "log_likelihood": -17.959710432666668,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 1.0087539857777812,
      "beta_unfairness": 87.7631777853264,
      "success": true,
      "log_likelihood": -17.49857996265483,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.7119996392767605,
      "beta_unfairness": 100.0,
      "success": true,
      "log_likelihood": -19.746659138700853,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.10565613614784138,
      "beta_unfairness": 100.0,
      "success": true,
      "log_likelihood": -22.325402450312282,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.21321853080279937,
      "beta_unfairness": 100.0,
      "success": true,
      "log_likelihood": -21.908125935215487,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.03136277570377798,
      "beta_unfairness": 37.411434685517115,
      "success": true,
      "log_likelihood": -24.12298033918236,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.9795286340515216,
      "beta_unfairness": 100.0,
      "success": true,
      "log_likelihood": -18.326656351204196,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.0,
      "beta_unfairness": 69.70306470026603,
      "success": true,
      "log_likelihood": -24.95329849295801,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.043959994506565896,
      "beta_unfairness": 4.700161576021677,
      "success": true,
      "log_likelihood": -22.480947689284154,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.03134666257764817,
      "beta_unfairness": 95.24856508381443,
      "success": true,
      "log_likelihood": -24.15300406954886,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 72.94879326360424,
      "beta_unfairness": 39.915152412992015,
      "success": true,
      "log_likelihood": -503.44828871137184,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.13310917826209007,
      "beta_unfairness": 100.0,
      "success": true,
      "log_likelihood": -22.15202424106005,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.07963877264829658,
      "beta_unfairness": 100.0,
      "success": true,
      "log_likelihood": -22.658045266398705,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 77.0226602489527,
      "beta_unfairness": 15.995097366869771,
      "success": true,
      "log_likelihood": -92.1034037165618,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.0,
      "beta_unfairness": 100.0,
      "success": true,
      "log_likelihood": -24.95329849295801,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 1.1969738228755844,
      "beta_unfairness": 50.32743897572798,
      "success": true,
      "log_likelihood": -12.83823382753205,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.3866567909148552,
      "beta_unfairness": 60.66924966083052,
      "success": true,
      "log_likelihood": -20.25804183487537,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.6065122677036819,
      "beta_unfairness": 100.0,
      "success": true,
      "log_likelihood": -20.297271957945497,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.0,
      "beta_unfairness": 100.0,
      "success": true,
      "log_likelihood": -24.95329849295801,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.027944361581506608,
      "beta_unfairness": 74.23170300532395,
      "success": true,
      "log_likelihood": -24.28493214721667,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.06659668690719962,
      "beta_unfairness": 100.0,
      "success": true,
      "log_likelihood": -22.93525618108312,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.9082580970033297,
      "beta_unfairness": 100.0,
      "success": true,
      "log_likelihood": -18.701311690597024,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 5.122537999877723,
      "beta_unfairness": 100.0,
      "success": true,
      "log_likelihood": -6.747621959443328,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 1.8557051861566212,
      "beta_unfairness": 60.40184666712987,
      "success": true,
      "log_likelihood": -10.806239661250386,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.48783748537661803,
      "beta_unfairness": 85.76023520532144,
      "success": true,
      "log_likelihood": -20.51433510261137,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 3.054343169807012,
      "beta_unfairness": 99.99974601954315,
      "success": true,
      "log_likelihood": -10.726324263631827,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.05158408095587975,
      "beta_unfairness": 100.0,
      "success": true,
      "log_likelihood": -23.37813452896041,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.0,
      "beta_unfairness": 84.02190658171419,
      "success": true,
      "log_likelihood": -24.95329849295801,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.46583816944013784,
      "beta_unfairness": 92.62531526521508,
      "success": true,
      "log_likelihood": -20.830174024025734,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 1.0077054313238405,
      "beta_unfairness": 79.84729624797137,
      "success": true,
      "log_likelihood": -16.9805369664076,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.024171915828959212,
      "beta_unfairness": 75.10510713816808,
      "success": true,
      "log_likelihood": -24.43022005129422,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 1.4698003674218267,
      "beta_unfairness": 100.0,
      "success": true,
      "log_likelihood": -15.970628081200424,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 5.316275104602308,
      "beta_unfairness": 99.96569711217965,
      "success": true,
      "log_likelihood": -6.476371917033773,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.0,
      "beta_unfairness": 100.0,
      "success": true,
      "log_likelihood": -24.95329849295801,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 87.20178477999309,
      "beta_unfairness": 96.54193896264096,
      "success": true,
      "log_likelihood": -322.24726267011727,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.0,
      "beta_unfairness": 100.0,
      "success": true,
      "log_likelihood": -24.95329849295801,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.12438452787041497,
      "beta_unfairness": 100.0,
      "success": true,
      "log_likelihood": -22.19548727212453,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.08320527816985039,
      "beta_unfairness": 0.0,
      "success": true,
      "log_likelihood": -10.537471306221319,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.0,
      "beta_unfairness": 62.79935799141026,
      "success": true,
      "log_likelihood": -24.95329849295801,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.4260118667361257,
      "beta_unfairness": 85.33700711512135,
      "success": true,
      "log_likelihood": -20.849803068468297,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.2986791793423789,
      "beta_unfairness": 95.49105868954554,
      "success": true,
      "log_likelihood": -21.60623007468095,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.016520649668290893,
      "beta_unfairness": 76.62561374991918,
      "success": true,
      "log_likelihood": -24.689922073145386,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 1.1879191853490267,
      "beta_unfairness": 100.0,
      "success": true,
      "log_likelihood": -17.272790616615545,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.0,
      "beta_unfairness": 100.0,
      "success": true,
      "log_likelihood": -24.95329849295801,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 5.458581375325825,
      "beta_unfairness": 98.8847352619337,
      "success": true,
      "log_likelihood": -6.212335664074982,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.17648106670163385,
      "beta_unfairness": 74.32236018269268,
      "success": true,
      "log_likelihood": -21.86985664410401,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 36.46585760096991,
      "beta_unfairness": 34.7467842325471,
      "success": true,
      "log_likelihood": -253.28042712562652,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "beta_value": {
        "r": 0.034255643253828606,
        "p": 0.7351002198480494
      },
      "beta_unfairness": {
        "r": -0.02936442370085266,
        "p": 0.7718048043529063
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 83.6258835006044,
  "bic_Control": 73.84646156006404,
  "bic_Cocaine": 92.3866156556718,
  "bic_results": {
    "average_bic": 83.6258835006044,
    "individual_bics": [
      57.073634862828236,
      48.598187771972434,
      776.0250316783058,
      51.29099927734686,
      49.810306601090176,
      40.79329159995396,
      7.167046267128416,
      39.85579023607211,
      7.167038066929455,
      51.05242393344722,
      48.51695650073752,
      57.073634862828236,
      49.70608046490427,
      7.167037869712219,
      7.167037869712219,
      7.167037869712219,
      7.167037869712219,
      22.833056369152196,
      22.49207729078927,
      7.167037869712219,
      46.074465314066416,
      25.640852478103646,
      52.49380631763142,
      48.96791531225967,
      49.02886495399726,
      44.70209454949697,
      741.8228211844004,
      51.943262054805935,
      191.3738453100358,
      35.93178469950678,
      7.167038129978994,
      57.073634862828236,
      55.640547474761085,
      51.45509932593528,
      7.167037869712219,
      42.05087068666214,
      36.97989254767818,
      48.52628215655302,
      42.918684389619884,
      22.109848428159708,
      44.7580644999175,
      53.061649674678314,
      53.218739729917786,
      46.81189734114502,
      43.086458742245554,
      42.16419780222188,
      46.660356154313924,
      51.81784277753678,
      50.98328974734319,
      55.412998555276936,
      43.82035057932061,
      57.073634862828236,
      52.128933255480526,
      55.47304601600994,
      1014.0636152996559,
      51.47108635903232,
      52.48312840970963,
      191.37384531003582,
      57.073634862828236,
      32.84350553197632,
      47.68312154666296,
      47.76158179280321,
      57.073634862828236,
      55.736902171345555,
      53.037550239078456,
      44.569661258106265,
      20.662281795798876,
      28.779517199412993,
      48.195708082134956,
      28.619686404175873,
      53.923306934833036,
      57.073634862828236,
      48.827385924963686,
      41.128111809727415,
      56.02747797950066,
      39.108294039313066,
      20.119781710979765,
      57.073634862828236,
      651.6615632171467,
      57.073634862828236,
      51.55801242116128,
      28.24198048935486,
      57.073634862828236,
      48.86664401384881,
      50.37949802627412,
      56.54688202320299,
      41.71261911014331,
      57.073634862828236,
      19.591709205062184,
      50.90675116512024,
      513.7278921281653
    ],
    "group_enabled": true,
    "group_bics": {
      "Control": [
        57.073634862828236,
        48.598187771972434,
        776.0250316783058,
        51.29099927734686,
        49.810306601090176,
        40.79329159995396,
        7.167046267128416,
        39.85579023607211,
        7.167038066929455,
        51.05242393344722,
        48.51695650073752,
        57.073634862828236,
        49.70608046490427,
        7.167037869712219,
        7.167037869712219,
        7.167037869712219,
        7.167037869712219,
        22.833056369152196,
        22.49207729078927,
        7.167037869712219,
        46.074465314066416,
        25.640852478103646,
        52.49380631763142,
        48.96791531225967,
        49.02886495399726,
        44.70209454949697,
        741.8228211844004,
        51.943262054805935,
        191.3738453100358,
        35.93178469950678,
        7.167038129978994,
        57.073634862828236,
        55.640547474761085,
        51.45509932593528,
        7.167037869712219,
        42.05087068666214,
        36.97989254767818,
        48.52628215655302,
        42.918684389619884,
        22.109848428159708,
        44.7580644999175,
        53.061649674678314,
        53.218739729917786
      ],
      "Cocaine": [
        46.81189734114502,
        43.086458742245554,
        42.16419780222188,
        46.660356154313924,
        51.81784277753678,
        50.98328974734319,
        55.412998555276936,
        43.82035057932061,
        57.073634862828236,
        52.128933255480526,
        55.47304601600994,
        1014.0636152996559,
        51.47108635903232,
        52.48312840970963,
        191.37384531003582,
        57.073634862828236,
        32.84350553197632,
        47.68312154666296,
        47.76158179280321,
        57.073634862828236,
        55.736902171345555,
        53.037550239078456,
        44.569661258106265,
        20.662281795798876,
        28.779517199412993,
        48.195708082134956,
        28.619686404175873,
        53.923306934833036,
        57.073634862828236,
        48.827385924963686,
        41.128111809727415,
        56.02747797950066,
        39.108294039313066,
        20.119781710979765,
        57.073634862828236,
        651.6615632171467,
        57.073634862828236,
        51.55801242116128,
        28.24198048935486,
        57.073634862828236,
        48.86664401384881,
        50.37949802627412,
        56.54688202320299,
        41.71261911014331,
        57.073634862828236,
        19.591709205062184,
        50.90675116512024,
        513.7278921281653
      ]
    },
    "num_parameters": 2,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- beta_value: r = 0.034\n- beta_unfairness: r = -0.029",
  "previous_models": [
    "Specification: sum_tokens = token_self + token_opp\nfair_perc_self_calc = (sum_tokens > 0) ? (token_self / sum_tokens * 100.0) : 50.0\nraw_penalty = (fair_perc_self_calc > 0) ? (1.0 - (split_perc_self / fair_perc_self_calc)) : 0.0\nbounded_ratio_penalty_term = max(0.0, raw_penalty)\nU = (beta_value * split_perc_self) / (1.0 + beta_unfairness * bounded_ratio_penalty_term)\nSummary: A computational model predicting responder acceptance decisions using a ratio utility function. The utility (U) of accepting an offer is calculated as the proposed percentage share (scaled by beta_value) divided by a term reflecting the sensitivity to unfairness (1.0 plus a bounded ratio-based penalty scaled by beta_unfairness). The bounded ratio-based penalty term quantifies how much the offer falls short of the calculated fair share percentage, relative to the fair share, being zero for fair or generous offers and increasing towards one for increasingly unfair offers, explicitly handling cases where the fair share is zero. This ratio structure, combined with a penalty based on relative and bounded unfairness, is designed to create distinguishable influences for the beta_value (scaling the overall value component) and beta_unfairness (scaling the unfairness penalty component) across the range of possible offers, aiming to improve robust parameter identifiability.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 83.6258835006044\nOverall Accuracy: 0.6700\nGroup Accuracies:\n- Control: 0.7332\n- Cocaine: 0.6134\n\nParameter Recovery:\n- beta_value: r = 0.034\n- beta_unfairness: r = -0.029"
  ]
}