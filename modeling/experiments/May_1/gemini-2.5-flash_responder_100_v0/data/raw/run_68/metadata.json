{
  "task_description": "In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "Okay, here are the improved instructions for the next run (Run 68), building on the analysis of previous attempts and maintaining the intense focus on achieving robust parameter identifiability for *both* learnable parameters.\n\nInstructions for Run 68 of 100:\n\nThe **unwavering primary objective remains achieving parameter recovery >= 0.7 for *all* learnable parameters**. This is the critical benchmark for model usability. While improved BIC (lower is better) and accuracy (higher is better) are valuable secondary goals, they must not come at the expense of robust parameter recovery.\n\nRun 67 attempted to combine the promising *ratio structure* from Run 63 (`U = (beta_value * split_perc_self) / (1.0 + beta_unfairness * BoundedRatioPenaltyTerm)`) with a *bounded ratio-based* penalty term (`max(0.0, 1.0 - (split_perc_self / fair_perc_self_calc))`). This approach resulted in extremely poor parameter recovery for *both* `beta_value` (r=0.034) and `beta_unfairness` (r=-0.029), indicating that this specific combination of structure and penalty term completely failed to create distinguishable parameter influences. Despite the theoretical reasoning, the mathematical relationship between the scaled value term and the scaled penalty term was too collinear or interdependent within this model form.\n\nThe historical performance suggests that ratio structures have shown *potential* for better `beta_value` recovery (Run 63: r=0.925), but consistently struggle with `beta_unfairness` recovery when using simple difference or ratio-based penalty terms. This strongly indicates that the *form* of the penalty term and *how it enters the utility function* relative to the value term is the key challenge for disentangling `beta_unfairness`.\n\nFor Run 68, let's continue to explore the ratio structure as it has shown the best single-parameter recovery, but we must drastically change the approach to the *penalty term* to improve `beta_unfairness` identifiability. The failure of simple difference (Run 63) and bounded ratio (Run 67) penalties suggests that these terms, when scaled by `beta_unfairness` in the denominator `1 + beta_unfairness * penalty`, still have an influence profile too similar to the `beta_value * split_perc_self` term in the numerator, making them hard to tell apart during fitting.\n\nTo achieve better identifiability for `beta_unfairness`, its impact needs to be mathematically distinct. A promising avenue is to make the penalty term itself a **non-linear function** of the difference or ratio that quantifies unfairness. This non-linearity should ideally create a shape of influence for `beta_unfairness` that is less correlated with the linear effect of `beta_value` across the range of `split_perc_self` values in the dataset.\n\nLet's define a `NonLinearPenaltyTerm` that is zero for fair or generous offers, but increases non-linearly as the offer becomes less than the fair share. A concrete approach to explore is using the **squared positive difference** between the fair share and the offered share percentage: `max(0.0, fair_perc_self_calc - split_perc_self)^2`. This penalizes increasingly unfair offers at an accelerating rate.\n\nProposed Model Structure: Continue with the ratio model form, but use this new non-linear penalty term in the denominator.\n`U = (beta_value * split_perc_self) / (1.0 + beta_unfairness * NonLinearPenaltyTerm)`\n\nHere, `NonLinearPenaltyTerm` is calculated as `max(0.0, fair_perc_self_calc - split_perc_self)^2`. This ensures the penalty is zero for fair or generous offers (`split_perc_self >= fair_perc_self_calc`) and applies a squared penalty otherwise. Special care must be taken in calculating `fair_perc_self_calc` when `sum_tokens` is zero (as before, default to 50.0).\n\nThe goal is to design a utility calculation `U` involving `split_perc_self`, `fair_perc_self_calc` (derived from `token_self`, `token_opp`), and exactly two learnable parameters (`beta_value`, `beta_unfairness`). Design the model using the ratio structure `U = (beta_value * split_perc_self) / (1.0 + beta_unfairness * NonLinearPenaltyTerm)` where `NonLinearPenaltyTerm` is calculated as `max(0.0, fair_perc_self_calc - split_perc_self)^2`.\n\nFocus on clearly defining this new, non-linear penalty term and articulating in the summary how its non-linear relationship with the degree of unfairness is intended to help disentangle the influences of `beta_value` (scaling the linear value) and `beta_unfairness` (scaling the non-linear penalty) and thus significantly improve robust parameter identifiability for *both* parameters within the ratio structure. Explain why this approach represents a departure from previous attempts that used linear or simple ratio-based penalty terms.\n\n*   **Key Inputs & Calculated Variables:** Use `split_perc_self`, `token_self`, `token_opp` as data variables. Calculate `sum_tokens`, `fair_perc_self_calc` (handling `sum_tokens == 0` defaulting to 50.0), and a new `non_linear_penalty_term` based on `max(0.0, fair_perc_self_calc - split_perc_self)^2`. Include any other necessary intermediate variables.\n*   **Model Formula:** Define `U` using the ratio structure: `U = (beta_value * split_perc_self) / (1.0 + beta_unfairness * NonLinearPenaltyTerm)`. Include calculation steps for derived variables *before* the formula for `U`. Use clear mathematical notation within the <MODEL> tags (only the formula).\n*   **Learnable Parameters:** Exactly **2 learnable parameters**: `beta_value` and `beta_unfairness`. Choose descriptive, Python-safe names. Define clear, generous, finite numerical bounds. Non-negative bounds (e.g., `[0.0, 100.0]` for both) are theoretically appropriate and may aid recovery.\n*   **Calculated Variables:** Include descriptions for *all* calculated variables used in the model (including U, sum_tokens, fair_perc_self_calc, and your chosen non-linear penalty term variable) with `source: \"calculated\"`. Include descriptions for all data variables used as inputs (`token_self`, `token_opp`, `split_perc_self`) with `source: \"data\"`.\\\n*   **Variable Descriptions:** Provide variable descriptions in JSON format between <VARIABLES> tags for *all* variables in the <MODEL> formula. Include source, range (with inclusive flags), distribution (if applicable), and learnable status.\n*   **Target Variable:** Specify \"accept\" using <target_variable> tags.\n*   **Summary:** Provide a concise summary between <SUMMARY> tags. Describe the model's core idea (ratio structure, value numerator, non-linear penalty denominator). Crucially, explain *how the definition of the penalty term as the squared positive difference between fair share and offered share percentage* within the denominator of the ratio structure is specifically intended to improve robust parameter identifiability for *both* learnable parameters by creating mathematically distinct non-linear influences for `beta_unfairness` compared to the linear influence of `beta_value`. Explain how this builds on previous attempts by addressing the suspected collinearity issues arising from linear or simple ratio penalties.\n\nAvailable Data Variables:\n- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.\n(Note: Use `split_perc_self` for the participant's proposed percentage share percentage).\n\nPlease think through this step by step, then provide your model specification and variable descriptions. Remember that robust parameter identifiability for *both* learnable parameters (>= 0.7 recovery for both) is the absolute priority. Your goal is to find a structure where both parameters' influences are clearly distinguishable across the range of possible offers, leading to reliable estimates. Be creative in how you define and utilize the non-linear penalty term or alternative interactions to maximize this distinction within a plausible utility framework. Find a model structure that truly shines in parameter recovery.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: Okay, here are the improved instructions for the next run (Run 68), building on the analysis of previous attempts and maintaining the intense focus on achieving robust parameter identifiability for *both* learnable parameters.\n\nInstructions for Run 68 of 100:\n\nThe **unwavering primary objective remains achieving parameter recovery >= 0.7 for *all* learnable parameters**. This is the critical benchmark for model usability. While improved BIC (lower is better) and accuracy (higher is better) are valuable secondary goals, they must not come at the expense of robust parameter recovery.\n\nRun 67 attempted to combine the promising *ratio structure* from Run 63 (`U = (beta_value * split_perc_self) / (1.0 + beta_unfairness * BoundedRatioPenaltyTerm)`) with a *bounded ratio-based* penalty term (`max(0.0, 1.0 - (split_perc_self / fair_perc_self_calc))`). This approach resulted in extremely poor parameter recovery for *both* `beta_value` (r=0.034) and `beta_unfairness` (r=-0.029), indicating that this specific combination of structure and penalty term completely failed to create distinguishable parameter influences. Despite the theoretical reasoning, the mathematical relationship between the scaled value term and the scaled penalty term was too collinear or interdependent within this model form.\n\nThe historical performance suggests that ratio structures have shown *potential* for better `beta_value` recovery (Run 63: r=0.925), but consistently struggle with `beta_unfairness` recovery when using simple difference or ratio-based penalty terms. This strongly indicates that the *form* of the penalty term and *how it enters the utility function* relative to the value term is the key challenge for disentangling `beta_unfairness`.\n\nFor Run 68, let's continue to explore the ratio structure as it has shown the best single-parameter recovery, but we must drastically change the approach to the *penalty term* to improve `beta_unfairness` identifiability. The failure of simple difference (Run 63) and bounded ratio (Run 67) penalties suggests that these terms, when scaled by `beta_unfairness` in the denominator `1 + beta_unfairness * penalty`, still have an influence profile too similar to the `beta_value * split_perc_self` term in the numerator, making them hard to tell apart during fitting.\n\nTo achieve better identifiability for `beta_unfairness`, its impact needs to be mathematically distinct. A promising avenue is to make the penalty term itself a **non-linear function** of the difference or ratio that quantifies unfairness. This non-linearity should ideally create a shape of influence for `beta_unfairness` that is less correlated with the linear effect of `beta_value` across the range of `split_perc_self` values in the dataset.\n\nLet's define a `NonLinearPenaltyTerm` that is zero for fair or generous offers, but increases non-linearly as the offer becomes less than the fair share. A concrete approach to explore is using the **squared positive difference** between the fair share and the offered share percentage: `max(0.0, fair_perc_self_calc - split_perc_self)^2`. This penalizes increasingly unfair offers at an accelerating rate.\n\nProposed Model Structure: Continue with the ratio model form, but use this new non-linear penalty term in the denominator.\n`U = (beta_value * split_perc_self) / (1.0 + beta_unfairness * NonLinearPenaltyTerm)`\n\nHere, `NonLinearPenaltyTerm` is calculated as `max(0.0, fair_perc_self_calc - split_perc_self)^2`. This ensures the penalty is zero for fair or generous offers (`split_perc_self >= fair_perc_self_calc`) and applies a squared penalty otherwise. Special care must be taken in calculating `fair_perc_self_calc` when `sum_tokens` is zero (as before, default to 50.0).\n\nThe goal is to design a utility calculation `U` involving `split_perc_self`, `fair_perc_self_calc` (derived from `token_self`, `token_opp`), and exactly two learnable parameters (`beta_value`, `beta_unfairness`). Design the model using the ratio structure `U = (beta_value * split_perc_self) / (1.0 + beta_unfairness * NonLinearPenaltyTerm)` where `NonLinearPenaltyTerm` is calculated as `max(0.0, fair_perc_self_calc - split_perc_self)^2`.\n\nFocus on clearly defining this new, non-linear penalty term and articulating in the summary how its non-linear relationship with the degree of unfairness is intended to help disentangle the influences of `beta_value` (scaling the linear value) and `beta_unfairness` (scaling the non-linear penalty) and thus significantly improve robust parameter identifiability for *both* parameters within the ratio structure. Explain why this approach represents a departure from previous attempts that used linear or simple ratio-based penalty terms.\n\n*   **Key Inputs & Calculated Variables:** Use `split_perc_self`, `token_self`, `token_opp` as data variables. Calculate `sum_tokens`, `fair_perc_self_calc` (handling `sum_tokens == 0` defaulting to 50.0), and a new `non_linear_penalty_term` based on `max(0.0, fair_perc_self_calc - split_perc_self)^2`. Include any other necessary intermediate variables.\n*   **Model Formula:** Define `U` using the ratio structure: `U = (beta_value * split_perc_self) / (1.0 + beta_unfairness * NonLinearPenaltyTerm)`. Include calculation steps for derived variables *before* the formula for `U`. Use clear mathematical notation within the <MODEL> tags (only the formula).\n*   **Learnable Parameters:** Exactly **2 learnable parameters**: `beta_value` and `beta_unfairness`. Choose descriptive, Python-safe names. Define clear, generous, finite numerical bounds. Non-negative bounds (e.g., `[0.0, 100.0]` for both) are theoretically appropriate and may aid recovery.\n*   **Calculated Variables:** Include descriptions for *all* calculated variables used in the model (including U, sum_tokens, fair_perc_self_calc, and your chosen non-linear penalty term variable) with `source: \"calculated\"`. Include descriptions for all data variables used as inputs (`token_self`, `token_opp`, `split_perc_self`) with `source: \"data\"`.\\\n*   **Variable Descriptions:** Provide variable descriptions in JSON format between <VARIABLES> tags for *all* variables in the <MODEL> formula. Include source, range (with inclusive flags), distribution (if applicable), and learnable status.\n*   **Target Variable:** Specify \"accept\" using <target_variable> tags.\n*   **Summary:** Provide a concise summary between <SUMMARY> tags. Describe the model's core idea (ratio structure, value numerator, non-linear penalty denominator). Crucially, explain *how the definition of the penalty term as the squared positive difference between fair share and offered share percentage* within the denominator of the ratio structure is specifically intended to improve robust parameter identifiability for *both* learnable parameters by creating mathematically distinct non-linear influences for `beta_unfairness` compared to the linear influence of `beta_value`. Explain how this builds on previous attempts by addressing the suspected collinearity issues arising from linear or simple ratio penalties.\n\nAvailable Data Variables:\n- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.\n(Note: Use `split_perc_self` for the participant's proposed percentage share percentage).\n\nPlease think through this step by step, then provide your model specification and variable descriptions. Remember that robust parameter identifiability for *both* learnable parameters (>= 0.7 recovery for both) is the absolute priority. Your goal is to find a structure where both parameters' influences are clearly distinguishable across the range of possible offers, leading to reliable estimates. Be creative in how you define and utilize the non-linear penalty term or alternative interactions to maximize this distinction within a plausible utility framework. Find a model structure that truly shines in parameter recovery.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<MODEL>\nsum_tokens = token_self + token_opp\nfair_perc_self_calc = (token_self / sum_tokens) * 100.0 if sum_tokens > 0 else 50.0\nnon_linear_penalty_term = max(0.0, fair_perc_self_calc - split_perc_self)^2\nU_accept = (beta_value * split_perc_self) / (1.0 + beta_unfairness * non_linear_penalty_term)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_accept\": {\n      \"description\": \"Utility of accepting the proposed split for the participant\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The proposed share for the participant (in %)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"sum_tokens\": {\n      \"description\": \"Total number of tokens found by participant and opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fair_perc_self_calc\": {\n      \"description\": \"Calculated fair percentage share for the participant based on token contributions (50% if sum_tokens is 0)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"non_linear_penalty_term\": {\n      \"description\": \"Squared positive difference between the fair percentage share and the proposed percentage share for the participant (zero if proposed share is fair or generous)\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_value\": {\n      \"description\": \"Sensitivity to the proposed percentage share for the participant\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_unfairness\": {\n      \"description\": \"Sensitivity to the non-linear penalty for unfair offers\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA computational model predicting responder acceptance utility using a ratio structure. The utility is calculated as the participant's proposed percentage share (split_perc_self) scaled by a value sensitivity parameter (beta_value) in the numerator, divided by one plus a non-linear penalty term scaled by an unfairness sensitivity parameter (beta_unfairness) in the denominator. The non-linear penalty term is defined as the squared positive difference between the calculated fair percentage share (based on token contributions) and the proposed percentage share. This term is zero for offers equal to or exceeding the fair share, penalizing only offers below the fair share. The use of a squared penalty term within the denominator is designed to create a mathematically distinct, non-linear influence profile for beta_unfairness compared to the linear influence of beta_value, thereby aiming to improve robust parameter identifiability for both learnable parameters.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['beta_value', 'beta_unfairness']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                sum_tokens = token_self + token_opp\nfair_perc_self_calc = (token_self / sum_tokens) * 100.0 if sum_tokens > 0 else 50.0\nnon_linear_penalty_term = max(0.0, fair_perc_self_calc - split_perc_self)^2\nU_accept = (beta_value * split_perc_self) / (1.0 + beta_unfairness * non_linear_penalty_term)\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"U_accept\": {\n      \"description\": \"Utility of accepting the proposed split for the participant\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The proposed share for the participant (in %)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"sum_tokens\": {\n      \"description\": \"Total number of tokens found by participant and opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fair_perc_self_calc\": {\n      \"description\": \"Calculated fair percentage share for the participant based on token contributions (50% if sum_tokens is 0)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"non_linear_penalty_term\": {\n      \"description\": \"Squared positive difference between the fair percentage share and the proposed percentage share for the participant (zero if proposed share is fair or generous)\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_value\": {\n      \"description\": \"Sensitivity to the proposed percentage share for the participant\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_unfairness\": {\n      \"description\": \"Sensitivity to the non-linear penalty for unfair offers\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, beta_value=1, beta_unfairness=1):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        split_perc_self = trial.get(\"splitperc_self\", 50.0)\n\n        sum_tokens = token_self + token_opp\n        fair_perc_self_calc = (token_self / sum_tokens) * 100.0 if sum_tokens > 0 else 50.0\n        non_linear_penalty_term = max(0.0, fair_perc_self_calc - split_perc_self)**2\n        \n        U_accept = (beta_value * split_perc_self) / (1.0 + beta_unfairness * non_linear_penalty_term)\n        model_predictions.append(U_accept)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n```",
      "timestamp": 1746103120.061929
    }
  ],
  "learnable_parameters": {
    "beta_value": {
      "description": "Sensitivity to the proposed percentage share for the participant",
      "range": {
        "min": 0.0,
        "max": 100.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta_unfairness": {
      "description": "Sensitivity to the non-linear penalty for unfair offers",
      "range": {
        "min": 0.0,
        "max": 100.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "sum_tokens = token_self + token_opp\nfair_perc_self_calc = (token_self / sum_tokens) * 100.0 if sum_tokens > 0 else 50.0\nnon_linear_penalty_term = max(0.0, fair_perc_self_calc - split_perc_self)^2\nU_accept = (beta_value * split_perc_self) / (1.0 + beta_unfairness * non_linear_penalty_term)",
  "variable_descriptions": {
    "U_accept": {
      "description": "Utility of accepting the proposed split for the participant",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "token_self": {
      "description": "Number of tokens found by the participant",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "split_perc_self": {
      "description": "The proposed share for the participant (in %)",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "sum_tokens": {
      "description": "Total number of tokens found by participant and opponent",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "fair_perc_self_calc": {
      "description": "Calculated fair percentage share for the participant based on token contributions (50% if sum_tokens is 0)",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "non_linear_penalty_term": {
      "description": "Squared positive difference between the fair percentage share and the proposed percentage share for the participant (zero if proposed share is fair or generous)",
      "range": {
        "min": 0.0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "beta_value": {
      "description": "Sensitivity to the proposed percentage share for the participant",
      "range": {
        "min": 0.0,
        "max": 100.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta_unfairness": {
      "description": "Sensitivity to the non-linear penalty for unfair offers",
      "range": {
        "min": 0.0,
        "max": 100.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_summary": "A computational model predicting responder acceptance utility using a ratio structure. The utility is calculated as the participant's proposed percentage share (split_perc_self) scaled by a value sensitivity parameter (beta_value) in the numerator, divided by one plus a non-linear penalty term scaled by an unfairness sensitivity parameter (beta_unfairness) in the denominator. The non-linear penalty term is defined as the squared positive difference between the calculated fair percentage share (based on token contributions) and the proposed percentage share. This term is zero for offers equal to or exceeding the fair share, penalizing only offers below the fair share. The use of a squared penalty term within the denominator is designed to create a mathematically distinct, non-linear influence profile for beta_unfairness compared to the linear influence of beta_value, thereby aiming to improve robust parameter identifiability for both learnable parameters.",
  "target_variable": "accept",
  "full_reasoning": "<MODEL>\nsum_tokens = token_self + token_opp\nfair_perc_self_calc = (token_self / sum_tokens) * 100.0 if sum_tokens > 0 else 50.0\nnon_linear_penalty_term = max(0.0, fair_perc_self_calc - split_perc_self)^2\nU_accept = (beta_value * split_perc_self) / (1.0 + beta_unfairness * non_linear_penalty_term)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_accept\": {\n      \"description\": \"Utility of accepting the proposed split for the participant\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The proposed share for the participant (in %)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"sum_tokens\": {\n      \"description\": \"Total number of tokens found by participant and opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fair_perc_self_calc\": {\n      \"description\": \"Calculated fair percentage share for the participant based on token contributions (50% if sum_tokens is 0)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"non_linear_penalty_term\": {\n      \"description\": \"Squared positive difference between the fair percentage share and the proposed percentage share for the participant (zero if proposed share is fair or generous)\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_value\": {\n      \"description\": \"Sensitivity to the proposed percentage share for the participant\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_unfairness\": {\n      \"description\": \"Sensitivity to the non-linear penalty for unfair offers\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA computational model predicting responder acceptance utility using a ratio structure. The utility is calculated as the participant's proposed percentage share (split_perc_self) scaled by a value sensitivity parameter (beta_value) in the numerator, divided by one plus a non-linear penalty term scaled by an unfairness sensitivity parameter (beta_unfairness) in the denominator. The non-linear penalty term is defined as the squared positive difference between the calculated fair percentage share (based on token contributions) and the proposed percentage share. This term is zero for offers equal to or exceeding the fair share, penalizing only offers below the fair share. The use of a squared penalty term within the denominator is designed to create a mathematically distinct, non-linear influence profile for beta_unfairness compared to the linear influence of beta_value, thereby aiming to improve robust parameter identifiability for both learnable parameters.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: sum_tokens = token_self + token_opp\nfair_perc_self_calc = (token_self / sum_tokens) * 100.0 if sum_tokens > 0 else 50.0\nnon_linear_penalty_term = max(0.0, fair_perc_self_calc - split_perc_self)^2\nU_accept = (beta_value * split_perc_self) / (1.0 + beta_unfairness * non_linear_penalty_term)\nSummary: A computational model predicting responder acceptance utility using a ratio structure. The utility is calculated as the participant's proposed percentage share (split_perc_self) scaled by a value sensitivity parameter (beta_value) in the numerator, divided by one plus a non-linear penalty term scaled by an unfairness sensitivity parameter (beta_unfairness) in the denominator. The non-linear penalty term is defined as the squared positive difference between the calculated fair percentage share (based on token contributions) and the proposed percentage share. This term is zero for offers equal to or exceeding the fair share, penalizing only offers below the fair share. The use of a squared penalty term within the denominator is designed to create a mathematically distinct, non-linear influence profile for beta_unfairness compared to the linear influence of beta_value, thereby aiming to improve robust parameter identifiability for both learnable parameters.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, beta_value=1, beta_unfairness=1):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        split_perc_self = trial.get(\"splitperc_self\", 50.0)\n\n        sum_tokens = token_self + token_opp\n        fair_perc_self_calc = (token_self / sum_tokens) * 100.0 if sum_tokens > 0 else 50.0\n        non_linear_penalty_term = max(0.0, fair_perc_self_calc - split_perc_self)**2\n        \n        U_accept = (beta_value * split_perc_self) / (1.0 + beta_unfairness * non_linear_penalty_term)\n        model_predictions.append(U_accept)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.6733821733821734,
  "group_accuracies": {
    "Control": 0.7603359173126615,
    "Cocaine": 0.5954861111111112
  },
  "group_parameter_averages": {
    "Control": {
      "beta_value": 73.91066065852552,
      "beta_unfairness": 25.434810536822653
    },
    "Cocaine": {
      "beta_value": 39.96518905302552,
      "beta_unfairness": 48.89737380744376
    }
  },
  "fitting_results": [
    {
      "beta_value": 0.0048732319192927994,
      "beta_unfairness": 100.0,
      "success": true,
      "log_likelihood": -24.92911069068499,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 100.0,
      "beta_unfairness": 29.895675255266944,
      "success": true,
      "log_likelihood": -18.800444655506382,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 100.0,
      "beta_unfairness": 14.027228249917165,
      "success": true,
      "log_likelihood": -17.186676239298915,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 15.042025151308941,
      "beta_unfairness": 46.61212083273247,
      "success": true,
      "log_likelihood": -21.950679386636814,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 99.84923454452628,
      "beta_unfairness": 26.860571435370314,
      "success": true,
      "log_likelihood": -18.622096086910396,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 100.0,
      "beta_unfairness": 10.359809181654073,
      "success": true,
      "log_likelihood": -16.271511175077162,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 100.0,
      "beta_unfairness": 1.844579093479442e-15,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 99.9832800476661,
      "beta_unfairness": 7.424371596635801,
      "success": true,
      "log_likelihood": -15.088691216134109,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 100.0,
      "beta_unfairness": 0.0,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 37.22381956072146,
      "beta_unfairness": 22.772426582462874,
      "success": true,
      "log_likelihood": -19.963961592657867,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 100.0,
      "beta_unfairness": 21.874908559207153,
      "success": true,
      "log_likelihood": -18.23823854619484,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 0.004878572237902832,
      "beta_unfairness": 94.51979722764398,
      "success": true,
      "log_likelihood": -24.929053223698062,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 77.72689219247563,
      "beta_unfairness": 25.385732961550342,
      "success": true,
      "log_likelihood": -18.944970075547616,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 100.0,
      "beta_unfairness": 0.0,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 98.99966083175494,
      "beta_unfairness": 2.5199689746991458e-15,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 100.0,
      "beta_unfairness": 0.0,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 100.0,
      "beta_unfairness": 0.0,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 99.9999308127028,
      "beta_unfairness": 1.524150434583725,
      "success": true,
      "log_likelihood": -7.401776163749884,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 94.63156617714112,
      "beta_unfairness": 1.187023410791985,
      "success": true,
      "log_likelihood": -6.4702761595572245,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 100.0,
      "beta_unfairness": 0.0,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 100.0,
      "beta_unfairness": 14.892400810632434,
      "success": true,
      "log_likelihood": -17.348146979168387,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 99.99895634038977,
      "beta_unfairness": 1.7525010516933464,
      "success": true,
      "log_likelihood": -8.093236924547174,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 0.2119566919633975,
      "beta_unfairness": 100.0,
      "success": true,
      "log_likelihood": -22.18936272809824,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 18.504652216319332,
      "beta_unfairness": 38.275402774394095,
      "success": true,
      "log_likelihood": -21.707135780985304,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 92.27948831297046,
      "beta_unfairness": 20.349605752100302,
      "success": true,
      "log_likelihood": -18.254924091901387,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 100.0,
      "beta_unfairness": 12.299779149821614,
      "success": true,
      "log_likelihood": -16.807920342555747,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 100.0,
      "beta_unfairness": 17.19272914310425,
      "success": true,
      "log_likelihood": -17.712763993666815,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 55.428751929189986,
      "beta_unfairness": 54.32770949994838,
      "success": true,
      "log_likelihood": -20.768513632763046,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 99.99954129672903,
      "beta_unfairness": 1.6915748433291014,
      "success": true,
      "log_likelihood": -7.916293344064671,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 100.0,
      "beta_unfairness": 4.918728948052749,
      "success": true,
      "log_likelihood": -13.333725795879724,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 100.0,
      "beta_unfairness": 4.3620546277760535e-16,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 0.00487323169546858,
      "beta_unfairness": 100.0,
      "success": true,
      "log_likelihood": -24.929110690685,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 1.7114999925053163,
      "beta_unfairness": 53.72263909206401,
      "success": true,
      "log_likelihood": -45.204147272907726,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 65.61639582988894,
      "beta_unfairness": 100.0,
      "success": true,
      "log_likelihood": -21.401600855463922,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 100.0,
      "beta_unfairness": 2.1045399015189344e-15,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 66.75888960342849,
      "beta_unfairness": 17.165408902118426,
      "success": true,
      "log_likelihood": -18.54435221794116,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 26.558805355151257,
      "beta_unfairness": 1.6058909220989535,
      "success": true,
      "log_likelihood": -14.264506866131564,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 83.38663902499934,
      "beta_unfairness": 21.713973638061397,
      "success": true,
      "log_likelihood": -18.56508653876161,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 100.0,
      "beta_unfairness": 11.744962550286319,
      "success": true,
      "log_likelihood": -16.66776447550836,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 39.7197875751069,
      "beta_unfairness": 0.664560874224557,
      "success": true,
      "log_likelihood": -7.870435582982425,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 100.0,
      "beta_unfairness": 16.969837374333817,
      "success": true,
      "log_likelihood": -17.68003451660349,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 4.51204131599548,
      "beta_unfairness": 100.0,
      "success": true,
      "log_likelihood": -22.175866381101383,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 99.99996847780926,
      "beta_unfairness": 1.9653320292934304,
      "success": true,
      "log_likelihood": -8.67710238571451,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 85.22947579537967,
      "beta_unfairness": 46.575636736934285,
      "success": true,
      "log_likelihood": -19.772279195815468,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 100.0,
      "beta_unfairness": 15.419829511158976,
      "success": true,
      "log_likelihood": -17.440310495187937,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 31.797329102871466,
      "beta_unfairness": 8.012649925379149,
      "success": true,
      "log_likelihood": -18.50894354958401,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 83.70077274785693,
      "beta_unfairness": 32.729922241017206,
      "success": true,
      "log_likelihood": -19.230538750632533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 10.208394888680242,
      "beta_unfairness": 50.13543835010803,
      "success": true,
      "log_likelihood": -22.084988215200642,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 83.43618249693888,
      "beta_unfairness": 44.489728696063004,
      "success": true,
      "log_likelihood": -19.730988947385278,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 3.0123025840288005,
      "beta_unfairness": 41.04503766244018,
      "success": true,
      "log_likelihood": -45.19381039654069,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 88.46169440542225,
      "beta_unfairness": 27.850147969510434,
      "success": true,
      "log_likelihood": -18.88882837253197,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.004875484408799614,
      "beta_unfairness": 100.0,
      "success": true,
      "log_likelihood": -24.92908846557768,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 95.59557947412408,
      "beta_unfairness": 33.567903092536895,
      "success": true,
      "log_likelihood": -42.086187419410805,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 12.774827866532174,
      "beta_unfairness": 39.55061786717006,
      "success": true,
      "log_likelihood": -44.97635769199379,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 28.57133909373588,
      "beta_unfairness": 53.02545245373443,
      "success": true,
      "log_likelihood": -21.611670974926362,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 81.31722034476093,
      "beta_unfairness": 55.12482613354432,
      "success": true,
      "log_likelihood": -20.138577284325205,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.2561858518660377,
      "beta_unfairness": 100.0,
      "success": true,
      "log_likelihood": -22.18183628205047,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 46.352038038512696,
      "beta_unfairness": 47.04360719280449,
      "success": true,
      "log_likelihood": -20.825934453174682,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.004870075810998818,
      "beta_unfairness": 82.2164693716595,
      "success": true,
      "log_likelihood": -24.929141875326405,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 23.25159226295061,
      "beta_unfairness": 1.3629877129982195,
      "success": true,
      "log_likelihood": -14.135035955952501,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 23.958929833691442,
      "beta_unfairness": 46.84741052935337,
      "success": true,
      "log_likelihood": -21.659556953419905,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 96.34711122154863,
      "beta_unfairness": 22.595553523890658,
      "success": true,
      "log_likelihood": -18.37365987704317,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.004865809356192224,
      "beta_unfairness": 78.52327159336872,
      "success": true,
      "log_likelihood": -24.92918005968846,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.027600242490598777,
      "beta_unfairness": 99.35921453687651,
      "success": true,
      "log_likelihood": -24.306748853618547,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.1920870181925144,
      "beta_unfairness": 82.6556927912381,
      "success": true,
      "log_likelihood": -22.189474843582342,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 93.77965663942669,
      "beta_unfairness": 16.517859244664958,
      "success": true,
      "log_likelihood": -17.76916729764719,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 100.0,
      "beta_unfairness": 1.3806773742363272,
      "success": true,
      "log_likelihood": -6.924174263763146,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 41.43547740176811,
      "beta_unfairness": 1.184848499530752,
      "success": true,
      "log_likelihood": -10.627622700317383,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 23.806934114805422,
      "beta_unfairness": 50.61983211971294,
      "success": true,
      "log_likelihood": -21.728275992419377,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 87.90514414092837,
      "beta_unfairness": 2.6826013119957928,
      "success": true,
      "log_likelihood": -10.958813361811611,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.18169723356465173,
      "beta_unfairness": 80.79113103065279,
      "success": true,
      "log_likelihood": -22.194467770040273,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.004863607926837048,
      "beta_unfairness": 66.40137270858044,
      "success": true,
      "log_likelihood": -24.929205526083518,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 20.21162973649498,
      "beta_unfairness": 42.142490785957165,
      "success": true,
      "log_likelihood": -21.713303252324355,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 27.945788105069227,
      "beta_unfairness": 45.19835463833662,
      "success": true,
      "log_likelihood": -21.471471407196102,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 6.9853395594174765,
      "beta_unfairness": 16.061038251388652,
      "success": true,
      "log_likelihood": -44.81417042016174,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 68.27647416113201,
      "beta_unfairness": 11.297276333175036,
      "success": true,
      "log_likelihood": -17.62066230355285,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 100.0,
      "beta_unfairness": 1.0304593908766648,
      "success": true,
      "log_likelihood": -5.571281989711393,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.0,
      "beta_unfairness": 100.0,
      "success": true,
      "log_likelihood": -24.95329849295801,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 53.80980701823582,
      "beta_unfairness": 33.8921606719978,
      "success": true,
      "log_likelihood": -20.013876199114236,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.004871706688993816,
      "beta_unfairness": 96.91618488441036,
      "success": true,
      "log_likelihood": -24.929118767702537,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.29870825580011057,
      "beta_unfairness": 100.0,
      "success": true,
      "log_likelihood": -22.18095436691248,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 39.4578536113786,
      "beta_unfairness": 60.50493141309922,
      "success": true,
      "log_likelihood": -21.410050097511974,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.0,
      "beta_unfairness": 87.33452242525371,
      "success": true,
      "log_likelihood": -24.95329849295801,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 15.886681560349336,
      "beta_unfairness": 37.632120515572005,
      "success": true,
      "log_likelihood": -21.806493282076335,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 60.09049998113986,
      "beta_unfairness": 73.20295789830728,
      "success": true,
      "log_likelihood": -21.106090440579464,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.027570562223697276,
      "beta_unfairness": 83.6148282554737,
      "success": true,
      "log_likelihood": -24.30791648288648,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 100.0,
      "beta_unfairness": 13.19809026825192,
      "success": true,
      "log_likelihood": -17.01475527552029,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 59.876661103327905,
      "beta_unfairness": 64.83287632098966,
      "success": true,
      "log_likelihood": -66.97932307362866,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 100.0,
      "beta_unfairness": 0.9564442714164109,
      "success": true,
      "log_likelihood": -5.241498387734766,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.23052611902149447,
      "beta_unfairness": 100.0,
      "success": true,
      "log_likelihood": -22.183057965233502,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 23.607615287365366,
      "beta_unfairness": 51.54948625163409,
      "success": true,
      "log_likelihood": -21.748806685853786,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "beta_value": {
        "r": 0.4968035303795336,
        "p": 1.461727942141285e-07
      },
      "beta_unfairness": {
        "r": 0.44452568671389575,
        "p": 3.5994986069672297e-06
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 44.57767105900792,
  "bic_Control": 35.48841074094412,
  "bic_Cocaine": 52.720133427273396,
  "bic_results": {
    "average_bic": 44.57767105900792,
    "individual_bics": [
      57.0252592582822,
      44.76792718792498,
      41.54039035551005,
      51.068396650185846,
      44.41123005073301,
      39.71006022706654,
      7.167037869712219,
      37.344420309180435,
      7.167037869712219,
      47.09496106222795,
      43.6435149693019,
      57.02514432430834,
      45.05697802800745,
      7.167037869712219,
      7.167037869712219,
      7.167037869712219,
      7.167037869712219,
      21.970590204411987,
      20.10759019602667,
      7.167037869712219,
      41.86333183524899,
      23.353511726006566,
      51.545763333108695,
      50.581309438882826,
      43.67688606071499,
      40.78287856202371,
      42.59256586424585,
      48.70406514243831,
      22.99962456504156,
      33.83448946867167,
      7.167037869712219,
      57.02525925828222,
      97.57533242272767,
      49.97023958784006,
      7.167037869712219,
      44.25574231279454,
      35.69605160917535,
      44.297210954435435,
      40.50256682792894,
      22.90790904287707,
      42.5271069101192,
      51.51877063911498,
      24.521242648341243,
      46.711596268543154,
      42.04765886728809,
      44.18492497608024,
      45.628115378177284,
      51.3370143073135,
      46.629015771682774,
      97.5546586699936,
      44.94469462197616,
      57.02521480806758,
      91.33941271573383,
      97.1197532608998,
      50.39037982676494,
      47.44419244556263,
      51.530710441013156,
      48.81890678326158,
      57.02532162756503,
      35.437109788817224,
      50.48615178375203,
      43.91435763099856,
      57.025397996289136,
      55.78053558414931,
      51.5459875640769,
      42.7053724722066,
      21.015386404438512,
      28.42228327754699,
      50.62358986175097,
      29.08466460053544,
      51.555973416992764,
      57.02544892907925,
      50.59364438156093,
      50.10998069130442,
      96.79537871723569,
      42.40836248401792,
      18.309601856335007,
      57.073634862828236,
      47.19479027514069,
      57.02527541231729,
      51.52894661073718,
      49.987138071936165,
      57.073634862828236,
      50.78002444106489,
      49.37921875807115,
      55.78287084268518,
      41.1965484279528,
      141.12568402416954,
      17.650034652381752,
      51.53315380737922,
      50.66465124861979
    ],
    "group_enabled": true,
    "group_bics": {
      "Control": [
        57.0252592582822,
        44.76792718792498,
        41.54039035551005,
        51.068396650185846,
        44.41123005073301,
        39.71006022706654,
        7.167037869712219,
        37.344420309180435,
        7.167037869712219,
        47.09496106222795,
        43.6435149693019,
        57.02514432430834,
        45.05697802800745,
        7.167037869712219,
        7.167037869712219,
        7.167037869712219,
        7.167037869712219,
        21.970590204411987,
        20.10759019602667,
        7.167037869712219,
        41.86333183524899,
        23.353511726006566,
        51.545763333108695,
        50.581309438882826,
        43.67688606071499,
        40.78287856202371,
        42.59256586424585,
        48.70406514243831,
        22.99962456504156,
        33.83448946867167,
        7.167037869712219,
        57.02525925828222,
        97.57533242272767,
        49.97023958784006,
        7.167037869712219,
        44.25574231279454,
        35.69605160917535,
        44.297210954435435,
        40.50256682792894,
        22.90790904287707,
        42.5271069101192,
        51.51877063911498,
        24.521242648341243
      ],
      "Cocaine": [
        46.711596268543154,
        42.04765886728809,
        44.18492497608024,
        45.628115378177284,
        51.3370143073135,
        46.629015771682774,
        97.5546586699936,
        44.94469462197616,
        57.02521480806758,
        91.33941271573383,
        97.1197532608998,
        50.39037982676494,
        47.44419244556263,
        51.530710441013156,
        48.81890678326158,
        57.02532162756503,
        35.437109788817224,
        50.48615178375203,
        43.91435763099856,
        57.025397996289136,
        55.78053558414931,
        51.5459875640769,
        42.7053724722066,
        21.015386404438512,
        28.42228327754699,
        50.62358986175097,
        29.08466460053544,
        51.555973416992764,
        57.02544892907925,
        50.59364438156093,
        50.10998069130442,
        96.79537871723569,
        42.40836248401792,
        18.309601856335007,
        57.073634862828236,
        47.19479027514069,
        57.02527541231729,
        51.52894661073718,
        49.987138071936165,
        57.073634862828236,
        50.78002444106489,
        49.37921875807115,
        55.78287084268518,
        41.1965484279528,
        141.12568402416954,
        17.650034652381752,
        51.53315380737922,
        50.66465124861979
      ]
    },
    "num_parameters": 2,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- beta_value: r = 0.497\n- beta_unfairness: r = 0.445",
  "previous_models": [
    "Specification: sum_tokens = token_self + token_opp\nfair_perc_self_calc = (token_self / sum_tokens) * 100.0 if sum_tokens > 0 else 50.0\nnon_linear_penalty_term = max(0.0, fair_perc_self_calc - split_perc_self)^2\nU_accept = (beta_value * split_perc_self) / (1.0 + beta_unfairness * non_linear_penalty_term)\nSummary: A computational model predicting responder acceptance utility using a ratio structure. The utility is calculated as the participant's proposed percentage share (split_perc_self) scaled by a value sensitivity parameter (beta_value) in the numerator, divided by one plus a non-linear penalty term scaled by an unfairness sensitivity parameter (beta_unfairness) in the denominator. The non-linear penalty term is defined as the squared positive difference between the calculated fair percentage share (based on token contributions) and the proposed percentage share. This term is zero for offers equal to or exceeding the fair share, penalizing only offers below the fair share. The use of a squared penalty term within the denominator is designed to create a mathematically distinct, non-linear influence profile for beta_unfairness compared to the linear influence of beta_value, thereby aiming to improve robust parameter identifiability for both learnable parameters.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 44.57767105900792\nOverall Accuracy: 0.6734\nGroup Accuracies:\n- Control: 0.7603\n- Cocaine: 0.5955\n\nParameter Recovery:\n- beta_value: r = 0.497\n- beta_unfairness: r = 0.445"
  ]
}