{
  "task_description": "In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "Okay, here are the improved instructions for the next run (Run 69), building on the analysis of previous attempts and maintaining the intense focus on achieving robust parameter identifiability for *both* learnable parameters.\n\nInstructions for Run 69 of 100:\n\nThe **unwavering primary objective remains achieving parameter recovery >= 0.7 for *all* learnable parameters**. This is the critical benchmark for model usability. While improved BIC (lower is better) and accuracy (higher is better) are valuable secondary goals, they must not come at the expense of robust parameter recovery.\n\nRun 68 explored a ratio structure (`U = (beta_value * split_perc_self) / (1.0 + beta_unfairness * NonLinearPenaltyTerm)`) using a squared positive difference as the non-linear penalty (`max(0.0, fair_perc_self_calc - split_perc_self)^2`). While this model showed a relatively good average BIC (44.58) and moderate accuracy (0.673), it failed the primary objective, yielding parameter recoveries of only r=0.497 for `beta_value` and r=0.445 for `beta_unfairness`. This result, combined with the history of other ratio models struggling with `beta_unfairness` recovery (e.g., Run 61, 63, 67), strongly suggests that putting the `beta_unfairness` term scaling a penalty in the denominator of a ratio structure, alongside `beta_value` scaling `split_perc_self` in the numerator, might inherently lead to identifiability issues due to correlated influences across offer ranges.\n\nThe challenge persists: how to mathematically disentangle the influence of sensitivity to the *value* of the offer (`beta_value` scaling `split_perc_self`) from the influence of sensitivity to *unfairness* (`beta_unfairness` scaling some measure of deviation from fairness)? Previous attempts using additive models (like Run 66) also failed parameter recovery when using relatively simple penalty forms.\n\nFor Run 69, let's return to an **additive utility structure**, but critically, use a **new and distinct functional form for the unfairness penalty term** that we hope will create a unique parameter landscape for `beta_unfairness`, allowing it to be disentangled from `beta_value`. Instead of a simple difference or the previous ratio penalties (`(Fair/Split) - 1`), let's define the penalty based on the **positive deviation from fairness *relative to the offered percentage***.\n\nProposed Model Structure: An additive model where utility is the value of the offer minus a penalty proportional to unfairness.\n`U = beta_value * split_perc_self - beta_unfairness * RatioBasedPenalty`\n\nHere, `RatioBasedPenalty` is calculated as the positive difference between the fair share and the proposed share, divided by the proposed share (plus a small epsilon to prevent division by zero). Specifically:\nCalculate `fair_perc_self_calc` handling the `sum_tokens == 0` case (defaulting to 50.0).\nCalculate `deviation = fair_perc_self_calc - split_perc_self`.\nDefine `positive_deviation = max(0.0, deviation)`. This ensures the penalty is only applied for offers below the fair share.\nDefine `safe_split_perc_self = split_perc_self + 1e-6` (using a small constant like 1e-6 to avoid division by zero, especially when `split_perc_self` is 0).\nDefine the `RatioBasedPenalty = positive_deviation / safe_split_perc_self`.\nFinally, `U_accept = beta_value * split_perc_self - beta_unfairness * RatioBasedPenalty`.\n\nThe theoretical rationale for this specific penalty term (`(Fair - Split) / Split`) is that it grows non-linearly and increasingly steeply as the offer (`split_perc_self`) gets smaller, when it's below the fair share. This creates a potentially different influence profile for `beta_unfairness` (scaling this rapidly changing penalty) compared to `beta_value` (scaling the linearly changing `split_perc_self`) across the range of possible offers. This is an attempt to find a penalty form whose impact, when scaled by `beta_unfairness` in an additive model, is less correlated with the scaled value term than previous attempts.\n\nDesign the model using the additive structure `U_accept = beta_value * split_perc_self - beta_unfairness * RatioBasedPenalty`, where `RatioBasedPenalty` is calculated as specified above.\n\nFocus on clearly defining the `RatioBasedPenalty` and articulating in the summary how its specific functional form (positive deviation divided by the offered percentage) within an additive utility structure is intended to help disentangle the influences of `beta_value` (scaling the linear value) and `beta_unfairness` (scaling this non-linear ratio penalty), thereby significantly improving robust parameter identifiability for *both* learnable parameters. Explain why this approach represents a departure from previous additive models and the recent ratio models.\n\n*   **Key Inputs & Calculated Variables:** Use `split_perc_self`, `token_self`, `token_opp` as data variables. Calculate `sum_tokens`, `fair_perc_self_calc` (handling `sum_tokens == 0`), `deviation`, `positive_deviation`, `safe_split_perc_self`, `ratio_penalty`, and `U_accept`. Include any other necessary intermediate variables.\n*   **Model Formula:** Define `U_accept` using the additive structure: `U_accept = beta_value * split_perc_self - beta_unfairness * ratio_penalty`. Include calculation steps for derived variables *before* the formula for `U_accept`. Use clear mathematical notation within the <MODEL> tags (only the formula). Ensure you handle potential division by zero explicitly with the small epsilon (e.g., 1e-6).\n*   **Learnable Parameters:** Exactly **2 learnable parameters**: `beta_value` and `beta_unfairness`. Choose descriptive, Python-safe names. Define clear, generous, finite numerical bounds. Non-negative bounds (e.g., `[0.0, 100.0]` for both) are theoretically appropriate and may aid recovery, but consider if allowing negative values for `beta_value` (risk-seeking for unfair offers) or `beta_unfairness` (liking unfairness) is theoretically plausible in this context. Let's stick with non-negative bounds for now unless the model strongly suggests otherwise.\n*   **Calculated Variables:** Include descriptions for *all* calculated variables used in the model (including `U_accept`, `sum_tokens`, `fair_perc_self_calc`, `deviation`, `positive_deviation`, `safe_split_perc_self`, and `ratio_penalty`) with `source: \"calculated\"`. Include descriptions for all data variables used as inputs (`token_self`, `token_opp`, `split_perc_self`) with `source: \"data\"`.\n*   **Variable Descriptions:** Provide variable descriptions in JSON format between <VARIABLES> tags for *all* variables in the <MODEL> formula. Include source, range (with inclusive flags), distribution (if applicable), and learnable status. Remember variable names must exactly match the model.\n*   **Target Variable:** Specify \"accept\" using <target_variable> tags.\n*   **Summary:** Provide a concise summary between <SUMMARY> tags. Describe the model's core idea (additive structure, value term, ratio-based penalty term). Crucially, explain *how the definition of the penalty term as the positive deviation from fair share percentage divided by the offered percentage* within the additive structure is specifically intended to improve robust parameter identifiability for *both* learnable parameters by creating mathematically distinct non-linear influences for `beta_unfairness` compared to the linear influence of `beta_value`. Explain how this builds on previous attempts by exploring a new combination of additive structure and a distinctly shaped penalty term.\n\nAvailable Data Variables:\n- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.\n(Note: Use `split_perc_self` for the participant's proposed percentage share percentage).\n\nPlease think through this step by step, then provide your model specification and variable descriptions. Remember that robust parameter identifiability for *both* learnable parameters (>= 0.7 recovery for both) is the absolute priority. Your goal is to find a structure where both parameters' influences are clearly distinguishable across the range of possible offers, leading to reliable estimates. Be creative in how you define and utilize the ratio-based penalty term or alternative interactions within an additive structure to maximize this distinction while remaining theoretically plausible. Find a model structure that truly shines in parameter recovery.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: Okay, here are the improved instructions for the next run (Run 69), building on the analysis of previous attempts and maintaining the intense focus on achieving robust parameter identifiability for *both* learnable parameters.\n\nInstructions for Run 69 of 100:\n\nThe **unwavering primary objective remains achieving parameter recovery >= 0.7 for *all* learnable parameters**. This is the critical benchmark for model usability. While improved BIC (lower is better) and accuracy (higher is better) are valuable secondary goals, they must not come at the expense of robust parameter recovery.\n\nRun 68 explored a ratio structure (`U = (beta_value * split_perc_self) / (1.0 + beta_unfairness * NonLinearPenaltyTerm)`) using a squared positive difference as the non-linear penalty (`max(0.0, fair_perc_self_calc - split_perc_self)^2`). While this model showed a relatively good average BIC (44.58) and moderate accuracy (0.673), it failed the primary objective, yielding parameter recoveries of only r=0.497 for `beta_value` and r=0.445 for `beta_unfairness`. This result, combined with the history of other ratio models struggling with `beta_unfairness` recovery (e.g., Run 61, 63, 67), strongly suggests that putting the `beta_unfairness` term scaling a penalty in the denominator of a ratio structure, alongside `beta_value` scaling `split_perc_self` in the numerator, might inherently lead to identifiability issues due to correlated influences across offer ranges.\n\nThe challenge persists: how to mathematically disentangle the influence of sensitivity to the *value* of the offer (`beta_value` scaling `split_perc_self`) from the influence of sensitivity to *unfairness* (`beta_unfairness` scaling some measure of deviation from fairness)? Previous attempts using additive models (like Run 66) also failed parameter recovery when using relatively simple penalty forms.\n\nFor Run 69, let's return to an **additive utility structure**, but critically, use a **new and distinct functional form for the unfairness penalty term** that we hope will create a unique parameter landscape for `beta_unfairness`, allowing it to be disentangled from `beta_value`. Instead of a simple difference or the previous ratio penalties (`(Fair/Split) - 1`), let's define the penalty based on the **positive deviation from fairness *relative to the offered percentage***.\n\nProposed Model Structure: An additive model where utility is the value of the offer minus a penalty proportional to unfairness.\n`U = beta_value * split_perc_self - beta_unfairness * RatioBasedPenalty`\n\nHere, `RatioBasedPenalty` is calculated as the positive difference between the fair share and the proposed share, divided by the proposed share (plus a small epsilon to prevent division by zero). Specifically:\nCalculate `fair_perc_self_calc` handling the `sum_tokens == 0` case (defaulting to 50.0).\nCalculate `deviation = fair_perc_self_calc - split_perc_self`.\nDefine `positive_deviation = max(0.0, deviation)`. This ensures the penalty is only applied for offers below the fair share.\nDefine `safe_split_perc_self = split_perc_self + 1e-6` (using a small constant like 1e-6 to avoid division by zero, especially when `split_perc_self` is 0).\nDefine the `RatioBasedPenalty = positive_deviation / safe_split_perc_self`.\nFinally, `U_accept = beta_value * split_perc_self - beta_unfairness * RatioBasedPenalty`.\n\nThe theoretical rationale for this specific penalty term (`(Fair - Split) / Split`) is that it grows non-linearly and increasingly steeply as the offer (`split_perc_self`) gets smaller, when it's below the fair share. This creates a potentially different influence profile for `beta_unfairness` (scaling this rapidly changing penalty) compared to `beta_value` (scaling the linearly changing `split_perc_self`) across the range of possible offers. This is an attempt to find a penalty form whose impact, when scaled by `beta_unfairness` in an additive model, is less correlated with the scaled value term than previous attempts.\n\nDesign the model using the additive structure `U_accept = beta_value * split_perc_self - beta_unfairness * RatioBasedPenalty`, where `RatioBasedPenalty` is calculated as specified above.\n\nFocus on clearly defining the `RatioBasedPenalty` and articulating in the summary how its specific functional form (positive deviation divided by the offered percentage) within an additive utility structure is intended to help disentangle the influences of `beta_value` (scaling the linear value) and `beta_unfairness` (scaling this non-linear ratio penalty), thereby significantly improving robust parameter identifiability for *both* learnable parameters. Explain why this approach represents a departure from previous additive models and the recent ratio models.\n\n*   **Key Inputs & Calculated Variables:** Use `split_perc_self`, `token_self`, `token_opp` as data variables. Calculate `sum_tokens`, `fair_perc_self_calc` (handling `sum_tokens == 0`), `deviation`, `positive_deviation`, `safe_split_perc_self`, `ratio_penalty`, and `U_accept`. Include any other necessary intermediate variables.\n*   **Model Formula:** Define `U_accept` using the additive structure: `U_accept = beta_value * split_perc_self - beta_unfairness * ratio_penalty`. Include calculation steps for derived variables *before* the formula for `U_accept`. Use clear mathematical notation within the <MODEL> tags (only the formula). Ensure you handle potential division by zero explicitly with the small epsilon (e.g., 1e-6).\n*   **Learnable Parameters:** Exactly **2 learnable parameters**: `beta_value` and `beta_unfairness`. Choose descriptive, Python-safe names. Define clear, generous, finite numerical bounds. Non-negative bounds (e.g., `[0.0, 100.0]` for both) are theoretically appropriate and may aid recovery, but consider if allowing negative values for `beta_value` (risk-seeking for unfair offers) or `beta_unfairness` (liking unfairness) is theoretically plausible in this context. Let's stick with non-negative bounds for now unless the model strongly suggests otherwise.\n*   **Calculated Variables:** Include descriptions for *all* calculated variables used in the model (including `U_accept`, `sum_tokens`, `fair_perc_self_calc`, `deviation`, `positive_deviation`, `safe_split_perc_self`, and `ratio_penalty`) with `source: \"calculated\"`. Include descriptions for all data variables used as inputs (`token_self`, `token_opp`, `split_perc_self`) with `source: \"data\"`.\n*   **Variable Descriptions:** Provide variable descriptions in JSON format between <VARIABLES> tags for *all* variables in the <MODEL> formula. Include source, range (with inclusive flags), distribution (if applicable), and learnable status. Remember variable names must exactly match the model.\n*   **Target Variable:** Specify \"accept\" using <target_variable> tags.\n*   **Summary:** Provide a concise summary between <SUMMARY> tags. Describe the model's core idea (additive structure, value term, ratio-based penalty term). Crucially, explain *how the definition of the penalty term as the positive deviation from fair share percentage divided by the offered percentage* within the additive structure is specifically intended to improve robust parameter identifiability for *both* learnable parameters by creating mathematically distinct non-linear influences for `beta_unfairness` compared to the linear influence of `beta_value`. Explain how this builds on previous attempts by exploring a new combination of additive structure and a distinctly shaped penalty term.\n\nAvailable Data Variables:\n- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.\n(Note: Use `split_perc_self` for the participant's proposed percentage share percentage).\n\nPlease think through this step by step, then provide your model specification and variable descriptions. Remember that robust parameter identifiability for *both* learnable parameters (>= 0.7 recovery for both) is the absolute priority. Your goal is to find a structure where both parameters' influences are clearly distinguishable across the range of possible offers, leading to reliable estimates. Be creative in how you define and utilize the ratio-based penalty term or alternative interactions within an additive structure to maximize this distinction while remaining theoretically plausible. Find a model structure that truly shines in parameter recovery.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<MODEL>\nsum_tokens = token_self + token_opp\nfair_perc_self_calc = (token_self / sum_tokens) * 100.0 if sum_tokens > 0 else 50.0\ndeviation = fair_perc_self_calc - split_perc_self\npositive_deviation = max(0.0, deviation)\nsafe_split_perc_self = split_perc_self + 1e-6\nratio_penalty = positive_deviation / safe_split_perc_self\nU_accept = beta_value * split_perc_self - beta_unfairness * ratio_penalty\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The proposed share for the participant (in %)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"sum_tokens\": {\n      \"description\": \"Total number of tokens found by participant and opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fair_perc_self_calc\": {\n      \"description\": \"Calculated fair percentage for the participant based on token contribution. Defaults to 50% if total tokens is zero.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"deviation\": {\n      \"description\": \"Difference between the calculated fair percentage and the proposed percentage for the participant.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"positive_deviation\": {\n      \"description\": \"The positive part of the deviation, representing how much the proposed share is below the fair share.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n     \"safe_split_perc_self\": {\n      \"description\": \"The proposed share percentage for the participant, with a small epsilon added to prevent division by zero.\",\n      \"range\": {\n        \"min\": 1e-6,\n        \"max\": 100.000001\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"ratio_penalty\": {\n      \"description\": \"The penalty term, calculated as the positive deviation from fair share divided by the safe proposed share percentage.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_value\": {\n      \"description\": \"Sensitivity parameter to the proposed value percentage.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_unfairness\": {\n      \"description\": \"Sensitivity parameter to the ratio-based unfairness penalty.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U_accept\": {\n      \"description\": \"Utility of accepting the proposed offer.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nAn additive utility model for responder decisions. The utility of accepting an offer is calculated as the participant's proposed percentage scaled by a 'value' sensitivity parameter (beta_value), minus a penalty scaled by an 'unfairness' sensitivity parameter (beta_unfairness). The penalty is uniquely defined as the positive deviation from the calculated fair share percentage divided by the proposed share percentage (plus a small epsilon). This specific ratio-based penalty term, which grows non-linearly and steeply for low offers below the fair share, is hypothesized to create a mathematically distinct influence profile for the beta_unfairness parameter compared to the linear influence of beta_value. This distinction in influence across the range of offers is intended to improve the robust identifiability of both learnable parameters (beta_value and beta_unfairness) within the additive structure, addressing a key limitation of previous additive and ratio models. The model predicts acceptance based on this calculated utility, where higher utility corresponds to a higher probability of acceptance via a logistic function.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['beta_value', 'beta_unfairness']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                sum_tokens = token_self + token_opp\nfair_perc_self_calc = (token_self / sum_tokens) * 100.0 if sum_tokens > 0 else 50.0\ndeviation = fair_perc_self_calc - split_perc_self\npositive_deviation = max(0.0, deviation)\nsafe_split_perc_self = split_perc_self + 1e-6\nratio_penalty = positive_deviation / safe_split_perc_self\nU_accept = beta_value * split_perc_self - beta_unfairness * ratio_penalty\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The proposed share for the participant (in %)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"sum_tokens\": {\n      \"description\": \"Total number of tokens found by participant and opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fair_perc_self_calc\": {\n      \"description\": \"Calculated fair percentage for the participant based on token contribution. Defaults to 50% if total tokens is zero.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"deviation\": {\n      \"description\": \"Difference between the calculated fair percentage and the proposed percentage for the participant.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"positive_deviation\": {\n      \"description\": \"The positive part of the deviation, representing how much the proposed share is below the fair share.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"safe_split_perc_self\": {\n      \"description\": \"The proposed share percentage for the participant, with a small epsilon added to prevent division by zero.\",\n      \"range\": {\n        \"min\": 1e-06,\n        \"max\": 100.000001,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"ratio_penalty\": {\n      \"description\": \"The penalty term, calculated as the positive deviation from fair share divided by the safe proposed share percentage.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_value\": {\n      \"description\": \"Sensitivity parameter to the proposed value percentage.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_unfairness\": {\n      \"description\": \"Sensitivity parameter to the ratio-based unfairness penalty.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U_accept\": {\n      \"description\": \"Utility of accepting the proposed offer.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, beta_value=1, beta_unfairness=1):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        split_perc_self = trial.get(\"splitperc_self\", 0)\n\n        sum_tokens = token_self + token_opp\n        fair_perc_self_calc = (token_self / sum_tokens) * 100.0 if sum_tokens > 0 else 50.0\n        deviation = fair_perc_self_calc - split_perc_self\n        positive_deviation = max(0.0, deviation)\n        safe_split_perc_self = split_perc_self + 1e-6\n        ratio_penalty = positive_deviation / safe_split_perc_self\n        U_accept = beta_value * split_perc_self - beta_unfairness * ratio_penalty\n\n        model_predictions.append(U_accept)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n```",
      "timestamp": 1746103203.2544808
    }
  ],
  "learnable_parameters": {
    "beta_value": {
      "description": "Sensitivity parameter to the proposed value percentage.",
      "range": {
        "min": 0.0,
        "max": 100.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta_unfairness": {
      "description": "Sensitivity parameter to the ratio-based unfairness penalty.",
      "range": {
        "min": 0.0,
        "max": 100.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "sum_tokens = token_self + token_opp\nfair_perc_self_calc = (token_self / sum_tokens) * 100.0 if sum_tokens > 0 else 50.0\ndeviation = fair_perc_self_calc - split_perc_self\npositive_deviation = max(0.0, deviation)\nsafe_split_perc_self = split_perc_self + 1e-6\nratio_penalty = positive_deviation / safe_split_perc_self\nU_accept = beta_value * split_perc_self - beta_unfairness * ratio_penalty",
  "variable_descriptions": {
    "token_self": {
      "description": "Number of tokens found by the participant",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "split_perc_self": {
      "description": "The proposed share for the participant (in %)",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "sum_tokens": {
      "description": "Total number of tokens found by participant and opponent",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "fair_perc_self_calc": {
      "description": "Calculated fair percentage for the participant based on token contribution. Defaults to 50% if total tokens is zero.",
      "range": {
        "min": 0.0,
        "max": 100.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "deviation": {
      "description": "Difference between the calculated fair percentage and the proposed percentage for the participant.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "positive_deviation": {
      "description": "The positive part of the deviation, representing how much the proposed share is below the fair share.",
      "range": {
        "min": 0.0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "safe_split_perc_self": {
      "description": "The proposed share percentage for the participant, with a small epsilon added to prevent division by zero.",
      "range": {
        "min": 1e-06,
        "max": 100.000001,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "ratio_penalty": {
      "description": "The penalty term, calculated as the positive deviation from fair share divided by the safe proposed share percentage.",
      "range": {
        "min": 0.0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "beta_value": {
      "description": "Sensitivity parameter to the proposed value percentage.",
      "range": {
        "min": 0.0,
        "max": 100.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta_unfairness": {
      "description": "Sensitivity parameter to the ratio-based unfairness penalty.",
      "range": {
        "min": 0.0,
        "max": 100.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "U_accept": {
      "description": "Utility of accepting the proposed offer.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "An additive utility model for responder decisions. The utility of accepting an offer is calculated as the participant's proposed percentage scaled by a 'value' sensitivity parameter (beta_value), minus a penalty scaled by an 'unfairness' sensitivity parameter (beta_unfairness). The penalty is uniquely defined as the positive deviation from the calculated fair share percentage divided by the proposed share percentage (plus a small epsilon). This specific ratio-based penalty term, which grows non-linearly and steeply for low offers below the fair share, is hypothesized to create a mathematically distinct influence profile for the beta_unfairness parameter compared to the linear influence of beta_value. This distinction in influence across the range of offers is intended to improve the robust identifiability of both learnable parameters (beta_value and beta_unfairness) within the additive structure, addressing a key limitation of previous additive and ratio models. The model predicts acceptance based on this calculated utility, where higher utility corresponds to a higher probability of acceptance via a logistic function.",
  "target_variable": "accept",
  "full_reasoning": "<MODEL>\nsum_tokens = token_self + token_opp\nfair_perc_self_calc = (token_self / sum_tokens) * 100.0 if sum_tokens > 0 else 50.0\ndeviation = fair_perc_self_calc - split_perc_self\npositive_deviation = max(0.0, deviation)\nsafe_split_perc_self = split_perc_self + 1e-6\nratio_penalty = positive_deviation / safe_split_perc_self\nU_accept = beta_value * split_perc_self - beta_unfairness * ratio_penalty\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The proposed share for the participant (in %)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"sum_tokens\": {\n      \"description\": \"Total number of tokens found by participant and opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fair_perc_self_calc\": {\n      \"description\": \"Calculated fair percentage for the participant based on token contribution. Defaults to 50% if total tokens is zero.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"deviation\": {\n      \"description\": \"Difference between the calculated fair percentage and the proposed percentage for the participant.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"positive_deviation\": {\n      \"description\": \"The positive part of the deviation, representing how much the proposed share is below the fair share.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n     \"safe_split_perc_self\": {\n      \"description\": \"The proposed share percentage for the participant, with a small epsilon added to prevent division by zero.\",\n      \"range\": {\n        \"min\": 1e-6,\n        \"max\": 100.000001\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"ratio_penalty\": {\n      \"description\": \"The penalty term, calculated as the positive deviation from fair share divided by the safe proposed share percentage.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_value\": {\n      \"description\": \"Sensitivity parameter to the proposed value percentage.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_unfairness\": {\n      \"description\": \"Sensitivity parameter to the ratio-based unfairness penalty.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U_accept\": {\n      \"description\": \"Utility of accepting the proposed offer.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nAn additive utility model for responder decisions. The utility of accepting an offer is calculated as the participant's proposed percentage scaled by a 'value' sensitivity parameter (beta_value), minus a penalty scaled by an 'unfairness' sensitivity parameter (beta_unfairness). The penalty is uniquely defined as the positive deviation from the calculated fair share percentage divided by the proposed share percentage (plus a small epsilon). This specific ratio-based penalty term, which grows non-linearly and steeply for low offers below the fair share, is hypothesized to create a mathematically distinct influence profile for the beta_unfairness parameter compared to the linear influence of beta_value. This distinction in influence across the range of offers is intended to improve the robust identifiability of both learnable parameters (beta_value and beta_unfairness) within the additive structure, addressing a key limitation of previous additive and ratio models. The model predicts acceptance based on this calculated utility, where higher utility corresponds to a higher probability of acceptance via a logistic function.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: sum_tokens = token_self + token_opp\nfair_perc_self_calc = (token_self / sum_tokens) * 100.0 if sum_tokens > 0 else 50.0\ndeviation = fair_perc_self_calc - split_perc_self\npositive_deviation = max(0.0, deviation)\nsafe_split_perc_self = split_perc_self + 1e-6\nratio_penalty = positive_deviation / safe_split_perc_self\nU_accept = beta_value * split_perc_self - beta_unfairness * ratio_penalty\nSummary: An additive utility model for responder decisions. The utility of accepting an offer is calculated as the participant's proposed percentage scaled by a 'value' sensitivity parameter (beta_value), minus a penalty scaled by an 'unfairness' sensitivity parameter (beta_unfairness). The penalty is uniquely defined as the positive deviation from the calculated fair share percentage divided by the proposed share percentage (plus a small epsilon). This specific ratio-based penalty term, which grows non-linearly and steeply for low offers below the fair share, is hypothesized to create a mathematically distinct influence profile for the beta_unfairness parameter compared to the linear influence of beta_value. This distinction in influence across the range of offers is intended to improve the robust identifiability of both learnable parameters (beta_value and beta_unfairness) within the additive structure, addressing a key limitation of previous additive and ratio models. The model predicts acceptance based on this calculated utility, where higher utility corresponds to a higher probability of acceptance via a logistic function.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, beta_value=1, beta_unfairness=1):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        split_perc_self = trial.get(\"splitperc_self\", 0)\n\n        sum_tokens = token_self + token_opp\n        fair_perc_self_calc = (token_self / sum_tokens) * 100.0 if sum_tokens > 0 else 50.0\n        deviation = fair_perc_self_calc - split_perc_self\n        positive_deviation = max(0.0, deviation)\n        safe_split_perc_self = split_perc_self + 1e-6\n        ratio_penalty = positive_deviation / safe_split_perc_self\n        U_accept = beta_value * split_perc_self - beta_unfairness * ratio_penalty\n\n        model_predictions.append(U_accept)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.6831501831501832,
  "group_accuracies": {
    "Control": 0.7441860465116279,
    "Cocaine": 0.6284722222222222
  },
  "group_parameter_averages": {
    "Control": {
      "beta_value": 36.44564347198162,
      "beta_unfairness": 64.00673819236735
    },
    "Cocaine": {
      "beta_value": 30.29844342110902,
      "beta_unfairness": 42.541819852920774
    }
  },
  "fitting_results": [
    {
      "beta_value": 0.004911771721829356,
      "beta_unfairness": 92.2245245397584,
      "success": true,
      "log_likelihood": -25.773514299881818,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 95.99901454755404,
      "beta_unfairness": 18.244964824837894,
      "success": true,
      "log_likelihood": -414.46531673712843,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 1.6200680635975224,
      "beta_unfairness": 48.14090444514083,
      "success": true,
      "log_likelihood": -92.66580286714014,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 1.9583821180261687,
      "beta_unfairness": 96.01452788476817,
      "success": true,
      "log_likelihood": -93.48803282939892,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 20.52880539698412,
      "beta_unfairness": 84.71366714993222,
      "success": true,
      "log_likelihood": -391.439465807088,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 1.2273276478496618,
      "beta_unfairness": 52.35525093650128,
      "success": true,
      "log_likelihood": -69.7448325652522,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 89.46403773394972,
      "beta_unfairness": 56.21020630295468,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 32.80068817359355,
      "beta_unfairness": 33.99956934138094,
      "success": true,
      "log_likelihood": -276.31021115688566,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 74.60872034218056,
      "beta_unfairness": 68.00887047191225,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 83.86435966223846,
      "beta_unfairness": 92.55452216741824,
      "success": true,
      "log_likelihood": -506.56872045729034,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 15.004555662184465,
      "beta_unfairness": 83.7849994565848,
      "success": true,
      "log_likelihood": -391.43946580708797,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 79.30015629397586,
      "beta_unfairness": 64.64267645444937,
      "success": true,
      "log_likelihood": -736.8272297576949,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.1111111111111111,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 0.44428988931801594,
      "beta_unfairness": 33.53490678199031,
      "success": true,
      "log_likelihood": -25.60990564120019,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 73.53238516289392,
      "beta_unfairness": 28.664185748105066,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 14.888759517671046,
      "beta_unfairness": 3.6405642302790975,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 43.56162793702891,
      "beta_unfairness": 74.52616030279107,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 100.0,
      "beta_unfairness": 58.18456021232142,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 45.10829931442893,
      "beta_unfairness": 83.79529638054194,
      "success": true,
      "log_likelihood": -115.12914141026522,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 48.2909172549836,
      "beta_unfairness": 89.25034417702744,
      "success": true,
      "log_likelihood": -92.1034014961182,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 62.839841476989754,
      "beta_unfairness": 53.71808059901814,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 14.061566630057376,
      "beta_unfairness": 78.57775540690538,
      "success": true,
      "log_likelihood": -299.33606208692606,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 46.51499383144018,
      "beta_unfairness": 88.02477247266329,
      "success": true,
      "log_likelihood": -115.00235908827702,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 14.804175294590326,
      "beta_unfairness": 82.04601292408424,
      "success": true,
      "log_likelihood": -460.5170185972094,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 86.77968440584742,
      "beta_unfairness": 29.966193005244214,
      "success": true,
      "log_likelihood": -391.43946580708797,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 13.522463665166452,
      "beta_unfairness": 61.59115255657258,
      "success": true,
      "log_likelihood": -345.387763947007,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 0.0737753858577515,
      "beta_unfairness": 2.2445182833910895,
      "success": true,
      "log_likelihood": -14.203614701551444,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 1.9981650523384187,
      "beta_unfairness": 93.94132895771172,
      "success": true,
      "log_likelihood": -46.299778545578434,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 62.15700744827824,
      "beta_unfairness": 88.90559139214227,
      "success": true,
      "log_likelihood": -598.6721241774521,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.2777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 19.319425108090815,
      "beta_unfairness": 24.406205014179505,
      "success": true,
      "log_likelihood": -92.10340371656179,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 8.736196989351347,
      "beta_unfairness": 82.90880724526971,
      "success": true,
      "log_likelihood": -138.15524110262473,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 27.223011815074337,
      "beta_unfairness": 42.258178342836516,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 0.0049302486801912635,
      "beta_unfairness": 89.67152031669391,
      "success": true,
      "log_likelihood": -25.772778831859565,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 75.41642523255227,
      "beta_unfairness": 70.73803426915781,
      "success": true,
      "log_likelihood": -483.5428695272498,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 67.30856290661575,
      "beta_unfairness": 79.4315441697401,
      "success": true,
      "log_likelihood": -506.56872045729034,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 60.236039565921516,
      "beta_unfairness": 92.5196850072518,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 41.26863311347174,
      "beta_unfairness": 65.95368365748531,
      "success": true,
      "log_likelihood": -299.3360620869261,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 8.637665169318565,
      "beta_unfairness": 38.4257068971399,
      "success": true,
      "log_likelihood": -184.2068074367241,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 24.13256586467008,
      "beta_unfairness": 84.00814056791786,
      "success": true,
      "log_likelihood": -345.3877865201631,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 13.375357631655817,
      "beta_unfairness": 99.1991034151394,
      "success": true,
      "log_likelihood": -207.2326561463208,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 41.92517792486166,
      "beta_unfairness": 70.47481686099816,
      "success": true,
      "log_likelihood": -69.07755278652135,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 28.781718129263993,
      "beta_unfairness": 79.50709897314016,
      "success": true,
      "log_likelihood": -276.3102111568857,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 7.069622168542926,
      "beta_unfairness": 76.52914637464829,
      "success": true,
      "log_likelihood": -529.5392031039449,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 18.768357746392233,
      "beta_unfairness": 14.751963753769134,
      "success": true,
      "log_likelihood": -23.02585092644049,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 0.07774479487460904,
      "beta_unfairness": 2.4175834869458632,
      "success": true,
      "log_likelihood": -13.647261369884628,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 4.280470869880346,
      "beta_unfairness": 18.795440299121495,
      "success": true,
      "log_likelihood": -253.2843614903676,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 6.423740713646934,
      "beta_unfairness": 27.867651808099183,
      "success": true,
      "log_likelihood": -161.1809565105706,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 1.7717748086298446,
      "beta_unfairness": 82.51036764660326,
      "success": true,
      "log_likelihood": -88.10552416716729,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.02327975076803551,
      "beta_unfairness": 1.5147588326732795,
      "success": true,
      "log_likelihood": -19.44144212192053,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.04169984309150073,
      "beta_unfairness": 2.7491323293093117,
      "success": true,
      "log_likelihood": -15.570072492340103,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 1.7503809117359528,
      "beta_unfairness": 88.27053009151011,
      "success": true,
      "log_likelihood": -223.668856576797,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 13.389159716635449,
      "beta_unfairness": 72.78312443980563,
      "success": true,
      "log_likelihood": -230.2585092968048,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.0006672803251750867,
      "beta_unfairness": 3.5395279456210464,
      "success": true,
      "log_likelihood": -11.881111546463531,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 12.151398665780356,
      "beta_unfairness": 46.16121686016776,
      "success": true,
      "log_likelihood": -322.36191305964167,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 29.359724445143108,
      "beta_unfairness": 39.62878157935741,
      "success": true,
      "log_likelihood": -345.3877639470071,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 96.43740832086323,
      "beta_unfairness": 10.646606989521178,
      "success": true,
      "log_likelihood": -506.56872045729034,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 89.36980343490339,
      "beta_unfairness": 37.77971514394781,
      "success": true,
      "log_likelihood": -552.6204223173712,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3333333333333333,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 59.86481966791265,
      "beta_unfairness": 31.97071311487226,
      "success": true,
      "log_likelihood": -598.672124177452,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.2777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 76.54601423957163,
      "beta_unfairness": 95.41897637599392,
      "success": true,
      "log_likelihood": -92.1034037165618,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 32.975737839984774,
      "beta_unfairness": 20.525254508512713,
      "success": true,
      "log_likelihood": -736.8272297576949,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.1111111111111111,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 73.5080454966527,
      "beta_unfairness": 15.446171720322987,
      "success": true,
      "log_likelihood": -161.18095650668326,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 3.9791760934407545,
      "beta_unfairness": 99.52861165301262,
      "success": true,
      "log_likelihood": -211.0376332227238,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.05534069712371931,
      "beta_unfairness": 2.220215132729759,
      "success": true,
      "log_likelihood": -15.8731655319121,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 12.528985531158455,
      "beta_unfairness": 96.54778141321067,
      "success": true,
      "log_likelihood": -690.6777439658979,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.16666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 7.845452394196506,
      "beta_unfairness": 42.81960590054676,
      "success": true,
      "log_likelihood": -437.491167667167,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 13.858872368014296,
      "beta_unfairness": 60.58337012341783,
      "success": true,
      "log_likelihood": -575.6462732474117,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 92.52584840260933,
      "beta_unfairness": 38.76803765383345,
      "success": true,
      "log_likelihood": -368.41361487704745,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 31.17693275148985,
      "beta_unfairness": 39.200326534347454,
      "success": true,
      "log_likelihood": -69.07755278652131,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 15.338059880837614,
      "beta_unfairness": 34.982820718227224,
      "success": true,
      "log_likelihood": -92.10340515922131,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.07113830171752657,
      "beta_unfairness": 2.180525486192727,
      "success": true,
      "log_likelihood": -14.527208174905581,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 60.683520230393384,
      "beta_unfairness": 37.447704749417134,
      "success": true,
      "log_likelihood": -69.07755278652137,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 47.23797874838725,
      "beta_unfairness": 96.51381457057256,
      "success": true,
      "log_likelihood": -713.801416399488,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.1388888888888889,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 19.24841578811718,
      "beta_unfairness": 94.78873366011209,
      "success": true,
      "log_likelihood": -644.723826037533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.2222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 13.900617015936387,
      "beta_unfairness": 37.96398106848777,
      "success": true,
      "log_likelihood": -345.3877665738298,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 33.347536304096955,
      "beta_unfairness": 33.236701362848905,
      "success": true,
      "log_likelihood": -184.20680743672386,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 83.87417981908666,
      "beta_unfairness": 19.919093148890145,
      "success": true,
      "log_likelihood": -414.4653167371285,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 84.06641534479398,
      "beta_unfairness": 98.1252261664756,
      "success": true,
      "log_likelihood": -253.28436022684528,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 73.28009654675773,
      "beta_unfairness": 93.4444108652205,
      "success": true,
      "log_likelihood": -46.051701856480875,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 66.052631768899,
      "beta_unfairness": 49.02941871576152,
      "success": true,
      "log_likelihood": -782.8789316177758,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.05555555555555555,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 47.71314739199376,
      "beta_unfairness": 49.94151105415266,
      "success": true,
      "log_likelihood": -322.36191301696664,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.001106765230859011,
      "beta_unfairness": 7.650457429355013,
      "success": true,
      "log_likelihood": -7.176322609279894,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 68.73543394576404,
      "beta_unfairness": 94.26110365220939,
      "success": true,
      "log_likelihood": -391.439465807088,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 66.55356676506233,
      "beta_unfairness": 11.628626960274403,
      "success": true,
      "log_likelihood": -69.07755278652131,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 16.45938124032823,
      "beta_unfairness": 47.60075389815761,
      "success": true,
      "log_likelihood": -689.2857917629128,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.16666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 27.47238640329536,
      "beta_unfairness": 78.07227020887562,
      "success": true,
      "log_likelihood": -368.4136148770475,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 49.16178833431103,
      "beta_unfairness": 9.664273719691852,
      "success": true,
      "log_likelihood": -322.36191301696664,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.01836701407200529,
      "beta_unfairness": 9.915034737457024,
      "success": true,
      "log_likelihood": -6.7976811510675725,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 7.461295284245633,
      "beta_unfairness": 36.47775136885102,
      "success": true,
      "log_likelihood": -230.25850175042913,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.01214698477321545,
      "beta_unfairness": 3.811680456287571,
      "success": true,
      "log_likelihood": -12.475576704355209,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 11.69658542446876,
      "beta_unfairness": 26.445261709016332,
      "success": true,
      "log_likelihood": -23.025865045488374,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 1.9617116700157544,
      "beta_unfairness": 91.17041954065374,
      "success": true,
      "log_likelihood": -89.97872339302005,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.035298202215726986,
      "beta_unfairness": 0.04227610952484803,
      "success": true,
      "log_likelihood": -20.518909602294006,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "beta_value": {
        "r": 0.22272139457293694,
        "p": 0.025929413257953143
      },
      "beta_unfairness": {
        "r": 0.09798684127619112,
        "p": 0.33210356261608026
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 479.63605495144463,
  "bic_Control": 411.0127295769417,
  "bic_Cocaine": 541.1111172661035,
  "bic_results": {
    "average_bic": 479.63605495144463,
    "individual_bics": [
      58.71406647667585,
      836.0976713511691,
      192.4986436111925,
      194.14310353571005,
      790.0459694910883,
      146.6567030074166,
      7.167037869712219,
      559.7874601906835,
      7.167037869712219,
      1020.3044787914929,
      790.0459694910882,
      1480.821497392302,
      58.3868491593126,
      7.167037869712219,
      7.167037869712219,
      7.167037869712219,
      7.167037869712219,
      237.42532069744266,
      191.3738408691486,
      7.167037869712219,
      605.8391620507643,
      237.17175605346625,
      928.201075071331,
      790.0459694910882,
      697.9425657709262,
      35.57426728001511,
      99.76659496806909,
      1204.5112862318165,
      191.3738453100358,
      283.4775200821617,
      7.167037869712219,
      58.71259554063135,
      974.2527769314119,
      1020.3044787914929,
      7.167037869712219,
      605.8391620507645,
      375.5806527503604,
      697.9426109172384,
      421.63235016955383,
      145.32214344995492,
      559.7874601906836,
      1066.245444084802,
      53.2187397297932,
      34.461560616681474,
      513.7357608576474,
      329.52895089805344,
      183.3780862112468,
      46.04992212075328,
      38.30718286159242,
      454.5047510305062,
      467.6840564705218,
      30.929260969839284,
      651.8908639961955,
      697.9425657709264,
      1020.3044787914929,
      1112.4078825116546,
      1204.5112862318163,
      191.37384531003582,
      1480.821497392302,
      329.52895089027874,
      429.2423043223598,
      38.91336894073642,
      1388.522525808708,
      882.1493732112463,
      1158.4595843717357,
      743.9942676310071,
      145.32214344995484,
      191.37384819535484,
      36.22145422672338,
      145.32214344995495,
      1434.7698706758881,
      1296.614689951978,
      697.9425710245719,
      375.58065275035995,
      836.0976713511692,
      513.7357583306028,
      99.27044158987397,
      1572.9249011124639,
      651.8908639108455,
      21.519683095472008,
      790.0459694910883,
      145.32214344995484,
      1385.7386214027379,
      743.9942676310072,
      651.8908639108455,
      20.762400179047365,
      467.6840413777705,
      32.118191285622636,
      53.218767967888965,
      187.1244846629523,
      48.20485708150023
    ],
    "group_enabled": true,
    "group_bics": {
      "Control": [
        58.71406647667585,
        836.0976713511691,
        192.4986436111925,
        194.14310353571005,
        790.0459694910883,
        146.6567030074166,
        7.167037869712219,
        559.7874601906835,
        7.167037869712219,
        1020.3044787914929,
        790.0459694910882,
        1480.821497392302,
        58.3868491593126,
        7.167037869712219,
        7.167037869712219,
        7.167037869712219,
        7.167037869712219,
        237.42532069744266,
        191.3738408691486,
        7.167037869712219,
        605.8391620507643,
        237.17175605346625,
        928.201075071331,
        790.0459694910882,
        697.9425657709262,
        35.57426728001511,
        99.76659496806909,
        1204.5112862318165,
        191.3738453100358,
        283.4775200821617,
        7.167037869712219,
        58.71259554063135,
        974.2527769314119,
        1020.3044787914929,
        7.167037869712219,
        605.8391620507645,
        375.5806527503604,
        697.9426109172384,
        421.63235016955383,
        145.32214344995492,
        559.7874601906836,
        1066.245444084802,
        53.2187397297932
      ],
      "Cocaine": [
        34.461560616681474,
        513.7357608576474,
        329.52895089805344,
        183.3780862112468,
        46.04992212075328,
        38.30718286159242,
        454.5047510305062,
        467.6840564705218,
        30.929260969839284,
        651.8908639961955,
        697.9425657709264,
        1020.3044787914929,
        1112.4078825116546,
        1204.5112862318163,
        191.37384531003582,
        1480.821497392302,
        329.52895089027874,
        429.2423043223598,
        38.91336894073642,
        1388.522525808708,
        882.1493732112463,
        1158.4595843717357,
        743.9942676310071,
        145.32214344995484,
        191.37384819535484,
        36.22145422672338,
        145.32214344995495,
        1434.7698706758881,
        1296.614689951978,
        697.9425710245719,
        375.58065275035995,
        836.0976713511692,
        513.7357583306028,
        99.27044158987397,
        1572.9249011124639,
        651.8908639108455,
        21.519683095472008,
        790.0459694910883,
        145.32214344995484,
        1385.7386214027379,
        743.9942676310072,
        651.8908639108455,
        20.762400179047365,
        467.6840413777705,
        32.118191285622636,
        53.218767967888965,
        187.1244846629523,
        48.20485708150023
      ]
    },
    "num_parameters": 2,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- beta_value: r = 0.223\n- beta_unfairness: r = 0.098",
  "previous_models": [
    "Specification: sum_tokens = token_self + token_opp\nfair_perc_self_calc = (token_self / sum_tokens) * 100.0 if sum_tokens > 0 else 50.0\ndeviation = fair_perc_self_calc - split_perc_self\npositive_deviation = max(0.0, deviation)\nsafe_split_perc_self = split_perc_self + 1e-6\nratio_penalty = positive_deviation / safe_split_perc_self\nU_accept = beta_value * split_perc_self - beta_unfairness * ratio_penalty\nSummary: An additive utility model for responder decisions. The utility of accepting an offer is calculated as the participant's proposed percentage scaled by a 'value' sensitivity parameter (beta_value), minus a penalty scaled by an 'unfairness' sensitivity parameter (beta_unfairness). The penalty is uniquely defined as the positive deviation from the calculated fair share percentage divided by the proposed share percentage (plus a small epsilon). This specific ratio-based penalty term, which grows non-linearly and steeply for low offers below the fair share, is hypothesized to create a mathematically distinct influence profile for the beta_unfairness parameter compared to the linear influence of beta_value. This distinction in influence across the range of offers is intended to improve the robust identifiability of both learnable parameters (beta_value and beta_unfairness) within the additive structure, addressing a key limitation of previous additive and ratio models. The model predicts acceptance based on this calculated utility, where higher utility corresponds to a higher probability of acceptance via a logistic function.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 479.63605495144463\nOverall Accuracy: 0.6832\nGroup Accuracies:\n- Control: 0.7442\n- Cocaine: 0.6285\n\nParameter Recovery:\n- beta_value: r = 0.223\n- beta_unfairness: r = 0.098"
  ]
}