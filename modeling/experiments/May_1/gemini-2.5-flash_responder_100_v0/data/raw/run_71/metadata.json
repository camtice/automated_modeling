{
  "task_description": "In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "Okay, here are the improved instructions for the next run (Run 71), building on the analysis of previous attempts and maintaining the intense focus on achieving robust parameter identifiability for *both* learnable parameters.\n\nInstructions for Run 71 of 100:\n\nThe **unwavering primary objective remains achieving parameter recovery >= 0.7 for *all* learnable parameters**. This is the critical benchmark for model usability. While improved BIC (lower is better) and accuracy (higher is better) are valuable secondary goals, they must not come at the expense of robust parameter recovery.\n\nThe previous run (Run 69) implemented an additive model structure with a ratio-based unfairness penalty term (`U_accept = beta_value * split_perc_self - beta_unfairness * (positive_deviation / safe_split_perc_self)`). Despite the theoretical rationale that the non-linear shape of the ratio penalty would help disentangle parameter influences, the results showed very poor parameter recovery (beta_value: r=0.223, beta_unfairness: r=0.098). This confirms that merely introducing non-linearity in the penalty term within an additive structure is not sufficient for identifiability if the shape of the penalty's influence remains too correlated with the influence of the value term across the data range.\n\nCrucially, previous explorations (like the ratio model tested in Run 68, `U = (beta_value * split_perc_self) / (1.0 + beta_unfairness * NonLinearPenaltyTerm)`) showed that using a **squared positive difference** penalty (`max(0.0, fair_perc_self_calc - split_perc_self)^2`) resulted in a significantly better BIC (44.58) compared to Run 69's BIC (479.64). This suggests that the squared deviation penalty term might better capture the underlying structure of participant behavior related to unfairness, even though its identifiability was poor when placed in the denominator of a ratio model.\n\nFor Run 71, let's leverage the potential descriptive power of the squared deviation penalty term, but combine it with the simpler **additive utility structure**. The hypothesis is that using an additive structure (`U = ValueTerm - PenaltyTerm`) with a **linearly scaled value term** (`beta_value * split_perc_self`) and a **non-linearly scaled penalty term** based on the squared deviation from fairness (`beta_unfairness * (squared positive deviation)`) will create sufficiently distinct mathematical influences for `beta_value` and `beta_unfairness` across the range of possible offers, leading to robust parameter identifiability.\n\nProposed Model Structure: An additive model where utility is the value of the offer minus a penalty proportional to the *squared* deviation from fairness.\n`U_accept = beta_value * split_perc_self - beta_unfairness * SquaredPositiveDeviation`\n\nHere, `SquaredPositiveDeviation` is calculated as the square of the positive difference between the fair share percentage and the proposed share percentage. Specifically:\nCalculate `fair_perc_self_calc` handling the `sum_tokens == 0` case (defaulting to 50.0).\nCalculate `deviation = fair_perc_self_calc - split_perc_self`.\nDefine `positive_deviation = max(0.0, deviation)`. This ensures the penalty is only applied for offers below the fair share.\nDefine the `SquaredPositiveDeviation = positive_deviation^2`.\nFinally, `U_accept = beta_value * split_perc_self - beta_unfairness * SquaredPositiveDeviation`.\n\nThe theoretical rationale for this specific combination is to create a clear mathematical contrast: `beta_value` scales a term that changes linearly with the offer (`split_perc_self`), while `beta_unfairness` scales a term that changes quadratically with the *deviation* from fairness (for offers below fair). This difference in how the two terms scale with the input variables (`split_perc_self` and `fair_perc_self_calc`) is intended to make their individual contributions to the overall utility function more distinguishable than in previous attempts, thereby improving the reliability of their estimated values during parameter recovery.\n\nDesign the model using the additive structure `U_accept = beta_value * split_perc_self - beta_unfairness * squared_positive_deviation`, where `squared_positive_deviation` is calculated as specified above.\n\nFocus on clearly defining the `squared_positive_deviation` term and articulating in the summary how its specific functional form (the square of the positive deviation from fair share) combined with the additive structure and the linear value term is intended to help disentangle the influences of `beta_value` (scaling the linear value) and `beta_unfairness` (scaling this non-linear, squared penalty), thereby significantly improving robust parameter identifiability for *both* learnable parameters. Explain why this specific combination is being tested based on the learnings from Run 69's additive structure failure and Run 68's better BIC with the squared penalty.\n\n*   **Key Inputs & Calculated Variables:** Use `split_perc_self`, `token_self`, `token_opp` as data variables. Calculate `sum_tokens`, `fair_perc_self_calc` (handling `sum_tokens == 0`), `deviation`, `positive_deviation`, `squared_positive_deviation`, and `U_accept`. Include any other necessary intermediate variables.\n*   **Model Formula:** Define `U_accept` using the additive structure: `U_accept = beta_value * split_perc_self - beta_unfairness * squared_positive_deviation`. Include calculation steps for derived variables *before* the formula for `U_accept`. Use clear mathematical notation within the <MODEL> tags (only the formula).\n*   **Learnable Parameters:** Exactly **2 learnable parameters**: `beta_value` and `beta_unfairness`. Choose descriptive, Python-safe names. Define clear, generous, finite numerical bounds. Non-negative bounds (e.g., `[0.0, 100.0]` for both) are theoretically appropriate and may aid recovery. Stick with `[0.0, 100.0]` for both.\n*   **Calculated Variables:** Include descriptions for *all* calculated variables used in the model (including `U_accept`, `sum_tokens`, `fair_perc_self_calc`, `deviation`, `positive_deviation`, and `squared_positive_deviation`) with `source: \"calculated\"`. Include descriptions for all data variables used as inputs (`token_self`, `token_opp`, `split_perc_self`) with `source: \"data\"`.\n*   **Variable Descriptions:** Provide variable descriptions in JSON format between <VARIABLES> tags for *all* variables in the <MODEL> formula. Include source, range (with inclusive flags), distribution (if applicable), and learnable status. Remember variable names must exactly match the model.\n*   **Target Variable:** Specify \"accept\" using <target_variable> tags.\n*   **Summary:** Provide a concise summary between <SUMMARY> tags. Describe the model's core idea (additive structure, linear value term, squared positive deviation penalty term). Crucially, explain *how the squared form of the penalty term* within the additive structure is specifically intended to improve robust parameter identifiability for *both* learnable parameters by creating a mathematically distinct, non-linear influence profile for `beta_unfairness` compared to the linear influence of `beta_value`. Explain how this new combination is a targeted attempt to overcome the identifiability failures of previous additive and ratio models, building on prior observations about the BIC performance of the squared penalty.\n\nAvailable Data Variables:\n- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.\n(Note: Use `split_perc_self` for the participant's proposed percentage share percentage).\n\nPlease think through this step by step, then provide your model specification and variable descriptions. Remember that robust parameter identifiability for *both* learnable parameters (>= 0.7 recovery for both) is the absolute priority. Your goal is to find a structure where both parameters' influences are clearly distinguishable across the range of possible offers, leading to reliable estimates. Be creative in how you define and utilize the different functional forms and structures to maximize this distinction while remaining theoretically plausible. Find a model structure that truly shines in parameter recovery.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: Okay, here are the improved instructions for the next run (Run 71), building on the analysis of previous attempts and maintaining the intense focus on achieving robust parameter identifiability for *both* learnable parameters.\n\nInstructions for Run 71 of 100:\n\nThe **unwavering primary objective remains achieving parameter recovery >= 0.7 for *all* learnable parameters**. This is the critical benchmark for model usability. While improved BIC (lower is better) and accuracy (higher is better) are valuable secondary goals, they must not come at the expense of robust parameter recovery.\n\nThe previous run (Run 69) implemented an additive model structure with a ratio-based unfairness penalty term (`U_accept = beta_value * split_perc_self - beta_unfairness * (positive_deviation / safe_split_perc_self)`). Despite the theoretical rationale that the non-linear shape of the ratio penalty would help disentangle parameter influences, the results showed very poor parameter recovery (beta_value: r=0.223, beta_unfairness: r=0.098). This confirms that merely introducing non-linearity in the penalty term within an additive structure is not sufficient for identifiability if the shape of the penalty's influence remains too correlated with the influence of the value term across the data range.\n\nCrucially, previous explorations (like the ratio model tested in Run 68, `U = (beta_value * split_perc_self) / (1.0 + beta_unfairness * NonLinearPenaltyTerm)`) showed that using a **squared positive difference** penalty (`max(0.0, fair_perc_self_calc - split_perc_self)^2`) resulted in a significantly better BIC (44.58) compared to Run 69's BIC (479.64). This suggests that the squared deviation penalty term might better capture the underlying structure of participant behavior related to unfairness, even though its identifiability was poor when placed in the denominator of a ratio model.\n\nFor Run 71, let's leverage the potential descriptive power of the squared deviation penalty term, but combine it with the simpler **additive utility structure**. The hypothesis is that using an additive structure (`U = ValueTerm - PenaltyTerm`) with a **linearly scaled value term** (`beta_value * split_perc_self`) and a **non-linearly scaled penalty term** based on the squared deviation from fairness (`beta_unfairness * (squared positive deviation)`) will create sufficiently distinct mathematical influences for `beta_value` and `beta_unfairness` across the range of possible offers, leading to robust parameter identifiability.\n\nProposed Model Structure: An additive model where utility is the value of the offer minus a penalty proportional to the *squared* deviation from fairness.\n`U_accept = beta_value * split_perc_self - beta_unfairness * SquaredPositiveDeviation`\n\nHere, `SquaredPositiveDeviation` is calculated as the square of the positive difference between the fair share percentage and the proposed share percentage. Specifically:\nCalculate `fair_perc_self_calc` handling the `sum_tokens == 0` case (defaulting to 50.0).\nCalculate `deviation = fair_perc_self_calc - split_perc_self`.\nDefine `positive_deviation = max(0.0, deviation)`. This ensures the penalty is only applied for offers below the fair share.\nDefine the `SquaredPositiveDeviation = positive_deviation^2`.\nFinally, `U_accept = beta_value * split_perc_self - beta_unfairness * SquaredPositiveDeviation`.\n\nThe theoretical rationale for this specific combination is to create a clear mathematical contrast: `beta_value` scales a term that changes linearly with the offer (`split_perc_self`), while `beta_unfairness` scales a term that changes quadratically with the *deviation* from fairness (for offers below fair). This difference in how the two terms scale with the input variables (`split_perc_self` and `fair_perc_self_calc`) is intended to make their individual contributions to the overall utility function more distinguishable than in previous attempts, thereby improving the reliability of their estimated values during parameter recovery.\n\nDesign the model using the additive structure `U_accept = beta_value * split_perc_self - beta_unfairness * squared_positive_deviation`, where `squared_positive_deviation` is calculated as specified above.\n\nFocus on clearly defining the `squared_positive_deviation` term and articulating in the summary how its specific functional form (the square of the positive deviation from fair share) combined with the additive structure and the linear value term is intended to help disentangle the influences of `beta_value` (scaling the linear value) and `beta_unfairness` (scaling this non-linear, squared penalty), thereby significantly improving robust parameter identifiability for *both* learnable parameters. Explain why this specific combination is being tested based on the learnings from Run 69's additive structure failure and Run 68's better BIC with the squared penalty.\n\n*   **Key Inputs & Calculated Variables:** Use `split_perc_self`, `token_self`, `token_opp` as data variables. Calculate `sum_tokens`, `fair_perc_self_calc` (handling `sum_tokens == 0`), `deviation`, `positive_deviation`, `squared_positive_deviation`, and `U_accept`. Include any other necessary intermediate variables.\n*   **Model Formula:** Define `U_accept` using the additive structure: `U_accept = beta_value * split_perc_self - beta_unfairness * squared_positive_deviation`. Include calculation steps for derived variables *before* the formula for `U_accept`. Use clear mathematical notation within the <MODEL> tags (only the formula).\n*   **Learnable Parameters:** Exactly **2 learnable parameters**: `beta_value` and `beta_unfairness`. Choose descriptive, Python-safe names. Define clear, generous, finite numerical bounds. Non-negative bounds (e.g., `[0.0, 100.0]` for both) are theoretically appropriate and may aid recovery. Stick with `[0.0, 100.0]` for both.\n*   **Calculated Variables:** Include descriptions for *all* calculated variables used in the model (including `U_accept`, `sum_tokens`, `fair_perc_self_calc`, `deviation`, `positive_deviation`, and `squared_positive_deviation`) with `source: \"calculated\"`. Include descriptions for all data variables used as inputs (`token_self`, `token_opp`, `split_perc_self`) with `source: \"data\"`.\n*   **Variable Descriptions:** Provide variable descriptions in JSON format between <VARIABLES> tags for *all* variables in the <MODEL> formula. Include source, range (with inclusive flags), distribution (if applicable), and learnable status. Remember variable names must exactly match the model.\n*   **Target Variable:** Specify \"accept\" using <target_variable> tags.\n*   **Summary:** Provide a concise summary between <SUMMARY> tags. Describe the model's core idea (additive structure, linear value term, squared positive deviation penalty term). Crucially, explain *how the squared form of the penalty term* within the additive structure is specifically intended to improve robust parameter identifiability for *both* learnable parameters by creating a mathematically distinct, non-linear influence profile for `beta_unfairness` compared to the linear influence of `beta_value`. Explain how this new combination is a targeted attempt to overcome the identifiability failures of previous additive and ratio models, building on prior observations about the BIC performance of the squared penalty.\n\nAvailable Data Variables:\n- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.\n(Note: Use `split_perc_self` for the participant's proposed percentage share percentage).\n\nPlease think through this step by step, then provide your model specification and variable descriptions. Remember that robust parameter identifiability for *both* learnable parameters (>= 0.7 recovery for both) is the absolute priority. Your goal is to find a structure where both parameters' influences are clearly distinguishable across the range of possible offers, leading to reliable estimates. Be creative in how you define and utilize the different functional forms and structures to maximize this distinction while remaining theoretically plausible. Find a model structure that truly shines in parameter recovery.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "Okay, expert Computational Modeler at your service! I have analyzed the task description, the data variables, and the specific requirements for Run 71, prioritizing robust parameter identifiability. The goal is to build an additive utility model for the responder's acceptance decision, incorporating a linear value term and a non-linear, squared penalty term for deviations below the fair share. This structure is specifically designed to make the contributions of the two learnable parameters mathematically distinct, thereby improving parameter recovery.\n\nHere is the computational model specification:\n\n<MODEL>\nsum_tokens = token_self + token_opp\nfair_perc_self_calc = 50.0 if sum_tokens == 0 else (token_self / sum_tokens) * 100.0\ndeviation = fair_perc_self_calc - split_perc_self\npositive_deviation = max(0.0, deviation)\nsquared_positive_deviation = positive_deviation * positive_deviation\nU_accept = beta_value * split_perc_self - beta_unfairness * squared_positive_deviation\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The proposed share for the participant in percentage\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"sum_tokens\": {\n      \"description\": \"Total number of tokens found by participant and opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 200\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fair_perc_self_calc\": {\n      \"description\": \"Calculated fair percentage share for the participant based on token contribution. Defaults to 50% if total tokens are zero.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"deviation\": {\n      \"description\": \"The difference between the calculated fair percentage share and the proposed percentage share for the participant\",\n      \"range\": {\n        \"min\": -100.0,\n        \"max\": 100.0\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"positive_deviation\": {\n      \"description\": \"The positive part of the deviation; non-zero only when the proposed share is below the fair share\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"squared_positive_deviation\": {\n      \"description\": \"The square of the positive deviation; represents the severity of unfairness below the fair share, with increasing penalty for larger deviations\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 10000.0\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_value\": {\n      \"description\": \"Parameter scaling the utility of the proposed percentage share\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_unfairness\": {\n      \"description\": \"Parameter scaling the penalty for proposed shares below the fair share, based on the squared positive deviation\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U_accept\": {\n      \"description\": \"Utility of accepting the proposed offer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nAn additive utility model for responder decisions. The utility of accepting an offer is calculated as a linear function of the participant's proposed percentage share, scaled by 'beta_value', minus a penalty term. This penalty is proportional to the squared positive deviation between the fair share percentage (based on token contributions) and the proposed share percentage, scaled by 'beta_unfairness'. The squared form of the penalty term creates a non-linear (quadratic) relationship with increasing deviation below the fair share, aiming to mathematically distinguish the influence of 'beta_unfairness' from the linear influence of 'beta_value' across different offers. This structure is hypothesized to improve robust parameter identifiability for both learnable parameters compared to previous additive or ratio models.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['beta_value', 'beta_unfairness']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                sum_tokens = token_self + token_opp\nfair_perc_self_calc = 50.0 if sum_tokens == 0 else (token_self / sum_tokens) * 100.0\ndeviation = fair_perc_self_calc - split_perc_self\npositive_deviation = max(0.0, deviation)\nsquared_positive_deviation = positive_deviation * positive_deviation\nU_accept = beta_value * split_perc_self - beta_unfairness * squared_positive_deviation\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The proposed share for the participant in percentage\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"sum_tokens\": {\n      \"description\": \"Total number of tokens found by participant and opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 200,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fair_perc_self_calc\": {\n      \"description\": \"Calculated fair percentage share for the participant based on token contribution. Defaults to 50% if total tokens are zero.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"deviation\": {\n      \"description\": \"The difference between the calculated fair percentage share and the proposed percentage share for the participant\",\n      \"range\": {\n        \"min\": -100.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"positive_deviation\": {\n      \"description\": \"The positive part of the deviation; non-zero only when the proposed share is below the fair share\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"squared_positive_deviation\": {\n      \"description\": \"The square of the positive deviation; represents the severity of unfairness below the fair share, with increasing penalty for larger deviations\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 10000.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_value\": {\n      \"description\": \"Parameter scaling the utility of the proposed percentage share\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_unfairness\": {\n      \"description\": \"Parameter scaling the penalty for proposed shares below the fair share, based on the squared positive deviation\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U_accept\": {\n      \"description\": \"Utility of accepting the proposed offer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, beta_value=1, beta_unfairness=1):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        split_perc_self = trial.get(\"splitperc_self\", 0.0)\n\n        sum_tokens = token_self + token_opp\n        fair_perc_self_calc = 50.0 if sum_tokens == 0 else (token_self / sum_tokens) * 100.0\n        deviation = fair_perc_self_calc - split_perc_self\n        positive_deviation = max(0.0, deviation)\n        squared_positive_deviation = positive_deviation * positive_deviation\n\n        U_accept = beta_value * split_perc_self - beta_unfairness * squared_positive_deviation\n        model_predictions.append(U_accept)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n",
      "timestamp": 1746103248.725485
    }
  ],
  "learnable_parameters": {
    "beta_value": {
      "description": "Parameter scaling the utility of the proposed percentage share",
      "range": {
        "min": 0.0,
        "max": 100.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta_unfairness": {
      "description": "Parameter scaling the penalty for proposed shares below the fair share, based on the squared positive deviation",
      "range": {
        "min": 0.0,
        "max": 100.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "sum_tokens = token_self + token_opp\nfair_perc_self_calc = 50.0 if sum_tokens == 0 else (token_self / sum_tokens) * 100.0\ndeviation = fair_perc_self_calc - split_perc_self\npositive_deviation = max(0.0, deviation)\nsquared_positive_deviation = positive_deviation * positive_deviation\nU_accept = beta_value * split_perc_self - beta_unfairness * squared_positive_deviation",
  "variable_descriptions": {
    "token_self": {
      "description": "Number of tokens found by the participant",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "split_perc_self": {
      "description": "The proposed share for the participant in percentage",
      "range": {
        "min": 0.0,
        "max": 100.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "sum_tokens": {
      "description": "Total number of tokens found by participant and opponent",
      "range": {
        "min": 0,
        "max": 200,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "fair_perc_self_calc": {
      "description": "Calculated fair percentage share for the participant based on token contribution. Defaults to 50% if total tokens are zero.",
      "range": {
        "min": 0.0,
        "max": 100.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "deviation": {
      "description": "The difference between the calculated fair percentage share and the proposed percentage share for the participant",
      "range": {
        "min": -100.0,
        "max": 100.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "positive_deviation": {
      "description": "The positive part of the deviation; non-zero only when the proposed share is below the fair share",
      "range": {
        "min": 0.0,
        "max": 100.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "squared_positive_deviation": {
      "description": "The square of the positive deviation; represents the severity of unfairness below the fair share, with increasing penalty for larger deviations",
      "range": {
        "min": 0.0,
        "max": 10000.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "beta_value": {
      "description": "Parameter scaling the utility of the proposed percentage share",
      "range": {
        "min": 0.0,
        "max": 100.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta_unfairness": {
      "description": "Parameter scaling the penalty for proposed shares below the fair share, based on the squared positive deviation",
      "range": {
        "min": 0.0,
        "max": 100.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "U_accept": {
      "description": "Utility of accepting the proposed offer",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "An additive utility model for responder decisions. The utility of accepting an offer is calculated as a linear function of the participant's proposed percentage share, scaled by 'beta_value', minus a penalty term. This penalty is proportional to the squared positive deviation between the fair share percentage (based on token contributions) and the proposed share percentage, scaled by 'beta_unfairness'. The squared form of the penalty term creates a non-linear (quadratic) relationship with increasing deviation below the fair share, aiming to mathematically distinguish the influence of 'beta_unfairness' from the linear influence of 'beta_value' across different offers. This structure is hypothesized to improve robust parameter identifiability for both learnable parameters compared to previous additive or ratio models.",
  "target_variable": "accept",
  "full_reasoning": "Okay, expert Computational Modeler at your service! I have analyzed the task description, the data variables, and the specific requirements for Run 71, prioritizing robust parameter identifiability. The goal is to build an additive utility model for the responder's acceptance decision, incorporating a linear value term and a non-linear, squared penalty term for deviations below the fair share. This structure is specifically designed to make the contributions of the two learnable parameters mathematically distinct, thereby improving parameter recovery.\n\nHere is the computational model specification:\n\n<MODEL>\nsum_tokens = token_self + token_opp\nfair_perc_self_calc = 50.0 if sum_tokens == 0 else (token_self / sum_tokens) * 100.0\ndeviation = fair_perc_self_calc - split_perc_self\npositive_deviation = max(0.0, deviation)\nsquared_positive_deviation = positive_deviation * positive_deviation\nU_accept = beta_value * split_perc_self - beta_unfairness * squared_positive_deviation\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The proposed share for the participant in percentage\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"sum_tokens\": {\n      \"description\": \"Total number of tokens found by participant and opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 200\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fair_perc_self_calc\": {\n      \"description\": \"Calculated fair percentage share for the participant based on token contribution. Defaults to 50% if total tokens are zero.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"deviation\": {\n      \"description\": \"The difference between the calculated fair percentage share and the proposed percentage share for the participant\",\n      \"range\": {\n        \"min\": -100.0,\n        \"max\": 100.0\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"positive_deviation\": {\n      \"description\": \"The positive part of the deviation; non-zero only when the proposed share is below the fair share\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"squared_positive_deviation\": {\n      \"description\": \"The square of the positive deviation; represents the severity of unfairness below the fair share, with increasing penalty for larger deviations\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 10000.0\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_value\": {\n      \"description\": \"Parameter scaling the utility of the proposed percentage share\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_unfairness\": {\n      \"description\": \"Parameter scaling the penalty for proposed shares below the fair share, based on the squared positive deviation\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U_accept\": {\n      \"description\": \"Utility of accepting the proposed offer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nAn additive utility model for responder decisions. The utility of accepting an offer is calculated as a linear function of the participant's proposed percentage share, scaled by 'beta_value', minus a penalty term. This penalty is proportional to the squared positive deviation between the fair share percentage (based on token contributions) and the proposed share percentage, scaled by 'beta_unfairness'. The squared form of the penalty term creates a non-linear (quadratic) relationship with increasing deviation below the fair share, aiming to mathematically distinguish the influence of 'beta_unfairness' from the linear influence of 'beta_value' across different offers. This structure is hypothesized to improve robust parameter identifiability for both learnable parameters compared to previous additive or ratio models.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: sum_tokens = token_self + token_opp\nfair_perc_self_calc = 50.0 if sum_tokens == 0 else (token_self / sum_tokens) * 100.0\ndeviation = fair_perc_self_calc - split_perc_self\npositive_deviation = max(0.0, deviation)\nsquared_positive_deviation = positive_deviation * positive_deviation\nU_accept = beta_value * split_perc_self - beta_unfairness * squared_positive_deviation\nSummary: An additive utility model for responder decisions. The utility of accepting an offer is calculated as a linear function of the participant's proposed percentage share, scaled by 'beta_value', minus a penalty term. This penalty is proportional to the squared positive deviation between the fair share percentage (based on token contributions) and the proposed share percentage, scaled by 'beta_unfairness'. The squared form of the penalty term creates a non-linear (quadratic) relationship with increasing deviation below the fair share, aiming to mathematically distinguish the influence of 'beta_unfairness' from the linear influence of 'beta_value' across different offers. This structure is hypothesized to improve robust parameter identifiability for both learnable parameters compared to previous additive or ratio models.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, beta_value=1, beta_unfairness=1):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        split_perc_self = trial.get(\"splitperc_self\", 0.0)\n\n        sum_tokens = token_self + token_opp\n        fair_perc_self_calc = 50.0 if sum_tokens == 0 else (token_self / sum_tokens) * 100.0\n        deviation = fair_perc_self_calc - split_perc_self\n        positive_deviation = max(0.0, deviation)\n        squared_positive_deviation = positive_deviation * positive_deviation\n\n        U_accept = beta_value * split_perc_self - beta_unfairness * squared_positive_deviation\n        model_predictions.append(U_accept)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.6501831501831502,
  "group_accuracies": {
    "Control": 0.6324289405684754,
    "Cocaine": 0.666087962962963
  },
  "group_parameter_averages": {
    "Control": {
      "beta_value": 58.315610519938915,
      "beta_unfairness": 36.60898228318334
    },
    "Cocaine": {
      "beta_value": 57.94692802493576,
      "beta_unfairness": 43.120536834692196
    }
  },
  "fitting_results": [
    {
      "beta_value": 7.555708395054084,
      "beta_unfairness": 26.508491532998136,
      "success": true,
      "log_likelihood": -69.07755278652135,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 63.35640948694341,
      "beta_unfairness": 11.866941559524879,
      "success": true,
      "log_likelihood": -161.1809565066832,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 63.79848764697079,
      "beta_unfairness": 75.3703118543821,
      "success": true,
      "log_likelihood": -253.28436022684508,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 99.66580987698792,
      "beta_unfairness": 7.289909788098314,
      "success": true,
      "log_likelihood": -230.2585092968047,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 93.73618228730687,
      "beta_unfairness": 22.03454802419238,
      "success": true,
      "log_likelihood": -115.12925464660229,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 97.24525791778915,
      "beta_unfairness": 91.9399221598025,
      "success": true,
      "log_likelihood": -345.38776394700693,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 45.080455325577816,
      "beta_unfairness": 42.5371491887876,
      "success": true,
      "log_likelihood": -644.723826037533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.2222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 65.0785188275775,
      "beta_unfairness": 68.12870586310062,
      "success": true,
      "log_likelihood": -368.4136148770475,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 66.18307873381669,
      "beta_unfairness": 3.4197618342651226,
      "success": true,
      "log_likelihood": -322.36191301635637,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 35.6779725444877,
      "beta_unfairness": 48.01695437892367,
      "success": true,
      "log_likelihood": -138.15510557664274,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 84.7798074925166,
      "beta_unfairness": 28.234663399064562,
      "success": true,
      "log_likelihood": -115.12925464660228,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 26.96922952194687,
      "beta_unfairness": 13.099739810755917,
      "success": true,
      "log_likelihood": -138.1551055766427,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 97.03615845114896,
      "beta_unfairness": 18.46168469273669,
      "success": true,
      "log_likelihood": -92.1034037165618,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 96.48821098975321,
      "beta_unfairness": 55.974054127069614,
      "success": true,
      "log_likelihood": -644.723826037533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.2222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 71.33567836532188,
      "beta_unfairness": 57.37455698791072,
      "success": true,
      "log_likelihood": -644.723826037533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.2222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 78.06888996195703,
      "beta_unfairness": 49.13045666797458,
      "success": true,
      "log_likelihood": -644.723826037533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.2222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 90.65690480916939,
      "beta_unfairness": 85.21301103221938,
      "success": true,
      "log_likelihood": -644.7238260375331,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.2222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 62.858749678061876,
      "beta_unfairness": 0.0,
      "success": true,
      "log_likelihood": -115.12925464660226,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 84.40786440873211,
      "beta_unfairness": 84.46246079605812,
      "success": true,
      "log_likelihood": -552.6204223173711,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3333333333333333,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 41.801283055906566,
      "beta_unfairness": 32.30814004475053,
      "success": true,
      "log_likelihood": -644.7238260375331,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.2222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 18.44438800570396,
      "beta_unfairness": 42.76153661100863,
      "success": true,
      "log_likelihood": -322.3619130169665,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 97.1716272024181,
      "beta_unfairness": 90.15917807447829,
      "success": true,
      "log_likelihood": -529.5945713873307,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 17.0095734438623,
      "beta_unfairness": 51.91667565746888,
      "success": true,
      "log_likelihood": -207.23265836676427,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 63.01093711068442,
      "beta_unfairness": 50.62475865048868,
      "success": true,
      "log_likelihood": -299.336062086926,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 61.96028864976849,
      "beta_unfairness": 6.32993712474774,
      "success": true,
      "log_likelihood": -92.10340371656183,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 96.17107216705891,
      "beta_unfairness": 6.261495401732898,
      "success": true,
      "log_likelihood": -184.20680743672366,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 28.515248575484463,
      "beta_unfairness": 33.80892847281227,
      "success": true,
      "log_likelihood": -276.31021115688554,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 84.72054384901617,
      "beta_unfairness": 98.43880858286084,
      "success": true,
      "log_likelihood": -46.05170185648093,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 60.81660627672916,
      "beta_unfairness": 18.03186275588854,
      "success": true,
      "log_likelihood": -483.5428695272498,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 42.01450753936934,
      "beta_unfairness": 0.15112486361156252,
      "success": true,
      "log_likelihood": -184.20680743672378,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 53.257564172268104,
      "beta_unfairness": 4.466511461324485,
      "success": true,
      "log_likelihood": -437.49116766716895,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 0.7435088533966017,
      "beta_unfairness": 99.74450235521293,
      "success": true,
      "log_likelihood": -69.07512952807403,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 49.92390403441451,
      "beta_unfairness": 11.663596899245587,
      "success": true,
      "log_likelihood": -276.3102111568856,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 44.259323454183225,
      "beta_unfairness": 61.963052768579324,
      "success": true,
      "log_likelihood": -162.56725086760383,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 26.639688853093347,
      "beta_unfairness": 12.041191030400334,
      "success": true,
      "log_likelihood": -644.7238260375331,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.2222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 52.093608703355756,
      "beta_unfairness": 26.621620740709815,
      "success": true,
      "log_likelihood": -345.387763947007,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 34.552048360027115,
      "beta_unfairness": 1.3820819340202473,
      "success": true,
      "log_likelihood": -70.46384714744127,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 98.01198409686823,
      "beta_unfairness": 31.765335026741436,
      "success": true,
      "log_likelihood": -161.18095650668326,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 30.32929447180368,
      "beta_unfairness": 2.3949211240208768,
      "success": true,
      "log_likelihood": -253.28436022683212,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 14.448772077593631,
      "beta_unfairness": 0.685043034056474,
      "success": true,
      "log_likelihood": -230.2585096157558,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 40.07139799445074,
      "beta_unfairness": 22.96721238802667,
      "success": true,
      "log_likelihood": -322.3619130169665,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 36.260576144711074,
      "beta_unfairness": 62.89491639517932,
      "success": true,
      "log_likelihood": -46.051701856480946,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 85.36413054408561,
      "beta_unfairness": 15.7404830816523,
      "success": true,
      "log_likelihood": -552.6204223173712,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3333333333333333,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 73.64660600834353,
      "beta_unfairness": 22.68743744805396,
      "success": true,
      "log_likelihood": -299.33606208692606,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 75.12454346583561,
      "beta_unfairness": 64.54278267463856,
      "success": true,
      "log_likelihood": -322.36191301696647,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 86.85025894938356,
      "beta_unfairness": 8.2130817941813,
      "success": true,
      "log_likelihood": -345.38776394700704,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 59.11982006460917,
      "beta_unfairness": 77.30787292544964,
      "success": true,
      "log_likelihood": -253.2843602268451,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 72.65912104936712,
      "beta_unfairness": 13.001213891520969,
      "success": true,
      "log_likelihood": -184.20680743718023,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 33.48425024517634,
      "beta_unfairness": 4.840830039698085,
      "success": true,
      "log_likelihood": -115.12925464660223,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 94.23036591744116,
      "beta_unfairness": 4.11568617144612,
      "success": true,
      "log_likelihood": -368.4136148770475,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 31.065364737587608,
      "beta_unfairness": 0.13519462211527555,
      "success": true,
      "log_likelihood": -230.25850929680612,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 1.5291113321349692,
      "beta_unfairness": 13.070136709262448,
      "success": true,
      "log_likelihood": -115.12925464660226,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 86.8333739627804,
      "beta_unfairness": 8.363843217976397,
      "success": true,
      "log_likelihood": -230.25850929680468,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 36.599009559123274,
      "beta_unfairness": 23.449641375304353,
      "success": true,
      "log_likelihood": -391.43946580708797,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 31.484541863109605,
      "beta_unfairness": 82.11917049584832,
      "success": true,
      "log_likelihood": -184.2068074367237,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 51.11880818510704,
      "beta_unfairness": 59.13910395546383,
      "success": true,
      "log_likelihood": -92.10340371656181,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 10.457285201670107,
      "beta_unfairness": 60.47546994513724,
      "success": true,
      "log_likelihood": -138.1551055766428,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 40.770076513584016,
      "beta_unfairness": 18.176282790509333,
      "success": true,
      "log_likelihood": -598.6721241774521,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.2777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 72.61742711401253,
      "beta_unfairness": 67.38999182708059,
      "success": true,
      "log_likelihood": -184.20680743672372,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 94.31166103143921,
      "beta_unfairness": 12.875692795437754,
      "success": true,
      "log_likelihood": -345.38776394700704,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 82.6166082882166,
      "beta_unfairness": 99.74486794090546,
      "success": true,
      "log_likelihood": -368.41361487704745,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 84.29830065342829,
      "beta_unfairness": 5.974918159789066,
      "success": true,
      "log_likelihood": -161.1809565066833,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 29.05111468118743,
      "beta_unfairness": 20.12974640722294,
      "success": true,
      "log_likelihood": -161.18095650668323,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 73.99071983963809,
      "beta_unfairness": 16.447207029452123,
      "success": true,
      "log_likelihood": -299.33606208692595,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 4.128262591147669,
      "beta_unfairness": 76.20312545640283,
      "success": true,
      "log_likelihood": -92.10340371656179,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 80.95691587241605,
      "beta_unfairness": 95.94870168065674,
      "success": true,
      "log_likelihood": -276.3102111568857,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 35.65235621539075,
      "beta_unfairness": 70.76143005999891,
      "success": true,
      "log_likelihood": -621.6979751074925,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.25,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 93.65236162764174,
      "beta_unfairness": 79.21649705627722,
      "success": true,
      "log_likelihood": -529.5945713873308,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 73.59282754547378,
      "beta_unfairness": 7.202226372982812,
      "success": true,
      "log_likelihood": -253.28436022684508,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 88.99115516058357,
      "beta_unfairness": 38.53973039764096,
      "success": true,
      "log_likelihood": -575.6462732474116,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 32.18390835002256,
      "beta_unfairness": 93.39747482376781,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 12.937859571223264,
      "beta_unfairness": 49.456307822510496,
      "success": true,
      "log_likelihood": -115.12925464660228,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 21.41889103152026,
      "beta_unfairness": 76.78880522594461,
      "success": true,
      "log_likelihood": -345.38776394700704,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 30.63246546546665,
      "beta_unfairness": 4.144863512579933,
      "success": true,
      "log_likelihood": -368.41361487704745,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 97.93986733688038,
      "beta_unfairness": 73.46221292500546,
      "success": true,
      "log_likelihood": -322.36191301696647,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 31.559611470165972,
      "beta_unfairness": 15.957855039111845,
      "success": true,
      "log_likelihood": -391.4394658070879,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 65.52580700403932,
      "beta_unfairness": 24.55761208795385,
      "success": true,
      "log_likelihood": -552.6204223173712,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3333333333333333,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 33.18982466038341,
      "beta_unfairness": 95.74624067025438,
      "success": true,
      "log_likelihood": -92.10340371656179,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 87.21648945576416,
      "beta_unfairness": 50.165357898954554,
      "success": true,
      "log_likelihood": -322.36191301696647,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 94.83126099814632,
      "beta_unfairness": 42.26790963752723,
      "success": true,
      "log_likelihood": -161.1809565066833,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 88.71524460054432,
      "beta_unfairness": 36.9473645339007,
      "success": true,
      "log_likelihood": -345.38776394700693,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 85.36218218420237,
      "beta_unfairness": 0.0,
      "success": true,
      "log_likelihood": -69.07755278652131,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 1.7515724418152634,
      "beta_unfairness": 96.66953984895342,
      "success": true,
      "log_likelihood": -138.15510557664277,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 43.4539797845035,
      "beta_unfairness": 16.92813628181894,
      "success": true,
      "log_likelihood": -230.25850929680462,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 92.06299472901853,
      "beta_unfairness": 45.92490429047456,
      "success": true,
      "log_likelihood": -368.4136148770475,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 20.800048664614103,
      "beta_unfairness": 96.3892611869563,
      "success": true,
      "log_likelihood": -46.05170185648092,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 82.34937400523906,
      "beta_unfairness": 2.408221318308301,
      "success": true,
      "log_likelihood": -230.25850929680462,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 95.71848044595245,
      "beta_unfairness": 30.98201674201514,
      "success": true,
      "log_likelihood": -115.12925464660225,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 38.121059530575465,
      "beta_unfairness": 37.40990011320735,
      "success": true,
      "log_likelihood": -598.6721241774521,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.2777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 79.49255189870658,
      "beta_unfairness": 87.37391657306787,
      "success": true,
      "log_likelihood": -299.33606208692595,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 47.356823892303154,
      "beta_unfairness": 42.735984292459364,
      "success": true,
      "log_likelihood": -437.4911676671689,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "beta_value": {
        "r": 0.16717542675032274,
        "p": 0.0964210812307888
      },
      "beta_unfairness": {
        "r": 0.25603326705006835,
        "p": 0.010136109667457507
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 586.6696638186905,
  "bic_Control": 615.6067352671404,
  "bic_Cocaine": 560.7468706461208,
  "bic_results": {
    "average_bic": 586.6696638186905,
    "individual_bics": [
      145.32214344995492,
      329.5289508902786,
      513.7357583306024,
      467.6840564705216,
      237.4255471701168,
      697.9425657709261,
      1296.614689951978,
      743.9942676310072,
      651.890863909625,
      283.4772490301977,
      237.42554717011677,
      283.47724903019764,
      191.37384531003582,
      1296.614689951978,
      1296.614689951978,
      1296.614689951978,
      1296.6146899519783,
      237.42554717011674,
      1112.4078825116544,
      1296.6146899519783,
      651.8908639108453,
      1066.3561806515736,
      421.63235461044076,
      605.8391620507642,
      191.37384531003588,
      375.58065275035955,
      559.7874601906833,
      99.27044158987408,
      974.2527769314119,
      375.5806527503598,
      882.1493732112501,
      145.31729693306028,
      559.7874601906834,
      332.3015396121199,
      1296.6146899519783,
      697.9425657709262,
      148.09473217179476,
      329.52895089027874,
      513.7357583305765,
      467.6840571084238,
      651.8908639108453,
      99.27044158987411,
      1112.4078825116546,
      605.8391620507643,
      651.8908639108452,
      697.9425657709263,
      513.7357583306025,
      375.5806527512727,
      237.4255471701167,
      743.9942676310072,
      467.68405647052447,
      237.42554717011674,
      467.68405647052157,
      790.0459694910882,
      375.5806527503596,
      191.37384531003585,
      283.4772490301978,
      1204.5112862318165,
      375.58065275035966,
      697.9425657709263,
      743.9942676310071,
      329.5289508902788,
      329.5289508902787,
      605.8391620507641,
      191.3738453100358,
      559.7874601906836,
      1250.5629880918973,
      1066.3561806515738,
      513.7357583306024,
      1158.4595843717354,
      7.167037869712219,
      237.42554717011677,
      697.9425657709263,
      743.9942676310071,
      651.8908639108452,
      790.045969491088,
      1112.4078825116546,
      191.3738453100358,
      651.8908639108452,
      329.5289508902788,
      697.9425657709261,
      145.32214344995484,
      283.47724903019775,
      467.68405647052145,
      743.9942676310072,
      99.27044158987405,
      467.68405647052145,
      237.42554717011672,
      1204.5112862318165,
      605.8391620507641,
      882.14937321125
    ],
    "group_enabled": true,
    "group_bics": {
      "Control": [
        145.32214344995492,
        329.5289508902786,
        513.7357583306024,
        467.6840564705216,
        237.4255471701168,
        697.9425657709261,
        1296.614689951978,
        743.9942676310072,
        651.890863909625,
        283.4772490301977,
        237.42554717011677,
        283.47724903019764,
        191.37384531003582,
        1296.614689951978,
        1296.614689951978,
        1296.614689951978,
        1296.6146899519783,
        237.42554717011674,
        1112.4078825116544,
        1296.6146899519783,
        651.8908639108453,
        1066.3561806515736,
        421.63235461044076,
        605.8391620507642,
        191.37384531003588,
        375.58065275035955,
        559.7874601906833,
        99.27044158987408,
        974.2527769314119,
        375.5806527503598,
        882.1493732112501,
        145.31729693306028,
        559.7874601906834,
        332.3015396121199,
        1296.6146899519783,
        697.9425657709262,
        148.09473217179476,
        329.52895089027874,
        513.7357583305765,
        467.6840571084238,
        651.8908639108453,
        99.27044158987411,
        1112.4078825116546
      ],
      "Cocaine": [
        605.8391620507643,
        651.8908639108452,
        697.9425657709263,
        513.7357583306025,
        375.5806527512727,
        237.4255471701167,
        743.9942676310072,
        467.68405647052447,
        237.42554717011674,
        467.68405647052157,
        790.0459694910882,
        375.5806527503596,
        191.37384531003585,
        283.4772490301978,
        1204.5112862318165,
        375.58065275035966,
        697.9425657709263,
        743.9942676310071,
        329.5289508902788,
        329.5289508902787,
        605.8391620507641,
        191.3738453100358,
        559.7874601906836,
        1250.5629880918973,
        1066.3561806515738,
        513.7357583306024,
        1158.4595843717354,
        7.167037869712219,
        237.42554717011677,
        697.9425657709263,
        743.9942676310071,
        651.8908639108452,
        790.045969491088,
        1112.4078825116546,
        191.3738453100358,
        651.8908639108452,
        329.5289508902788,
        697.9425657709261,
        145.32214344995484,
        283.47724903019775,
        467.68405647052145,
        743.9942676310072,
        99.27044158987405,
        467.68405647052145,
        237.42554717011672,
        1204.5112862318165,
        605.8391620507641,
        882.14937321125
      ]
    },
    "num_parameters": 2,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- beta_value: r = 0.167\n- beta_unfairness: r = 0.256",
  "previous_models": [
    "Specification: sum_tokens = token_self + token_opp\nfair_perc_self_calc = 50.0 if sum_tokens == 0 else (token_self / sum_tokens) * 100.0\ndeviation = fair_perc_self_calc - split_perc_self\npositive_deviation = max(0.0, deviation)\nsquared_positive_deviation = positive_deviation * positive_deviation\nU_accept = beta_value * split_perc_self - beta_unfairness * squared_positive_deviation\nSummary: An additive utility model for responder decisions. The utility of accepting an offer is calculated as a linear function of the participant's proposed percentage share, scaled by 'beta_value', minus a penalty term. This penalty is proportional to the squared positive deviation between the fair share percentage (based on token contributions) and the proposed share percentage, scaled by 'beta_unfairness'. The squared form of the penalty term creates a non-linear (quadratic) relationship with increasing deviation below the fair share, aiming to mathematically distinguish the influence of 'beta_unfairness' from the linear influence of 'beta_value' across different offers. This structure is hypothesized to improve robust parameter identifiability for both learnable parameters compared to previous additive or ratio models.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 586.6696638186905\nOverall Accuracy: 0.6502\nGroup Accuracies:\n- Control: 0.6324\n- Cocaine: 0.6661\n\nParameter Recovery:\n- beta_value: r = 0.167\n- beta_unfairness: r = 0.256"
  ]
}