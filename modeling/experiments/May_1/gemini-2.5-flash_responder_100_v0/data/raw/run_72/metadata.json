{
  "task_description": "In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "Okay, here are the improved instructions for the next run (Run 72), based on the results of previous attempts, with the absolute focus remaining on achieving robust parameter identifiability.\n\nInstructions for Run 72 of 100:\n\nThe **unwavering primary objective remains achieving parameter recovery >= 0.7 for *all* learnable parameters**. This is the critical benchmark for model usability. While improved BIC (lower is better) and accuracy (higher is better) are valuable secondary goals, they must not come at the expense of robust parameter recovery.\n\nThe previous run (Run 71) implemented an additive model structure with a squared positive deviation penalty (`U_accept = beta_value * split_perc_self - beta_unfairness * squared_positive_deviation`). Despite the theoretical rationale that the squared penalty would create a distinct non-linear influence compared to the linear value term, the results showed *very poor* parameter recovery for both parameters (beta_value: r=0.167, beta_unfairness: r=0.256). This indicates that this specific additive structure, even with a non-linear penalty form, did not sufficiently disentangle the influences of the parameters. Run 71 also showed poor BIC (586.67) and accuracy (0.650) compared to some earlier attempts, further confirming this structure was not effective.\n\nPrevious attempts using simple additive structures or ratio structures with various penalty terms (including the squared deviation penalty which performed better on BIC in a ratio model in Run 68, though still with poor recovery) have consistently failed to achieve robust parameter identifiability. This suggests that these common model structures may inherently lead to confounding between a 'value' parameter and an 'unfairness' parameter when both influence the overall utility calculation in a straightforward linear-additive or simple multiplicative/ratio manner.\n\nFor Run 72, we need a fundamentally different conceptual approach to model structure that is more likely to create mathematically distinct contributions for `beta_value` and `beta_unfairness`. Instead of viewing utility as `Value - Penalty`, let's explore a **reference-dependent framework**. The fair share percentage (`fair_perc_self_calc`) can naturally serve as a reference point. Utility could then be defined based on deviations *above* this reference (gains) and deviations *below* this reference (losses/unfairness), with potentially different sensitivities for these gains and losses.\n\nThis approach, inspired by concepts like Prospect Theory in behavioral economics, posits that the impact of an outcome depends on its relation to a reference point, and that losses relative to the reference point loom larger than equivalent gains. Applying this here, we can hypothesize that participants evaluate offers based on how much they deviate from their perceived fair share, with separate sensitivities for favorable deviations (above fair) and unfavorable deviations (below fair).\n\nProposed Model Structure: A reference-dependent additive model where utility is calculated based on deviations from the fair share percentage, with separate parameters for gains and losses relative to this reference.\n`U_accept = beta_value * GainAboveFair - beta_unfairness * LossBelowFair`\n\nHere:\nCalculate `fair_perc_self_calc` handling the `sum_tokens == 0` case (defaulting to 50.0).\nCalculate `GainAboveFair = max(0.0, split_perc_self - fair_perc_self_calc)`. This term is non-zero only for offers above or equal to the fair share.\nCalculate `LossBelowFair = max(0.0, fair_perc_self_calc - split_perc_self)`. This term is non-zero only for offers below or equal to the fair share.\nFinally, `U_accept = beta_value * GainAboveFair - beta_unfairness * LossBelowFair`. Note the subtraction, representing the negative utility (disutility) from a loss.\n\nIn this structure, `beta_value` scales the utility derived from exceeding the fair share (Gain sensitivity), and `beta_unfairness` scales the *disutility* derived from falling short of the fair share (Loss/Unfairness sensitivity). The key hypothesis for improved identifiability is that `beta_value` primarily influences utility for offers *at or above* the fair share, while `beta_unfairness` primarily influences utility for offers *at or below* the fair share. Because these two \"domains\" (gains vs. losses relative to fair) are largely disjoint in terms of where the respective terms (`GainAboveFair` and `LossBelowFair`) are active, the influence of `beta_value` on the overall utility profile should be mathematically distinct from the influence of `beta_unfairness`, leading to better identifiability.\n\nDesign the model using this reference-dependent additive structure: `U_accept = beta_value * gain_above_fair - beta_unfairness * loss_below_fair`, where `gain_above_fair` and `loss_below_fair` are calculated as specified above using `fair_perc_self_calc` as the reference.\n\nFocus on clearly defining the `gain_above_fair` and `loss_below_fair` terms and articulating in the summary how this specific structure, by assigning `beta_value` to scale 'gains' relative to fairness and `beta_unfairness` to scale 'losses' relative to fairness, is intended to achieve robust parameter identifiability. Explain why this reference-dependent approach is being tested as a way to overcome the identifiability failures seen in previous additive and ratio structures that used single penalty terms. This is a more \"out-of-the-box\" structure compared to previous attempts, aimed directly at the identifiability challenge.\n\n*   **Key Inputs & Calculated Variables:** Use `split_perc_self`, `token_self`, `token_opp` as data variables. Calculate `sum_tokens`, `fair_perc_self_calc` (handling `sum_tokens == 0`), `gain_above_fair`, `loss_below_fair`, and `U_accept`. Include any other necessary intermediate variables.\n*   **Model Formula:** Define `U_accept` using the reference-dependent additive structure: `U_accept = beta_value * gain_above_fair - beta_unfairness * loss_below_fair`. Include calculation steps for derived variables *before* the formula for `U_accept`. Use clear mathematical notation within the <MODEL> tags (only the formula).\n*   **Learnable Parameters:** Exactly **2 learnable parameters**: `beta_value` (gain sensitivity) and `beta_unfairness` (loss/unfairness sensitivity). Choose descriptive, Python-safe names. Define clear, generous, finite numerical bounds. Non-negative bounds (e.g., `[0.0, 100.0]` for both) are theoretically appropriate and may aid recovery. Stick with `[0.0, 100.0]` for both.\n*   **Calculated Variables:** Include descriptions for *all* calculated variables used in the model (including `U_accept`, `sum_tokens`, `fair_perc_self_calc`, `gain_above_fair`, and `loss_below_fair`) with `source: \"calculated\"`. Include descriptions for all data variables used as inputs (`token_self`, `token_opp`, `split_perc_self`) with `source: \"data\"`.\n*   **Variable Descriptions:** Provide variable descriptions in JSON format between <VARIABLES> tags for *all* variables in the <MODEL> formula. Include source, range (with inclusive flags), distribution (if applicable), and learnable status. Remember variable names must exactly match the model.\n*   **Target Variable:** Specify \"accept\" using <target_variable> tags.\n*   **Summary:** Provide a concise summary between <SUMMARY> tags. Describe the model's core idea (reference-dependent additive structure, fair share as reference, separate gain/loss sensitivities). Crucially, explain *how* this structure, by having `beta_value` scale gains (above fair) and `beta_unfairness` scale losses (below fair), is specifically intended to improve robust parameter identifiability by creating mathematically distinct influences across different offers, addressing the limitations of previous simple additive/ratio structures.\n*   **Think Outside the Box:** Recognize that previous attempts with standard additive/ratio forms and various penalty definitions have failed parameter recovery. This new model structure is a significant departure intended to directly tackle the identifiability problem by assigning parameters roles in distinct parts of the outcome space relative to a reference. Continue to consider non-obvious ways parameters might interact or influence decisions beyond simple linear combinations.\n\nAvailable Data Variables:\n- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.\n(Note: Use `split_perc_self` for the participant's proposed percentage share percentage).\n\nPlease think through this step by step, then provide your model specification and variable descriptions. Remember that robust parameter identifiability for *both* learnable parameters (>= 0.7 recovery for both) is the absolute priority. Your goal is to find a structure where both parameters' influences are clearly distinguishable across the range of possible offers, leading to reliable estimates. Be creative in how you define and utilize the different functional forms and structures to maximize this distinction while remaining theoretically plausible. Find a model structure that truly shines in parameter recovery.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: Okay, here are the improved instructions for the next run (Run 72), based on the results of previous attempts, with the absolute focus remaining on achieving robust parameter identifiability.\n\nInstructions for Run 72 of 100:\n\nThe **unwavering primary objective remains achieving parameter recovery >= 0.7 for *all* learnable parameters**. This is the critical benchmark for model usability. While improved BIC (lower is better) and accuracy (higher is better) are valuable secondary goals, they must not come at the expense of robust parameter recovery.\n\nThe previous run (Run 71) implemented an additive model structure with a squared positive deviation penalty (`U_accept = beta_value * split_perc_self - beta_unfairness * squared_positive_deviation`). Despite the theoretical rationale that the squared penalty would create a distinct non-linear influence compared to the linear value term, the results showed *very poor* parameter recovery for both parameters (beta_value: r=0.167, beta_unfairness: r=0.256). This indicates that this specific additive structure, even with a non-linear penalty form, did not sufficiently disentangle the influences of the parameters. Run 71 also showed poor BIC (586.67) and accuracy (0.650) compared to some earlier attempts, further confirming this structure was not effective.\n\nPrevious attempts using simple additive structures or ratio structures with various penalty terms (including the squared deviation penalty which performed better on BIC in a ratio model in Run 68, though still with poor recovery) have consistently failed to achieve robust parameter identifiability. This suggests that these common model structures may inherently lead to confounding between a 'value' parameter and an 'unfairness' parameter when both influence the overall utility calculation in a straightforward linear-additive or simple multiplicative/ratio manner.\n\nFor Run 72, we need a fundamentally different conceptual approach to model structure that is more likely to create mathematically distinct contributions for `beta_value` and `beta_unfairness`. Instead of viewing utility as `Value - Penalty`, let's explore a **reference-dependent framework**. The fair share percentage (`fair_perc_self_calc`) can naturally serve as a reference point. Utility could then be defined based on deviations *above* this reference (gains) and deviations *below* this reference (losses/unfairness), with potentially different sensitivities for these gains and losses.\n\nThis approach, inspired by concepts like Prospect Theory in behavioral economics, posits that the impact of an outcome depends on its relation to a reference point, and that losses relative to the reference point loom larger than equivalent gains. Applying this here, we can hypothesize that participants evaluate offers based on how much they deviate from their perceived fair share, with separate sensitivities for favorable deviations (above fair) and unfavorable deviations (below fair).\n\nProposed Model Structure: A reference-dependent additive model where utility is calculated based on deviations from the fair share percentage, with separate parameters for gains and losses relative to this reference.\n`U_accept = beta_value * GainAboveFair - beta_unfairness * LossBelowFair`\n\nHere:\nCalculate `fair_perc_self_calc` handling the `sum_tokens == 0` case (defaulting to 50.0).\nCalculate `GainAboveFair = max(0.0, split_perc_self - fair_perc_self_calc)`. This term is non-zero only for offers above or equal to the fair share.\nCalculate `LossBelowFair = max(0.0, fair_perc_self_calc - split_perc_self)`. This term is non-zero only for offers below or equal to the fair share.\nFinally, `U_accept = beta_value * GainAboveFair - beta_unfairness * LossBelowFair`. Note the subtraction, representing the negative utility (disutility) from a loss.\n\nIn this structure, `beta_value` scales the utility derived from exceeding the fair share (Gain sensitivity), and `beta_unfairness` scales the *disutility* derived from falling short of the fair share (Loss/Unfairness sensitivity). The key hypothesis for improved identifiability is that `beta_value` primarily influences utility for offers *at or above* the fair share, while `beta_unfairness` primarily influences utility for offers *at or below* the fair share. Because these two \"domains\" (gains vs. losses relative to fair) are largely disjoint in terms of where the respective terms (`GainAboveFair` and `LossBelowFair`) are active, the influence of `beta_value` on the overall utility profile should be mathematically distinct from the influence of `beta_unfairness`, leading to better identifiability.\n\nDesign the model using this reference-dependent additive structure: `U_accept = beta_value * gain_above_fair - beta_unfairness * loss_below_fair`, where `gain_above_fair` and `loss_below_fair` are calculated as specified above using `fair_perc_self_calc` as the reference.\n\nFocus on clearly defining the `gain_above_fair` and `loss_below_fair` terms and articulating in the summary how this specific structure, by assigning `beta_value` to scale 'gains' relative to fairness and `beta_unfairness` to scale 'losses' relative to fairness, is intended to achieve robust parameter identifiability. Explain why this reference-dependent approach is being tested as a way to overcome the identifiability failures seen in previous additive and ratio structures that used single penalty terms. This is a more \"out-of-the-box\" structure compared to previous attempts, aimed directly at the identifiability challenge.\n\n*   **Key Inputs & Calculated Variables:** Use `split_perc_self`, `token_self`, `token_opp` as data variables. Calculate `sum_tokens`, `fair_perc_self_calc` (handling `sum_tokens == 0`), `gain_above_fair`, `loss_below_fair`, and `U_accept`. Include any other necessary intermediate variables.\n*   **Model Formula:** Define `U_accept` using the reference-dependent additive structure: `U_accept = beta_value * gain_above_fair - beta_unfairness * loss_below_fair`. Include calculation steps for derived variables *before* the formula for `U_accept`. Use clear mathematical notation within the <MODEL> tags (only the formula).\n*   **Learnable Parameters:** Exactly **2 learnable parameters**: `beta_value` (gain sensitivity) and `beta_unfairness` (loss/unfairness sensitivity). Choose descriptive, Python-safe names. Define clear, generous, finite numerical bounds. Non-negative bounds (e.g., `[0.0, 100.0]` for both) are theoretically appropriate and may aid recovery. Stick with `[0.0, 100.0]` for both.\n*   **Calculated Variables:** Include descriptions for *all* calculated variables used in the model (including `U_accept`, `sum_tokens`, `fair_perc_self_calc`, `gain_above_fair`, and `loss_below_fair`) with `source: \"calculated\"`. Include descriptions for all data variables used as inputs (`token_self`, `token_opp`, `split_perc_self`) with `source: \"data\"`.\n*   **Variable Descriptions:** Provide variable descriptions in JSON format between <VARIABLES> tags for *all* variables in the <MODEL> formula. Include source, range (with inclusive flags), distribution (if applicable), and learnable status. Remember variable names must exactly match the model.\n*   **Target Variable:** Specify \"accept\" using <target_variable> tags.\n*   **Summary:** Provide a concise summary between <SUMMARY> tags. Describe the model's core idea (reference-dependent additive structure, fair share as reference, separate gain/loss sensitivities). Crucially, explain *how* this structure, by having `beta_value` scale gains (above fair) and `beta_unfairness` scale losses (below fair), is specifically intended to improve robust parameter identifiability by creating mathematically distinct influences across different offers, addressing the limitations of previous simple additive/ratio structures.\n*   **Think Outside the Box:** Recognize that previous attempts with standard additive/ratio forms and various penalty definitions have failed parameter recovery. This new model structure is a significant departure intended to directly tackle the identifiability problem by assigning parameters roles in distinct parts of the outcome space relative to a reference. Continue to consider non-obvious ways parameters might interact or influence decisions beyond simple linear combinations.\n\nAvailable Data Variables:\n- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.\n(Note: Use `split_perc_self` for the participant's proposed percentage share percentage).\n\nPlease think through this step by step, then provide your model specification and variable descriptions. Remember that robust parameter identifiability for *both* learnable parameters (>= 0.7 recovery for both) is the absolute priority. Your goal is to find a structure where both parameters' influences are clearly distinguishable across the range of possible offers, leading to reliable estimates. Be creative in how you define and utilize the different functional forms and structures to maximize this distinction while remaining theoretically plausible. Find a model structure that truly shines in parameter recovery.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "Okay, I will design the computational model for the responder's decision based on the reference-dependent structure you've specified, focusing on achieving robust parameter identifiability.\n\n<MODEL>\nsum_tokens = token_self + token_opp\nfair_perc_self_calc = case when sum_tokens > 0 then (token_self / sum_tokens) * 100.0 else 50.0 end\ngain_above_fair = max(0.0, split_perc_self - fair_perc_self_calc)\nloss_below_fair = max(0.0, fair_perc_self_calc - split_perc_self)\nU_accept = beta_value * gain_above_fair - beta_unfairness * loss_below_fair\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The proposed share for the participant (in %)\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"sum_tokens\": {\n      \"description\": \"Total number of tokens found by participant and opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 2000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fair_perc_self_calc\": {\n      \"description\": \"Calculated fair percentage share for the participant based on token contribution. Defaults to 50% if sum_tokens is 0.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"gain_above_fair\": {\n      \"description\": \"The amount in percentage points by which the proposed split_perc_self exceeds the fair_perc_self_calc. It is 0 if the proposal is less than or equal to the fair share.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"loss_below_fair\": {\n      \"description\": \"The amount in percentage points by which the proposed split_perc_self falls below the fair_perc_self_calc. It is 0 if the proposal is greater than or equal to the fair share.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_value\": {\n      \"description\": \"Sensitivity parameter for gains relative to the fair share (scaling gain_above_fair)\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_unfairness\": {\n      \"description\": \"Sensitivity parameter for losses/unfairness relative to the fair share (scaling loss_below_fair)\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U_accept\": {\n      \"description\": \"Utility of accepting the proposed offer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA reference-dependent additive utility model for the responder's decision. The model calculates a 'fair share percentage' based on the relative token contributions of the participant and opponent, using this as a reference point. The utility of accepting an offer is then calculated as a linear combination of the deviation above the fair share (gain) and the deviation below the fair share (loss). The model includes two learnable parameters: 'beta_value' scaling the utility derived from gains (offers above fair) and 'beta_unfairness' scaling the disutility derived from losses (offers below fair). This structure is designed to improve parameter identifiability by assigning distinct sensitivities to outcomes in different domains (gains vs. losses) relative to the fairness reference, thereby creating more separable influences of the parameters on the overall utility profile across different types of offers compared to simpler additive models.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['beta_value', 'beta_unfairness']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                sum_tokens = token_self + token_opp\nfair_perc_self_calc = case when sum_tokens > 0 then (token_self / sum_tokens) * 100.0 else 50.0 end\ngain_above_fair = max(0.0, split_perc_self - fair_perc_self_calc)\nloss_below_fair = max(0.0, fair_perc_self_calc - split_perc_self)\nU_accept = beta_value * gain_above_fair - beta_unfairness * loss_below_fair\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The proposed share for the participant (in %)\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"sum_tokens\": {\n      \"description\": \"Total number of tokens found by participant and opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 2000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fair_perc_self_calc\": {\n      \"description\": \"Calculated fair percentage share for the participant based on token contribution. Defaults to 50% if sum_tokens is 0.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"gain_above_fair\": {\n      \"description\": \"The amount in percentage points by which the proposed split_perc_self exceeds the fair_perc_self_calc. It is 0 if the proposal is less than or equal to the fair share.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"loss_below_fair\": {\n      \"description\": \"The amount in percentage points by which the proposed split_perc_self falls below the fair_perc_self_calc. It is 0 if the proposal is greater than or equal to the fair share.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_value\": {\n      \"description\": \"Sensitivity parameter for gains relative to the fair share (scaling gain_above_fair)\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_unfairness\": {\n      \"description\": \"Sensitivity parameter for losses/unfairness relative to the fair share (scaling loss_below_fair)\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U_accept\": {\n      \"description\": \"Utility of accepting the proposed offer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, beta_value=1.0, beta_unfairness=1.0):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        split_perc_self = trial.get(\"splitperc_self\", 50)  #Crucial: Default value if the value is not there\n\n        sum_tokens = token_self + token_opp\n\n        if sum_tokens > 0:\n            fair_perc_self_calc = (token_self / sum_tokens) * 100.0\n        else:\n            fair_perc_self_calc = 50.0\n\n        gain_above_fair = max(0.0, split_perc_self - fair_perc_self_calc)\n        loss_below_fair = max(0.0, fair_perc_self_calc - split_perc_self)\n\n        U_accept = beta_value * gain_above_fair - beta_unfairness * loss_below_fair\n        model_predictions.append(U_accept)\n    return model_predictions\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n```",
      "timestamp": 1746103294.798332
    }
  ],
  "learnable_parameters": {
    "beta_value": {
      "description": "Sensitivity parameter for gains relative to the fair share (scaling gain_above_fair)",
      "range": {
        "min": 0.0,
        "max": 100.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta_unfairness": {
      "description": "Sensitivity parameter for losses/unfairness relative to the fair share (scaling loss_below_fair)",
      "range": {
        "min": 0.0,
        "max": 100.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "sum_tokens = token_self + token_opp\nfair_perc_self_calc = case when sum_tokens > 0 then (token_self / sum_tokens) * 100.0 else 50.0 end\ngain_above_fair = max(0.0, split_perc_self - fair_perc_self_calc)\nloss_below_fair = max(0.0, fair_perc_self_calc - split_perc_self)\nU_accept = beta_value * gain_above_fair - beta_unfairness * loss_below_fair",
  "variable_descriptions": {
    "token_self": {
      "description": "Number of tokens found by the participant",
      "range": {
        "min": 0,
        "max": 1000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent",
      "range": {
        "min": 0,
        "max": 1000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "split_perc_self": {
      "description": "The proposed share for the participant (in %)",
      "range": {
        "min": 0.0,
        "max": 100.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "sum_tokens": {
      "description": "Total number of tokens found by participant and opponent",
      "range": {
        "min": 0,
        "max": 2000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "fair_perc_self_calc": {
      "description": "Calculated fair percentage share for the participant based on token contribution. Defaults to 50% if sum_tokens is 0.",
      "range": {
        "min": 0.0,
        "max": 100.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "gain_above_fair": {
      "description": "The amount in percentage points by which the proposed split_perc_self exceeds the fair_perc_self_calc. It is 0 if the proposal is less than or equal to the fair share.",
      "range": {
        "min": 0.0,
        "max": 100.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "loss_below_fair": {
      "description": "The amount in percentage points by which the proposed split_perc_self falls below the fair_perc_self_calc. It is 0 if the proposal is greater than or equal to the fair share.",
      "range": {
        "min": 0.0,
        "max": 100.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "beta_value": {
      "description": "Sensitivity parameter for gains relative to the fair share (scaling gain_above_fair)",
      "range": {
        "min": 0.0,
        "max": 100.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta_unfairness": {
      "description": "Sensitivity parameter for losses/unfairness relative to the fair share (scaling loss_below_fair)",
      "range": {
        "min": 0.0,
        "max": 100.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "U_accept": {
      "description": "Utility of accepting the proposed offer",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "A reference-dependent additive utility model for the responder's decision. The model calculates a 'fair share percentage' based on the relative token contributions of the participant and opponent, using this as a reference point. The utility of accepting an offer is then calculated as a linear combination of the deviation above the fair share (gain) and the deviation below the fair share (loss). The model includes two learnable parameters: 'beta_value' scaling the utility derived from gains (offers above fair) and 'beta_unfairness' scaling the disutility derived from losses (offers below fair). This structure is designed to improve parameter identifiability by assigning distinct sensitivities to outcomes in different domains (gains vs. losses) relative to the fairness reference, thereby creating more separable influences of the parameters on the overall utility profile across different types of offers compared to simpler additive models.",
  "target_variable": "accept",
  "full_reasoning": "Okay, I will design the computational model for the responder's decision based on the reference-dependent structure you've specified, focusing on achieving robust parameter identifiability.\n\n<MODEL>\nsum_tokens = token_self + token_opp\nfair_perc_self_calc = case when sum_tokens > 0 then (token_self / sum_tokens) * 100.0 else 50.0 end\ngain_above_fair = max(0.0, split_perc_self - fair_perc_self_calc)\nloss_below_fair = max(0.0, fair_perc_self_calc - split_perc_self)\nU_accept = beta_value * gain_above_fair - beta_unfairness * loss_below_fair\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The proposed share for the participant (in %)\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"sum_tokens\": {\n      \"description\": \"Total number of tokens found by participant and opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 2000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fair_perc_self_calc\": {\n      \"description\": \"Calculated fair percentage share for the participant based on token contribution. Defaults to 50% if sum_tokens is 0.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"gain_above_fair\": {\n      \"description\": \"The amount in percentage points by which the proposed split_perc_self exceeds the fair_perc_self_calc. It is 0 if the proposal is less than or equal to the fair share.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"loss_below_fair\": {\n      \"description\": \"The amount in percentage points by which the proposed split_perc_self falls below the fair_perc_self_calc. It is 0 if the proposal is greater than or equal to the fair share.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_value\": {\n      \"description\": \"Sensitivity parameter for gains relative to the fair share (scaling gain_above_fair)\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_unfairness\": {\n      \"description\": \"Sensitivity parameter for losses/unfairness relative to the fair share (scaling loss_below_fair)\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U_accept\": {\n      \"description\": \"Utility of accepting the proposed offer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA reference-dependent additive utility model for the responder's decision. The model calculates a 'fair share percentage' based on the relative token contributions of the participant and opponent, using this as a reference point. The utility of accepting an offer is then calculated as a linear combination of the deviation above the fair share (gain) and the deviation below the fair share (loss). The model includes two learnable parameters: 'beta_value' scaling the utility derived from gains (offers above fair) and 'beta_unfairness' scaling the disutility derived from losses (offers below fair). This structure is designed to improve parameter identifiability by assigning distinct sensitivities to outcomes in different domains (gains vs. losses) relative to the fairness reference, thereby creating more separable influences of the parameters on the overall utility profile across different types of offers compared to simpler additive models.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: sum_tokens = token_self + token_opp\nfair_perc_self_calc = case when sum_tokens > 0 then (token_self / sum_tokens) * 100.0 else 50.0 end\ngain_above_fair = max(0.0, split_perc_self - fair_perc_self_calc)\nloss_below_fair = max(0.0, fair_perc_self_calc - split_perc_self)\nU_accept = beta_value * gain_above_fair - beta_unfairness * loss_below_fair\nSummary: A reference-dependent additive utility model for the responder's decision. The model calculates a 'fair share percentage' based on the relative token contributions of the participant and opponent, using this as a reference point. The utility of accepting an offer is then calculated as a linear combination of the deviation above the fair share (gain) and the deviation below the fair share (loss). The model includes two learnable parameters: 'beta_value' scaling the utility derived from gains (offers above fair) and 'beta_unfairness' scaling the disutility derived from losses (offers below fair). This structure is designed to improve parameter identifiability by assigning distinct sensitivities to outcomes in different domains (gains vs. losses) relative to the fairness reference, thereby creating more separable influences of the parameters on the overall utility profile across different types of offers compared to simpler additive models.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, beta_value=1.0, beta_unfairness=1.0):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        split_perc_self = trial.get(\"splitperc_self\", 50)  #Crucial: Default value if the value is not there\n\n        sum_tokens = token_self + token_opp\n\n        if sum_tokens > 0:\n            fair_perc_self_calc = (token_self / sum_tokens) * 100.0\n        else:\n            fair_perc_self_calc = 50.0\n\n        gain_above_fair = max(0.0, split_perc_self - fair_perc_self_calc)\n        loss_below_fair = max(0.0, fair_perc_self_calc - split_perc_self)\n\n        U_accept = beta_value * gain_above_fair - beta_unfairness * loss_below_fair\n        model_predictions.append(U_accept)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.5326617826617827,
  "group_accuracies": {
    "Control": 0.47093023255813954,
    "Cocaine": 0.5879629629629629
  },
  "group_parameter_averages": {
    "Control": {
      "beta_value": 48.68006266629011,
      "beta_unfairness": 40.04558711395114
    },
    "Cocaine": {
      "beta_value": 45.45752225730359,
      "beta_unfairness": 33.88014207507995
    }
  },
  "fitting_results": [
    {
      "beta_value": 12.785082360068035,
      "beta_unfairness": 68.56899761217096,
      "success": true,
      "log_likelihood": -47.43799621740078,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 60.9049739630265,
      "beta_unfairness": 51.779383585147166,
      "success": true,
      "log_likelihood": -323.7482073778865,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 15.401476938859716,
      "beta_unfairness": 9.173806877302424,
      "success": true,
      "log_likelihood": -346.77301004411464,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 35.56087193494035,
      "beta_unfairness": 0.046838278991197156,
      "success": true,
      "log_likelihood": -18.98829196620035,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 25.240651878652752,
      "beta_unfairness": 19.896470255238896,
      "success": true,
      "log_likelihood": -277.69650551780546,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 54.951444021018226,
      "beta_unfairness": 87.1389905083415,
      "success": true,
      "log_likelihood": -438.87746202808876,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 60.38651951239118,
      "beta_unfairness": 56.89896039730319,
      "success": true,
      "log_likelihood": -738.2135241186147,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.08333333333333333,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 79.19801940117613,
      "beta_unfairness": 36.94982789193849,
      "success": true,
      "log_likelihood": -461.9033129581293,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 15.330879036113721,
      "beta_unfairness": 96.39029489852341,
      "success": true,
      "log_likelihood": -738.2135241186148,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.1111111111111111,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 48.380642386550065,
      "beta_unfairness": 0.06404980552658023,
      "success": true,
      "log_likelihood": -16.517467643256893,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 20.692135697927373,
      "beta_unfairness": 83.55956857144788,
      "success": true,
      "log_likelihood": -277.69650551780546,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 72.4246746587622,
      "beta_unfairness": 89.29957306029837,
      "success": true,
      "log_likelihood": -70.46384714744121,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 83.99157913949269,
      "beta_unfairness": 9.98173750077417,
      "success": true,
      "log_likelihood": -254.67058363370302,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 70.02874164956215,
      "beta_unfairness": 10.533718151730234,
      "success": true,
      "log_likelihood": -738.2135128489788,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.08333333333333333,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 85.57140590318146,
      "beta_unfairness": 60.091216354992625,
      "success": true,
      "log_likelihood": -738.2135241186148,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.08333333333333333,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 32.42771037525309,
      "beta_unfairness": 10.880341209230757,
      "success": true,
      "log_likelihood": -738.2135205694804,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.05555555555555555,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 72.0052043444845,
      "beta_unfairness": 0.0,
      "success": true,
      "log_likelihood": -23.567004132038125,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 85.68191238185663,
      "beta_unfairness": 9.951152123608503,
      "success": true,
      "log_likelihood": -623.0841908990361,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.2222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 16.02916916670436,
      "beta_unfairness": 46.75043636103503,
      "success": true,
      "log_likelihood": -646.1101203984529,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.2222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 47.56744857997946,
      "beta_unfairness": 65.87646559617603,
      "success": true,
      "log_likelihood": -738.2135241186148,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.08333333333333333,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 16.204347076761728,
      "beta_unfairness": 91.01370931438964,
      "success": true,
      "log_likelihood": -369.79990923796737,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 36.91741608331949,
      "beta_unfairness": 0.0,
      "success": true,
      "log_likelihood": -23.567004132038125,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 28.534973523713823,
      "beta_unfairness": 13.598090184236977,
      "success": true,
      "log_likelihood": -208.61895272768413,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 8.082709712052004,
      "beta_unfairness": 0.02143978275398934,
      "success": true,
      "log_likelihood": -22.363803949707634,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 38.078166365662646,
      "beta_unfairness": 32.30717666824196,
      "success": true,
      "log_likelihood": -323.74820737788644,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 36.79658231635913,
      "beta_unfairness": 12.652683551575294,
      "success": true,
      "log_likelihood": -392.82576015836077,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 24.267993351334216,
      "beta_unfairness": 89.51954803926675,
      "success": true,
      "log_likelihood": -369.7999092379675,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 97.14994527220236,
      "beta_unfairness": 20.671001591044348,
      "success": true,
      "log_likelihood": -139.54139993756274,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 99.28716598111238,
      "beta_unfairness": 62.244438549167405,
      "success": true,
      "log_likelihood": -646.110120398453,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.16666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 16.594856739925934,
      "beta_unfairness": 91.36089726376724,
      "success": true,
      "log_likelihood": -554.0067166782911,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3333333333333333,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 33.22446674652826,
      "beta_unfairness": 98.32263659778906,
      "success": true,
      "log_likelihood": -738.2135241186148,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.08333333333333333,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 41.13853309574701,
      "beta_unfairness": 18.078852816122048,
      "success": true,
      "log_likelihood": -47.43799621740082,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 88.18529450795751,
      "beta_unfairness": 0.02749879701583931,
      "success": true,
      "log_likelihood": -21.67173480728632,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 7.775791382563336,
      "beta_unfairness": 79.54736115345649,
      "success": true,
      "log_likelihood": -231.64480365772445,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 68.85367253544538,
      "beta_unfairness": 13.796755781540925,
      "success": true,
      "log_likelihood": -738.2135241184019,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.08333333333333333,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 69.04269264788289,
      "beta_unfairness": 57.228940291141924,
      "success": true,
      "log_likelihood": -438.87746202808876,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 89.20717812692305,
      "beta_unfairness": 0.0029642801845477323,
      "success": true,
      "log_likelihood": -23.5423130642482,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 55.69516616392163,
      "beta_unfairness": 65.57386506312449,
      "success": true,
      "log_likelihood": -323.74820737788644,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 23.442805462125417,
      "beta_unfairness": 49.21232614397299,
      "success": true,
      "log_likelihood": -461.9033129581293,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 29.645752950068026,
      "beta_unfairness": 35.56630530179397,
      "success": true,
      "log_likelihood": -669.1359713284933,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.16666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 12.949912218059257,
      "beta_unfairness": 9.093013205270939,
      "success": true,
      "log_likelihood": -415.85023896488667,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 97.29666578274254,
      "beta_unfairness": 9.881052386613584,
      "success": true,
      "log_likelihood": -93.48959882741747,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 80.31006327806615,
      "beta_unfairness": 58.40786009765139,
      "success": true,
      "log_likelihood": -715.1876731885744,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.08333333333333333,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 41.34049306857403,
      "beta_unfairness": 89.06190204878911,
      "success": true,
      "log_likelihood": -369.79990923796737,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 99.67931658111169,
      "beta_unfairness": 36.79007177506743,
      "success": true,
      "log_likelihood": -415.85161109804835,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 81.75191591695467,
      "beta_unfairness": 52.6053661390838,
      "success": true,
      "log_likelihood": -507.9550148182102,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 39.91655160091909,
      "beta_unfairness": 21.742137754090983,
      "success": true,
      "log_likelihood": -346.77405830792685,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 39.31773067890673,
      "beta_unfairness": 84.49446644830846,
      "success": true,
      "log_likelihood": -231.64480365772457,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 92.45012323519747,
      "beta_unfairness": 49.915038164807356,
      "success": true,
      "log_likelihood": -254.67065458776509,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 28.48673954191826,
      "beta_unfairness": 0.005048618089295102,
      "success": true,
      "log_likelihood": -46.52143271567902,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 58.43552121054184,
      "beta_unfairness": 0.0,
      "success": true,
      "log_likelihood": -23.56700413203812,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.06772789424509335,
      "beta_unfairness": 63.231734686846366,
      "success": true,
      "log_likelihood": -71.68824468765058,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 64.54240885353909,
      "beta_unfairness": 0.016460697484510886,
      "success": true,
      "log_likelihood": -22.836964998419738,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 52.61831184134847,
      "beta_unfairness": 17.74752220253467,
      "success": true,
      "log_likelihood": -438.87746202808876,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 43.69444336695051,
      "beta_unfairness": 61.59496155572606,
      "success": true,
      "log_likelihood": -231.64480365772445,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 46.50639742644812,
      "beta_unfairness": 83.41103417694693,
      "success": true,
      "log_likelihood": -185.59310179764358,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 48.628825075234715,
      "beta_unfairness": 0.09231660819307098,
      "success": true,
      "log_likelihood": -13.065976984056798,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 26.655563107840663,
      "beta_unfairness": 0.0,
      "success": true,
      "log_likelihood": -23.567004132038125,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 55.166613761242736,
      "beta_unfairness": 93.60403477025142,
      "success": true,
      "log_likelihood": -70.46384714744129,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 72.8964190826467,
      "beta_unfairness": 44.72609720623495,
      "success": true,
      "log_likelihood": -577.0325676083315,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.2777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 84.46994337691866,
      "beta_unfairness": 69.50587423637226,
      "success": true,
      "log_likelihood": -415.85161109804824,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 58.46470263614649,
      "beta_unfairness": 17.8692949120835,
      "success": true,
      "log_likelihood": -323.7482073778865,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 21.925001960099234,
      "beta_unfairness": 37.117430621475876,
      "success": true,
      "log_likelihood": -47.4379962174008,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 51.50284833344787,
      "beta_unfairness": 29.560649270233107,
      "success": true,
      "log_likelihood": -300.7223564478459,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 87.61227801989271,
      "beta_unfairness": 7.465993302844476,
      "success": true,
      "log_likelihood": -93.4896974640314,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 46.10604529062316,
      "beta_unfairness": 99.91689168845953,
      "success": true,
      "log_likelihood": -369.7999092379674,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 16.039385021556306,
      "beta_unfairness": 0.0,
      "success": true,
      "log_likelihood": -23.56700413203812,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 69.14184808592225,
      "beta_unfairness": 0.0,
      "success": true,
      "log_likelihood": -23.56700413203812,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 81.82097529130787,
      "beta_unfairness": 0.015494711896502478,
      "success": true,
      "log_likelihood": -22.91685438100041,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 61.22979962131557,
      "beta_unfairness": 12.258209439456502,
      "success": true,
      "log_likelihood": -669.1359712925636,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.19444444444444445,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 24.5946277291341,
      "beta_unfairness": 34.64346149048204,
      "success": true,
      "log_likelihood": -1.3862943573198903,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.06774832317823447,
      "beta_unfairness": 47.20061848705858,
      "success": true,
      "log_likelihood": -71.68824470641748,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 73.98058157126658,
      "beta_unfairness": 0.02387249138283317,
      "success": true,
      "log_likelihood": -22.09955973130632,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 22.752533617252247,
      "beta_unfairness": 13.146907861897239,
      "success": true,
      "log_likelihood": -554.0067166773623,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3333333333333333,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 67.11306297978524,
      "beta_unfairness": 51.76401267831328,
      "success": true,
      "log_likelihood": -369.7999092379673,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 6.468829919463626,
      "beta_unfairness": 0.0,
      "success": true,
      "log_likelihood": -23.56700413203812,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 18.528029535985947,
      "beta_unfairness": 9.172903931980253,
      "success": true,
      "log_likelihood": -692.1607708357157,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.1111111111111111,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 10.416510769141441,
      "beta_unfairness": 65.64541768196673,
      "success": true,
      "log_likelihood": -70.46384714744121,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 17.699430176892562,
      "beta_unfairness": 79.86411379030763,
      "success": true,
      "log_likelihood": -415.85161109804824,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 17.466786285782142,
      "beta_unfairness": 47.60092772809985,
      "success": true,
      "log_likelihood": -47.43799621740081,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 20.097351880201366,
      "beta_unfairness": 19.46149680640462,
      "success": true,
      "log_likelihood": -346.7740583079269,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 6.470177338606686,
      "beta_unfairness": 0.0,
      "success": true,
      "log_likelihood": -23.56700413203812,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 77.20461089697956,
      "beta_unfairness": 31.649809744650337,
      "success": true,
      "log_likelihood": -116.51554900752218,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 38.168409619869145,
      "beta_unfairness": 26.762380655834527,
      "success": true,
      "log_likelihood": -323.7482073778864,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 68.01906687840004,
      "beta_unfairness": 0.0,
      "success": true,
      "log_likelihood": -23.56700413203812,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 27.254497184329594,
      "beta_unfairness": 36.939891935353316,
      "success": true,
      "log_likelihood": -24.41214528736036,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 70.50222292461386,
      "beta_unfairness": 74.89142620401442,
      "success": true,
      "log_likelihood": -484.92916388816974,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 4.873410570891645,
      "beta_unfairness": 0.10777979112298545,
      "success": true,
      "log_likelihood": -34.597563756980044,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 71.2158031364073,
      "beta_unfairness": 14.819717428414659,
      "success": true,
      "log_likelihood": -692.1618222585269,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.1111111111111111,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 46.178625000186635,
      "beta_unfairness": 99.80404986127816,
      "success": true,
      "log_likelihood": -300.72235644784587,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 22.42082213135439,
      "beta_unfairness": 0.0,
      "success": true,
      "log_likelihood": -23.567004132038125,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "beta_value": {
        "r": 0.13067568840131769,
        "p": 0.1950125980264348
      },
      "beta_unfairness": {
        "r": 0.01499033737564506,
        "p": 0.8823214456781866
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 600.8138221871161,
  "bic_Control": 761.8700043823703,
  "bic_Cocaine": 456.53432563720077,
  "bic_results": {
    "average_bic": 600.8138221871161,
    "individual_bics": [
      102.04303031171378,
      654.6634526326852,
      700.7130579651415,
      45.14362180931292,
      562.5600489125231,
      884.9219619330897,
      1483.5940861141416,
      930.9736637931708,
      1483.5940861141419,
      40.201973163426004,
      562.5600489125231,
      148.09473217179465,
      516.5082051443183,
      1483.5940635748698,
      1483.5940861141419,
      1483.594079015873,
      54.30104614098847,
      1253.3354196749845,
      1299.387278673818,
      1483.5940861141419,
      746.766856352847,
      54.30104614098847,
      424.4049433322805,
      51.894645776327486,
      654.6634526326851,
      792.8185581936337,
      746.7668563528472,
      286.2498377520377,
      1299.3872786738182,
      1115.1804712334945,
      1483.5940861141419,
      102.04303031171386,
      50.51050749148486,
      470.4566451923611,
      1483.594086113716,
      884.9219619330897,
      54.25166400540862,
      654.6634526326851,
      930.9736637931708,
      1345.4389805338988,
      838.8675158066856,
      194.14623553174715,
      1437.542384254061,
      746.766856352847,
      838.8702600730089,
      1023.0770675133326,
      700.7151544927659,
      470.45664519236135,
      516.5083470524424,
      100.20990330827026,
      54.30104614098846,
      150.54352725221338,
      52.840967873751694,
      884.9219619330897,
      470.4566451923611,
      378.3532414721994,
      33.29899184502582,
      54.30104614098847,
      148.0947321717948,
      1161.2321730935753,
      838.8702600730087,
      654.6634526326852,
      102.04303031171382,
      608.6117507726041,
      194.146432804975,
      746.7668563528471,
      54.30104614098846,
      54.30104614098846,
      53.000746638913036,
      1345.4389804620394,
      9.939626591552,
      150.54352728974717,
      51.36615733952486,
      1115.1804712316368,
      746.7668563528468,
      54.30104614098846,
      1391.4885795483435,
      148.09473217179465,
      838.8702600730087,
      102.04303031171384,
      700.715154492766,
      54.30104614098846,
      240.19813589195658,
      654.663452632685,
      54.30104614098846,
      55.99132845163294,
      977.0253656532517,
      76.3621653908723,
      1391.490682393966,
      608.611750772604,
      54.30104614098847
    ],
    "group_enabled": true,
    "group_bics": {
      "Control": [
        102.04303031171378,
        654.6634526326852,
        700.7130579651415,
        45.14362180931292,
        562.5600489125231,
        884.9219619330897,
        1483.5940861141416,
        930.9736637931708,
        1483.5940861141419,
        40.201973163426004,
        562.5600489125231,
        148.09473217179465,
        516.5082051443183,
        1483.5940635748698,
        1483.5940861141419,
        1483.594079015873,
        54.30104614098847,
        1253.3354196749845,
        1299.387278673818,
        1483.5940861141419,
        746.766856352847,
        54.30104614098847,
        424.4049433322805,
        51.894645776327486,
        654.6634526326851,
        792.8185581936337,
        746.7668563528472,
        286.2498377520377,
        1299.3872786738182,
        1115.1804712334945,
        1483.5940861141419,
        102.04303031171386,
        50.51050749148486,
        470.4566451923611,
        1483.594086113716,
        884.9219619330897,
        54.25166400540862,
        654.6634526326851,
        930.9736637931708,
        1345.4389805338988,
        838.8675158066856,
        194.14623553174715,
        1437.542384254061
      ],
      "Cocaine": [
        746.766856352847,
        838.8702600730089,
        1023.0770675133326,
        700.7151544927659,
        470.45664519236135,
        516.5083470524424,
        100.20990330827026,
        54.30104614098846,
        150.54352725221338,
        52.840967873751694,
        884.9219619330897,
        470.4566451923611,
        378.3532414721994,
        33.29899184502582,
        54.30104614098847,
        148.0947321717948,
        1161.2321730935753,
        838.8702600730087,
        654.6634526326852,
        102.04303031171382,
        608.6117507726041,
        194.146432804975,
        746.7668563528471,
        54.30104614098846,
        54.30104614098846,
        53.000746638913036,
        1345.4389804620394,
        9.939626591552,
        150.54352728974717,
        51.36615733952486,
        1115.1804712316368,
        746.7668563528468,
        54.30104614098846,
        1391.4885795483435,
        148.09473217179465,
        838.8702600730087,
        102.04303031171384,
        700.715154492766,
        54.30104614098846,
        240.19813589195658,
        654.663452632685,
        54.30104614098846,
        55.99132845163294,
        977.0253656532517,
        76.3621653908723,
        1391.490682393966,
        608.611750772604,
        54.30104614098847
      ]
    },
    "num_parameters": 2,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- beta_value: r = 0.131\n- beta_unfairness: r = 0.015",
  "previous_models": [
    "Specification: sum_tokens = token_self + token_opp\nfair_perc_self_calc = case when sum_tokens > 0 then (token_self / sum_tokens) * 100.0 else 50.0 end\ngain_above_fair = max(0.0, split_perc_self - fair_perc_self_calc)\nloss_below_fair = max(0.0, fair_perc_self_calc - split_perc_self)\nU_accept = beta_value * gain_above_fair - beta_unfairness * loss_below_fair\nSummary: A reference-dependent additive utility model for the responder's decision. The model calculates a 'fair share percentage' based on the relative token contributions of the participant and opponent, using this as a reference point. The utility of accepting an offer is then calculated as a linear combination of the deviation above the fair share (gain) and the deviation below the fair share (loss). The model includes two learnable parameters: 'beta_value' scaling the utility derived from gains (offers above fair) and 'beta_unfairness' scaling the disutility derived from losses (offers below fair). This structure is designed to improve parameter identifiability by assigning distinct sensitivities to outcomes in different domains (gains vs. losses) relative to the fairness reference, thereby creating more separable influences of the parameters on the overall utility profile across different types of offers compared to simpler additive models.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 600.8138221871161\nOverall Accuracy: 0.5327\nGroup Accuracies:\n- Control: 0.4709\n- Cocaine: 0.5880\n\nParameter Recovery:\n- beta_value: r = 0.131\n- beta_unfairness: r = 0.015"
  ]
}