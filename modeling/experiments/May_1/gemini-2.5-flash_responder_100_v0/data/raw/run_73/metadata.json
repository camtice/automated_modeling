{
  "task_description": "In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "Okay, here are the improved instructions for the next run (Run 73), based on the results of previous attempts, with the absolute focus remaining on achieving robust parameter identifiability.\n\nInstructions for Run 73 of 100:\n\nThe **unwavering primary objective remains achieving parameter recovery >= 0.7 for *all* learnable parameters**. This is the critical benchmark for model usability. While improved BIC (lower is better) and accuracy (higher is better) are valuable secondary goals, they must not come at the expense of robust parameter recovery.\n\nThe previous run (Run 72) implemented a reference-dependent additive model (`U_accept = beta_value * gain_above_fair - beta_unfairness * loss_below_fair`). Despite the theoretical rationale that separating parameters into gain and loss domains relative to a fair share reference would create distinct influences, the results showed *extremely poor* parameter recovery for both parameters (beta_value: r=0.131, beta_unfairness: r=0.015). Furthermore, this model exhibited very poor overall fit (BIC: 600.81, Accuracy: 0.533), significantly worse than many earlier attempts. This indicates that this specific reference-dependent structure, while conceptually distinct, did not capture the underlying behavior well, leading to unidentifiable parameters. Poor model fit often directly results in poor parameter recovery.\n\nPrevious attempts using simple additive structures or ratio structures with linear, squared, or ratio-based penalty terms have also consistently failed to achieve robust parameter identifiability, suggesting these common forms may inherently lead to confounding when a 'value' and 'unfairness' parameter both influence utility.\n\nFor Run 73, we need to continue exploring structures that can both provide a reasonable fit to the data *and* create mathematically distinct influences for the 'value' and 'unfairness' parameters. The failure of the Run 72 model suggests that just changing the conceptual framework (additive vs. reference-dependent) isn't enough; the specific *functional forms* by which the parameters scale variables must ensure separability.\n\nLet's revisit an additive structure but incorporate a strongly non-linear penalty term in a novel way. The goal is to ensure that the influence of the 'unfairness' parameter grows much more rapidly or in a fundamentally different shape than the linear influence of the 'value' parameter across the range of possible offers.\n\nProposed Model Structure: An additive utility model with a linear value term and an **exponential penalty** term based on deviation below the fair share.\n`U_accept = beta_value * split_perc_self - beta_unfairness * exp(loss_below_fair)`\n\nHere:\nCalculate `fair_perc_self_calc` handling the `sum_tokens == 0` case (defaulting to 50.0).\nCalculate `loss_below_fair = max(0.0, fair_perc_self_calc - split_perc_self)`. This term is non-zero only for offers below or equal to the fair share.\nFinally, `U_accept = beta_value * split_perc_self - beta_unfairness * exp(loss_below_fair)`. Note the subtraction for the penalty.\n\nIn this structure, `beta_value` linearly scales the value derived from the offered percentage (`split_perc_self`). `beta_unfairness` scales a penalty that increases exponentially with the magnitude of the 'loss' or deviation below the fair share (`loss_below_fair`). The key hypothesis for improved identifiability is that this **exponential form** of the penalty creates a functional relationship between `loss_below_fair` and disutility that is dramatically non-linear and distinct from the linear relationship between `split_perc_self` and utility driven by `beta_value`. This aims to make the influence of `beta_value` and `beta_unfairness` on the overall utility profile easily separable during fitting and recovery tests, overcoming the limitations seen with linear or squared penalty terms.\n\nDesign the model using this additive structure with an exponential penalty: `U_accept = beta_value * split_perc_self - beta_unfairness * exp(loss_below_fair)`, where `loss_below_fair` is calculated as specified above using `fair_perc_self_calc` as the reference.\n\nFocus on clearly defining the `loss_below_fair` term and articulating in the summary how this specific structure, by combining a linear value term with an *exponential* unfairness penalty term, is intended to achieve robust parameter identifiability by creating mathematically distinct influence profiles for `beta_value` and `beta_unfairness` across different offers. Explain why this specific non-linear form is being tested as a potential way to overcome the identifiability failures seen in previous structures.\n\n*   **Key Inputs & Calculated Variables:** Use `split_perc_self`, `token_self`, `token_opp` as data variables. Calculate `sum_tokens`, `fair_perc_self_calc` (handling `sum_tokens == 0`), `loss_below_fair`, and `U_accept`. Include any other necessary intermediate variables.\n*   **Model Formula:** Define `U_accept` using the additive structure with exponential penalty: `U_accept = beta_value * split_perc_self - beta_unfairness * exp(loss_below_fair)`. Include calculation steps for derived variables *before* the formula for `U_accept`. Use clear mathematical notation within the <MODEL> tags (only the formula).\n*   **Learnable Parameters:** Exactly **2 learnable parameters**: `beta_value` (value sensitivity) and `beta_unfairness` (unfairness sensitivity). Choose descriptive, Python-safe names. Define clear, generous, finite numerical bounds. Non-negative bounds (e.g., `[0.0, 100.0]` for both) are theoretically appropriate and may aid recovery. Stick with `[0.0, 100.0]` for both.\n*   **Calculated Variables:** Include descriptions for *all* calculated variables used in the model (including `U_accept`, `sum_tokens`, `fair_perc_self_calc`, and `loss_below_fair`) with `source: \"calculated\"`. Include descriptions for all data variables used as inputs (`token_self`, `token_opp`, `split_perc_self`) with `source: \"data\"`.\n*   **Variable Descriptions:** Provide variable descriptions in JSON format between <VARIABLES> tags for *all* variables in the <MODEL> formula. Include source, range (with inclusive flags), distribution (if applicable), and learnable status. Remember variable names must exactly match the model.\n*   **Target Variable:** Specify \"accept\" using <target_variable> tags.\n*   **Summary:** Provide a concise summary between <SUMMARY> tags. Describe the model's core idea (additive structure, linear value term, exponential unfairness penalty based on deviation from fair share). Crucially, explain *how* this structure, by using the exponential function for the penalty term, is specifically intended to improve robust parameter identifiability by creating a mathematically distinct influence profile for `beta_unfairness` compared to the linear influence of `beta_value`, addressing the limitations of previous simple additive/ratio structures and the failed reference-dependent model.\n*   **Think Outside the Box:** Recognize that previous attempts with standard functional forms (linear, squared, ratio) have failed parameter recovery. The exponential function is a deliberate choice to introduce a different kind of non-linearity, explicitly attempting to create functional separability between parameters. Continue to consider non-obvious ways parameters might interact or influence decisions beyond simple linear combinations, as finding a structure that truly shines in parameter recovery often requires exploring less standard forms.\n\nAvailable Data Variables:\n- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.\n(Note: Use `split_perc_self` for the participant's proposed percentage share percentage).\n\nPlease think through this step by step, then provide your model specification and variable descriptions. Remember that robust parameter identifiability for *both* learnable parameters (>= 0.7 recovery for both) is the absolute priority. Your goal is to find a structure where both parameters' influences are clearly distinguishable across the range of possible offers, leading to reliable estimates and hopefully improved fit metrics (BIC and accuracy) as a result of capturing the underlying process more accurately.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: Okay, here are the improved instructions for the next run (Run 73), based on the results of previous attempts, with the absolute focus remaining on achieving robust parameter identifiability.\n\nInstructions for Run 73 of 100:\n\nThe **unwavering primary objective remains achieving parameter recovery >= 0.7 for *all* learnable parameters**. This is the critical benchmark for model usability. While improved BIC (lower is better) and accuracy (higher is better) are valuable secondary goals, they must not come at the expense of robust parameter recovery.\n\nThe previous run (Run 72) implemented a reference-dependent additive model (`U_accept = beta_value * gain_above_fair - beta_unfairness * loss_below_fair`). Despite the theoretical rationale that separating parameters into gain and loss domains relative to a fair share reference would create distinct influences, the results showed *extremely poor* parameter recovery for both parameters (beta_value: r=0.131, beta_unfairness: r=0.015). Furthermore, this model exhibited very poor overall fit (BIC: 600.81, Accuracy: 0.533), significantly worse than many earlier attempts. This indicates that this specific reference-dependent structure, while conceptually distinct, did not capture the underlying behavior well, leading to unidentifiable parameters. Poor model fit often directly results in poor parameter recovery.\n\nPrevious attempts using simple additive structures or ratio structures with linear, squared, or ratio-based penalty terms have also consistently failed to achieve robust parameter identifiability, suggesting these common forms may inherently lead to confounding when a 'value' and 'unfairness' parameter both influence utility.\n\nFor Run 73, we need to continue exploring structures that can both provide a reasonable fit to the data *and* create mathematically distinct influences for the 'value' and 'unfairness' parameters. The failure of the Run 72 model suggests that just changing the conceptual framework (additive vs. reference-dependent) isn't enough; the specific *functional forms* by which the parameters scale variables must ensure separability.\n\nLet's revisit an additive structure but incorporate a strongly non-linear penalty term in a novel way. The goal is to ensure that the influence of the 'unfairness' parameter grows much more rapidly or in a fundamentally different shape than the linear influence of the 'value' parameter across the range of possible offers.\n\nProposed Model Structure: An additive utility model with a linear value term and an **exponential penalty** term based on deviation below the fair share.\n`U_accept = beta_value * split_perc_self - beta_unfairness * exp(loss_below_fair)`\n\nHere:\nCalculate `fair_perc_self_calc` handling the `sum_tokens == 0` case (defaulting to 50.0).\nCalculate `loss_below_fair = max(0.0, fair_perc_self_calc - split_perc_self)`. This term is non-zero only for offers below or equal to the fair share.\nFinally, `U_accept = beta_value * split_perc_self - beta_unfairness * exp(loss_below_fair)`. Note the subtraction for the penalty.\n\nIn this structure, `beta_value` linearly scales the value derived from the offered percentage (`split_perc_self`). `beta_unfairness` scales a penalty that increases exponentially with the magnitude of the 'loss' or deviation below the fair share (`loss_below_fair`). The key hypothesis for improved identifiability is that this **exponential form** of the penalty creates a functional relationship between `loss_below_fair` and disutility that is dramatically non-linear and distinct from the linear relationship between `split_perc_self` and utility driven by `beta_value`. This aims to make the influence of `beta_value` and `beta_unfairness` on the overall utility profile easily separable during fitting and recovery tests, overcoming the limitations seen with linear or squared penalty terms.\n\nDesign the model using this additive structure with an exponential penalty: `U_accept = beta_value * split_perc_self - beta_unfairness * exp(loss_below_fair)`, where `loss_below_fair` is calculated as specified above using `fair_perc_self_calc` as the reference.\n\nFocus on clearly defining the `loss_below_fair` term and articulating in the summary how this specific structure, by combining a linear value term with an *exponential* unfairness penalty term, is intended to achieve robust parameter identifiability by creating mathematically distinct influence profiles for `beta_value` and `beta_unfairness` across different offers. Explain why this specific non-linear form is being tested as a potential way to overcome the identifiability failures seen in previous structures.\n\n*   **Key Inputs & Calculated Variables:** Use `split_perc_self`, `token_self`, `token_opp` as data variables. Calculate `sum_tokens`, `fair_perc_self_calc` (handling `sum_tokens == 0`), `loss_below_fair`, and `U_accept`. Include any other necessary intermediate variables.\n*   **Model Formula:** Define `U_accept` using the additive structure with exponential penalty: `U_accept = beta_value * split_perc_self - beta_unfairness * exp(loss_below_fair)`. Include calculation steps for derived variables *before* the formula for `U_accept`. Use clear mathematical notation within the <MODEL> tags (only the formula).\n*   **Learnable Parameters:** Exactly **2 learnable parameters**: `beta_value` (value sensitivity) and `beta_unfairness` (unfairness sensitivity). Choose descriptive, Python-safe names. Define clear, generous, finite numerical bounds. Non-negative bounds (e.g., `[0.0, 100.0]` for both) are theoretically appropriate and may aid recovery. Stick with `[0.0, 100.0]` for both.\n*   **Calculated Variables:** Include descriptions for *all* calculated variables used in the model (including `U_accept`, `sum_tokens`, `fair_perc_self_calc`, and `loss_below_fair`) with `source: \"calculated\"`. Include descriptions for all data variables used as inputs (`token_self`, `token_opp`, `split_perc_self`) with `source: \"data\"`.\n*   **Variable Descriptions:** Provide variable descriptions in JSON format between <VARIABLES> tags for *all* variables in the <MODEL> formula. Include source, range (with inclusive flags), distribution (if applicable), and learnable status. Remember variable names must exactly match the model.\n*   **Target Variable:** Specify \"accept\" using <target_variable> tags.\n*   **Summary:** Provide a concise summary between <SUMMARY> tags. Describe the model's core idea (additive structure, linear value term, exponential unfairness penalty based on deviation from fair share). Crucially, explain *how* this structure, by using the exponential function for the penalty term, is specifically intended to improve robust parameter identifiability by creating a mathematically distinct influence profile for `beta_unfairness` compared to the linear influence of `beta_value`, addressing the limitations of previous simple additive/ratio structures and the failed reference-dependent model.\n*   **Think Outside the Box:** Recognize that previous attempts with standard functional forms (linear, squared, ratio) have failed parameter recovery. The exponential function is a deliberate choice to introduce a different kind of non-linearity, explicitly attempting to create functional separability between parameters. Continue to consider non-obvious ways parameters might interact or influence decisions beyond simple linear combinations, as finding a structure that truly shines in parameter recovery often requires exploring less standard forms.\n\nAvailable Data Variables:\n- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.\n(Note: Use `split_perc_self` for the participant's proposed percentage share percentage).\n\nPlease think through this step by step, then provide your model specification and variable descriptions. Remember that robust parameter identifiability for *both* learnable parameters (>= 0.7 recovery for both) is the absolute priority. Your goal is to find a structure where both parameters' influences are clearly distinguishable across the range of possible offers, leading to reliable estimates and hopefully improved fit metrics (BIC and accuracy) as a result of capturing the underlying process more accurately.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "```json\n<MODEL>\nsum_tokens = token_self + token_opp\nfair_perc_self_calc = (token_self / sum_tokens) * 100.0\nloss_below_fair = max(0.0, fair_perc_self_calc - split_perc_self)\nU_accept = beta_value * split_perc_self - beta_unfairness * exp(loss_below_fair)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The proposed share for the participant in percentage (as presented by the opponent).\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"sum_tokens\": {\n      \"description\": \"The sum of tokens found by the participant and the opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fair_perc_self_calc\": {\n      \"description\": \"Calculated fair percentage share for the participant based on their token contribution. This is calculated as (token_self / sum_tokens) * 100.0. If sum_tokens is 0, the fair share is considered 50.0%.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"loss_below_fair\": {\n      \"description\": \"The magnitude of the percentage difference when the offered split_perc_self is below the calculated fair_perc_self_calc. Calculated as max(0.0, fair_perc_self_calc - split_perc_self).\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_value\": {\n      \"description\": \"Sensitivity parameter scaling the linear influence of the offered percentage (split_perc_self) on utility.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_unfairness\": {\n      \"description\": \"Sensitivity parameter scaling the exponential penalty applied when the offer is below the calculated fair share (loss_below_fair).\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U_accept\": {\n      \"description\": \"The utility of accepting the proposed offer.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nAn additive utility model predicting the participant's decision to accept or reject an offer as a responder. The utility of accepting is calculated as a combination of a linear gain term based on the offered percentage (split_perc_self), scaled by the learnable parameter beta_value, and an exponential penalty term for offers falling below a calculated fair share based on token contributions (loss_below_fair), scaled by the learnable parameter beta_unfairness. The model calculates a fair percentage (fair_perc_self_calc) based on token ratio (handling the zero sum case), and then determines the loss below this fair share. The exponential form of the unfairness penalty is specifically hypothesized to create a non-linear influence profile distinct from the linear value term, aiming to improve the identifiability and separability of the beta_value and beta_unfairness parameters during model fitting and recovery tests compared to models with linear or squared penalty terms. The calculated utility U_accept is then transformed into a probability of acceptance using a logistic function.\n</SUMMARY>\n```"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['beta_value', 'beta_unfairness']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                sum_tokens = token_self + token_opp\nfair_perc_self_calc = (token_self / sum_tokens) * 100.0\nloss_below_fair = max(0.0, fair_perc_self_calc - split_perc_self)\nU_accept = beta_value * split_perc_self - beta_unfairness * exp(loss_below_fair)\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The proposed share for the participant in percentage (as presented by the opponent).\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"sum_tokens\": {\n      \"description\": \"The sum of tokens found by the participant and the opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fair_perc_self_calc\": {\n      \"description\": \"Calculated fair percentage share for the participant based on their token contribution. This is calculated as (token_self / sum_tokens) * 100.0. If sum_tokens is 0, the fair share is considered 50.0%.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"loss_below_fair\": {\n      \"description\": \"The magnitude of the percentage difference when the offered split_perc_self is below the calculated fair_perc_self_calc. Calculated as max(0.0, fair_perc_self_calc - split_perc_self).\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_value\": {\n      \"description\": \"Sensitivity parameter scaling the linear influence of the offered percentage (split_perc_self) on utility.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_unfairness\": {\n      \"description\": \"Sensitivity parameter scaling the exponential penalty applied when the offer is below the calculated fair share (loss_below_fair).\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U_accept\": {\n      \"description\": \"The utility of accepting the proposed offer.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "python\nimport json\nimport math\n\ndef simulate_model(trial_data, beta_value=1, beta_unfairness=1):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        split_perc_self = trial.get(\"split_perc_self\", 0)\n\n        sum_tokens = token_self + token_opp\n\n        if sum_tokens == 0:\n            fair_perc_self_calc = 50.0\n        else:\n            fair_perc_self_calc = (token_self / sum_tokens) * 100.0\n\n        loss_below_fair = max(0.0, fair_perc_self_calc - split_perc_self)\n\n        U_accept = beta_value * split_perc_self - beta_unfairness * math.exp(loss_below_fair)\n\n        model_predictions.append(U_accept)\n    return model_predictions\n```",
      "timestamp": 1746103343.9968488
    }
  ],
  "learnable_parameters": {
    "beta_value": {
      "description": "Sensitivity parameter scaling the linear influence of the offered percentage (split_perc_self) on utility.",
      "range": {
        "min": 0.0,
        "max": 100.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta_unfairness": {
      "description": "Sensitivity parameter scaling the exponential penalty applied when the offer is below the calculated fair share (loss_below_fair).",
      "range": {
        "min": 0.0,
        "max": 100.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "sum_tokens = token_self + token_opp\nfair_perc_self_calc = (token_self / sum_tokens) * 100.0\nloss_below_fair = max(0.0, fair_perc_self_calc - split_perc_self)\nU_accept = beta_value * split_perc_self - beta_unfairness * exp(loss_below_fair)",
  "variable_descriptions": {
    "token_self": {
      "description": "Number of tokens found by the participant.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "split_perc_self": {
      "description": "The proposed share for the participant in percentage (as presented by the opponent).",
      "range": {
        "min": 0.0,
        "max": 100.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "sum_tokens": {
      "description": "The sum of tokens found by the participant and the opponent.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "fair_perc_self_calc": {
      "description": "Calculated fair percentage share for the participant based on their token contribution. This is calculated as (token_self / sum_tokens) * 100.0. If sum_tokens is 0, the fair share is considered 50.0%.",
      "range": {
        "min": 0.0,
        "max": 100.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "loss_below_fair": {
      "description": "The magnitude of the percentage difference when the offered split_perc_self is below the calculated fair_perc_self_calc. Calculated as max(0.0, fair_perc_self_calc - split_perc_self).",
      "range": {
        "min": 0.0,
        "max": 100.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "beta_value": {
      "description": "Sensitivity parameter scaling the linear influence of the offered percentage (split_perc_self) on utility.",
      "range": {
        "min": 0.0,
        "max": 100.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta_unfairness": {
      "description": "Sensitivity parameter scaling the exponential penalty applied when the offer is below the calculated fair share (loss_below_fair).",
      "range": {
        "min": 0.0,
        "max": 100.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "U_accept": {
      "description": "The utility of accepting the proposed offer.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "An additive utility model predicting the participant's decision to accept or reject an offer as a responder. The utility of accepting is calculated as a combination of a linear gain term based on the offered percentage (split_perc_self), scaled by the learnable parameter beta_value, and an exponential penalty term for offers falling below a calculated fair share based on token contributions (loss_below_fair), scaled by the learnable parameter beta_unfairness. The model calculates a fair percentage (fair_perc_self_calc) based on token ratio (handling the zero sum case), and then determines the loss below this fair share. The exponential form of the unfairness penalty is specifically hypothesized to create a non-linear influence profile distinct from the linear value term, aiming to improve the identifiability and separability of the beta_value and beta_unfairness parameters during model fitting and recovery tests compared to models with linear or squared penalty terms. The calculated utility U_accept is then transformed into a probability of acceptance using a logistic function.",
  "target_variable": "accept",
  "full_reasoning": "```json\n<MODEL>\nsum_tokens = token_self + token_opp\nfair_perc_self_calc = (token_self / sum_tokens) * 100.0\nloss_below_fair = max(0.0, fair_perc_self_calc - split_perc_self)\nU_accept = beta_value * split_perc_self - beta_unfairness * exp(loss_below_fair)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The proposed share for the participant in percentage (as presented by the opponent).\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"sum_tokens\": {\n      \"description\": \"The sum of tokens found by the participant and the opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fair_perc_self_calc\": {\n      \"description\": \"Calculated fair percentage share for the participant based on their token contribution. This is calculated as (token_self / sum_tokens) * 100.0. If sum_tokens is 0, the fair share is considered 50.0%.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"loss_below_fair\": {\n      \"description\": \"The magnitude of the percentage difference when the offered split_perc_self is below the calculated fair_perc_self_calc. Calculated as max(0.0, fair_perc_self_calc - split_perc_self).\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_value\": {\n      \"description\": \"Sensitivity parameter scaling the linear influence of the offered percentage (split_perc_self) on utility.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_unfairness\": {\n      \"description\": \"Sensitivity parameter scaling the exponential penalty applied when the offer is below the calculated fair share (loss_below_fair).\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U_accept\": {\n      \"description\": \"The utility of accepting the proposed offer.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nAn additive utility model predicting the participant's decision to accept or reject an offer as a responder. The utility of accepting is calculated as a combination of a linear gain term based on the offered percentage (split_perc_self), scaled by the learnable parameter beta_value, and an exponential penalty term for offers falling below a calculated fair share based on token contributions (loss_below_fair), scaled by the learnable parameter beta_unfairness. The model calculates a fair percentage (fair_perc_self_calc) based on token ratio (handling the zero sum case), and then determines the loss below this fair share. The exponential form of the unfairness penalty is specifically hypothesized to create a non-linear influence profile distinct from the linear value term, aiming to improve the identifiability and separability of the beta_value and beta_unfairness parameters during model fitting and recovery tests compared to models with linear or squared penalty terms. The calculated utility U_accept is then transformed into a probability of acceptance using a logistic function.\n</SUMMARY>\n```",
  "prediction_type": "utility",
  "current_model": "Specification: sum_tokens = token_self + token_opp\nfair_perc_self_calc = (token_self / sum_tokens) * 100.0\nloss_below_fair = max(0.0, fair_perc_self_calc - split_perc_self)\nU_accept = beta_value * split_perc_self - beta_unfairness * exp(loss_below_fair)\nSummary: An additive utility model predicting the participant's decision to accept or reject an offer as a responder. The utility of accepting is calculated as a combination of a linear gain term based on the offered percentage (split_perc_self), scaled by the learnable parameter beta_value, and an exponential penalty term for offers falling below a calculated fair share based on token contributions (loss_below_fair), scaled by the learnable parameter beta_unfairness. The model calculates a fair percentage (fair_perc_self_calc) based on token ratio (handling the zero sum case), and then determines the loss below this fair share. The exponential form of the unfairness penalty is specifically hypothesized to create a non-linear influence profile distinct from the linear value term, aiming to improve the identifiability and separability of the beta_value and beta_unfairness parameters during model fitting and recovery tests compared to models with linear or squared penalty terms. The calculated utility U_accept is then transformed into a probability of acceptance using a logistic function.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, beta_value=1, beta_unfairness=1):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        split_perc_self = trial.get(\"split_perc_self\", 0)\n\n        sum_tokens = token_self + token_opp\n\n        if sum_tokens == 0:\n            fair_perc_self_calc = 50.0\n        else:\n            fair_perc_self_calc = (token_self / sum_tokens) * 100.0\n\n        loss_below_fair = max(0.0, fair_perc_self_calc - split_perc_self)\n\n        U_accept = beta_value * split_perc_self - beta_unfairness * math.exp(loss_below_fair)\n\n        model_predictions.append(U_accept)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.4307081807081807,
  "group_accuracies": {
    "Control": 0.36304909560723514,
    "Cocaine": 0.4913194444444444
  },
  "group_parameter_averages": {
    "Control": {
      "beta_value": 54.17201773277935,
      "beta_unfairness": 48.90560251184192
    },
    "Cocaine": {
      "beta_value": 51.639943113309585,
      "beta_unfairness": 50.84976301512175
    }
  },
  "fitting_results": [
    {
      "beta_value": 87.4289703799971,
      "beta_unfairness": 4.6044472558414595,
      "success": true,
      "log_likelihood": -69.07755278652132,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 1.4997851696116338,
      "beta_unfairness": 67.2876269985897,
      "success": true,
      "log_likelihood": -414.4653167371285,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 52.86762016252528,
      "beta_unfairness": 81.14558739287206,
      "success": true,
      "log_likelihood": -437.49116766716895,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 60.84208152395972,
      "beta_unfairness": 91.78767909040985,
      "success": true,
      "log_likelihood": -345.38776394700693,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 47.907210198381875,
      "beta_unfairness": 75.14650387709084,
      "success": true,
      "log_likelihood": -368.4136148770475,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 43.247743389291585,
      "beta_unfairness": 60.7321042283273,
      "success": true,
      "log_likelihood": -529.5945713873308,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 82.44279583253675,
      "beta_unfairness": 86.5506699447677,
      "success": true,
      "log_likelihood": -828.9306334778568,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 66.60748223447023,
      "beta_unfairness": 79.37041101470913,
      "success": true,
      "log_likelihood": -552.6204223173712,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3333333333333333,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 50.04768121862298,
      "beta_unfairness": 37.222708652586014,
      "success": true,
      "log_likelihood": -828.9306334778568,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 41.47012308522314,
      "beta_unfairness": 41.64897772403631,
      "success": true,
      "log_likelihood": -322.3619130169666,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 34.255047842325304,
      "beta_unfairness": 44.66426679971674,
      "success": true,
      "log_likelihood": -368.4136148770475,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 43.12526783183465,
      "beta_unfairness": 23.948071881815036,
      "success": true,
      "log_likelihood": -92.10340371656179,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 94.37641491165493,
      "beta_unfairness": 94.55037687866356,
      "success": true,
      "log_likelihood": -345.387763947007,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 57.38652819832756,
      "beta_unfairness": 10.095852113105085,
      "success": true,
      "log_likelihood": -828.9306334778568,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 46.367872725655786,
      "beta_unfairness": 74.9139262114227,
      "success": true,
      "log_likelihood": -828.9306334778568,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 42.1623976912094,
      "beta_unfairness": 68.82856897516167,
      "success": true,
      "log_likelihood": -828.9306334778568,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 7.981353864307983,
      "beta_unfairness": 23.81783829753511,
      "success": true,
      "log_likelihood": -828.9306334778568,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 24.922910698331314,
      "beta_unfairness": 50.20245416233884,
      "success": true,
      "log_likelihood": -713.8013788276544,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.1388888888888889,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 84.44347579043144,
      "beta_unfairness": 1.102241587448538,
      "success": true,
      "log_likelihood": -736.8272297576949,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.1111111111111111,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 56.081898098622396,
      "beta_unfairness": 20.45867899463826,
      "success": true,
      "log_likelihood": -828.9306334778568,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 71.3835792426762,
      "beta_unfairness": 0.25894608982350853,
      "success": true,
      "log_likelihood": -460.51701859720936,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 91.84163418779687,
      "beta_unfairness": 1.8367862106540733,
      "success": true,
      "log_likelihood": -713.8013788276544,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.1388888888888889,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 99.66573317823352,
      "beta_unfairness": 35.3817284162254,
      "success": true,
      "log_likelihood": -299.33606208692606,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 75.84839067534244,
      "beta_unfairness": 35.42976215601507,
      "success": true,
      "log_likelihood": -437.49116766716895,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 99.49264362007223,
      "beta_unfairness": 50.26044225461873,
      "success": true,
      "log_likelihood": -414.46531673712843,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 6.726589568031849,
      "beta_unfairness": 91.3469986367777,
      "success": true,
      "log_likelihood": -483.5428695272499,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 14.803424989192793,
      "beta_unfairness": 51.63559856696948,
      "success": true,
      "log_likelihood": -460.5170185972094,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 42.21250594831045,
      "beta_unfairness": 61.10087121970449,
      "success": true,
      "log_likelihood": -230.25850929680473,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 41.412064372165744,
      "beta_unfairness": 1.3205023135423821,
      "success": true,
      "log_likelihood": -736.8272297576949,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.1111111111111111,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 60.307795163906,
      "beta_unfairness": 41.7865815805065,
      "success": true,
      "log_likelihood": -644.7238260375331,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.2222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 90.94267644477269,
      "beta_unfairness": 87.04518993961082,
      "success": true,
      "log_likelihood": -828.9306334778568,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 41.09741359120035,
      "beta_unfairness": 16.344144157879757,
      "success": true,
      "log_likelihood": -69.07755278652138,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 3.674628473485231,
      "beta_unfairness": 35.11025159380061,
      "success": true,
      "log_likelihood": -345.3877639470071,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 72.84232883977111,
      "beta_unfairness": 93.28161966439386,
      "success": true,
      "log_likelihood": -322.3619130169665,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 69.64637492918023,
      "beta_unfairness": 56.269341478337395,
      "success": true,
      "log_likelihood": -828.9306334778568,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 38.71802521065171,
      "beta_unfairness": 77.88701779466935,
      "success": true,
      "log_likelihood": -529.5945713873307,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 93.63132196746682,
      "beta_unfairness": 20.429108120152407,
      "success": true,
      "log_likelihood": -575.6462732474116,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 24.927230902075735,
      "beta_unfairness": 11.650291614669861,
      "success": true,
      "log_likelihood": -414.46531673712843,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 4.348977230564266,
      "beta_unfairness": 90.49511411140114,
      "success": true,
      "log_likelihood": -552.6204223173712,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3333333333333333,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 98.30132750996788,
      "beta_unfairness": 12.703651591107235,
      "success": true,
      "log_likelihood": -759.8530806877353,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.08333333333333333,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 95.31165340519047,
      "beta_unfairness": 94.66475266681881,
      "success": true,
      "log_likelihood": -506.5687204572903,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 9.135761484740701,
      "beta_unfairness": 77.3946893719321,
      "success": true,
      "log_likelihood": -184.20680743672372,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 57.66002072739571,
      "beta_unfairness": 21.228526378515955,
      "success": true,
      "log_likelihood": -805.9047825478164,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.027777777777777776,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 21.199580054899116,
      "beta_unfairness": 78.85059949617539,
      "success": true,
      "log_likelihood": -460.51701859720936,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 2.9228872707481313,
      "beta_unfairness": 11.073174728050272,
      "success": true,
      "log_likelihood": -506.5687204572903,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 75.74491251373277,
      "beta_unfairness": 4.148841699471584,
      "success": true,
      "log_likelihood": -598.6721241774521,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.2777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 24.795304059602163,
      "beta_unfairness": 45.61028219695822,
      "success": true,
      "log_likelihood": -437.49116766716884,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 88.49386229034484,
      "beta_unfairness": 37.509425732736034,
      "success": true,
      "log_likelihood": -322.3619130169666,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 77.5787821545107,
      "beta_unfairness": 90.87832619384426,
      "success": true,
      "log_likelihood": -345.3877639470071,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 42.85617013257066,
      "beta_unfairness": 51.76623552252154,
      "success": true,
      "log_likelihood": -437.4911676671689,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 9.439097633617644,
      "beta_unfairness": 83.79996934227296,
      "success": true,
      "log_likelihood": -575.6462732474116,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 29.873765533252584,
      "beta_unfairness": 9.691936603035234,
      "success": true,
      "log_likelihood": -115.12925464660226,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 32.83274503016401,
      "beta_unfairness": 16.686217750922694,
      "success": true,
      "log_likelihood": -437.49116766716895,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 70.4792913779451,
      "beta_unfairness": 60.555938452216566,
      "success": true,
      "log_likelihood": -483.54286952724976,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 57.25122791755788,
      "beta_unfairness": 32.31780800659746,
      "success": true,
      "log_likelihood": -322.36191301696647,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 72.49068053536972,
      "beta_unfairness": 85.55545284953196,
      "success": true,
      "log_likelihood": -276.31021115688554,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 65.9034676971901,
      "beta_unfairness": 51.30741184722051,
      "success": true,
      "log_likelihood": -230.25850929680462,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 51.285605590410164,
      "beta_unfairness": 53.610851298030184,
      "success": true,
      "log_likelihood": -736.8272297576949,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.1111111111111111,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 79.31292582956019,
      "beta_unfairness": 22.83120647608785,
      "success": true,
      "log_likelihood": -92.10340371656181,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 89.66510496931183,
      "beta_unfairness": 94.0375272805666,
      "success": true,
      "log_likelihood": -667.7496769675735,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.19444444444444445,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 85.67728558636908,
      "beta_unfairness": 38.88349311229524,
      "success": true,
      "log_likelihood": -506.5687204572903,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 44.77365076785406,
      "beta_unfairness": 74.30153418952405,
      "success": true,
      "log_likelihood": -414.4653167371285,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 22.029495622817375,
      "beta_unfairness": 72.12063380759477,
      "success": true,
      "log_likelihood": -69.07755278652142,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 65.51297200377653,
      "beta_unfairness": 1.9629369172262212,
      "success": true,
      "log_likelihood": -368.4136148770475,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 75.96240276596036,
      "beta_unfairness": 18.22236022351136,
      "success": true,
      "log_likelihood": -184.20680743672384,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 45.00322248796773,
      "beta_unfairness": 23.681501199382193,
      "success": true,
      "log_likelihood": -460.5170185972094,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 91.38715798247773,
      "beta_unfairness": 53.95564380966079,
      "success": true,
      "log_likelihood": -759.8530806877354,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.08333333333333333,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 77.61746171668653,
      "beta_unfairness": 48.59705488462404,
      "success": true,
      "log_likelihood": -713.8013788276543,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.1388888888888889,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 48.40561349535232,
      "beta_unfairness": 77.64982956149451,
      "success": true,
      "log_likelihood": -460.5170185972093,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 32.05876331111829,
      "beta_unfairness": 78.40042968664072,
      "success": true,
      "log_likelihood": -759.8530806877353,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.08333333333333333,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 12.58733872777318,
      "beta_unfairness": 47.77692970781939,
      "success": true,
      "log_likelihood": -92.10340371656183,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 75.54595543871842,
      "beta_unfairness": 25.25777903588491,
      "success": true,
      "log_likelihood": -115.12925464660226,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.7068074359579013,
      "beta_unfairness": 64.01219858957616,
      "success": true,
      "log_likelihood": -437.4911676671689,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 93.28059426548029,
      "beta_unfairness": 89.60731023443947,
      "success": true,
      "log_likelihood": -644.7238260375331,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.2222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 59.03976095616837,
      "beta_unfairness": 71.08781794769918,
      "success": true,
      "log_likelihood": -414.46531673712843,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 27.127260465544044,
      "beta_unfairness": 82.60161149098695,
      "success": true,
      "log_likelihood": -575.6462732474116,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 15.289540517295631,
      "beta_unfairness": 91.35090284800667,
      "success": true,
      "log_likelihood": -782.8789316177758,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.05555555555555555,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 31.95025648569353,
      "beta_unfairness": 28.674664929284155,
      "success": true,
      "log_likelihood": -46.051701856480925,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 50.88251105552506,
      "beta_unfairness": 67.60729419254265,
      "success": true,
      "log_likelihood": -506.5687204572903,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 76.45253034414532,
      "beta_unfairness": 43.80244302926255,
      "success": true,
      "log_likelihood": -69.07755278652135,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 73.27564412398402,
      "beta_unfairness": 60.002530225751514,
      "success": true,
      "log_likelihood": -437.4911676671689,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 38.52653507892446,
      "beta_unfairness": 23.50630091649798,
      "success": true,
      "log_likelihood": -759.8530806877354,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.08333333333333333,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 45.47723141951171,
      "beta_unfairness": 47.56051880355875,
      "success": true,
      "log_likelihood": -92.10340371656179,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 56.25521371771555,
      "beta_unfairness": 84.1988744764568,
      "success": true,
      "log_likelihood": -414.4653167371284,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 37.23245490162795,
      "beta_unfairness": 19.260115287402037,
      "success": true,
      "log_likelihood": -506.5687204572903,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 12.155929947673316,
      "beta_unfairness": 64.07423785800016,
      "success": true,
      "log_likelihood": -92.10340371656183,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 44.60054899315483,
      "beta_unfairness": 75.76653256787031,
      "success": true,
      "log_likelihood": -575.6462732474117,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 8.597579083728114,
      "beta_unfairness": 37.230938892478974,
      "success": true,
      "log_likelihood": -184.20680743672372,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 95.39392561956356,
      "beta_unfairness": 42.627260367390974,
      "success": true,
      "log_likelihood": -782.8789316177758,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.05555555555555555,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 43.93154447487232,
      "beta_unfairness": 27.432102708162176,
      "success": true,
      "log_likelihood": -391.4394658070879,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 99.85467005463504,
      "beta_unfairness": 29.343637748579134,
      "success": true,
      "log_likelihood": -575.6462732474116,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "beta_value": {
        "r": 0.17952795104094188,
        "p": 0.07389559293920749
      },
      "beta_unfairness": {
        "r": 0.0003521612964923729,
        "p": 0.9972254919655474
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 950.9738946724698,
  "bic_Control": 1063.143271219475,
  "bic_Cocaine": 850.4888281824443,
  "bic_results": {
    "average_bic": 950.9738946724698,
    "individual_bics": [
      145.32214344995486,
      836.0976713511692,
      882.1493732112501,
      697.9425657709261,
      743.9942676310072,
      1066.3561806515738,
      1665.0283048326257,
      1112.4078825116546,
      1665.0283048326257,
      651.8908639108454,
      743.9942676310072,
      191.3738453100358,
      697.9425657709262,
      1665.0283048326257,
      1665.0283048326257,
      1665.0283048326257,
      1665.0283048326257,
      1434.769795532221,
      1480.821497392302,
      1665.0283048326257,
      928.2010750713309,
      1434.769795532221,
      605.8391620507643,
      882.1493732112501,
      836.0976713511691,
      974.252776931412,
      928.201075071331,
      467.6840564705217,
      1480.821497392302,
      1296.6146899519783,
      1665.0283048326257,
      145.32214344995498,
      697.9425657709264,
      651.8908639108453,
      1665.0283048326257,
      1066.3561806515736,
      1158.4595843717354,
      836.0976713511691,
      1112.4078825116546,
      1526.8731992523828,
      1020.3044787914928,
      375.58065275035966,
      1618.976602972545,
      928.2010750713309,
      1020.3044787914928,
      1204.5112862318165,
      882.1493732112499,
      651.8908639108454,
      697.9425657709264,
      882.14937321125,
      1158.4595843717354,
      237.42554717011674,
      882.1493732112501,
      974.2527769314117,
      651.8908639108452,
      559.7874601906833,
      467.68405647052145,
      1480.821497392302,
      191.37384531003585,
      1342.6663918120591,
      1020.3044787914928,
      836.0976713511692,
      145.32214344995506,
      743.9942676310072,
      375.5806527503599,
      928.201075071331,
      1526.873199252383,
      1434.7697955322208,
      928.2010750713308,
      1526.8731992523828,
      191.37384531003588,
      237.42554717011674,
      882.14937321125,
      1296.6146899519783,
      836.0976713511691,
      1158.4595843717354,
      1572.9249011124639,
      99.27044158987407,
      1020.3044787914928,
      145.32214344995492,
      882.14937321125,
      1526.873199252383,
      191.3738453100358,
      836.097671351169,
      1020.3044787914928,
      191.37384531003588,
      1158.4595843717357,
      375.58065275035966,
      1572.9249011124639,
      790.045969491088,
      1158.4595843717354
    ],
    "group_enabled": true,
    "group_bics": {
      "Control": [
        145.32214344995486,
        836.0976713511692,
        882.1493732112501,
        697.9425657709261,
        743.9942676310072,
        1066.3561806515738,
        1665.0283048326257,
        1112.4078825116546,
        1665.0283048326257,
        651.8908639108454,
        743.9942676310072,
        191.3738453100358,
        697.9425657709262,
        1665.0283048326257,
        1665.0283048326257,
        1665.0283048326257,
        1665.0283048326257,
        1434.769795532221,
        1480.821497392302,
        1665.0283048326257,
        928.2010750713309,
        1434.769795532221,
        605.8391620507643,
        882.1493732112501,
        836.0976713511691,
        974.252776931412,
        928.201075071331,
        467.6840564705217,
        1480.821497392302,
        1296.6146899519783,
        1665.0283048326257,
        145.32214344995498,
        697.9425657709264,
        651.8908639108453,
        1665.0283048326257,
        1066.3561806515736,
        1158.4595843717354,
        836.0976713511691,
        1112.4078825116546,
        1526.8731992523828,
        1020.3044787914928,
        375.58065275035966,
        1618.976602972545
      ],
      "Cocaine": [
        928.2010750713309,
        1020.3044787914928,
        1204.5112862318165,
        882.1493732112499,
        651.8908639108454,
        697.9425657709264,
        882.14937321125,
        1158.4595843717354,
        237.42554717011674,
        882.1493732112501,
        974.2527769314117,
        651.8908639108452,
        559.7874601906833,
        467.68405647052145,
        1480.821497392302,
        191.37384531003585,
        1342.6663918120591,
        1020.3044787914928,
        836.0976713511692,
        145.32214344995506,
        743.9942676310072,
        375.5806527503599,
        928.201075071331,
        1526.873199252383,
        1434.7697955322208,
        928.2010750713308,
        1526.8731992523828,
        191.37384531003588,
        237.42554717011674,
        882.14937321125,
        1296.6146899519783,
        836.0976713511691,
        1158.4595843717354,
        1572.9249011124639,
        99.27044158987407,
        1020.3044787914928,
        145.32214344995492,
        882.14937321125,
        1526.873199252383,
        191.3738453100358,
        836.097671351169,
        1020.3044787914928,
        191.37384531003588,
        1158.4595843717357,
        375.58065275035966,
        1572.9249011124639,
        790.045969491088,
        1158.4595843717354
      ]
    },
    "num_parameters": 2,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- beta_value: r = 0.180\n- beta_unfairness: r = 0.000",
  "previous_models": [
    "Specification: sum_tokens = token_self + token_opp\nfair_perc_self_calc = (token_self / sum_tokens) * 100.0\nloss_below_fair = max(0.0, fair_perc_self_calc - split_perc_self)\nU_accept = beta_value * split_perc_self - beta_unfairness * exp(loss_below_fair)\nSummary: An additive utility model predicting the participant's decision to accept or reject an offer as a responder. The utility of accepting is calculated as a combination of a linear gain term based on the offered percentage (split_perc_self), scaled by the learnable parameter beta_value, and an exponential penalty term for offers falling below a calculated fair share based on token contributions (loss_below_fair), scaled by the learnable parameter beta_unfairness. The model calculates a fair percentage (fair_perc_self_calc) based on token ratio (handling the zero sum case), and then determines the loss below this fair share. The exponential form of the unfairness penalty is specifically hypothesized to create a non-linear influence profile distinct from the linear value term, aiming to improve the identifiability and separability of the beta_value and beta_unfairness parameters during model fitting and recovery tests compared to models with linear or squared penalty terms. The calculated utility U_accept is then transformed into a probability of acceptance using a logistic function.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 950.9738946724698\nOverall Accuracy: 0.4307\nGroup Accuracies:\n- Control: 0.3630\n- Cocaine: 0.4913\n\nParameter Recovery:\n- beta_value: r = 0.180\n- beta_unfairness: r = 0.000"
  ]
}