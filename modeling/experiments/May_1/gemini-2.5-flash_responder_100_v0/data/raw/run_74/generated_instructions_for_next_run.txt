Okay, here are the improved instructions for the next run (Run 75 of 100), based on the results of recent attempts.

The **unwavering primary objective remains achieving parameter recovery >= 0.7 for *all* learnable parameters**. This is the critical benchmark for model usability. While improved BIC (lower is better) and accuracy (higher is better) are valuable secondary goals, they must not come at the expense of robust parameter recovery. The model tested in the previous run, the multiplicative model with exponential decay (`U_accept = beta_value * split_perc_self * exp(-beta_unfairness * loss_below_fair)`), achieved a very good BIC (65.61) compared to prior additive models, but critically failed parameter recovery for *both* parameters (r = -0.012 and r = 0.099). This indicates that despite potentially capturing some aspect of the data structure better (reflected in BIC), this specific multiplicative functional form still results in parameters whose influences are too confounded to be reliably estimated. The model is unusable without robust parameter recovery.

Previous attempts across various additive structures have also consistently failed parameter identifiability (recovery well below 0.7 for at least one parameter). This persistent failure pattern suggests that disentangling 'value' and 'unfairness' sensitivities is difficult in this task context, regardless of simple additive or the previous multiplicative exponential structure.

For Run 75, we will continue exploring multiplicative or interactive structures, as the previous multiplicative model's low BIC indicates this direction might be promising *if* identifiability can be solved. The problem isn't necessarily the multiplicative principle itself, but likely the specific way parameters and variables combine within the function. We need a structure where the influence of each parameter is distinct enough to be reliably estimated.

Proposed Model Structure: A multiplicative utility model where the participant's proposed percentage (`split_perc_self`) is scaled by a factor that represents their value sensitivity, *adjusted* downwards based on unfairness.

`U_accept = split_perc_self * (beta_value - beta_unfairness * loss_below_fair)`

Here:
Calculate `fair_perc_self_calc` handling the `sum_tokens == 0` case (defaulting to 50.0), using `token_self` and `token_opp`.
Calculate `loss_below_fair = max(0.0, fair_perc_self_calc - split_perc_self)`. This term is non-zero only for offers below or equal to the fair share.
The term `(beta_value - beta_unfairness * loss_below_fair)` represents a variable scaling factor applied to `split_perc_self`. `beta_value` sets the base level of this scaling factor (when offers are fair or better). `beta_unfairness` dictates how much this scaling factor is linearly reduced as `loss_below_fair` increases.
Finally, `U_accept = split_perc_self * (beta_value - beta_unfairness * loss_below_fair)`. Note the multiplication of `split_perc_self` by this adjusted scaling factor.

In this structure, `beta_value` primarily influences the utility of fair or better offers (where `loss_below_fair = 0`) and contributes to the baseline scaling factor. `beta_unfairness` specifically influences how the scaling factor is reduced for unfair offers, thereby affecting the utility of offers below the fair share. This separation in how parameters contribute to the multiplicative scaling factor, and how that factor then scales the core offer percentage, is hypothesized to create more distinct parameter influences across the range of observed offers compared to previous structures, thus improving robust parameter identifiability.

Design the model using this multiplicative structure: `U_accept = split_perc_self * (beta_value - beta_unfairness * loss_below_fair)`, where `loss_below_fair` and `fair_perc_self_calc` are calculated as specified above using `token_self`, `token_opp`, and `split_perc_self`.

Focus on clearly defining all intermediate terms and articulating in the summary how this specific structure, by calculating a composite scaling factor `(beta_value - beta_unfairness * loss_below_fair)` and multiplying it by `split_perc_self`, is intended to achieve robust parameter identifiability by creating mathematically distinct and interactive influence profiles for `beta_value` and `beta_unfairness` across different offers, addressing the persistent identifiability failures seen in previous models. `beta_value` represents a base value sensitivity, and `beta_unfairness` represents how strongly increasing unfairness *reduces* this sensitivity before it scales the offer percentage.

*   **Key Inputs & Calculated Variables:** Use `split_perc_self`, `token_self`, `token_opp` as data variables. Calculate `sum_tokens`, `fair_perc_self_calc` (handling `sum_tokens == 0`), `loss_below_fair`, and `U_accept`. Include any other necessary intermediate variables like the scaling factor calculation if explicitly used in the <MODEL> tags.
*   **Model Formula:** Define `U_accept` using the structure: `sum_tokens = token_self + token_opp`, `fair_perc_self_calc = (token_self / sum_tokens) * 100.0` (handle `sum_tokens == 0`), `loss_below_fair = max(0.0, fair_perc_self_calc - split_perc_self)`, `U_accept = split_perc_self * (beta_value - beta_unfairness * loss_below_fair)`. Include calculation steps for derived variables *before* the formula for `U_accept`. Use clear mathematical notation within the <MODEL> tags (only the formula).
*   **Learnable Parameters:** Exactly **2 learnable parameters**: `beta_value` (base value sensitivity / scaling intercept) and `beta_unfairness` (sensitivity to unfairness reducing scaling factor). Choose descriptive, Python-safe names. Define clear, generous, finite numerical bounds. Non-negative bounds (e.g., `[0.0, 100.0]` for both) are theoretically appropriate and may aid recovery. Stick with `[0.0, 100.0]` for both.
*   **Calculated Variables:** Include descriptions for *all* calculated variables used in the model (including `U_accept`, `sum_tokens`, `fair_perc_self_calc`, and `loss_below_fair`) with `source: "calculated"`. Include descriptions for all data variables used as inputs (`token_self`, `token_opp`, `split_perc_self`) with `source: "data"`.
*   **Variable Descriptions:** Provide variable descriptions in JSON format between <VARIABLES> tags for *all* variables in the <MODEL> formula. Include source, range (with inclusive flags), distribution (if applicable), and learnable status. Remember variable names must exactly match the model.
*   **Target Variable:** Specify "accept" using <target_variable> tags.
*   **Summary:** Provide a concise summary between <SUMMARY> tags. Describe the model's core idea (multiplicative structure where `split_perc_self` is scaled by an adjusted sensitivity factor). Crucially, explain *how* this specific structure, where the scaling factor `(beta_value - beta_unfairness * loss_below_fair)` combines the parameters before multiplying `split_perc_self`, is specifically intended to improve robust parameter identifiability by creating mathematically distinct and *interacting* influence profiles for `beta_value` and `beta_unfairness`, addressing the limitations and failures of previous structures.
*   **Think Outside the Box:** Recognize that previous attempts with standard additive structures and specific multiplicative/exponential forms have consistently failed parameter recovery. The proposed structure is another attempt at a non-additive interaction principle. Continue to consider non-obvious ways parameters might interact or influence decisions beyond simple additive or standard multiplicative combinations, as finding a structure that truly shines in parameter recovery often requires exploring less standard structural principles like this adjusted scaling factor approach or others (e.g., thresholding, gating, or more complex non-linear interactions).

Available Data Variables:
- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.
(Note: Use `split_perc_self` for the participant's proposed percentage share percentage).

Please think through this step by step, then provide your model specification and variable descriptions. Remember that robust parameter identifiability for *both* learnable parameters (>= 0.7 recovery for both) is the absolute priority. Your goal is to find a structure where both parameters' influences are clearly distinguishable and interact in a way that allows for reliable estimation, ideally leading to improved fit metrics (BIC and accuracy) as a result of capturing the underlying process more accurately.