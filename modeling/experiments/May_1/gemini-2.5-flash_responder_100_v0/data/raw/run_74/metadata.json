{
  "task_description": "In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "Okay, here are the improved instructions for the next run (Run 74 of 100), based on the results of recent attempts.\n\nThe **unwavering primary objective remains achieving parameter recovery >= 0.7 for *all* learnable parameters**. This is the critical benchmark for model usability. While improved BIC (lower is better) and accuracy (higher is better) are valuable secondary goals, they must not come at the expense of robust parameter recovery.\n\nThe model tested in the previous run, an additive utility model with an exponential penalty term (`U_accept = beta_value * split_perc_self - beta_unfairness * exp(loss_below_fair)`), performed extremely poorly on all metrics (Average BIC: 950.97, Accuracy: 0.431). Crucially, parameter recovery was abysmal (beta_value: r=0.180, beta_unfairness: r=0.000). This demonstrates that this specific functional form, despite the hypothesis that the exponential term would create separability, failed entirely to capture the underlying behavior or yield identifiable parameters.\n\nPrevious attempts using simple additive structures (`U_accept = beta_value * split_perc_self - beta_unfairness * penalty`) with linear, squared, or ratio-based penalties have also consistently shown poor parameter identifiability (recovery well below 0.7 for at least one parameter, often both). Even the reference-dependent additive structure (`U_accept = beta_value * gain_above_fair - beta_unfairness * loss_below_fair`) in a recent run failed dramatically (recovery r=0.131 and r=0.015).\n\nThese repeated failures across various additive structures (simple linear, squared, ratio penalty, exponential penalty, reference-dependent gain/loss) strongly suggest that **a purely additive combination of value and unfairness terms might inherently lead to parameter confounding** in this task, regardless of the specific functional form of the penalty term. The influences of 'value' and 'unfairness' simply added together might be too correlated or indistinguishable across the observed data range.\n\nFor Run 74, we must fundamentally reconsider the *structural principle* by which value and unfairness combine to influence utility. Instead of adding or subtracting components, let's explore a **multiplicative or interactive structure**. The goal is to design a model where the influence of one parameter (e.g., unfairness sensitivity) *modulates* or *scales* the influence of the other (e.g., value sensitivity) in a non-additive way. This interaction is hypothesized to create distinct parameter dependencies on the input variables, thereby improving identifiability.\n\nProposed Model Structure: A multiplicative utility model where the value derived from the offer is discounted or scaled down based on its unfairness using an exponential decay.\n`U_accept = beta_value * split_perc_self * exp(-beta_unfairness * loss_below_fair)`\n\nHere:\nCalculate `fair_perc_self_calc` handling the `sum_tokens == 0` case (defaulting to 50.0).\nCalculate `loss_below_fair = max(0.0, fair_perc_self_calc - split_perc_self)`. This term is non-zero only for offers below or equal to the fair share.\nFinally, `U_accept = beta_value * split_perc_self * exp(-beta_unfairness * loss_below_fair)`. Note the multiplication and the negative exponential.\n\nIn this structure, `beta_value` scales the potential utility from the offered percentage (`split_perc_self`) linearly. `beta_unfairness` scales the *rate of exponential decay* of this potential utility as the offer falls below the fair share (`loss_below_fair`). The term `exp(-beta_unfairness * loss_below_fair)` is a multiplicative factor between 0 and 1 (assuming `beta_unfairness >= 0` and `loss_below_fair >= 0`). A higher `beta_unfairness` or a larger `loss_below_fair` leads to a smaller multiplicative factor, thus reducing the overall utility. The key hypothesis for improved identifiability is that this **multiplicative interaction**, specifically the exponential decay applied to the linear value term, creates a fundamentally different and more separable influence landscape for `beta_value` and `beta_unfairness` compared to all tested additive structures.\n\nDesign the model using this multiplicative structure with exponential decay: `U_accept = beta_value * split_perc_self * exp(-beta_unfairness * loss_below_fair)`, where `loss_below_fair` is calculated as specified above using `fair_perc_self_calc` as the reference.\n\nFocus on clearly defining the `loss_below_fair` term and articulating in the summary how this specific structure, by combining a linear value term with an *exponential multiplicative penalty* based on deviation from fair share, is intended to achieve robust parameter identifiability by creating mathematically distinct and interacting influence profiles for `beta_value` and `beta_unfairness` across different offers, addressing the persistent identifiability failures seen in purely additive structures.\n\n*   **Key Inputs & Calculated Variables:** Use `split_perc_self`, `token_self`, `token_opp` as data variables. Calculate `sum_tokens`, `fair_perc_self_calc` (handling `sum_tokens == 0`), `loss_below_fair`, and `U_accept`. Include any other necessary intermediate variables.\n*   **Model Formula:** Define `U_accept` using the multiplicative structure with exponential decay: `sum_tokens = token_self + token_opp`, `fair_perc_self_calc = (token_self / sum_tokens) * 100.0` (handle `sum_tokens == 0`), `loss_below_fair = max(0.0, fair_perc_self_calc - split_perc_self)`, `U_accept = beta_value * split_perc_self * exp(-beta_unfairness * loss_below_fair)`. Include calculation steps for derived variables *before* the formula for `U_accept`. Use clear mathematical notation within the <MODEL> tags (only the formula).\n*   **Learnable Parameters:** Exactly **2 learnable parameters**: `beta_value` (value sensitivity) and `beta_unfairness` (unfairness sensitivity decay rate). Choose descriptive, Python-safe names. Define clear, generous, finite numerical bounds. Non-negative bounds (e.g., `[0.0, 100.0]` for both) are theoretically appropriate and may aid recovery. Stick with `[0.0, 100.0]` for both.\n*   **Calculated Variables:** Include descriptions for *all* calculated variables used in the model (including `U_accept`, `sum_tokens`, `fair_perc_self_calc`, and `loss_below_fair`) with `source: \"calculated\"`. Include descriptions for all data variables used as inputs (`token_self`, `token_opp`, `split_perc_self`) with `source: \"data\"`.\n*   **Variable Descriptions:** Provide variable descriptions in JSON format between <VARIABLES> tags for *all* variables in the <MODEL> formula. Include source, range (with inclusive flags), distribution (if applicable), and learnable status. Remember variable names must exactly match the model.\n*   **Target Variable:** Specify \"accept\" using <target_variable> tags.\n*   **Summary:** Provide a concise summary between <SUMMARY> tags. Describe the model\\'s core idea (multiplicative structure, linear value term scaled by exponential unfairness penalty based on deviation from fair share). Crucially, explain *how* this structure, by using a *multiplicative* exponential decay function for the penalty term applied to the linear value term, is specifically intended to improve robust parameter identifiability by creating mathematically distinct and *interacting* influence profiles for `beta_value` and `beta_unfairness`, addressing the limitations and failures of previous purely additive structures.\n*   **Think Outside the Box:** Recognize that previous attempts with standard additive structures and simple non-linear forms have consistently failed parameter recovery. The proposed multiplicative exponential decay structure is a deliberate departure, explicitly attempting to create functional separability through interaction. Continue to consider non-obvious ways parameters might interact or influence decisions beyond simple additive combinations, as finding a structure that truly shines in parameter recovery often requires exploring less standard structural principles like multiplication, gating, or thresholds.\n\nAvailable Data Variables:\n- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.\n(Note: Use `split_perc_self` for the participant's proposed percentage share percentage).\n\nPlease think through this step by step, then provide your model specification and variable descriptions. Remember that robust parameter identifiability for *both* learnable parameters (>= 0.7 recovery for both) is the absolute priority. Your goal is to find a structure where both parameters\\' influences are clearly distinguishable and interact in a way that allows for reliable estimation, ideally leading to improved fit metrics (BIC and accuracy) as a result of capturing the underlying process more accurately.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: Okay, here are the improved instructions for the next run (Run 74 of 100), based on the results of recent attempts.\n\nThe **unwavering primary objective remains achieving parameter recovery >= 0.7 for *all* learnable parameters**. This is the critical benchmark for model usability. While improved BIC (lower is better) and accuracy (higher is better) are valuable secondary goals, they must not come at the expense of robust parameter recovery.\n\nThe model tested in the previous run, an additive utility model with an exponential penalty term (`U_accept = beta_value * split_perc_self - beta_unfairness * exp(loss_below_fair)`), performed extremely poorly on all metrics (Average BIC: 950.97, Accuracy: 0.431). Crucially, parameter recovery was abysmal (beta_value: r=0.180, beta_unfairness: r=0.000). This demonstrates that this specific functional form, despite the hypothesis that the exponential term would create separability, failed entirely to capture the underlying behavior or yield identifiable parameters.\n\nPrevious attempts using simple additive structures (`U_accept = beta_value * split_perc_self - beta_unfairness * penalty`) with linear, squared, or ratio-based penalties have also consistently shown poor parameter identifiability (recovery well below 0.7 for at least one parameter, often both). Even the reference-dependent additive structure (`U_accept = beta_value * gain_above_fair - beta_unfairness * loss_below_fair`) in a recent run failed dramatically (recovery r=0.131 and r=0.015).\n\nThese repeated failures across various additive structures (simple linear, squared, ratio penalty, exponential penalty, reference-dependent gain/loss) strongly suggest that **a purely additive combination of value and unfairness terms might inherently lead to parameter confounding** in this task, regardless of the specific functional form of the penalty term. The influences of 'value' and 'unfairness' simply added together might be too correlated or indistinguishable across the observed data range.\n\nFor Run 74, we must fundamentally reconsider the *structural principle* by which value and unfairness combine to influence utility. Instead of adding or subtracting components, let's explore a **multiplicative or interactive structure**. The goal is to design a model where the influence of one parameter (e.g., unfairness sensitivity) *modulates* or *scales* the influence of the other (e.g., value sensitivity) in a non-additive way. This interaction is hypothesized to create distinct parameter dependencies on the input variables, thereby improving identifiability.\n\nProposed Model Structure: A multiplicative utility model where the value derived from the offer is discounted or scaled down based on its unfairness using an exponential decay.\n`U_accept = beta_value * split_perc_self * exp(-beta_unfairness * loss_below_fair)`\n\nHere:\nCalculate `fair_perc_self_calc` handling the `sum_tokens == 0` case (defaulting to 50.0).\nCalculate `loss_below_fair = max(0.0, fair_perc_self_calc - split_perc_self)`. This term is non-zero only for offers below or equal to the fair share.\nFinally, `U_accept = beta_value * split_perc_self * exp(-beta_unfairness * loss_below_fair)`. Note the multiplication and the negative exponential.\n\nIn this structure, `beta_value` scales the potential utility from the offered percentage (`split_perc_self`) linearly. `beta_unfairness` scales the *rate of exponential decay* of this potential utility as the offer falls below the fair share (`loss_below_fair`). The term `exp(-beta_unfairness * loss_below_fair)` is a multiplicative factor between 0 and 1 (assuming `beta_unfairness >= 0` and `loss_below_fair >= 0`). A higher `beta_unfairness` or a larger `loss_below_fair` leads to a smaller multiplicative factor, thus reducing the overall utility. The key hypothesis for improved identifiability is that this **multiplicative interaction**, specifically the exponential decay applied to the linear value term, creates a fundamentally different and more separable influence landscape for `beta_value` and `beta_unfairness` compared to all tested additive structures.\n\nDesign the model using this multiplicative structure with exponential decay: `U_accept = beta_value * split_perc_self * exp(-beta_unfairness * loss_below_fair)`, where `loss_below_fair` is calculated as specified above using `fair_perc_self_calc` as the reference.\n\nFocus on clearly defining the `loss_below_fair` term and articulating in the summary how this specific structure, by combining a linear value term with an *exponential multiplicative penalty* based on deviation from fair share, is intended to achieve robust parameter identifiability by creating mathematically distinct and interacting influence profiles for `beta_value` and `beta_unfairness` across different offers, addressing the persistent identifiability failures seen in purely additive structures.\n\n*   **Key Inputs & Calculated Variables:** Use `split_perc_self`, `token_self`, `token_opp` as data variables. Calculate `sum_tokens`, `fair_perc_self_calc` (handling `sum_tokens == 0`), `loss_below_fair`, and `U_accept`. Include any other necessary intermediate variables.\n*   **Model Formula:** Define `U_accept` using the multiplicative structure with exponential decay: `sum_tokens = token_self + token_opp`, `fair_perc_self_calc = (token_self / sum_tokens) * 100.0` (handle `sum_tokens == 0`), `loss_below_fair = max(0.0, fair_perc_self_calc - split_perc_self)`, `U_accept = beta_value * split_perc_self * exp(-beta_unfairness * loss_below_fair)`. Include calculation steps for derived variables *before* the formula for `U_accept`. Use clear mathematical notation within the <MODEL> tags (only the formula).\n*   **Learnable Parameters:** Exactly **2 learnable parameters**: `beta_value` (value sensitivity) and `beta_unfairness` (unfairness sensitivity decay rate). Choose descriptive, Python-safe names. Define clear, generous, finite numerical bounds. Non-negative bounds (e.g., `[0.0, 100.0]` for both) are theoretically appropriate and may aid recovery. Stick with `[0.0, 100.0]` for both.\n*   **Calculated Variables:** Include descriptions for *all* calculated variables used in the model (including `U_accept`, `sum_tokens`, `fair_perc_self_calc`, and `loss_below_fair`) with `source: \"calculated\"`. Include descriptions for all data variables used as inputs (`token_self`, `token_opp`, `split_perc_self`) with `source: \"data\"`.\n*   **Variable Descriptions:** Provide variable descriptions in JSON format between <VARIABLES> tags for *all* variables in the <MODEL> formula. Include source, range (with inclusive flags), distribution (if applicable), and learnable status. Remember variable names must exactly match the model.\n*   **Target Variable:** Specify \"accept\" using <target_variable> tags.\n*   **Summary:** Provide a concise summary between <SUMMARY> tags. Describe the model\\'s core idea (multiplicative structure, linear value term scaled by exponential unfairness penalty based on deviation from fair share). Crucially, explain *how* this structure, by using a *multiplicative* exponential decay function for the penalty term applied to the linear value term, is specifically intended to improve robust parameter identifiability by creating mathematically distinct and *interacting* influence profiles for `beta_value` and `beta_unfairness`, addressing the limitations and failures of previous purely additive structures.\n*   **Think Outside the Box:** Recognize that previous attempts with standard additive structures and simple non-linear forms have consistently failed parameter recovery. The proposed multiplicative exponential decay structure is a deliberate departure, explicitly attempting to create functional separability through interaction. Continue to consider non-obvious ways parameters might interact or influence decisions beyond simple additive combinations, as finding a structure that truly shines in parameter recovery often requires exploring less standard structural principles like multiplication, gating, or thresholds.\n\nAvailable Data Variables:\n- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.\n(Note: Use `split_perc_self` for the participant's proposed percentage share percentage).\n\nPlease think through this step by step, then provide your model specification and variable descriptions. Remember that robust parameter identifiability for *both* learnable parameters (>= 0.7 recovery for both) is the absolute priority. Your goal is to find a structure where both parameters\\' influences are clearly distinguishable and interact in a way that allows for reliable estimation, ideally leading to improved fit metrics (BIC and accuracy) as a result of capturing the underlying process more accurately.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<MODEL>\nsum_tokens = token_self + token_opp\nfair_perc_self_calc = IF(sum_tokens == 0, 50.0, (token_self / sum_tokens) * 100.0)\nloss_below_fair = MAX(0.0, fair_perc_self_calc - split_perc_self)\nU_accept = beta_value * split_perc_self * EXP(-beta_unfairness * loss_below_fair)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The proposed share for the participant (in %)\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"sum_tokens\": {\n      \"description\": \"Total number of tokens found by participant and opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fair_perc_self_calc\": {\n      \"description\": \"Calculated fair percentage for the participant based on token contributions. Defaults to 50% if sum_tokens is 0.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"loss_below_fair\": {\n      \"description\": \"The difference in percentage between the calculated fair share and the proposed share for the participant, clamped at 0 if the proposed share is fair or higher\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_value\": {\n      \"description\": \"Sensitivity parameter scaling the value derived from the proposed percentage\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_unfairness\": {\n      \"description\": \"Sensitivity parameter scaling the rate of exponential decay of utility based on deviation below fair share\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U_accept\": {\n      \"description\": \"Utility of accepting the proposed offer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA multiplicative utility model for the responder's acceptance decision. The utility of accepting an offer is calculated as the product of a linear value component, proportional to the proposed percentage share and scaled by 'beta_value', and an exponential decay penalty. This penalty is based on the 'loss_below_fair', which is the percentage deviation of the offer below a fair share calculated from token contributions. The rate of this exponential decay is governed by 'beta_unfairness'. This multiplicative structure, combining a linear value term with an exponential multiplicative penalty based on deviation from fairness, is specifically designed to create mathematically distinct and interacting influence profiles for 'beta_value' and 'beta_unfairness' across different offers. This approach aims to improve robust parameter identifiability by moving beyond simple additive combinations, which have historically failed in this task context.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['beta_value', 'beta_unfairness']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                sum_tokens = token_self + token_opp\nfair_perc_self_calc = IF(sum_tokens == 0, 50.0, (token_self / sum_tokens) * 100.0)\nloss_below_fair = MAX(0.0, fair_perc_self_calc - split_perc_self)\nU_accept = beta_value * split_perc_self * EXP(-beta_unfairness * loss_below_fair)\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The proposed share for the participant (in %)\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"sum_tokens\": {\n      \"description\": \"Total number of tokens found by participant and opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fair_perc_self_calc\": {\n      \"description\": \"Calculated fair percentage for the participant based on token contributions. Defaults to 50% if sum_tokens is 0.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"loss_below_fair\": {\n      \"description\": \"The difference in percentage between the calculated fair share and the proposed share for the participant, clamped at 0 if the proposed share is fair or higher\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_value\": {\n      \"description\": \"Sensitivity parameter scaling the value derived from the proposed percentage\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_unfairness\": {\n      \"description\": \"Sensitivity parameter scaling the rate of exponential decay of utility based on deviation below fair share\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U_accept\": {\n      \"description\": \"Utility of accepting the proposed offer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, beta_value=1.0, beta_unfairness=1.0):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        split_perc_self = trial.get(\"splitperc_self\", 0)\n\n        sum_tokens = token_self + token_opp\n        if sum_tokens == 0:\n            fair_perc_self_calc = 50.0\n        else:\n            fair_perc_self_calc = (token_self / sum_tokens) * 100.0\n\n        loss_below_fair = max(0.0, fair_perc_self_calc - split_perc_self)\n\n        U_accept = beta_value * split_perc_self * math.exp(-beta_unfairness * loss_below_fair)\n        model_predictions.append(U_accept)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n",
      "timestamp": 1746103399.250216
    }
  ],
  "learnable_parameters": {
    "beta_value": {
      "description": "Sensitivity parameter scaling the value derived from the proposed percentage",
      "range": {
        "min": 0.0,
        "max": 100.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta_unfairness": {
      "description": "Sensitivity parameter scaling the rate of exponential decay of utility based on deviation below fair share",
      "range": {
        "min": 0.0,
        "max": 100.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "sum_tokens = token_self + token_opp\nfair_perc_self_calc = IF(sum_tokens == 0, 50.0, (token_self / sum_tokens) * 100.0)\nloss_below_fair = MAX(0.0, fair_perc_self_calc - split_perc_self)\nU_accept = beta_value * split_perc_self * EXP(-beta_unfairness * loss_below_fair)",
  "variable_descriptions": {
    "token_self": {
      "description": "Number of tokens found by the participant",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "split_perc_self": {
      "description": "The proposed share for the participant (in %)",
      "range": {
        "min": 0.0,
        "max": 100.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "sum_tokens": {
      "description": "Total number of tokens found by participant and opponent",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "fair_perc_self_calc": {
      "description": "Calculated fair percentage for the participant based on token contributions. Defaults to 50% if sum_tokens is 0.",
      "range": {
        "min": 0.0,
        "max": 100.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "loss_below_fair": {
      "description": "The difference in percentage between the calculated fair share and the proposed share for the participant, clamped at 0 if the proposed share is fair or higher",
      "range": {
        "min": 0.0,
        "max": 100.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "beta_value": {
      "description": "Sensitivity parameter scaling the value derived from the proposed percentage",
      "range": {
        "min": 0.0,
        "max": 100.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta_unfairness": {
      "description": "Sensitivity parameter scaling the rate of exponential decay of utility based on deviation below fair share",
      "range": {
        "min": 0.0,
        "max": 100.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "U_accept": {
      "description": "Utility of accepting the proposed offer",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "A multiplicative utility model for the responder's acceptance decision. The utility of accepting an offer is calculated as the product of a linear value component, proportional to the proposed percentage share and scaled by 'beta_value', and an exponential decay penalty. This penalty is based on the 'loss_below_fair', which is the percentage deviation of the offer below a fair share calculated from token contributions. The rate of this exponential decay is governed by 'beta_unfairness'. This multiplicative structure, combining a linear value term with an exponential multiplicative penalty based on deviation from fairness, is specifically designed to create mathematically distinct and interacting influence profiles for 'beta_value' and 'beta_unfairness' across different offers. This approach aims to improve robust parameter identifiability by moving beyond simple additive combinations, which have historically failed in this task context.",
  "target_variable": "accept",
  "full_reasoning": "<MODEL>\nsum_tokens = token_self + token_opp\nfair_perc_self_calc = IF(sum_tokens == 0, 50.0, (token_self / sum_tokens) * 100.0)\nloss_below_fair = MAX(0.0, fair_perc_self_calc - split_perc_self)\nU_accept = beta_value * split_perc_self * EXP(-beta_unfairness * loss_below_fair)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The proposed share for the participant (in %)\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"sum_tokens\": {\n      \"description\": \"Total number of tokens found by participant and opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fair_perc_self_calc\": {\n      \"description\": \"Calculated fair percentage for the participant based on token contributions. Defaults to 50% if sum_tokens is 0.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"loss_below_fair\": {\n      \"description\": \"The difference in percentage between the calculated fair share and the proposed share for the participant, clamped at 0 if the proposed share is fair or higher\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_value\": {\n      \"description\": \"Sensitivity parameter scaling the value derived from the proposed percentage\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_unfairness\": {\n      \"description\": \"Sensitivity parameter scaling the rate of exponential decay of utility based on deviation below fair share\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U_accept\": {\n      \"description\": \"Utility of accepting the proposed offer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA multiplicative utility model for the responder's acceptance decision. The utility of accepting an offer is calculated as the product of a linear value component, proportional to the proposed percentage share and scaled by 'beta_value', and an exponential decay penalty. This penalty is based on the 'loss_below_fair', which is the percentage deviation of the offer below a fair share calculated from token contributions. The rate of this exponential decay is governed by 'beta_unfairness'. This multiplicative structure, combining a linear value term with an exponential multiplicative penalty based on deviation from fairness, is specifically designed to create mathematically distinct and interacting influence profiles for 'beta_value' and 'beta_unfairness' across different offers. This approach aims to improve robust parameter identifiability by moving beyond simple additive combinations, which have historically failed in this task context.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: sum_tokens = token_self + token_opp\nfair_perc_self_calc = IF(sum_tokens == 0, 50.0, (token_self / sum_tokens) * 100.0)\nloss_below_fair = MAX(0.0, fair_perc_self_calc - split_perc_self)\nU_accept = beta_value * split_perc_self * EXP(-beta_unfairness * loss_below_fair)\nSummary: A multiplicative utility model for the responder's acceptance decision. The utility of accepting an offer is calculated as the product of a linear value component, proportional to the proposed percentage share and scaled by 'beta_value', and an exponential decay penalty. This penalty is based on the 'loss_below_fair', which is the percentage deviation of the offer below a fair share calculated from token contributions. The rate of this exponential decay is governed by 'beta_unfairness'. This multiplicative structure, combining a linear value term with an exponential multiplicative penalty based on deviation from fairness, is specifically designed to create mathematically distinct and interacting influence profiles for 'beta_value' and 'beta_unfairness' across different offers. This approach aims to improve robust parameter identifiability by moving beyond simple additive combinations, which have historically failed in this task context.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, beta_value=1.0, beta_unfairness=1.0):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        split_perc_self = trial.get(\"splitperc_self\", 0)\n\n        sum_tokens = token_self + token_opp\n        if sum_tokens == 0:\n            fair_perc_self_calc = 50.0\n        else:\n            fair_perc_self_calc = (token_self / sum_tokens) * 100.0\n\n        loss_below_fair = max(0.0, fair_perc_self_calc - split_perc_self)\n\n        U_accept = beta_value * split_perc_self * math.exp(-beta_unfairness * loss_below_fair)\n        model_predictions.append(U_accept)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.5665445665445665,
  "group_accuracies": {
    "Control": 0.5833333333333334,
    "Cocaine": 0.5515046296296297
  },
  "group_parameter_averages": {
    "Control": {
      "beta_value": 59.19165939677965,
      "beta_unfairness": 38.905997675126024
    },
    "Cocaine": {
      "beta_value": 51.332678853643955,
      "beta_unfairness": 52.99078935225288
    }
  },
  "fitting_results": [
    {
      "beta_value": 78.8190368121454,
      "beta_unfairness": 48.559564475504466,
      "success": true,
      "log_likelihood": -68.23241163119914,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 90.55233062561395,
      "beta_unfairness": 39.210263988583996,
      "success": true,
      "log_likelihood": -22.180709771118238,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 99.48475419698323,
      "beta_unfairness": 39.647464196987535,
      "success": true,
      "log_likelihood": -22.180709771118238,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 90.21445178632399,
      "beta_unfairness": 97.15288949064404,
      "success": true,
      "log_likelihood": -22.180709771118238,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 40.13323569827254,
      "beta_unfairness": 9.730888306554641,
      "success": true,
      "log_likelihood": -22.180709771108383,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 72.48330332938511,
      "beta_unfairness": 60.980573455836826,
      "success": true,
      "log_likelihood": -22.180709771118234,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 11.269146483519677,
      "beta_unfairness": 11.774216256844404,
      "success": true,
      "log_likelihood": -22.180709771118238,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 51.95375479330661,
      "beta_unfairness": 98.0895122384321,
      "success": true,
      "log_likelihood": -22.180709771118234,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 46.078180288279526,
      "beta_unfairness": 11.1534242630563,
      "success": true,
      "log_likelihood": -22.18070977111814,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 76.78582394619586,
      "beta_unfairness": 0.8430737893966249,
      "success": true,
      "log_likelihood": -18.992210124011656,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 67.29410940463707,
      "beta_unfairness": 0.5202671935977873,
      "success": true,
      "log_likelihood": -16.964082597201262,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 7.326990461356053,
      "beta_unfairness": 65.63582864201848,
      "success": true,
      "log_likelihood": -68.23241163119914,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 21.699433199650066,
      "beta_unfairness": 7.817584038459213,
      "success": true,
      "log_likelihood": -22.180709767981647,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 79.50672310624769,
      "beta_unfairness": 22.98394198470959,
      "success": true,
      "log_likelihood": -22.180709771118238,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 75.50674819014017,
      "beta_unfairness": 0.0,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 28.8109594176283,
      "beta_unfairness": 83.88953074977165,
      "success": true,
      "log_likelihood": -22.180709771118234,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 18.327337714808866,
      "beta_unfairness": 6.622579965975406,
      "success": true,
      "log_likelihood": -22.18070962886495,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 97.40150455367733,
      "beta_unfairness": 34.46543310715201,
      "success": true,
      "log_likelihood": -22.180709771118238,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 42.44048211376052,
      "beta_unfairness": 6.829414194074335,
      "success": true,
      "log_likelihood": -22.18070960580119,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 50.87653282741252,
      "beta_unfairness": 0.0,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 69.11473937233204,
      "beta_unfairness": 20.365373098417916,
      "success": true,
      "log_likelihood": -22.180709771118234,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 91.41918304813468,
      "beta_unfairness": 84.96372336386732,
      "success": true,
      "log_likelihood": -22.180709771118238,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 79.09250192665539,
      "beta_unfairness": 22.903821833999437,
      "success": true,
      "log_likelihood": -22.180709771118238,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 46.39086430890672,
      "beta_unfairness": 7.252580539208575,
      "success": true,
      "log_likelihood": -22.18070977111795,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 43.72067000878296,
      "beta_unfairness": 0.47472468230182585,
      "success": true,
      "log_likelihood": -16.577259558560993,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 98.70396361137722,
      "beta_unfairness": 8.509788928473949,
      "success": true,
      "log_likelihood": -22.180709769698286,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 96.72523333272305,
      "beta_unfairness": 94.02694819238691,
      "success": true,
      "log_likelihood": -22.180709771118238,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 40.555549586874776,
      "beta_unfairness": 16.515042406425163,
      "success": true,
      "log_likelihood": -22.180709771118238,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 97.45575948947042,
      "beta_unfairness": 76.90633689183521,
      "success": true,
      "log_likelihood": -22.180709771118234,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 68.95845942082455,
      "beta_unfairness": 0.37148737161648315,
      "success": true,
      "log_likelihood": -13.251454633361877,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 20.28016978240944,
      "beta_unfairness": 8.053281771132104,
      "success": true,
      "log_likelihood": -22.18070976978203,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 56.4569660092569,
      "beta_unfairness": 35.76902466231439,
      "success": true,
      "log_likelihood": -68.23241163119913,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 46.9446221501963,
      "beta_unfairness": 91.50605374155629,
      "success": true,
      "log_likelihood": -45.20656070115867,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 68.74884034252321,
      "beta_unfairness": 82.11692992116592,
      "success": true,
      "log_likelihood": -22.180709771118238,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 11.07024041486705,
      "beta_unfairness": 58.76071240967535,
      "success": true,
      "log_likelihood": -22.180709771118238,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 57.33656890070493,
      "beta_unfairness": 39.72493771094151,
      "success": true,
      "log_likelihood": -22.180709771118238,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 57.22922794895599,
      "beta_unfairness": 17.580655395745794,
      "success": true,
      "log_likelihood": -22.180709771118238,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 79.53607216615657,
      "beta_unfairness": 89.33554480840624,
      "success": true,
      "log_likelihood": -22.180709771118238,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 46.52003944421035,
      "beta_unfairness": 92.66751666793797,
      "success": true,
      "log_likelihood": -22.180709771118238,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 23.34111865309486,
      "beta_unfairness": 38.823395863249345,
      "success": true,
      "log_likelihood": -22.180709771118238,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 84.17233554650394,
      "beta_unfairness": 66.52386596577055,
      "success": true,
      "log_likelihood": -22.180709771118238,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 81.50961469154768,
      "beta_unfairness": 4.917048547785364,
      "success": true,
      "log_likelihood": -22.180523556764342,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 32.99377495567146,
      "beta_unfairness": 68.98265491860613,
      "success": true,
      "log_likelihood": -22.180709771118234,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 91.53099074308594,
      "beta_unfairness": 1.2760408813385702,
      "success": true,
      "log_likelihood": -19.44487051670205,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 96.74650829522163,
      "beta_unfairness": 12.47387993812975,
      "success": true,
      "log_likelihood": -22.180709771118234,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 33.03143049515236,
      "beta_unfairness": 95.60757789423741,
      "success": true,
      "log_likelihood": -22.180709771118238,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 12.978058962711014,
      "beta_unfairness": 32.55365706899502,
      "success": true,
      "log_likelihood": -22.180709771118238,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 75.16699091892434,
      "beta_unfairness": 22.641320293765833,
      "success": true,
      "log_likelihood": -22.180709771118234,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 94.38536681654142,
      "beta_unfairness": 64.15002242294759,
      "success": true,
      "log_likelihood": -22.180709771118238,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 75.79010436853879,
      "beta_unfairness": 21.705573148894043,
      "success": true,
      "log_likelihood": -45.20656070115868,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 51.851202675643,
      "beta_unfairness": 0.8057779697668919,
      "success": true,
      "log_likelihood": -19.02225732386942,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 34.0858193579126,
      "beta_unfairness": 99.27867942074738,
      "success": true,
      "log_likelihood": -68.23241163119914,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 53.222836283218335,
      "beta_unfairness": 86.77460525881025,
      "success": true,
      "log_likelihood": -45.20656070115869,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 30.449140448024046,
      "beta_unfairness": 4.167583009231423,
      "success": true,
      "log_likelihood": -45.20655992991672,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 45.73293185721131,
      "beta_unfairness": 59.8163825954609,
      "success": true,
      "log_likelihood": -22.180709771118234,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 13.783547332966005,
      "beta_unfairness": 27.77178199915429,
      "success": true,
      "log_likelihood": -22.180709771118238,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 81.57316252184161,
      "beta_unfairness": 74.32522694566792,
      "success": true,
      "log_likelihood": -22.180709771118238,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 46.411292837012915,
      "beta_unfairness": 14.270609033928627,
      "success": true,
      "log_likelihood": -22.180709771118234,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 51.89686956440319,
      "beta_unfairness": 75.56531596566005,
      "success": true,
      "log_likelihood": -68.23241163119916,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 86.63804460991493,
      "beta_unfairness": 8.262208882077694,
      "success": true,
      "log_likelihood": -22.1807097682734,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 14.695536908825135,
      "beta_unfairness": 78.21982951417138,
      "success": true,
      "log_likelihood": -22.180709771118238,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 65.13402057858991,
      "beta_unfairness": 91.77976394410783,
      "success": true,
      "log_likelihood": -22.180709771118238,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 41.03077934872614,
      "beta_unfairness": 77.91720400654171,
      "success": true,
      "log_likelihood": -68.23241163119916,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 19.344750693966052,
      "beta_unfairness": 68.10841453644939,
      "success": true,
      "log_likelihood": -45.206560701158665,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 12.543089291865783,
      "beta_unfairness": 61.60914902121216,
      "success": true,
      "log_likelihood": -22.180709771118234,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 68.64972267751924,
      "beta_unfairness": 22.16231634759073,
      "success": true,
      "log_likelihood": -22.180709771118234,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 72.65620102388041,
      "beta_unfairness": 92.44658836949748,
      "success": true,
      "log_likelihood": -22.180709771118238,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 75.91558582521256,
      "beta_unfairness": 83.80842248856389,
      "success": true,
      "log_likelihood": -22.180709771118238,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 35.16362217129987,
      "beta_unfairness": 96.33613646319634,
      "success": true,
      "log_likelihood": -22.180709771118234,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 31.260739775056734,
      "beta_unfairness": 66.32361599550364,
      "success": true,
      "log_likelihood": -22.180709771118238,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 61.99550064593302,
      "beta_unfairness": 86.15709636820775,
      "success": true,
      "log_likelihood": -22.180709771118234,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 35.61006382595993,
      "beta_unfairness": 91.1461608788926,
      "success": true,
      "log_likelihood": -68.23241163119911,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 13.601943534306237,
      "beta_unfairness": 51.254613871817725,
      "success": true,
      "log_likelihood": -22.180709771118234,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 61.26735935826959,
      "beta_unfairness": 25.048606168969478,
      "success": true,
      "log_likelihood": -22.180709771118238,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 60.849024667673625,
      "beta_unfairness": 83.25782291886263,
      "success": true,
      "log_likelihood": -45.20656070115868,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 53.87685862772066,
      "beta_unfairness": 79.48618917709933,
      "success": true,
      "log_likelihood": -22.180709771118234,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 47.40955668532507,
      "beta_unfairness": 10.23460537195553,
      "success": true,
      "log_likelihood": -22.180709771116067,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 71.71016916103417,
      "beta_unfairness": 40.24117466933508,
      "success": true,
      "log_likelihood": -91.25826256123959,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 82.74204865533203,
      "beta_unfairness": 71.77962108190802,
      "success": true,
      "log_likelihood": -22.180709771118234,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 39.926880830774266,
      "beta_unfairness": 73.73497955502832,
      "success": true,
      "log_likelihood": -68.23241163119914,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 22.294956687813084,
      "beta_unfairness": 21.75666236028825,
      "success": true,
      "log_likelihood": -22.180709771118238,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 84.83497103834297,
      "beta_unfairness": 25.73004268253991,
      "success": true,
      "log_likelihood": -22.180709771118234,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 58.755979083222584,
      "beta_unfairness": 46.96157709677489,
      "success": true,
      "log_likelihood": -91.2582625612396,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 40.283210234418,
      "beta_unfairness": 22.355888226030007,
      "success": true,
      "log_likelihood": -22.180709771118238,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 9.374960602950665,
      "beta_unfairness": 73.78551227639318,
      "success": true,
      "log_likelihood": -22.180709771118238,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.6488002958157435,
      "beta_unfairness": 87.31813618285223,
      "success": true,
      "log_likelihood": -45.15434634183962,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 72.1506593109056,
      "beta_unfairness": 50.5184537305008,
      "success": true,
      "log_likelihood": -22.180709771118238,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 68.86360821894516,
      "beta_unfairness": 5.411798974118485,
      "success": true,
      "log_likelihood": -68.23238137686398,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 94.45559702954317,
      "beta_unfairness": 55.29918913359896,
      "success": true,
      "log_likelihood": -22.180709771118234,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 28.98218072978199,
      "beta_unfairness": 98.43074782195798,
      "success": true,
      "log_likelihood": -22.180709771118238,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 42.66590936757693,
      "beta_unfairness": 3.491326945358893,
      "success": true,
      "log_likelihood": -22.180702522025452,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "beta_value": {
        "r": -0.012271453297639054,
        "p": 0.9035514311622033
      },
      "beta_unfairness": {
        "r": 0.09890255875920674,
        "p": 0.32758298528602203
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 65.60659799594325,
  "bic_Control": 55.8950396638781,
  "bic_Cocaine": 74.30653566841826,
  "bic_results": {
    "average_bic": 65.60659799594325,
    "individual_bics": [
      143.6318611393105,
      51.528457419148694,
      51.528457419148694,
      51.528457419148694,
      51.52845741912898,
      51.52845741914869,
      51.528457419148694,
      51.52845741914869,
      51.528457419148495,
      45.15145812493553,
      41.09520307131474,
      143.6318611393105,
      51.52845741287551,
      51.528457419148694,
      7.167037869712219,
      51.52845741914869,
      51.52845713464212,
      51.528457419148694,
      51.5284570885146,
      7.167037869712219,
      51.52845741914869,
      51.528457419148694,
      51.528457419148694,
      51.52845741914812,
      40.321556994034204,
      51.52845741630879,
      51.528457419148694,
      51.528457419148694,
      51.52845741914869,
      33.66994714363597,
      51.52845741647628,
      143.63186113931047,
      97.58015927922956,
      51.528457419148694,
      51.528457419148694,
      51.528457419148694,
      51.528457419148694,
      51.528457419148694,
      51.528457419148694,
      51.528457419148694,
      51.528457419148694,
      51.5280849904409,
      51.52845741914869,
      46.05677891031632,
      51.52845741914869,
      51.528457419148694,
      51.528457419148694,
      51.52845741914869,
      51.528457419148694,
      97.58015927922958,
      45.21155252465106,
      143.6318611393105,
      97.5801592792296,
      97.58015773674566,
      51.52845741914869,
      51.528457419148694,
      51.528457419148694,
      51.52845741914869,
      143.63186113931053,
      51.528457413459016,
      51.528457419148694,
      51.528457419148694,
      143.63186113931053,
      97.58015927922955,
      51.52845741914869,
      51.52845741914869,
      51.528457419148694,
      51.528457419148694,
      51.52845741914869,
      51.528457419148694,
      51.52845741914869,
      143.63186113931044,
      51.52845741914869,
      51.528457419148694,
      97.58015927922958,
      51.52845741914869,
      51.52845741914435,
      189.6835629993914,
      51.52845741914869,
      143.6318611393105,
      51.528457419148694,
      51.52845741914869,
      189.68356299939143,
      51.528457419148694,
      51.528457419148694,
      97.47573056059146,
      51.528457419148694,
      143.63180063064019,
      51.52845741914869,
      51.528457419148694,
      51.52844292096312
    ],
    "group_enabled": true,
    "group_bics": {
      "Control": [
        143.6318611393105,
        51.528457419148694,
        51.528457419148694,
        51.528457419148694,
        51.52845741912898,
        51.52845741914869,
        51.528457419148694,
        51.52845741914869,
        51.528457419148495,
        45.15145812493553,
        41.09520307131474,
        143.6318611393105,
        51.52845741287551,
        51.528457419148694,
        7.167037869712219,
        51.52845741914869,
        51.52845713464212,
        51.528457419148694,
        51.5284570885146,
        7.167037869712219,
        51.52845741914869,
        51.528457419148694,
        51.528457419148694,
        51.52845741914812,
        40.321556994034204,
        51.52845741630879,
        51.528457419148694,
        51.528457419148694,
        51.52845741914869,
        33.66994714363597,
        51.52845741647628,
        143.63186113931047,
        97.58015927922956,
        51.528457419148694,
        51.528457419148694,
        51.528457419148694,
        51.528457419148694,
        51.528457419148694,
        51.528457419148694,
        51.528457419148694,
        51.528457419148694,
        51.5280849904409,
        51.52845741914869
      ],
      "Cocaine": [
        46.05677891031632,
        51.52845741914869,
        51.528457419148694,
        51.528457419148694,
        51.52845741914869,
        51.528457419148694,
        97.58015927922958,
        45.21155252465106,
        143.6318611393105,
        97.5801592792296,
        97.58015773674566,
        51.52845741914869,
        51.528457419148694,
        51.528457419148694,
        51.52845741914869,
        143.63186113931053,
        51.528457413459016,
        51.528457419148694,
        51.528457419148694,
        143.63186113931053,
        97.58015927922955,
        51.52845741914869,
        51.52845741914869,
        51.528457419148694,
        51.528457419148694,
        51.52845741914869,
        51.528457419148694,
        51.52845741914869,
        143.63186113931044,
        51.52845741914869,
        51.528457419148694,
        97.58015927922958,
        51.52845741914869,
        51.52845741914435,
        189.6835629993914,
        51.52845741914869,
        143.6318611393105,
        51.528457419148694,
        51.52845741914869,
        189.68356299939143,
        51.528457419148694,
        51.528457419148694,
        97.47573056059146,
        51.528457419148694,
        143.63180063064019,
        51.52845741914869,
        51.528457419148694,
        51.52844292096312
      ]
    },
    "num_parameters": 2,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- beta_value: r = -0.012\n- beta_unfairness: r = 0.099",
  "previous_models": [
    "Specification: sum_tokens = token_self + token_opp\nfair_perc_self_calc = IF(sum_tokens == 0, 50.0, (token_self / sum_tokens) * 100.0)\nloss_below_fair = MAX(0.0, fair_perc_self_calc - split_perc_self)\nU_accept = beta_value * split_perc_self * EXP(-beta_unfairness * loss_below_fair)\nSummary: A multiplicative utility model for the responder's acceptance decision. The utility of accepting an offer is calculated as the product of a linear value component, proportional to the proposed percentage share and scaled by 'beta_value', and an exponential decay penalty. This penalty is based on the 'loss_below_fair', which is the percentage deviation of the offer below a fair share calculated from token contributions. The rate of this exponential decay is governed by 'beta_unfairness'. This multiplicative structure, combining a linear value term with an exponential multiplicative penalty based on deviation from fairness, is specifically designed to create mathematically distinct and interacting influence profiles for 'beta_value' and 'beta_unfairness' across different offers. This approach aims to improve robust parameter identifiability by moving beyond simple additive combinations, which have historically failed in this task context.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 65.60659799594325\nOverall Accuracy: 0.5665\nGroup Accuracies:\n- Control: 0.5833\n- Cocaine: 0.5515\n\nParameter Recovery:\n- beta_value: r = -0.012\n- beta_unfairness: r = 0.099"
  ]
}