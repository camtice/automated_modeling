{
  "task_description": "In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "Okay, here are the improved instructions for the next run (Run 76 of 100), based on the results of recent attempts.\n\nThe **unwavering primary objective remains achieving parameter recovery >= 0.7 for *all* learnable parameters**. This is the critical benchmark for model usability. While improved BIC (lower is better) and accuracy (higher is better) are valuable secondary goals, they must not come at the expense of robust parameter recovery. The model tested in the previous run (Run 75), the multiplicative structure `U_accept = split_perc_self * (beta_value - beta_unfairness * loss_below_fair)`, achieved a notably low BIC (57.07), suggesting it might capture some aspects of the data well. However, it catastrophically failed parameter recovery for *both* parameters (r = 0.100 and r = -0.043). This reinforces that achieving a good fit metric like BIC is insufficient if the underlying parameters cannot be reliably estimated. The previous multiplicative formulation, despite its promising BIC, resulted in highly confounded parameter influences.\n\nPrevious attempts across various additive and multiplicative structures have consistently struggled with parameter identifiability. This suggests that simply combining value and unfairness terms additively or with simple linear multiplication does not create sufficiently distinct influence profiles for the parameters across the range of possible offers in this task.\n\nFor Run 76, we will continue exploring non-additive structures, given the relatively good BIC performance of the previous multiplicative attempt. However, we need a structure where the parameters' influences are mathematically more separable to ensure robust identifiability. The failure of the previous multiplicative model suggests that multiplying the sensitivity factor directly by `split_perc_self` may have contributed to confounding, particularly for low offers.\n\nProposed Model Structure: A divisive utility model where the core value derived from the participant's proposed percentage (`split_perc_self`), scaled by `beta_value`, is *reduced* by a factor based on unfairness (`loss_below_fair`), controlled by `beta_unfairness`.\n\n`U_accept = (beta_value * split_perc_self) / (1 + beta_unfairness * loss_below_fair)`\n\nHere:\nCalculate `fair_perc_self_calc` handling the `sum_tokens == 0` case (defaulting to 50.0), using `token_self` and `token_opp` from the data.\nCalculate `loss_below_fair = max(0.0, fair_perc_self_calc - split_perc_self)`. This term is non-zero only for offers below or equal to the fair share.\nThe utility `U_accept` is calculated as the product of `beta_value` and `split_perc_self`, divided by `(1 + beta_unfairness * loss_below_fair)`.\n\nIn this structure, `beta_value` acts as a primary scaling factor for the 'value' component (`split_perc_self`), similar to previous models. `beta_unfairness`, however, specifically influences the *denominator* of the utility calculation. For offers that are fair or better (`loss_below_fair = 0`), the denominator is `(1 + 0) = 1`, and utility is simply `beta_value * split_perc_self`. For unfair offers (`loss_below_fair > 0`), the denominator increases proportionally to `loss_below_fair`, controlled by `beta_unfairness`, thus *reducing* the utility via division. This separation, where `beta_value` scales the numerator and `beta_unfairness` scales an additive term in the denominator, is hypothesized to create distinct and non-linearly interacting influence profiles for the parameters, potentially improving parameter identifiability compared to simple additive or the previous multiplicative forms.\n\nDesign the model using this divisive structure: `U_accept = (beta_value * split_perc_self) / (1 + beta_unfairness * loss_below_fair)`, where `loss_below_fair` and `fair_perc_self_calc` are calculated as specified above using `token_self`, `token_opp`, and `split_perc_self`.\n\nFocus on clearly defining all intermediate terms and articulating in the summary how this specific divisive structure, by placing `beta_unfairness` in the denominator affecting the scaling of the entire `beta_value * split_perc_self` term, is intended to achieve robust parameter identifiability by creating mathematically distinct and interactive influence profiles, addressing the persistent identifiability failures seen in previous models. `beta_value` represents a base sensitivity to the offer percentage, and `beta_unfairness` represents how strongly increasing unfairness causes this sensitivity to be *divided down*.\n\n*   **Key Inputs & Calculated Variables:** Use `split_perc_self`, `token_self`, `token_opp` as data variables. Calculate `sum_tokens`, `fair_perc_self_calc` (handling `sum_tokens == 0`), `loss_below_fair`, and `U_accept`. Include calculation steps for derived variables *before* the formula for `U_accept`. Use clear mathematical notation within the <MODEL> tags (only the formula).\n*   **Learnable Parameters:** Exactly **2 learnable parameters**: `beta_value` (base value sensitivity) and `beta_unfairness` (unfairness divisor sensitivity). Choose descriptive, Python-safe names. Define clear, generous, finite numerical bounds. Non-negative bounds (e.g., `[0.0, 100.0]` for both) are theoretically appropriate and likely necessary for parameter recovery in this structure (e.g., `beta_unfairness` should be non-negative so the denominator increases with `loss_below_fair`, and `beta_value` should be non-negative for utility to increase with `split_perc_self` on fair offers). Stick with `[0.0, 100.0]` for both.\n*   **Calculated Variables:** Include descriptions for *all* calculated variables used in the model (including `U_accept`, `sum_tokens`, `fair_perc_self_calc`, and `loss_below_fair`) with `source: \"calculated\"`. Include descriptions for all data variables used as inputs (`token_self`, `token_opp`, `split_perc_self`) with `source: \"data\"`.\n*   **Variable Descriptions:** Provide variable descriptions in JSON format between <VARIABLES> tags for *all* variables in the <MODEL> formula. Include source, range (with inclusive flags), distribution (if applicable), and learnable status. Remember variable names must exactly match the model.\n*   **Target Variable:** Specify \"accept\" using <target_variable> tags.\n*   **Summary:** Provide a concise summary between <SUMMARY> tags. Describe the model's core idea (divisive structure where utility from `split_perc_self` is reduced by unfairness). Crucially, explain *how* this specific divisive structure, where `beta_unfairness` influences the denominator, is specifically intended to improve robust parameter identifiability by creating mathematically distinct and *interacting* influence profiles for `beta_value` and `beta_unfairness`, addressing the limitations and failures of previous structures.\n*   **Think Outside the Box:** Recognize that previous attempts with standard additive, squared additive, exponential additive, and linear multiplicative structures have consistently failed parameter recovery. The proposed divisive structure is another attempt at a non-additive interaction principle. Success in parameter recovery often requires exploring less standard structural principles. Continue to consider how parameters might interact via division, exponents, thresholds, or other non-linear functions that haven't been tried yet, focusing on creating distinctly shaped influences for each parameter across the range of possible offers.\n\nAvailable Data Variables:\n- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.\n(Note: Use `split_perc_self` for the participant's proposed percentage share percentage).\n\nPlease think through this step by step, then provide your model specification and variable descriptions. Remember that robust parameter identifiability for *both* learnable parameters (>= 0.7 recovery for both) is the absolute priority. Your goal is to find a structure where both parameters' influences are clearly distinguishable and interact in a way that allows for reliable estimation, ideally leading to improved fit metrics (BIC and accuracy) as a result of capturing the underlying process more accurately.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: Okay, here are the improved instructions for the next run (Run 76 of 100), based on the results of recent attempts.\n\nThe **unwavering primary objective remains achieving parameter recovery >= 0.7 for *all* learnable parameters**. This is the critical benchmark for model usability. While improved BIC (lower is better) and accuracy (higher is better) are valuable secondary goals, they must not come at the expense of robust parameter recovery. The model tested in the previous run (Run 75), the multiplicative structure `U_accept = split_perc_self * (beta_value - beta_unfairness * loss_below_fair)`, achieved a notably low BIC (57.07), suggesting it might capture some aspects of the data well. However, it catastrophically failed parameter recovery for *both* parameters (r = 0.100 and r = -0.043). This reinforces that achieving a good fit metric like BIC is insufficient if the underlying parameters cannot be reliably estimated. The previous multiplicative formulation, despite its promising BIC, resulted in highly confounded parameter influences.\n\nPrevious attempts across various additive and multiplicative structures have consistently struggled with parameter identifiability. This suggests that simply combining value and unfairness terms additively or with simple linear multiplication does not create sufficiently distinct influence profiles for the parameters across the range of possible offers in this task.\n\nFor Run 76, we will continue exploring non-additive structures, given the relatively good BIC performance of the previous multiplicative attempt. However, we need a structure where the parameters' influences are mathematically more separable to ensure robust identifiability. The failure of the previous multiplicative model suggests that multiplying the sensitivity factor directly by `split_perc_self` may have contributed to confounding, particularly for low offers.\n\nProposed Model Structure: A divisive utility model where the core value derived from the participant's proposed percentage (`split_perc_self`), scaled by `beta_value`, is *reduced* by a factor based on unfairness (`loss_below_fair`), controlled by `beta_unfairness`.\n\n`U_accept = (beta_value * split_perc_self) / (1 + beta_unfairness * loss_below_fair)`\n\nHere:\nCalculate `fair_perc_self_calc` handling the `sum_tokens == 0` case (defaulting to 50.0), using `token_self` and `token_opp` from the data.\nCalculate `loss_below_fair = max(0.0, fair_perc_self_calc - split_perc_self)`. This term is non-zero only for offers below or equal to the fair share.\nThe utility `U_accept` is calculated as the product of `beta_value` and `split_perc_self`, divided by `(1 + beta_unfairness * loss_below_fair)`.\n\nIn this structure, `beta_value` acts as a primary scaling factor for the 'value' component (`split_perc_self`), similar to previous models. `beta_unfairness`, however, specifically influences the *denominator* of the utility calculation. For offers that are fair or better (`loss_below_fair = 0`), the denominator is `(1 + 0) = 1`, and utility is simply `beta_value * split_perc_self`. For unfair offers (`loss_below_fair > 0`), the denominator increases proportionally to `loss_below_fair`, controlled by `beta_unfairness`, thus *reducing* the utility via division. This separation, where `beta_value` scales the numerator and `beta_unfairness` scales an additive term in the denominator, is hypothesized to create distinct and non-linearly interacting influence profiles for the parameters, potentially improving parameter identifiability compared to simple additive or the previous multiplicative forms.\n\nDesign the model using this divisive structure: `U_accept = (beta_value * split_perc_self) / (1 + beta_unfairness * loss_below_fair)`, where `loss_below_fair` and `fair_perc_self_calc` are calculated as specified above using `token_self`, `token_opp`, and `split_perc_self`.\n\nFocus on clearly defining all intermediate terms and articulating in the summary how this specific divisive structure, by placing `beta_unfairness` in the denominator affecting the scaling of the entire `beta_value * split_perc_self` term, is intended to achieve robust parameter identifiability by creating mathematically distinct and interactive influence profiles, addressing the persistent identifiability failures seen in previous models. `beta_value` represents a base sensitivity to the offer percentage, and `beta_unfairness` represents how strongly increasing unfairness causes this sensitivity to be *divided down*.\n\n*   **Key Inputs & Calculated Variables:** Use `split_perc_self`, `token_self`, `token_opp` as data variables. Calculate `sum_tokens`, `fair_perc_self_calc` (handling `sum_tokens == 0`), `loss_below_fair`, and `U_accept`. Include calculation steps for derived variables *before* the formula for `U_accept`. Use clear mathematical notation within the <MODEL> tags (only the formula).\n*   **Learnable Parameters:** Exactly **2 learnable parameters**: `beta_value` (base value sensitivity) and `beta_unfairness` (unfairness divisor sensitivity). Choose descriptive, Python-safe names. Define clear, generous, finite numerical bounds. Non-negative bounds (e.g., `[0.0, 100.0]` for both) are theoretically appropriate and likely necessary for parameter recovery in this structure (e.g., `beta_unfairness` should be non-negative so the denominator increases with `loss_below_fair`, and `beta_value` should be non-negative for utility to increase with `split_perc_self` on fair offers). Stick with `[0.0, 100.0]` for both.\n*   **Calculated Variables:** Include descriptions for *all* calculated variables used in the model (including `U_accept`, `sum_tokens`, `fair_perc_self_calc`, and `loss_below_fair`) with `source: \"calculated\"`. Include descriptions for all data variables used as inputs (`token_self`, `token_opp`, `split_perc_self`) with `source: \"data\"`.\n*   **Variable Descriptions:** Provide variable descriptions in JSON format between <VARIABLES> tags for *all* variables in the <MODEL> formula. Include source, range (with inclusive flags), distribution (if applicable), and learnable status. Remember variable names must exactly match the model.\n*   **Target Variable:** Specify \"accept\" using <target_variable> tags.\n*   **Summary:** Provide a concise summary between <SUMMARY> tags. Describe the model's core idea (divisive structure where utility from `split_perc_self` is reduced by unfairness). Crucially, explain *how* this specific divisive structure, where `beta_unfairness` influences the denominator, is specifically intended to improve robust parameter identifiability by creating mathematically distinct and *interacting* influence profiles for `beta_value` and `beta_unfairness`, addressing the limitations and failures of previous structures.\n*   **Think Outside the Box:** Recognize that previous attempts with standard additive, squared additive, exponential additive, and linear multiplicative structures have consistently failed parameter recovery. The proposed divisive structure is another attempt at a non-additive interaction principle. Success in parameter recovery often requires exploring less standard structural principles. Continue to consider how parameters might interact via division, exponents, thresholds, or other non-linear functions that haven't been tried yet, focusing on creating distinctly shaped influences for each parameter across the range of possible offers.\n\nAvailable Data Variables:\n- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.\n(Note: Use `split_perc_self` for the participant's proposed percentage share percentage).\n\nPlease think through this step by step, then provide your model specification and variable descriptions. Remember that robust parameter identifiability for *both* learnable parameters (>= 0.7 recovery for both) is the absolute priority. Your goal is to find a structure where both parameters' influences are clearly distinguishable and interact in a way that allows for reliable estimation, ideally leading to improved fit metrics (BIC and accuracy) as a result of capturing the underlying process more accurately.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "```\n<MODEL>\nsum_tokens = token_self + token_opp\nfair_perc_self_calc = (token_self / sum_tokens) * 100.0 if sum_tokens > 0 else 50.0\nloss_below_fair = max(0.0, fair_perc_self_calc - split_perc_self)\nU_accept = (beta_value * split_perc_self) / (1.0 + beta_unfairness * loss_below_fair)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The proposed share for the participant in percentage\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"sum_tokens\": {\n      \"description\": \"Total number of tokens found by both participants\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fair_perc_self_calc\": {\n      \"description\": \"Calculated fair percentage share for the participant based on token contributions. Defaults to 50% if sum_tokens is 0.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"loss_below_fair\": {\n      \"description\": \"The difference between the fair percentage share and the proposed percentage share for the participant, floored at 0. Represents how much the offer falls below the calculated fair share.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_value\": {\n      \"description\": \"Sensitivity parameter to the proposed percentage share (split_perc_self). Higher values increase base utility.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_unfairness\": {\n      \"description\": \"Sensitivity parameter to unfairness (loss_below_fair). Higher values increase the penalty to utility via the denominator when offers are unfair.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U_accept\": {\n      \"description\": \"Utility for accepting the proposed offer. Calculated based on the proposed percentage share, scaled by beta_value and reduced by a factor related to unfairness (loss_below_fair) controlled by beta_unfairness.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA divisive utility model predicting responder acceptance. The model calculates the utility of accepting an offer based on the participant's proposed percentage share (split_perc_self), scaled by a value sensitivity parameter (beta_value). This scaled value is then divided by a term that increases with the magnitude of unfairness (loss_below_fair, the amount the offer is below the calculated fair share), controlled by an unfairness sensitivity parameter (beta_unfairness). This divisive structure, where beta_unfairness influences the denominator's penalty, is designed to create distinct, non-linear interactions between the parameters, aiming to improve robust parameter identifiability compared to previous additive or simple multiplicative models.\n</SUMMARY>\n```"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['beta_value', 'beta_unfairness']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                sum_tokens = token_self + token_opp\nfair_perc_self_calc = (token_self / sum_tokens) * 100.0 if sum_tokens > 0 else 50.0\nloss_below_fair = max(0.0, fair_perc_self_calc - split_perc_self)\nU_accept = (beta_value * split_perc_self) / (1.0 + beta_unfairness * loss_below_fair)\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The proposed share for the participant in percentage\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"sum_tokens\": {\n      \"description\": \"Total number of tokens found by both participants\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fair_perc_self_calc\": {\n      \"description\": \"Calculated fair percentage share for the participant based on token contributions. Defaults to 50% if sum_tokens is 0.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"loss_below_fair\": {\n      \"description\": \"The difference between the fair percentage share and the proposed percentage share for the participant, floored at 0. Represents how much the offer falls below the calculated fair share.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_value\": {\n      \"description\": \"Sensitivity parameter to the proposed percentage share (split_perc_self). Higher values increase base utility.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_unfairness\": {\n      \"description\": \"Sensitivity parameter to unfairness (loss_below_fair). Higher values increase the penalty to utility via the denominator when offers are unfair.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U_accept\": {\n      \"description\": \"Utility for accepting the proposed offer. Calculated based on the proposed percentage share, scaled by beta_value and reduced by a factor related to unfairness (loss_below_fair) controlled by beta_unfairness.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "python\nimport json\nimport math\n\ndef simulate_model(trial_data, beta_value=1, beta_unfairness=1):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        split_perc_self = trial.get(\"splitperc_self\", 0)\n\n        sum_tokens = token_self + token_opp\n        fair_perc_self_calc = (token_self / sum_tokens) * 100.0 if sum_tokens > 0 else 50.0\n        loss_below_fair = max(0.0, fair_perc_self_calc - split_perc_self)\n        U_accept = (beta_value * split_perc_self) / (1.0 + beta_unfairness * loss_below_fair)\n\n        model_predictions.append(U_accept)\n    return model_predictions\n```",
      "timestamp": 1746103512.804954
    }
  ],
  "learnable_parameters": {
    "beta_value": {
      "description": "Sensitivity parameter to the proposed percentage share (split_perc_self). Higher values increase base utility.",
      "range": {
        "min": 0.0,
        "max": 100.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta_unfairness": {
      "description": "Sensitivity parameter to unfairness (loss_below_fair). Higher values increase the penalty to utility via the denominator when offers are unfair.",
      "range": {
        "min": 0.0,
        "max": 100.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "sum_tokens = token_self + token_opp\nfair_perc_self_calc = (token_self / sum_tokens) * 100.0 if sum_tokens > 0 else 50.0\nloss_below_fair = max(0.0, fair_perc_self_calc - split_perc_self)\nU_accept = (beta_value * split_perc_self) / (1.0 + beta_unfairness * loss_below_fair)",
  "variable_descriptions": {
    "token_self": {
      "description": "Number of tokens found by the participant",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "split_perc_self": {
      "description": "The proposed share for the participant in percentage",
      "range": {
        "min": 0.0,
        "max": 100.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "sum_tokens": {
      "description": "Total number of tokens found by both participants",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "fair_perc_self_calc": {
      "description": "Calculated fair percentage share for the participant based on token contributions. Defaults to 50% if sum_tokens is 0.",
      "range": {
        "min": 0.0,
        "max": 100.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "loss_below_fair": {
      "description": "The difference between the fair percentage share and the proposed percentage share for the participant, floored at 0. Represents how much the offer falls below the calculated fair share.",
      "range": {
        "min": 0.0,
        "max": 100.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "beta_value": {
      "description": "Sensitivity parameter to the proposed percentage share (split_perc_self). Higher values increase base utility.",
      "range": {
        "min": 0.0,
        "max": 100.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta_unfairness": {
      "description": "Sensitivity parameter to unfairness (loss_below_fair). Higher values increase the penalty to utility via the denominator when offers are unfair.",
      "range": {
        "min": 0.0,
        "max": 100.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "U_accept": {
      "description": "Utility for accepting the proposed offer. Calculated based on the proposed percentage share, scaled by beta_value and reduced by a factor related to unfairness (loss_below_fair) controlled by beta_unfairness.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "A divisive utility model predicting responder acceptance. The model calculates the utility of accepting an offer based on the participant's proposed percentage share (split_perc_self), scaled by a value sensitivity parameter (beta_value). This scaled value is then divided by a term that increases with the magnitude of unfairness (loss_below_fair, the amount the offer is below the calculated fair share), controlled by an unfairness sensitivity parameter (beta_unfairness). This divisive structure, where beta_unfairness influences the denominator's penalty, is designed to create distinct, non-linear interactions between the parameters, aiming to improve robust parameter identifiability compared to previous additive or simple multiplicative models.",
  "target_variable": "accept",
  "full_reasoning": "```\n<MODEL>\nsum_tokens = token_self + token_opp\nfair_perc_self_calc = (token_self / sum_tokens) * 100.0 if sum_tokens > 0 else 50.0\nloss_below_fair = max(0.0, fair_perc_self_calc - split_perc_self)\nU_accept = (beta_value * split_perc_self) / (1.0 + beta_unfairness * loss_below_fair)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The proposed share for the participant in percentage\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"sum_tokens\": {\n      \"description\": \"Total number of tokens found by both participants\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fair_perc_self_calc\": {\n      \"description\": \"Calculated fair percentage share for the participant based on token contributions. Defaults to 50% if sum_tokens is 0.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"loss_below_fair\": {\n      \"description\": \"The difference between the fair percentage share and the proposed percentage share for the participant, floored at 0. Represents how much the offer falls below the calculated fair share.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_value\": {\n      \"description\": \"Sensitivity parameter to the proposed percentage share (split_perc_self). Higher values increase base utility.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_unfairness\": {\n      \"description\": \"Sensitivity parameter to unfairness (loss_below_fair). Higher values increase the penalty to utility via the denominator when offers are unfair.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U_accept\": {\n      \"description\": \"Utility for accepting the proposed offer. Calculated based on the proposed percentage share, scaled by beta_value and reduced by a factor related to unfairness (loss_below_fair) controlled by beta_unfairness.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA divisive utility model predicting responder acceptance. The model calculates the utility of accepting an offer based on the participant's proposed percentage share (split_perc_self), scaled by a value sensitivity parameter (beta_value). This scaled value is then divided by a term that increases with the magnitude of unfairness (loss_below_fair, the amount the offer is below the calculated fair share), controlled by an unfairness sensitivity parameter (beta_unfairness). This divisive structure, where beta_unfairness influences the denominator's penalty, is designed to create distinct, non-linear interactions between the parameters, aiming to improve robust parameter identifiability compared to previous additive or simple multiplicative models.\n</SUMMARY>\n```",
  "prediction_type": "utility",
  "current_model": "Specification: sum_tokens = token_self + token_opp\nfair_perc_self_calc = (token_self / sum_tokens) * 100.0 if sum_tokens > 0 else 50.0\nloss_below_fair = max(0.0, fair_perc_self_calc - split_perc_self)\nU_accept = (beta_value * split_perc_self) / (1.0 + beta_unfairness * loss_below_fair)\nSummary: A divisive utility model predicting responder acceptance. The model calculates the utility of accepting an offer based on the participant's proposed percentage share (split_perc_self), scaled by a value sensitivity parameter (beta_value). This scaled value is then divided by a term that increases with the magnitude of unfairness (loss_below_fair, the amount the offer is below the calculated fair share), controlled by an unfairness sensitivity parameter (beta_unfairness). This divisive structure, where beta_unfairness influences the denominator's penalty, is designed to create distinct, non-linear interactions between the parameters, aiming to improve robust parameter identifiability compared to previous additive or simple multiplicative models.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, beta_value=1, beta_unfairness=1):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        split_perc_self = trial.get(\"splitperc_self\", 0)\n\n        sum_tokens = token_self + token_opp\n        fair_perc_self_calc = (token_self / sum_tokens) * 100.0 if sum_tokens > 0 else 50.0\n        loss_below_fair = max(0.0, fair_perc_self_calc - split_perc_self)\n        U_accept = (beta_value * split_perc_self) / (1.0 + beta_unfairness * loss_below_fair)\n\n        model_predictions.append(U_accept)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.6617826617826618,
  "group_accuracies": {
    "Control": 0.729328165374677,
    "Cocaine": 0.6012731481481481
  },
  "group_parameter_averages": {
    "Control": {
      "beta_value": 43.87518270220585,
      "beta_unfairness": 62.13315210072208
    },
    "Cocaine": {
      "beta_value": 16.922419672429136,
      "beta_unfairness": 70.29337667262551
    }
  },
  "fitting_results": [
    {
      "beta_value": 0.0046851746574982905,
      "beta_unfairness": 76.22580197535126,
      "success": true,
      "log_likelihood": -24.930930572452297,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 21.605578218944054,
      "beta_unfairness": 83.94311073730034,
      "success": true,
      "log_likelihood": -20.160186358104287,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 33.30444096965659,
      "beta_unfairness": 90.78280572973331,
      "success": true,
      "log_likelihood": -18.953124137981913,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 6.058093832917815,
      "beta_unfairness": 100.0,
      "success": true,
      "log_likelihood": -22.02584592429258,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 22.73708154130023,
      "beta_unfairness": 99.21683144998347,
      "success": true,
      "log_likelihood": -20.479272401323794,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 58.84150098006193,
      "beta_unfairness": 100.0,
      "success": true,
      "log_likelihood": -16.86114791595818,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 100.0,
      "beta_unfairness": 0.0,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 45.819247286353146,
      "beta_unfairness": 67.2485324374229,
      "success": true,
      "log_likelihood": -16.100594001418344,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 60.484362861380106,
      "beta_unfairness": 0.0,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 13.451987204500291,
      "beta_unfairness": 100.0,
      "success": true,
      "log_likelihood": -21.48161092427542,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 21.637377003250375,
      "beta_unfairness": 80.30628452602369,
      "success": true,
      "log_likelihood": -20.02406991868827,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 0.004770266100656395,
      "beta_unfairness": 100.0,
      "success": true,
      "log_likelihood": -24.930114431553577,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 20.44883998509731,
      "beta_unfairness": 99.93800659574529,
      "success": true,
      "log_likelihood": -20.702131302710306,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 67.70621049064657,
      "beta_unfairness": 0.0,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 100.0,
      "beta_unfairness": 0.0,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 89.65502139916748,
      "beta_unfairness": 0.0,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 25.623643381387303,
      "beta_unfairness": 0.0,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 90.60179369754782,
      "beta_unfairness": 39.73192058627467,
      "success": true,
      "log_likelihood": -7.839206556392696,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 88.67907190916951,
      "beta_unfairness": 35.36074790546015,
      "success": true,
      "log_likelihood": -7.157224490506243,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 81.36602952158208,
      "beta_unfairness": 0.0,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 31.873914916417885,
      "beta_unfairness": 83.33853820301027,
      "success": true,
      "log_likelihood": -18.79089187726228,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 66.07972305089703,
      "beta_unfairness": 32.89073557521095,
      "success": true,
      "log_likelihood": -8.773792197812792,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 0.16308503319097692,
      "beta_unfairness": 100.0,
      "success": true,
      "log_likelihood": -22.208079135533417,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 15.803496699688202,
      "beta_unfairness": 95.20374341904535,
      "success": true,
      "log_likelihood": -21.170975076628768,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 15.917899007806128,
      "beta_unfairness": 57.67696570861967,
      "success": true,
      "log_likelihood": -19.952555031358976,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 44.23680484460201,
      "beta_unfairness": 100.0,
      "success": true,
      "log_likelihood": -18.187510627845608,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 36.03916490886465,
      "beta_unfairness": 90.3180490661864,
      "success": true,
      "log_likelihood": -18.61999651959946,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 3.3731152056982183,
      "beta_unfairness": 100.0,
      "success": true,
      "log_likelihood": -22.13189616245095,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 99.26228695031395,
      "beta_unfairness": 47.674082731265564,
      "success": true,
      "log_likelihood": -8.505748487352399,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 83.99635674466255,
      "beta_unfairness": 86.3594458793043,
      "success": true,
      "log_likelihood": -13.988995787949321,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 100.0,
      "beta_unfairness": 0.0,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 0.004735686723880149,
      "beta_unfairness": 100.0,
      "success": true,
      "log_likelihood": -24.930446488914953,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 0.027626701172547962,
      "beta_unfairness": 61.32735881091388,
      "success": true,
      "log_likelihood": -24.30571044932479,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 3.891847884945798,
      "beta_unfairness": 63.568538432390376,
      "success": true,
      "log_likelihood": -22.02300128241667,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 63.05526759131402,
      "beta_unfairness": 0.0,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 43.270813523393535,
      "beta_unfairness": 95.94190482591021,
      "success": true,
      "log_likelihood": -18.10397740197547,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 64.94810136868341,
      "beta_unfairness": 76.23069304876256,
      "success": true,
      "log_likelihood": -14.819446040257969,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 24.90030086071001,
      "beta_unfairness": 92.97392316779624,
      "success": true,
      "log_likelihood": -20.041321918120577,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 41.843464431507975,
      "beta_unfairness": 80.43667889781774,
      "success": true,
      "log_likelihood": -17.459631568435523,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 81.98713606333096,
      "beta_unfairness": 34.62299001209742,
      "success": true,
      "log_likelihood": -7.567701291818011,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 31.464891884902396,
      "beta_unfairness": 77.81769338487906,
      "success": true,
      "log_likelihood": -18.566728730023097,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 0.1599244752230353,
      "beta_unfairness": 89.34412482935493,
      "success": true,
      "log_likelihood": -22.210508938226045,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 86.30316263708137,
      "beta_unfairness": 33.24603239518936,
      "success": true,
      "log_likelihood": -6.9176978336587025,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 21.17808181224668,
      "beta_unfairness": 80.16860716743987,
      "success": true,
      "log_likelihood": -20.083716786304468,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 35.96557605162405,
      "beta_unfairness": 77.28177480523746,
      "success": true,
      "log_likelihood": -17.967464708009807,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 26.887839487057807,
      "beta_unfairness": 55.83129059849505,
      "success": true,
      "log_likelihood": -17.8173932809344,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 28.29449231218083,
      "beta_unfairness": 100.0,
      "success": true,
      "log_likelihood": -19.870366606411377,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.2671911839010468,
      "beta_unfairness": 100.0,
      "success": true,
      "log_likelihood": -22.181087037915017,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 15.335641538531073,
      "beta_unfairness": 100.0,
      "success": true,
      "log_likelihood": -21.299604812345578,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 4.455669698690331,
      "beta_unfairness": 84.19060943710265,
      "success": true,
      "log_likelihood": -45.08779116868055,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 40.63722553061517,
      "beta_unfairness": 100.0,
      "success": true,
      "log_likelihood": -18.544916346688918,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.004720944046184302,
      "beta_unfairness": 76.5945633720822,
      "success": true,
      "log_likelihood": -24.93058958265289,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 32.07604805596561,
      "beta_unfairness": 100.0,
      "success": true,
      "log_likelihood": -42.47567621082153,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.027708017646122168,
      "beta_unfairness": 79.26690827295688,
      "success": true,
      "log_likelihood": -24.302590272020378,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.2844853877736921,
      "beta_unfairness": 100.0,
      "success": true,
      "log_likelihood": -22.18066793346285,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 9.927449627292047,
      "beta_unfairness": 100.0,
      "success": true,
      "log_likelihood": -21.780783127999733,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.17591541273115593,
      "beta_unfairness": 100.0,
      "success": true,
      "log_likelihood": -22.197669868545802,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.1116527284901937,
      "beta_unfairness": 0.22626578402555056,
      "success": true,
      "log_likelihood": -18.33097140595719,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.00475562763239273,
      "beta_unfairness": 100.0,
      "success": true,
      "log_likelihood": -24.930256847227202,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 19.259600298545507,
      "beta_unfairness": 18.22719825717336,
      "success": true,
      "log_likelihood": -13.46174245214337,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 7.762953693482853,
      "beta_unfairness": 38.07514065066994,
      "success": true,
      "log_likelihood": -20.769699485946322,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 22.129989542124026,
      "beta_unfairness": 76.76227295230723,
      "success": true,
      "log_likelihood": -19.811710302893893,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.004730548214949679,
      "beta_unfairness": 97.19295642088848,
      "success": true,
      "log_likelihood": -24.93049155372654,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.0275971034547724,
      "beta_unfairness": 100.0,
      "success": true,
      "log_likelihood": -24.30681954540198,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.1551763808271926,
      "beta_unfairness": 100.0,
      "success": true,
      "log_likelihood": -22.216778103807595,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 34.39079543806553,
      "beta_unfairness": 88.90443686808653,
      "success": true,
      "log_likelihood": -18.74499637480844,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 68.62347678741719,
      "beta_unfairness": 26.443635492704423,
      "success": true,
      "log_likelihood": -6.920052823584461,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 70.02425122888732,
      "beta_unfairness": 43.86153552316382,
      "success": true,
      "log_likelihood": -10.49410702077164,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 7.998742558060273,
      "beta_unfairness": 44.87216921123173,
      "success": true,
      "log_likelihood": -21.04647252659863,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 37.70380835932832,
      "beta_unfairness": 22.65746983124382,
      "success": true,
      "log_likelihood": -10.192245412778494,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.1414615053438068,
      "beta_unfairness": 100.0,
      "success": true,
      "log_likelihood": -22.24039582652682,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.004763116144400724,
      "beta_unfairness": 100.0,
      "success": true,
      "log_likelihood": -24.930185483764713,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 7.151179988487572,
      "beta_unfairness": 42.873721518703505,
      "success": true,
      "log_likelihood": -21.1670542255391,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.08307241084166984,
      "beta_unfairness": 0.031677072375609364,
      "success": true,
      "log_likelihood": -15.643508618061098,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 9.438158009113065,
      "beta_unfairness": 74.18051785284223,
      "success": true,
      "log_likelihood": -44.57495294035902,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 30.470484114230246,
      "beta_unfairness": 49.893319151044444,
      "success": true,
      "log_likelihood": -16.678167080865034,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 99.171280406999,
      "beta_unfairness": 33.00899124988446,
      "success": true,
      "log_likelihood": -5.925884236347462,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.0,
      "beta_unfairness": 40.356832215958754,
      "success": true,
      "log_likelihood": -24.95329849295801,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 20.401367842670123,
      "beta_unfairness": 95.38934067024877,
      "success": true,
      "log_likelihood": -20.651672245464518,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.004734405110411177,
      "beta_unfairness": 99.14959624687265,
      "success": true,
      "log_likelihood": -24.930459876960178,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.352361713120763,
      "beta_unfairness": 99.41890077266889,
      "success": true,
      "log_likelihood": -22.180201222957177,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.155833856361531,
      "beta_unfairness": 0.3675802001752568,
      "success": true,
      "log_likelihood": -16.8699922116071,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.0,
      "beta_unfairness": 79.94259580870765,
      "success": true,
      "log_likelihood": -24.95329849295801,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 13.462275601141293,
      "beta_unfairness": 87.8437945619878,
      "success": true,
      "log_likelihood": -21.3010602280444,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 14.424350969110286,
      "beta_unfairness": 100.0,
      "success": true,
      "log_likelihood": -21.389219286086398,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.02737890811858839,
      "beta_unfairness": 100.0,
      "success": true,
      "log_likelihood": -24.315277196778993,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 46.60035617418327,
      "beta_unfairness": 86.21149194504835,
      "success": true,
      "log_likelihood": -17.27701563608079,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 3.6823376168289877e-06,
      "beta_unfairness": 31.18105479633912,
      "success": true,
      "log_likelihood": -24.95329847932409,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 77.97880711050473,
      "beta_unfairness": 24.438243836253424,
      "success": true,
      "log_likelihood": -5.540509678932057,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 2.5646333559846863,
      "beta_unfairness": 91.56943117341217,
      "success": true,
      "log_likelihood": -22.14699201465147,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 6.128065751963147,
      "beta_unfairness": 27.66815656869261,
      "success": true,
      "log_likelihood": -20.581197823196888,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "beta_value": {
        "r": 0.4361580135778061,
        "p": 5.732287087814135e-06
      },
      "beta_unfairness": {
        "r": 0.44510882559465353,
        "p": 3.483037811690785e-06
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 43.01324391309081,
  "bic_Control": 35.58201795831797,
  "bic_Cocaine": 49.67038383090815,
  "bic_results": {
    "average_bic": 43.01324391309081,
    "individual_bics": [
      57.02889902181681,
      47.48741059312079,
      45.073286152876044,
      51.218729725497376,
      48.125582679559805,
      40.88933370882858,
      7.167037869712219,
      39.368225879748906,
      7.167037869712219,
      50.130259725463056,
      47.21517771428876,
      57.02726674001937,
      48.57130048233283,
      7.167037869712219,
      7.167037869712219,
      7.167037869712219,
      7.167037869712219,
      22.84545098969761,
      21.481486857924708,
      7.167037869712219,
      44.748821631436776,
      24.714622272537802,
      51.58319614797905,
      49.50898803016975,
      47.07214793963017,
      43.542059132603434,
      44.40703091611114,
      51.43083020181412,
      24.178534851617016,
      35.14502945281086,
      7.167037869712219,
      57.027930854742124,
      55.778458775561795,
      51.213040441745555,
      7.167037869712219,
      43.37499268086316,
      36.805929957428155,
      47.24968171315337,
      42.08630101378326,
      22.30244046054824,
      44.30049533695841,
      51.58805575336431,
      21.002433544229625,
      47.33447144952115,
      43.10196729293183,
      42.80182443878102,
      46.90777108973497,
      51.52921195274225,
      49.766247501603374,
      97.34262021427332,
      44.256870570290054,
      57.028217042217996,
      92.11839029855528,
      55.772218420952974,
      51.52837374383792,
      50.728604132911684,
      51.56237761400382,
      43.8289806888266,
      57.02755157136662,
      34.09052278119896,
      48.70643684880486,
      46.790458482700004,
      57.0280209843653,
      55.780676967716175,
      51.60059408452741,
      44.6570306265291,
      21.007143524081144,
      28.155251918455498,
      49.25998293010948,
      27.551528702469206,
      51.64782952996586,
      57.027408844441645,
      49.50114632799042,
      38.454055113034414,
      96.31694375763026,
      40.523372038642286,
      19.018806349607146,
      57.073634862828236,
      48.47038236784125,
      57.027957630832574,
      51.52744032282657,
      40.90702230012642,
      57.073634862828236,
      49.769158333001016,
      49.945476449085014,
      55.797592270470204,
      41.7210691490738,
      57.0736348355604,
      18.248057234776333,
      51.46102190621516,
      48.329433523305994
    ],
    "group_enabled": true,
    "group_bics": {
      "Control": [
        57.02889902181681,
        47.48741059312079,
        45.073286152876044,
        51.218729725497376,
        48.125582679559805,
        40.88933370882858,
        7.167037869712219,
        39.368225879748906,
        7.167037869712219,
        50.130259725463056,
        47.21517771428876,
        57.02726674001937,
        48.57130048233283,
        7.167037869712219,
        7.167037869712219,
        7.167037869712219,
        7.167037869712219,
        22.84545098969761,
        21.481486857924708,
        7.167037869712219,
        44.748821631436776,
        24.714622272537802,
        51.58319614797905,
        49.50898803016975,
        47.07214793963017,
        43.542059132603434,
        44.40703091611114,
        51.43083020181412,
        24.178534851617016,
        35.14502945281086,
        7.167037869712219,
        57.027930854742124,
        55.778458775561795,
        51.213040441745555,
        7.167037869712219,
        43.37499268086316,
        36.805929957428155,
        47.24968171315337,
        42.08630101378326,
        22.30244046054824,
        44.30049533695841,
        51.58805575336431,
        21.002433544229625
      ],
      "Cocaine": [
        47.33447144952115,
        43.10196729293183,
        42.80182443878102,
        46.90777108973497,
        51.52921195274225,
        49.766247501603374,
        97.34262021427332,
        44.256870570290054,
        57.028217042217996,
        92.11839029855528,
        55.772218420952974,
        51.52837374383792,
        50.728604132911684,
        51.56237761400382,
        43.8289806888266,
        57.02755157136662,
        34.09052278119896,
        48.70643684880486,
        46.790458482700004,
        57.0280209843653,
        55.780676967716175,
        51.60059408452741,
        44.6570306265291,
        21.007143524081144,
        28.155251918455498,
        49.25998293010948,
        27.551528702469206,
        51.64782952996586,
        57.027408844441645,
        49.50114632799042,
        38.454055113034414,
        96.31694375763026,
        40.523372038642286,
        19.018806349607146,
        57.073634862828236,
        48.47038236784125,
        57.027957630832574,
        51.52744032282657,
        40.90702230012642,
        57.073634862828236,
        49.769158333001016,
        49.945476449085014,
        55.797592270470204,
        41.7210691490738,
        57.0736348355604,
        18.248057234776333,
        51.46102190621516,
        48.329433523305994
      ]
    },
    "num_parameters": 2,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- beta_value: r = 0.436\n- beta_unfairness: r = 0.445",
  "previous_models": [
    "Specification: sum_tokens = token_self + token_opp\nfair_perc_self_calc = (token_self / sum_tokens) * 100.0 if sum_tokens > 0 else 50.0\nloss_below_fair = max(0.0, fair_perc_self_calc - split_perc_self)\nU_accept = (beta_value * split_perc_self) / (1.0 + beta_unfairness * loss_below_fair)\nSummary: A divisive utility model predicting responder acceptance. The model calculates the utility of accepting an offer based on the participant's proposed percentage share (split_perc_self), scaled by a value sensitivity parameter (beta_value). This scaled value is then divided by a term that increases with the magnitude of unfairness (loss_below_fair, the amount the offer is below the calculated fair share), controlled by an unfairness sensitivity parameter (beta_unfairness). This divisive structure, where beta_unfairness influences the denominator's penalty, is designed to create distinct, non-linear interactions between the parameters, aiming to improve robust parameter identifiability compared to previous additive or simple multiplicative models.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 43.01324391309081\nOverall Accuracy: 0.6618\nGroup Accuracies:\n- Control: 0.7293\n- Cocaine: 0.6013\n\nParameter Recovery:\n- beta_value: r = 0.436\n- beta_unfairness: r = 0.445"
  ]
}