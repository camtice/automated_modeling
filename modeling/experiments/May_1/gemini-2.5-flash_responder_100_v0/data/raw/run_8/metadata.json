{
  "task_description": "In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "Design a computational model for the described ultimatum game responder task. Your model must meet the following criteria:\n1.  **Predict only responder behavior** (target variable: \"accept\").\n2.  **Achieve excellent parameter recovery (>= 0.7 correlation) for ALL learnable parameters.** This remains the *single most important* objective. Previous attempts have failed here, including the most recent one. A model is unusable if any learnable parameter cannot be reliably recovered, regardless of other metrics (like BIC or accuracy). Prioritize model structures that inherently enhance parameter identifiability from the data.\n3.  **Be applicable to the dataset:** Use only the provided data structure and variables available during responder trials (trial_role == 1).\n4.  **Predict utility:** Utility values will be converted to acceptance probabilities using a logistic function (with temperature 1). A utility > 0 implies > 50% probability of acceptance.\n\n**Analysis of Previous Attempt (Run 7):** The most recent model (`beta_gain * split_perc_self - gamma_unfairness * max(0, fair_perc_self - split_perc_self)`) showed promising signs in terms of BIC (76.39) and accuracy (0.821), improving significantly over earlier models on these metrics. However, it **failed parameter recovery** (`beta_gain: r=0.576`, `gamma_unfairness: r=0.638`). Both parameters were below the critical 0.7 threshold, rendering the model unusable for reliable inference about participant strategies. This suggests that even this simple piecewise structure, with linear scaling of the offer value and a linear penalty below the proportional norm (`fair_perc_self`), still allows for the parameters' effects to be too correlated or substitutable given the data pattern. For example, the effect of increasing the offer percentage and the effect of reducing the unfairness penalty below the norm might overlap too much in how they influence the utility curve.\n\n**Guidance for the Next Model (Radically Prioritizing Parameter Recovery - Continued):** The core challenge remains the design of a utility function where each learnable parameter has a truly unique \"signature\" on the utility curve, making its contribution statistically separable from the others during parameter fitting. Simple additive components scaled by parameters, even with basic thresholds (`max(0,...)`), have consistently failed to produce identifiable parameters in this dataset.\n\nWe need to explore model structures where parameters exert influence in more distinct, non-overlapping ways. Think beyond simple linear terms and single penalty thresholds. Consider how parameters can control the *shape* or *structure* of the utility function itself, especially around the crucial reference points (50% and the proportional share `fair_perc_self`).\n\n*   **Model Multiple Norms Distinctly:** Explicitly incorporate both the 50% norm and the proportional norm (`fair_perc_self`). Can parameters control the sensitivity or type of penalty/bonus *relative to each norm separately*?\n*   **Thresholds and Switching Points:** Design parameters that act as thresholds or switching points in the utility function based on the offer percentage (`split_perc_self`) relative to the norms. For instance, a parameter could define how far below 50% an offer must be to trigger a specific strong rejection tendency, while another parameter controls the sensitivity to offers *between* 50% and the proportional share, and another for offers *above* the proportional share.\n*   **Parameterize the Shape/Exponent:** Could a parameter control the exponent of the fairness deviation (`max(0, fair_perc_self - split_perc_self)^parameter_exponent`) or the offer value (`split_perc_self^parameter_exponent`)? Parameters controlling exponents or non-linear transformations often have very different effects on the utility function shape than simple linear scales.\n*   **Multiplicative Interactions:** Explore models where parameters scale *interactions* between different components, rather than just additive terms. For example, `Utility = split_perc_self * (1 - fairness_parameter * deviation)` or `Utility = split_perc_self - penalty_parameter * (deviation_below_50 + deviation_below_prop)`.\n*   **Parameters Controlling Relative Weights of Norms:** Design a parameter that explicitly weighs the influence of the 50% norm versus the proportional norm in determining fairness sensitivity or the reference point, potentially in a non-linear or threshold-dependent manner (this was attempted in Run 1 but recovery was poor there too, suggesting the weighting mechanism needs refinement).\n\nFocus on defining parameters whose effect on utility cannot be replicated by adjusting other parameters. This might involve parameters that:\n- Change the slope of the utility function in specific ranges.\n- Control the curvature (e.g., quadratic or exponential terms).\n- Define thresholds where the functional form of utility changes.\n- Modify how different factors (offer, 50% deviation, proportional deviation) combine, not just additively.\n\nContinue to build the model using percentage-based values (`split_perc_self`, `fair_perc_self`). Aim for the minimum number of learnable parameters necessary *only if* their effects are clearly separable and identifiable. A model with fewer, identifiable parameters is vastly preferred over one with many, unidentifiable ones, regardless of seemingly good BIC or accuracy scores on validation data.\n\nFor any learnable parameters, you must specify generous, finite numerical bounds. The utility variable may be unbounded (-inf to inf).\n\nProvide your formal mathematical model between <MODEL> tags. Ensure *only* the mathematical formula is within these tags.\nProvide variable descriptions in JSON format between <VARIABLES> tags. Ensure learnable parameter names are clear and suitable for coding. Spell out Greek variables.\nSpecify the target variable using <target_variable> tags.\nProvide a concise, descriptive summary of the model between <SUMMARY> tags.\n\nAvailable Data Variables:\n- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.\nRemember to only model responder trials (where trial_role == 1) and use variables available in that context. The `fair_perc_self` variable (calculated as `(token_self / (token_self + token_opp)) * 100`) is useful for fairness calculations.\n\nFor run 8 of 100, please think through this step by step, focusing intently on how the *specific mathematical structure* of the model guarantees parameter identifiability and distinguishes the influence of each parameter, minimizing covariance based on the *specific* data characteristics. How can you define learnable parameters that control fundamentally different aspects of the utility function (e.g., slope, threshold, exponent, interaction weight, switching points based on norms) rather than just scaling additive components? Think creatively about non-linear and piecewise structures relative to *both* the 50% and proportional norms. Then provide your model specification, variable descriptions, target variable, and summary.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: Design a computational model for the described ultimatum game responder task. Your model must meet the following criteria:\n1.  **Predict only responder behavior** (target variable: \"accept\").\n2.  **Achieve excellent parameter recovery (>= 0.7 correlation) for ALL learnable parameters.** This remains the *single most important* objective. Previous attempts have failed here, including the most recent one. A model is unusable if any learnable parameter cannot be reliably recovered, regardless of other metrics (like BIC or accuracy). Prioritize model structures that inherently enhance parameter identifiability from the data.\n3.  **Be applicable to the dataset:** Use only the provided data structure and variables available during responder trials (trial_role == 1).\n4.  **Predict utility:** Utility values will be converted to acceptance probabilities using a logistic function (with temperature 1). A utility > 0 implies > 50% probability of acceptance.\n\n**Analysis of Previous Attempt (Run 7):** The most recent model (`beta_gain * split_perc_self - gamma_unfairness * max(0, fair_perc_self - split_perc_self)`) showed promising signs in terms of BIC (76.39) and accuracy (0.821), improving significantly over earlier models on these metrics. However, it **failed parameter recovery** (`beta_gain: r=0.576`, `gamma_unfairness: r=0.638`). Both parameters were below the critical 0.7 threshold, rendering the model unusable for reliable inference about participant strategies. This suggests that even this simple piecewise structure, with linear scaling of the offer value and a linear penalty below the proportional norm (`fair_perc_self`), still allows for the parameters' effects to be too correlated or substitutable given the data pattern. For example, the effect of increasing the offer percentage and the effect of reducing the unfairness penalty below the norm might overlap too much in how they influence the utility curve.\n\n**Guidance for the Next Model (Radically Prioritizing Parameter Recovery - Continued):** The core challenge remains the design of a utility function where each learnable parameter has a truly unique \"signature\" on the utility curve, making its contribution statistically separable from the others during parameter fitting. Simple additive components scaled by parameters, even with basic thresholds (`max(0,...)`), have consistently failed to produce identifiable parameters in this dataset.\n\nWe need to explore model structures where parameters exert influence in more distinct, non-overlapping ways. Think beyond simple linear terms and single penalty thresholds. Consider how parameters can control the *shape* or *structure* of the utility function itself, especially around the crucial reference points (50% and the proportional share `fair_perc_self`).\n\n*   **Model Multiple Norms Distinctly:** Explicitly incorporate both the 50% norm and the proportional norm (`fair_perc_self`). Can parameters control the sensitivity or type of penalty/bonus *relative to each norm separately*?\n*   **Thresholds and Switching Points:** Design parameters that act as thresholds or switching points in the utility function based on the offer percentage (`split_perc_self`) relative to the norms. For instance, a parameter could define how far below 50% an offer must be to trigger a specific strong rejection tendency, while another parameter controls the sensitivity to offers *between* 50% and the proportional share, and another for offers *above* the proportional share.\n*   **Parameterize the Shape/Exponent:** Could a parameter control the exponent of the fairness deviation (`max(0, fair_perc_self - split_perc_self)^parameter_exponent`) or the offer value (`split_perc_self^parameter_exponent`)? Parameters controlling exponents or non-linear transformations often have very different effects on the utility function shape than simple linear scales.\n*   **Multiplicative Interactions:** Explore models where parameters scale *interactions* between different components, rather than just additive terms. For example, `Utility = split_perc_self * (1 - fairness_parameter * deviation)` or `Utility = split_perc_self - penalty_parameter * (deviation_below_50 + deviation_below_prop)`.\n*   **Parameters Controlling Relative Weights of Norms:** Design a parameter that explicitly weighs the influence of the 50% norm versus the proportional norm in determining fairness sensitivity or the reference point, potentially in a non-linear or threshold-dependent manner (this was attempted in Run 1 but recovery was poor there too, suggesting the weighting mechanism needs refinement).\n\nFocus on defining parameters whose effect on utility cannot be replicated by adjusting other parameters. This might involve parameters that:\n- Change the slope of the utility function in specific ranges.\n- Control the curvature (e.g., quadratic or exponential terms).\n- Define thresholds where the functional form of utility changes.\n- Modify how different factors (offer, 50% deviation, proportional deviation) combine, not just additively.\n\nContinue to build the model using percentage-based values (`split_perc_self`, `fair_perc_self`). Aim for the minimum number of learnable parameters necessary *only if* their effects are clearly separable and identifiable. A model with fewer, identifiable parameters is vastly preferred over one with many, unidentifiable ones, regardless of seemingly good BIC or accuracy scores on validation data.\n\nFor any learnable parameters, you must specify generous, finite numerical bounds. The utility variable may be unbounded (-inf to inf).\n\nProvide your formal mathematical model between <MODEL> tags. Ensure *only* the mathematical formula is within these tags.\nProvide variable descriptions in JSON format between <VARIABLES> tags. Ensure learnable parameter names are clear and suitable for coding. Spell out Greek variables.\nSpecify the target variable using <target_variable> tags.\nProvide a concise, descriptive summary of the model between <SUMMARY> tags.\n\nAvailable Data Variables:\n- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.\nRemember to only model responder trials (where trial_role == 1) and use variables available in that context. The `fair_perc_self` variable (calculated as `(token_self / (token_self + token_opp)) * 100`) is useful for fairness calculations.\n\nFor run 8 of 100, please think through this step by step, focusing intently on how the *specific mathematical structure* of the model guarantees parameter identifiability and distinguishes the influence of each parameter, minimizing covariance based on the *specific* data characteristics. How can you define learnable parameters that control fundamentally different aspects of the utility function (e.g., slope, threshold, exponent, interaction weight, switching points based on norms) rather than just scaling additive components? Think creatively about non-linear and piecewise structures relative to *both* the 50% and proportional norms. Then provide your model specification, variable descriptions, target variable, and summary.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<MODEL>\nU = beta_value * split_perc_self - gamma_fairness * max(0, (token_self / (token_self + token_opp)) * 100 - split_perc_self) - delta_inequity * max(0, 50 - split_perc_self)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the proposed split.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n        },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_value\": {\n      \"description\": \"Parameter scaling the intrinsic value of the offered percentage.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma_fairness\": {\n      \"description\": \"Parameter scaling the penalty for offers below the proportional share.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"delta_inequity\": {\n      \"description\": \"Parameter scaling the additional penalty for offers below the 50% equal split.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The percentage of the total earnings offered to the participant (responder).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n     \"token_self\": {\n      \"description\": \"Number of tokens found by the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent.\",\n       \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"accept\": {\n      \"description\": \"Participant's decision to accept (1) or reject (0) the offer.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n       \"distribution\": {\n        \"type\": \"bernoulli\"\n       },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA utility model for the responder's decision that combines the value of the offered percentage with distinct penalties based on deviations from fairness norms. Utility increases linearly with the offered percentage, scaled by 'beta_value'. An additional penalty is applied if the offer falls below the proportional share (calculated from token contributions), scaled by 'gamma_fairness'. A separate, additional penalty is applied if the offer falls below the 50% equal split, scaled by 'delta_inequity'. These parameters define piecewise linear segments of the utility function relative to the offered percentage, with breakpoints at the proportional share and 50%. The model uses three non-negative learnable parameters, constrained to [0, 100].\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['beta_value', 'gamma_fairness', 'delta_inequity']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                U = beta_value * split_perc_self - gamma_fairness * max(0, (token_self / (token_self + token_opp)) * 100 - split_perc_self) - delta_inequity * max(0, 50 - split_perc_self)\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the proposed split.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_value\": {\n      \"description\": \"Parameter scaling the intrinsic value of the offered percentage.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma_fairness\": {\n      \"description\": \"Parameter scaling the penalty for offers below the proportional share.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"delta_inequity\": {\n      \"description\": \"Parameter scaling the additional penalty for offers below the 50% equal split.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The percentage of the total earnings offered to the participant (responder).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"accept\": {\n      \"description\": \"Participant's decision to accept (1) or reject (0) the offer.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"bernoulli\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, beta_value=1, gamma_fairness=1, delta_inequity=1):\n    model_predictions = []\n    for trial in trial_data:\n        split_perc_self = trial.get(\"splitperc_self\", 0)\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n\n        if (token_self + token_opp) > 0:\n            proportional_share = (token_self / (token_self + token_opp)) * 100\n        else:\n            proportional_share = 50  # Default to 50 if both are zero to avoid division by zero\n\n        fairness_penalty = gamma_fairness * max(0, proportional_share - split_perc_self)\n        inequity_penalty = delta_inequity * max(0, 50 - split_perc_self)\n        \n        U = beta_value * split_perc_self - fairness_penalty - inequity_penalty\n        \n        model_predictions.append(U)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '[{\"ID\": 0, \"group\": \"control\", \"trial_number\": 1, \"trial_type\": 1, \"trial_role\": 0, \"token_opp\": 6, \"token_self\": 4, \"combined_earning\": 10, \"split_opp\": 7.0, \"split_self\": 3.0, \"splitperc_opp\": 70, \"splitperc_self\": 30, \"accept\": 0.0, \"accepted_amount\": 0.0, \"accepted_perc\": 0.0, \"proposed_perc\": 70.0, \"proposed_amount\": 7.0}, {\"ID\": 1, \"group\": \"control\", \"trial_number\": 2, \"trial_type\": 1, \"trial_role\": 0, \"token_opp\": 6, \"token_self\": 4, \"combined_earning\": 10, \"split_opp\": 7.0, \"split_self\": 3.0, \"splitperc_opp\": 70, \"splitperc_self\": 30, \"accept\": 0.0, \"accepted_amount\": 0.0, \"accepted_perc\": 0.0, \"proposed_perc\": 70.0, \"proposed_amount\": 7.0}, {\"ID\": 2, \"group\": \"control\", \"trial_number\": 3, \"trial_type\": 1, \"trial_role\": 0, \"token_opp\": 6, \"token_self\": 4, \"combined_earning\": 10, \"split_opp\": 7.0, \"split_self\": 3.0, \"splitperc_opp\": 70, \"splitperc_self\": 30, \"accept\": 0.0, \"accepted_amount\": 0.0, \"accepted_perc\": 0.0, \"proposed_perc\": 70.0, \"proposed_amount\": 7.0}]'\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n",
      "timestamp": 1746096435.574108
    }
  ],
  "learnable_parameters": {
    "beta_value": {
      "description": "Parameter scaling the intrinsic value of the offered percentage.",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "gamma_fairness": {
      "description": "Parameter scaling the penalty for offers below the proportional share.",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "delta_inequity": {
      "description": "Parameter scaling the additional penalty for offers below the 50% equal split.",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "U = beta_value * split_perc_self - gamma_fairness * max(0, (token_self / (token_self + token_opp)) * 100 - split_perc_self) - delta_inequity * max(0, 50 - split_perc_self)",
  "variable_descriptions": {
    "U": {
      "description": "Utility of accepting the proposed split.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "beta_value": {
      "description": "Parameter scaling the intrinsic value of the offered percentage.",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "gamma_fairness": {
      "description": "Parameter scaling the penalty for offers below the proportional share.",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "delta_inequity": {
      "description": "Parameter scaling the additional penalty for offers below the 50% equal split.",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "split_perc_self": {
      "description": "The percentage of the total earnings offered to the participant (responder).",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Number of tokens found by the participant.",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent.",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "accept": {
      "description": "Participant's decision to accept (1) or reject (0) the offer.",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "bernoulli"
      },
      "learnable": false,
      "source": "data"
    }
  },
  "model_summary": "A utility model for the responder's decision that combines the value of the offered percentage with distinct penalties based on deviations from fairness norms. Utility increases linearly with the offered percentage, scaled by 'beta_value'. An additional penalty is applied if the offer falls below the proportional share (calculated from token contributions), scaled by 'gamma_fairness'. A separate, additional penalty is applied if the offer falls below the 50% equal split, scaled by 'delta_inequity'. These parameters define piecewise linear segments of the utility function relative to the offered percentage, with breakpoints at the proportional share and 50%. The model uses three non-negative learnable parameters, constrained to [0, 100].",
  "target_variable": "accept",
  "full_reasoning": "<MODEL>\nU = beta_value * split_perc_self - gamma_fairness * max(0, (token_self / (token_self + token_opp)) * 100 - split_perc_self) - delta_inequity * max(0, 50 - split_perc_self)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the proposed split.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n        },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_value\": {\n      \"description\": \"Parameter scaling the intrinsic value of the offered percentage.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma_fairness\": {\n      \"description\": \"Parameter scaling the penalty for offers below the proportional share.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"delta_inequity\": {\n      \"description\": \"Parameter scaling the additional penalty for offers below the 50% equal split.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The percentage of the total earnings offered to the participant (responder).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n     \"token_self\": {\n      \"description\": \"Number of tokens found by the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent.\",\n       \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"accept\": {\n      \"description\": \"Participant's decision to accept (1) or reject (0) the offer.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n       \"distribution\": {\n        \"type\": \"bernoulli\"\n       },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA utility model for the responder's decision that combines the value of the offered percentage with distinct penalties based on deviations from fairness norms. Utility increases linearly with the offered percentage, scaled by 'beta_value'. An additional penalty is applied if the offer falls below the proportional share (calculated from token contributions), scaled by 'gamma_fairness'. A separate, additional penalty is applied if the offer falls below the 50% equal split, scaled by 'delta_inequity'. These parameters define piecewise linear segments of the utility function relative to the offered percentage, with breakpoints at the proportional share and 50%. The model uses three non-negative learnable parameters, constrained to [0, 100].\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: U = beta_value * split_perc_self - gamma_fairness * max(0, (token_self / (token_self + token_opp)) * 100 - split_perc_self) - delta_inequity * max(0, 50 - split_perc_self)\nSummary: A utility model for the responder's decision that combines the value of the offered percentage with distinct penalties based on deviations from fairness norms. Utility increases linearly with the offered percentage, scaled by 'beta_value'. An additional penalty is applied if the offer falls below the proportional share (calculated from token contributions), scaled by 'gamma_fairness'. A separate, additional penalty is applied if the offer falls below the 50% equal split, scaled by 'delta_inequity'. These parameters define piecewise linear segments of the utility function relative to the offered percentage, with breakpoints at the proportional share and 50%. The model uses three non-negative learnable parameters, constrained to [0, 100].\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, beta_value=1, gamma_fairness=1, delta_inequity=1):\n    model_predictions = []\n    for trial in trial_data:\n        split_perc_self = trial.get(\"splitperc_self\", 0)\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n\n        if (token_self + token_opp) > 0:\n            proportional_share = (token_self / (token_self + token_opp)) * 100\n        else:\n            proportional_share = 50  # Default to 50 if both are zero to avoid division by zero\n\n        fairness_penalty = gamma_fairness * max(0, proportional_share - split_perc_self)\n        inequity_penalty = delta_inequity * max(0, 50 - split_perc_self)\n        \n        U = beta_value * split_perc_self - fairness_penalty - inequity_penalty\n        \n        model_predictions.append(U)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.7686202686202686,
  "group_accuracies": {
    "Control": 0.7661498708010336,
    "Cocaine": 0.7708333333333334
  },
  "group_parameter_averages": {
    "Control": {
      "beta_value": 66.96263626883474,
      "gamma_fairness": 40.527800672019865,
      "delta_inequity": 44.78255039314696
    },
    "Cocaine": {
      "beta_value": 58.54121270317761,
      "gamma_fairness": 49.916600821313935,
      "delta_inequity": 56.46083109030711
    }
  },
  "fitting_results": [
    {
      "beta_value": 94.85125278515453,
      "gamma_fairness": 71.61183425275975,
      "delta_inequity": 76.25350310555193,
      "success": true,
      "log_likelihood": -322.3619130169665,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 52.91486232293473,
      "gamma_fairness": 57.40435046204709,
      "delta_inequity": 1.624901890033259,
      "success": true,
      "log_likelihood": -184.20680743672372,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 74.7846991631013,
      "gamma_fairness": 12.050205037287707,
      "delta_inequity": 65.53162531388332,
      "success": true,
      "log_likelihood": -184.20680743672366,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 22.286258576928585,
      "gamma_fairness": 27.10619077212133,
      "delta_inequity": 6.824296065116618,
      "success": true,
      "log_likelihood": -93.4897869097915,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 66.55774462059244,
      "gamma_fairness": 77.67906614336309,
      "delta_inequity": 46.11651146619299,
      "success": true,
      "log_likelihood": -161.1809565066833,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 85.79678770378945,
      "gamma_fairness": 55.28159589414155,
      "delta_inequity": 61.804010219032094,
      "success": true,
      "log_likelihood": -69.07755278652137,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 86.61351772069015,
      "gamma_fairness": 9.901233502701123,
      "delta_inequity": 21.10396188984396,
      "success": true,
      "log_likelihood": -69.07755278652137,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 28.762238737345392,
      "gamma_fairness": 10.880733197448855,
      "delta_inequity": 45.109213480625186,
      "success": true,
      "log_likelihood": -207.23265836676418,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 99.13408676716962,
      "gamma_fairness": 79.38337188005534,
      "delta_inequity": 47.037565912864125,
      "success": true,
      "log_likelihood": -345.38776394700704,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 64.35912394842664,
      "gamma_fairness": 71.81420295015612,
      "delta_inequity": 36.152689685381226,
      "success": true,
      "log_likelihood": -138.1551055766427,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 16.062143999812054,
      "gamma_fairness": 76.66018176309775,
      "delta_inequity": 14.547057485094573,
      "success": true,
      "log_likelihood": -276.31021099112695,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 7.840367120753877,
      "gamma_fairness": 64.53344152875586,
      "delta_inequity": 28.87596583327521,
      "success": true,
      "log_likelihood": -91.8056244257167,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 43.82701962302821,
      "gamma_fairness": 54.8775702316291,
      "delta_inequity": 22.5176215654624,
      "success": true,
      "log_likelihood": -69.07755278652135,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 91.95532454127232,
      "gamma_fairness": 0.879482372056184,
      "delta_inequity": 27.636823457422732,
      "success": true,
      "log_likelihood": -69.07755278652135,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 81.08113494300844,
      "gamma_fairness": 28.628239799366796,
      "delta_inequity": 0.0,
      "success": true,
      "log_likelihood": -69.0775527865076,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 82.63053697245779,
      "gamma_fairness": 9.308348164160885,
      "delta_inequity": 93.4032837257901,
      "success": true,
      "log_likelihood": -345.387763947007,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 71.38822912797339,
      "gamma_fairness": 68.58540616746843,
      "delta_inequity": 69.2104729164526,
      "success": true,
      "log_likelihood": -483.5428695272499,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 66.51433793341246,
      "gamma_fairness": 27.67999422615075,
      "delta_inequity": 2.249359502551699,
      "success": true,
      "log_likelihood": -23.025850926440768,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 58.36319297855908,
      "gamma_fairness": 89.81338829413336,
      "delta_inequity": 19.63614261518717,
      "success": true,
      "log_likelihood": -391.4394658070879,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 59.08533474342964,
      "gamma_fairness": 54.43266221729374,
      "delta_inequity": 24.361793452618517,
      "success": true,
      "log_likelihood": -345.38776394700693,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 63.280446711441755,
      "gamma_fairness": 34.756051958940134,
      "delta_inequity": 91.9605938876667,
      "success": true,
      "log_likelihood": -207.23265836676413,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 85.52882123802263,
      "gamma_fairness": 53.82904423960777,
      "delta_inequity": 40.456992652955336,
      "success": true,
      "log_likelihood": -230.25850929680468,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 71.15920121362606,
      "gamma_fairness": 25.034716929765754,
      "delta_inequity": 69.3186566955518,
      "success": true,
      "log_likelihood": -138.155105576643,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 88.62124585564764,
      "gamma_fairness": 31.53207242450826,
      "delta_inequity": 60.71039201938034,
      "success": true,
      "log_likelihood": -138.15510557664282,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 18.842047879303415,
      "gamma_fairness": 19.463392397444434,
      "delta_inequity": 14.921276456724941,
      "success": true,
      "log_likelihood": -207.2326583667642,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 91.21150583901655,
      "gamma_fairness": 50.71703846414152,
      "delta_inequity": 35.12288676252927,
      "success": true,
      "log_likelihood": -161.18095650668337,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 96.11339213249846,
      "gamma_fairness": 13.467658603558231,
      "delta_inequity": 90.75412448450172,
      "success": true,
      "log_likelihood": -46.05170185683869,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 72.30637747017806,
      "gamma_fairness": 54.75210527863689,
      "delta_inequity": 94.16729917945801,
      "success": true,
      "log_likelihood": -115.12925464660226,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 100.0,
      "gamma_fairness": 0.0,
      "delta_inequity": 0.0,
      "success": true,
      "log_likelihood": -92.10340371656179,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 96.78158619858702,
      "gamma_fairness": 84.4349835262324,
      "delta_inequity": 88.04903571953454,
      "success": true,
      "log_likelihood": -299.3360620857196,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 66.25738896412852,
      "gamma_fairness": 22.195781110942093,
      "delta_inequity": 19.11696452564351,
      "success": true,
      "log_likelihood": -115.12925464660226,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 69.82075228038507,
      "gamma_fairness": 37.41537431899435,
      "delta_inequity": 22.35788395257804,
      "success": true,
      "log_likelihood": -529.5945713874795,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 49.90592697476542,
      "gamma_fairness": 9.651125380765924,
      "delta_inequity": 88.32465655588905,
      "success": true,
      "log_likelihood": -138.15510557664294,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 61.193157410466014,
      "gamma_fairness": 40.23600703533972,
      "delta_inequity": 69.09909950963012,
      "success": true,
      "log_likelihood": -115.12925464660226,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 74.50045622341086,
      "gamma_fairness": 12.548568422722429,
      "delta_inequity": 47.97430319737492,
      "success": true,
      "log_likelihood": -207.23265836676424,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 49.926900082149416,
      "gamma_fairness": 18.35730047551539,
      "delta_inequity": 22.932187742857128,
      "success": true,
      "log_likelihood": -138.15510557664285,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 49.1208171798927,
      "gamma_fairness": 10.563783805618055,
      "delta_inequity": 90.21503171063087,
      "success": true,
      "log_likelihood": -230.25850929680462,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 88.15015666480895,
      "gamma_fairness": 72.27014811720157,
      "delta_inequity": 46.303101169713784,
      "success": true,
      "log_likelihood": -230.258508941391,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 97.75794733090218,
      "gamma_fairness": 20.375399749868805,
      "delta_inequity": 5.947459869727645,
      "success": true,
      "log_likelihood": -230.25850929680482,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 36.19067396905098,
      "gamma_fairness": 14.558301680467082,
      "delta_inequity": 6.739166926198836,
      "success": true,
      "log_likelihood": -92.10340371656183,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 66.5626580956542,
      "gamma_fairness": 52.89966656623507,
      "delta_inequity": 76.01503460304676,
      "success": true,
      "log_likelihood": -207.23265836676416,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 31.415510068309118,
      "gamma_fairness": 97.23261251004458,
      "delta_inequity": 39.22591370119209,
      "success": true,
      "log_likelihood": -137.89283245235922,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 99.9381954478088,
      "gamma_fairness": 17.89279704410881,
      "delta_inequity": 95.94080600015438,
      "success": true,
      "log_likelihood": -368.41361487704313,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 76.57727720377073,
      "gamma_fairness": 59.44253931089176,
      "delta_inequity": 35.606001424529644,
      "success": true,
      "log_likelihood": -161.1809565066834,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 78.10076921846559,
      "gamma_fairness": 89.25211736514936,
      "delta_inequity": 52.822660952345345,
      "success": true,
      "log_likelihood": -207.23265836676418,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 97.14151507308696,
      "gamma_fairness": 2.8221508923514715,
      "delta_inequity": 95.83496348485673,
      "success": true,
      "log_likelihood": -230.2586788448789,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 43.38132963141803,
      "gamma_fairness": 5.055411095306283,
      "delta_inequity": 51.656361433231346,
      "success": true,
      "log_likelihood": -92.10340371656179,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 43.17229569162643,
      "gamma_fairness": 24.716645182134457,
      "delta_inequity": 79.92752817695819,
      "success": true,
      "log_likelihood": -161.18095650668326,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 42.93384352697676,
      "gamma_fairness": 37.894939688372,
      "delta_inequity": 9.655098957247333,
      "success": true,
      "log_likelihood": -207.23265836676416,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 89.0979841487588,
      "gamma_fairness": 14.254052906468107,
      "delta_inequity": 92.68333588349807,
      "success": true,
      "log_likelihood": -276.31021115688554,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 70.30288262587126,
      "gamma_fairness": 7.586454220511952,
      "delta_inequity": 53.173368605768864,
      "success": true,
      "log_likelihood": -184.20680743672386,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 12.195698902176188,
      "gamma_fairness": 54.34120366360363,
      "delta_inequity": 24.8832737624735,
      "success": true,
      "log_likelihood": -115.12925464660226,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 41.8876012749349,
      "gamma_fairness": 30.31547805589089,
      "delta_inequity": 24.189882423888587,
      "success": true,
      "log_likelihood": -161.18096110784435,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 82.33393687176302,
      "gamma_fairness": 56.39207828114026,
      "delta_inequity": 71.78284713592036,
      "success": true,
      "log_likelihood": -276.3102111568856,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 13.507995829699727,
      "gamma_fairness": 46.996639979560854,
      "delta_inequity": 59.23300624321662,
      "success": true,
      "log_likelihood": -276.310211156885,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 21.485328215762166,
      "gamma_fairness": 36.200943409509264,
      "delta_inequity": 45.677694434237736,
      "success": true,
      "log_likelihood": -161.18095650668326,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 21.94987911460705,
      "gamma_fairness": 51.29640723764146,
      "delta_inequity": 70.3315436290785,
      "success": true,
      "log_likelihood": -115.1292546466023,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 78.26354228658874,
      "gamma_fairness": 65.16959174975318,
      "delta_inequity": 47.915081948985986,
      "success": true,
      "log_likelihood": -414.4653167371284,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 8.859095119120347,
      "gamma_fairness": 33.051102660590345,
      "delta_inequity": 44.69350414588538,
      "success": true,
      "log_likelihood": -46.05170185648094,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 73.92855734030373,
      "gamma_fairness": 12.360802889460869,
      "delta_inequity": 31.355818399800075,
      "success": true,
      "log_likelihood": -115.12925464660226,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 80.23824354871584,
      "gamma_fairness": 63.9214445130155,
      "delta_inequity": 98.0162137557562,
      "success": true,
      "log_likelihood": -207.2326583667642,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 18.247266098177516,
      "gamma_fairness": 57.66067086387373,
      "delta_inequity": 11.150765134861162,
      "success": true,
      "log_likelihood": -184.20680743671636,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 12.706853544757767,
      "gamma_fairness": 75.58446583344431,
      "delta_inequity": 100.0,
      "success": true,
      "log_likelihood": -23.025850926440462,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 65.76086569764328,
      "gamma_fairness": 87.64361179843914,
      "delta_inequity": 78.35763342740698,
      "success": true,
      "log_likelihood": -276.3102111568855,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 23.864270733352654,
      "gamma_fairness": 59.95710937770714,
      "delta_inequity": 74.604072065114,
      "success": true,
      "log_likelihood": -69.07755278652134,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 67.55059881389938,
      "gamma_fairness": 94.79741635791345,
      "delta_inequity": 45.308975919192044,
      "success": true,
      "log_likelihood": -138.15510557664274,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 100.0,
      "gamma_fairness": 0.0,
      "delta_inequity": 8.391743650474538,
      "success": true,
      "log_likelihood": -69.07755278652131,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 100.0,
      "gamma_fairness": 0.0,
      "delta_inequity": 48.76200340760683,
      "success": true,
      "log_likelihood": -92.10340371656181,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 95.23502065351747,
      "gamma_fairness": 74.04613025902118,
      "delta_inequity": 65.42427389308794,
      "success": true,
      "log_likelihood": -138.15510557664274,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 100.0,
      "gamma_fairness": 68.12423763747329,
      "delta_inequity": 68.74420392235461,
      "success": true,
      "log_likelihood": -345.38776394700704,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 25.72527419818974,
      "gamma_fairness": 68.57433766903732,
      "delta_inequity": 81.70746005293245,
      "success": true,
      "log_likelihood": -23.02585092644052,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 49.438787068797964,
      "gamma_fairness": 71.42960100027852,
      "delta_inequity": 97.40535157967706,
      "success": true,
      "log_likelihood": -92.10340371656181,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 71.29373486279643,
      "gamma_fairness": 69.917176590087,
      "delta_inequity": 53.90676161626813,
      "success": true,
      "log_likelihood": -138.15510557664277,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 67.85451959767167,
      "gamma_fairness": 37.459625687906964,
      "delta_inequity": 73.88801261004927,
      "success": true,
      "log_likelihood": -299.33606208692606,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 51.266461157189624,
      "gamma_fairness": 34.32360312440059,
      "delta_inequity": 46.71692747898507,
      "success": true,
      "log_likelihood": -253.28436022684502,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 89.47426693669077,
      "gamma_fairness": 87.8373857834884,
      "delta_inequity": 28.218505380391957,
      "success": true,
      "log_likelihood": -184.2068074367237,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 78.41836119084243,
      "gamma_fairness": 18.43933851537427,
      "delta_inequity": 53.85136854921024,
      "success": true,
      "log_likelihood": -207.23265836676424,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 53.636008612931704,
      "gamma_fairness": 80.15146481525983,
      "delta_inequity": 33.805563430763385,
      "success": true,
      "log_likelihood": -322.3619130169665,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 52.0771876703802,
      "gamma_fairness": 88.20145768354078,
      "delta_inequity": 96.09801027023722,
      "success": true,
      "log_likelihood": -391.4394658070879,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 5.671736100824054,
      "gamma_fairness": 24.330884868044944,
      "delta_inequity": 39.97610488721569,
      "success": true,
      "log_likelihood": -23.025850926440466,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 40.83275999134599,
      "gamma_fairness": 97.1643296173639,
      "delta_inequity": 87.54336857805268,
      "success": true,
      "log_likelihood": -322.36191301696647,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 64.38689073535848,
      "gamma_fairness": 9.411940915552886,
      "delta_inequity": 26.411685387064644,
      "success": true,
      "log_likelihood": -138.15510557664288,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 69.15707347793355,
      "gamma_fairness": 93.87299871335945,
      "delta_inequity": 36.08874981291732,
      "success": true,
      "log_likelihood": -253.2843602268451,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 82.84586284786914,
      "gamma_fairness": 11.21348948834081,
      "delta_inequity": 88.25538743257673,
      "success": true,
      "log_likelihood": -115.12925464660225,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 93.95813105069934,
      "gamma_fairness": 18.843309746551427,
      "delta_inequity": 85.62476057435191,
      "success": true,
      "log_likelihood": -276.3102111568856,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 32.07439191931525,
      "gamma_fairness": 92.90564360442873,
      "delta_inequity": 71.52653390433358,
      "success": true,
      "log_likelihood": -23.025850926440484,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 47.486395652305966,
      "gamma_fairness": 17.298074389546024,
      "delta_inequity": 3.3084948885470533,
      "success": true,
      "log_likelihood": -230.2585092968047,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 24.2215379368717,
      "gamma_fairness": 26.05050894002402,
      "delta_inequity": 33.73322743577532,
      "success": true,
      "log_likelihood": -230.25849469617572,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 82.47957759302803,
      "gamma_fairness": 94.11872825605576,
      "delta_inequity": 43.18031206807864,
      "success": true,
      "log_likelihood": -414.46531673712843,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 69.27948603132941,
      "gamma_fairness": 84.4149504469274,
      "delta_inequity": 90.3393627416708,
      "success": true,
      "log_likelihood": -161.1810689880487,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 99.67711395515923,
      "gamma_fairness": 61.154344338275976,
      "delta_inequity": 48.35208743786572,
      "success": true,
      "log_likelihood": -276.3102111568856,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "beta_value": {
        "r": 0.5915632741042313,
        "p": 9.119559621199465e-11
      },
      "gamma_fairness": {
        "r": 0.29586841291640287,
        "p": 0.0028016497286942692
      },
      "delta_inequity": {
        "r": 0.23703227947202077,
        "p": 0.01757435080924137
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 393.85815584831795,
  "bic_Control": 397.4090924361134,
  "bic_Cocaine": 390.67710848841784,
  "bic_results": {
    "average_bic": 393.85815584831795,
    "individual_bics": [
      655.4743828493014,
      379.16417168881577,
      379.16417168881566,
      197.73013063495134,
      333.1124698287349,
      148.90566238841106,
      148.90566238841106,
      425.2158735488967,
      701.5260847093824,
      287.06076796865375,
      563.3709787976222,
      194.36180566680173,
      148.90566238841103,
      148.90566238841103,
      148.90566238838352,
      701.5260847093823,
      977.8362958698681,
      56.80225866824986,
      793.6294884295442,
      701.5260847093822,
      425.2158735488966,
      471.2675754089777,
      287.0607679686543,
      287.060767968654,
      425.21587354889675,
      333.1124698287351,
      102.85396052904571,
      241.00906610857285,
      194.9573642484919,
      609.4226809868076,
      241.00906610857285,
      1069.9396995903273,
      287.0607679686542,
      241.00906610857285,
      425.2158735488968,
      287.06076796865403,
      471.26757540897756,
      471.2675746981503,
      471.26757540897796,
      194.95736424849198,
      425.21587354889664,
      286.53622172008676,
      747.5777865694546,
      333.11246982873513,
      425.2158735488967,
      471.2679145051261,
      194.9573642484919,
      333.11246982873485,
      425.21587354889664,
      563.3709791291394,
      379.16417168881605,
      241.00906610857285,
      333.11247903105703,
      563.3709791291395,
      563.3709791291383,
      333.11246982873485,
      241.00906610857294,
      839.6811902896251,
      102.8539605283302,
      241.00906610857285,
      425.21587354889675,
      379.16417168880105,
      56.80225866824925,
      563.3709791291393,
      148.905662388411,
      287.0607679686538,
      148.90566238841095,
      194.95736424849196,
      287.0607679686538,
      701.5260847093824,
      56.802258668249365,
      194.95736424849196,
      287.06076796865386,
      609.4226809892205,
      517.3192772690584,
      379.1641716888157,
      425.2158735488968,
      655.4743828493014,
      793.6294884295442,
      56.802258668249266,
      655.4743828493013,
      287.0607679686541,
      517.3192772690586,
      241.00906610857282,
      563.3709791291395,
      56.802258668249294,
      471.26757540897773,
      471.26754620771976,
      839.6811902896252,
      333.11269479146574,
      563.3709791291395
    ],
    "group_enabled": true,
    "group_bics": {
      "Control": [
        655.4743828493014,
        379.16417168881577,
        379.16417168881566,
        197.73013063495134,
        333.1124698287349,
        148.90566238841106,
        148.90566238841106,
        425.2158735488967,
        701.5260847093824,
        287.06076796865375,
        563.3709787976222,
        194.36180566680173,
        148.90566238841103,
        148.90566238841103,
        148.90566238838352,
        701.5260847093823,
        977.8362958698681,
        56.80225866824986,
        793.6294884295442,
        701.5260847093822,
        425.2158735488966,
        471.2675754089777,
        287.0607679686543,
        287.060767968654,
        425.21587354889675,
        333.1124698287351,
        102.85396052904571,
        241.00906610857285,
        194.9573642484919,
        609.4226809868076,
        241.00906610857285,
        1069.9396995903273,
        287.0607679686542,
        241.00906610857285,
        425.2158735488968,
        287.06076796865403,
        471.26757540897756,
        471.2675746981503,
        471.26757540897796,
        194.95736424849198,
        425.21587354889664,
        286.53622172008676,
        747.5777865694546
      ],
      "Cocaine": [
        333.11246982873513,
        425.2158735488967,
        471.2679145051261,
        194.9573642484919,
        333.11246982873485,
        425.21587354889664,
        563.3709791291394,
        379.16417168881605,
        241.00906610857285,
        333.11247903105703,
        563.3709791291395,
        563.3709791291383,
        333.11246982873485,
        241.00906610857294,
        839.6811902896251,
        102.8539605283302,
        241.00906610857285,
        425.21587354889675,
        379.16417168880105,
        56.80225866824925,
        563.3709791291393,
        148.905662388411,
        287.0607679686538,
        148.90566238841095,
        194.95736424849196,
        287.0607679686538,
        701.5260847093824,
        56.802258668249365,
        194.95736424849196,
        287.06076796865386,
        609.4226809892205,
        517.3192772690584,
        379.1641716888157,
        425.2158735488968,
        655.4743828493014,
        793.6294884295442,
        56.802258668249266,
        655.4743828493013,
        287.0607679686541,
        517.3192772690586,
        241.00906610857282,
        563.3709791291395,
        56.802258668249294,
        471.26757540897773,
        471.26754620771976,
        839.6811902896252,
        333.11269479146574,
        563.3709791291395
      ]
    },
    "num_parameters": 3,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- beta_value: r = 0.592\n- gamma_fairness: r = 0.296\n- delta_inequity: r = 0.237",
  "previous_models": [
    "Specification: U = beta_value * split_perc_self - gamma_fairness * max(0, (token_self / (token_self + token_opp)) * 100 - split_perc_self) - delta_inequity * max(0, 50 - split_perc_self)\nSummary: A utility model for the responder's decision that combines the value of the offered percentage with distinct penalties based on deviations from fairness norms. Utility increases linearly with the offered percentage, scaled by 'beta_value'. An additional penalty is applied if the offer falls below the proportional share (calculated from token contributions), scaled by 'gamma_fairness'. A separate, additional penalty is applied if the offer falls below the 50% equal split, scaled by 'delta_inequity'. These parameters define piecewise linear segments of the utility function relative to the offered percentage, with breakpoints at the proportional share and 50%. The model uses three non-negative learnable parameters, constrained to [0, 100].\nTarget Variable: accept\nPrediction Type: utility\nBIC: 393.85815584831795\nOverall Accuracy: 0.7686\nGroup Accuracies:\n- Control: 0.7661\n- Cocaine: 0.7708\n\nParameter Recovery:\n- beta_value: r = 0.592\n- gamma_fairness: r = 0.296\n- delta_inequity: r = 0.237"
  ]
}