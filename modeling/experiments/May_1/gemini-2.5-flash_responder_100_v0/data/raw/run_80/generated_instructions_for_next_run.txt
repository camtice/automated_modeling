Okay, here are the improved instructions for the next run (Run 81 of 100), based on the results of recent attempts.

Task Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable "token_self". The other variable, "token_opp", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.

Again, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.

Note that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same "fairness".

Below is the description of each variable in the dataset:

trial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]
trial_role = the role of the participant [1 = responder, 2 = proposer]
token_opp = number of tokens found by the opponent
token_self = number of tokens found by the participant
combined_earning = amount of money earned in total (note that each token found is £3)
split_opp = the proposed share of the opponent (in £)
split_self = the proposed share for the participant (in £)
splitperc_opp = same but in %
split_perc_self = same but in %
accept = whether the participant responded accept (1) or reject (0)
accepted_amount = if accepted, what is the amount gain (in £)
accepted_perc = same as above but in %
proposed_perc = when participant is the proposer, what is the % proposed to the opponent
proposed_amount = when participant is the proposer, what is the amount proposed to the opponent (in £)

Desired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified).

The model should:
1. Predict only responder behavior (should target "accept = whether the participant responded accept (1) or reject (0)")
2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.
3. Be applicable to the dataset given within the task description (i.e. the model should be able to be run using only the provided dataset structure).
4. Predict utility, where less than 0 is less than 50% likely.

For any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).

Then, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.
For example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal.

Use clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied.

{
  "variables": {
    "variable_name": {
      "description": "Clear description",
      "range": {
        "min": value,
        "max": value,
        "inclusive_min": boolean,
        "inclusive_max": boolean
      },
      "distribution": {
        "type": "distribution type",
        "parameters": {}
      },
      "learnable": boolean,
      "source": "learnable/data/calculated"
    }
  }
}
</VARIABLES>

Example #1:
<EXAMPLE>
(Model of a Random Choice Task):\\
Let me think through this step by step...
[your reasoning here]

<MODEL>
U_i = beta + epsilon*E + eta*N
</MODEL>

<VARIABLES>
{
  "variables": {
    "U_i": {
      "description": "Utility of choosing action i",
      "range": {
        "min": "-inf",
        "max": "inf"
      },
      "learnable": false,
      "source": "calculated"
    },\\
    "beta": {
      "description": "Base tendency parameter (inherent preference)",
      "range": {
        "min": 0,
        "max": 1
      },
      "learnable": true,
      "source": "learnable"
    },\\
    "epsilon": {
      "description": "Environmental sensitivity parameter",
      "range": {
        "min": "-inf",
        "max": "inf"
      },
      "learnable": true,
      "source": "learnable"
    },\\
    "E": {
      "description": "Environmental cue value",
      "range": {
        "min": "-inf",
        "max": "inf"
      },
      "learnable": false,\\
      "source": "data"
    },\\
    "eta": {
      "description": "Noise parameter",
      "range": {
        "min": 0,
        "max": 1,
        "exclusive_max": true
      },\\
      "learnable": false,
      "source": "data"
    },\\
    "N": {
      "description": "Random noise drawn from normal distribution N(0,1)",
      "distribution": {
        "type": "normal",
        "mean": 0,
        "std": 1
      },\\
      "learnable": false,
      "source": "calculated"
    }
  }
}
</VARIABLES>
<SUMMARY>
A linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (β) constrained to [0,1] and an unconstrained environmental sensitivity parameter (ε). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.
</SUMMARY>
</EXAMPLE>

Please be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.

The parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.

Model Type:
Your model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.

Instructions: Okay, here are the improved instructions for the next run (Run 81 of 100), based on the results of recent attempts.

The logarithmic divisive model tested in the previous run (Run 80) unfortunately failed to achieve robust parameter recovery for *both* learnable parameters (`beta_value` r=0.354, `beta_unfairness` r=0.352), despite providing reasonable fit metrics. This confirms that, similar to previous divisive structures (linear, exponential, quadratic, exponent-based), this specific structure and the way the parameters interacted did not create sufficiently distinct influence profiles for reliable joint parameter estimation.

The **unwavering primary objective remains achieving parameter recovery >= 0.7 for *all* learnable parameters**. A model with poor parameter recovery is unusable for interpreting individual differences or group comparisons, regardless of its aggregate fit. We must find a model structure where the influences of *both* `beta_value` and `beta_unfairness` are mathematically separable enough to be reliably estimated simultaneously.

We need to explore model structures that are *fundamentally different* from the divisive models explored so far. Instead of reducing utility multiplicatively through a denominator, let's explore an *additive* structure where different components of the offer's value contribute positively or negatively to the overall utility.

For Run 81, we will test an additive model where the utility is determined by a positive term related to the participant's proposed share (`split_perc_self`), and a negative penalty term related to the offer's unfairness (`loss_below_fair`). To address the persistent identifiability issue, we will make the penalty term non-linear, specifically using an exponential function, hoping this contrast with the linear value term will create more distinct parameter influences.

Proposed Model Structure: An additive utility model where the utility of accepting (`U_accept`) is calculated as a linear function of the participant's proposed percentage (`split_perc_self`), scaled by `beta_value`, *minus* an exponential penalty term based on `loss_below_fair`, scaled by `beta_unfairness`.

Here are the calculation steps:
Calculate `sum_tokens = token_self + token_opp`.
Calculate `fair_perc_self_calc` handling the `sum_tokens == 0` case (defaulting to 50.0), using `token_self` and `token_opp` from the data.
Calculate `loss_below_fair = Max(0.0, fair_perc_self_calc - split_perc_self)`. This term is non-zero only for offers below or equal to the fair share.
Calculate the utility: `U_accept = beta_value * split_perc_self - beta_unfairness * (Exp(loss_below_fair) - 1.0)`.
The penalty term uses `Exp()` (natural exponential function). We subtract 1.0 from `Exp(loss_below_fair)` so that when `loss_below_fair` is 0 (fair or better offers), the penalty term `(Exp(0) - 1.0)` is `(1.0 - 1.0) = 0`, and no penalty is applied. For `loss_below_fair > 0`, `Exp(loss_below_fair) - 1.0` is positive, resulting in a positive penalty scaled by `beta_unfairness`.

In this structure, `beta_value` represents the linear sensitivity to the proposed percentage share (the potential gain), while `beta_unfairness` represents the strength of an exponential penalty for offers below the fair share. The hypothesis is that the *linear* contribution from `beta_value` combined additively with the *exponential* contribution from `beta_unfairness` will yield sufficiently distinct functional forms and influence profiles for each parameter across different offers to allow for robust joint identifiability, addressing the failures seen in previous, more correlated model structures.

Design the model using this new additive structure with an exponential penalty: `U_accept = beta_value * split_perc_self - beta_unfairness * (Exp(loss_below_fair) - 1.0)`. Remember to calculate intermediate variables (`sum_tokens`, `fair_perc_self_calc`, `loss_below_fair`) before the final `U_accept`. Use clear mathematical notation within the <MODEL> tags (only the formula). Use `Exp()` for the natural exponential function and `Max()` for the maximum function.

Focus on clearly defining all intermediate terms and articulating in the summary how this specific additive structure, by combining a linear gain term scaled by `beta_value` with an exponential penalty term based on `loss_below_fair` scaled by `beta_unfairness`, is specifically intended to improve robust parameter identifiability for *both* parameters by creating mathematically distinct and separable influence profiles, moving away from the complex, potentially correlated interactions in the divisive models.

*   **Key Inputs & Calculated Variables:** Use `split_perc_self`, `token_self`, `token_opp` as data variables. Calculate `sum_tokens`, `fair_perc_self_calc` (handling `sum_tokens == 0`), `loss_below_fair`, and `U_accept`. Include calculation steps for derived variables *before* the formula for `U_accept`.
*   **Learnable Parameters:** Exactly **2 learnable parameters**: `beta_value` (linear gain sensitivity) and `beta_unfairness` (exponential penalty strength). Choose descriptive, Python-safe names. Define clear, generous, finite numerical bounds. Non-negative bounds (e.g., `[0.0, 100.0]` for both) are theoretically appropriate for interpretability and likely necessary for parameter recovery in this structure (e.g., non-negative `beta_value` ensures utility increases with percentage share; non-negative `beta_unfairness` ensures the penalty term reduces utility). Stick with `[0.0, 100.0]` for both.
*   **Calculated Variables:** Include descriptions for *all* calculated variables used in the model (including `U_accept`, `sum_tokens`, `fair_perc_self_calc`, and `loss_below_fair`) with `source: "calculated"`. Include descriptions for all data variables used as inputs (`token_self`, `token_opp`, `split_perc_self`) with `source: "data"`.
*   **Variable Descriptions:** Provide variable descriptions in JSON format between <VARIABLES> tags for *all* variables in the <MODEL> formula. Include source, range (with inclusive flags), distribution (if applicable), and learnable status. Remember variable names must exactly match the model.
*   **Target Variable:** Specify "accept" using <target_variable> tags.
*   **Summary:** Provide a concise summary between <SUMMARY> tags. Describe the model's core idea (additive structure where utility from `split_perc_self` is reduced by an exponential penalty based on `loss_below_fair`). Crucially, explain *how* this specific additive structure, combining a linear term scaled by `beta_value` and an exponential penalty term based on `loss_below_fair` scaled by `beta_unfairness`, is specifically intended to improve robust parameter identifiability for *both* parameters by creating mathematically distinct and separable influence profiles compared to previous divisive models.
*   **Think Outside the Box:** Parameter identifiability for *both* parameters simultaneously remains the persistent, difficult challenge. The exploration of various functions within divisive structures (linear, exponential, quadratic, exponent, log) has not solved this. Now we are trying an additive structure with a non-linear penalty. If this additive-exponential structure also fails to achieve >= 0.7 recovery for *both* parameters, the next iteration must consider *even more fundamentally different* ways the two parameters could interact or represent psychological processes to create truly distinct and separable influences. Could one parameter affect choice consistency (like a temperature parameter) while the other scales value? Could parameters influence the weighing of different attributes? Could the model structure involve comparison of utility of accepting vs. rejecting? Continue to focus intently on how the functional form ensures that varying `beta_value` has a measurably different effect on the utility curve across offers than varying `beta_unfairness`, and that these effects are distinct enough to be estimated independently with high reliability.

Available Data Variables:
- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.
(Note: Use `split_perc_self` for the participant's proposed percentage share percentage).

Please think through this step by step, then provide your model specification and variable descriptions. Remember that robust parameter identifiability for *both* learnable parameters (>= 0.7 recovery for both) is the absolute priority. Your goal is to find a structure where both parameters' influences are clearly distinguishable and interact in a way that allows for reliable estimation for *both* parameters, ideally leading to improved fit metrics (BIC and accuracy) as a result of capturing the underlying process more accurately.

Please think through this step by step, then provide your model specification and variable descriptions.