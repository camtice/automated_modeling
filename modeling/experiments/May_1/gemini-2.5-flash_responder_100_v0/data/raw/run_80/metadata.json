{
  "task_description": "In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "Okay, here are the improved instructions for the next run (Run 80 of 100), based on the results of recent attempts.\n\nTask Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\nproposed_amount = when participant is the proposer, what is the amount proposed to the opponent (in \u00a3)\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified).\n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able to be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal.\n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied.\n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1:\n<EXAMPLE>\n(Model of a Random Choice Task):\\\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = beta + epsilon*E + eta*N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\\\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\\\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\\\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\\\n      \"source\": \"data\"\n    },\\\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\\\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\\\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\\\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type:\nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\nInstructions: Okay, here are the improved instructions for the next run (Run 80 of 100), based on the results of recent attempts.\n\nThe model tested in the previous run (Run 79), the exponent-divisive structure `U_accept = (beta_value * split_perc_self) / (1.0 + (loss_below_fair)**beta_unfairness)`, unfortunately resulted in very poor parameter recovery for *both* `beta_value` (r = -0.046) and `beta_unfairness` (r = 0.268), and also performed worse on fit metrics (BIC = 64.26, Accuracy = 0.560) compared to the quadratic divisive model (Run 78, BIC = 44.12, Acc = 0.666).\n\nThis confirms that the exponent structure for the penalty term did not achieve the crucial objective of robustly identifying *both* parameters simultaneously, despite our hypothesis that it would create distinct influence profiles. A model with poor parameter recovery is unusable, regardless of its fit metrics.\n\nThe **unwavering primary objective remains achieving parameter recovery >= 0.7 for *all* learnable parameters**. We must find a model structure that allows for reliable estimation of *both* `beta_value` and `beta_unfairness`.\n\nFor Run 80, we will continue to explore the divisive structure and the use of `loss_below_fair` based on token contributions, as these components seem relevant to the task and contributed to better fit in some previous attempts. However, we need a *different functional form* for the unfairness penalty in the denominator that can hopefully create more mathematically distinct and separable influences for *both* parameters.\n\nProposed Model Structure: A divisive utility model where the core value derived from the participant's proposed percentage (`split_perc_self`), scaled by `beta_value`, is *reduced* by a factor based on a *logarithmic* transformation of `loss_below_fair`, scaled by `beta_unfairness`, in the denominator.\n\n`U_accept = (beta_value * split_perc_self) / (1.0 + penalty_term)`\n\nHere:\nCalculate `sum_tokens = token_self + token_opp`.\nCalculate `fair_perc_self_calc` handling the `sum_tokens == 0` case (defaulting to 50.0), using `token_self` and `token_opp` from the data.\nCalculate `loss_below_fair = Max(0.0, fair_perc_self_calc - split_perc_self)`. This term is non-zero only for offers below or equal to the fair share.\nCalculate the penalty term `penalty_term = beta_unfairness * Log(1.0 + loss_below_fair)`. The natural logarithm `Log()` is used here. Note that `Log(1.0 + loss_below_fair)` is 0 when `loss_below_fair` is 0, so no specific conditional handling is needed for the penalty term itself being 0; it's implicitly handled by the log function's properties.\nThe utility `U_accept` is calculated as the product of `beta_value` and `split_perc_self`, divided by the term `(1.0 + penalty_term)`.\n\nIn this structure, `beta_value` scales the numerator representing the base value from the offer percentage. `beta_unfairness` scales a penalty term based on the natural logarithm of `1 + loss_below_fair`. Using a logarithmic function for the penalty means that increases in `loss_below_fair` lead to increases in the penalty, but with *diminishing returns*. This specific non-linear relationship is hypothesized to create a pattern of influence for `beta_unfairness` across different levels of unfairness that is mathematically distinct from the linear scaling effect of `beta_value` on the offer percentage. This difference in influence profiles might improve robust parameter identifiability for *both* `beta_value` and `beta_unfairness` simultaneously, addressing the recovery failures seen in previous models. `beta_value` represents the base sensitivity to the offer percentage, and `beta_unfairness` represents the sensitivity to the log-transformed unfairness penalty.\n\nDesign the model using this new log-penalty divisive structure: `U_accept = (beta_value * split_perc_self) / (1.0 + penalty_term)`, where `loss_below_fair` and `fair_perc_self_calc` are calculated as specified above using `token_self`, `token_opp`, and `split_perc_self`, and the `penalty_term` uses the natural logarithm of `1.0 + loss_below_fair` scaled by `beta_unfairness`. Remember to calculate intermediate variables before the final `U_accept`.\n\nFocus on clearly defining all intermediate terms and articulating in the summary how this specific divisive structure, by placing `beta_unfairness` scaling a *logarithmic* penalty function of `loss_below_fair` in the denominator, is intended to achieve robust parameter identifiability for *both* parameters by creating mathematically distinct and *interacting* influence profiles that are more separable than those generated by previous linear, exponential, quadratic, or exponent-based forms, addressing the recovery failures seen in previous models.\n\n*   **Key Inputs & Calculated Variables:** Use `split_perc_self`, `token_self`, `token_opp` as data variables. Calculate `sum_tokens`, `fair_perc_self_calc` (handling `sum_tokens == 0`), `loss_below_fair`, the intermediate `penalty_term` (calculated as `beta_unfairness * Log(1.0 + loss_below_fair)`), and `U_accept`. Include calculation steps for derived variables *before* the formula for `U_accept`. Use clear mathematical notation within the <MODEL> tags (only the formula). Use `Log()` for the natural logarithm and `Max()` for the maximum function.\n*   **Learnable Parameters:** Exactly **2 learnable parameters**: `beta_value` (base value sensitivity) and `beta_unfairness` (unfairness penalty sensitivity on log scale). Choose descriptive, Python-safe names. Define clear, generous, finite numerical bounds. Non-negative bounds (e.g., `[0.0, 100.0]` for both) are theoretically appropriate for interpretability and likely necessary for parameter recovery in this structure (e.g., `beta_unfairness` should be non-negative so the denominator increases with `loss_below_fair` for `loss_below_fair > 0`, and `beta_value` should be non-negative for utility to increase with `split_perc_self` on fair offers). Stick with `[0.0, 100.0]` for both.\n*   **Calculated Variables:** Include descriptions for *all* calculated variables used in the model (including `U_accept`, `sum_tokens`, `fair_perc_self_calc`, `loss_below_fair`, and `penalty_term`) with `source: \"calculated\"`. Include descriptions for all data variables used as inputs (`token_self`, `token_opp`, `split_perc_self`) with `source: \"data\"`.\n*   **Variable Descriptions:** Provide variable descriptions in JSON format between <VARIABLES> tags for *all* variables in the <MODEL> formula. Include source, range (with inclusive flags), distribution (if applicable), and learnable status. Remember variable names must exactly match the model.\n*   **Target Variable:** Specify \"accept\" using <target_variable> tags.\n*   **Summary:** Provide a concise summary between <SUMMARY> tags. Describe the model's core idea (divisive structure where utility from `split_perc_self` is reduced by a penalty based on the log of `1 + loss_below_fair`). Crucially, explain *how* this specific structure, where `beta_unfairness` scales a *logarithmic* transformation of `loss_below_below_fair` in the denominator, is specifically intended to improve robust parameter identifiability for *both* parameters by creating mathematically distinct and *interacting* influence profiles that are more separable than those generated by previous linear, exponential, quadratic, or exponent-based forms, addressing the recovery failures seen in previous models.\n*   **Think Outside the Box:** Parameter identifiability for *both* parameters simultaneously is the persistent challenge. Recognize that various non-linear functions applied to `loss_below_fair` in the denominator, scaled linearly by `beta_unfairness` (like linear, quadratic, log) or used with `beta_unfairness` in the exponent, have not yet yielded satisfactory joint recovery. If this logarithmic structure also fails to achieve >= 0.7 recovery for *both* parameters, the next iteration must consider *fundamentally different* ways the two parameters could interact or represent psychological processes to create truly distinct and separable influences. Could `beta_value` and `beta_unfairness` influence *different aspects* of the offer evaluation (e.g., one affects baseline acceptance, the other penalty sensitivity)? Could the utility function structure be entirely different (e.g., comparing utility of accepting vs. rejecting, where parameters influence different parts of this comparison)? Continue to focus intently on how the functional form ensures that varying `beta_value` has a measurably different effect on the utility curve across offers than varying `beta_unfairness`, and that these effects are distinct enough to be estimated independently with high reliability.\n\nAvailable Data Variables:\n- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.\n(Note: Use `split_perc_self` for the participant's proposed percentage share percentage).\n\nPlease think through this step by step, then provide your model specification and variable descriptions. Remember that robust parameter identifiability for *both* learnable parameters (>= 0.7 recovery for both) is the absolute priority. Your goal is to find a structure where both parameters' influences are clearly distinguishable and interact in a way that allows for reliable estimation for *both* parameters, ideally leading to improved fit metrics (BIC and accuracy) as a result of capturing the underlying process more accurately.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: Okay, here are the improved instructions for the next run (Run 80 of 100), based on the results of recent attempts.\n\nTask Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\nproposed_amount = when participant is the proposer, what is the amount proposed to the opponent (in \u00a3)\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified).\n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able to be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal.\n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied.\n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1:\n<EXAMPLE>\n(Model of a Random Choice Task):\\\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = beta + epsilon*E + eta*N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\\\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\\\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\\\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\\\n      \"source\": \"data\"\n    },\\\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\\\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\\\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\\\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type:\nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\nInstructions: Okay, here are the improved instructions for the next run (Run 80 of 100), based on the results of recent attempts.\n\nThe model tested in the previous run (Run 79), the exponent-divisive structure `U_accept = (beta_value * split_perc_self) / (1.0 + (loss_below_fair)**beta_unfairness)`, unfortunately resulted in very poor parameter recovery for *both* `beta_value` (r = -0.046) and `beta_unfairness` (r = 0.268), and also performed worse on fit metrics (BIC = 64.26, Accuracy = 0.560) compared to the quadratic divisive model (Run 78, BIC = 44.12, Acc = 0.666).\n\nThis confirms that the exponent structure for the penalty term did not achieve the crucial objective of robustly identifying *both* parameters simultaneously, despite our hypothesis that it would create distinct influence profiles. A model with poor parameter recovery is unusable, regardless of its fit metrics.\n\nThe **unwavering primary objective remains achieving parameter recovery >= 0.7 for *all* learnable parameters**. We must find a model structure that allows for reliable estimation of *both* `beta_value` and `beta_unfairness`.\n\nFor Run 80, we will continue to explore the divisive structure and the use of `loss_below_fair` based on token contributions, as these components seem relevant to the task and contributed to better fit in some previous attempts. However, we need a *different functional form* for the unfairness penalty in the denominator that can hopefully create more mathematically distinct and separable influences for *both* parameters.\n\nProposed Model Structure: A divisive utility model where the core value derived from the participant's proposed percentage (`split_perc_self`), scaled by `beta_value`, is *reduced* by a factor based on a *logarithmic* transformation of `loss_below_fair`, scaled by `beta_unfairness`, in the denominator.\n\n`U_accept = (beta_value * split_perc_self) / (1.0 + penalty_term)`\n\nHere:\nCalculate `sum_tokens = token_self + token_opp`.\nCalculate `fair_perc_self_calc` handling the `sum_tokens == 0` case (defaulting to 50.0), using `token_self` and `token_opp` from the data.\nCalculate `loss_below_fair = Max(0.0, fair_perc_self_calc - split_perc_self)`. This term is non-zero only for offers below or equal to the fair share.\nCalculate the penalty term `penalty_term = beta_unfairness * Log(1.0 + loss_below_fair)`. The natural logarithm `Log()` is used here. Note that `Log(1.0 + loss_below_fair)` is 0 when `loss_below_fair` is 0, so no specific conditional handling is needed for the penalty term itself being 0; it's implicitly handled by the log function's properties.\nThe utility `U_accept` is calculated as the product of `beta_value` and `split_perc_self`, divided by the term `(1.0 + penalty_term)`.\n\nIn this structure, `beta_value` scales the numerator representing the base value from the offer percentage. `beta_unfairness` scales a penalty term based on the natural logarithm of `1 + loss_below_fair`. Using a logarithmic function for the penalty means that increases in `loss_below_fair` lead to increases in the penalty, but with *diminishing returns*. This specific non-linear relationship is hypothesized to create a pattern of influence for `beta_unfairness` across different levels of unfairness that is mathematically distinct from the linear scaling effect of `beta_value` on the offer percentage. This difference in influence profiles might improve robust parameter identifiability for *both* `beta_value` and `beta_unfairness` simultaneously, addressing the recovery failures seen in previous models. `beta_value` represents the base sensitivity to the offer percentage, and `beta_unfairness` represents the sensitivity to the log-transformed unfairness penalty.\n\nDesign the model using this new log-penalty divisive structure: `U_accept = (beta_value * split_perc_self) / (1.0 + penalty_term)`, where `loss_below_fair` and `fair_perc_self_calc` are calculated as specified above using `token_self`, `token_opp`, and `split_perc_self`, and the `penalty_term` uses the natural logarithm of `1.0 + loss_below_fair` scaled by `beta_unfairness`. Remember to calculate intermediate variables before the final `U_accept`.\n\nFocus on clearly defining all intermediate terms and articulating in the summary how this specific divisive structure, by placing `beta_unfairness` scaling a *logarithmic* penalty function of `loss_below_fair` in the denominator, is intended to achieve robust parameter identifiability for *both* parameters by creating mathematically distinct and *interacting* influence profiles that are more separable than those generated by previous linear, exponential, quadratic, or exponent-based forms, addressing the recovery failures seen in previous models.\n\n*   **Key Inputs & Calculated Variables:** Use `split_perc_self`, `token_self`, `token_opp` as data variables. Calculate `sum_tokens`, `fair_perc_self_calc` (handling `sum_tokens == 0`), `loss_below_fair`, the intermediate `penalty_term` (calculated as `beta_unfairness * Log(1.0 + loss_below_fair)`), and `U_accept`. Include calculation steps for derived variables *before* the formula for `U_accept`. Use clear mathematical notation within the <MODEL> tags (only the formula). Use `Log()` for the natural logarithm and `Max()` for the maximum function.\n*   **Learnable Parameters:** Exactly **2 learnable parameters**: `beta_value` (base value sensitivity) and `beta_unfairness` (unfairness penalty sensitivity on log scale). Choose descriptive, Python-safe names. Define clear, generous, finite numerical bounds. Non-negative bounds (e.g., `[0.0, 100.0]` for both) are theoretically appropriate for interpretability and likely necessary for parameter recovery in this structure (e.g., `beta_unfairness` should be non-negative so the denominator increases with `loss_below_fair` for `loss_below_fair > 0`, and `beta_value` should be non-negative for utility to increase with `split_perc_self` on fair offers). Stick with `[0.0, 100.0]` for both.\n*   **Calculated Variables:** Include descriptions for *all* calculated variables used in the model (including `U_accept`, `sum_tokens`, `fair_perc_self_calc`, `loss_below_fair`, and `penalty_term`) with `source: \"calculated\"`. Include descriptions for all data variables used as inputs (`token_self`, `token_opp`, `split_perc_self`) with `source: \"data\"`.\n*   **Variable Descriptions:** Provide variable descriptions in JSON format between <VARIABLES> tags for *all* variables in the <MODEL> formula. Include source, range (with inclusive flags), distribution (if applicable), and learnable status. Remember variable names must exactly match the model.\n*   **Target Variable:** Specify \"accept\" using <target_variable> tags.\n*   **Summary:** Provide a concise summary between <SUMMARY> tags. Describe the model's core idea (divisive structure where utility from `split_perc_self` is reduced by a penalty based on the log of `1 + loss_below_fair`). Crucially, explain *how* this specific structure, where `beta_unfairness` scales a *logarithmic* transformation of `loss_below_below_fair` in the denominator, is specifically intended to improve robust parameter identifiability for *both* parameters by creating mathematically distinct and *interacting* influence profiles that are more separable than those generated by previous linear, exponential, quadratic, or exponent-based forms, addressing the recovery failures seen in previous models.\n*   **Think Outside the Box:** Parameter identifiability for *both* parameters simultaneously is the persistent challenge. Recognize that various non-linear functions applied to `loss_below_fair` in the denominator, scaled linearly by `beta_unfairness` (like linear, quadratic, log) or used with `beta_unfairness` in the exponent, have not yet yielded satisfactory joint recovery. If this logarithmic structure also fails to achieve >= 0.7 recovery for *both* parameters, the next iteration must consider *fundamentally different* ways the two parameters could interact or represent psychological processes to create truly distinct and separable influences. Could `beta_value` and `beta_unfairness` influence *different aspects* of the offer evaluation (e.g., one affects baseline acceptance, the other penalty sensitivity)? Could the utility function structure be entirely different (e.g., comparing utility of accepting vs. rejecting, where parameters influence different parts of this comparison)? Continue to focus intently on how the functional form ensures that varying `beta_value` has a measurably different effect on the utility curve across offers than varying `beta_unfairness`, and that these effects are distinct enough to be estimated independently with high reliability.\n\nAvailable Data Variables:\n- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.\n(Note: Use `split_perc_self` for the participant's proposed percentage share percentage).\n\nPlease think through this step by step, then provide your model specification and variable descriptions. Remember that robust parameter identifiability for *both* learnable parameters (>= 0.7 recovery for both) is the absolute priority. Your goal is to find a structure where both parameters' influences are clearly distinguishable and interact in a way that allows for reliable estimation for *both* parameters, ideally leading to improved fit metrics (BIC and accuracy) as a result of capturing the underlying process more accurately.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<MODEL>\nsum_tokens = token_self + token_opp\nfair_perc_self_calc = IF(sum_tokens == 0, 50.0, (token_self / sum_tokens) * 100.0)\nloss_below_fair = Max(0.0, fair_perc_self_calc - split_perc_self)\npenalty_term = beta_unfairness * Log(1.0 + loss_below_fair)\nU_accept = (beta_value * split_perc_self) / (1.0 + penalty_term)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"beta_value\": {\n      \"description\": \"Parameter scaling the value derived from the participant's proposed percentage share.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_unfairness\": {\n      \"description\": \"Parameter scaling the logarithmic penalty term for offers below the calculated fair share.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The proposed share for the participant in percentage.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"sum_tokens\": {\n      \"description\": \"Total number of tokens found by participant and opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fair_perc_self_calc\": {\n      \"description\": \"Participant's calculated fair percentage share based on token contributions. Calculated as (token_self / sum_tokens) * 100.0 if sum_tokens > 0, otherwise 50.0.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"loss_below_fair\": {\n      \"description\": \"The extent to which the proposed percentage share for self is below the calculated fair share based on tokens. It is Max(0.0, fair_perc_self_calc - split_perc_self).\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"penalty_term\": {\n      \"description\": \"The penalty applied for offers below the calculated fair share, scaled by beta_unfairness and using the natural logarithm of (1 + loss_below_fair).\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"U_accept\": {\n      \"description\": \"Utility of accepting the proposed offer.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA divisive utility model for responder behavior. The utility of accepting is based on the proposed percentage share for the participant, scaled by beta_value, which is then divided by a term reflecting the offer's unfairness plus one. The unfairness penalty in the denominator is calculated from the extent to which the offer is below a fair share (derived from token contributions), transformed by the natural logarithm of (1 + loss_below_fair), and scaled by beta_unfairness. This specific structure, utilizing a logarithmic penalty scaled by beta_unfairness in the denominator, aims to create mathematically distinct and interacting influence profiles for beta_value and beta_unfairness across different offers, thereby improving robust parameter identifiability compared to previous models.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['beta_value', 'beta_unfairness']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                sum_tokens = token_self + token_opp\nfair_perc_self_calc = IF(sum_tokens == 0, 50.0, (token_self / sum_tokens) * 100.0)\nloss_below_fair = Max(0.0, fair_perc_self_calc - split_perc_self)\npenalty_term = beta_unfairness * Log(1.0 + loss_below_fair)\nU_accept = (beta_value * split_perc_self) / (1.0 + penalty_term)\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"beta_value\": {\n      \"description\": \"Parameter scaling the value derived from the participant's proposed percentage share.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_unfairness\": {\n      \"description\": \"Parameter scaling the logarithmic penalty term for offers below the calculated fair share.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The proposed share for the participant in percentage.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"sum_tokens\": {\n      \"description\": \"Total number of tokens found by participant and opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fair_perc_self_calc\": {\n      \"description\": \"Participant's calculated fair percentage share based on token contributions. Calculated as (token_self / sum_tokens) * 100.0 if sum_tokens > 0, otherwise 50.0.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"loss_below_fair\": {\n      \"description\": \"The extent to which the proposed percentage share for self is below the calculated fair share based on tokens. It is Max(0.0, fair_perc_self_calc - split_perc_self).\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"penalty_term\": {\n      \"description\": \"The penalty applied for offers below the calculated fair share, scaled by beta_unfairness and using the natural logarithm of (1 + loss_below_fair).\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"U_accept\": {\n      \"description\": \"Utility of accepting the proposed offer.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, beta_value=1, beta_unfairness=1):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        split_perc_self = trial.get(\"splitperc_self\", 0)\n\n        sum_tokens = token_self + token_opp\n        if sum_tokens == 0:\n            fair_perc_self_calc = 50.0\n        else:\n            fair_perc_self_calc = (token_self / sum_tokens) * 100.0\n\n        loss_below_fair = max(0.0, fair_perc_self_calc - split_perc_self)\n        penalty_term = beta_unfairness * math.log(1.0 + loss_below_fair)\n        U_accept = (beta_value * split_perc_self) / (1.0 + penalty_term)\n\n        model_predictions.append(U_accept)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n",
      "timestamp": 1746103808.922004
    }
  ],
  "learnable_parameters": {
    "beta_value": {
      "description": "Parameter scaling the value derived from the participant's proposed percentage share.",
      "range": {
        "min": 0.0,
        "max": 100.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta_unfairness": {
      "description": "Parameter scaling the logarithmic penalty term for offers below the calculated fair share.",
      "range": {
        "min": 0.0,
        "max": 100.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "sum_tokens = token_self + token_opp\nfair_perc_self_calc = IF(sum_tokens == 0, 50.0, (token_self / sum_tokens) * 100.0)\nloss_below_fair = Max(0.0, fair_perc_self_calc - split_perc_self)\npenalty_term = beta_unfairness * Log(1.0 + loss_below_fair)\nU_accept = (beta_value * split_perc_self) / (1.0 + penalty_term)",
  "variable_descriptions": {
    "beta_value": {
      "description": "Parameter scaling the value derived from the participant's proposed percentage share.",
      "range": {
        "min": 0.0,
        "max": 100.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta_unfairness": {
      "description": "Parameter scaling the logarithmic penalty term for offers below the calculated fair share.",
      "range": {
        "min": 0.0,
        "max": 100.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "token_self": {
      "description": "Number of tokens found by the participant.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "split_perc_self": {
      "description": "The proposed share for the participant in percentage.",
      "range": {
        "min": 0.0,
        "max": 100.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "sum_tokens": {
      "description": "Total number of tokens found by participant and opponent.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "fair_perc_self_calc": {
      "description": "Participant's calculated fair percentage share based on token contributions. Calculated as (token_self / sum_tokens) * 100.0 if sum_tokens > 0, otherwise 50.0.",
      "range": {
        "min": 0.0,
        "max": 100.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "loss_below_fair": {
      "description": "The extent to which the proposed percentage share for self is below the calculated fair share based on tokens. It is Max(0.0, fair_perc_self_calc - split_perc_self).",
      "range": {
        "min": 0.0,
        "max": 100.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "penalty_term": {
      "description": "The penalty applied for offers below the calculated fair share, scaled by beta_unfairness and using the natural logarithm of (1 + loss_below_fair).",
      "range": {
        "min": 0.0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "U_accept": {
      "description": "Utility of accepting the proposed offer.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "A divisive utility model for responder behavior. The utility of accepting is based on the proposed percentage share for the participant, scaled by beta_value, which is then divided by a term reflecting the offer's unfairness plus one. The unfairness penalty in the denominator is calculated from the extent to which the offer is below a fair share (derived from token contributions), transformed by the natural logarithm of (1 + loss_below_fair), and scaled by beta_unfairness. This specific structure, utilizing a logarithmic penalty scaled by beta_unfairness in the denominator, aims to create mathematically distinct and interacting influence profiles for beta_value and beta_unfairness across different offers, thereby improving robust parameter identifiability compared to previous models.",
  "target_variable": "accept",
  "full_reasoning": "<MODEL>\nsum_tokens = token_self + token_opp\nfair_perc_self_calc = IF(sum_tokens == 0, 50.0, (token_self / sum_tokens) * 100.0)\nloss_below_fair = Max(0.0, fair_perc_self_calc - split_perc_self)\npenalty_term = beta_unfairness * Log(1.0 + loss_below_fair)\nU_accept = (beta_value * split_perc_self) / (1.0 + penalty_term)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"beta_value\": {\n      \"description\": \"Parameter scaling the value derived from the participant's proposed percentage share.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_unfairness\": {\n      \"description\": \"Parameter scaling the logarithmic penalty term for offers below the calculated fair share.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The proposed share for the participant in percentage.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"sum_tokens\": {\n      \"description\": \"Total number of tokens found by participant and opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fair_perc_self_calc\": {\n      \"description\": \"Participant's calculated fair percentage share based on token contributions. Calculated as (token_self / sum_tokens) * 100.0 if sum_tokens > 0, otherwise 50.0.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"loss_below_fair\": {\n      \"description\": \"The extent to which the proposed percentage share for self is below the calculated fair share based on tokens. It is Max(0.0, fair_perc_self_calc - split_perc_self).\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"penalty_term\": {\n      \"description\": \"The penalty applied for offers below the calculated fair share, scaled by beta_unfairness and using the natural logarithm of (1 + loss_below_fair).\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"U_accept\": {\n      \"description\": \"Utility of accepting the proposed offer.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA divisive utility model for responder behavior. The utility of accepting is based on the proposed percentage share for the participant, scaled by beta_value, which is then divided by a term reflecting the offer's unfairness plus one. The unfairness penalty in the denominator is calculated from the extent to which the offer is below a fair share (derived from token contributions), transformed by the natural logarithm of (1 + loss_below_fair), and scaled by beta_unfairness. This specific structure, utilizing a logarithmic penalty scaled by beta_unfairness in the denominator, aims to create mathematically distinct and interacting influence profiles for beta_value and beta_unfairness across different offers, thereby improving robust parameter identifiability compared to previous models.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: sum_tokens = token_self + token_opp\nfair_perc_self_calc = IF(sum_tokens == 0, 50.0, (token_self / sum_tokens) * 100.0)\nloss_below_fair = Max(0.0, fair_perc_self_calc - split_perc_self)\npenalty_term = beta_unfairness * Log(1.0 + loss_below_fair)\nU_accept = (beta_value * split_perc_self) / (1.0 + penalty_term)\nSummary: A divisive utility model for responder behavior. The utility of accepting is based on the proposed percentage share for the participant, scaled by beta_value, which is then divided by a term reflecting the offer's unfairness plus one. The unfairness penalty in the denominator is calculated from the extent to which the offer is below a fair share (derived from token contributions), transformed by the natural logarithm of (1 + loss_below_fair), and scaled by beta_unfairness. This specific structure, utilizing a logarithmic penalty scaled by beta_unfairness in the denominator, aims to create mathematically distinct and interacting influence profiles for beta_value and beta_unfairness across different offers, thereby improving robust parameter identifiability compared to previous models.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, beta_value=1, beta_unfairness=1):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        split_perc_self = trial.get(\"splitperc_self\", 0)\n\n        sum_tokens = token_self + token_opp\n        if sum_tokens == 0:\n            fair_perc_self_calc = 50.0\n        else:\n            fair_perc_self_calc = (token_self / sum_tokens) * 100.0\n\n        loss_below_fair = max(0.0, fair_perc_self_calc - split_perc_self)\n        penalty_term = beta_unfairness * math.log(1.0 + loss_below_fair)\n        U_accept = (beta_value * split_perc_self) / (1.0 + penalty_term)\n\n        model_predictions.append(U_accept)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.67002442002442,
  "group_accuracies": {
    "Control": 0.7080103359173127,
    "Cocaine": 0.6359953703703703
  },
  "group_parameter_averages": {
    "Control": {
      "beta_value": 17.579540511000186,
      "beta_unfairness": 73.75045130502497
    },
    "Cocaine": {
      "beta_value": 5.738127139532145,
      "beta_unfairness": 87.4949775588844
    }
  },
  "fitting_results": [
    {
      "beta_value": 0.004167539554510519,
      "beta_unfairness": 100.0,
      "success": true,
      "log_likelihood": -24.93557761668169,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 3.0078720263055243,
      "beta_unfairness": 100.0,
      "success": true,
      "log_likelihood": -21.70961567227404,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 4.312754674551998,
      "beta_unfairness": 97.8216371260651,
      "success": true,
      "log_likelihood": -21.199183845173827,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 0.1754985316899727,
      "beta_unfairness": 99.74204212071548,
      "success": true,
      "log_likelihood": -22.19570147967511,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 0.9700551418721703,
      "beta_unfairness": 92.60389157473777,
      "success": true,
      "log_likelihood": -22.122212918249467,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 4.72717929136684,
      "beta_unfairness": 50.328643967142895,
      "success": true,
      "log_likelihood": -18.47150105998335,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 74.70720108249313,
      "beta_unfairness": 12.937209660189207,
      "success": true,
      "log_likelihood": -8.661557720070044e-07,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 9.519478609670136,
      "beta_unfairness": 91.58504277920409,
      "success": true,
      "log_likelihood": -17.80883343017164,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 9.732537650259143,
      "beta_unfairness": 1.4068500424095272,
      "success": true,
      "log_likelihood": -5.525033658028998e-07,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 0.1692770201008163,
      "beta_unfairness": 100.0,
      "success": true,
      "log_likelihood": -22.201411227716207,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 2.153795258855907,
      "beta_unfairness": 100.0,
      "success": true,
      "log_likelihood": -21.93591999584268,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 0.004205939132355387,
      "beta_unfairness": 91.6947735492034,
      "success": true,
      "log_likelihood": -24.9352509804743,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 0.8423117085463044,
      "beta_unfairness": 100.0,
      "success": true,
      "log_likelihood": -22.142814948591177,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 28.07023178610124,
      "beta_unfairness": 4.969843676428207,
      "success": true,
      "log_likelihood": -1.8788921350266448e-06,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 96.4603157310119,
      "beta_unfairness": 19.65058027109603,
      "success": true,
      "log_likelihood": -7.3700777627238985e-06,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 73.36937168863089,
      "beta_unfairness": 15.324350986347188,
      "success": true,
      "log_likelihood": -1.0563001815766306e-05,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 83.0448403099938,
      "beta_unfairness": 16.697357361829,
      "success": true,
      "log_likelihood": -6.421383151231541e-06,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 20.08367403860066,
      "beta_unfairness": 72.65374600737069,
      "success": true,
      "log_likelihood": -8.726777724724704,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 28.940464169595792,
      "beta_unfairness": 99.75964994849241,
      "success": true,
      "log_likelihood": -8.229788093968947,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 55.11554150793352,
      "beta_unfairness": 10.688437281308483,
      "success": true,
      "log_likelihood": -4.48898646525682e-06,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 5.096378300146361,
      "beta_unfairness": 97.75181728107732,
      "success": true,
      "log_likelihood": -20.838108033320395,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 24.787029765045908,
      "beta_unfairness": 100.0,
      "success": true,
      "log_likelihood": -9.832404829002664,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 0.13478364560747838,
      "beta_unfairness": 100.0,
      "success": true,
      "log_likelihood": -22.25597936360806,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 2.591632360031399,
      "beta_unfairness": 74.13730071507764,
      "success": true,
      "log_likelihood": -21.552286675702383,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 2.6202818320876515,
      "beta_unfairness": 100.0,
      "success": true,
      "log_likelihood": -21.82084438744342,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 6.436941202273073,
      "beta_unfairness": 100.0,
      "success": true,
      "log_likelihood": -20.21202503036468,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 6.448124478933864,
      "beta_unfairness": 100.0,
      "success": true,
      "log_likelihood": -20.20586103120714,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 0.13225398215561163,
      "beta_unfairness": 100.0,
      "success": true,
      "log_likelihood": -22.263359567620466,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 25.628532248324337,
      "beta_unfairness": 100.0,
      "success": true,
      "log_likelihood": -9.487695741061014,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 11.889057517019092,
      "beta_unfairness": 82.58383423917513,
      "success": true,
      "log_likelihood": -15.257827908648501,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 72.38345438569323,
      "beta_unfairness": 6.820165216679264,
      "success": true,
      "log_likelihood": 3.593723762838537e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 0.004167539288931484,
      "beta_unfairness": 100.0,
      "success": true,
      "log_likelihood": -24.935577616681687,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 0.02760179154508936,
      "beta_unfairness": 74.10236705555405,
      "success": true,
      "log_likelihood": -24.306636912875003,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 0.1614126785912379,
      "beta_unfairness": 100.0,
      "success": true,
      "log_likelihood": -22.20831732273725,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 33.00809135080987,
      "beta_unfairness": 6.29032883643303,
      "success": true,
      "log_likelihood": -4.440368211532993e-06,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 8.665790143132677,
      "beta_unfairness": 96.02372033177137,
      "success": true,
      "log_likelihood": -18.68000101619216,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 7.43784716997931,
      "beta_unfairness": 59.74607123902486,
      "success": true,
      "log_likelihood": -16.4953567882084,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 2.8851264742023415,
      "beta_unfairness": 100.0,
      "success": true,
      "log_likelihood": -21.746339211081658,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 8.661146810813733,
      "beta_unfairness": 100.0,
      "success": true,
      "log_likelihood": -18.9061210453315,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 30.462467105547383,
      "beta_unfairness": 100.0,
      "success": true,
      "log_likelihood": -7.746481019876776,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 5.9160152500778445,
      "beta_unfairness": 87.96475170981617,
      "success": true,
      "log_likelihood": -20.055134089550233,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 0.1156662947150028,
      "beta_unfairness": 95.00192818894394,
      "success": true,
      "log_likelihood": -22.330904086221988,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 5.015665940719896,
      "beta_unfairness": 12.983064949981204,
      "success": true,
      "log_likelihood": -5.74764983596666,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 5.276156598579265,
      "beta_unfairness": 100.0,
      "success": true,
      "log_likelihood": -20.807960665327343,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 7.4077360714835425,
      "beta_unfairness": 94.50230991360885,
      "success": true,
      "log_likelihood": -19.40922154481628,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 10.316495531095494,
      "beta_unfairness": 97.8534257481682,
      "success": true,
      "log_likelihood": -17.711585771846458,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 4.652415601823309,
      "beta_unfairness": 99.91202412985204,
      "success": true,
      "log_likelihood": -21.092666072790447,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.14574286887031343,
      "beta_unfairness": 98.76041107283875,
      "success": true,
      "log_likelihood": -22.22994082254447,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.13967867036197085,
      "beta_unfairness": 29.520877711852425,
      "success": true,
      "log_likelihood": -22.232282845540492,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 1.7580801525792478,
      "beta_unfairness": 91.16417085250193,
      "success": true,
      "log_likelihood": -45.00992518731611,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 9.016816126829884,
      "beta_unfairness": 100.0,
      "success": true,
      "log_likelihood": -18.684129686428456,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.004302095806819423,
      "beta_unfairness": 100.0,
      "success": true,
      "log_likelihood": -24.934420596382346,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 5.710699889914843,
      "beta_unfairness": 100.0,
      "success": true,
      "log_likelihood": -43.61953256010412,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 2.006293746921341,
      "beta_unfairness": 44.81384755191449,
      "success": true,
      "log_likelihood": -44.20632103022806,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.13551923195295534,
      "beta_unfairness": 100.0,
      "success": true,
      "log_likelihood": -22.25404257895119,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.1453949570042193,
      "beta_unfairness": 100.0,
      "success": true,
      "log_likelihood": -22.230521083880575,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.1265880890021351,
      "beta_unfairness": 100.0,
      "success": true,
      "log_likelihood": -22.282223393347277,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 4.184100231979755,
      "beta_unfairness": 30.614213785535284,
      "success": true,
      "log_likelihood": -15.782205977886198,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.004231215614899403,
      "beta_unfairness": 97.39912063182042,
      "success": true,
      "log_likelihood": -24.935027012408487,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 17.272249407001564,
      "beta_unfairness": 100.0,
      "success": true,
      "log_likelihood": -13.53655879983535,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 5.278643478341855,
      "beta_unfairness": 98.83727684430423,
      "success": true,
      "log_likelihood": -20.776911190772694,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 3.3845863589706155,
      "beta_unfairness": 100.0,
      "success": true,
      "log_likelihood": -21.588499786039876,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.0041333511689299034,
      "beta_unfairness": 95.51017098262629,
      "success": true,
      "log_likelihood": -24.935865726020918,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.027611914968698085,
      "beta_unfairness": 100.0,
      "success": true,
      "log_likelihood": -24.306252792872016,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.10430144528421893,
      "beta_unfairness": 57.499711388835195,
      "success": true,
      "log_likelihood": -22.403190798006495,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 6.09977873054026,
      "beta_unfairness": 99.8007983927432,
      "success": true,
      "log_likelihood": -20.386296678384465,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 32.116686782257865,
      "beta_unfairness": 100.0,
      "success": true,
      "log_likelihood": -7.235623209781154,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 21.98599682507528,
      "beta_unfairness": 100.0,
      "success": true,
      "log_likelihood": -11.078491864786324,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 4.582686470337909,
      "beta_unfairness": 100.0,
      "success": true,
      "log_likelihood": -21.12485297814668,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 24.357410281174825,
      "beta_unfairness": 100.0,
      "success": true,
      "log_likelihood": -10.013557655889642,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.10551848571777271,
      "beta_unfairness": 100.0,
      "success": true,
      "log_likelihood": -22.395413531165033,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.004308471950029049,
      "beta_unfairness": 100.0,
      "success": true,
      "log_likelihood": -24.934364558904527,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 3.4117581423293237,
      "beta_unfairness": 100.0,
      "success": true,
      "log_likelihood": -21.579281391025305,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 8.709435181195614,
      "beta_unfairness": 67.7662409539533,
      "success": true,
      "log_likelihood": -16.239354743950116,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 2.195080498801017,
      "beta_unfairness": 100.0,
      "success": true,
      "log_likelihood": -44.95251391369837,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 11.478970463254011,
      "beta_unfairness": 100.0,
      "success": true,
      "log_likelihood": -17.106496545523655,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 34.43748687845988,
      "beta_unfairness": 100.0,
      "success": true,
      "log_likelihood": -6.5831695195553115,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.0,
      "beta_unfairness": 58.52703380109713,
      "success": true,
      "log_likelihood": -24.95329849295801,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 3.749260312748123,
      "beta_unfairness": 93.53644413238128,
      "success": true,
      "log_likelihood": -21.361759789771863,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.004025022488859496,
      "beta_unfairness": 83.63350755996422,
      "success": true,
      "log_likelihood": -24.936760680055855,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.404616766977311,
      "beta_unfairness": 100.0,
      "success": true,
      "log_likelihood": -22.1719633740864,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.08320493924691409,
      "beta_unfairness": 0.0,
      "success": true,
      "log_likelihood": -10.537471306344147,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.0,
      "beta_unfairness": 100.0,
      "success": true,
      "log_likelihood": -24.95329849295801,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 3.2381524454552313,
      "beta_unfairness": 97.91237652472248,
      "success": true,
      "log_likelihood": -21.614499508950757,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 2.991095205942967,
      "beta_unfairness": 100.0,
      "success": true,
      "log_likelihood": -21.714713925749273,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.026568156363105326,
      "beta_unfairness": 100.0,
      "success": true,
      "log_likelihood": -24.34639669418409,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 9.046640874513459,
      "beta_unfairness": 94.26930436424021,
      "success": true,
      "log_likelihood": -18.31913776807574,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.0,
      "beta_unfairness": 100.0,
      "success": true,
      "log_likelihood": -24.95329849295801,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 24.983354533743043,
      "beta_unfairness": 68.74529452432076,
      "success": true,
      "log_likelihood": -6.110856777899039,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.5941703156339894,
      "beta_unfairness": 48.575558000480385,
      "success": true,
      "log_likelihood": -22.10173642290482,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 3.7221198777803086,
      "beta_unfairness": 50.60480395869029,
      "success": true,
      "log_likelihood": -19.71151293417672,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "beta_value": {
        "r": 0.3541526696351523,
        "p": 0.0003004638131640181
      },
      "beta_unfairness": {
        "r": 0.35172384291562253,
        "p": 0.0003327282623818856
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 44.30736632217009,
  "bic_Control": 37.0972489040752,
  "bic_Cocaine": 50.766429842546756,
  "bic_results": {
    "average_bic": 44.30736632217009,
    "individual_bics": [
      57.0381931102756,
      50.5862692214603,
      49.56540556725987,
      51.55844083626244,
      51.41146371341115,
      44.11003999687892,
      7.167039609223764,
      42.784704737255495,
      7.167038981918951,
      51.56986033234463,
      51.03887786859758,
      57.03753983786082,
      51.45266777409457,
      7.16704163469649,
      7.167052617067745,
      7.167059002915852,
      7.167050719678523,
      24.62059332636163,
      23.626614064850116,
      7.16704685488515,
      48.84325394355301,
      26.83184753491755,
      51.678996604128336,
      50.271611228316985,
      50.808726651799056,
      47.591087937641575,
      47.578759939326495,
      51.69375701215315,
      26.142429359034246,
      37.68269369420922,
      7.167037869724773,
      57.03819311027559,
      55.780311702662225,
      51.58367252238672,
      7.1670467576486425,
      44.52703990929654,
      40.15775145332902,
      50.659716299075534,
      44.979279967575216,
      22.65999991666577,
      47.277306056012684,
      51.828846049356194,
      18.662337548845542,
      48.782959207566904,
      45.98548096654478,
      42.590209420605134,
      49.35237002249311,
      51.62691952200116,
      51.6316035679932,
      97.18688825154443,
      44.53529724976913,
      57.03587906967691,
      94.40610299712046,
      95.57967993736834,
      51.6751230348146,
      51.62808004467337,
      51.73148466360677,
      38.73144983268462,
      57.03709190172919,
      34.24015547658292,
      48.720860258457606,
      50.34403744899197,
      57.038769328954054,
      55.77954346265625,
      51.97341947292521,
      47.93963123368115,
      21.638284296474527,
      29.32402160648487,
      49.41674383320558,
      27.1941531886915,
      51.957864939242285,
      57.03576699472127,
      50.32560065896283,
      39.64574736481245,
      97.07206570430895,
      41.38003096795953,
      20.333376916022843,
      57.073634862828236,
      49.890557456455944,
      57.04055923702393,
      51.510964625085016,
      28.241980489600515,
      57.073634862828236,
      50.39603689481373,
      50.59646572841076,
      55.8598312652804,
      43.8053134130637,
      57.073634862828236,
      19.388751432710297,
      51.37051072272186,
      46.59006374526566
    ],
    "group_enabled": true,
    "group_bics": {
      "Control": [
        57.0381931102756,
        50.5862692214603,
        49.56540556725987,
        51.55844083626244,
        51.41146371341115,
        44.11003999687892,
        7.167039609223764,
        42.784704737255495,
        7.167038981918951,
        51.56986033234463,
        51.03887786859758,
        57.03753983786082,
        51.45266777409457,
        7.16704163469649,
        7.167052617067745,
        7.167059002915852,
        7.167050719678523,
        24.62059332636163,
        23.626614064850116,
        7.16704685488515,
        48.84325394355301,
        26.83184753491755,
        51.678996604128336,
        50.271611228316985,
        50.808726651799056,
        47.591087937641575,
        47.578759939326495,
        51.69375701215315,
        26.142429359034246,
        37.68269369420922,
        7.167037869724773,
        57.03819311027559,
        55.780311702662225,
        51.58367252238672,
        7.1670467576486425,
        44.52703990929654,
        40.15775145332902,
        50.659716299075534,
        44.979279967575216,
        22.65999991666577,
        47.277306056012684,
        51.828846049356194,
        18.662337548845542
      ],
      "Cocaine": [
        48.782959207566904,
        45.98548096654478,
        42.590209420605134,
        49.35237002249311,
        51.62691952200116,
        51.6316035679932,
        97.18688825154443,
        44.53529724976913,
        57.03587906967691,
        94.40610299712046,
        95.57967993736834,
        51.6751230348146,
        51.62808004467337,
        51.73148466360677,
        38.73144983268462,
        57.03709190172919,
        34.24015547658292,
        48.720860258457606,
        50.34403744899197,
        57.038769328954054,
        55.77954346265625,
        51.97341947292521,
        47.93963123368115,
        21.638284296474527,
        29.32402160648487,
        49.41674383320558,
        27.1941531886915,
        51.957864939242285,
        57.03576699472127,
        50.32560065896283,
        39.64574736481245,
        97.07206570430895,
        41.38003096795953,
        20.333376916022843,
        57.073634862828236,
        49.890557456455944,
        57.04055923702393,
        51.510964625085016,
        28.241980489600515,
        57.073634862828236,
        50.39603689481373,
        50.59646572841076,
        55.8598312652804,
        43.8053134130637,
        57.073634862828236,
        19.388751432710297,
        51.37051072272186,
        46.59006374526566
      ]
    },
    "num_parameters": 2,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- beta_value: r = 0.354\n- beta_unfairness: r = 0.352",
  "previous_models": [
    "Specification: sum_tokens = token_self + token_opp\nfair_perc_self_calc = IF(sum_tokens == 0, 50.0, (token_self / sum_tokens) * 100.0)\nloss_below_fair = Max(0.0, fair_perc_self_calc - split_perc_self)\npenalty_term = beta_unfairness * Log(1.0 + loss_below_fair)\nU_accept = (beta_value * split_perc_self) / (1.0 + penalty_term)\nSummary: A divisive utility model for responder behavior. The utility of accepting is based on the proposed percentage share for the participant, scaled by beta_value, which is then divided by a term reflecting the offer's unfairness plus one. The unfairness penalty in the denominator is calculated from the extent to which the offer is below a fair share (derived from token contributions), transformed by the natural logarithm of (1 + loss_below_fair), and scaled by beta_unfairness. This specific structure, utilizing a logarithmic penalty scaled by beta_unfairness in the denominator, aims to create mathematically distinct and interacting influence profiles for beta_value and beta_unfairness across different offers, thereby improving robust parameter identifiability compared to previous models.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 44.30736632217009\nOverall Accuracy: 0.6700\nGroup Accuracies:\n- Control: 0.7080\n- Cocaine: 0.6360\n\nParameter Recovery:\n- beta_value: r = 0.354\n- beta_unfairness: r = 0.352"
  ]
}