{
  "task_description": "In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "Okay, here are the improved instructions for the next run (Run 81 of 100), based on the results of recent attempts.\n\nTask Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\nproposed_amount = when participant is the proposer, what is the amount proposed to the opponent (in \u00a3)\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified).\n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able to be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal.\n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied.\n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1:\n<EXAMPLE>\n(Model of a Random Choice Task):\\\\\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = beta + epsilon*E + eta*N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\\\\\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\\\\\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\\\\\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\\\\\n      \"source\": \"data\"\n    },\\\\\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\\\\\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\\\\\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\\\\\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type:\nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\nInstructions: Okay, here are the improved instructions for the next run (Run 81 of 100), based on the results of recent attempts.\n\nThe logarithmic divisive model tested in the previous run (Run 80) unfortunately failed to achieve robust parameter recovery for *both* learnable parameters (`beta_value` r=0.354, `beta_unfairness` r=0.352), despite providing reasonable fit metrics. This confirms that, similar to previous divisive structures (linear, exponential, quadratic, exponent-based), this specific structure and the way the parameters interacted did not create sufficiently distinct influence profiles for reliable joint parameter estimation.\n\nThe **unwavering primary objective remains achieving parameter recovery >= 0.7 for *all* learnable parameters**. A model with poor parameter recovery is unusable for interpreting individual differences or group comparisons, regardless of its aggregate fit. We must find a model structure where the influences of *both* `beta_value` and `beta_unfairness` are mathematically separable enough to be reliably estimated simultaneously.\n\nWe need to explore model structures that are *fundamentally different* from the divisive models explored so far. Instead of reducing utility multiplicatively through a denominator, let's explore an *additive* structure where different components of the offer's value contribute positively or negatively to the overall utility.\n\nFor Run 81, we will test an additive model where the utility is determined by a positive term related to the participant's proposed share (`split_perc_self`), and a negative penalty term related to the offer's unfairness (`loss_below_fair`). To address the persistent identifiability issue, we will make the penalty term non-linear, specifically using an exponential function, hoping this contrast with the linear value term will create more distinct parameter influences.\n\nProposed Model Structure: An additive utility model where the utility of accepting (`U_accept`) is calculated as a linear function of the participant's proposed percentage (`split_perc_self`), scaled by `beta_value`, *minus* an exponential penalty term based on `loss_below_fair`, scaled by `beta_unfairness`.\n\nHere are the calculation steps:\nCalculate `sum_tokens = token_self + token_opp`.\nCalculate `fair_perc_self_calc` handling the `sum_tokens == 0` case (defaulting to 50.0), using `token_self` and `token_opp` from the data.\nCalculate `loss_below_fair = Max(0.0, fair_perc_self_calc - split_perc_self)`. This term is non-zero only for offers below or equal to the fair share.\nCalculate the utility: `U_accept = beta_value * split_perc_self - beta_unfairness * (Exp(loss_below_fair) - 1.0)`.\nThe penalty term uses `Exp()` (natural exponential function). We subtract 1.0 from `Exp(loss_below_fair)` so that when `loss_below_fair` is 0 (fair or better offers), the penalty term `(Exp(0) - 1.0)` is `(1.0 - 1.0) = 0`, and no penalty is applied. For `loss_below_fair > 0`, `Exp(loss_below_fair) - 1.0` is positive, resulting in a positive penalty scaled by `beta_unfairness`.\n\nIn this structure, `beta_value` represents the linear sensitivity to the proposed percentage share (the potential gain), while `beta_unfairness` represents the strength of an exponential penalty for offers below the fair share. The hypothesis is that the *linear* contribution from `beta_value` combined additively with the *exponential* contribution from `beta_unfairness` will yield sufficiently distinct functional forms and influence profiles for each parameter across different offers to allow for robust joint identifiability, addressing the failures seen in previous, more correlated model structures.\n\nDesign the model using this new additive structure with an exponential penalty: `U_accept = beta_value * split_perc_self - beta_unfairness * (Exp(loss_below_fair) - 1.0)`. Remember to calculate intermediate variables (`sum_tokens`, `fair_perc_self_calc`, `loss_below_fair`) before the final `U_accept`. Use clear mathematical notation within the <MODEL> tags (only the formula). Use `Exp()` for the natural exponential function and `Max()` for the maximum function.\n\nFocus on clearly defining all intermediate terms and articulating in the summary how this specific additive structure, by combining a linear gain term scaled by `beta_value` with an exponential penalty term based on `loss_below_fair` scaled by `beta_unfairness`, is specifically intended to improve robust parameter identifiability for *both* parameters by creating mathematically distinct and separable influence profiles, moving away from the complex, potentially correlated interactions in the divisive models.\n\n*   **Key Inputs & Calculated Variables:** Use `split_perc_self`, `token_self`, `token_opp` as data variables. Calculate `sum_tokens`, `fair_perc_self_calc` (handling `sum_tokens == 0`), `loss_below_fair`, and `U_accept`. Include calculation steps for derived variables *before* the formula for `U_accept`.\n*   **Learnable Parameters:** Exactly **2 learnable parameters**: `beta_value` (linear gain sensitivity) and `beta_unfairness` (exponential penalty strength). Choose descriptive, Python-safe names. Define clear, generous, finite numerical bounds. Non-negative bounds (e.g., `[0.0, 100.0]` for both) are theoretically appropriate for interpretability and likely necessary for parameter recovery in this structure (e.g., non-negative `beta_value` ensures utility increases with percentage share; non-negative `beta_unfairness` ensures the penalty term reduces utility). Stick with `[0.0, 100.0]` for both.\n*   **Calculated Variables:** Include descriptions for *all* calculated variables used in the model (including `U_accept`, `sum_tokens`, `fair_perc_self_calc`, and `loss_below_fair`) with `source: \"calculated\"`. Include descriptions for all data variables used as inputs (`token_self`, `token_opp`, `split_perc_self`) with `source: \"data\"`.\n*   **Variable Descriptions:** Provide variable descriptions in JSON format between <VARIABLES> tags for *all* variables in the <MODEL> formula. Include source, range (with inclusive flags), distribution (if applicable), and learnable status. Remember variable names must exactly match the model.\n*   **Target Variable:** Specify \"accept\" using <target_variable> tags.\n*   **Summary:** Provide a concise summary between <SUMMARY> tags. Describe the model's core idea (additive structure where utility from `split_perc_self` is reduced by an exponential penalty based on `loss_below_fair`). Crucially, explain *how* this specific additive structure, combining a linear term scaled by `beta_value` and an exponential penalty term based on `loss_below_fair` scaled by `beta_unfairness`, is specifically intended to improve robust parameter identifiability for *both* parameters by creating mathematically distinct and separable influence profiles compared to previous divisive models.\n*   **Think Outside the Box:** Parameter identifiability for *both* parameters simultaneously remains the persistent, difficult challenge. The exploration of various functions within divisive structures (linear, exponential, quadratic, exponent, log) has not solved this. Now we are trying an additive structure with a non-linear penalty. If this additive-exponential structure also fails to achieve >= 0.7 recovery for *both* parameters, the next iteration must consider *even more fundamentally different* ways the two parameters could interact or represent psychological processes to create truly distinct and separable influences. Could one parameter affect choice consistency (like a temperature parameter) while the other scales value? Could parameters influence the weighing of different attributes? Could the model structure involve comparison of utility of accepting vs. rejecting? Continue to focus intently on how the functional form ensures that varying `beta_value` has a measurably different effect on the utility curve across offers than varying `beta_unfairness`, and that these effects are distinct enough to be estimated independently with high reliability.\n\nAvailable Data Variables:\n- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.\n(Note: Use `split_perc_self` for the participant's proposed percentage share percentage).\n\nPlease think through this step by step, then provide your model specification and variable descriptions. Remember that robust parameter identifiability for *both* learnable parameters (>= 0.7 recovery for both) is the absolute priority. Your goal is to find a structure where both parameters' influences are clearly distinguishable and interact in a way that allows for reliable estimation for *both* parameters, ideally leading to improved fit metrics (BIC and accuracy) as a result of capturing the underlying process more accurately.\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: Okay, here are the improved instructions for the next run (Run 81 of 100), based on the results of recent attempts.\n\nTask Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\nproposed_amount = when participant is the proposer, what is the amount proposed to the opponent (in \u00a3)\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified).\n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able to be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal.\n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied.\n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1:\n<EXAMPLE>\n(Model of a Random Choice Task):\\\\\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = beta + epsilon*E + eta*N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\\\\\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\\\\\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\\\\\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\\\\\n      \"source\": \"data\"\n    },\\\\\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\\\\\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\\\\\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\\\\\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type:\nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\nInstructions: Okay, here are the improved instructions for the next run (Run 81 of 100), based on the results of recent attempts.\n\nThe logarithmic divisive model tested in the previous run (Run 80) unfortunately failed to achieve robust parameter recovery for *both* learnable parameters (`beta_value` r=0.354, `beta_unfairness` r=0.352), despite providing reasonable fit metrics. This confirms that, similar to previous divisive structures (linear, exponential, quadratic, exponent-based), this specific structure and the way the parameters interacted did not create sufficiently distinct influence profiles for reliable joint parameter estimation.\n\nThe **unwavering primary objective remains achieving parameter recovery >= 0.7 for *all* learnable parameters**. A model with poor parameter recovery is unusable for interpreting individual differences or group comparisons, regardless of its aggregate fit. We must find a model structure where the influences of *both* `beta_value` and `beta_unfairness` are mathematically separable enough to be reliably estimated simultaneously.\n\nWe need to explore model structures that are *fundamentally different* from the divisive models explored so far. Instead of reducing utility multiplicatively through a denominator, let's explore an *additive* structure where different components of the offer's value contribute positively or negatively to the overall utility.\n\nFor Run 81, we will test an additive model where the utility is determined by a positive term related to the participant's proposed share (`split_perc_self`), and a negative penalty term related to the offer's unfairness (`loss_below_fair`). To address the persistent identifiability issue, we will make the penalty term non-linear, specifically using an exponential function, hoping this contrast with the linear value term will create more distinct parameter influences.\n\nProposed Model Structure: An additive utility model where the utility of accepting (`U_accept`) is calculated as a linear function of the participant's proposed percentage (`split_perc_self`), scaled by `beta_value`, *minus* an exponential penalty term based on `loss_below_fair`, scaled by `beta_unfairness`.\n\nHere are the calculation steps:\nCalculate `sum_tokens = token_self + token_opp`.\nCalculate `fair_perc_self_calc` handling the `sum_tokens == 0` case (defaulting to 50.0), using `token_self` and `token_opp` from the data.\nCalculate `loss_below_fair = Max(0.0, fair_perc_self_calc - split_perc_self)`. This term is non-zero only for offers below or equal to the fair share.\nCalculate the utility: `U_accept = beta_value * split_perc_self - beta_unfairness * (Exp(loss_below_fair) - 1.0)`.\nThe penalty term uses `Exp()` (natural exponential function). We subtract 1.0 from `Exp(loss_below_fair)` so that when `loss_below_fair` is 0 (fair or better offers), the penalty term `(Exp(0) - 1.0)` is `(1.0 - 1.0) = 0`, and no penalty is applied. For `loss_below_fair > 0`, `Exp(loss_below_fair) - 1.0` is positive, resulting in a positive penalty scaled by `beta_unfairness`.\n\nIn this structure, `beta_value` represents the linear sensitivity to the proposed percentage share (the potential gain), while `beta_unfairness` represents the strength of an exponential penalty for offers below the fair share. The hypothesis is that the *linear* contribution from `beta_value` combined additively with the *exponential* contribution from `beta_unfairness` will yield sufficiently distinct functional forms and influence profiles for each parameter across different offers to allow for robust joint identifiability, addressing the failures seen in previous, more correlated model structures.\n\nDesign the model using this new additive structure with an exponential penalty: `U_accept = beta_value * split_perc_self - beta_unfairness * (Exp(loss_below_fair) - 1.0)`. Remember to calculate intermediate variables (`sum_tokens`, `fair_perc_self_calc`, `loss_below_fair`) before the final `U_accept`. Use clear mathematical notation within the <MODEL> tags (only the formula). Use `Exp()` for the natural exponential function and `Max()` for the maximum function.\n\nFocus on clearly defining all intermediate terms and articulating in the summary how this specific additive structure, by combining a linear gain term scaled by `beta_value` with an exponential penalty term based on `loss_below_fair` scaled by `beta_unfairness`, is specifically intended to improve robust parameter identifiability for *both* parameters by creating mathematically distinct and separable influence profiles, moving away from the complex, potentially correlated interactions in the divisive models.\n\n*   **Key Inputs & Calculated Variables:** Use `split_perc_self`, `token_self`, `token_opp` as data variables. Calculate `sum_tokens`, `fair_perc_self_calc` (handling `sum_tokens == 0`), `loss_below_fair`, and `U_accept`. Include calculation steps for derived variables *before* the formula for `U_accept`.\n*   **Learnable Parameters:** Exactly **2 learnable parameters**: `beta_value` (linear gain sensitivity) and `beta_unfairness` (exponential penalty strength). Choose descriptive, Python-safe names. Define clear, generous, finite numerical bounds. Non-negative bounds (e.g., `[0.0, 100.0]` for both) are theoretically appropriate for interpretability and likely necessary for parameter recovery in this structure (e.g., non-negative `beta_value` ensures utility increases with percentage share; non-negative `beta_unfairness` ensures the penalty term reduces utility). Stick with `[0.0, 100.0]` for both.\n*   **Calculated Variables:** Include descriptions for *all* calculated variables used in the model (including `U_accept`, `sum_tokens`, `fair_perc_self_calc`, and `loss_below_fair`) with `source: \"calculated\"`. Include descriptions for all data variables used as inputs (`token_self`, `token_opp`, `split_perc_self`) with `source: \"data\"`.\n*   **Variable Descriptions:** Provide variable descriptions in JSON format between <VARIABLES> tags for *all* variables in the <MODEL> formula. Include source, range (with inclusive flags), distribution (if applicable), and learnable status. Remember variable names must exactly match the model.\n*   **Target Variable:** Specify \"accept\" using <target_variable> tags.\n*   **Summary:** Provide a concise summary between <SUMMARY> tags. Describe the model's core idea (additive structure where utility from `split_perc_self` is reduced by an exponential penalty based on `loss_below_fair`). Crucially, explain *how* this specific additive structure, combining a linear term scaled by `beta_value` and an exponential penalty term based on `loss_below_fair` scaled by `beta_unfairness`, is specifically intended to improve robust parameter identifiability for *both* parameters by creating mathematically distinct and separable influence profiles compared to previous divisive models.\n*   **Think Outside the Box:** Parameter identifiability for *both* parameters simultaneously remains the persistent, difficult challenge. The exploration of various functions within divisive structures (linear, exponential, quadratic, exponent, log) has not solved this. Now we are trying an additive structure with a non-linear penalty. If this additive-exponential structure also fails to achieve >= 0.7 recovery for *both* parameters, the next iteration must consider *even more fundamentally different* ways the two parameters could interact or represent psychological processes to create truly distinct and separable influences. Could one parameter affect choice consistency (like a temperature parameter) while the other scales value? Could parameters influence the weighing of different attributes? Could the model structure involve comparison of utility of accepting vs. rejecting? Continue to focus intently on how the functional form ensures that varying `beta_value` has a measurably different effect on the utility curve across offers than varying `beta_unfairness`, and that these effects are distinct enough to be estimated independently with high reliability.\n\nAvailable Data Variables:\n- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.\n(Note: Use `split_perc_self` for the participant's proposed percentage share percentage).\n\nPlease think through this step by step, then provide your model specification and variable descriptions. Remember that robust parameter identifiability for *both* learnable parameters (>= 0.7 recovery for both) is the absolute priority. Your goal is to find a structure where both parameters' influences are clearly distinguishable and interact in a way that allows for reliable estimation for *both* parameters, ideally leading to improved fit metrics (BIC and accuracy) as a result of capturing the underlying process more accurately.\n\nPlease think through this step by step, then provide your model specification and variable descriptions.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<MODEL>\nsum_tokens = token_self + token_opp\nfair_perc_self_calc = If(sum_tokens == 0, 50.0, (token_self / sum_tokens) * 100.0)\nloss_below_fair = Max(0.0, fair_perc_self_calc - split_perc_self)\nU_accept = beta_value * split_perc_self - beta_unfairness * (Exp(loss_below_fair) - 1.0)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"Proposed share for the participant in percentage.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"sum_tokens\": {\n      \"description\": \"Total number of tokens found by both participant and opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fair_perc_self_calc\": {\n      \"description\": \"Calculated fair percentage for the participant based on token contributions.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"loss_below_fair\": {\n      \"description\": \"The extent to which the proposed percentage for the participant is below their calculated fair percentage, capped at 0 if not below fair.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_value\": {\n      \"description\": \"Learnable parameter representing the sensitivity to the proposed percentage share (gain).\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_unfairness\": {\n      \"description\": \"Learnable parameter representing the strength of the exponential penalty for offers below the fair share.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U_accept\": {\n      \"description\": \"Utility of accepting the proposed offer.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"accept\": {\n      \"description\": \"Whether the participant accepted (1) or rejected (0) the offer.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nAn additive utility model for responder decisions. The utility of accepting is calculated as the sum of a linear term representing the value of the proposed share, scaled by beta_value, and a penalty term representing the aversion to unfairness. The penalty is an exponential function of the difference between the fair share based on contributions and the proposed share, scaled by beta_unfairness. This structure, combining a linear gain term with an exponential penalty term, is designed to enhance parameter identifiability by creating distinct functional dependencies on the two learnable parameters, beta_value and beta_unfairness, compared to previous divisive model structures.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['beta_value', 'beta_unfairness']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                sum_tokens = token_self + token_opp\nfair_perc_self_calc = If(sum_tokens == 0, 50.0, (token_self / sum_tokens) * 100.0)\nloss_below_fair = Max(0.0, fair_perc_self_calc - split_perc_self)\nU_accept = beta_value * split_perc_self - beta_unfairness * (Exp(loss_below_fair) - 1.0)\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"Proposed share for the participant in percentage.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"sum_tokens\": {\n      \"description\": \"Total number of tokens found by both participant and opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fair_perc_self_calc\": {\n      \"description\": \"Calculated fair percentage for the participant based on token contributions.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"loss_below_fair\": {\n      \"description\": \"The extent to which the proposed percentage for the participant is below their calculated fair percentage, capped at 0 if not below fair.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_value\": {\n      \"description\": \"Learnable parameter representing the sensitivity to the proposed percentage share (gain).\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_unfairness\": {\n      \"description\": \"Learnable parameter representing the strength of the exponential penalty for offers below the fair share.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U_accept\": {\n      \"description\": \"Utility of accepting the proposed offer.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"accept\": {\n      \"description\": \"Whether the participant accepted (1) or rejected (0) the offer.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, beta_value=1, beta_unfairness=1):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        split_perc_self = trial.get(\"splitperc_self\", 0)\n\n        sum_tokens = token_self + token_opp\n        if sum_tokens == 0:\n            fair_perc_self_calc = 50.0\n        else:\n            fair_perc_self_calc = (token_self / sum_tokens) * 100.0\n\n        loss_below_fair = max(0.0, fair_perc_self_calc - split_perc_self)\n        U_accept = beta_value * split_perc_self - beta_unfairness * (math.exp(loss_below_fair) - 1.0)\n\n        model_predictions.append(U_accept)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n",
      "timestamp": 1746103890.669593
    }
  ],
  "learnable_parameters": {
    "beta_value": {
      "description": "Learnable parameter representing the sensitivity to the proposed percentage share (gain).",
      "range": {
        "min": 0.0,
        "max": 100.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta_unfairness": {
      "description": "Learnable parameter representing the strength of the exponential penalty for offers below the fair share.",
      "range": {
        "min": 0.0,
        "max": 100.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "sum_tokens = token_self + token_opp\nfair_perc_self_calc = If(sum_tokens == 0, 50.0, (token_self / sum_tokens) * 100.0)\nloss_below_fair = Max(0.0, fair_perc_self_calc - split_perc_self)\nU_accept = beta_value * split_perc_self - beta_unfairness * (Exp(loss_below_fair) - 1.0)",
  "variable_descriptions": {
    "token_self": {
      "description": "Number of tokens found by the participant.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "split_perc_self": {
      "description": "Proposed share for the participant in percentage.",
      "range": {
        "min": 0.0,
        "max": 100.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "sum_tokens": {
      "description": "Total number of tokens found by both participant and opponent.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "fair_perc_self_calc": {
      "description": "Calculated fair percentage for the participant based on token contributions.",
      "range": {
        "min": 0.0,
        "max": 100.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "loss_below_fair": {
      "description": "The extent to which the proposed percentage for the participant is below their calculated fair percentage, capped at 0 if not below fair.",
      "range": {
        "min": 0.0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "beta_value": {
      "description": "Learnable parameter representing the sensitivity to the proposed percentage share (gain).",
      "range": {
        "min": 0.0,
        "max": 100.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta_unfairness": {
      "description": "Learnable parameter representing the strength of the exponential penalty for offers below the fair share.",
      "range": {
        "min": 0.0,
        "max": 100.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "U_accept": {
      "description": "Utility of accepting the proposed offer.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "accept": {
      "description": "Whether the participant accepted (1) or rejected (0) the offer.",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    }
  },
  "model_summary": "An additive utility model for responder decisions. The utility of accepting is calculated as the sum of a linear term representing the value of the proposed share, scaled by beta_value, and a penalty term representing the aversion to unfairness. The penalty is an exponential function of the difference between the fair share based on contributions and the proposed share, scaled by beta_unfairness. This structure, combining a linear gain term with an exponential penalty term, is designed to enhance parameter identifiability by creating distinct functional dependencies on the two learnable parameters, beta_value and beta_unfairness, compared to previous divisive model structures.",
  "target_variable": "accept",
  "full_reasoning": "<MODEL>\nsum_tokens = token_self + token_opp\nfair_perc_self_calc = If(sum_tokens == 0, 50.0, (token_self / sum_tokens) * 100.0)\nloss_below_fair = Max(0.0, fair_perc_self_calc - split_perc_self)\nU_accept = beta_value * split_perc_self - beta_unfairness * (Exp(loss_below_fair) - 1.0)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"Proposed share for the participant in percentage.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"sum_tokens\": {\n      \"description\": \"Total number of tokens found by both participant and opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fair_perc_self_calc\": {\n      \"description\": \"Calculated fair percentage for the participant based on token contributions.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"loss_below_fair\": {\n      \"description\": \"The extent to which the proposed percentage for the participant is below their calculated fair percentage, capped at 0 if not below fair.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_value\": {\n      \"description\": \"Learnable parameter representing the sensitivity to the proposed percentage share (gain).\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_unfairness\": {\n      \"description\": \"Learnable parameter representing the strength of the exponential penalty for offers below the fair share.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U_accept\": {\n      \"description\": \"Utility of accepting the proposed offer.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"accept\": {\n      \"description\": \"Whether the participant accepted (1) or rejected (0) the offer.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nAn additive utility model for responder decisions. The utility of accepting is calculated as the sum of a linear term representing the value of the proposed share, scaled by beta_value, and a penalty term representing the aversion to unfairness. The penalty is an exponential function of the difference between the fair share based on contributions and the proposed share, scaled by beta_unfairness. This structure, combining a linear gain term with an exponential penalty term, is designed to enhance parameter identifiability by creating distinct functional dependencies on the two learnable parameters, beta_value and beta_unfairness, compared to previous divisive model structures.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: sum_tokens = token_self + token_opp\nfair_perc_self_calc = If(sum_tokens == 0, 50.0, (token_self / sum_tokens) * 100.0)\nloss_below_fair = Max(0.0, fair_perc_self_calc - split_perc_self)\nU_accept = beta_value * split_perc_self - beta_unfairness * (Exp(loss_below_fair) - 1.0)\nSummary: An additive utility model for responder decisions. The utility of accepting is calculated as the sum of a linear term representing the value of the proposed share, scaled by beta_value, and a penalty term representing the aversion to unfairness. The penalty is an exponential function of the difference between the fair share based on contributions and the proposed share, scaled by beta_unfairness. This structure, combining a linear gain term with an exponential penalty term, is designed to enhance parameter identifiability by creating distinct functional dependencies on the two learnable parameters, beta_value and beta_unfairness, compared to previous divisive model structures.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, beta_value=1, beta_unfairness=1):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        split_perc_self = trial.get(\"splitperc_self\", 0)\n\n        sum_tokens = token_self + token_opp\n        if sum_tokens == 0:\n            fair_perc_self_calc = 50.0\n        else:\n            fair_perc_self_calc = (token_self / sum_tokens) * 100.0\n\n        loss_below_fair = max(0.0, fair_perc_self_calc - split_perc_self)\n        U_accept = beta_value * split_perc_self - beta_unfairness * (math.exp(loss_below_fair) - 1.0)\n\n        model_predictions.append(U_accept)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.5659340659340659,
  "group_accuracies": {
    "Control": 0.5193798449612403,
    "Cocaine": 0.6076388888888888
  },
  "group_parameter_averages": {
    "Control": {
      "beta_value": 61.20283243087879,
      "beta_unfairness": 36.73479499376563
    },
    "Cocaine": {
      "beta_value": 58.2865124672424,
      "beta_unfairness": 46.79375454698322
    }
  },
  "fitting_results": [
    {
      "beta_value": 65.31530573693912,
      "beta_unfairness": 37.85504115517564,
      "success": true,
      "log_likelihood": -115.12925464660228,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 36.104827590800625,
      "beta_unfairness": 38.02528686814068,
      "success": true,
      "log_likelihood": -276.3102111568856,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 80.19196118391804,
      "beta_unfairness": 63.22122380363181,
      "success": true,
      "log_likelihood": -299.33606208692606,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 83.60326934155555,
      "beta_unfairness": 18.324336805674236,
      "success": true,
      "log_likelihood": -207.23265836676424,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 86.39893971885527,
      "beta_unfairness": 11.945107993329385,
      "success": true,
      "log_likelihood": -184.2068074367237,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 91.62780991086312,
      "beta_unfairness": 18.902508169526257,
      "success": true,
      "log_likelihood": -345.38776394700693,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 17.464311401612107,
      "beta_unfairness": 0.7988124094304161,
      "success": true,
      "log_likelihood": -644.723826037533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.2222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 97.17574191376366,
      "beta_unfairness": 26.338906540853014,
      "success": true,
      "log_likelihood": -414.46531673712843,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 97.59993280684415,
      "beta_unfairness": 44.00422672474,
      "success": true,
      "log_likelihood": -690.775527897614,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.16666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 90.689806075484,
      "beta_unfairness": 53.400898698553924,
      "success": true,
      "log_likelihood": -184.20680743672364,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 62.125590072632754,
      "beta_unfairness": 49.3435338855648,
      "success": true,
      "log_likelihood": -230.2585092968047,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 40.21377761070508,
      "beta_unfairness": 97.80536444563413,
      "success": true,
      "log_likelihood": -92.10340371656179,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 50.26888777480502,
      "beta_unfairness": 39.668817891362686,
      "success": true,
      "log_likelihood": -207.23265836676424,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 78.2522276379043,
      "beta_unfairness": 42.081611427940736,
      "success": true,
      "log_likelihood": -690.775527897614,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.16666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 78.62835137426221,
      "beta_unfairness": 81.31758522401265,
      "success": true,
      "log_likelihood": -690.7755278976139,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.16666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 55.33118511673916,
      "beta_unfairness": 51.82219183063085,
      "success": true,
      "log_likelihood": -690.775527897614,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.16666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 29.2065327242079,
      "beta_unfairness": 22.138874173944235,
      "success": true,
      "log_likelihood": -690.775527897614,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.16666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 95.70985960630841,
      "beta_unfairness": 28.068751669349158,
      "success": true,
      "log_likelihood": -575.6462732474117,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 70.83733521776873,
      "beta_unfairness": 12.111909811019483,
      "success": true,
      "log_likelihood": -552.6204223173711,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3333333333333333,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 57.72993141172517,
      "beta_unfairness": 22.729706145922957,
      "success": true,
      "log_likelihood": -690.775527897614,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.16666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 42.433014004393634,
      "beta_unfairness": 14.163057803194368,
      "success": true,
      "log_likelihood": -322.3619130169665,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 25.499004173019813,
      "beta_unfairness": 23.36817295037983,
      "success": true,
      "log_likelihood": -575.6462732474116,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 33.08161907580529,
      "beta_unfairness": 12.311765386023199,
      "success": true,
      "log_likelihood": -253.2843602268451,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 58.287548006795596,
      "beta_unfairness": 47.68186668430972,
      "success": true,
      "log_likelihood": -345.387763947007,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 38.361712365398795,
      "beta_unfairness": 28.12218558430597,
      "success": true,
      "log_likelihood": -276.31021115688566,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 79.6682887237065,
      "beta_unfairness": 54.32144907564296,
      "success": true,
      "log_likelihood": -345.387763947007,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 82.70543669672371,
      "beta_unfairness": 21.738640797976604,
      "success": true,
      "log_likelihood": -322.3619130169665,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 30.35327607216184,
      "beta_unfairness": 15.142489058016784,
      "success": true,
      "log_likelihood": -92.1034037165618,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 62.92970546690695,
      "beta_unfairness": 11.07106210539287,
      "success": true,
      "log_likelihood": -552.6204223173712,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3333333333333333,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 79.97938342479537,
      "beta_unfairness": 55.65230756417756,
      "success": true,
      "log_likelihood": -506.5687204572903,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 28.204800965342947,
      "beta_unfairness": 20.820597995580425,
      "success": true,
      "log_likelihood": -690.7755278976139,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.16666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 26.035221614475713,
      "beta_unfairness": 45.47135387333011,
      "success": true,
      "log_likelihood": -69.07755278652134,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 56.620609458213636,
      "beta_unfairness": 48.24542459915943,
      "success": true,
      "log_likelihood": -299.3360620869261,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 68.0945720550875,
      "beta_unfairness": 33.85891839942769,
      "success": true,
      "log_likelihood": -184.2068074367237,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 58.03553835101771,
      "beta_unfairness": 83.10145497989842,
      "success": true,
      "log_likelihood": -736.8272297576948,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.1111111111111111,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 56.367854566481576,
      "beta_unfairness": 46.02662390673166,
      "success": true,
      "log_likelihood": -391.4394658070879,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 95.62626890994912,
      "beta_unfairness": 62.980631852349,
      "success": true,
      "log_likelihood": -437.49116766716884,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 58.95269872338539,
      "beta_unfairness": 11.749871934357081,
      "success": true,
      "log_likelihood": -230.25850929680468,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 81.81432681060633,
      "beta_unfairness": 1.4820063344353485,
      "success": true,
      "log_likelihood": -368.41361487704745,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 88.65826060727262,
      "beta_unfairness": 19.951199934453257,
      "success": true,
      "log_likelihood": -575.6462732474115,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 3.2242177888570422,
      "beta_unfairness": 75.65741717964961,
      "success": true,
      "log_likelihood": -414.46531673712843,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 84.68750316999422,
      "beta_unfairness": 86.36798762492569,
      "success": true,
      "log_likelihood": -46.051701856480946,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 27.625349269702305,
      "beta_unfairness": 0.4050034337676478,
      "success": true,
      "log_likelihood": -621.6979751074925,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.25,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 94.98805807334011,
      "beta_unfairness": 32.6188077504569,
      "success": true,
      "log_likelihood": -322.3619130169666,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 86.69258587409696,
      "beta_unfairness": 11.627063163960472,
      "success": true,
      "log_likelihood": -322.36191301696647,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 79.6173946809948,
      "beta_unfairness": 54.390176111375474,
      "success": true,
      "log_likelihood": -460.51701859720936,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 84.48975328325085,
      "beta_unfairness": 83.0099912281866,
      "success": true,
      "log_likelihood": -299.336062086926,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 57.87992421089325,
      "beta_unfairness": 77.72889635618435,
      "success": true,
      "log_likelihood": -230.25850929680468,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 67.50429733501612,
      "beta_unfairness": 48.48338074510371,
      "success": true,
      "log_likelihood": -207.23265836676427,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 47.38043680814614,
      "beta_unfairness": 58.18294656138712,
      "success": true,
      "log_likelihood": -391.43946580708797,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 54.67839480222458,
      "beta_unfairness": 7.990004734956491,
      "success": true,
      "log_likelihood": -391.4394658070879,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 36.001600231156914,
      "beta_unfairness": 88.1539841034618,
      "success": true,
      "log_likelihood": -115.12925464660226,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 76.64264206102129,
      "beta_unfairness": 9.218681029917242,
      "success": true,
      "log_likelihood": -299.33606208692606,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 37.40874085856321,
      "beta_unfairness": 4.00060119290282,
      "success": true,
      "log_likelihood": -391.43946580708797,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 90.80159285384948,
      "beta_unfairness": 40.493998402094476,
      "success": true,
      "log_likelihood": -184.2068074367237,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 84.0408096935536,
      "beta_unfairness": 55.275050466291056,
      "success": true,
      "log_likelihood": -138.1551055766428,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 56.577517024413225,
      "beta_unfairness": 93.61943396057808,
      "success": true,
      "log_likelihood": -138.1551055766428,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 77.92339577901393,
      "beta_unfairness": 46.64574988323531,
      "success": true,
      "log_likelihood": -598.6721241774521,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.2777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 37.185488334157725,
      "beta_unfairness": 91.74254384281942,
      "success": true,
      "log_likelihood": -92.10340371656186,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 96.60327273117834,
      "beta_unfairness": 20.842922697469092,
      "success": true,
      "log_likelihood": -483.5428695272499,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 50.13623112251644,
      "beta_unfairness": 19.63013187333803,
      "success": true,
      "log_likelihood": -414.4653167371284,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 74.15117421283206,
      "beta_unfairness": 46.464497527368174,
      "success": true,
      "log_likelihood": -276.3102111568857,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 63.491932591327284,
      "beta_unfairness": 37.79636234978905,
      "success": true,
      "log_likelihood": -115.12925464660232,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 21.674625723141773,
      "beta_unfairness": 56.94602340624615,
      "success": true,
      "log_likelihood": -322.3619130169666,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 88.68151283970107,
      "beta_unfairness": 52.388077073624494,
      "success": true,
      "log_likelihood": -138.15510557664288,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 89.85671983083063,
      "beta_unfairness": 0.19670268726384346,
      "success": true,
      "log_likelihood": -253.28436022684525,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 74.38996610726058,
      "beta_unfairness": 40.81033528216154,
      "success": true,
      "log_likelihood": -621.6979751074925,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.25,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 72.61545630155904,
      "beta_unfairness": 25.65780739753012,
      "success": true,
      "log_likelihood": -575.6462732474115,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 12.740062490456083,
      "beta_unfairness": 0.040795315524189135,
      "success": true,
      "log_likelihood": -299.33606208692606,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 26.61134080390767,
      "beta_unfairness": 18.962557175011728,
      "success": true,
      "log_likelihood": -621.6979751074925,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.25,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 10.72687864482742,
      "beta_unfairness": 88.16077334993778,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.004898429484373536,
      "beta_unfairness": 38.73970686257944,
      "success": true,
      "log_likelihood": -71.82569904235123,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 93.5155355754391,
      "beta_unfairness": 88.19539633269989,
      "success": true,
      "log_likelihood": -345.387763947007,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 12.678783404089522,
      "beta_unfairness": 29.40650249261958,
      "success": true,
      "log_likelihood": -552.6204223173712,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3333333333333333,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 63.779166326875966,
      "beta_unfairness": 70.78283290049954,
      "success": true,
      "log_likelihood": -346.7740583079277,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 51.20967918463549,
      "beta_unfairness": 29.02701822785395,
      "success": true,
      "log_likelihood": -437.49116766716884,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 46.533732402470804,
      "beta_unfairness": 84.52352709907765,
      "success": true,
      "log_likelihood": -690.775527897614,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.16666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 11.386124237094265,
      "beta_unfairness": 98.13388531516922,
      "success": true,
      "log_likelihood": -92.10340371656179,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 51.75440524378172,
      "beta_unfairness": 56.29907175537685,
      "success": true,
      "log_likelihood": -368.4136148770475,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 0.004898825607591037,
      "beta_unfairness": 16.57872087227007,
      "success": true,
      "log_likelihood": -25.773997181979635,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 98.83706249981799,
      "beta_unfairness": 92.48405103438087,
      "success": true,
      "log_likelihood": -345.38776394700693,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 99.90278283061625,
      "beta_unfairness": 21.03516503735763,
      "success": true,
      "log_likelihood": -621.6979751074927,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.25,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 65.50539675501021,
      "beta_unfairness": 95.47523903670478,
      "success": true,
      "log_likelihood": -138.15510557664277,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 71.40795783378465,
      "beta_unfairness": 3.2290567212912773,
      "success": true,
      "log_likelihood": -276.3102111568856,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 63.258671848931215,
      "beta_unfairness": 27.98662736515801,
      "success": true,
      "log_likelihood": -368.4136148770475,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 22.437480389079667,
      "beta_unfairness": 36.58942060718039,
      "success": true,
      "log_likelihood": -46.05170185648092,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 32.19377822335534,
      "beta_unfairness": 30.430751549818435,
      "success": true,
      "log_likelihood": -437.49116766716895,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 96.53471420472765,
      "beta_unfairness": 95.05007629542554,
      "success": true,
      "log_likelihood": -138.1551055766427,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 60.77467300342194,
      "beta_unfairness": 50.438355905898206,
      "success": true,
      "log_likelihood": -644.7238260375331,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.2222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 64.90685124180519,
      "beta_unfairness": 7.327175174366374,
      "success": true,
      "log_likelihood": -299.33606208692595,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 39.634200664375854,
      "beta_unfairness": 63.28934200129156,
      "success": true,
      "log_likelihood": -483.5428695272498,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "beta_value": {
        "r": 0.3047659490534733,
        "p": 0.0020489954692536495
      },
      "beta_unfairness": {
        "r": 0.2814050736635516,
        "p": 0.004565042699611749
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 722.8909016488223,
  "bic_Control": 803.9685770301822,
  "bic_Cocaine": 650.2588174530207,
  "bic_results": {
    "average_bic": 722.8909016488223,
    "individual_bics": [
      237.42554717011677,
      559.7874601906834,
      605.8391620507643,
      421.6323546104407,
      375.5806527503596,
      697.9425657709261,
      1296.614689951978,
      836.0976713511691,
      1388.7180936721402,
      375.5806527503595,
      467.6840564705216,
      191.3738453100358,
      421.6323546104407,
      1388.7180936721402,
      1388.71809367214,
      1388.7180936721402,
      1388.7180936721402,
      1158.4595843717357,
      1112.4078825116544,
      1388.7180936721402,
      651.8908639108453,
      1158.4595843717354,
      513.7357583306025,
      697.9425657709262,
      559.7874601906835,
      697.9425657709262,
      651.8908639108453,
      191.37384531003582,
      1112.4078825116546,
      1020.3044787914928,
      1388.71809367214,
      145.3221434499549,
      605.8391620507645,
      375.5806527503596,
      1480.8214973923018,
      790.045969491088,
      882.1493732112499,
      467.68405647052157,
      743.9942676310071,
      1158.4595843717352,
      836.0976713511691,
      99.27044158987411,
      1250.5629880918973,
      651.8908639108454,
      651.8908639108452,
      928.2010750713309,
      605.8391620507642,
      467.68405647052157,
      421.63235461044076,
      790.0459694910882,
      790.045969491088,
      237.42554717011674,
      605.8391620507643,
      790.0459694910882,
      375.5806527503596,
      283.4772490301978,
      283.4772490301978,
      1204.5112862318165,
      191.37384531003593,
      974.252776931412,
      836.097671351169,
      559.7874601906836,
      237.42554717011686,
      651.8908639108454,
      283.477249030198,
      513.7357583306027,
      1250.5629880918973,
      1158.4595843717352,
      605.8391620507643,
      1250.5629880918973,
      7.167037869712219,
      150.81843596161468,
      697.9425657709262,
      1112.4078825116546,
      700.7151544927676,
      882.1493732112499,
      1388.7180936721402,
      191.3738453100358,
      743.9942676310072,
      58.71503224087149,
      697.9425657709261,
      1250.5629880918975,
      283.47724903019775,
      559.7874601906834,
      743.9942676310072,
      99.27044158987405,
      882.1493732112501,
      283.47724903019764,
      1296.6146899519783,
      605.8391620507641,
      974.2527769314119
    ],
    "group_enabled": true,
    "group_bics": {
      "Control": [
        237.42554717011677,
        559.7874601906834,
        605.8391620507643,
        421.6323546104407,
        375.5806527503596,
        697.9425657709261,
        1296.614689951978,
        836.0976713511691,
        1388.7180936721402,
        375.5806527503595,
        467.6840564705216,
        191.3738453100358,
        421.6323546104407,
        1388.7180936721402,
        1388.71809367214,
        1388.7180936721402,
        1388.7180936721402,
        1158.4595843717357,
        1112.4078825116544,
        1388.7180936721402,
        651.8908639108453,
        1158.4595843717354,
        513.7357583306025,
        697.9425657709262,
        559.7874601906835,
        697.9425657709262,
        651.8908639108453,
        191.37384531003582,
        1112.4078825116546,
        1020.3044787914928,
        1388.71809367214,
        145.3221434499549,
        605.8391620507645,
        375.5806527503596,
        1480.8214973923018,
        790.045969491088,
        882.1493732112499,
        467.68405647052157,
        743.9942676310071,
        1158.4595843717352,
        836.0976713511691,
        99.27044158987411,
        1250.5629880918973
      ],
      "Cocaine": [
        651.8908639108454,
        651.8908639108452,
        928.2010750713309,
        605.8391620507642,
        467.68405647052157,
        421.63235461044076,
        790.0459694910882,
        790.045969491088,
        237.42554717011674,
        605.8391620507643,
        790.0459694910882,
        375.5806527503596,
        283.4772490301978,
        283.4772490301978,
        1204.5112862318165,
        191.37384531003593,
        974.252776931412,
        836.097671351169,
        559.7874601906836,
        237.42554717011686,
        651.8908639108454,
        283.477249030198,
        513.7357583306027,
        1250.5629880918973,
        1158.4595843717352,
        605.8391620507643,
        1250.5629880918973,
        7.167037869712219,
        150.81843596161468,
        697.9425657709262,
        1112.4078825116546,
        700.7151544927676,
        882.1493732112499,
        1388.7180936721402,
        191.3738453100358,
        743.9942676310072,
        58.71503224087149,
        697.9425657709261,
        1250.5629880918975,
        283.47724903019775,
        559.7874601906834,
        743.9942676310072,
        99.27044158987405,
        882.1493732112501,
        283.47724903019764,
        1296.6146899519783,
        605.8391620507641,
        974.2527769314119
      ]
    },
    "num_parameters": 2,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- beta_value: r = 0.305\n- beta_unfairness: r = 0.281",
  "previous_models": [
    "Specification: sum_tokens = token_self + token_opp\nfair_perc_self_calc = If(sum_tokens == 0, 50.0, (token_self / sum_tokens) * 100.0)\nloss_below_fair = Max(0.0, fair_perc_self_calc - split_perc_self)\nU_accept = beta_value * split_perc_self - beta_unfairness * (Exp(loss_below_fair) - 1.0)\nSummary: An additive utility model for responder decisions. The utility of accepting is calculated as the sum of a linear term representing the value of the proposed share, scaled by beta_value, and a penalty term representing the aversion to unfairness. The penalty is an exponential function of the difference between the fair share based on contributions and the proposed share, scaled by beta_unfairness. This structure, combining a linear gain term with an exponential penalty term, is designed to enhance parameter identifiability by creating distinct functional dependencies on the two learnable parameters, beta_value and beta_unfairness, compared to previous divisive model structures.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 722.8909016488223\nOverall Accuracy: 0.5659\nGroup Accuracies:\n- Control: 0.5194\n- Cocaine: 0.6076\n\nParameter Recovery:\n- beta_value: r = 0.305\n- beta_unfairness: r = 0.281"
  ]
}