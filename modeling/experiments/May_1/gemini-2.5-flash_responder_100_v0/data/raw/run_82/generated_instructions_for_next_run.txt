Okay, here are the improved instructions for the next run (Run 83 of 100), based on the results of recent attempts.

Task Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable "token_self". The other variable, "token_opp", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.

Again, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.

Note that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same "fairness".

Below is the description of each variable in the dataset:

trial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]
trial_role = the role of the participant [1 = responder, 2 = proposer]
token_opp = number of tokens found by the opponent
token_self = number of tokens found by the participant
combined_earning = amount of money earned in total (note that each token found is £3)
split_opp = the proposed share of the opponent (in £)
split_self = the proposed share for the participant (in £)
splitperc_opp = same but in %
split_perc_self = same but in %
accept = whether the participant responded accept (1) or reject (0)
accepted_amount = if accepted, what is the amount gain (in £)
accepted_perc = same as above but in %
proposed_perc = when participant is the proposer, what is the % proposed to the opponent
proposed_amount = when participant is the proposer, what is the amount proposed to the opponent (in £)

Desired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified).

The model should:
1. Predict only responder behavior (should target "accept = whether the participant responded accept (1) or reject (0)")
2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.
3. Be applicable to the dataset given within the task description (i.e. the model should be able to be run using only the provided dataset structure).
4. Predict utility, where less than 0 is less than 50% likely.

For any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).

Then, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.
For example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal.

Use clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied.

{
  "variables": {
    "variable_name": {
      "description": "Clear description",
      "range": {
        "min": value,
        "max": value,
        "inclusive_min": boolean,
        "inclusive_max": boolean
      },
      "distribution": {
        "type": "distribution type",
        "parameters": {}
      },
      "learnable": boolean,
      "source": "learnable/data/calculated"
    }
  }
}
</VARIABLES>

Example #1:
<EXAMPLE>
(Model of a Random Choice Task):\\
Let me think through this step by step...
[your reasoning here]

<MODEL>
U_i = beta + epsilon*E + eta*N
</MODEL>

<VARIABLES>
{
  "variables": {
    "U_i": {
      "description": "Utility of choosing action i",
      "range": {
        "min": "-inf",
        "max": "inf"
      },
      "learnable": false,
      "source": "calculated"
    },\\
    "beta": {
      "description": "Base tendency parameter (inherent preference)",
      "range": {
        "min": 0,
        "max": 1
      },
      "learnable": true,
      "source": "learnable"
    },\\
    "epsilon": {
      "description": "Environmental sensitivity parameter",
      "range": {
        "min": "-inf",
        "max": "inf"
      },
      "learnable": true,
      "source": "learnable"
    },\\
    "E": {
      "description": "Environmental cue value",
      "range": {
        "min": "-inf",
        "max": "inf"
      },
      "learnable": false,\\
      "source": "data"
    },\\
    "eta": {
      "description": "Noise parameter",
      "range": {
        "min": 0,
        "max": 1,
        "exclusive_max": true
      },\\
      "learnable": false,
      "source": "data"
    },\\
    "N": {
      "description": "Random noise drawn from normal distribution N(0,1)",
      "distribution": {
        "type": "normal",
        "mean": 0,
        "std": 1
      },\\
      "learnable": false,
      "source": "calculated"
    }
  }
}
</VARIABLES>
<SUMMARY>
A linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (β) constrained to [0,1] and an unconstrained environmental sensitivity parameter (ε). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.
</SUMMARY>
</EXAMPLE>

Please be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.

The parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.

Model Type:
Your model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.

Instructions: Okay, here are the improved instructions for the next run (Run 83 of 100), based on the results of recent attempts.

The additive model with a logarithmic gain and linear penalty tested in the previous run (Run 82) yielded a high BIC (448.66) and poor parameter recovery for both learnable parameters (`beta_value` r=0.315, `beta_unfairness` r=0.431). This indicates that this specific additive structure, despite achieving decent accuracy, failed to adequately fit the data and did not resolve the persistent parameter identifiability issue for *both* parameters simultaneously. This reinforces the observation from previous attempts (both divisive and additive structures) that simply changing the non-linear function applied to 'gain' or 'penalty' within these standard structures has not achieved the required joint parameter recovery (>= 0.7 for all learnable parameters).

The **unwavering primary objective remains achieving parameter recovery >= 0.7 for *all* learnable parameters**. A model structure that allows for reliable estimation of *all* its parameters is essential for meaningful interpretation of individual differences and group effects (like the impact of cocaine). We must continue to explore structures where the influences of *both* `beta_value` and `beta_unfairness` are mathematically separable enough for reliable joint estimation.

Given the failure of previous attempts, including Run 82, we need to explore a model structure that introduces a *different kind of relationship* between the gain, the fairness perception, and the parameters than previously tested additive or simple divisive forms. Instead of one parameter scaling a gain term and the other scaling a penalty term (be it additive or divisive in the denominator), let's consider a structure where utility is based on the absolute offer value *and* the offer value relative to fairness, with parameters scaling these distinct components.

For Run 83, we will test an additive model where the utility is a combination of a term based on the *absolute proposed percentage* for the participant (`split_perc_self`) and a term based on the *relative fairness* of the offer (`split_perc_self` relative to `fair_perc_self_calc`).

Proposed Model Structure: An additive utility model where the utility of accepting (`U_accept`) is calculated as a linear function of the participant's proposed percentage (`split_perc_self`), scaled by `beta_value`, *plus* a linear function of the deviation from *relative fairness* (`relative_fairness - 1.0`), scaled by `beta_unfairness`.

Here are the calculation steps:
Calculate `sum_tokens = token_self + token_opp`.
Calculate `fair_perc_self_calc` handling the `sum_tokens == 0` case (defaulting to 50.0), using `token_self` and `token_opp` from the data.
Calculate `relative_fairness = split_perc_self / fair_perc_self_calc`. This represents the proposed share as a ratio of the calculated fair share. This term will be > 1 for offers above fair, = 1 for fair offers, and < 1 for offers below fair. Note: Since `fair_perc_self_calc` defaults to 50.0 when `sum_tokens` is 0, and `token_self`, `token_opp` are non-negative, `fair_perc_self_calc` should always be >= 0, and only 0 if `token_self == 0` and `sum_tokens > 0` and `token_opp == 0`, which implies `sum_tokens == 0`, handled by the default. So `fair_perc_self_calc` will always be >= 0, and > 0 unless both token_self and token_opp are 0. However, the calculation explicitly handles `sum_tokens == 0` resulting in 50.0, so division by zero should not occur in practice assuming valid token counts. If `split_perc_self` is 0, `relative_fairness` will be 0.
Calculate the utility: `U_accept = beta_value * split_perc_self + beta_unfairness * (relative_fairness - 1.0)`.
In this structure, `beta_value` represents the sensitivity to the absolute percentage value of the proposed share, while `beta_unfairness` represents the sensitivity to how the proposed share compares *relatively* to the fair share (deviation from a ratio of 1). The term `(relative_fairness - 1.0)` is negative for unfair offers, zero for fair offers, and positive for offers above fair.

The hypothesis is that this specific additive combination, scaling a linear term based on the absolute offer percentage (`split_perc_self`) with `beta_value` and scaling a term based on the *relative* deviation from fairness (`relative_fairness - 1.0`) with `beta_unfairness`, will create mathematically distinct and separable influence profiles for the two parameters across different offers. This structural difference, moving away from simple gain/penalty formulations, is intended to improve robust parameter identifiability for *both* parameters, addressing the failures seen in previous, more correlated model structures, and hopefully leading to better fit metrics as a result.

Design the model using this new additive structure combining absolute linear gain and relative fairness deviation: `U_accept = beta_value * split_perc_self + beta_unfairness * (relative_fairness - 1.0)`. Remember to calculate intermediate variables (`sum_tokens`, `fair_perc_self_calc`, `relative_fairness`) before the final `U_accept`. Use clear mathematical notation within the <MODEL> tags (only the formula). Use `IF` for the conditional calculation of `fair_perc_self_calc`.

Focus on clearly defining all intermediate terms and articulating in the summary how this specific additive structure, by combining a term scaled by `beta_value` based on the absolute percentage with a term scaled by `beta_unfairness` based on the relative deviation from fairness, is specifically intended to improve robust parameter identifiability for *both* parameters by creating mathematically distinct and separable influence profiles compared to previous models.

*   **Key Inputs & Calculated Variables:** Use `split_perc_self`, `token_self`, `token_opp` as data variables. Calculate `sum_tokens`, `fair_perc_self_calc` (handling `sum_tokens == 0`), `relative_fairness`, and `U_accept`. Include calculation steps for derived variables *before* the formula for `U_accept`.
*   **Learnable Parameters:** Exactly **2 learnable parameters**: `beta_value` (sensitivity to absolute percentage gain) and `beta_unfairness` (sensitivity to relative fairness deviation). Choose descriptive, Python-safe names. Define clear, generous, finite numerical bounds. Non-negative bounds (e.g., `[0.0, 100.0]` for both) are appropriate. `beta_value` should be non-negative for increasing utility with percentage; `beta_unfairness` non-negative ensures higher relative fairness leads to higher utility. Stick with `[0.0, 100.0]` for both.
*   **Calculated Variables:** Include descriptions for *all* calculated variables used in the model (including `U_accept`, `sum_tokens`, `fair_perc_self_calc`, and `relative_fairness`) with `source: "calculated"`. Include descriptions for all data variables used as inputs (`token_self`, `token_opp`, `split_perc_self`) with `source: "data"`.
*   **Variable Descriptions:** Provide variable descriptions in JSON format between <VARIABLES> tags for *all* variables in the <MODEL> formula. Include source, range (with inclusive flags), distribution (if applicable), and learnable status. Remember variable names must exactly match the model.
*   **Target Variable:** Specify "accept" using <target_variable> tags.
*   **Summary:** Provide a concise summary between <SUMMARY> tags. Describe the model's core idea (additive structure combining absolute percentage gain and relative fairness deviation). Crucially, explain *how* this specific additive structure, combining a term scaled by `beta_value` based on `split_perc_self` and a term scaled by `beta_unfairness` based on `relative_fairness - 1.0`, is specifically intended to improve robust parameter identifiability for *both* parameters by creating mathematically distinct and separable influence profiles compared to previous models.
*   **Think Outside the Box:** Parameter identifiability for *both* parameters simultaneously remains the persistent, difficult challenge. Neither the divisive structures nor the simple additive gain/penalty variations tested have solved this. This new additive structure combining absolute percentage and relative fairness deviation is another attempt to find mathematically separable influences. If this also fails to achieve >= 0.7 recovery for *both* parameters, the next iteration *must* consider even more fundamentally different structural approaches. This could involve models where parameters influence thresholding, decision-making rules (e.g., comparing utility difference to zero), or alternative ways of conceptualizing fairness beyond a single 'loss' or 'ratio' term being linearly or non-linearly scaled. Continue to focus intently on finding a functional form where varying `beta_value` has a clearly distinguishable effect on the utility curve across offers compared to varying `beta_unfairness`, allowing them to be estimated independently with high reliability, which is a prerequisite for better fit metrics.

Available Data Variables:
- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.
(Note: Use `split_perc_self` for the participant's proposed percentage share percentage).

Please think through this step by step, then provide your model specification and variable descriptions. Remember that robust parameter identifiability for *both* learnable parameters (>= 0.7 recovery for both) is the absolute priority. Your goal is to find a structure where both parameters' influences are clearly distinguishable and interact in a way that allows for reliable estimation for *both* parameters, ideally leading to improved fit metrics (BIC and accuracy) as a result of capturing the underlying process more accurately.

Please think through this step by step, then provide your model specification and variable descriptions.