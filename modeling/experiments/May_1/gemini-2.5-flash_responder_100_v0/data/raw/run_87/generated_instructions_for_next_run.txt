Okay, here are the improved instructions for the next run, based on the ongoing efforts to achieve robust parameter identifiability and improved model performance.

Task Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable "token_self". The other variable, "token_opp", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.

Again, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.

Note that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same "fairness".

Below is the description of each variable in the dataset:

trial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]
trial_role = the role of the participant [1 = responder, 2 = proposer]
token_opp = number of tokens found by the opponent
token_self = number of tokens found by the participant
combined_earning = amount of money earned in total (note that each token found is £3)
split_opp = the proposed share of the opponent (in £)
split_self = the proposed share for the participant (in £)
splitperc_opp = same but in %
split_perc_self = same but in %
accept = whether the participant responded accept (1) or reject (0)
accepted_amount = if accepted, what is the amount gain (in £)
accepted_perc = same as above but in %
proposed_perc = when participant is the proposer, what is the % proposed to the opponent
proposed_amount = when participant is the proposer, what is the amount proposed to the opponent (in £)

Desired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified).

The model should:
1. Predict only responder behavior (should target "accept = whether the participant responded accept (1) or reject (0)")
2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.
3. Be applicable to the dataset given within the task description (i.e. the model should be able to be run using only the provided dataset structure).
4. Predict utility, where less than 0 is less than 50% likely.

For any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).

Then, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.
For example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal.

Use clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied.

{
  "variables": {
    "variable_name": {
      "description": "Clear description",
      "range": {
        "min": value,
        "max": value,
        "inclusive_min": boolean,
        "inclusive_max": boolean
      },
      "distribution": {
        "type": "distribution type",
        "parameters": {}
      },
      "learnable": boolean,
      "source": "learnable/data/calculated"
    }
  }
}
</VARIABLES>

Example #1:
<EXAMPLE>
(Model of a Random Choice Task):\\\
Let me think through this step by step...
[your reasoning here]

<MODEL>
U_i = beta + epsilon*E + eta*N
</MODEL>

<VARIABLES>
{
  "variables": {
    "U_i": {
      "description": "Utility of choosing action i",
      "range": {\
        "min": "-inf",
        "max": "inf"
      },\
      "learnable": false,
      "source": "calculated"
    },\\\
    "beta": {
      "description": "Base tendency parameter (inherent preference)",
      "range": {\
        "min": 0,
        "max": 1
      },\
      "learnable": true,
      "source": "learnable"
    },\\\
    "epsilon": {
      "description": "Environmental sensitivity parameter",
      "range": {\
        "min": "-inf",
        "max": "inf"
      },\
      "learnable": true,
      "source": "learnable"
    },\\\
    "E": {
      "description": "Environmental cue value",
      "range": {\
        "min": "-inf",
        "max": "inf"
      },\
      "learnable": false,\\\
      "source": "data"
    },\\\
    "eta": {
      "description": "Noise parameter",
      "range": {\
        "min": 0,
        "max": 1,\
        "exclusive_max": true
      },\\\
      "learnable": false,
      "source": "data"
    },\\\
    "N": {
      "description": "Random noise drawn from normal distribution N(0,1)",
      "distribution": {\
        "type": "normal",
        "mean": 0,
        "std": 1
      },\\\
      "learnable": false,
      "source": "calculated"
    }\
  }\
}\
</VARIABLES>
<SUMMARY>
A linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (β) constrained to [0,1] and an unconstrained environmental sensitivity parameter (ε). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.
</SUMMARY>
</EXAMPLE>

Please be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.

The variable names you choose in your <VARIABLES> section must be used exactly as specified in the <MODEL> formula. Please ensure these names can be used directly in Python code (e.g., avoid Python reserved words). Also, ensure consistency between the variable names in your JSON and the variable names in the provided data description where applicable (e.g., use `split_perc_self` exactly as provided).

Model Type:
Your model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.

Instructions: Okay, here are the improved instructions for the next run (Run 88 of 100).

Previous attempts utilizing simple linear or multiplicative scaling of gains, losses, or deviations from a calculated fair share have consistently struggled to achieve robust parameter identifiability (parameter recovery >= 0.7 for *all* learnable parameters simultaneously). This remains the **unwavering primary objective**. A model structure that allows for reliable estimation of *all* its parameters is essential for meaningful interpretation and overrides achieving a low BIC or high accuracy if recovery fails. We need to find a structure where the influence of the two learnable parameters is sufficiently distinct across trials to be estimated independently with high reliability.

Given the persistent identifiability challenge with simple linear and multiplicative approaches, we must explore a **fundamentally different structural approach** for this run, focusing on alternative non-linear relationships or transformations.

Proposed Model Structure: Let's return to the concept of modeling utility based on the *deviation* of the proposed share from the calculated fair share, explicitly separating the influence of parameters on offers above versus below this fairness reference point. However, instead of linearly scaling these deviations, we will apply a non-linear transformation to their magnitude *before* scaling. Specifically, we will use the natural logarithm of (1 + deviation) to handle zero values gracefully and introduce a different utility curvature for gains and losses.

Here are the calculation steps:
1. Calculate `sum_tokens = token_self + token_opp`.
2. Calculate `fair_perc_self_calc` handling the `sum_tokens == 0` case (defaulting to 50.0), using `token_self` and `token_opp` from the data. Use `IF` for the conditional calculation.
3. Calculate `gain_above_fair = Max(0.0, split_perc_self - fair_perc_self_calc)`. This term is positive if the offer is above the fair share, and 0 otherwise. Use `Max` for this calculation.
4. Calculate `loss_below_fair = Max(0.0, fair_perc_self_calc - split_perc_self)`. This term is positive if the offer is below the fair share, and 0 otherwise. Use `Max` for this calculation.
5. Calculate the utility using an additive structure based on the *logarithm* of these deviations: `U_accept = beta_gain * log(1.0 + gain_above_fair) - beta_loss * log(1.0 + loss_below_fair)`. Use `log` for the natural logarithm.

In this structure, `beta_gain` specifically scales the utility derived from the *logarithm* of the amount the offer is *above* the fair share (plus 1), while `beta_loss` specifically scales the penalty derived from the *logarithm* of the amount the offer is *below* the fair share (plus 1). Since a given offer can only be *either* above or below fair (or exactly fair), these two terms (`log(1.0 + gain_above_fair)` and `log(1.0 + loss_below_fair)`) are mutually exclusive in terms of contributing non-zero values to the sum (one will always be 0 or both will be 0). This design aims to create highly distinct influence profiles for `beta_gain` (affecting utility only when the offer is generous/fair or above, via log-transformed magnitude) and `beta_loss` (affecting utility only when the offer is unfair/below fair, via log-transformed magnitude), thereby improving robust joint parameter identifiability compared to linear scaling.

Design the model using this specific structure: `U_accept = beta_gain * log(1.0 + gain_above_fair) - beta_loss * log(1.0 + loss_below_fair)`. Remember to calculate intermediate variables (`sum_tokens`, `fair_perc_self_calc`, `gain_above_fair`, `loss_below_fair`) before the final `U_accept`. Use clear mathematical notation within the <MODEL> tags (only the formula), using `IF`, `Max`, and `log`.

Focus on clearly defining all intermediate terms and articulating in the summary how this specific additive structure based on log-transformed deviations from fairness, where `beta_gain` scales log(1+gains *above* fairness) and `beta_loss` scales log(1+losses *below* fairness), is specifically intended to improve robust parameter identifiability for *both* parameters by creating mathematically distinct and separable influence profiles tied to different regions relative to the fairness point, mediated by a non-linear transformation.

*   **Key Inputs & Calculated Variables:** Use `split_perc_self`, `token_self`, `token_opp` as data variables. Calculate `sum_tokens`, `fair_perc_self_calc` (handling `sum_tokens == 0`), `gain_above_fair`, `loss_below_fair`, and `U_accept`. Include calculation steps for derived variables *before* the formula for `U_accept`. Use `log` for the natural logarithm.
*   **Learnable Parameters:** Exactly **2 learnable parameters**: `beta_gain` (sensitivity/scaling parameter for log-transformed gains *above* fair share) and `beta_loss` (sensitivity/scaling parameter for log-transformed losses *below* fair share). Choose descriptive, Python-safe names. Define clear, generous, finite numerical bounds.
    *   `beta_gain`: Non-negative bounds, e.g., `[0.0, 10.0]`. Must be >= 0.
    *   `beta_loss`: Non-negative bounds, e.g., `[0.0, 10.0]`. Must be >= 0 to represent aversion to loss scaled by log.
*   **Calculated Variables:** Include descriptions for *all* calculated variables used in the model (including `U_accept`, `sum_tokens`, `fair_perc_self_calc`, `gain_above_fair`, and `loss_below_fair`) with `source: "calculated"`. Include descriptions for all data variables used as inputs (`token_self`, `token_opp`, `split_perc_self`) with `source: "data"` (using `split_perc_self` as specified).
*   **Variable Descriptions:** Provide variable descriptions in JSON format between <VARIABLES> tags for *all* variables in the <MODEL> formula. Include source, range (with inclusive flags), distribution (if applicable), and learnable status. Remember variable names must exactly match the model formula and data descriptions.
*   **Target Variable:** Specify "accept" using <target_variable> tags.
*   **Summary:** Provide a concise summary between <SUMMARY> tags. Describe the model's core idea (utility is based on log-transformed deviations from a calculated fair share, scaled separately for gains above and losses below fairness). Crucially, explain *how* this specific deviation-based structure, where `beta_gain` applies only to log(1+gains >= fairness) and `beta_loss` applies only to log(1+losses < fairness), is specifically intended to improve robust parameter identifiability for *both* parameters by creating mathematically distinct and separable influence profiles tied to different ranges relative to the fairness point, mediated by the log transformation.
*   **Think Outside the Box:** Parameter identifiability for *both* parameters simultaneously remains the persistent, difficult challenge. Simple additive and multiplicative structures have failed. This iteration attempts a specific non-linear transformation (log) of the deviations. If this *still* fails to achieve >= 0.7 recovery for *both* parameters, the next iteration *must* consider even more fundamentally different structural approaches or non-linearities. Think about alternative non-linear transformations of the deviations, threshold/aspiration models, models where parameters influence decision noise directly, or other complex non-linear interactions that are more likely to yield distinguishable parameter influences across the range of offers in the dataset. Focus intently on finding a functional form where varying `beta_gain` has a clearly distinguishable effect on the utility curve across offers compared to varying `beta_loss`, allowing them to be estimated independently with high reliability. This is a prerequisite for better fit metrics and meaningful interpretation.

Available Data Variables:
- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.
(Note: Use `split_perc_self` for the participant's proposed percentage share percentage).

Please think through this step by step, then provide your model specification and variable descriptions. Remember that robust parameter identifiability for *both* learnable parameters (>= 0.7 recovery for both) is the absolute priority. Your goal is to find a structure where both parameters' influences are clearly distinguishable and interact in a way that allows for reliable estimation for *both* parameters, ideally leading to improved fit metrics (BIC and accuracy) as a result of capturing the underlying process more accurately.

Please think through this step by step, then provide your model specification and variable descriptions.