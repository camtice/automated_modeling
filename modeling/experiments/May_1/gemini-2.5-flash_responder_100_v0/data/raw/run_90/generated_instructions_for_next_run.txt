Okay, here are the improved instructions for the next run (Run 91 of 100).

Task Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable "token_self". The other variable, "token_opp", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.

Again, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.

Note that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same "fairness".

Below is the description of each variable in the dataset:

trial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]
trial_role = the role of the participant [1 = responder, 2 = proposer]
token_opp = number of tokens found by the opponent
token_self = number of tokens found by the participant
combined_earning = amount of money earned in total (note that each token found is £3)
split_opp = the proposed share of the opponent (in £)
split_self = the proposed share for the participant (in £)
splitperc_opp = same but in %
split_perc_self = same but in %
accept = whether the participant responded accept (1) or reject (0)
accepted_amount = if accepted, what is the amount gain (in £)
accepted_perc = same as above but in %
proposed_perc = when participant is the proposer, what is the % proposed to the opponent
proposed_amount = when participant is the proposer, what is the amount proposed to the opponent (in £)

Desired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified).

The model should:
1. Predict only responder behavior (should target "accept = whether the participant responded accept (1) or reject (0)")
2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.
3. Be applicable to the dataset given within the task description (i.e. the model should be able to be run using only the provided dataset structure).
4. Predict utility, where less than 0 is less than 50% likely.

For any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).

Then, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.
For example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal.

Use clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied.

{
  "variables": {
    "variable_name": {
      "description": "Clear description",
      "range": {
        "min": value,
        "max": value,
        "inclusive_min": boolean,
        "inclusive_max": boolean
      },
      "distribution": {
        "type": "distribution type",
        "parameters": {}
      },
      "learnable": boolean,
      "source": "learnable/data/calculated"
    }
  }
}
</VARIABLES>

Example #1:
<EXAMPLE>
(Model of a Random Choice Task):\\\
Let me think through this step by step...
[your reasoning here]

<MODEL>
U_i = beta + epsilon*E + eta*N
</MODEL>

<VARIABLES>
{
  "variables": {
    "U_i": {
      "description": "Utility of choosing action i",
      "range": {\
        "min": "-inf",
        "max": "inf"
      },\
      "learnable": false,
      "source": "calculated"
    },\\\
    "beta": {
      "description": "Base tendency parameter (inherent preference)",
      "range": {\
        "min": 0,
        "max": 1
      },\
      "learnable": true,
      "source": "learnable"
    },\\\
    "epsilon": {
      "description": "Environmental sensitivity parameter",
      "range": {\
        "min": "-inf",
        "max": "inf"
      },\
      "learnable": true,
      "source": "learnable"
    },\\\
    "E": {
      "description": "Environmental cue value",
      "range": {\
        "min": "-inf",
        "max": "inf"
      },\
      "learnable": false,\\\
      "source": "data"
    },\\\
    "eta": {
      "description": "Noise parameter",
      "range": {\
        "min": 0,
        "max": 1,\
        "exclusive_max": true
      },\\\
      "learnable": false,
      "source": "data"
    },\\\
    "N": {
      "description": "Random noise drawn from normal distribution N(0,1)",
      "distribution": {\
        "type": "normal",
        "mean": 0,
        "std": 1
      },\\\
      "learnable": false,
      "source": "calculated"
    }\
  }\
}\
</VARIABLES>
<SUMMARY>
A linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (β) constrained to [0,1] and an unconstrained environmental sensitivity parameter (ε). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.
</SUMMARY>
</EXAMPLE>

Please be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.

The variable names you choose in your <VARIABLES> section must be used exactly as specified in the <MODEL> formula. Please ensure these names can be used directly in Python code (e.g., avoid Python reserved words). Also, ensure consistency between the variable names in your JSON and the variable names in the provided data description where applicable (e.g., use `split_perc_self` exactly as provided).

Model Type:
Your model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.

Instructions: Okay, here are the improved instructions for the next run (Run 91 of 100).

Previous attempts, including the non-linear additive structure from the last run (`U_accept = beta_gain * split_perc_self - beta_unfairness * (Exp(loss_below_fair) - 1.0)`), have continued to fail robust parameter identifiability (parameter recovery >= 0.7 for *all* learnable parameters simultaneously). The last run's recovery was particularly poor (`beta_gain`: 0.543, `beta_unfairness`: 0.451) and resulted in a very high BIC (poor fit), suggesting the exponential penalty term (`Exp(loss_below_fair) - 1.0`) likely created numerical instability or an overly steep and problematic utility landscape. Structures involving extreme non-linearities like untransformed exponentials on potentially large inputs (`loss_below_fair` can be up to 100) should be avoided moving forward.

Robust parameter identifiability (recovery >= 0.7 for *all* learnable parameters) remains the **unwavering primary objective**. A model structure that allows for reliable estimation of *all* its parameters is essential for meaningful interpretation and overrides achieving a low BIC or high accuracy if recovery fails. We need to find a structure where the influence of the two learnable parameters is sufficiently distinct across trials to be estimated independently with high reliability.

Given the persistent identifiability challenges with previous linear, additive, multiplicative, power-law, log-transformed, and steep non-linear approaches, we must explore a **fundamentally different structural principle** for this run. The goal is to create a model where the value of the offer (`split_perc_self`) contributes to utility, but this contribution is *systematically modified* or *penalized* when the offer is unfair, and this modification is scaled by the unfairness parameter (`beta_unfairness`). Crucially, this modification should **interact multiplicatively** with the `split_perc_self` term itself.

Here are the standard calculation steps for necessary intermediate variables. You *must* include these first before defining `U_accept`:
1. Calculate `sum_tokens = token_self + token_opp`.
2. Calculate `fair_perc_self_calc` handling the `sum_tokens == 0` case (defaulting to 50.0), using `token_self` and `token_opp` from the data. Use `IF` for the conditional calculation.
3. Calculate `loss_below_fair = Max(0.0, fair_perc_self_calc - split_perc_self)`. This term is positive if the offer is below the fair share, and 0 otherwise. Use `Max` for this calculation.

Now, design a novel formula for `U_accept` using `split_perc_self`, `loss_below_fair`, and exactly two learnable parameters. The formula for `U_accept` must implement the principle of a *gain term* from `split_perc_self` whose sensitivity is *penalized* by an amount scaled by `beta_unfairness` only when `loss_below_fair > 0`, and this penalty term should *interact multiplicatively* with `split_perc_self`. Avoid adding a separate, independent penalty term like in previous failed additive models.

A suggested specific structure to explore for `U_accept` that follows this principle is:
`U_accept = beta_gain * split_perc_self - beta_unfairness * loss_below_fair * split_perc_self`
This can also be written as:
`U_accept = split_perc_self * (beta_gain - beta_unfairness * loss_below_fair)`
This structure represents the utility as a base sensitivity to the proposed percentage (`beta_gain`) that is reduced (`- beta_unfairness * loss_below_fair`) proportionally to the degree of unfairness *and* the proposed percentage itself. This creates a multiplicative interaction between the proposed value and the scaled unfairness penalty, which is structurally distinct from previous attempts.

*   **Key Inputs & Calculated Variables:** Use `split_perc_self`, `token_self`, `token_opp` as data variables. Calculate `sum_tokens`, `fair_perc_self_calc` (handling `sum_tokens == 0`), `loss_below_fair`, and `U_accept`. Include calculation steps for derived variables *before* the formula for `U_accept`.
*   **Learnable Parameters:** Exactly **2 learnable parameters**. Choose descriptive, Python-safe names. Define clear, generous, finite numerical bounds.
    *   Parameter 1 (e.g., `beta_gain`): Should represent the base sensitivity to the proposed percentage (`split_perc_self`). Non-negative bounds, e.g., `[0.0, 10.0]`.
    *   Parameter 2 (e.g., `beta_unfairness`): Should scale the interaction term that reduces sensitivity to the proposed percentage based on `loss_below_fair`. Non-negative bounds, e.g., `[0.0, 10.0]`.
*   **Calculated Variables:** Include descriptions for *all* calculated variables used in the model (including `U_accept`, `sum_tokens`, `fair_perc_self_calc`, and `loss_below_fair`) with `source: "calculated"`. Include descriptions for all data variables used as inputs (`token_self`, `token_opp`, `split_perc_self`) with `source: "data"`.
*   **Variable Descriptions:** Provide variable descriptions in JSON format between <VARIABLES> tags for *all* variables in the <MODEL> formula. Include source, range (with inclusive flags), distribution (if applicable), and learnable status. Remember variable names must exactly match the model formula and data descriptions.
*   **Target Variable:** Specify "accept" using <target_variable> tags.
*   **Summary:** Provide a concise summary between <SUMMARY> tags. Describe the model's core idea (utility is based on a sensitivity to the proposed percentage, but this sensitivity is penalized by an interaction term involving unfairness). **Crucially, explain *how* your specific, novel mathematical structure (the multiplicative interaction `loss_below_fair * split_perc_self` scaled by `beta_unfairness`) creates mathematically distinct and separable influence profiles for the two learnable parameters tied to the offer value and unfairness, and how this is intended to improve robust joint parameter identifiability compared to previous linear or simple additive/multiplicative structures.** Highlight that `beta_gain` influences the utility from `split_perc_self` across all trials, while `beta_unfairness` *only* influences the utility calculation on unfair trials (where `loss_below_fair > 0`) through this specific interaction term, and this influence is weighted by the magnitude of `split_perc_self`.

Available Data Variables:
- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.
(Note: Use `split_perc_self` for the participant's proposed percentage share percentage).

Please think through this step by step, then provide your model specification and variable descriptions. Remember that robust parameter identifiability for *both* learnable parameters (>= 0.7 recovery for both) is the absolute priority. Your goal is to find a structure where both parameters' influences are clearly distinguishable and interact in a way that allows for reliable estimation for *both* parameters, ideally leading to improved fit metrics (BIC and accuracy) as a result of capturing the underlying process more accurately. Avoid structures that have failed recovery previously, like simple linear combinations or independent non-linear additive penalties (especially steep ones like exponentials). Explore this specific multiplicative interaction structure as detailed above, focusing on how it creates distinct influence profiles for the two betas.