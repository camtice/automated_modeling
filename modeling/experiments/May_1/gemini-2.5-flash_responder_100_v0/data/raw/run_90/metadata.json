{
  "task_description": "In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "Okay, here are the improved instructions for the next run (Run 90 of 100).\n\nTask Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\nproposed_amount = when participant is the proposer, what is the amount proposed to the opponent (in \u00a3)\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified).\n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able to be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal.\n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied.\n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1:\n<EXAMPLE>\n(Model of a Random Choice Task):\\\\\\\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = beta + epsilon*E + eta*N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\\\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\\\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\\\\\\\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\\\n        \"min\": 0,\n        \"max\": 1\n      },\\\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\\\\\\\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\\\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\\\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\\\\\\\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\\\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\\\n      \"learnable\": false,\\\\\\\n      \"source\": \"data\"\n    },\\\\\\\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\\\n        \"min\": 0,\n        \"max\": 1,\\\n        \"exclusive_max\": true\n      },\\\\\\\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\\\\\\\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\\\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\\\\\\\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\\\n  }\\\n}\\\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe variable names you choose in your <VARIABLES> section must be used exactly as specified in the <MODEL> formula. Please ensure these names can be used directly in Python code (e.g., avoid Python reserved words). Also, ensure consistency between the variable names in your JSON and the variable names in the provided data description where applicable (e.g., use `split_perc_self` exactly as provided).\n\nModel Type:\nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\nInstructions: Okay, here are the improved instructions for the next run (Run 90 of 100).\n\nPrevious attempts, including the specific additive structure from the last run (`U_accept = beta_base_sensitivity * split_perc_self - beta_unfairness_penalty * loss_below_fair`), have consistently failed to achieve robust parameter identifiability (parameter recovery >= 0.7 for *all* learnable parameters simultaneously). In the last run, `beta_base_sensitivity` had recovery of only 0.614, rendering the model unusable despite having the highest accuracy so far.\n\nRobust parameter identifiability (recovery >= 0.7 for *all* learnable parameters) remains the **unwavering primary objective**. A model structure that allows for reliable estimation of *all* its parameters is essential for meaningful interpretation and overrides achieving a low BIC or high accuracy if recovery fails. We need to find a structure where the influence of the two learnable parameters is sufficiently distinct across trials to be estimated independently with high reliability.\n\nGiven the persistent identifiability challenge with previous linear, multiplicative, power-law, log-transformed, and specific piecewise additive approaches, we must explore a **fundamentally different structural approach** for this run. The specific structure `U_accept = beta_base_sensitivity * split_perc_self - beta_unfairness_penalty * loss_below_fair` did *not* achieve identifiability for `beta_base_sensitivity`. This suggests that simply combining a linear term for the proposed percentage and an additive penalty for losses below fairness is not sufficient for distinguishing the parameters' influences.\n\nProposed Model Structure Principle: Design a model where the two learnable parameters influence the utility function in mathematically distinct and separable ways. One parameter should primarily relate to the intrinsic value or gain from the proposed offer (`split_perc_self`), while the other should *specifically* capture the cost or disutility associated with the offer being *below* the calculated fair share, but in a way that is structurally different from previous linear or simple additive penalties. Think about how these two influences can combine or interact non-linearly to create unique signatures for each parameter's impact on the utility across different offers relative to the fairness point.\n\nHere are the standard calculation steps for necessary intermediate variables. You *must* include these first before defining `U_accept`, but the formula for `U_accept` itself must be structurally different from the linear combination used in the previous run:\n1. Calculate `sum_tokens = token_self + token_opp`.\n2. Calculate `fair_perc_self_calc` handling the `sum_tokens == 0` case (defaulting to 50.0), using `token_self` and `token_opp` from the data. Use `IF` for the conditional calculation.\n3. Calculate `loss_below_fair = Max(0.0, fair_perc_self_calc - split_perc_self)`. This term is positive if the offer is below the fair share, and 0 otherwise. Use `Max` for this calculation.\n\nNow, design a novel formula for `U_accept` using `split_perc_self`, `loss_below_fair` (and potentially `fair_perc_self_calc` directly or the deviation `split_perc_self - fair_perc_self_calc`), and exactly two learnable parameters. The formula for `U_accept` must be mathematically distinct from `beta_base_sensitivity * split_perc_self - beta_unfairness_penalty * loss_below_fair`. Think outside the box. How can you use non-linear functions, interactions, or thresholds in a way that makes the influence of the \"value\" parameter and the \"unfairness\" parameter truly distinguishable?\n\n*   **Key Inputs & Calculated Variables:** Use `split_perc_self`, `token_self`, `token_opp` as data variables. Calculate `sum_tokens`, `fair_perc_self_calc` (handling `sum_tokens == 0`), `loss_below_fair`, and `U_accept`. Include calculation steps for derived variables *before* the formula for `U_accept`.\n*   **Learnable Parameters:** Exactly **2 learnable parameters**. Choose descriptive, Python-safe names. Define clear, generous, finite numerical bounds.\n    *   Parameter 1 (e.g., `beta_value`, `beta_gain_sensitivity`): Should scale or otherwise influence the utility related to the magnitude of the proposed percentage (`split_perc_self`). Non-negative bounds, e.g., `[0.0, 10.0]`.\n    *   Parameter 2 (e.g., `beta_unfairness`, `beta_loss_aversion`): Should scale or otherwise influence a penalty or disutility term related to how much the offer is below the fair share (`loss_below_fair` or `fair_perc_self_calc - split_perc_self`). Non-negative bounds, e.g., `[0.0, 10.0]`.\n*   **Calculated Variables:** Include descriptions for *all* calculated variables used in the model (including `U_accept`, `sum_tokens`, `fair_perc_self_calc`, and `loss_below_fair`) with `source: \"calculated\"`. Include descriptions for all data variables used as inputs (`token_self`, `token_opp`, `split_perc_self`) with `source: \"data\"`.\n*   **Variable Descriptions:** Provide variable descriptions in JSON format between <VARIABLES> tags for *all* variables in the <MODEL> formula. Include source, range (with inclusive flags), distribution (if applicable), and learnable status. Remember variable names must exactly match the model formula and data descriptions.\n*   **Target Variable:** Specify \"accept\" using <target_variable> tags.\n*   **Summary:** Provide a concise summary between <SUMMARY> tags. Describe the model's core idea (utility is based on a sensitivity to the proposed percentage, combined with a penalty for offers below a calculated fair share). **Crucially, explain *how* your specific, novel mathematical structure creates mathematically distinct and separable influence profiles for the two learnable parameters tied to the offer value and unfairness, and how this is intended to improve robust joint parameter identifiability compared to previous linear or simple additive/multiplicative structures.**\n\nAvailable Data Variables:\n- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.\n(Note: Use `split_perc_self` for the participant's proposed percentage share percentage).\n\nPlease think through this step by step, then provide your model specification and variable descriptions. Remember that robust parameter identifiability for *both* learnable parameters (>= 0.7 recovery for both) is the absolute priority. Your goal is to find a structure where both parameters' influences are clearly distinguishable and interact in a way that allows for reliable estimation for *both* parameters, ideally leading to improved fit metrics (BIC and accuracy) as a result of capturing the underlying process more accurately. Avoid structures that have failed recovery previously, like simple linear combinations of `split_perc_self` and `loss_below_fair`. Explore novel mathematical relationships.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: Okay, here are the improved instructions for the next run (Run 90 of 100).\n\nTask Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\nproposed_amount = when participant is the proposer, what is the amount proposed to the opponent (in \u00a3)\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified).\n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able to be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal.\n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied.\n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1:\n<EXAMPLE>\n(Model of a Random Choice Task):\\\\\\\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = beta + epsilon*E + eta*N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\\\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\\\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\\\\\\\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\\\n        \"min\": 0,\n        \"max\": 1\n      },\\\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\\\\\\\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\\\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\\\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\\\\\\\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\\\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\\\n      \"learnable\": false,\\\\\\\n      \"source\": \"data\"\n    },\\\\\\\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\\\n        \"min\": 0,\n        \"max\": 1,\\\n        \"exclusive_max\": true\n      },\\\\\\\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\\\\\\\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\\\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\\\\\\\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\\\n  }\\\n}\\\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe variable names you choose in your <VARIABLES> section must be used exactly as specified in the <MODEL> formula. Please ensure these names can be used directly in Python code (e.g., avoid Python reserved words). Also, ensure consistency between the variable names in your JSON and the variable names in the provided data description where applicable (e.g., use `split_perc_self` exactly as provided).\n\nModel Type:\nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\nInstructions: Okay, here are the improved instructions for the next run (Run 90 of 100).\n\nPrevious attempts, including the specific additive structure from the last run (`U_accept = beta_base_sensitivity * split_perc_self - beta_unfairness_penalty * loss_below_fair`), have consistently failed to achieve robust parameter identifiability (parameter recovery >= 0.7 for *all* learnable parameters simultaneously). In the last run, `beta_base_sensitivity` had recovery of only 0.614, rendering the model unusable despite having the highest accuracy so far.\n\nRobust parameter identifiability (recovery >= 0.7 for *all* learnable parameters) remains the **unwavering primary objective**. A model structure that allows for reliable estimation of *all* its parameters is essential for meaningful interpretation and overrides achieving a low BIC or high accuracy if recovery fails. We need to find a structure where the influence of the two learnable parameters is sufficiently distinct across trials to be estimated independently with high reliability.\n\nGiven the persistent identifiability challenge with previous linear, multiplicative, power-law, log-transformed, and specific piecewise additive approaches, we must explore a **fundamentally different structural approach** for this run. The specific structure `U_accept = beta_base_sensitivity * split_perc_self - beta_unfairness_penalty * loss_below_fair` did *not* achieve identifiability for `beta_base_sensitivity`. This suggests that simply combining a linear term for the proposed percentage and an additive penalty for losses below fairness is not sufficient for distinguishing the parameters' influences.\n\nProposed Model Structure Principle: Design a model where the two learnable parameters influence the utility function in mathematically distinct and separable ways. One parameter should primarily relate to the intrinsic value or gain from the proposed offer (`split_perc_self`), while the other should *specifically* capture the cost or disutility associated with the offer being *below* the calculated fair share, but in a way that is structurally different from previous linear or simple additive penalties. Think about how these two influences can combine or interact non-linearly to create unique signatures for each parameter's impact on the utility across different offers relative to the fairness point.\n\nHere are the standard calculation steps for necessary intermediate variables. You *must* include these first before defining `U_accept`, but the formula for `U_accept` itself must be structurally different from the linear combination used in the previous run:\n1. Calculate `sum_tokens = token_self + token_opp`.\n2. Calculate `fair_perc_self_calc` handling the `sum_tokens == 0` case (defaulting to 50.0), using `token_self` and `token_opp` from the data. Use `IF` for the conditional calculation.\n3. Calculate `loss_below_fair = Max(0.0, fair_perc_self_calc - split_perc_self)`. This term is positive if the offer is below the fair share, and 0 otherwise. Use `Max` for this calculation.\n\nNow, design a novel formula for `U_accept` using `split_perc_self`, `loss_below_fair` (and potentially `fair_perc_self_calc` directly or the deviation `split_perc_self - fair_perc_self_calc`), and exactly two learnable parameters. The formula for `U_accept` must be mathematically distinct from `beta_base_sensitivity * split_perc_self - beta_unfairness_penalty * loss_below_fair`. Think outside the box. How can you use non-linear functions, interactions, or thresholds in a way that makes the influence of the \"value\" parameter and the \"unfairness\" parameter truly distinguishable?\n\n*   **Key Inputs & Calculated Variables:** Use `split_perc_self`, `token_self`, `token_opp` as data variables. Calculate `sum_tokens`, `fair_perc_self_calc` (handling `sum_tokens == 0`), `loss_below_fair`, and `U_accept`. Include calculation steps for derived variables *before* the formula for `U_accept`.\n*   **Learnable Parameters:** Exactly **2 learnable parameters**. Choose descriptive, Python-safe names. Define clear, generous, finite numerical bounds.\n    *   Parameter 1 (e.g., `beta_value`, `beta_gain_sensitivity`): Should scale or otherwise influence the utility related to the magnitude of the proposed percentage (`split_perc_self`). Non-negative bounds, e.g., `[0.0, 10.0]`.\n    *   Parameter 2 (e.g., `beta_unfairness`, `beta_loss_aversion`): Should scale or otherwise influence a penalty or disutility term related to how much the offer is below the fair share (`loss_below_fair` or `fair_perc_self_calc - split_perc_self`). Non-negative bounds, e.g., `[0.0, 10.0]`.\n*   **Calculated Variables:** Include descriptions for *all* calculated variables used in the model (including `U_accept`, `sum_tokens`, `fair_perc_self_calc`, and `loss_below_fair`) with `source: \"calculated\"`. Include descriptions for all data variables used as inputs (`token_self`, `token_opp`, `split_perc_self`) with `source: \"data\"`.\n*   **Variable Descriptions:** Provide variable descriptions in JSON format between <VARIABLES> tags for *all* variables in the <MODEL> formula. Include source, range (with inclusive flags), distribution (if applicable), and learnable status. Remember variable names must exactly match the model formula and data descriptions.\n*   **Target Variable:** Specify \"accept\" using <target_variable> tags.\n*   **Summary:** Provide a concise summary between <SUMMARY> tags. Describe the model's core idea (utility is based on a sensitivity to the proposed percentage, combined with a penalty for offers below a calculated fair share). **Crucially, explain *how* your specific, novel mathematical structure creates mathematically distinct and separable influence profiles for the two learnable parameters tied to the offer value and unfairness, and how this is intended to improve robust joint parameter identifiability compared to previous linear or simple additive/multiplicative structures.**\n\nAvailable Data Variables:\n- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.\n(Note: Use `split_perc_self` for the participant's proposed percentage share percentage).\n\nPlease think through this step by step, then provide your model specification and variable descriptions. Remember that robust parameter identifiability for *both* learnable parameters (>= 0.7 recovery for both) is the absolute priority. Your goal is to find a structure where both parameters' influences are clearly distinguishable and interact in a way that allows for reliable estimation for *both* parameters, ideally leading to improved fit metrics (BIC and accuracy) as a result of capturing the underlying process more accurately. Avoid structures that have failed recovery previously, like simple linear combinations of `split_perc_self` and `loss_below_fair`. Explore novel mathematical relationships.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<MODEL>\nsum_tokens = token_self + token_opp\nfair_perc_self_calc = IF(sum_tokens == 0, 50.0, (token_self / sum_tokens) * 100.0)\nloss_below_fair = Max(0.0, fair_perc_self_calc - split_perc_self)\nU_accept = beta_gain * split_perc_self - beta_unfairness * (Exp(loss_below_fair) - 1.0)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 50,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 50,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The proposed share for the participant in percentage\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"sum_tokens\": {\n      \"description\": \"Total number of tokens found by both participant and opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fair_perc_self_calc\": {\n      \"description\": \"Calculated fair percentage share for the participant based on token contributions\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"loss_below_fair\": {\n      \"description\": \"The magnitude of the loss when the proposed share is below the calculated fair share, 0 otherwise\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_gain\": {\n      \"description\": \"Sensitivity to the proposed percentage gain (split_perc_self)\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 10.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_unfairness\": {\n      \"description\": \"Sensitivity to unfairness, scaling an exponential penalty for offers below the fair share\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 10.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U_accept\": {\n      \"description\": \"Utility of accepting the proposed offer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nThis model predicts the utility of accepting a proposed offer based on two components: a linear sensitivity to the percentage offered to the participant and a non-linear penalty applied when the offer is below a calculated fair share. The utility is a weighted sum where the gain from the proposed percentage is scaled by 'beta_gain', and an exponential function of the loss below fairness is scaled by 'beta_unfairness'. For offers at or above the fair share, only the gain component contributes to utility. This structure aims to improve parameter identifiability by giving 'beta_gain' influence across all offers proportional to the percentage received, while 'beta_unfairness' specifically and non-linearly affects only unfair offers based on the magnitude of the discrepancy from fairness, creating mathematically distinct response profiles for the two parameters.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['beta_gain', 'beta_unfairness']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                sum_tokens = token_self + token_opp\nfair_perc_self_calc = IF(sum_tokens == 0, 50.0, (token_self / sum_tokens) * 100.0)\nloss_below_fair = Max(0.0, fair_perc_self_calc - split_perc_self)\nU_accept = beta_gain * split_perc_self - beta_unfairness * (Exp(loss_below_fair) - 1.0)\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 50,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 50,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The proposed share for the participant in percentage\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"sum_tokens\": {\n      \"description\": \"Total number of tokens found by both participant and opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fair_perc_self_calc\": {\n      \"description\": \"Calculated fair percentage share for the participant based on token contributions\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"loss_below_fair\": {\n      \"description\": \"The magnitude of the loss when the proposed share is below the calculated fair share, 0 otherwise\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_gain\": {\n      \"description\": \"Sensitivity to the proposed percentage gain (split_perc_self)\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 10.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_unfairness\": {\n      \"description\": \"Sensitivity to unfairness, scaling an exponential penalty for offers below the fair share\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 10.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U_accept\": {\n      \"description\": \"Utility of accepting the proposed offer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, beta_gain=1, beta_unfairness=1):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        split_perc_self = trial.get(\"splitperc_self\", 0)\n\n        sum_tokens = token_self + token_opp\n        if sum_tokens == 0:\n            fair_perc_self_calc = 50.0\n        else:\n            fair_perc_self_calc = (token_self / sum_tokens) * 100.0\n\n        loss_below_fair = max(0.0, fair_perc_self_calc - split_perc_self)\n        U_accept = beta_gain * split_perc_self - beta_unfairness * (math.exp(loss_below_fair) - 1.0)\n        model_predictions.append(U_accept)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n```",
      "timestamp": 1746104520.826525
    }
  ],
  "learnable_parameters": {
    "beta_gain": {
      "description": "Sensitivity to the proposed percentage gain (split_perc_self)",
      "range": {
        "min": 0.0,
        "max": 10.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta_unfairness": {
      "description": "Sensitivity to unfairness, scaling an exponential penalty for offers below the fair share",
      "range": {
        "min": 0.0,
        "max": 10.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "sum_tokens = token_self + token_opp\nfair_perc_self_calc = IF(sum_tokens == 0, 50.0, (token_self / sum_tokens) * 100.0)\nloss_below_fair = Max(0.0, fair_perc_self_calc - split_perc_self)\nU_accept = beta_gain * split_perc_self - beta_unfairness * (Exp(loss_below_fair) - 1.0)",
  "variable_descriptions": {
    "token_self": {
      "description": "Number of tokens found by the participant",
      "range": {
        "min": 0,
        "max": 50,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent",
      "range": {
        "min": 0,
        "max": 50,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "split_perc_self": {
      "description": "The proposed share for the participant in percentage",
      "range": {
        "min": 0.0,
        "max": 100.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "sum_tokens": {
      "description": "Total number of tokens found by both participant and opponent",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "fair_perc_self_calc": {
      "description": "Calculated fair percentage share for the participant based on token contributions",
      "range": {
        "min": 0.0,
        "max": 100.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "loss_below_fair": {
      "description": "The magnitude of the loss when the proposed share is below the calculated fair share, 0 otherwise",
      "range": {
        "min": 0.0,
        "max": 100.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "beta_gain": {
      "description": "Sensitivity to the proposed percentage gain (split_perc_self)",
      "range": {
        "min": 0.0,
        "max": 10.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta_unfairness": {
      "description": "Sensitivity to unfairness, scaling an exponential penalty for offers below the fair share",
      "range": {
        "min": 0.0,
        "max": 10.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "U_accept": {
      "description": "Utility of accepting the proposed offer",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "This model predicts the utility of accepting a proposed offer based on two components: a linear sensitivity to the percentage offered to the participant and a non-linear penalty applied when the offer is below a calculated fair share. The utility is a weighted sum where the gain from the proposed percentage is scaled by 'beta_gain', and an exponential function of the loss below fairness is scaled by 'beta_unfairness'. For offers at or above the fair share, only the gain component contributes to utility. This structure aims to improve parameter identifiability by giving 'beta_gain' influence across all offers proportional to the percentage received, while 'beta_unfairness' specifically and non-linearly affects only unfair offers based on the magnitude of the discrepancy from fairness, creating mathematically distinct response profiles for the two parameters.",
  "target_variable": "accept",
  "full_reasoning": "<MODEL>\nsum_tokens = token_self + token_opp\nfair_perc_self_calc = IF(sum_tokens == 0, 50.0, (token_self / sum_tokens) * 100.0)\nloss_below_fair = Max(0.0, fair_perc_self_calc - split_perc_self)\nU_accept = beta_gain * split_perc_self - beta_unfairness * (Exp(loss_below_fair) - 1.0)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 50,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 50,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The proposed share for the participant in percentage\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"sum_tokens\": {\n      \"description\": \"Total number of tokens found by both participant and opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fair_perc_self_calc\": {\n      \"description\": \"Calculated fair percentage share for the participant based on token contributions\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"loss_below_fair\": {\n      \"description\": \"The magnitude of the loss when the proposed share is below the calculated fair share, 0 otherwise\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_gain\": {\n      \"description\": \"Sensitivity to the proposed percentage gain (split_perc_self)\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 10.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_unfairness\": {\n      \"description\": \"Sensitivity to unfairness, scaling an exponential penalty for offers below the fair share\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 10.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U_accept\": {\n      \"description\": \"Utility of accepting the proposed offer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nThis model predicts the utility of accepting a proposed offer based on two components: a linear sensitivity to the percentage offered to the participant and a non-linear penalty applied when the offer is below a calculated fair share. The utility is a weighted sum where the gain from the proposed percentage is scaled by 'beta_gain', and an exponential function of the loss below fairness is scaled by 'beta_unfairness'. For offers at or above the fair share, only the gain component contributes to utility. This structure aims to improve parameter identifiability by giving 'beta_gain' influence across all offers proportional to the percentage received, while 'beta_unfairness' specifically and non-linearly affects only unfair offers based on the magnitude of the discrepancy from fairness, creating mathematically distinct response profiles for the two parameters.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: sum_tokens = token_self + token_opp\nfair_perc_self_calc = IF(sum_tokens == 0, 50.0, (token_self / sum_tokens) * 100.0)\nloss_below_fair = Max(0.0, fair_perc_self_calc - split_perc_self)\nU_accept = beta_gain * split_perc_self - beta_unfairness * (Exp(loss_below_fair) - 1.0)\nSummary: This model predicts the utility of accepting a proposed offer based on two components: a linear sensitivity to the percentage offered to the participant and a non-linear penalty applied when the offer is below a calculated fair share. The utility is a weighted sum where the gain from the proposed percentage is scaled by 'beta_gain', and an exponential function of the loss below fairness is scaled by 'beta_unfairness'. For offers at or above the fair share, only the gain component contributes to utility. This structure aims to improve parameter identifiability by giving 'beta_gain' influence across all offers proportional to the percentage received, while 'beta_unfairness' specifically and non-linearly affects only unfair offers based on the magnitude of the discrepancy from fairness, creating mathematically distinct response profiles for the two parameters.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, beta_gain=1, beta_unfairness=1):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        split_perc_self = trial.get(\"splitperc_self\", 0)\n\n        sum_tokens = token_self + token_opp\n        if sum_tokens == 0:\n            fair_perc_self_calc = 50.0\n        else:\n            fair_perc_self_calc = (token_self / sum_tokens) * 100.0\n\n        loss_below_fair = max(0.0, fair_perc_self_calc - split_perc_self)\n        U_accept = beta_gain * split_perc_self - beta_unfairness * (math.exp(loss_below_fair) - 1.0)\n        model_predictions.append(U_accept)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.6382783882783883,
  "group_accuracies": {
    "Control": 0.622093023255814,
    "Cocaine": 0.6527777777777778
  },
  "group_parameter_averages": {
    "Control": {
      "beta_gain": 6.042885213554397,
      "beta_unfairness": 3.1347346400472
    },
    "Cocaine": {
      "beta_gain": 4.978503921753709,
      "beta_unfairness": 4.252319646011018
    }
  },
  "fitting_results": [
    {
      "beta_gain": 5.713642275924922,
      "beta_unfairness": 2.9247819674375517,
      "success": true,
      "log_likelihood": -115.12925464660228,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 3.0245504184701435,
      "beta_unfairness": 6.569517857294388,
      "success": true,
      "log_likelihood": -322.36191301696664,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 7.265620200973846,
      "beta_unfairness": 6.5308112561213525,
      "success": true,
      "log_likelihood": -299.33606208692606,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 4.450354622280666,
      "beta_unfairness": 4.939053391948855,
      "success": true,
      "log_likelihood": -231.64480365772457,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 5.162141634809072,
      "beta_unfairness": 1.5134541607675434,
      "success": true,
      "log_likelihood": -230.25850928931018,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 5.5825171046967,
      "beta_unfairness": 3.565748360136058,
      "success": true,
      "log_likelihood": -391.4394658070879,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 3.34722261790135,
      "beta_unfairness": 0.0,
      "success": true,
      "log_likelihood": 3.5999916379457465e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 1.860151174401545,
      "beta_unfairness": 0.6794986549746379,
      "success": true,
      "log_likelihood": -414.4653048820839,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 10.0,
      "beta_unfairness": 0.0,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 7.2727737404211705,
      "beta_unfairness": 0.009690720082230486,
      "success": true,
      "log_likelihood": -115.12925464660229,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 9.341563513250104,
      "beta_unfairness": 5.039497142800005,
      "success": true,
      "log_likelihood": -230.2585092968047,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 0.00489880574322356,
      "beta_unfairness": 10.0,
      "success": true,
      "log_likelihood": -48.79984811202706,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 4.408409918634749,
      "beta_unfairness": 0.7190487781333076,
      "success": true,
      "log_likelihood": -161.18095650668323,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 4.837953251784008,
      "beta_unfairness": 2.372575533821639,
      "success": true,
      "log_likelihood": -690.775527897614,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.16666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 10.0,
      "beta_unfairness": 0.0,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 8.631986377830415,
      "beta_unfairness": 5.222448864872803,
      "success": true,
      "log_likelihood": -690.775527897614,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.16666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 5.9026475599609585,
      "beta_unfairness": 2.457079058417657,
      "success": true,
      "log_likelihood": -690.775527897614,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.16666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 6.688880235188936,
      "beta_unfairness": 4.121829238848859,
      "success": true,
      "log_likelihood": -575.6462732474117,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 5.857196922538059,
      "beta_unfairness": 0.476862327348333,
      "success": true,
      "log_likelihood": -552.6204223173711,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3333333333333333,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 10.0,
      "beta_unfairness": 0.0,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 5.5060309435602965,
      "beta_unfairness": 0.8056032826616822,
      "success": true,
      "log_likelihood": -276.3102111568856,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 5.1711496513837805,
      "beta_unfairness": 0.7440773562732961,
      "success": true,
      "log_likelihood": -529.5945713873307,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 7.642725535455439,
      "beta_unfairness": 9.53770481396224,
      "success": true,
      "log_likelihood": -207.23265836676507,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 2.7982872222087307,
      "beta_unfairness": 3.105570528831433,
      "success": true,
      "log_likelihood": -323.74820737788656,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 5.42847932260652,
      "beta_unfairness": 1.8834495229505166,
      "success": true,
      "log_likelihood": -276.31021115688566,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 9.39943595965599,
      "beta_unfairness": 8.732217420255257,
      "success": true,
      "log_likelihood": -345.387763947007,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 3.3589592435027265,
      "beta_unfairness": 0.6940996915710304,
      "success": true,
      "log_likelihood": -276.31021163615725,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 8.401916839193614,
      "beta_unfairness": 4.696529538291953,
      "success": true,
      "log_likelihood": -92.1034037165618,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 6.860484358620793,
      "beta_unfairness": 1.5352097560370757,
      "success": true,
      "log_likelihood": -552.6204243348018,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3333333333333333,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 7.738142322349947,
      "beta_unfairness": 1.1914198370119433,
      "success": true,
      "log_likelihood": -460.51701859720936,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 8.423134573174565,
      "beta_unfairness": 7.265701676485214,
      "success": true,
      "log_likelihood": -690.7755278976139,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.16666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 4.342586136049375,
      "beta_unfairness": 7.028250041326734,
      "success": true,
      "log_likelihood": -69.07755278652134,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 9.2115973002788,
      "beta_unfairness": 8.184593269788078,
      "success": true,
      "log_likelihood": -299.3360620869261,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 4.19775637911763,
      "beta_unfairness": 2.2362352108587737,
      "success": true,
      "log_likelihood": -184.2068074367237,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 4.229147000152268,
      "beta_unfairness": 0.01792171067330761,
      "success": true,
      "log_likelihood": -621.6979751074927,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.25,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 4.6043485666783015,
      "beta_unfairness": 0.7620188181448528,
      "success": true,
      "log_likelihood": -345.387763947007,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 4.3844076409327055,
      "beta_unfairness": 2.8714676574368028,
      "success": true,
      "log_likelihood": -437.49116766716884,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 6.411089350372641,
      "beta_unfairness": 0.27012646597854556,
      "success": true,
      "log_likelihood": -230.25850929680468,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 8.277489387315113,
      "beta_unfairness": 0.44776171434458,
      "success": true,
      "log_likelihood": -368.41361487704745,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 0.9916855414814751,
      "beta_unfairness": 8.921029613521167,
      "success": true,
      "log_likelihood": -667.7496769675734,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.19444444444444445,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 7.694318318135233,
      "beta_unfairness": 1.6212256398824327,
      "success": true,
      "log_likelihood": -322.36191301696664,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 5.41838221580326,
      "beta_unfairness": 5.099478642737477,
      "success": true,
      "log_likelihood": -46.051701856518285,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 10.0,
      "beta_unfairness": 0.0,
      "success": true,
      "log_likelihood": -23.02585092644049,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 6.904710880068564,
      "beta_unfairness": 3.3558021914314184,
      "success": true,
      "log_likelihood": -322.3619130169666,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 2.789929531322054,
      "beta_unfairness": 8.126868628265129,
      "success": true,
      "log_likelihood": -414.46531673712843,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 2.168556184713808,
      "beta_unfairness": 0.20179677093935977,
      "success": true,
      "log_likelihood": -414.46531673712843,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 6.580496488985398,
      "beta_unfairness": 4.395688279953801,
      "success": true,
      "log_likelihood": -299.336062086926,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 2.247334526345688,
      "beta_unfairness": 6.2131909356489,
      "success": true,
      "log_likelihood": -230.25850929680468,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 6.310872412965001,
      "beta_unfairness": 2.1545939413453152,
      "success": true,
      "log_likelihood": -207.23265836676427,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 7.286082938020152,
      "beta_unfairness": 9.429409945978566,
      "success": true,
      "log_likelihood": -391.4394641054758,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 9.02855316991775,
      "beta_unfairness": 1.0008954972489548,
      "success": true,
      "log_likelihood": -391.4394658070879,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 0.0048970383029566505,
      "beta_unfairness": 10.0,
      "success": true,
      "log_likelihood": -71.82569904588802,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 6.166879553812554,
      "beta_unfairness": 0.16467711372501256,
      "success": true,
      "log_likelihood": -299.33606208692606,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 1.7112986906984484,
      "beta_unfairness": 3.835439832501195,
      "success": true,
      "log_likelihood": -437.49116766716867,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 5.525334053559611,
      "beta_unfairness": 2.2894325239305537,
      "success": true,
      "log_likelihood": -184.2068074367237,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 4.127402372127637,
      "beta_unfairness": 0.23635330841780267,
      "success": true,
      "log_likelihood": -92.10340371656181,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 1.457207095412606,
      "beta_unfairness": 8.922656004784464,
      "success": true,
      "log_likelihood": -138.1551055766428,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 10.0,
      "beta_unfairness": 0.0,
      "success": true,
      "log_likelihood": -92.1034037165618,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 1.4971079766251971,
      "beta_unfairness": 6.719916529415528,
      "success": true,
      "log_likelihood": -92.10340371656186,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 10.0,
      "beta_unfairness": 0.0,
      "success": true,
      "log_likelihood": -161.18095650668326,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 9.210694894528698,
      "beta_unfairness": 0.21482985524249099,
      "success": true,
      "log_likelihood": -368.41361487704745,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 4.901977768387978,
      "beta_unfairness": 4.479650607819751,
      "success": true,
      "log_likelihood": -276.31021115689623,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 5.1786668553254565,
      "beta_unfairness": 7.560240777075499,
      "success": true,
      "log_likelihood": -69.07755278652137,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 0.6531665171821888,
      "beta_unfairness": 1.6597338042311205,
      "success": true,
      "log_likelihood": -322.31788380408165,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 2.0453694733137375,
      "beta_unfairness": 9.912727549516415,
      "success": true,
      "log_likelihood": -92.10340371656179,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 3.7428119653749983,
      "beta_unfairness": 0.04234583420472893,
      "success": true,
      "log_likelihood": -276.3102111568857,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 4.941295525941857,
      "beta_unfairness": 2.2233368800911735,
      "success": true,
      "log_likelihood": -621.6979751074925,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.25,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 3.6959017959827585,
      "beta_unfairness": 0.7888540388748629,
      "success": true,
      "log_likelihood": -529.5945756061689,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 2.4958751035233515,
      "beta_unfairness": 9.60601138617516,
      "success": true,
      "log_likelihood": -368.41361487704745,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 9.503128674162726,
      "beta_unfairness": 0.49497629539635657,
      "success": true,
      "log_likelihood": -575.6462732474116,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 1.4846999353781332,
      "beta_unfairness": 5.015450730529913,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 4.556237911834868,
      "beta_unfairness": 7.487596498339585,
      "success": true,
      "log_likelihood": -115.12925464660228,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 7.651397354233474,
      "beta_unfairness": 6.938935309160775,
      "success": true,
      "log_likelihood": -345.387763947007,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 3.984935691782843,
      "beta_unfairness": 4.422527672433328,
      "success": true,
      "log_likelihood": -530.9808657486187,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 9.844296059992061,
      "beta_unfairness": 1.2807633949149384,
      "success": true,
      "log_likelihood": -322.36191301696647,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 2.9311861153098207,
      "beta_unfairness": 1.2818164372931895,
      "success": true,
      "log_likelihood": -437.49116766716884,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 10.0,
      "beta_unfairness": 0.0,
      "success": true,
      "log_likelihood": -46.051701856480875,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 0.0,
      "beta_unfairness": 10.0,
      "success": true,
      "log_likelihood": -25.798439648280272,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 3.472317729714045,
      "beta_unfairness": 0.47749213865091567,
      "success": true,
      "log_likelihood": -322.36191301696647,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 4.411460273984604,
      "beta_unfairness": 6.361401018574313,
      "success": true,
      "log_likelihood": -69.07755278652135,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 7.838467529613236,
      "beta_unfairness": 0.31376212630269906,
      "success": true,
      "log_likelihood": -345.38776394700693,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 7.535575144234116,
      "beta_unfairness": 9.565356189552269,
      "success": true,
      "log_likelihood": -667.749600148197,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.19444444444444445,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 3.708581116729035,
      "beta_unfairness": 9.148433452147241,
      "success": true,
      "log_likelihood": -138.15510557664277,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 1.4841722491558833,
      "beta_unfairness": 3.0340626785175724,
      "success": true,
      "log_likelihood": -322.3619124944588,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 10.0,
      "beta_unfairness": 9.006831302079881,
      "success": true,
      "log_likelihood": -368.4136148770475,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 4.629606138074573,
      "beta_unfairness": 8.933459935207523,
      "success": true,
      "log_likelihood": -46.05170185648092,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 10.0,
      "beta_unfairness": 0.0,
      "success": true,
      "log_likelihood": -253.28436022684514,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 6.773739069072696,
      "beta_unfairness": 3.1066288482491258,
      "success": true,
      "log_likelihood": -138.1551055766427,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 3.7146814229854708,
      "beta_unfairness": 2.5794750566283597,
      "success": true,
      "log_likelihood": -644.7238260375331,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.2222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 3.0855044360457864,
      "beta_unfairness": 5.635001479659456,
      "success": true,
      "log_likelihood": -299.336062086926,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 1.6857785794362246,
      "beta_unfairness": 5.492920208074238,
      "success": true,
      "log_likelihood": -483.5428695272498,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "beta_gain": {
        "r": 0.5431350733968806,
        "p": 5.270779114294193e-09
      },
      "beta_unfairness": {
        "r": 0.4510497136673999,
        "p": 2.4827072083276182e-06
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 602.0628289403517,
  "bic_Control": 630.7282456322769,
  "bic_Cocaine": 576.3833931538354,
  "bic_results": {
    "average_bic": 602.0628289403517,
    "individual_bics": [
      237.42554717011677,
      651.8908639108455,
      605.8391620507643,
      470.45664519236135,
      467.6840564555326,
      790.045969491088,
      7.167037869712237,
      836.09764764108,
      7.167037869712219,
      237.4255471701168,
      467.6840564705216,
      104.76673410096633,
      329.5289508902787,
      1388.7180936721402,
      7.167037869712219,
      1388.7180936721402,
      1388.7180936721402,
      1158.4595843717357,
      1112.4078825116544,
      7.167037869712219,
      559.7874601906834,
      1066.3561806515736,
      421.63235461044235,
      654.6634526326853,
      559.7874601906835,
      697.9425657709262,
      559.7874611492267,
      191.37384531003582,
      1112.4078865465158,
      928.2010750713309,
      1388.71809367214,
      145.3221434499549,
      605.8391620507645,
      375.5806527503596,
      1250.5629880918975,
      697.9425657709262,
      882.1493732112499,
      467.68405647052157,
      743.9942676310071,
      1342.666391812059,
      651.8908639108455,
      99.27044158994879,
      53.2187397297932,
      651.8908639108454,
      836.0976713511691,
      836.0976713511691,
      605.8391620507642,
      467.68405647052157,
      421.63235461044076,
      790.0459660878638,
      790.045969491088,
      150.81843596868825,
      605.8391620507643,
      882.1493732112496,
      375.5806527503596,
      191.37384531003585,
      283.4772490301978,
      191.37384531003582,
      191.37384531003593,
      329.52895089027874,
      743.9942676310071,
      559.7874601907047,
      145.32214344995495,
      651.8028054850755,
      191.3738453100358,
      559.7874601906836,
      1250.5629880918973,
      1066.35618908925,
      743.9942676310071,
      1158.4595843717354,
      7.167037869712219,
      237.42554717011677,
      697.9425657709262,
      1069.1287693741497,
      651.8908639108452,
      882.1493732112499,
      99.27044158987397,
      58.76391717347276,
      651.8908639108452,
      145.32214344995492,
      697.9425657709261,
      1342.6662381733063,
      283.47724903019775,
      651.8908628658298,
      743.9942676310072,
      99.27044158987405,
      513.7357583306025,
      283.47724903019764,
      1296.6146899519783,
      605.8391620507642,
      974.2527769314119
    ],
    "group_enabled": true,
    "group_bics": {
      "Control": [
        237.42554717011677,
        651.8908639108455,
        605.8391620507643,
        470.45664519236135,
        467.6840564555326,
        790.045969491088,
        7.167037869712237,
        836.09764764108,
        7.167037869712219,
        237.4255471701168,
        467.6840564705216,
        104.76673410096633,
        329.5289508902787,
        1388.7180936721402,
        7.167037869712219,
        1388.7180936721402,
        1388.7180936721402,
        1158.4595843717357,
        1112.4078825116544,
        7.167037869712219,
        559.7874601906834,
        1066.3561806515736,
        421.63235461044235,
        654.6634526326853,
        559.7874601906835,
        697.9425657709262,
        559.7874611492267,
        191.37384531003582,
        1112.4078865465158,
        928.2010750713309,
        1388.71809367214,
        145.3221434499549,
        605.8391620507645,
        375.5806527503596,
        1250.5629880918975,
        697.9425657709262,
        882.1493732112499,
        467.68405647052157,
        743.9942676310071,
        1342.666391812059,
        651.8908639108455,
        99.27044158994879,
        53.2187397297932
      ],
      "Cocaine": [
        651.8908639108454,
        836.0976713511691,
        836.0976713511691,
        605.8391620507642,
        467.68405647052157,
        421.63235461044076,
        790.0459660878638,
        790.045969491088,
        150.81843596868825,
        605.8391620507643,
        882.1493732112496,
        375.5806527503596,
        191.37384531003585,
        283.4772490301978,
        191.37384531003582,
        191.37384531003593,
        329.52895089027874,
        743.9942676310071,
        559.7874601907047,
        145.32214344995495,
        651.8028054850755,
        191.3738453100358,
        559.7874601906836,
        1250.5629880918973,
        1066.35618908925,
        743.9942676310071,
        1158.4595843717354,
        7.167037869712219,
        237.42554717011677,
        697.9425657709262,
        1069.1287693741497,
        651.8908639108452,
        882.1493732112499,
        99.27044158987397,
        58.76391717347276,
        651.8908639108452,
        145.32214344995492,
        697.9425657709261,
        1342.6662381733063,
        283.47724903019775,
        651.8908628658298,
        743.9942676310072,
        99.27044158987405,
        513.7357583306025,
        283.47724903019764,
        1296.6146899519783,
        605.8391620507642,
        974.2527769314119
      ]
    },
    "num_parameters": 2,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- beta_gain: r = 0.543\n- beta_unfairness: r = 0.451",
  "previous_models": [
    "Specification: sum_tokens = token_self + token_opp\nfair_perc_self_calc = IF(sum_tokens == 0, 50.0, (token_self / sum_tokens) * 100.0)\nloss_below_fair = Max(0.0, fair_perc_self_calc - split_perc_self)\nU_accept = beta_gain * split_perc_self - beta_unfairness * (Exp(loss_below_fair) - 1.0)\nSummary: This model predicts the utility of accepting a proposed offer based on two components: a linear sensitivity to the percentage offered to the participant and a non-linear penalty applied when the offer is below a calculated fair share. The utility is a weighted sum where the gain from the proposed percentage is scaled by 'beta_gain', and an exponential function of the loss below fairness is scaled by 'beta_unfairness'. For offers at or above the fair share, only the gain component contributes to utility. This structure aims to improve parameter identifiability by giving 'beta_gain' influence across all offers proportional to the percentage received, while 'beta_unfairness' specifically and non-linearly affects only unfair offers based on the magnitude of the discrepancy from fairness, creating mathematically distinct response profiles for the two parameters.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 602.0628289403517\nOverall Accuracy: 0.6383\nGroup Accuracies:\n- Control: 0.6221\n- Cocaine: 0.6528\n\nParameter Recovery:\n- beta_gain: r = 0.543\n- beta_unfairness: r = 0.451"
  ]
}