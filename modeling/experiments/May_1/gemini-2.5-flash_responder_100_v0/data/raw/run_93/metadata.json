{
  "task_description": "In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "Okay, here are the improved instructions for the next run (Run 93 of 100).\n\nTask Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\nproposed_amount = when participant is the proposer, what is the amount proposed to the opponent (in \u00a3)\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified).\n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able to be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal.\n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied.\n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1:\n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = beta + epsilon*E + eta*N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe variable names you choose in your <VARIABLES> section must be used exactly as specified in the <MODEL> formula. Please ensure these names can be used directly in Python code (e.g., avoid Python reserved words). Also, ensure consistency between the variable names in your JSON and the variable names in the provided data description where applicable (e.g., use `split_perc_self` exactly as provided).\n\nModel Type:\nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\nInstructions: Okay, here are the improved instructions for the next run (Run 93 of 100).\n\nThe previous attempt using the additive structure with a log-transformed penalty (`U_accept = beta_value * split_perc_self - beta_penalty * log(1.0 + loss_below_fair)`) resulted in very poor parameter recovery (`beta_value`: 0.573, `beta_penalty`: 0.001). Neither parameter met the recovery threshold of 0.7. This indicates that the specific structural choice in the last run failed to create mathematically separable influences for both parameters, making them difficult to estimate reliably from the data. Robust parameter identifiability (recovery >= 0.7 for *all* learnable parameters simultaneously) remains the **unwavering primary objective**.\n\nGiven the persistent challenges in parameter recovery, we need to explore a fundamentally different structural approach that ensures the influence of the two learnable parameters is distinct and strongly identifiable. The failure of previous models that scaled `split_perc_self` directly with one parameter suggests this might be problematic for identifiability when another parameter captures fairness.\n\nLet's explore a structure where the utility is directly tied to the *deviation* from the calculated fair share, rather than the absolute proposed share. We can then add an intercept term to capture a general bias or baseline utility. This structure uses two parameters with clearly separable mathematical roles: a slope parameter affecting the relationship between utility and fairness deviation, and an intercept parameter shifting the entire utility function.\n\nHere are the standard calculation steps for necessary intermediate variables. You *must* include these first before defining `U_accept`:\n1.  Calculate `sum_tokens = token_self + token_opp`.\n2.  Calculate `fair_perc_self_calc` handling the `sum_tokens == 0` case (defaulting to 50.0), using `token_self` and `token_opp` from the data. Use `IF` for the conditional calculation.\n\nNow, design a novel formula for `U_accept` using `split_perc_self`, `fair_perc_self_calc`, and exactly two learnable parameters. The formula for `U_accept` must implement the principle that utility is a linear function of the *deviation* from the fair share, plus a constant offset.\n\nA suggested specific structure to explore that follows this principle is:\n`U_accept = beta_sensitivity * (split_perc_self - fair_perc_self_calc) + beta_intercept`\n\nThis structure represents utility as a linear sensitivity (`beta_sensitivity`) to the difference between the proposed share (`split_perc_self`) and the calculated fair share (`fair_perc_self_calc`), plus a baseline utility (`beta_intercept`). This creates two mathematically distinct influences: `beta_sensitivity` scales the deviation from fairness, affecting the *slope* of the utility function relative to this deviation, while `beta_intercept` acts as a constant *offset*, shifting the entire function up or down. This clear separation between a slope parameter and an intercept parameter based on deviation from fairness is intended to improve robust joint parameter identifiability compared to previous attempts by ensuring their effects on the utility are mathematically orthogonal (slope vs. intercept).\n\n*   **Key Inputs & Calculated Variables:** Use `split_perc_self`, `token_self`, `token_opp` as data variables. Calculate `sum_tokens`, `fair_perc_self_calc`, and `U_accept`. Include calculation steps for derived variables *before* the formula for `U_accept`.\n*   **Learnable Parameters:** Exactly **2 learnable parameters**. Choose descriptive, Python-safe names (e.g., `beta_sensitivity`, `beta_intercept`). Define clear, generous, finite numerical bounds.\n    *   Parameter 1 (e.g., `beta_sensitivity`): Should represent the linear sensitivity to the *deviation from fair share* (`split_perc_self - fair_perc_self_calc`). This could be positive (more than fair is good) or negative, so bounds should allow both positive and negative values, e.g., `[-10.0, 10.0]`.\n    *   Parameter 2 (e.g., `beta_intercept`): Should represent a baseline utility or general bias, independent of the specific offer/fairness deviation. Bounds should allow both positive and negative values and be generous, e.g., `[-100.0, 100.0]`.\n*   **Calculated Variables:** Include descriptions for *all* calculated variables used in the model (including `U_accept`, `sum_tokens`, `fair_perc_self_calc`, and the function `IF`) with `source: \"calculated\"`. Include descriptions for all data variables used as inputs (`token_self`, `token_opp`, `split_perc_self`) with `source: \"data\"`.\n*   **Variable Descriptions:** Provide variable descriptions in JSON format between <VARIABLES> tags for *all* variables in the <MODEL> formula. Include source, range (with inclusive flags), distribution (if applicable), and learnable status. Remember variable names must exactly match the model formula and data descriptions.\n*   **Target Variable:** Specify \"accept\" using <target_variable> tags.\n*   **Summary:** Provide a concise summary between <SUMMARY> tags. Describe the model's core idea (utility is a linear function of the deviation from the fair share plus a baseline). **Crucially, explain *how* this specific structure with a slope parameter (`beta_sensitivity`) scaling the deviation (`split_perc_self - fair_perc_self_calc`) and an intercept parameter (`beta_intercept`) is designed to create mathematically distinct and separable influence profiles for the two learnable parameters.** Highlight that `beta_sensitivity` governs the rate at which utility changes as offers become more or less fair relative to the fairness point, while `beta_intercept` provides a constant offset to utility, and how this fundamental linear slope/intercept structure based on fairness deviation is intended to improve robust joint parameter identifiability compared to previous attempts.\n\nAvailable Data Variables:\n- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.\n(Note: Use `split_perc_self` for the participant's proposed percentage share).\n\nPlease think through this step by step, then provide your model specification and variable descriptions. Remember that robust parameter identifiability for *both* learnable parameters (>= 0.7 recovery for both) is the absolute priority. Your goal is to find a structure where both parameters' influences are clearly distinguishable and interact in a way that allows for reliable estimation for *both* parameters, ideally leading to improved fit metrics (BIC and accuracy) as a result of capturing the underlying process more accurately. Avoid structures that have failed recovery previously. Explore this specific additive structure centering around deviation from fairness as detailed above, focusing on how this structural separation creates distinct influence profiles for the two betas. Feel free to propose alternative mathematically distinct ways of combining influences if this exact formulation doesn't seem optimal, as long as the two parameters have demonstrably separable roles impacting utility (e.g., one scaling a deviation/ratio term, the other acting as an offset or scaling a different, non-collinear component).\n</previous_instructions>",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: Okay, here are the improved instructions for the next run (Run 93 of 100).\n\nTask Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\nproposed_amount = when participant is the proposer, what is the amount proposed to the opponent (in \u00a3)\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified).\n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able to be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal.\n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied.\n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1:\n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = beta + epsilon*E + eta*N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe variable names you choose in your <VARIABLES> section must be used exactly as specified in the <MODEL> formula. Please ensure these names can be used directly in Python code (e.g., avoid Python reserved words). Also, ensure consistency between the variable names in your JSON and the variable names in the provided data description where applicable (e.g., use `split_perc_self` exactly as provided).\n\nModel Type:\nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\nInstructions: Okay, here are the improved instructions for the next run (Run 93 of 100).\n\nThe previous attempt using the additive structure with a log-transformed penalty (`U_accept = beta_value * split_perc_self - beta_penalty * log(1.0 + loss_below_fair)`) resulted in very poor parameter recovery (`beta_value`: 0.573, `beta_penalty`: 0.001). Neither parameter met the recovery threshold of 0.7. This indicates that the specific structural choice in the last run failed to create mathematically separable influences for both parameters, making them difficult to estimate reliably from the data. Robust parameter identifiability (recovery >= 0.7 for *all* learnable parameters simultaneously) remains the **unwavering primary objective**.\n\nGiven the persistent challenges in parameter recovery, we need to explore a fundamentally different structural approach that ensures the influence of the two learnable parameters is distinct and strongly identifiable. The failure of previous models that scaled `split_perc_self` directly with one parameter suggests this might be problematic for identifiability when another parameter captures fairness.\n\nLet's explore a structure where the utility is directly tied to the *deviation* from the calculated fair share, rather than the absolute proposed share. We can then add an intercept term to capture a general bias or baseline utility. This structure uses two parameters with clearly separable mathematical roles: a slope parameter affecting the relationship between utility and fairness deviation, and an intercept parameter shifting the entire utility function.\n\nHere are the standard calculation steps for necessary intermediate variables. You *must* include these first before defining `U_accept`:\n1.  Calculate `sum_tokens = token_self + token_opp`.\n2.  Calculate `fair_perc_self_calc` handling the `sum_tokens == 0` case (defaulting to 50.0), using `token_self` and `token_opp` from the data. Use `IF` for the conditional calculation.\n\nNow, design a novel formula for `U_accept` using `split_perc_self`, `fair_perc_self_calc`, and exactly two learnable parameters. The formula for `U_accept` must implement the principle that utility is a linear function of the *deviation* from the fair share, plus a constant offset.\n\nA suggested specific structure to explore that follows this principle is:\n`U_accept = beta_sensitivity * (split_perc_self - fair_perc_self_calc) + beta_intercept`\n\nThis structure represents utility as a linear sensitivity (`beta_sensitivity`) to the difference between the proposed share (`split_perc_self`) and the calculated fair share (`fair_perc_self_calc`), plus a baseline utility (`beta_intercept`). This creates two mathematically distinct influences: `beta_sensitivity` scales the deviation from fairness, affecting the *slope* of the utility function relative to this deviation, while `beta_intercept` acts as a constant *offset*, shifting the entire function up or down. This clear separation between a slope parameter and an intercept parameter based on deviation from fairness is intended to improve robust joint parameter identifiability compared to previous attempts by ensuring their effects on the utility are mathematically orthogonal (slope vs. intercept).\n\n*   **Key Inputs & Calculated Variables:** Use `split_perc_self`, `token_self`, `token_opp` as data variables. Calculate `sum_tokens`, `fair_perc_self_calc`, and `U_accept`. Include calculation steps for derived variables *before* the formula for `U_accept`.\n*   **Learnable Parameters:** Exactly **2 learnable parameters**. Choose descriptive, Python-safe names (e.g., `beta_sensitivity`, `beta_intercept`). Define clear, generous, finite numerical bounds.\n    *   Parameter 1 (e.g., `beta_sensitivity`): Should represent the linear sensitivity to the *deviation from fair share* (`split_perc_self - fair_perc_self_calc`). This could be positive (more than fair is good) or negative, so bounds should allow both positive and negative values, e.g., `[-10.0, 10.0]`.\n    *   Parameter 2 (e.g., `beta_intercept`): Should represent a baseline utility or general bias, independent of the specific offer/fairness deviation. Bounds should allow both positive and negative values and be generous, e.g., `[-100.0, 100.0]`.\n*   **Calculated Variables:** Include descriptions for *all* calculated variables used in the model (including `U_accept`, `sum_tokens`, `fair_perc_self_calc`, and the function `IF`) with `source: \"calculated\"`. Include descriptions for all data variables used as inputs (`token_self`, `token_opp`, `split_perc_self`) with `source: \"data\"`.\n*   **Variable Descriptions:** Provide variable descriptions in JSON format between <VARIABLES> tags for *all* variables in the <MODEL> formula. Include source, range (with inclusive flags), distribution (if applicable), and learnable status. Remember variable names must exactly match the model formula and data descriptions.\n*   **Target Variable:** Specify \"accept\" using <target_variable> tags.\n*   **Summary:** Provide a concise summary between <SUMMARY> tags. Describe the model's core idea (utility is a linear function of the deviation from the fair share plus a baseline). **Crucially, explain *how* this specific structure with a slope parameter (`beta_sensitivity`) scaling the deviation (`split_perc_self - fair_perc_self_calc`) and an intercept parameter (`beta_intercept`) is designed to create mathematically distinct and separable influence profiles for the two learnable parameters.** Highlight that `beta_sensitivity` governs the rate at which utility changes as offers become more or less fair relative to the fairness point, while `beta_intercept` provides a constant offset to utility, and how this fundamental linear slope/intercept structure based on fairness deviation is intended to improve robust joint parameter identifiability compared to previous attempts.\n\nAvailable Data Variables:\n- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.\n(Note: Use `split_perc_self` for the participant's proposed percentage share).\n\nPlease think through this step by step, then provide your model specification and variable descriptions. Remember that robust parameter identifiability for *both* learnable parameters (>= 0.7 recovery for both) is the absolute priority. Your goal is to find a structure where both parameters' influences are clearly distinguishable and interact in a way that allows for reliable estimation for *both* parameters, ideally leading to improved fit metrics (BIC and accuracy) as a result of capturing the underlying process more accurately. Avoid structures that have failed recovery previously. Explore this specific additive structure centering around deviation from fairness as detailed above, focusing on how this structural separation creates distinct influence profiles for the two betas. Feel free to propose alternative mathematically distinct ways of combining influences if this exact formulation doesn't seem optimal, as long as the two parameters have demonstrably separable roles impacting utility (e.g., one scaling a deviation/ratio term, the other acting as an offset or scaling a different, non-collinear component).\n</previous_instructions>\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<MODEL>\nsum_tokens = token_self + token_opp\nfair_perc_self_calc = IF(sum_tokens == 0, 50.0, (token_self / sum_tokens) * 100.0)\nU_accept = beta_sensitivity * (split_perc_self - fair_perc_self_calc) + beta_intercept\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The proposed share for the participant in percentage\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"sum_tokens\": {\n      \"description\": \"Total number of tokens found by participant and opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"IF\": {\n      \"description\": \"Conditional function: IF(condition, value_if_true, value_if_false)\",\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fair_perc_self_calc\": {\n      \"description\": \"Calculated fair percentage share for the participant based on token contribution. Defaults to 50% if sum_tokens is 0.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_sensitivity\": {\n      \"description\": \"Parameter representing the sensitivity of utility to the deviation from the calculated fair share.\",\n      \"range\": {\n        \"min\": -10.0,\n        \"max\": 10.0\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_intercept\": {\n      \"description\": \"Parameter representing the baseline utility or general bias towards accepting, independent of the specific offer relative to fairness.\",\n      \"range\": {\n        \"min\": -100.0,\n        \"max\": 100.0\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U_accept\": {\n      \"description\": \"Utility of accepting the proposed offer.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<target_variable>accept</target_variable>\n<SUMMARY>\nA linear utility model predicting responder acceptance based on the proposed share relative to a calculated fair share. Utility (U_accept) is modeled as a linear function of the deviation of the proposed share for the participant (split_perc_self) from the calculated fair share (fair_perc_self_calc), plus a constant intercept. The model uses two learnable parameters: beta_sensitivity, which scales the influence of the fairness deviation (acting as a slope), and beta_intercept, which provides a baseline utility offset. This structural separation between a slope parameter applied to a deviation term and an independent intercept parameter is designed to create mathematically distinct and separable influences on the utility function, thereby improving robust joint parameter identifiability compared to previous model attempts. Beta_sensitivity captures how strongly utility changes with fairness deviations, while beta_intercept captures a general propensity to accept regardless of the offer's relative fairness.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['beta_sensitivity', 'beta_intercept']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                sum_tokens = token_self + token_opp\nfair_perc_self_calc = IF(sum_tokens == 0, 50.0, (token_self / sum_tokens) * 100.0)\nU_accept = beta_sensitivity * (split_perc_self - fair_perc_self_calc) + beta_intercept\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The proposed share for the participant in percentage\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"sum_tokens\": {\n      \"description\": \"Total number of tokens found by participant and opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"IF\": {\n      \"description\": \"Conditional function: IF(condition, value_if_true, value_if_false)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fair_perc_self_calc\": {\n      \"description\": \"Calculated fair percentage share for the participant based on token contribution. Defaults to 50% if sum_tokens is 0.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_sensitivity\": {\n      \"description\": \"Parameter representing the sensitivity of utility to the deviation from the calculated fair share.\",\n      \"range\": {\n        \"min\": -10.0,\n        \"max\": 10.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_intercept\": {\n      \"description\": \"Parameter representing the baseline utility or general bias towards accepting, independent of the specific offer relative to fairness.\",\n      \"range\": {\n        \"min\": -100.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U_accept\": {\n      \"description\": \"Utility of accepting the proposed offer.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, beta_sensitivity=1.0, beta_intercept=0.0):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        split_perc_self = trial.get(\"splitperc_self\", 50.0)\n\n        sum_tokens = token_self + token_opp\n\n        if sum_tokens == 0:\n            fair_perc_self_calc = 50.0\n        else:\n            fair_perc_self_calc = (token_self / sum_tokens) * 100.0\n\n        U_accept = beta_sensitivity * (split_perc_self - fair_perc_self_calc) + beta_intercept\n        model_predictions.append(U_accept)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n```",
      "timestamp": 1746104705.2331789
    }
  ],
  "learnable_parameters": {
    "beta_sensitivity": {
      "description": "Parameter representing the sensitivity of utility to the deviation from the calculated fair share.",
      "range": {
        "min": -10.0,
        "max": 10.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta_intercept": {
      "description": "Parameter representing the baseline utility or general bias towards accepting, independent of the specific offer relative to fairness.",
      "range": {
        "min": -100.0,
        "max": 100.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "sum_tokens = token_self + token_opp\nfair_perc_self_calc = IF(sum_tokens == 0, 50.0, (token_self / sum_tokens) * 100.0)\nU_accept = beta_sensitivity * (split_perc_self - fair_perc_self_calc) + beta_intercept",
  "variable_descriptions": {
    "token_self": {
      "description": "Number of tokens found by the participant",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "split_perc_self": {
      "description": "The proposed share for the participant in percentage",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "sum_tokens": {
      "description": "Total number of tokens found by participant and opponent",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "IF": {
      "description": "Conditional function: IF(condition, value_if_true, value_if_false)",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "fair_perc_self_calc": {
      "description": "Calculated fair percentage share for the participant based on token contribution. Defaults to 50% if sum_tokens is 0.",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "beta_sensitivity": {
      "description": "Parameter representing the sensitivity of utility to the deviation from the calculated fair share.",
      "range": {
        "min": -10.0,
        "max": 10.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta_intercept": {
      "description": "Parameter representing the baseline utility or general bias towards accepting, independent of the specific offer relative to fairness.",
      "range": {
        "min": -100.0,
        "max": 100.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "U_accept": {
      "description": "Utility of accepting the proposed offer.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "A linear utility model predicting responder acceptance based on the proposed share relative to a calculated fair share. Utility (U_accept) is modeled as a linear function of the deviation of the proposed share for the participant (split_perc_self) from the calculated fair share (fair_perc_self_calc), plus a constant intercept. The model uses two learnable parameters: beta_sensitivity, which scales the influence of the fairness deviation (acting as a slope), and beta_intercept, which provides a baseline utility offset. This structural separation between a slope parameter applied to a deviation term and an independent intercept parameter is designed to create mathematically distinct and separable influences on the utility function, thereby improving robust joint parameter identifiability compared to previous model attempts. Beta_sensitivity captures how strongly utility changes with fairness deviations, while beta_intercept captures a general propensity to accept regardless of the offer's relative fairness.",
  "target_variable": "accept",
  "full_reasoning": "<MODEL>\nsum_tokens = token_self + token_opp\nfair_perc_self_calc = IF(sum_tokens == 0, 50.0, (token_self / sum_tokens) * 100.0)\nU_accept = beta_sensitivity * (split_perc_self - fair_perc_self_calc) + beta_intercept\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The proposed share for the participant in percentage\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"sum_tokens\": {\n      \"description\": \"Total number of tokens found by participant and opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"IF\": {\n      \"description\": \"Conditional function: IF(condition, value_if_true, value_if_false)\",\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fair_perc_self_calc\": {\n      \"description\": \"Calculated fair percentage share for the participant based on token contribution. Defaults to 50% if sum_tokens is 0.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_sensitivity\": {\n      \"description\": \"Parameter representing the sensitivity of utility to the deviation from the calculated fair share.\",\n      \"range\": {\n        \"min\": -10.0,\n        \"max\": 10.0\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_intercept\": {\n      \"description\": \"Parameter representing the baseline utility or general bias towards accepting, independent of the specific offer relative to fairness.\",\n      \"range\": {\n        \"min\": -100.0,\n        \"max\": 100.0\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U_accept\": {\n      \"description\": \"Utility of accepting the proposed offer.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<target_variable>accept</target_variable>\n<SUMMARY>\nA linear utility model predicting responder acceptance based on the proposed share relative to a calculated fair share. Utility (U_accept) is modeled as a linear function of the deviation of the proposed share for the participant (split_perc_self) from the calculated fair share (fair_perc_self_calc), plus a constant intercept. The model uses two learnable parameters: beta_sensitivity, which scales the influence of the fairness deviation (acting as a slope), and beta_intercept, which provides a baseline utility offset. This structural separation between a slope parameter applied to a deviation term and an independent intercept parameter is designed to create mathematically distinct and separable influences on the utility function, thereby improving robust joint parameter identifiability compared to previous model attempts. Beta_sensitivity captures how strongly utility changes with fairness deviations, while beta_intercept captures a general propensity to accept regardless of the offer's relative fairness.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: sum_tokens = token_self + token_opp\nfair_perc_self_calc = IF(sum_tokens == 0, 50.0, (token_self / sum_tokens) * 100.0)\nU_accept = beta_sensitivity * (split_perc_self - fair_perc_self_calc) + beta_intercept\nSummary: A linear utility model predicting responder acceptance based on the proposed share relative to a calculated fair share. Utility (U_accept) is modeled as a linear function of the deviation of the proposed share for the participant (split_perc_self) from the calculated fair share (fair_perc_self_calc), plus a constant intercept. The model uses two learnable parameters: beta_sensitivity, which scales the influence of the fairness deviation (acting as a slope), and beta_intercept, which provides a baseline utility offset. This structural separation between a slope parameter applied to a deviation term and an independent intercept parameter is designed to create mathematically distinct and separable influences on the utility function, thereby improving robust joint parameter identifiability compared to previous model attempts. Beta_sensitivity captures how strongly utility changes with fairness deviations, while beta_intercept captures a general propensity to accept regardless of the offer's relative fairness.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, beta_sensitivity=1.0, beta_intercept=0.0):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        split_perc_self = trial.get(\"splitperc_self\", 50.0)\n\n        sum_tokens = token_self + token_opp\n\n        if sum_tokens == 0:\n            fair_perc_self_calc = 50.0\n        else:\n            fair_perc_self_calc = (token_self / sum_tokens) * 100.0\n\n        U_accept = beta_sensitivity * (split_perc_self - fair_perc_self_calc) + beta_intercept\n        model_predictions.append(U_accept)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.7841880341880342,
  "group_accuracies": {
    "Control": 0.8152454780361758,
    "Cocaine": 0.7563657407407407
  },
  "group_parameter_averages": {
    "Control": {
      "beta_sensitivity": 0.682567624166134,
      "beta_intercept": 21.775428311735066
    },
    "Cocaine": {
      "beta_sensitivity": 0.5436588823524691,
      "beta_intercept": 22.657108527735975
    }
  },
  "fitting_results": [
    {
      "beta_sensitivity": 0.1210347870147464,
      "beta_intercept": -1.1476662386489782,
      "success": true,
      "log_likelihood": -7.230308461746998,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_sensitivity": 0.11877673458281775,
      "beta_intercept": 2.388226429412538,
      "success": true,
      "log_likelihood": -17.130826492299335,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_sensitivity": 0.3498945356872635,
      "beta_intercept": 7.4457836760405565,
      "success": true,
      "log_likelihood": -7.805437457012941,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_sensitivity": 0.13135736673073212,
      "beta_intercept": 2.069081872939094,
      "success": true,
      "log_likelihood": -15.926373628425383,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_sensitivity": 4.187151362918483,
      "beta_intercept": 81.18405011004089,
      "success": true,
      "log_likelihood": -21.22438605573356,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_sensitivity": 0.13794577348602713,
      "beta_intercept": 3.772211211641512,
      "success": true,
      "log_likelihood": -14.92393750547251,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_sensitivity": -0.20964968478189216,
      "beta_intercept": 17.577942244371794,
      "success": true,
      "log_likelihood": -9.579530364838545e-07,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_sensitivity": 0.1507674970101922,
      "beta_intercept": 4.316619611283459,
      "success": true,
      "log_likelihood": -13.771835175376117,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_sensitivity": -0.03330221844540641,
      "beta_intercept": 17.116493411772815,
      "success": true,
      "log_likelihood": -7.735479003170788e-07,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_sensitivity": 10.0,
      "beta_intercept": -54.74833948563286,
      "success": true,
      "log_likelihood": -276.3102178239526,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_sensitivity": 0.475531315728027,
      "beta_intercept": 8.451990541072343,
      "success": true,
      "log_likelihood": -5.868836953377378,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_sensitivity": 6.0130592599198875,
      "beta_intercept": -49.775832686482296,
      "success": true,
      "log_likelihood": -69.07761476012693,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_sensitivity": 0.21370539326402935,
      "beta_intercept": 3.476557168339968,
      "success": true,
      "log_likelihood": -11.503835380724931,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_sensitivity": 0.921975678765774,
      "beta_intercept": 68.20387872790462,
      "success": true,
      "log_likelihood": 3.337094156378275e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_sensitivity": -0.5547608329720095,
      "beta_intercept": 36.166690687409414,
      "success": true,
      "log_likelihood": 3.597957265275625e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_sensitivity": -10.0,
      "beta_intercept": 29.28935140882937,
      "success": true,
      "log_likelihood": -46.05170127137046,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_sensitivity": -4.5477968316740345,
      "beta_intercept": 100.0,
      "success": true,
      "log_likelihood": 3.5691964937359045e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_sensitivity": -2.7457279175265947,
      "beta_intercept": 57.86716395742492,
      "success": true,
      "log_likelihood": -115.12926017819501,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_sensitivity": 0.2982539180043353,
      "beta_intercept": 12.178416709969781,
      "success": true,
      "log_likelihood": -5.0370681207286605,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_sensitivity": -0.09057617104672361,
      "beta_intercept": 14.752991952201299,
      "success": true,
      "log_likelihood": -5.967159804310404e-06,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_sensitivity": 0.1712580090486426,
      "beta_intercept": 3.8987460052523693,
      "success": true,
      "log_likelihood": -13.62465144973984,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_sensitivity": -10.0,
      "beta_intercept": 100.0,
      "success": true,
      "log_likelihood": -138.15510557664274,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_sensitivity": 10.0,
      "beta_intercept": 12.460203042016714,
      "success": true,
      "log_likelihood": -207.23266612437746,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_sensitivity": -0.07952341931191498,
      "beta_intercept": 21.39909828260147,
      "success": true,
      "log_likelihood": -382.6916251712263,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_sensitivity": 0.2006963045955786,
      "beta_intercept": 4.03242483350584,
      "success": true,
      "log_likelihood": -12.291892207537941,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_sensitivity": 0.16376659789876938,
      "beta_intercept": 3.9576803853102582,
      "success": true,
      "log_likelihood": -13.882515768625373,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_sensitivity": 0.11665619473713033,
      "beta_intercept": 2.69893814636226,
      "success": true,
      "log_likelihood": -17.14340451671183,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_sensitivity": 0.36486114854779195,
      "beta_intercept": 3.646510350248761,
      "success": true,
      "log_likelihood": -6.299207453715107,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_sensitivity": 0.14988466712256585,
      "beta_intercept": 6.5768744145505895,
      "success": true,
      "log_likelihood": -8.113595344982825,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_sensitivity": 0.5683043479037728,
      "beta_intercept": 77.94401893852262,
      "success": true,
      "log_likelihood": -184.20680743672378,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_sensitivity": -3.105123566612475,
      "beta_intercept": 65.97128193130806,
      "success": true,
      "log_likelihood": -6.642362541141337e-07,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_sensitivity": 10.0,
      "beta_intercept": -7.894768509706523e-06,
      "success": true,
      "log_likelihood": -47.43799621741641,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_sensitivity": 0.05166937981412904,
      "beta_intercept": 0.6521992572959934,
      "success": true,
      "log_likelihood": -22.132389017066803,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_sensitivity": 0.12181317448927909,
      "beta_intercept": 1.7177085124496765,
      "success": true,
      "log_likelihood": -16.340695592575504,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_sensitivity": 0.5703665942284672,
      "beta_intercept": 100.0,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_sensitivity": 0.08750951845810825,
      "beta_intercept": 2.532716679365199,
      "success": true,
      "log_likelihood": -18.589364877384508,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_sensitivity": 0.17285711829438943,
      "beta_intercept": 39.846017754836566,
      "success": true,
      "log_likelihood": -253.28368526873538,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_sensitivity": 1.5404376093981682,
      "beta_intercept": -67.2435782791984,
      "success": true,
      "log_likelihood": -414.4653167282866,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_sensitivity": 3.675994730046648,
      "beta_intercept": 96.51471167616207,
      "success": true,
      "log_likelihood": -161.48276330551218,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_sensitivity": 0.08803861334507324,
      "beta_intercept": 4.85431716846033,
      "success": true,
      "log_likelihood": -8.847143056927402,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_sensitivity": -0.4466998046670305,
      "beta_intercept": 49.06487047434621,
      "success": true,
      "log_likelihood": -322.3619130169666,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_sensitivity": 10.0,
      "beta_intercept": 41.67772803788678,
      "success": true,
      "log_likelihood": -46.0526632776427,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_sensitivity": 6.55141016327897e-07,
      "beta_intercept": 3.5553463782027954,
      "success": true,
      "log_likelihood": -4.569499625245684,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_sensitivity": 0.08362911120139056,
      "beta_intercept": 1.978900189365511,
      "success": true,
      "log_likelihood": -19.781564505240386,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_sensitivity": 0.12921405754805815,
      "beta_intercept": 3.3579543731682895,
      "success": true,
      "log_likelihood": -15.814356573866743,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_sensitivity": 0.05925706254518232,
      "beta_intercept": 2.308650093944275,
      "success": true,
      "log_likelihood": -18.877093437031125,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_sensitivity": -1.5182297386718258,
      "beta_intercept": 67.33785092018852,
      "success": true,
      "log_likelihood": -391.43946580708797,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_sensitivity": 0.0806049588247611,
      "beta_intercept": 1.0266393643704759,
      "success": true,
      "log_likelihood": -19.48543696207796,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_sensitivity": 0.23266441676184865,
      "beta_intercept": 3.797895403963152,
      "success": true,
      "log_likelihood": -10.760777493764827,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_sensitivity": 0.026251648466578306,
      "beta_intercept": 0.6412147105807886,
      "success": true,
      "log_likelihood": -24.209363041480913,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_sensitivity": -10.0,
      "beta_intercept": 100.0,
      "success": true,
      "log_likelihood": -276.3102111568857,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_sensitivity": 0.0729595609651656,
      "beta_intercept": -0.770221956453467,
      "success": true,
      "log_likelihood": -12.303335299780604,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_sensitivity": 0.07028666147953659,
      "beta_intercept": 1.550834184615304,
      "success": true,
      "log_likelihood": -21.02770460192524,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_sensitivity": 0.02702265279235495,
      "beta_intercept": 0.8914147562208856,
      "success": true,
      "log_likelihood": -23.743444184613754,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_sensitivity": 1.45909177748472,
      "beta_intercept": 28.229050045736415,
      "success": true,
      "log_likelihood": -84.42206667951284,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_sensitivity": 0.3818456291421769,
      "beta_intercept": 4.888694900547696,
      "success": true,
      "log_likelihood": -6.485186863205309,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_sensitivity": 0.1773862826637861,
      "beta_intercept": 1.5966609364211302,
      "success": true,
      "log_likelihood": -11.62435325956949,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_sensitivity": -0.4535099757223371,
      "beta_intercept": 62.96309801683219,
      "success": true,
      "log_likelihood": -92.1034037165618,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_sensitivity": 0.10624284906099742,
      "beta_intercept": -0.8087122696083245,
      "success": true,
      "log_likelihood": -9.326954208287324,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_sensitivity": -9.05160679850052,
      "beta_intercept": 100.0,
      "success": true,
      "log_likelihood": -184.20680743672295,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_sensitivity": 5.17011456710841,
      "beta_intercept": 98.24844604802675,
      "success": true,
      "log_likelihood": -209.9871586926624,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_sensitivity": 0.13341926757610315,
      "beta_intercept": 2.682371438790061,
      "success": true,
      "log_likelihood": -16.081992948972758,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_sensitivity": 6.181462759240757,
      "beta_intercept": -51.00038636934844,
      "success": true,
      "log_likelihood": -46.05175782827675,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_sensitivity": 2.3844229999611275,
      "beta_intercept": 60.140470645686584,
      "success": true,
      "log_likelihood": -180.60254964424294,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_sensitivity": 0.14840278306511234,
      "beta_intercept": 0.7457238417862536,
      "success": true,
      "log_likelihood": -11.772620969994394,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_sensitivity": 0.11163583780323161,
      "beta_intercept": 2.589096727045353,
      "success": true,
      "log_likelihood": -17.523797606718873,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_sensitivity": -6.067098162178529,
      "beta_intercept": 50.080662905252886,
      "success": true,
      "log_likelihood": -92.10346922218373,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_sensitivity": 0.12042126136134573,
      "beta_intercept": 5.1969438459646105,
      "success": true,
      "log_likelihood": -10.365547445605786,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_sensitivity": 0.08531506306756838,
      "beta_intercept": 2.0155909978547606,
      "success": true,
      "log_likelihood": -19.640780560233708,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_sensitivity": -10.0,
      "beta_intercept": 100.0,
      "success": true,
      "log_likelihood": -92.10340371656183,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_sensitivity": 10.0,
      "beta_intercept": 16.78565012801276,
      "success": true,
      "log_likelihood": -2.2914779114636472e-07,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_sensitivity": 0.07043601459055471,
      "beta_intercept": -0.7956015119159877,
      "success": true,
      "log_likelihood": -12.422830803732534,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_sensitivity": 0.10959346725567853,
      "beta_intercept": 2.3738759933216707,
      "success": true,
      "log_likelihood": -17.792291871702016,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_sensitivity": 0.06639470887733263,
      "beta_intercept": 2.839063759239378,
      "success": true,
      "log_likelihood": -16.571080017870333,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_sensitivity": 4.452485442426044,
      "beta_intercept": 80.1237487485097,
      "success": true,
      "log_likelihood": -226.3671709142408,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_sensitivity": 1.7297631652318861,
      "beta_intercept": 54.0526824137933,
      "success": true,
      "log_likelihood": -114.10091132813243,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_sensitivity": -3.098447799957963,
      "beta_intercept": 62.22886080168394,
      "success": true,
      "log_likelihood": -46.05172707134873,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_sensitivity": 8.653835129275473,
      "beta_intercept": -69.20034617693273,
      "success": true,
      "log_likelihood": -69.07756283472176,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_sensitivity": 2.303385505665621,
      "beta_intercept": 66.45403688057381,
      "success": true,
      "log_likelihood": -270.984393789928,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_sensitivity": 10.0,
      "beta_intercept": -80.76965436388515,
      "success": true,
      "log_likelihood": -46.05170260663436,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_sensitivity": 0.034391207486637,
      "beta_intercept": 0.80764153441229,
      "success": true,
      "log_likelihood": -23.755220897989137,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_sensitivity": -0.010292567384181116,
      "beta_intercept": 2.202373372767594,
      "success": true,
      "log_likelihood": -10.291735644063493,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_sensitivity": 8.448452393818826,
      "beta_intercept": -9.880318600669565e-07,
      "success": true,
      "log_likelihood": -116.51554900301109,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_sensitivity": 1.370284830432039,
      "beta_intercept": 32.95660191588925,
      "success": true,
      "log_likelihood": -77.33564227313929,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_sensitivity": 0.03342408228677507,
      "beta_intercept": 1.1493794140113387,
      "success": true,
      "log_likelihood": -23.026838991958414,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_sensitivity": 10.0,
      "beta_intercept": 20.586725955724727,
      "success": true,
      "log_likelihood": -43.5289429377024,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_sensitivity": -2.786335558814777,
      "beta_intercept": 93.45773802888277,
      "success": true,
      "log_likelihood": -253.28436022684514,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_sensitivity": 2.2712367297087543,
      "beta_intercept": 20.35466689975167,
      "success": true,
      "log_likelihood": -66.73563544522041,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_sensitivity": -0.21787576042657442,
      "beta_intercept": 45.97458405510955,
      "success": true,
      "log_likelihood": -46.05170185648088,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_sensitivity": 0.09252093033022948,
      "beta_intercept": 1.7043809840507407,
      "success": true,
      "log_likelihood": -19.15687259292617,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_sensitivity": -7.578832100930839,
      "beta_intercept": 84.5659577354063,
      "success": true,
      "log_likelihood": -276.31021114948777,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "beta_sensitivity": {
        "r": 0.8928922914014249,
        "p": 9.856151080148685e-36
      },
      "beta_intercept": {
        "r": 0.7862240491290533,
        "p": 3.310347114345569e-22
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 152.6563463383788,
  "bic_Control": 143.26920293027865,
  "bic_Cocaine": 161.0656623081352,
  "bic_results": {
    "average_bic": 152.6563463383788,
    "individual_bics": [
      21.627654800406216,
      41.42869086151089,
      22.777912790938103,
      39.01978513376299,
      49.61580998837934,
      37.01491288785724,
      7.167039792818293,
      34.710708227664455,
      7.167039424008021,
      559.7874735248174,
      18.904711783666976,
      145.3222673971661,
      30.174708638362084,
      7.1670378702380315,
      7.167037869716306,
      99.27044041965314,
      7.167037869773827,
      237.42555823330224,
      17.241174118369543,
      7.167049811231829,
      34.4163407763919,
      283.4772490301977,
      421.63237012566714,
      772.5502882193648,
      31.7508222919881,
      34.93206941416297,
      41.453846910335876,
      19.765452784342436,
      23.39422856687787,
      375.5806527503598,
      7.167039205384728,
      102.04303031174504,
      51.431815911045824,
      39.848429062063225,
      7.167037869712219,
      44.345767631681234,
      513.734408414383,
      836.0976713334854,
      330.1325644879366,
      24.861323990767026,
      651.8908639108454,
      99.27236443219762,
      16.306037127403588,
      46.73016688739299,
      38.7957510246457,
      44.92122475097447,
      790.0459694910882,
      46.137911801068135,
      28.688592864441873,
      55.58576395987404,
      559.7874601906836,
      31.77370847647343,
      49.2224470807627,
      54.653926246139726,
      176.0111712359379,
      20.13741160332284,
      30.415744396051203,
      191.37384531003582,
      25.82094629348687,
      375.5806527503581,
      427.141355262237,
      39.331023774857734,
      99.27055353346572,
      368.3721371653981,
      30.71227981690101,
      42.21463309034996,
      191.37397632127968,
      27.898132768123794,
      46.448598997379634,
      191.37384531003588,
      7.167038335207802,
      32.012699484377286,
      42.75162162031625,
      40.309197912652884,
      459.9013797053938,
      235.36886053317707,
      99.27049201960968,
      145.32216354635574,
      549.1358254567682,
      99.27044309018093,
      54.67747967289049,
      27.750509165039205,
      240.1981358829344,
      161.8383224231908,
      53.220715860829046,
      94.22492375231703,
      513.7357583306025,
      140.63830876735304,
      99.27044158987398,
      45.48078306276456,
      559.7874601758878
    ],
    "group_enabled": true,
    "group_bics": {
      "Control": [
        21.627654800406216,
        41.42869086151089,
        22.777912790938103,
        39.01978513376299,
        49.61580998837934,
        37.01491288785724,
        7.167039792818293,
        34.710708227664455,
        7.167039424008021,
        559.7874735248174,
        18.904711783666976,
        145.3222673971661,
        30.174708638362084,
        7.1670378702380315,
        7.167037869716306,
        99.27044041965314,
        7.167037869773827,
        237.42555823330224,
        17.241174118369543,
        7.167049811231829,
        34.4163407763919,
        283.4772490301977,
        421.63237012566714,
        772.5502882193648,
        31.7508222919881,
        34.93206941416297,
        41.453846910335876,
        19.765452784342436,
        23.39422856687787,
        375.5806527503598,
        7.167039205384728,
        102.04303031174504,
        51.431815911045824,
        39.848429062063225,
        7.167037869712219,
        44.345767631681234,
        513.734408414383,
        836.0976713334854,
        330.1325644879366,
        24.861323990767026,
        651.8908639108454,
        99.27236443219762,
        16.306037127403588
      ],
      "Cocaine": [
        46.73016688739299,
        38.7957510246457,
        44.92122475097447,
        790.0459694910882,
        46.137911801068135,
        28.688592864441873,
        55.58576395987404,
        559.7874601906836,
        31.77370847647343,
        49.2224470807627,
        54.653926246139726,
        176.0111712359379,
        20.13741160332284,
        30.415744396051203,
        191.37384531003582,
        25.82094629348687,
        375.5806527503581,
        427.141355262237,
        39.331023774857734,
        99.27055353346572,
        368.3721371653981,
        30.71227981690101,
        42.21463309034996,
        191.37397632127968,
        27.898132768123794,
        46.448598997379634,
        191.37384531003588,
        7.167038335207802,
        32.012699484377286,
        42.75162162031625,
        40.309197912652884,
        459.9013797053938,
        235.36886053317707,
        99.27049201960968,
        145.32216354635574,
        549.1358254567682,
        99.27044309018093,
        54.67747967289049,
        27.750509165039205,
        240.1981358829344,
        161.8383224231908,
        53.220715860829046,
        94.22492375231703,
        513.7357583306025,
        140.63830876735304,
        99.27044158987398,
        45.48078306276456,
        559.7874601758878
      ]
    },
    "num_parameters": 2,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- beta_sensitivity: r = 0.893\n- beta_intercept: r = 0.786",
  "previous_models": [
    "Specification: sum_tokens = token_self + token_opp\nfair_perc_self_calc = IF(sum_tokens == 0, 50.0, (token_self / sum_tokens) * 100.0)\nU_accept = beta_sensitivity * (split_perc_self - fair_perc_self_calc) + beta_intercept\nSummary: A linear utility model predicting responder acceptance based on the proposed share relative to a calculated fair share. Utility (U_accept) is modeled as a linear function of the deviation of the proposed share for the participant (split_perc_self) from the calculated fair share (fair_perc_self_calc), plus a constant intercept. The model uses two learnable parameters: beta_sensitivity, which scales the influence of the fairness deviation (acting as a slope), and beta_intercept, which provides a baseline utility offset. This structural separation between a slope parameter applied to a deviation term and an independent intercept parameter is designed to create mathematically distinct and separable influences on the utility function, thereby improving robust joint parameter identifiability compared to previous model attempts. Beta_sensitivity captures how strongly utility changes with fairness deviations, while beta_intercept captures a general propensity to accept regardless of the offer's relative fairness.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 152.6563463383788\nOverall Accuracy: 0.7842\nGroup Accuracies:\n- Control: 0.8152\n- Cocaine: 0.7564\n\nParameter Recovery:\n- beta_sensitivity: r = 0.893\n- beta_intercept: r = 0.786"
  ]
}