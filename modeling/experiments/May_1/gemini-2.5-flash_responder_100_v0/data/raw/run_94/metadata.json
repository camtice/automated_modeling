{
  "task_description": "In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "Okay, here are the improved instructions for the next run (Run 94 of 100).\n\nTask Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\nproposed_amount = when participant is the proposer, what is the amount proposed to the opponent (in \u00a3)\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified).\n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy. Specifically, *all* learnable parameters must have a parameter recovery value of >= 0.7.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able to be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal.\n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied.\n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1:\n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = beta + epsilon*E + eta*N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\"min\": 0, \"max\": 1},\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\"min\": \"-inf\", \"max\": \"inf\"},\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\"min\": \"-inf\", \"max\": \"inf\"},\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\"min\": 0, \"max\": 1, \"exclusive_max\": true},\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe variable names you choose in your <VARIABLES> section must be used exactly as specified in the <MODEL> formula. Please ensure these names can be used directly in Python code (e.g., avoid Python reserved words). Also, ensure consistency between the variable names in your JSON and the variable names in the provided data description where applicable (e.g., use `split_perc_self` exactly as provided).\n\nModel Type:\nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\nInstructions: Okay, here are the improved instructions for the next run (Run 94 of 100).\n\nThe previous attempt using a linear model based on deviation from fairness plus an intercept achieved robust parameter recovery (> 0.7 for both learnable parameters). This is a significant step towards finding a usable model structure. Now, the goal is to build on this success and explore variations that might capture responder behavior even better, aiming to improve BIC (lower is better) and accuracy (higher is better), *while strictly maintaining* the robust parameter identifiability achieved in the last run (recovery >= 0.7 for *all* learnable parameters). Robust parameter identifiability remains the **unwavering primary objective**.\n\nGiven the success of models where parameters have clearly separable roles, we need to explore alternative structural approaches that maintain this separation but potentially incorporate more nuance or additional relevant variables from the dataset.\n\nYou *must* include these standard calculation steps first before defining `U_accept`:\n1.  Calculate `sum_tokens = token_self + token_opp`.\n2.  Calculate `fair_perc_self_calc` handling the `sum_tokens == 0` case (defaulting to 50.0), using `token_self` and `token_opp` from the data. Use `IF` for the conditional calculation.\n\nNow, design a **novel** formula for `U_accept` using `split_perc_self`, `fair_perc_self_calc`, and potentially *other relevant data variables* from the list provided (like `token_self`, `token_opp`, `trial_type`, `combined_earning`), incorporating exactly **two learnable parameters**.\n\nFocus on structures where the two learnable parameters have demonstrably distinct and separable influences on the utility calculation, similar to how a slope and an intercept affect a linear function, but potentially applied to different aspects of the trial. Consider how different components of the offer or context might independently contribute to utility, each scaled by one of the parameters.\n\nThink creatively about how two parameters can capture distinct psychological processes related to fairness, self-interest, or context within the framework of the provided variables. Avoid simply adding a new term scaled by a third parameter. Instead, consider how your two parameters can scale different, potentially non-collinear, input variables or combinations of variables.\n\n*   **Key Inputs & Calculated Variables:** Use `split_perc_self`, `token_self`, `token_opp` as data variables, plus potentially others from the provided list. Calculate `sum_tokens`, `fair_perc_self_calc`, and `U_accept`. Include calculation steps for derived variables *before* the formula for `U_accept`. Include function definitions like `IF` if used.\n*   **Learnable Parameters:** Exactly **2 learnable parameters**. Choose descriptive, Python-safe names. Define clear, generous, finite numerical bounds. Ensure the parameters' roles are structurally distinct to promote identifiability. For example, one parameter could scale a term related to value/gain, while the other scales a term related to fairness or contextual factors, or one could scale an input linearly while the other scales a different input non-linearly, or one scales a deviation while the other scales the absolute value.\n*   **Calculated Variables:** Include descriptions for *all* calculated variables used in the model (including `U_accept`, `sum_tokens`, `fair_perc_self_calc`, and any functions like `IF`) with `source: \"calculated\"`. Include descriptions for all data variables used as inputs with `source: \"data\"`.\n*   **Variable Descriptions:** Provide variable descriptions in JSON format between <VARIABLES> tags for *all* variables in the <MODEL> formula. Include source, range (with inclusive flags), distribution (if applicable), and learnable status. Remember variable names must exactly match the model formula and data descriptions.\n*   **Target Variable:** Specify \"accept\" using <target_variable> tags.\n*   **Summary:** Provide a concise summary between <SUMMARY> tags. Describe the model's core idea. **Crucially, explain *how* the specific structure of your model, with exactly two learnable parameters, is designed to create mathematically distinct and separable influence profiles for those two parameters, in service of achieving robust joint parameter identifiability.** Highlight what aspect of the decision each parameter is intended to capture and how their mathematical roles differ.\n\nAvailable Data Variables:\n- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.\n(Note: Use `split_perc_self` for the participant's proposed percentage share).\n\nPlease think through this step by step, then provide your model specification and variable descriptions. Remember that robust parameter identifiability for *both* learnable parameters (>= 0.7 recovery for both) is the absolute priority. Your goal is to find a structure with *exactly two* parameters where their influences are clearly distinguishable and interact in a way that allows for reliable estimation, ideally leading to improved fit metrics (BIC and accuracy). Avoid structures that have failed recovery previously. Explore alternative ways to combine inputs and parameters beyond the simple linear deviation+intercept structure, ensuring the two parameters have fundamentally different mathematical roles. Be creative and think \"out of the box\" about how to use the available data variables and exactly two parameters to capture distinct aspects of the responder's decision process while maintaining identifiability.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: Okay, here are the improved instructions for the next run (Run 94 of 100).\n\nTask Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\nproposed_amount = when participant is the proposer, what is the amount proposed to the opponent (in \u00a3)\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified).\n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy. Specifically, *all* learnable parameters must have a parameter recovery value of >= 0.7.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able to be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal.\n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied.\n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1:\n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = beta + epsilon*E + eta*N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\"min\": 0, \"max\": 1},\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\"min\": \"-inf\", \"max\": \"inf\"},\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\"min\": \"-inf\", \"max\": \"inf\"},\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\"min\": 0, \"max\": 1, \"exclusive_max\": true},\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe variable names you choose in your <VARIABLES> section must be used exactly as specified in the <MODEL> formula. Please ensure these names can be used directly in Python code (e.g., avoid Python reserved words). Also, ensure consistency between the variable names in your JSON and the variable names in the provided data description where applicable (e.g., use `split_perc_self` exactly as provided).\n\nModel Type:\nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\nInstructions: Okay, here are the improved instructions for the next run (Run 94 of 100).\n\nThe previous attempt using a linear model based on deviation from fairness plus an intercept achieved robust parameter recovery (> 0.7 for both learnable parameters). This is a significant step towards finding a usable model structure. Now, the goal is to build on this success and explore variations that might capture responder behavior even better, aiming to improve BIC (lower is better) and accuracy (higher is better), *while strictly maintaining* the robust parameter identifiability achieved in the last run (recovery >= 0.7 for *all* learnable parameters). Robust parameter identifiability remains the **unwavering primary objective**.\n\nGiven the success of models where parameters have clearly separable roles, we need to explore alternative structural approaches that maintain this separation but potentially incorporate more nuance or additional relevant variables from the dataset.\n\nYou *must* include these standard calculation steps first before defining `U_accept`:\n1.  Calculate `sum_tokens = token_self + token_opp`.\n2.  Calculate `fair_perc_self_calc` handling the `sum_tokens == 0` case (defaulting to 50.0), using `token_self` and `token_opp` from the data. Use `IF` for the conditional calculation.\n\nNow, design a **novel** formula for `U_accept` using `split_perc_self`, `fair_perc_self_calc`, and potentially *other relevant data variables* from the list provided (like `token_self`, `token_opp`, `trial_type`, `combined_earning`), incorporating exactly **two learnable parameters**.\n\nFocus on structures where the two learnable parameters have demonstrably distinct and separable influences on the utility calculation, similar to how a slope and an intercept affect a linear function, but potentially applied to different aspects of the trial. Consider how different components of the offer or context might independently contribute to utility, each scaled by one of the parameters.\n\nThink creatively about how two parameters can capture distinct psychological processes related to fairness, self-interest, or context within the framework of the provided variables. Avoid simply adding a new term scaled by a third parameter. Instead, consider how your two parameters can scale different, potentially non-collinear, input variables or combinations of variables.\n\n*   **Key Inputs & Calculated Variables:** Use `split_perc_self`, `token_self`, `token_opp` as data variables, plus potentially others from the provided list. Calculate `sum_tokens`, `fair_perc_self_calc`, and `U_accept`. Include calculation steps for derived variables *before* the formula for `U_accept`. Include function definitions like `IF` if used.\n*   **Learnable Parameters:** Exactly **2 learnable parameters**. Choose descriptive, Python-safe names. Define clear, generous, finite numerical bounds. Ensure the parameters' roles are structurally distinct to promote identifiability. For example, one parameter could scale a term related to value/gain, while the other scales a term related to fairness or contextual factors, or one could scale an input linearly while the other scales a different input non-linearly, or one scales a deviation while the other scales the absolute value.\n*   **Calculated Variables:** Include descriptions for *all* calculated variables used in the model (including `U_accept`, `sum_tokens`, `fair_perc_self_calc`, and any functions like `IF`) with `source: \"calculated\"`. Include descriptions for all data variables used as inputs with `source: \"data\"`.\n*   **Variable Descriptions:** Provide variable descriptions in JSON format between <VARIABLES> tags for *all* variables in the <MODEL> formula. Include source, range (with inclusive flags), distribution (if applicable), and learnable status. Remember variable names must exactly match the model formula and data descriptions.\n*   **Target Variable:** Specify \"accept\" using <target_variable> tags.\n*   **Summary:** Provide a concise summary between <SUMMARY> tags. Describe the model's core idea. **Crucially, explain *how* the specific structure of your model, with exactly two learnable parameters, is designed to create mathematically distinct and separable influence profiles for those two parameters, in service of achieving robust joint parameter identifiability.** Highlight what aspect of the decision each parameter is intended to capture and how their mathematical roles differ.\n\nAvailable Data Variables:\n- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.\n(Note: Use `split_perc_self` for the participant's proposed percentage share).\n\nPlease think through this step by step, then provide your model specification and variable descriptions. Remember that robust parameter identifiability for *both* learnable parameters (>= 0.7 recovery for both) is the absolute priority. Your goal is to find a structure with *exactly two* parameters where their influences are clearly distinguishable and interact in a way that allows for reliable estimation, ideally leading to improved fit metrics (BIC and accuracy). Avoid structures that have failed recovery previously. Explore alternative ways to combine inputs and parameters beyond the simple linear deviation+intercept structure, ensuring the two parameters have fundamentally different mathematical roles. Be creative and think \"out of the box\" about how to use the available data variables and exactly two parameters to capture distinct aspects of the responder's decision process while maintaining identifiability.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<MODEL>\nsum_tokens = token_self + token_opp\nfair_perc_self_calc = IF(sum_tokens == 0, 50.0, (token_self / sum_tokens) * 100.0)\nU_accept = parameter_perc_fairness * (split_perc_self - fair_perc_self_calc) + parameter_context_intercept * (fair_perc_self_calc - 50.0)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"sum_tokens\": {\n      \"description\": \"Sum of tokens found by the participant and the opponent.\",\n      \"range\": {\"min\": 0, \"max\": \"inf\"},\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fair_perc_self_calc\": {\n      \"description\": \"Calculated fair percentage share for the participant based on token contributions. Defaults to 50% if sum_tokens is 0.\",\n      \"range\": {\"min\": 0.0, \"max\": 100.0},\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"U_accept\": {\n      \"description\": \"Utility of accepting the proposed split.\",\n      \"range\": {\"min\": \"-inf\", \"max\": \"inf\"},\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant.\",\n      \"range\": {\"min\": 0, \"max\": \"inf\"},\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent.\",\n      \"range\": {\"min\": 0, \"max\": \"inf\"},\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n     \"split_perc_self\": {\n      \"description\": \"The proposed share for the participant (in %).\",\n      \"range\": {\"min\": 0.0, \"max\": 100.0},\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"parameter_perc_fairness\": {\n      \"description\": \"Learnable parameter scaling the influence of the deviation of the proposed percentage from the calculated fair percentage based on contributions.\",\n      \"range\": {\"min\": -20.0, \"max\": 20.0},\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"parameter_context_intercept\": {\n      \"description\": \"Learnable parameter scaling the influence of the calculated fair percentage's deviation from a 50% split, representing a context-dependent baseline bias.\",\n      \"range\": {\"min\": -20.0, \"max\": 20.0},\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"IF\": {\n        \"description\": \"Conditional function: IF(condition, value_if_true, value_if_false).\",\n        \"learnable\": false,\n        \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nThis model predicts the utility of accepting a proposal for the responder based on two factors, each scaled by a distinct learnable parameter. The first factor is the difference between the proposed percentage share for the participant (split_perc_self) and the calculated fair share percentage based on token contributions (fair_perc_self_calc). This deviation is scaled by 'parameter_perc_fairness', capturing sensitivity to fairness relative to contribution. The second factor is the difference between the calculated fair share percentage and a 50% split. This represents a context-dependent baseline influenced by relative contributions and is scaled by 'parameter_context_intercept'. These two learnable parameters are designed for identifiability by scaling inputs that represent different components of the fairness calculation: 'parameter_perc_fairness' scales a *relative deviation from the calculated norm*, while 'parameter_context_intercept' scales the *calculated norm's position relative to a fixed 50% point*, thus having distinct mathematical roles in determining the overall utility.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['parameter_perc_fairness', 'parameter_context_intercept']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                sum_tokens = token_self + token_opp\nfair_perc_self_calc = IF(sum_tokens == 0, 50.0, (token_self / sum_tokens) * 100.0)\nU_accept = parameter_perc_fairness * (split_perc_self - fair_perc_self_calc) + parameter_context_intercept * (fair_perc_self_calc - 50.0)\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"sum_tokens\": {\n      \"description\": \"Sum of tokens found by the participant and the opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fair_perc_self_calc\": {\n      \"description\": \"Calculated fair percentage share for the participant based on token contributions. Defaults to 50% if sum_tokens is 0.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"U_accept\": {\n      \"description\": \"Utility of accepting the proposed split.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The proposed share for the participant (in %).\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"parameter_perc_fairness\": {\n      \"description\": \"Learnable parameter scaling the influence of the deviation of the proposed percentage from the calculated fair percentage based on contributions.\",\n      \"range\": {\n        \"min\": -20.0,\n        \"max\": 20.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"parameter_context_intercept\": {\n      \"description\": \"Learnable parameter scaling the influence of the calculated fair percentage's deviation from a 50% split, representing a context-dependent baseline bias.\",\n      \"range\": {\n        \"min\": -20.0,\n        \"max\": 20.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"IF\": {\n      \"description\": \"Conditional function: IF(condition, value_if_true, value_if_false).\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, parameter_perc_fairness=0.0, parameter_context_intercept=0.0):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        split_perc_self = trial.get(\"split_perc_self\", 50.0)\n\n        sum_tokens = token_self + token_opp\n        if sum_tokens == 0:\n            fair_perc_self_calc = 50.0\n        else:\n            fair_perc_self_calc = (token_self / sum_tokens) * 100.0\n\n        U_accept = parameter_perc_fairness * (split_perc_self - fair_perc_self_calc) + parameter_context_intercept * (fair_perc_self_calc - 50.0)\n        model_predictions.append(U_accept)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '[{\"ID\": 1, \"group\": \"group1\", \"trial_number\": 1, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 5, \"token_self\": 5, \"combined_earning\": 10, \"split_opp\": 5.0, \"split_self\": 5.0, \"splitperc_opp\": 50, \"splitperc_self\": 50, \"accept\": 1.0, \"accepted_amount\": 5.0, \"accepted_perc\": 50.0, \"proposed_perc\": 50.0, \"proposed_amount\": 5.0}, {\"ID\": 2, \"group\": \"group1\", \"trial_number\": 2, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 8, \"token_self\": 2, \"combined_earning\": 10, \"split_opp\": 7.0, \"split_self\": 3.0, \"splitperc_opp\": 70, \"splitperc_self\": 30, \"accept\": 0.0, \"accepted_amount\": 0.0, \"accepted_perc\": 0.0, \"proposed_perc\": 30.0, \"proposed_amount\": 3.0}]'\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n```",
      "timestamp": 1746104778.2949262
    }
  ],
  "learnable_parameters": {
    "parameter_perc_fairness": {
      "description": "Learnable parameter scaling the influence of the deviation of the proposed percentage from the calculated fair percentage based on contributions.",
      "range": {
        "min": -20.0,
        "max": 20.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "parameter_context_intercept": {
      "description": "Learnable parameter scaling the influence of the calculated fair percentage's deviation from a 50% split, representing a context-dependent baseline bias.",
      "range": {
        "min": -20.0,
        "max": 20.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "sum_tokens = token_self + token_opp\nfair_perc_self_calc = IF(sum_tokens == 0, 50.0, (token_self / sum_tokens) * 100.0)\nU_accept = parameter_perc_fairness * (split_perc_self - fair_perc_self_calc) + parameter_context_intercept * (fair_perc_self_calc - 50.0)",
  "variable_descriptions": {
    "sum_tokens": {
      "description": "Sum of tokens found by the participant and the opponent.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "fair_perc_self_calc": {
      "description": "Calculated fair percentage share for the participant based on token contributions. Defaults to 50% if sum_tokens is 0.",
      "range": {
        "min": 0.0,
        "max": 100.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "U_accept": {
      "description": "Utility of accepting the proposed split.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "token_self": {
      "description": "Number of tokens found by the participant.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "split_perc_self": {
      "description": "The proposed share for the participant (in %).",
      "range": {
        "min": 0.0,
        "max": 100.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "parameter_perc_fairness": {
      "description": "Learnable parameter scaling the influence of the deviation of the proposed percentage from the calculated fair percentage based on contributions.",
      "range": {
        "min": -20.0,
        "max": 20.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "parameter_context_intercept": {
      "description": "Learnable parameter scaling the influence of the calculated fair percentage's deviation from a 50% split, representing a context-dependent baseline bias.",
      "range": {
        "min": -20.0,
        "max": 20.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "IF": {
      "description": "Conditional function: IF(condition, value_if_true, value_if_false).",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "This model predicts the utility of accepting a proposal for the responder based on two factors, each scaled by a distinct learnable parameter. The first factor is the difference between the proposed percentage share for the participant (split_perc_self) and the calculated fair share percentage based on token contributions (fair_perc_self_calc). This deviation is scaled by 'parameter_perc_fairness', capturing sensitivity to fairness relative to contribution. The second factor is the difference between the calculated fair share percentage and a 50% split. This represents a context-dependent baseline influenced by relative contributions and is scaled by 'parameter_context_intercept'. These two learnable parameters are designed for identifiability by scaling inputs that represent different components of the fairness calculation: 'parameter_perc_fairness' scales a *relative deviation from the calculated norm*, while 'parameter_context_intercept' scales the *calculated norm's position relative to a fixed 50% point*, thus having distinct mathematical roles in determining the overall utility.",
  "target_variable": "accept",
  "full_reasoning": "<MODEL>\nsum_tokens = token_self + token_opp\nfair_perc_self_calc = IF(sum_tokens == 0, 50.0, (token_self / sum_tokens) * 100.0)\nU_accept = parameter_perc_fairness * (split_perc_self - fair_perc_self_calc) + parameter_context_intercept * (fair_perc_self_calc - 50.0)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"sum_tokens\": {\n      \"description\": \"Sum of tokens found by the participant and the opponent.\",\n      \"range\": {\"min\": 0, \"max\": \"inf\"},\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fair_perc_self_calc\": {\n      \"description\": \"Calculated fair percentage share for the participant based on token contributions. Defaults to 50% if sum_tokens is 0.\",\n      \"range\": {\"min\": 0.0, \"max\": 100.0},\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"U_accept\": {\n      \"description\": \"Utility of accepting the proposed split.\",\n      \"range\": {\"min\": \"-inf\", \"max\": \"inf\"},\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant.\",\n      \"range\": {\"min\": 0, \"max\": \"inf\"},\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent.\",\n      \"range\": {\"min\": 0, \"max\": \"inf\"},\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n     \"split_perc_self\": {\n      \"description\": \"The proposed share for the participant (in %).\",\n      \"range\": {\"min\": 0.0, \"max\": 100.0},\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"parameter_perc_fairness\": {\n      \"description\": \"Learnable parameter scaling the influence of the deviation of the proposed percentage from the calculated fair percentage based on contributions.\",\n      \"range\": {\"min\": -20.0, \"max\": 20.0},\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"parameter_context_intercept\": {\n      \"description\": \"Learnable parameter scaling the influence of the calculated fair percentage's deviation from a 50% split, representing a context-dependent baseline bias.\",\n      \"range\": {\"min\": -20.0, \"max\": 20.0},\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"IF\": {\n        \"description\": \"Conditional function: IF(condition, value_if_true, value_if_false).\",\n        \"learnable\": false,\n        \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nThis model predicts the utility of accepting a proposal for the responder based on two factors, each scaled by a distinct learnable parameter. The first factor is the difference between the proposed percentage share for the participant (split_perc_self) and the calculated fair share percentage based on token contributions (fair_perc_self_calc). This deviation is scaled by 'parameter_perc_fairness', capturing sensitivity to fairness relative to contribution. The second factor is the difference between the calculated fair share percentage and a 50% split. This represents a context-dependent baseline influenced by relative contributions and is scaled by 'parameter_context_intercept'. These two learnable parameters are designed for identifiability by scaling inputs that represent different components of the fairness calculation: 'parameter_perc_fairness' scales a *relative deviation from the calculated norm*, while 'parameter_context_intercept' scales the *calculated norm's position relative to a fixed 50% point*, thus having distinct mathematical roles in determining the overall utility.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: sum_tokens = token_self + token_opp\nfair_perc_self_calc = IF(sum_tokens == 0, 50.0, (token_self / sum_tokens) * 100.0)\nU_accept = parameter_perc_fairness * (split_perc_self - fair_perc_self_calc) + parameter_context_intercept * (fair_perc_self_calc - 50.0)\nSummary: This model predicts the utility of accepting a proposal for the responder based on two factors, each scaled by a distinct learnable parameter. The first factor is the difference between the proposed percentage share for the participant (split_perc_self) and the calculated fair share percentage based on token contributions (fair_perc_self_calc). This deviation is scaled by 'parameter_perc_fairness', capturing sensitivity to fairness relative to contribution. The second factor is the difference between the calculated fair share percentage and a 50% split. This represents a context-dependent baseline influenced by relative contributions and is scaled by 'parameter_context_intercept'. These two learnable parameters are designed for identifiability by scaling inputs that represent different components of the fairness calculation: 'parameter_perc_fairness' scales a *relative deviation from the calculated norm*, while 'parameter_context_intercept' scales the *calculated norm's position relative to a fixed 50% point*, thus having distinct mathematical roles in determining the overall utility.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, parameter_perc_fairness=0.0, parameter_context_intercept=0.0):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        split_perc_self = trial.get(\"split_perc_self\", 50.0)\n\n        sum_tokens = token_self + token_opp\n        if sum_tokens == 0:\n            fair_perc_self_calc = 50.0\n        else:\n            fair_perc_self_calc = (token_self / sum_tokens) * 100.0\n\n        U_accept = parameter_perc_fairness * (split_perc_self - fair_perc_self_calc) + parameter_context_intercept * (fair_perc_self_calc - 50.0)\n        model_predictions.append(U_accept)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.5357142857142857,
  "group_accuracies": {
    "Control": 0.5458656330749354,
    "Cocaine": 0.5266203703703703
  },
  "group_parameter_averages": {
    "Control": {
      "parameter_perc_fairness": 0.6249681743424063,
      "parameter_context_intercept": -2.646609452955582
    },
    "Cocaine": {
      "parameter_perc_fairness": 1.354077436589634,
      "parameter_context_intercept": 0.6476263593074908
    }
  },
  "fitting_results": [
    {
      "parameter_perc_fairness": -4.8755815233023405,
      "parameter_context_intercept": -14.689022399171963,
      "success": true,
      "log_likelihood": -284.6279773224049,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "parameter_perc_fairness": -2.211022924521039,
      "parameter_context_intercept": -6.944550378065442,
      "success": true,
      "log_likelihood": -192.5245736021877,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "parameter_perc_fairness": 9.816848607641209,
      "parameter_context_intercept": 5.211391805786203,
      "success": true,
      "log_likelihood": -100.42116988198143,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "parameter_perc_fairness": -5.336992823517971,
      "parameter_context_intercept": 17.690028375963756,
      "success": true,
      "log_likelihood": -376.7313810425668,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.2777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "parameter_perc_fairness": -6.771407181811222,
      "parameter_context_intercept": -13.030669501606326,
      "success": true,
      "log_likelihood": -54.36946802200025,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "parameter_perc_fairness": 16.138274886753386,
      "parameter_context_intercept": 16.09891378537769,
      "success": true,
      "log_likelihood": -24.11284647061715,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "parameter_perc_fairness": -4.587967698969685,
      "parameter_context_intercept": 1.3850490048750146,
      "success": true,
      "log_likelihood": -284.62797732240483,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "parameter_perc_fairness": 20.0,
      "parameter_context_intercept": -20.0,
      "success": true,
      "log_likelihood": -192.52457360224307,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "parameter_perc_fairness": 4.0513325304391365,
      "parameter_context_intercept": -2.3794163332787193,
      "success": true,
      "log_likelihood": -284.62797732240494,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "parameter_perc_fairness": 13.872367571948175,
      "parameter_context_intercept": 13.776144436746224,
      "success": true,
      "log_likelihood": -20.814689213380763,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "parameter_perc_fairness": 2.020056522058212,
      "parameter_context_intercept": -7.997707891186586,
      "success": true,
      "log_likelihood": -123.44702081212161,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "parameter_perc_fairness": 12.737787812125788,
      "parameter_context_intercept": -7.141118129758421,
      "success": true,
      "log_likelihood": -261.60212639236437,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "parameter_perc_fairness": -2.7866545027972665,
      "parameter_context_intercept": -2.865328694912687,
      "success": true,
      "log_likelihood": -21.977810608895354,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "parameter_perc_fairness": -5.772614419577569,
      "parameter_context_intercept": -5.77261441623272,
      "success": true,
      "log_likelihood": -24.953298492958044,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "parameter_perc_fairness": 4.73238789063754,
      "parameter_context_intercept": 18.119064032009646,
      "success": true,
      "log_likelihood": -284.62797732240483,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "parameter_perc_fairness": 10.582247192933755,
      "parameter_context_intercept": 14.215400838618665,
      "success": true,
      "log_likelihood": -284.62796733241413,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "parameter_perc_fairness": 4.998824506662809,
      "parameter_context_intercept": 8.241821818465466,
      "success": true,
      "log_likelihood": -284.6274830401852,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "parameter_perc_fairness": -5.010870853985975,
      "parameter_context_intercept": -5.025638817476911,
      "success": true,
      "log_likelihood": -24.83049351386226,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "parameter_perc_fairness": 9.42587012320168,
      "parameter_context_intercept": -19.94278061728496,
      "success": true,
      "log_likelihood": -215.55042453228353,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "parameter_perc_fairness": 14.92431179593067,
      "parameter_context_intercept": -1.4646075600667494,
      "success": true,
      "log_likelihood": -284.6279773224049,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "parameter_perc_fairness": 20.0,
      "parameter_context_intercept": -20.0,
      "success": true,
      "log_likelihood": -146.4728717421621,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "parameter_perc_fairness": 6.138156996326977,
      "parameter_context_intercept": -11.003768178912484,
      "success": true,
      "log_likelihood": -238.57627546232393,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "parameter_perc_fairness": -16.236864275028996,
      "parameter_context_intercept": -16.22802750986246,
      "success": true,
      "log_likelihood": -24.909147771648648,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "parameter_perc_fairness": -9.673654635543977,
      "parameter_context_intercept": -9.697439021403857,
      "success": true,
      "log_likelihood": -24.63788328931187,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "parameter_perc_fairness": -7.277475505462583,
      "parameter_context_intercept": -15.294909320847939,
      "success": true,
      "log_likelihood": -77.39531895204072,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "parameter_perc_fairness": 17.920030848197598,
      "parameter_context_intercept": 7.253944189905859,
      "success": true,
      "log_likelihood": -169.49872267220255,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "parameter_perc_fairness": -15.678199941890421,
      "parameter_context_intercept": -15.6929682661202,
      "success": true,
      "log_likelihood": -24.83049351414032,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "parameter_perc_fairness": 11.55948150050638,
      "parameter_context_intercept": 19.448033518147952,
      "success": true,
      "log_likelihood": -422.7830829026478,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "parameter_perc_fairness": 10.368755997110583,
      "parameter_context_intercept": -1.658720312964558,
      "success": true,
      "log_likelihood": -215.55042453228344,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "parameter_perc_fairness": -9.510227776545248,
      "parameter_context_intercept": -15.922280481363963,
      "success": true,
      "log_likelihood": -215.55042453228353,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "parameter_perc_fairness": 6.373701429327375,
      "parameter_context_intercept": 6.373701427752353,
      "success": true,
      "log_likelihood": -24.95329849295802,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "parameter_perc_fairness": -7.768148662458394,
      "parameter_context_intercept": -10.398919103167907,
      "success": true,
      "log_likelihood": -284.4067531844453,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "parameter_perc_fairness": -20.0,
      "parameter_context_intercept": 20.0,
      "success": true,
      "log_likelihood": -215.55042453228347,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "parameter_perc_fairness": -4.011158563743837,
      "parameter_context_intercept": -11.053016735323261,
      "success": true,
      "log_likelihood": -238.57627546232396,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "parameter_perc_fairness": -17.32395908067675,
      "parameter_context_intercept": -17.323959084339197,
      "success": true,
      "log_likelihood": -24.953298492958044,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "parameter_perc_fairness": -9.498510562025825,
      "parameter_context_intercept": -1.3447502776571554,
      "success": true,
      "log_likelihood": -284.62797732240483,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "parameter_perc_fairness": 0.5741373117588818,
      "parameter_context_intercept": 0.5249209219362918,
      "success": true,
      "log_likelihood": -23.67033797709616,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "parameter_perc_fairness": -12.507597509746784,
      "parameter_context_intercept": -6.527539158212843,
      "success": true,
      "log_likelihood": -445.80893383268835,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.2777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "parameter_perc_fairness": 6.559074407118097,
      "parameter_context_intercept": 6.509858233106897,
      "success": true,
      "log_likelihood": -23.670337977236162,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "parameter_perc_fairness": -13.621278247267782,
      "parameter_context_intercept": -13.62716451022004,
      "success": true,
      "log_likelihood": -24.933684122661617,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "parameter_perc_fairness": 2.6187751687584977,
      "parameter_context_intercept": 2.5857484860181934,
      "success": true,
      "log_likelihood": -24.35405586102438,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "parameter_perc_fairness": 1.4925059167191925,
      "parameter_context_intercept": -14.203762709052317,
      "success": true,
      "log_likelihood": -192.524573602243,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "parameter_perc_fairness": 0.4288891694411916,
      "parameter_context_intercept": 15.992452056689423,
      "success": true,
      "log_likelihood": -284.6279773224049,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "parameter_perc_fairness": 5.333507215588874,
      "parameter_context_intercept": -4.983180494272265,
      "success": true,
      "log_likelihood": -284.6279773224049,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "parameter_perc_fairness": 11.166154084175478,
      "parameter_context_intercept": -14.628471209282111,
      "success": true,
      "log_likelihood": -215.55042453228347,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "parameter_perc_fairness": -5.800517782133724,
      "parameter_context_intercept": 16.931394711743486,
      "success": true,
      "log_likelihood": -284.6279773224049,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "parameter_perc_fairness": -12.967961381840068,
      "parameter_context_intercept": -12.976794896890606,
      "success": true,
      "log_likelihood": -24.90914777762571,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "parameter_perc_fairness": 12.062336586735775,
      "parameter_context_intercept": 3.2061929877963955,
      "success": true,
      "log_likelihood": -238.57627546232402,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "parameter_perc_fairness": 4.584719766352865,
      "parameter_context_intercept": 4.433754115763561,
      "success": true,
      "log_likelihood": -17.181211609456824,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "parameter_perc_fairness": 5.166814537120906,
      "parameter_context_intercept": 13.961561784294815,
      "success": true,
      "log_likelihood": -261.6021263923645,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "parameter_perc_fairness": 10.036243556972273,
      "parameter_context_intercept": 5.698325663324084,
      "success": true,
      "log_likelihood": -261.6021263880215,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "parameter_perc_fairness": -20.0,
      "parameter_context_intercept": 20.0,
      "success": true,
      "log_likelihood": -261.6021263923645,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "parameter_perc_fairness": -5.033638712132001,
      "parameter_context_intercept": -5.03069704490444,
      "success": true,
      "log_likelihood": -24.9483961244518,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "parameter_perc_fairness": -18.737625643280747,
      "parameter_context_intercept": -2.593621887028398,
      "success": true,
      "log_likelihood": -238.57627546232388,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "parameter_perc_fairness": 10.40222964706755,
      "parameter_context_intercept": -14.861796361802998,
      "success": true,
      "log_likelihood": -54.369468022000234,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "parameter_perc_fairness": -0.7692015135572028,
      "parameter_context_intercept": -4.411816991372245,
      "success": true,
      "log_likelihood": -123.44701415079085,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "parameter_perc_fairness": 14.474625469500253,
      "parameter_context_intercept": 6.652581308430342,
      "success": true,
      "log_likelihood": -192.52457360224304,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "parameter_perc_fairness": 2.771993793589292,
      "parameter_context_intercept": 13.096849463073056,
      "success": true,
      "log_likelihood": -238.57627546232388,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "parameter_perc_fairness": 6.932617123389214,
      "parameter_context_intercept": -13.064898161598514,
      "success": true,
      "log_likelihood": -284.6279773224049,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "parameter_perc_fairness": -4.816791216055737,
      "parameter_context_intercept": 5.1442570054695125,
      "success": true,
      "log_likelihood": -261.6021263923644,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "parameter_perc_fairness": 4.516341957547241,
      "parameter_context_intercept": 0.7070633999282162,
      "success": true,
      "log_likelihood": -261.60212553407325,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "parameter_perc_fairness": -3.9406219805067657,
      "parameter_context_intercept": -13.91512420191344,
      "success": true,
      "log_likelihood": -169.49872267220255,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "parameter_perc_fairness": 19.18454585413158,
      "parameter_context_intercept": 19.18454585892164,
      "success": true,
      "log_likelihood": -24.953298492958165,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "parameter_perc_fairness": 5.114054817747811,
      "parameter_context_intercept": 8.74929132984581,
      "success": true,
      "log_likelihood": -284.6279673997192,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "parameter_perc_fairness": 3.3210871425741644,
      "parameter_context_intercept": -17.77541630310231,
      "success": true,
      "log_likelihood": -238.5762754623239,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "parameter_perc_fairness": 17.220052487414176,
      "parameter_context_intercept": 17.199294101637282,
      "success": true,
      "log_likelihood": -24.71211471495013,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "parameter_perc_fairness": 18.468989256292907,
      "parameter_context_intercept": 13.004491633646097,
      "success": true,
      "log_likelihood": -284.62797732240483,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "parameter_perc_fairness": -0.4416319343782291,
      "parameter_context_intercept": -7.048791804149284,
      "success": true,
      "log_likelihood": -238.57627546232393,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "parameter_perc_fairness": -4.714267288886198,
      "parameter_context_intercept": -0.27966690338493194,
      "success": true,
      "log_likelihood": -284.62797732075336,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "parameter_perc_fairness": 19.538886947354484,
      "parameter_context_intercept": 8.345570611558305,
      "success": true,
      "log_likelihood": -238.5762754623239,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "parameter_perc_fairness": -4.890650595104082,
      "parameter_context_intercept": -19.996152186666713,
      "success": true,
      "log_likelihood": -215.5504245322835,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "parameter_perc_fairness": -9.155140551769811,
      "parameter_context_intercept": 17.936077153386407,
      "success": true,
      "log_likelihood": -261.6021263923644,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "parameter_perc_fairness": -14.447961463230993,
      "parameter_context_intercept": 2.3617502139904154,
      "success": true,
      "log_likelihood": -353.70553011252633,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "parameter_perc_fairness": -10.742624637941983,
      "parameter_context_intercept": 10.131410281880818,
      "success": true,
      "log_likelihood": -284.6279773224049,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "parameter_perc_fairness": 12.635788716134634,
      "parameter_context_intercept": 17.486463029843108,
      "success": true,
      "log_likelihood": -284.62797732237925,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "parameter_perc_fairness": -8.898859494341377,
      "parameter_context_intercept": -16.208490120760942,
      "success": true,
      "log_likelihood": -261.6021263923644,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "parameter_perc_fairness": 8.757383819587702,
      "parameter_context_intercept": -10.719119411001326,
      "success": true,
      "log_likelihood": -238.5762754623239,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "parameter_perc_fairness": 0.6957468676385403,
      "parameter_context_intercept": 10.45891037117832,
      "success": true,
      "log_likelihood": -284.6279773224049,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "parameter_perc_fairness": 2.4780983516778887,
      "parameter_context_intercept": 2.463330397070472,
      "success": true,
      "log_likelihood": -24.83049351385725,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "parameter_perc_fairness": -10.128907623771898,
      "parameter_context_intercept": -14.475497752773627,
      "success": true,
      "log_likelihood": -284.6279773224049,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "parameter_perc_fairness": -5.128598102275917,
      "parameter_context_intercept": -5.122712050904444,
      "success": true,
      "log_likelihood": -24.933684122688792,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "parameter_perc_fairness": 12.586454571851425,
      "parameter_context_intercept": 12.601222017742735,
      "success": true,
      "log_likelihood": -24.83049351371765,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "parameter_perc_fairness": 18.65998553789452,
      "parameter_context_intercept": 7.304783895601265,
      "success": true,
      "log_likelihood": -284.6279773224049,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "parameter_perc_fairness": 0.6388097139977434,
      "parameter_context_intercept": 0.615025320252355,
      "success": true,
      "log_likelihood": -24.63788328931187,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "parameter_perc_fairness": -0.8145922183277033,
      "parameter_context_intercept": -0.8445071405604209,
      "success": true,
      "log_likelihood": -24.45894900426599,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "parameter_perc_fairness": -14.156925525749218,
      "parameter_context_intercept": -19.971431449268916,
      "success": true,
      "log_likelihood": -261.60212639236437,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "parameter_perc_fairness": -16.23169122196724,
      "parameter_context_intercept": -10.755700065462094,
      "success": true,
      "log_likelihood": -353.70553011252616,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3333333333333333,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "parameter_perc_fairness": -7.901704473116897,
      "parameter_context_intercept": -11.51393439998281,
      "success": true,
      "log_likelihood": -169.4987117379229,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "parameter_perc_fairness": 1.3818337741574718,
      "parameter_context_intercept": -9.588750136545048,
      "success": true,
      "log_likelihood": -238.576275462324,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "parameter_perc_fairness": -0.09276375802996739,
      "parameter_context_intercept": 10.693067088621454,
      "success": true,
      "log_likelihood": -284.6279773224049,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "parameter_perc_fairness": 16.679092478205423,
      "parameter_context_intercept": 13.48542247538749,
      "success": true,
      "log_likelihood": -284.62730225186027,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "parameter_perc_fairness": {
        "r": 0.45831180930482296,
        "p": 1.6270397792421623e-06
      },
      "parameter_context_intercept": {
        "r": 0.45636983233730516,
        "p": 1.8234321201849298e-06
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 382.308886064498,
  "bic_Control": 345.73065586416146,
  "bic_Cocaine": 415.0768839522994,
  "bic_results": {
    "average_bic": 382.308886064498,
    "individual_bics": [
      576.422992521722,
      392.2161850812876,
      208.00937764087507,
      760.6297999620458,
      115.90597392091271,
      55.39273081814652,
      576.4229925217219,
      392.21618508139835,
      576.4229925217221,
      48.796416303673745,
      254.06107950115543,
      530.371290661641,
      51.122659094702925,
      57.07363486282831,
      576.4229925217219,
      576.4229725417405,
      576.4220039572826,
      56.828024904636735,
      438.2678869414793,
      576.422992521722,
      300.11278136123644,
      484.3195888015601,
      56.985333420209514,
      56.442804455535956,
      161.95767578099367,
      346.1644832213173,
      56.828024905192855,
      852.7332036822078,
      438.2678869414791,
      438.2678869414793,
      57.07363486282826,
      575.9805442458028,
      438.26788694147916,
      484.31958880156014,
      57.07363486282831,
      576.4229925217219,
      54.50771383110454,
      898.7849055422889,
      54.50771383138454,
      57.03440612223545,
      55.87514959896098,
      392.21618508139824,
      576.422992521722,
      576.422992521722,
      438.26788694147916,
      576.422992521722,
      56.985333432163635,
      484.31958880156026,
      41.529461095825866,
      530.3712906616412,
      530.3712906529552,
      530.3712906616412,
      57.06383012581582,
      484.31958880156,
      115.90597392091269,
      254.06106617849392,
      392.2161850813983,
      484.31958880156,
      576.422992521722,
      530.3712906616411,
      530.3712889450587,
      346.1644832213173,
      57.07363486282855,
      576.4229726763506,
      484.31958880156003,
      56.591267306812476,
      576.4229925217219,
      484.3195888015601,
      576.4229925184189,
      484.31958880156003,
      438.2678869414792,
      530.3712906616411,
      714.5780981019649,
      576.422992521722,
      576.4229925216707,
      530.3712906616411,
      484.31958880156003,
      576.422992521722,
      56.828024904626716,
      576.422992521722,
      57.0344061222898,
      56.828024904347515,
      576.422992521722,
      56.442804455535956,
      56.084935885444196,
      530.371290661641,
      714.5780981019645,
      346.164461352758,
      484.3195888015602,
      576.422992521722,
      576.4216423806328
    ],
    "group_enabled": true,
    "group_bics": {
      "Control": [
        576.422992521722,
        392.2161850812876,
        208.00937764087507,
        760.6297999620458,
        115.90597392091271,
        55.39273081814652,
        576.4229925217219,
        392.21618508139835,
        576.4229925217221,
        48.796416303673745,
        254.06107950115543,
        530.371290661641,
        51.122659094702925,
        57.07363486282831,
        576.4229925217219,
        576.4229725417405,
        576.4220039572826,
        56.828024904636735,
        438.2678869414793,
        576.422992521722,
        300.11278136123644,
        484.3195888015601,
        56.985333420209514,
        56.442804455535956,
        161.95767578099367,
        346.1644832213173,
        56.828024905192855,
        852.7332036822078,
        438.2678869414791,
        438.2678869414793,
        57.07363486282826,
        575.9805442458028,
        438.26788694147916,
        484.31958880156014,
        57.07363486282831,
        576.4229925217219,
        54.50771383110454,
        898.7849055422889,
        54.50771383138454,
        57.03440612223545,
        55.87514959896098,
        392.21618508139824,
        576.422992521722
      ],
      "Cocaine": [
        576.422992521722,
        438.26788694147916,
        576.422992521722,
        56.985333432163635,
        484.31958880156026,
        41.529461095825866,
        530.3712906616412,
        530.3712906529552,
        530.3712906616412,
        57.06383012581582,
        484.31958880156,
        115.90597392091269,
        254.06106617849392,
        392.2161850813983,
        484.31958880156,
        576.422992521722,
        530.3712906616411,
        530.3712889450587,
        346.1644832213173,
        57.07363486282855,
        576.4229726763506,
        484.31958880156003,
        56.591267306812476,
        576.4229925217219,
        484.3195888015601,
        576.4229925184189,
        484.31958880156003,
        438.2678869414792,
        530.3712906616411,
        714.5780981019649,
        576.422992521722,
        576.4229925216707,
        530.3712906616411,
        484.31958880156003,
        576.422992521722,
        56.828024904626716,
        576.422992521722,
        57.0344061222898,
        56.828024904347515,
        576.422992521722,
        56.442804455535956,
        56.084935885444196,
        530.371290661641,
        714.5780981019645,
        346.164461352758,
        484.3195888015602,
        576.422992521722,
        576.4216423806328
      ]
    },
    "num_parameters": 2,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- parameter_perc_fairness: r = 0.458\n- parameter_context_intercept: r = 0.456",
  "previous_models": [
    "Specification: sum_tokens = token_self + token_opp\nfair_perc_self_calc = IF(sum_tokens == 0, 50.0, (token_self / sum_tokens) * 100.0)\nU_accept = parameter_perc_fairness * (split_perc_self - fair_perc_self_calc) + parameter_context_intercept * (fair_perc_self_calc - 50.0)\nSummary: This model predicts the utility of accepting a proposal for the responder based on two factors, each scaled by a distinct learnable parameter. The first factor is the difference between the proposed percentage share for the participant (split_perc_self) and the calculated fair share percentage based on token contributions (fair_perc_self_calc). This deviation is scaled by 'parameter_perc_fairness', capturing sensitivity to fairness relative to contribution. The second factor is the difference between the calculated fair share percentage and a 50% split. This represents a context-dependent baseline influenced by relative contributions and is scaled by 'parameter_context_intercept'. These two learnable parameters are designed for identifiability by scaling inputs that represent different components of the fairness calculation: 'parameter_perc_fairness' scales a *relative deviation from the calculated norm*, while 'parameter_context_intercept' scales the *calculated norm's position relative to a fixed 50% point*, thus having distinct mathematical roles in determining the overall utility.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 382.308886064498\nOverall Accuracy: 0.5357\nGroup Accuracies:\n- Control: 0.5459\n- Cocaine: 0.5266\n\nParameter Recovery:\n- parameter_perc_fairness: r = 0.458\n- parameter_context_intercept: r = 0.456"
  ]
}