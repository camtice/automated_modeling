{
  "task_description": "In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "Okay, here are the improved instructions for the next run (Run 95 of 100).\n\nTask Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\nproposed_amount = when participant is the proposer, what is the amount proposed to the opponent (in \u00a3)\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified).\n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy. Specifically, *all* learnable parameters must have a parameter recovery value of >= 0.7.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able to be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal.\n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied.\n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1:\n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = beta + epsilon*E + eta*N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\"min\": 0, \"max\": 1},\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\"min\": \"-inf\", \"max\": \"inf\"},\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\"min\": \"-inf\", \"max\": \"inf\"},\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\"min\": 0, \"max\": 1, \"exclusive_max\": true},\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe variable names you choose in your <VARIABLES> section must be used exactly as specified in the <MODEL> formula. Please ensure these names can be used directly in Python code (e.g., avoid Python reserved words). Also, ensure consistency between the variable names in your JSON and the variable names in the provided data description where applicable (e.g., use `split_perc_self` exactly as provided).\n\nModel Type:\nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\nInstructions: Okay, here are the improved instructions for the next run (Run 95 of 100).\n\nThe previous attempt to model utility as scaled components of fairness deviation and context deviation did not yield identifiable parameters (recovery < 0.7 for both). In contrast, a simpler linear model combining fairness deviation with a constant intercept *did* achieve robust parameter recovery (> 0.7 for both parameters) and better overall performance (BIC, accuracy).\n\nRobust parameter identifiability remains the **unwavering primary objective** (recovery >= 0.7 for *all* learnable parameters). We must build on the structural principles that worked, namely having two parameters with clearly separable roles, rather than structures that failed identifiability tests.\n\nYou *must* include these standard calculation steps first before defining `U_accept`:\n1.  Calculate `sum_tokens = token_self + token_opp`.\n2.  Calculate `fair_perc_self_calc` handling the `sum_tokens == 0` case (defaulting to 50.0), using `token_self` and `token_opp` from the data. Use `IF` for the conditional calculation.\n\nNow, design a **novel** formula for `U_accept` using `split_perc_self`, `fair_perc_self_calc`, and potentially *other relevant data variables* from the list provided (like `token_self`, `token_opp`, `trial_type`, `combined_earning`), incorporating exactly **two learnable parameters**.\n\nFocus intently on creating structures where the two learnable parameters have demonstrably distinct and separable influences on the utility calculation, similar to how a slope (scaling a variable input) and an intercept (providing a baseline offset) work in a linear model. Avoid structures where the two parameters scale inputs that are highly correlated or whose influence profiles on the utility function are mathematically too similar across trials, as this has led to poor recovery.\n\nThink creatively about how two parameters can capture distinct psychological processes related to fairness, self-interest, or context within the framework of the provided variables. Do *not* simply scale two different calculated deviation terms if their influence cannot be separated by the fitting process. Instead, consider:\n*   How one parameter scales the primary reward signal (`split_perc_self` or related to it) while the other scales a cost/bias/contextual term.\n*   How one parameter scales a linear influence and the other scales a non-linear influence (e.g., a quadratic term, a log/exp transform, or a threshold/conditional effect like `IF(condition, input, 0)`).\n*   How one parameter scales a continuous variable (like deviation from fairness) and the other scales a categorical or binary variable (like `trial_type` or a computed property like `is_unfair = IF(split_perc_self < fair_perc_self_calc, 1, 0)`).\n*   How parameters might interact multiplicatively with different inputs, where one parameter's effect is gated or amplified differently than the other's.\n\nEnsure the two parameters' contributions are structurally independent or interact in a way that makes them mathematically distinguishable. The goal is to maintain robust parameter recovery (like the linear deviation + intercept model) while attempting to improve model fit (BIC, accuracy) by better capturing the nuances of responder behavior using the available data variables.\n\n*   **Key Inputs & Calculated Variables:** Use `split_perc_self`, `token_self`, `token_opp` as data variables, plus potentially others from the provided list. Calculate `sum_tokens`, `fair_perc_self_calc`, and `U_accept`. Include calculation steps for derived variables *before* the formula for `U_accept`. Include function definitions like `IF` if used.\n*   **Learnable Parameters:** Exactly **2 learnable parameters**. Choose descriptive, Python-safe names. Define clear, generous, finite numerical bounds. Ensure the parameters' roles are structurally distinct to promote identifiability.\n*   **Calculated Variables:** Include descriptions for *all* calculated variables used in the model (including `U_accept`, `sum_tokens`, `fair_perc_self_calc`, and any functions like `IF`) with `source: \"calculated\"`. Include descriptions for all data variables used as inputs with `source: \"data\"` that appear in your <MODEL>.\n*   **Variable Descriptions:** Provide variable descriptions in JSON format between <VARIABLES> tags for *all* variables used in the <MODEL> formula. Include source, range (with inclusive flags), distribution (if applicable), and learnable status. Remember variable names must exactly match the model formula and data descriptions.\n*   **Target Variable:** Specify \"accept\" using <target_variable> tags.\n*   **Summary:** Provide a concise summary between <SUMMARY> tags. Describe the model's core idea. **Crucially, explain *how* the specific structure of your model, with exactly two learnable parameters, is designed to create mathematically distinct and separable influence profiles for those two parameters, specifically addressing *why* this structure is expected to yield robust joint parameter identifiability (recovery >= 0.7 for both), building on the lessons learned from previous successes and failures.** Highlight what aspect of the decision each parameter is intended to capture and how their mathematical roles fundamentally differ.\n\nAvailable Data Variables:\n- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.\n(Note: Use `split_perc_self` for the participant's proposed percentage share).\n\nPlease think through this step by step, then provide your model specification and variable descriptions. Remember that robust parameter identifiability for *both* learnable parameters (>= 0.7 recovery for both) is the absolute priority. Your goal is to find a novel structure with *exactly two* parameters where their influences are clearly distinguishable and interact in a way that allows for reliable estimation, ideally leading to improved fit metrics (BIC and accuracy). Avoid structures that have failed recovery previously. Explore alternative ways to combine inputs and parameters beyond simply scaling different deviation terms, ensuring the two parameters have fundamentally different mathematical roles that are likely to be identifiable. Be creative and think \"out of the box\" about how to use the available data variables and exactly two parameters to capture distinct aspects of the responder's decision process while maintaining identifiability.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: Okay, here are the improved instructions for the next run (Run 95 of 100).\n\nTask Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\nproposed_amount = when participant is the proposer, what is the amount proposed to the opponent (in \u00a3)\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified).\n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy. Specifically, *all* learnable parameters must have a parameter recovery value of >= 0.7.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able to be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal.\n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied.\n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1:\n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = beta + epsilon*E + eta*N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\"min\": 0, \"max\": 1},\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\"min\": \"-inf\", \"max\": \"inf\"},\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\"min\": \"-inf\", \"max\": \"inf\"},\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\"min\": 0, \"max\": 1, \"exclusive_max\": true},\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe variable names you choose in your <VARIABLES> section must be used exactly as specified in the <MODEL> formula. Please ensure these names can be used directly in Python code (e.g., avoid Python reserved words). Also, ensure consistency between the variable names in your JSON and the variable names in the provided data description where applicable (e.g., use `split_perc_self` exactly as provided).\n\nModel Type:\nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\nInstructions: Okay, here are the improved instructions for the next run (Run 95 of 100).\n\nThe previous attempt to model utility as scaled components of fairness deviation and context deviation did not yield identifiable parameters (recovery < 0.7 for both). In contrast, a simpler linear model combining fairness deviation with a constant intercept *did* achieve robust parameter recovery (> 0.7 for both parameters) and better overall performance (BIC, accuracy).\n\nRobust parameter identifiability remains the **unwavering primary objective** (recovery >= 0.7 for *all* learnable parameters). We must build on the structural principles that worked, namely having two parameters with clearly separable roles, rather than structures that failed identifiability tests.\n\nYou *must* include these standard calculation steps first before defining `U_accept`:\n1.  Calculate `sum_tokens = token_self + token_opp`.\n2.  Calculate `fair_perc_self_calc` handling the `sum_tokens == 0` case (defaulting to 50.0), using `token_self` and `token_opp` from the data. Use `IF` for the conditional calculation.\n\nNow, design a **novel** formula for `U_accept` using `split_perc_self`, `fair_perc_self_calc`, and potentially *other relevant data variables* from the list provided (like `token_self`, `token_opp`, `trial_type`, `combined_earning`), incorporating exactly **two learnable parameters**.\n\nFocus intently on creating structures where the two learnable parameters have demonstrably distinct and separable influences on the utility calculation, similar to how a slope (scaling a variable input) and an intercept (providing a baseline offset) work in a linear model. Avoid structures where the two parameters scale inputs that are highly correlated or whose influence profiles on the utility function are mathematically too similar across trials, as this has led to poor recovery.\n\nThink creatively about how two parameters can capture distinct psychological processes related to fairness, self-interest, or context within the framework of the provided variables. Do *not* simply scale two different calculated deviation terms if their influence cannot be separated by the fitting process. Instead, consider:\n*   How one parameter scales the primary reward signal (`split_perc_self` or related to it) while the other scales a cost/bias/contextual term.\n*   How one parameter scales a linear influence and the other scales a non-linear influence (e.g., a quadratic term, a log/exp transform, or a threshold/conditional effect like `IF(condition, input, 0)`).\n*   How one parameter scales a continuous variable (like deviation from fairness) and the other scales a categorical or binary variable (like `trial_type` or a computed property like `is_unfair = IF(split_perc_self < fair_perc_self_calc, 1, 0)`).\n*   How parameters might interact multiplicatively with different inputs, where one parameter's effect is gated or amplified differently than the other's.\n\nEnsure the two parameters' contributions are structurally independent or interact in a way that makes them mathematically distinguishable. The goal is to maintain robust parameter recovery (like the linear deviation + intercept model) while attempting to improve model fit (BIC, accuracy) by better capturing the nuances of responder behavior using the available data variables.\n\n*   **Key Inputs & Calculated Variables:** Use `split_perc_self`, `token_self`, `token_opp` as data variables, plus potentially others from the provided list. Calculate `sum_tokens`, `fair_perc_self_calc`, and `U_accept`. Include calculation steps for derived variables *before* the formula for `U_accept`. Include function definitions like `IF` if used.\n*   **Learnable Parameters:** Exactly **2 learnable parameters**. Choose descriptive, Python-safe names. Define clear, generous, finite numerical bounds. Ensure the parameters' roles are structurally distinct to promote identifiability.\n*   **Calculated Variables:** Include descriptions for *all* calculated variables used in the model (including `U_accept`, `sum_tokens`, `fair_perc_self_calc`, and any functions like `IF`) with `source: \"calculated\"`. Include descriptions for all data variables used as inputs with `source: \"data\"` that appear in your <MODEL>.\n*   **Variable Descriptions:** Provide variable descriptions in JSON format between <VARIABLES> tags for *all* variables used in the <MODEL> formula. Include source, range (with inclusive flags), distribution (if applicable), and learnable status. Remember variable names must exactly match the model formula and data descriptions.\n*   **Target Variable:** Specify \"accept\" using <target_variable> tags.\n*   **Summary:** Provide a concise summary between <SUMMARY> tags. Describe the model's core idea. **Crucially, explain *how* the specific structure of your model, with exactly two learnable parameters, is designed to create mathematically distinct and separable influence profiles for those two parameters, specifically addressing *why* this structure is expected to yield robust joint parameter identifiability (recovery >= 0.7 for both), building on the lessons learned from previous successes and failures.** Highlight what aspect of the decision each parameter is intended to capture and how their mathematical roles fundamentally differ.\n\nAvailable Data Variables:\n- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.\n(Note: Use `split_perc_self` for the participant's proposed percentage share).\n\nPlease think through this step by step, then provide your model specification and variable descriptions. Remember that robust parameter identifiability for *both* learnable parameters (>= 0.7 recovery for both) is the absolute priority. Your goal is to find a novel structure with *exactly two* parameters where their influences are clearly distinguishable and interact in a way that allows for reliable estimation, ideally leading to improved fit metrics (BIC and accuracy). Avoid structures that have failed recovery previously. Explore alternative ways to combine inputs and parameters beyond simply scaling different deviation terms, ensuring the two parameters have fundamentally different mathematical roles that are likely to be identifiable. Be creative and think \"out of the box\" about how to use the available data variables and exactly two parameters to capture distinct aspects of the responder's decision process while maintaining identifiability.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "Okay, I understand the task. My goal is to design a computational model for the responder's acceptance decision in the ultimatum game, adhering strictly to the requirements: exactly two learnable parameters, robust parameter identifiability, using only provided data/calculated variables, and following the specific output format including required prerequisite calculations.\n\nBased on the success of simple linear models for parameter recovery and the need for a novel structure with distinct parameter roles, I will propose a model where one parameter scales the received offer percentage directly, and the second parameter scales the *deviation* of that offer percentage from the calculated fair share percentage. This separates the utility derived from the absolute gain proportion from the utility derived from its perceived fairness relative to contribution.\n\nFirst, the required prerequisite calculations for `sum_tokens` and `fair_perc_self_calc`:\n\nLet `IF(condition, value_if_true, value_if_false)` be a function that returns `value_if_true` if the `condition` is true, and `value_if_false` otherwise.\n\nCalculate `sum_tokens` using `token_self` and `token_opp`:\n`sum_tokens = token_self + token_opp`\n\nCalculate the fair percentage for the participant (`fair_perc_self_calc`) based on their token contribution relative to the total, handling the edge case where `sum_tokens` is zero:\n`fair_perc_self_calc = IF(sum_tokens == 0, 50.0, (token_self / sum_tokens) * 100.0)`\n\nNow, I will define the utility of accepting the offer (`U_accept`).\n\n<MODEL>\nU_accept = beta_offer_sensitivity * split_perc_self + beta_fairness_deviation_sensitivity * (split_perc_self - fair_perc_self_calc)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\"min\": 0, \"max\": 100},\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\"min\": 0, \"max\": 100},\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"sum_tokens\": {\n      \"description\": \"Total number of tokens found by participant and opponent\",\n      \"range\": {\"min\": 0, \"max\": 200},\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fair_perc_self_calc\": {\n      \"description\": \"Calculated fair percentage for the participant based on token contribution\",\n      \"range\": {\"min\": 0.0, \"max\": 100.0},\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"Proposed share for the participant (in %)\",\n      \"range\": {\"min\": 0.0, \"max\": 100.0},\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"beta_offer_sensitivity\": {\n      \"description\": \"Sensitivity to the absolute proposed percentage share\",\n      \"range\": {\"min\": -100.0, \"max\": 100.0},\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_fairness_deviation_sensitivity\": {\n      \"description\": \"Sensitivity to the deviation of the proposed percentage from the fair percentage\",\n      \"range\": {\"min\": -100.0, \"max\": 100.0},\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U_accept\": {\n      \"description\": \"Utility of accepting the proposed offer\",\n      \"range\": {\"min\": \"-inf\", \"max\": \"inf\"},\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nThis model predicts the utility of accepting a proposed offer as a responder in an ultimatum game. The utility (U_accept) is a linear combination of two components: the absolute percentage share proposed to the participant (split_perc_self) and the deviation of this proposed share from a calculated fair share percentage based on token contributions (split_perc_self - fair_perc_self_calc). The model has two learnable parameters: beta_offer_sensitivity, which scales the influence of the absolute proposed percentage, and beta_fairness_deviation_sensitivity, which scales the influence of the deviation from fairness. This structure is designed for robust parameter identifiability because the two parameters scale inputs that represent fundamentally different aspects of the offer \u2013 its magnitude relative to the whole pie and its magnitude relative to a fairness benchmark. Mathematically, this forms a linear combination of split_perc_self and fair_perc_self_calc, whose coefficients are identifiable as long as these inputs are not perfectly correlated, allowing for the recovery of the two original parameters. The utility is converted to a probability of acceptance using a logistic function.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['beta_offer_sensitivity', 'beta_fairness_deviation_sensitivity']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                U_accept = beta_offer_sensitivity * split_perc_self + beta_fairness_deviation_sensitivity * (split_perc_self - fair_perc_self_calc)\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"sum_tokens\": {\n      \"description\": \"Total number of tokens found by participant and opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 200,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fair_perc_self_calc\": {\n      \"description\": \"Calculated fair percentage for the participant based on token contribution\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"Proposed share for the participant (in %)\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"beta_offer_sensitivity\": {\n      \"description\": \"Sensitivity to the absolute proposed percentage share\",\n      \"range\": {\n        \"min\": -100.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_fairness_deviation_sensitivity\": {\n      \"description\": \"Sensitivity to the deviation of the proposed percentage from the fair percentage\",\n      \"range\": {\n        \"min\": -100.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U_accept\": {\n      \"description\": \"Utility of accepting the proposed offer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, beta_offer_sensitivity=1.0, beta_fairness_deviation_sensitivity=1.0):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        split_perc_self = trial.get(\"splitperc_self\", 0)\n\n        sum_tokens = token_self + token_opp\n        fair_perc_self_calc = 50.0 if sum_tokens == 0 else (token_self / sum_tokens) * 100.0\n\n        U_accept = beta_offer_sensitivity * split_perc_self + beta_fairness_deviation_sensitivity * (split_perc_self - fair_perc_self_calc)\n        model_predictions.append(U_accept)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n```",
      "timestamp": 1746104835.1547148
    }
  ],
  "learnable_parameters": {
    "beta_offer_sensitivity": {
      "description": "Sensitivity to the absolute proposed percentage share",
      "range": {
        "min": -100.0,
        "max": 100.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta_fairness_deviation_sensitivity": {
      "description": "Sensitivity to the deviation of the proposed percentage from the fair percentage",
      "range": {
        "min": -100.0,
        "max": 100.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "U_accept = beta_offer_sensitivity * split_perc_self + beta_fairness_deviation_sensitivity * (split_perc_self - fair_perc_self_calc)",
  "variable_descriptions": {
    "token_self": {
      "description": "Number of tokens found by the participant",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "sum_tokens": {
      "description": "Total number of tokens found by participant and opponent",
      "range": {
        "min": 0,
        "max": 200,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "fair_perc_self_calc": {
      "description": "Calculated fair percentage for the participant based on token contribution",
      "range": {
        "min": 0.0,
        "max": 100.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "split_perc_self": {
      "description": "Proposed share for the participant (in %)",
      "range": {
        "min": 0.0,
        "max": 100.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "beta_offer_sensitivity": {
      "description": "Sensitivity to the absolute proposed percentage share",
      "range": {
        "min": -100.0,
        "max": 100.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta_fairness_deviation_sensitivity": {
      "description": "Sensitivity to the deviation of the proposed percentage from the fair percentage",
      "range": {
        "min": -100.0,
        "max": 100.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "U_accept": {
      "description": "Utility of accepting the proposed offer",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "This model predicts the utility of accepting a proposed offer as a responder in an ultimatum game. The utility (U_accept) is a linear combination of two components: the absolute percentage share proposed to the participant (split_perc_self) and the deviation of this proposed share from a calculated fair share percentage based on token contributions (split_perc_self - fair_perc_self_calc). The model has two learnable parameters: beta_offer_sensitivity, which scales the influence of the absolute proposed percentage, and beta_fairness_deviation_sensitivity, which scales the influence of the deviation from fairness. This structure is designed for robust parameter identifiability because the two parameters scale inputs that represent fundamentally different aspects of the offer \u2013 its magnitude relative to the whole pie and its magnitude relative to a fairness benchmark. Mathematically, this forms a linear combination of split_perc_self and fair_perc_self_calc, whose coefficients are identifiable as long as these inputs are not perfectly correlated, allowing for the recovery of the two original parameters. The utility is converted to a probability of acceptance using a logistic function.",
  "target_variable": "accept",
  "full_reasoning": "Okay, I understand the task. My goal is to design a computational model for the responder's acceptance decision in the ultimatum game, adhering strictly to the requirements: exactly two learnable parameters, robust parameter identifiability, using only provided data/calculated variables, and following the specific output format including required prerequisite calculations.\n\nBased on the success of simple linear models for parameter recovery and the need for a novel structure with distinct parameter roles, I will propose a model where one parameter scales the received offer percentage directly, and the second parameter scales the *deviation* of that offer percentage from the calculated fair share percentage. This separates the utility derived from the absolute gain proportion from the utility derived from its perceived fairness relative to contribution.\n\nFirst, the required prerequisite calculations for `sum_tokens` and `fair_perc_self_calc`:\n\nLet `IF(condition, value_if_true, value_if_false)` be a function that returns `value_if_true` if the `condition` is true, and `value_if_false` otherwise.\n\nCalculate `sum_tokens` using `token_self` and `token_opp`:\n`sum_tokens = token_self + token_opp`\n\nCalculate the fair percentage for the participant (`fair_perc_self_calc`) based on their token contribution relative to the total, handling the edge case where `sum_tokens` is zero:\n`fair_perc_self_calc = IF(sum_tokens == 0, 50.0, (token_self / sum_tokens) * 100.0)`\n\nNow, I will define the utility of accepting the offer (`U_accept`).\n\n<MODEL>\nU_accept = beta_offer_sensitivity * split_perc_self + beta_fairness_deviation_sensitivity * (split_perc_self - fair_perc_self_calc)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\"min\": 0, \"max\": 100},\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\"min\": 0, \"max\": 100},\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"sum_tokens\": {\n      \"description\": \"Total number of tokens found by participant and opponent\",\n      \"range\": {\"min\": 0, \"max\": 200},\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fair_perc_self_calc\": {\n      \"description\": \"Calculated fair percentage for the participant based on token contribution\",\n      \"range\": {\"min\": 0.0, \"max\": 100.0},\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"Proposed share for the participant (in %)\",\n      \"range\": {\"min\": 0.0, \"max\": 100.0},\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"beta_offer_sensitivity\": {\n      \"description\": \"Sensitivity to the absolute proposed percentage share\",\n      \"range\": {\"min\": -100.0, \"max\": 100.0},\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_fairness_deviation_sensitivity\": {\n      \"description\": \"Sensitivity to the deviation of the proposed percentage from the fair percentage\",\n      \"range\": {\"min\": -100.0, \"max\": 100.0},\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U_accept\": {\n      \"description\": \"Utility of accepting the proposed offer\",\n      \"range\": {\"min\": \"-inf\", \"max\": \"inf\"},\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nThis model predicts the utility of accepting a proposed offer as a responder in an ultimatum game. The utility (U_accept) is a linear combination of two components: the absolute percentage share proposed to the participant (split_perc_self) and the deviation of this proposed share from a calculated fair share percentage based on token contributions (split_perc_self - fair_perc_self_calc). The model has two learnable parameters: beta_offer_sensitivity, which scales the influence of the absolute proposed percentage, and beta_fairness_deviation_sensitivity, which scales the influence of the deviation from fairness. This structure is designed for robust parameter identifiability because the two parameters scale inputs that represent fundamentally different aspects of the offer \u2013 its magnitude relative to the whole pie and its magnitude relative to a fairness benchmark. Mathematically, this forms a linear combination of split_perc_self and fair_perc_self_calc, whose coefficients are identifiable as long as these inputs are not perfectly correlated, allowing for the recovery of the two original parameters. The utility is converted to a probability of acceptance using a logistic function.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: U_accept = beta_offer_sensitivity * split_perc_self + beta_fairness_deviation_sensitivity * (split_perc_self - fair_perc_self_calc)\nSummary: This model predicts the utility of accepting a proposed offer as a responder in an ultimatum game. The utility (U_accept) is a linear combination of two components: the absolute percentage share proposed to the participant (split_perc_self) and the deviation of this proposed share from a calculated fair share percentage based on token contributions (split_perc_self - fair_perc_self_calc). The model has two learnable parameters: beta_offer_sensitivity, which scales the influence of the absolute proposed percentage, and beta_fairness_deviation_sensitivity, which scales the influence of the deviation from fairness. This structure is designed for robust parameter identifiability because the two parameters scale inputs that represent fundamentally different aspects of the offer \u2013 its magnitude relative to the whole pie and its magnitude relative to a fairness benchmark. Mathematically, this forms a linear combination of split_perc_self and fair_perc_self_calc, whose coefficients are identifiable as long as these inputs are not perfectly correlated, allowing for the recovery of the two original parameters. The utility is converted to a probability of acceptance using a logistic function.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, beta_offer_sensitivity=1.0, beta_fairness_deviation_sensitivity=1.0):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        split_perc_self = trial.get(\"splitperc_self\", 0)\n\n        sum_tokens = token_self + token_opp\n        fair_perc_self_calc = 50.0 if sum_tokens == 0 else (token_self / sum_tokens) * 100.0\n\n        U_accept = beta_offer_sensitivity * split_perc_self + beta_fairness_deviation_sensitivity * (split_perc_self - fair_perc_self_calc)\n        model_predictions.append(U_accept)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.7231379731379731,
  "group_accuracies": {
    "Control": 0.7667958656330749,
    "Cocaine": 0.6840277777777778
  },
  "group_parameter_averages": {
    "Control": {
      "beta_offer_sensitivity": 34.85519699667401,
      "beta_fairness_deviation_sensitivity": 7.66090313681429
    },
    "Cocaine": {
      "beta_offer_sensitivity": 8.074735306085309,
      "beta_fairness_deviation_sensitivity": 9.145328801987347
    }
  },
  "fitting_results": [
    {
      "beta_offer_sensitivity": -42.76494451689024,
      "beta_fairness_deviation_sensitivity": -27.72140760035404,
      "success": true,
      "log_likelihood": -207.23265836687068,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_offer_sensitivity": 53.233361309789615,
      "beta_fairness_deviation_sensitivity": -91.0466990497248,
      "success": true,
      "log_likelihood": -414.46531673712843,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_offer_sensitivity": 65.74443186806019,
      "beta_fairness_deviation_sensitivity": 9.47838164938075,
      "success": true,
      "log_likelihood": -391.43946580708797,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_offer_sensitivity": -40.61347538366624,
      "beta_fairness_deviation_sensitivity": 22.544429332099483,
      "success": true,
      "log_likelihood": -345.38776394700693,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_offer_sensitivity": 31.846623719271577,
      "beta_fairness_deviation_sensitivity": 60.20707300051609,
      "success": true,
      "log_likelihood": -115.12925464660226,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_offer_sensitivity": 54.988276805514516,
      "beta_fairness_deviation_sensitivity": -97.08741208849642,
      "success": true,
      "log_likelihood": -299.33606208692606,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_offer_sensitivity": 25.150761038882607,
      "beta_fairness_deviation_sensitivity": -38.51417900428198,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_offer_sensitivity": 82.78517835847111,
      "beta_fairness_deviation_sensitivity": 86.43614902770577,
      "success": true,
      "log_likelihood": -138.1551055766428,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_offer_sensitivity": 41.27913073044664,
      "beta_fairness_deviation_sensitivity": -48.18580359572506,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_offer_sensitivity": 24.066482687030287,
      "beta_fairness_deviation_sensitivity": 42.10790481095955,
      "success": true,
      "log_likelihood": -115.12925464660239,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_offer_sensitivity": -95.11410070185747,
      "beta_fairness_deviation_sensitivity": 61.35116295837176,
      "success": true,
      "log_likelihood": -368.4136148770475,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_offer_sensitivity": -35.67460227292722,
      "beta_fairness_deviation_sensitivity": -6.941526903468922,
      "success": true,
      "log_likelihood": -92.10346688478755,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_offer_sensitivity": 7.600327103923604,
      "beta_fairness_deviation_sensitivity": 62.97082726955651,
      "success": true,
      "log_likelihood": -207.2326583941195,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_offer_sensitivity": 79.25741336920612,
      "beta_fairness_deviation_sensitivity": 38.771359436007344,
      "success": true,
      "log_likelihood": -92.10340371656181,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_offer_sensitivity": 98.05692567428946,
      "beta_fairness_deviation_sensitivity": 12.395067888427391,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_offer_sensitivity": 91.91341867791408,
      "beta_fairness_deviation_sensitivity": 57.42934235309835,
      "success": true,
      "log_likelihood": -138.1551055766428,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_offer_sensitivity": 100.0,
      "beta_fairness_deviation_sensitivity": -28.935854576029627,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_offer_sensitivity": -44.29455835380751,
      "beta_fairness_deviation_sensitivity": -100.0,
      "success": true,
      "log_likelihood": -437.4911676671661,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_offer_sensitivity": 17.985349169681005,
      "beta_fairness_deviation_sensitivity": -40.44731509195574,
      "success": true,
      "log_likelihood": -92.10340371656177,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_offer_sensitivity": 80.56344063954111,
      "beta_fairness_deviation_sensitivity": -96.27422559960644,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_offer_sensitivity": 81.79531054785974,
      "beta_fairness_deviation_sensitivity": 43.28102424126786,
      "success": true,
      "log_likelihood": -299.3360620869261,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_offer_sensitivity": 56.4360320776932,
      "beta_fairness_deviation_sensitivity": 15.919098299054113,
      "success": true,
      "log_likelihood": -69.07755278652132,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_offer_sensitivity": 70.70581960682009,
      "beta_fairness_deviation_sensitivity": 96.11343836535693,
      "success": true,
      "log_likelihood": -207.23265836676438,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_offer_sensitivity": 11.681874201984812,
      "beta_fairness_deviation_sensitivity": -89.68428042716998,
      "success": true,
      "log_likelihood": -437.4911676671689,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_offer_sensitivity": -9.318283269992463,
      "beta_fairness_deviation_sensitivity": 16.09277235215822,
      "success": true,
      "log_likelihood": -414.46531673712843,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_offer_sensitivity": 50.660220052037175,
      "beta_fairness_deviation_sensitivity": 66.99360666025885,
      "success": true,
      "log_likelihood": -115.12925464660228,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_offer_sensitivity": 84.12569769980925,
      "beta_fairness_deviation_sensitivity": -39.78039061182257,
      "success": true,
      "log_likelihood": -368.4136148770475,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_offer_sensitivity": -58.402159019130174,
      "beta_fairness_deviation_sensitivity": 6.200284269843252,
      "success": true,
      "log_likelihood": -230.25850929680473,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_offer_sensitivity": 87.98442973974457,
      "beta_fairness_deviation_sensitivity": -90.93614315590712,
      "success": true,
      "log_likelihood": -92.10340371656179,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_offer_sensitivity": 29.25185237657459,
      "beta_fairness_deviation_sensitivity": -24.80109938586284,
      "success": true,
      "log_likelihood": -184.20680743672378,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_offer_sensitivity": -72.91306009453075,
      "beta_fairness_deviation_sensitivity": -73.82956802895157,
      "success": true,
      "log_likelihood": -506.56872046846166,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_offer_sensitivity": -73.95998919537902,
      "beta_fairness_deviation_sensitivity": 5.905145088679475,
      "success": true,
      "log_likelihood": -69.07755278652138,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_offer_sensitivity": -56.64135078694055,
      "beta_fairness_deviation_sensitivity": 85.53364230549974,
      "success": true,
      "log_likelihood": -345.3877639470071,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_offer_sensitivity": 62.751244584795295,
      "beta_fairness_deviation_sensitivity": 81.0429232589682,
      "success": true,
      "log_likelihood": -184.20680743672375,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_offer_sensitivity": 94.16937633712351,
      "beta_fairness_deviation_sensitivity": -6.323745722410763,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_offer_sensitivity": 99.42614996470468,
      "beta_fairness_deviation_sensitivity": 94.96633058438604,
      "success": true,
      "log_likelihood": -184.2068074367239,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_offer_sensitivity": 82.1768599012554,
      "beta_fairness_deviation_sensitivity": 88.35956521559669,
      "success": true,
      "log_likelihood": -115.12925464660229,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_offer_sensitivity": 95.124017824786,
      "beta_fairness_deviation_sensitivity": 29.689762603681032,
      "success": true,
      "log_likelihood": -368.4136148770475,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_offer_sensitivity": 62.20727132897872,
      "beta_fairness_deviation_sensitivity": 24.962106359067192,
      "success": true,
      "log_likelihood": -207.23265836676438,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_offer_sensitivity": 85.82071722576902,
      "beta_fairness_deviation_sensitivity": 2.515302271290821,
      "success": true,
      "log_likelihood": -69.07755278652135,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_offer_sensitivity": 17.366133291995347,
      "beta_fairness_deviation_sensitivity": 31.53916376349252,
      "success": true,
      "log_likelihood": -161.1809565066833,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_offer_sensitivity": 7.670550091505362,
      "beta_fairness_deviation_sensitivity": 36.580475678605865,
      "success": true,
      "log_likelihood": -92.10340371656179,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_offer_sensitivity": 94.64531644664532,
      "beta_fairness_deviation_sensitivity": 50.54214668145255,
      "success": true,
      "log_likelihood": -138.1551055766428,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_offer_sensitivity": 55.87041819421782,
      "beta_fairness_deviation_sensitivity": -2.276875568330496,
      "success": true,
      "log_likelihood": -368.4136148770475,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_offer_sensitivity": 31.897422122798275,
      "beta_fairness_deviation_sensitivity": 17.46662749215993,
      "success": true,
      "log_likelihood": -207.23265836676433,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_offer_sensitivity": 31.29084356121399,
      "beta_fairness_deviation_sensitivity": -19.03179347875006,
      "success": true,
      "log_likelihood": -230.2585092968047,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_offer_sensitivity": 57.999496925594144,
      "beta_fairness_deviation_sensitivity": -4.78728241252999,
      "success": true,
      "log_likelihood": -391.43946580708797,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_offer_sensitivity": -87.43331868361517,
      "beta_fairness_deviation_sensitivity": -68.47133267214814,
      "success": true,
      "log_likelihood": -437.4911676671689,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_offer_sensitivity": 26.138827340453858,
      "beta_fairness_deviation_sensitivity": 72.2240866034293,
      "success": true,
      "log_likelihood": -115.12925464660228,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_offer_sensitivity": 27.271751573076642,
      "beta_fairness_deviation_sensitivity": 20.6564919873137,
      "success": true,
      "log_likelihood": -322.3619130169665,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_offer_sensitivity": 34.821804363968255,
      "beta_fairness_deviation_sensitivity": 4.66125969449827,
      "success": true,
      "log_likelihood": -253.28436022684522,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_offer_sensitivity": -47.280342084254286,
      "beta_fairness_deviation_sensitivity": 11.52314216681178,
      "success": true,
      "log_likelihood": -115.12925464660226,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_offer_sensitivity": -21.048164007554533,
      "beta_fairness_deviation_sensitivity": 25.992566741203007,
      "success": true,
      "log_likelihood": -437.49116766716895,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_offer_sensitivity": 60.38586733140304,
      "beta_fairness_deviation_sensitivity": 36.51929035548789,
      "success": true,
      "log_likelihood": -253.28436643021467,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_offer_sensitivity": 57.059757527276346,
      "beta_fairness_deviation_sensitivity": 100.0,
      "success": true,
      "log_likelihood": -253.28436022684514,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_offer_sensitivity": -72.0187585192472,
      "beta_fairness_deviation_sensitivity": 11.57881072901408,
      "success": true,
      "log_likelihood": -276.31021115688554,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_offer_sensitivity": -72.02646055594484,
      "beta_fairness_deviation_sensitivity": -12.311552561584733,
      "success": true,
      "log_likelihood": -230.25850929680462,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_offer_sensitivity": 63.83922290653518,
      "beta_fairness_deviation_sensitivity": -62.46066157870527,
      "success": true,
      "log_likelihood": -92.1034037165618,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_offer_sensitivity": -67.62197617530856,
      "beta_fairness_deviation_sensitivity": -0.869140885635673,
      "success": true,
      "log_likelihood": -92.10340371656181,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_offer_sensitivity": -24.818160243887352,
      "beta_fairness_deviation_sensitivity": -34.745363426425605,
      "success": true,
      "log_likelihood": -554.0067172580729,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_offer_sensitivity": 21.708475163200063,
      "beta_fairness_deviation_sensitivity": 26.199629820630783,
      "success": true,
      "log_likelihood": -230.2585092968047,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_offer_sensitivity": 28.914785591559138,
      "beta_fairness_deviation_sensitivity": -4.2291256100569115,
      "success": true,
      "log_likelihood": -414.46531673712843,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_offer_sensitivity": -87.84234561012683,
      "beta_fairness_deviation_sensitivity": 37.399154979747635,
      "success": true,
      "log_likelihood": -69.07755278652142,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_offer_sensitivity": 14.328538939176,
      "beta_fairness_deviation_sensitivity": 49.48548276033989,
      "success": true,
      "log_likelihood": -322.3619130169664,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_offer_sensitivity": 37.10186386015397,
      "beta_fairness_deviation_sensitivity": 80.58714975988286,
      "success": true,
      "log_likelihood": -184.20680743672366,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_offer_sensitivity": 79.77303007517088,
      "beta_fairness_deviation_sensitivity": -83.45099426226408,
      "success": true,
      "log_likelihood": -368.41361487704745,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_offer_sensitivity": 27.665410625510006,
      "beta_fairness_deviation_sensitivity": -25.005949235022086,
      "success": true,
      "log_likelihood": -69.07755278652131,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_offer_sensitivity": 47.48028732616976,
      "beta_fairness_deviation_sensitivity": -25.518810704859533,
      "success": true,
      "log_likelihood": -115.1292546466023,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_offer_sensitivity": 53.4973534608163,
      "beta_fairness_deviation_sensitivity": 28.11096947488602,
      "success": true,
      "log_likelihood": -253.2843602268452,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_offer_sensitivity": -14.540624012533165,
      "beta_fairness_deviation_sensitivity": -77.62085063704455,
      "success": true,
      "log_likelihood": -253.28436022684514,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_offer_sensitivity": -26.83751121725824,
      "beta_fairness_deviation_sensitivity": -28.79934436730774,
      "success": true,
      "log_likelihood": -414.4653167371285,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_offer_sensitivity": 59.56862114731186,
      "beta_fairness_deviation_sensitivity": -6.109581222623746,
      "success": true,
      "log_likelihood": -713.8013788276544,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.1388888888888889,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_offer_sensitivity": -11.123586835052365,
      "beta_fairness_deviation_sensitivity": 55.17501675716622,
      "success": true,
      "log_likelihood": -414.46531673712843,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_offer_sensitivity": 55.22398611383392,
      "beta_fairness_deviation_sensitivity": 14.892583578584555,
      "success": true,
      "log_likelihood": -184.2068074367239,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_offer_sensitivity": -72.58187251758002,
      "beta_fairness_deviation_sensitivity": -44.28747738318452,
      "success": true,
      "log_likelihood": -414.4653167371285,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_offer_sensitivity": 66.55847877582403,
      "beta_fairness_deviation_sensitivity": -86.40841955041488,
      "success": true,
      "log_likelihood": -253.28436022684528,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_offer_sensitivity": 11.134499779970227,
      "beta_fairness_deviation_sensitivity": -21.459696965018395,
      "success": true,
      "log_likelihood": -46.051701856480875,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_offer_sensitivity": -42.351454881149394,
      "beta_fairness_deviation_sensitivity": 2.5053837378553396,
      "success": true,
      "log_likelihood": -46.051701856480925,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_offer_sensitivity": -3.726959661515224,
      "beta_fairness_deviation_sensitivity": -58.74196387402533,
      "success": true,
      "log_likelihood": -414.4653167371285,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_offer_sensitivity": -49.71084019664673,
      "beta_fairness_deviation_sensitivity": -10.517883683713759,
      "success": true,
      "log_likelihood": -92.1002578570269,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_offer_sensitivity": 8.349910284695232,
      "beta_fairness_deviation_sensitivity": 85.18511126905683,
      "success": true,
      "log_likelihood": -345.3877343319083,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_offer_sensitivity": 45.87898240473169,
      "beta_fairness_deviation_sensitivity": 22.33378184451699,
      "success": true,
      "log_likelihood": -161.1809565067134,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_offer_sensitivity": -24.79512475943126,
      "beta_fairness_deviation_sensitivity": 61.30567545675913,
      "success": true,
      "log_likelihood": -92.10340371656179,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_offer_sensitivity": -91.8008165996791,
      "beta_fairness_deviation_sensitivity": 89.24648750086556,
      "success": true,
      "log_likelihood": -414.4653167371284,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_offer_sensitivity": 15.902201712618066,
      "beta_fairness_deviation_sensitivity": -4.774535487487938,
      "success": true,
      "log_likelihood": -322.36191301696664,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_offer_sensitivity": 9.315820491809376,
      "beta_fairness_deviation_sensitivity": 100.0,
      "success": true,
      "log_likelihood": -46.05170185648092,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_offer_sensitivity": 42.70450653123211,
      "beta_fairness_deviation_sensitivity": -26.08611663978897,
      "success": true,
      "log_likelihood": -253.28436022684514,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_offer_sensitivity": 5.837067725607328,
      "beta_fairness_deviation_sensitivity": 34.11842020365096,
      "success": true,
      "log_likelihood": -92.10340371656179,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_offer_sensitivity": 24.549981115376653,
      "beta_fairness_deviation_sensitivity": 71.60761498803943,
      "success": true,
      "log_likelihood": -506.5687204978941,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_offer_sensitivity": 58.41088175432213,
      "beta_fairness_deviation_sensitivity": 80.10866480318205,
      "success": true,
      "log_likelihood": -161.18095650668332,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_offer_sensitivity": 44.665516527252805,
      "beta_fairness_deviation_sensitivity": 8.05713199723283,
      "success": true,
      "log_likelihood": -253.28436022684528,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "beta_offer_sensitivity": {
        "r": 0.538458265751437,
        "p": 7.542957817760578e-09
      },
      "beta_fairness_deviation_sensitivity": {
        "r": 0.3746867969694085,
        "p": 0.00012270676291288636
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 465.6902055957252,
  "bic_Control": 393.7871424721059,
  "bic_Cocaine": 530.1033663106341,
  "bic_results": {
    "average_bic": 465.6902055957252,
    "individual_bics": [
      421.6323546106536,
      836.0976713511691,
      790.0459694910882,
      697.9425657709261,
      237.42554717011674,
      605.8391620507643,
      7.167037869712219,
      283.4772490301978,
      7.167037869712219,
      237.425547170117,
      743.9942676310072,
      191.37397164648732,
      421.63235466515124,
      191.37384531003585,
      7.167037869712219,
      283.4772490301978,
      7.167037869712219,
      882.1493732112444,
      191.37384531003576,
      7.167037869712219,
      605.8391620507645,
      145.32214344995486,
      421.632354610441,
      882.14937321125,
      836.0976713511691,
      237.42554717011677,
      743.9942676310072,
      467.6840564705217,
      191.3738453100358,
      375.5806527503598,
      1020.3044788138355,
      145.32214344995498,
      697.9425657709264,
      375.5806527503597,
      7.167037869712219,
      375.58065275036,
      237.4255471701168,
      743.9942676310072,
      421.632354610441,
      145.32214344995492,
      329.5289508902788,
      191.3738453100358,
      283.4772490301978,
      743.9942676310072,
      421.63235461044087,
      467.6840564705216,
      790.0459694910882,
      882.14937321125,
      237.42554717011677,
      651.8908639108453,
      513.7357583306027,
      237.42554717011674,
      882.1493732112501,
      513.7357707373416,
      513.7357583306025,
      559.7874601906833,
      467.68405647052145,
      191.37384531003582,
      191.37384531003585,
      1115.180472393058,
      467.6840564705216,
      836.0976713511691,
      145.32214344995506,
      651.890863910845,
      375.58065275035955,
      743.9942676310071,
      145.32214344995484,
      237.42554717011683,
      513.7357583306026,
      513.7357583306025,
      836.0976713511692,
      1434.769795532221,
      836.0976713511691,
      375.58065275036,
      836.0976713511692,
      513.7357583306028,
      99.27044158987397,
      99.27044158987407,
      836.0976713511692,
      191.36755359096603,
      697.9425065407288,
      329.528950890339,
      191.3738453100358,
      836.097671351169,
      651.8908639108455,
      99.27044158987405,
      513.7357583306025,
      191.3738453100358,
      1020.3044788727004,
      329.52895089027885,
      513.7357583306028
    ],
    "group_enabled": true,
    "group_bics": {
      "Control": [
        421.6323546106536,
        836.0976713511691,
        790.0459694910882,
        697.9425657709261,
        237.42554717011674,
        605.8391620507643,
        7.167037869712219,
        283.4772490301978,
        7.167037869712219,
        237.425547170117,
        743.9942676310072,
        191.37397164648732,
        421.63235466515124,
        191.37384531003585,
        7.167037869712219,
        283.4772490301978,
        7.167037869712219,
        882.1493732112444,
        191.37384531003576,
        7.167037869712219,
        605.8391620507645,
        145.32214344995486,
        421.632354610441,
        882.14937321125,
        836.0976713511691,
        237.42554717011677,
        743.9942676310072,
        467.6840564705217,
        191.3738453100358,
        375.5806527503598,
        1020.3044788138355,
        145.32214344995498,
        697.9425657709264,
        375.5806527503597,
        7.167037869712219,
        375.58065275036,
        237.4255471701168,
        743.9942676310072,
        421.632354610441,
        145.32214344995492,
        329.5289508902788,
        191.3738453100358,
        283.4772490301978
      ],
      "Cocaine": [
        743.9942676310072,
        421.63235461044087,
        467.6840564705216,
        790.0459694910882,
        882.14937321125,
        237.42554717011677,
        651.8908639108453,
        513.7357583306027,
        237.42554717011674,
        882.1493732112501,
        513.7357707373416,
        513.7357583306025,
        559.7874601906833,
        467.68405647052145,
        191.37384531003582,
        191.37384531003585,
        1115.180472393058,
        467.6840564705216,
        836.0976713511691,
        145.32214344995506,
        651.890863910845,
        375.58065275035955,
        743.9942676310071,
        145.32214344995484,
        237.42554717011683,
        513.7357583306026,
        513.7357583306025,
        836.0976713511692,
        1434.769795532221,
        836.0976713511691,
        375.58065275036,
        836.0976713511692,
        513.7357583306028,
        99.27044158987397,
        99.27044158987407,
        836.0976713511692,
        191.36755359096603,
        697.9425065407288,
        329.528950890339,
        191.3738453100358,
        836.097671351169,
        651.8908639108455,
        99.27044158987405,
        513.7357583306025,
        191.3738453100358,
        1020.3044788727004,
        329.52895089027885,
        513.7357583306028
      ]
    },
    "num_parameters": 2,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- beta_offer_sensitivity: r = 0.538\n- beta_fairness_deviation_sensitivity: r = 0.375",
  "previous_models": [
    "Specification: U_accept = beta_offer_sensitivity * split_perc_self + beta_fairness_deviation_sensitivity * (split_perc_self - fair_perc_self_calc)\nSummary: This model predicts the utility of accepting a proposed offer as a responder in an ultimatum game. The utility (U_accept) is a linear combination of two components: the absolute percentage share proposed to the participant (split_perc_self) and the deviation of this proposed share from a calculated fair share percentage based on token contributions (split_perc_self - fair_perc_self_calc). The model has two learnable parameters: beta_offer_sensitivity, which scales the influence of the absolute proposed percentage, and beta_fairness_deviation_sensitivity, which scales the influence of the deviation from fairness. This structure is designed for robust parameter identifiability because the two parameters scale inputs that represent fundamentally different aspects of the offer \u2013 its magnitude relative to the whole pie and its magnitude relative to a fairness benchmark. Mathematically, this forms a linear combination of split_perc_self and fair_perc_self_calc, whose coefficients are identifiable as long as these inputs are not perfectly correlated, allowing for the recovery of the two original parameters. The utility is converted to a probability of acceptance using a logistic function.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 465.6902055957252\nOverall Accuracy: 0.7231\nGroup Accuracies:\n- Control: 0.7668\n- Cocaine: 0.6840\n\nParameter Recovery:\n- beta_offer_sensitivity: r = 0.538\n- beta_fairness_deviation_sensitivity: r = 0.375"
  ]
}