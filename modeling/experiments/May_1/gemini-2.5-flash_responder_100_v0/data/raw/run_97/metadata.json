{
  "task_description": "In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "Okay, here are the improved instructions for the next run (Run 97 of 100).\n\nTask Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\nproposed_amount = when participant is the proposer, what is the amount proposed to the opponent (in \u00a3)\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified).\n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy. Specifically, *all* learnable parameters must have a parameter recovery value of >= 0.7.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able to be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal.\n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied.\n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1:\n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = beta + epsilon*E + eta*N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\"min\": 0, \"max\": 1},\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\"min\": \"-inf\", \"max\": \"inf\"},\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\"min\": \"-inf\", \"max\": \"inf\"},\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\"description\": \"Noise parameter\",\n      \"range\": {\"min\": 0, \"max\": 1, \"exclusive_max\": true},\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe variable names you choose in your <VARIABLES> section must be used exactly as specified in the <MODEL> formula. Please ensure these names can be used directly in Python code (e.g., avoid Python reserved words). Also, ensure consistency between the variable names in your JSON and the variable names in the provided data description where applicable (e.g., use `split_perc_self` exactly as provided).\n\nModel Type:\nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\nInstructions: Okay, here are the improved instructions for the next run (Run 97 of 100).\n\nThe previous model (`sensitivity_to_offer * split_perc_self - aversion_strength * is_unfair`) achieved a good BIC but suffered from very low accuracy (0.545) and, critically, failed parameter recovery for the `sensitivity_to_offer` parameter (-0.024). This indicates the model structure did not allow for robust estimation of both parameters and did not capture the behavioral data well.\n\nRobust parameter identifiability (recovery >= 0.7 for *all* learnable parameters) remains a **primary objective**, but it MUST be achieved alongside significantly improved accuracy and a competitive BIC. A model with good recovery but poor predictive power is not useful.\n\nWe must learn from past results:\n- Scaling the absolute offer percentage (`split_perc_self`) and a binary unfairness indicator (`is_unfair`) linearly failed parameter recovery for the offer sensitivity.\n- Scaling the deviation from fairness (`split_perc_self - fair_perc_self_calc`) and a constant intercept *did* achieve robust recovery for both parameters (0.893, 0.786) and better accuracy (0.784).\n\nThis suggests that using the *deviation from fairness* as a core input for one parameter is effective for identifiability, especially when the second parameter introduces a distinct type of influence.\n\nYou *must* include these standard calculation steps first before defining `U_accept`:\n1.  Calculate `sum_tokens = token_self + token_opp`.\n2.  Calculate `fair_perc_self_calc` handling the `sum_tokens == 0` case (defaulting to 50.0), using `token_self` and `token_opp` from the data. Use `IF` for the conditional calculation.\n\nNow, design a **novel** formula for `U_accept` incorporating exactly **two learnable parameters**. Focus intently on creating a structure where these two parameters have demonstrably *different types* of mathematical influence on the utility calculation to ensure robust identifiability and improve accuracy.\n\nSpecifically, design the model such that:\n*   One parameter scales the **deviation from fairness**: `(split_perc_self - fair_perc_self_calc)`. Using this as input for one parameter's term builds on the success of a previous high-recovery model. Choose a descriptive, Python-safe name for this parameter (e.g., `deviation_sensitivity`).\n*   The second parameter must scale a variable that introduces a *structurally distinct* influence on utility compared to the continuous deviation. Think creatively about variables or states that are not simply linear transformations of the deviation or the absolute offer. Good candidates for the input scaled by the second parameter include:\n    -   A categorical or binary variable derived from data (e.g., based on `trial_type`, or `is_unfair`, but consider how its influence is combined distinctly from the deviation term).\n    -   A constant (like an intercept), though aim for novelty beyond the simple additive intercept model if possible.\n    -   A variable representing the total potential gain or the contribution structure, scaled in a way that is not confounded with the deviation term.\n\nAvoid structures that failed recovery previously:\n- Do not have two parameters scaling inputs that are both continuous and highly correlated linear transformations of `split_perc_self` and `fair_perc_self_calc`.\n- Do not use the structure `parameter_1 * split_perc_self + parameter_2 * is_unfair`, as this specifically failed recovery in the last run.\n\nYour goal is to find a novel way to combine the influence of a fairness deviation parameter with a second parameter whose influence is clearly separable, leading to both robust recovery (>= 0.7 for BOTH) and substantially improved accuracy and BIC compared to the previous run (Accuracy: 0.545, BIC: 52.82).\n\nUse `split_perc_self`, `token_self`, `token_opp` as data variables, plus potentially *other relevant data variables* from the list provided (`trial_type`, `combined_earning`, etc.) or calculated variables derived from them (like `is_unfair`, binary indicators from `trial_type`).\n\n*   **Key Inputs & Calculated Variables:** Use `split_perc_self`, `token_self`, `token_opp` as data variables, plus potentially others from the provided list. Calculate `sum_tokens`, `fair_perc_self_calc`, and `U_accept`. Include calculation steps for derived variables *before* the formula for `U_accept`. Include function definitions like `IF` if used.\n*   **Learnable Parameters:** Exactly **2 learnable parameters**. Choose descriptive, Python-safe names. Define clear, generous, finite numerical bounds. Ensure the parameters' roles are structurally distinct to promote identifiability (e.g., one scaling a continuous deviation, the other scaling a categorical/binary variable or constant).\n*   **Calculated Variables:** Include descriptions for *all* calculated variables used in the model (including `U_accept`, `sum_tokens`, `fair_perc_self_calc`, any derived binary variables, and any functions like `IF`) with `source: \"calculated\"`. Include descriptions for all data variables used as inputs with `source: \"data\"` that appear in your <MODEL>.\n*   **Variable Descriptions:** Provide variable descriptions in JSON format between <VARIABLES> tags for *all* variables used in the <MODEL> formula. Include source, range (with inclusive flags), distribution (if applicable), and learnable status. Remember variable names must exactly match the model formula and data descriptions.\n*   **Target Variable:** Specify \"accept\" using <target_variable> tags.\n*   **Summary:** Provide a concise summary between <SUMMARY> tags. Describe the model's core idea. **Crucially, explain *how* the specific structure of your model ensures robust parameter identifiability for *both* learnable parameters (recovery >= 0.7), building on the lessons learned from the success of the deviation + intercept model and the failure of the absolute offer + binary unfairness model.**\n\nAvailable Data Variables:\n- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.\n(Note: Use `split_perc_self` for the participant's proposed percentage share).\n\nPlease think through this step by step, then provide your model specification and variable descriptions. Remember that robust parameter identifiability for *both* learnable parameters (>= 0.7 recovery for both) AND improved accuracy/BIC are the absolute priorities. Your goal is to find a novel structure with *exactly two* parameters where their influences are clearly distinguishable (e.g., one scaling the fairness deviation, the other scaling a non-confounding variable like a categorical indicator) and interact in a way that allows for reliable estimation and better fits the human decision data. Be creative and think \"out of the box\" about how to use the available data variables and exactly two parameters to capture distinct aspects of the responder's decision process while maintaining identifiability and improving predictive power.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: Okay, here are the improved instructions for the next run (Run 97 of 100).\n\nTask Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\nproposed_amount = when participant is the proposer, what is the amount proposed to the opponent (in \u00a3)\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified).\n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy. Specifically, *all* learnable parameters must have a parameter recovery value of >= 0.7.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able to be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal.\n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied.\n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1:\n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = beta + epsilon*E + eta*N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\"min\": 0, \"max\": 1},\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\"min\": \"-inf\", \"max\": \"inf\"},\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\"min\": \"-inf\", \"max\": \"inf\"},\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\"description\": \"Noise parameter\",\n      \"range\": {\"min\": 0, \"max\": 1, \"exclusive_max\": true},\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe variable names you choose in your <VARIABLES> section must be used exactly as specified in the <MODEL> formula. Please ensure these names can be used directly in Python code (e.g., avoid Python reserved words). Also, ensure consistency between the variable names in your JSON and the variable names in the provided data description where applicable (e.g., use `split_perc_self` exactly as provided).\n\nModel Type:\nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\nInstructions: Okay, here are the improved instructions for the next run (Run 97 of 100).\n\nThe previous model (`sensitivity_to_offer * split_perc_self - aversion_strength * is_unfair`) achieved a good BIC but suffered from very low accuracy (0.545) and, critically, failed parameter recovery for the `sensitivity_to_offer` parameter (-0.024). This indicates the model structure did not allow for robust estimation of both parameters and did not capture the behavioral data well.\n\nRobust parameter identifiability (recovery >= 0.7 for *all* learnable parameters) remains a **primary objective**, but it MUST be achieved alongside significantly improved accuracy and a competitive BIC. A model with good recovery but poor predictive power is not useful.\n\nWe must learn from past results:\n- Scaling the absolute offer percentage (`split_perc_self`) and a binary unfairness indicator (`is_unfair`) linearly failed parameter recovery for the offer sensitivity.\n- Scaling the deviation from fairness (`split_perc_self - fair_perc_self_calc`) and a constant intercept *did* achieve robust recovery for both parameters (0.893, 0.786) and better accuracy (0.784).\n\nThis suggests that using the *deviation from fairness* as a core input for one parameter is effective for identifiability, especially when the second parameter introduces a distinct type of influence.\n\nYou *must* include these standard calculation steps first before defining `U_accept`:\n1.  Calculate `sum_tokens = token_self + token_opp`.\n2.  Calculate `fair_perc_self_calc` handling the `sum_tokens == 0` case (defaulting to 50.0), using `token_self` and `token_opp` from the data. Use `IF` for the conditional calculation.\n\nNow, design a **novel** formula for `U_accept` incorporating exactly **two learnable parameters**. Focus intently on creating a structure where these two parameters have demonstrably *different types* of mathematical influence on the utility calculation to ensure robust identifiability and improve accuracy.\n\nSpecifically, design the model such that:\n*   One parameter scales the **deviation from fairness**: `(split_perc_self - fair_perc_self_calc)`. Using this as input for one parameter's term builds on the success of a previous high-recovery model. Choose a descriptive, Python-safe name for this parameter (e.g., `deviation_sensitivity`).\n*   The second parameter must scale a variable that introduces a *structurally distinct* influence on utility compared to the continuous deviation. Think creatively about variables or states that are not simply linear transformations of the deviation or the absolute offer. Good candidates for the input scaled by the second parameter include:\n    -   A categorical or binary variable derived from data (e.g., based on `trial_type`, or `is_unfair`, but consider how its influence is combined distinctly from the deviation term).\n    -   A constant (like an intercept), though aim for novelty beyond the simple additive intercept model if possible.\n    -   A variable representing the total potential gain or the contribution structure, scaled in a way that is not confounded with the deviation term.\n\nAvoid structures that failed recovery previously:\n- Do not have two parameters scaling inputs that are both continuous and highly correlated linear transformations of `split_perc_self` and `fair_perc_self_calc`.\n- Do not use the structure `parameter_1 * split_perc_self + parameter_2 * is_unfair`, as this specifically failed recovery in the last run.\n\nYour goal is to find a novel way to combine the influence of a fairness deviation parameter with a second parameter whose influence is clearly separable, leading to both robust recovery (>= 0.7 for BOTH) and substantially improved accuracy and BIC compared to the previous run (Accuracy: 0.545, BIC: 52.82).\n\nUse `split_perc_self`, `token_self`, `token_opp` as data variables, plus potentially *other relevant data variables* from the list provided (`trial_type`, `combined_earning`, etc.) or calculated variables derived from them (like `is_unfair`, binary indicators from `trial_type`).\n\n*   **Key Inputs & Calculated Variables:** Use `split_perc_self`, `token_self`, `token_opp` as data variables, plus potentially others from the provided list. Calculate `sum_tokens`, `fair_perc_self_calc`, and `U_accept`. Include calculation steps for derived variables *before* the formula for `U_accept`. Include function definitions like `IF` if used.\n*   **Learnable Parameters:** Exactly **2 learnable parameters**. Choose descriptive, Python-safe names. Define clear, generous, finite numerical bounds. Ensure the parameters' roles are structurally distinct to promote identifiability (e.g., one scaling a continuous deviation, the other scaling a categorical/binary variable or constant).\n*   **Calculated Variables:** Include descriptions for *all* calculated variables used in the model (including `U_accept`, `sum_tokens`, `fair_perc_self_calc`, any derived binary variables, and any functions like `IF`) with `source: \"calculated\"`. Include descriptions for all data variables used as inputs with `source: \"data\"` that appear in your <MODEL>.\n*   **Variable Descriptions:** Provide variable descriptions in JSON format between <VARIABLES> tags for *all* variables used in the <MODEL> formula. Include source, range (with inclusive flags), distribution (if applicable), and learnable status. Remember variable names must exactly match the model formula and data descriptions.\n*   **Target Variable:** Specify \"accept\" using <target_variable> tags.\n*   **Summary:** Provide a concise summary between <SUMMARY> tags. Describe the model's core idea. **Crucially, explain *how* the specific structure of your model ensures robust parameter identifiability for *both* learnable parameters (recovery >= 0.7), building on the lessons learned from the success of the deviation + intercept model and the failure of the absolute offer + binary unfairness model.**\n\nAvailable Data Variables:\n- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.\n(Note: Use `split_perc_self` for the participant's proposed percentage share).\n\nPlease think through this step by step, then provide your model specification and variable descriptions. Remember that robust parameter identifiability for *both* learnable parameters (>= 0.7 recovery for both) AND improved accuracy/BIC are the absolute priorities. Your goal is to find a novel structure with *exactly two* parameters where their influences are clearly distinguishable (e.g., one scaling the fairness deviation, the other scaling a non-confounding variable like a categorical indicator) and interact in a way that allows for reliable estimation and better fits the human decision data. Be creative and think \"out of the box\" about how to use the available data variables and exactly two parameters to capture distinct aspects of the responder's decision process while maintaining identifiability and improving predictive power.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<target_variable>\naccept\n</target_variable>\n\n<MODEL>\nsum_tokens = token_self + token_opp\nfair_perc_self_calc = IF(sum_tokens == 0, 50.0, (token_self / sum_tokens) * 100)\nis_below_fair = IF(split_perc_self < fair_perc_self_calc, 1, 0)\nU_accept = deviation_sensitivity * (split_perc_self - fair_perc_self_calc) + below_fair_impact * is_below_fair\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The proposed share for the participant in %\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"sum_tokens\": {\n      \"description\": \"Total number of tokens found by participant and opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fair_perc_self_calc\": {\n      \"description\": \"Calculated fair percentage share for the participant based on token contributions, handling sum_tokens=0 case by defaulting to 50%\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"IF\": {\n      \"description\": \"Conditional function: IF(condition, value_if_true, value_if_false)\",\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"is_below_fair\": {\n      \"description\": \"Binary indicator: 1 if the proposed share for the participant (split_perc_self) is strictly below their calculated fair share (fair_perc_self_calc), 0 otherwise\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"deviation_sensitivity\": {\n      \"description\": \"Sensitivity of utility to the continuous deviation of the proposed share from the calculated fair share\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"below_fair_impact\": {\n      \"description\": \"Additional impact on utility when the proposed share is below the calculated fair share\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U_accept\": {\n      \"description\": \"Utility of accepting the offer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<SUMMARY>\nA utility model for responder decisions based on the fairness of the proposed split. The utility of accepting an offer is calculated as a linear combination of two terms, each scaled by a learnable parameter. The first term represents the continuous deviation of the proposed percentage share from the calculated fair share based on token contributions, scaled by 'deviation_sensitivity'. The second term is a binary indicator that is 1 if the proposed share is below the fair share, scaled by 'below_fair_impact'. This structure models sensitivity to the magnitude of unfairness (deviation_sensitivity) and a distinct impact specifically for offers falling below the fairness threshold (below_fair_impact). The combination of a linear term based on deviation and a step function based on the 'below fair' state is designed to provide structurally separable influences, enhancing the identifiability of the two learnable parameters.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['deviation_sensitivity', 'below_fair_impact']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                sum_tokens = token_self + token_opp\nfair_perc_self_calc = IF(sum_tokens == 0, 50.0, (token_self / sum_tokens) * 100)\nis_below_fair = IF(split_perc_self < fair_perc_self_calc, 1, 0)\nU_accept = deviation_sensitivity * (split_perc_self - fair_perc_self_calc) + below_fair_impact * is_below_fair\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The proposed share for the participant in %\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"sum_tokens\": {\n      \"description\": \"Total number of tokens found by participant and opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fair_perc_self_calc\": {\n      \"description\": \"Calculated fair percentage share for the participant based on token contributions, handling sum_tokens=0 case by defaulting to 50%\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"IF\": {\n      \"description\": \"Conditional function: IF(condition, value_if_true, value_if_false)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"is_below_fair\": {\n      \"description\": \"Binary indicator: 1 if the proposed share for the participant (split_perc_self) is strictly below their calculated fair share (fair_perc_self_calc), 0 otherwise\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"deviation_sensitivity\": {\n      \"description\": \"Sensitivity of utility to the continuous deviation of the proposed share from the calculated fair share\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"below_fair_impact\": {\n      \"description\": \"Additional impact on utility when the proposed share is below the calculated fair share\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U_accept\": {\n      \"description\": \"Utility of accepting the offer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, deviation_sensitivity=1, below_fair_impact=1):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        split_perc_self = trial.get(\"splitperc_self\", 0)\n\n        sum_tokens = token_self + token_opp\n        if sum_tokens == 0:\n            fair_perc_self_calc = 50.0\n        else:\n            fair_perc_self_calc = (token_self / sum_tokens) * 100\n\n        if split_perc_self < fair_perc_self_calc:\n            is_below_fair = 1\n        else:\n            is_below_fair = 0\n\n        U_accept = deviation_sensitivity * (split_perc_self - fair_perc_self_calc) + below_fair_impact * is_below_fair\n        model_predictions.append(U_accept)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n",
      "timestamp": 1746104966.574659
    }
  ],
  "learnable_parameters": {
    "deviation_sensitivity": {
      "description": "Sensitivity of utility to the continuous deviation of the proposed share from the calculated fair share",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "below_fair_impact": {
      "description": "Additional impact on utility when the proposed share is below the calculated fair share",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "sum_tokens = token_self + token_opp\nfair_perc_self_calc = IF(sum_tokens == 0, 50.0, (token_self / sum_tokens) * 100)\nis_below_fair = IF(split_perc_self < fair_perc_self_calc, 1, 0)\nU_accept = deviation_sensitivity * (split_perc_self - fair_perc_self_calc) + below_fair_impact * is_below_fair",
  "variable_descriptions": {
    "token_self": {
      "description": "Number of tokens found by the participant",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "split_perc_self": {
      "description": "The proposed share for the participant in %",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "sum_tokens": {
      "description": "Total number of tokens found by participant and opponent",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "fair_perc_self_calc": {
      "description": "Calculated fair percentage share for the participant based on token contributions, handling sum_tokens=0 case by defaulting to 50%",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "IF": {
      "description": "Conditional function: IF(condition, value_if_true, value_if_false)",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "is_below_fair": {
      "description": "Binary indicator: 1 if the proposed share for the participant (split_perc_self) is strictly below their calculated fair share (fair_perc_self_calc), 0 otherwise",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "deviation_sensitivity": {
      "description": "Sensitivity of utility to the continuous deviation of the proposed share from the calculated fair share",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "below_fair_impact": {
      "description": "Additional impact on utility when the proposed share is below the calculated fair share",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "U_accept": {
      "description": "Utility of accepting the offer",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "A utility model for responder decisions based on the fairness of the proposed split. The utility of accepting an offer is calculated as a linear combination of two terms, each scaled by a learnable parameter. The first term represents the continuous deviation of the proposed percentage share from the calculated fair share based on token contributions, scaled by 'deviation_sensitivity'. The second term is a binary indicator that is 1 if the proposed share is below the fair share, scaled by 'below_fair_impact'. This structure models sensitivity to the magnitude of unfairness (deviation_sensitivity) and a distinct impact specifically for offers falling below the fairness threshold (below_fair_impact). The combination of a linear term based on deviation and a step function based on the 'below fair' state is designed to provide structurally separable influences, enhancing the identifiability of the two learnable parameters.",
  "target_variable": "accept",
  "full_reasoning": "<target_variable>\naccept\n</target_variable>\n\n<MODEL>\nsum_tokens = token_self + token_opp\nfair_perc_self_calc = IF(sum_tokens == 0, 50.0, (token_self / sum_tokens) * 100)\nis_below_fair = IF(split_perc_self < fair_perc_self_calc, 1, 0)\nU_accept = deviation_sensitivity * (split_perc_self - fair_perc_self_calc) + below_fair_impact * is_below_fair\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The proposed share for the participant in %\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"sum_tokens\": {\n      \"description\": \"Total number of tokens found by participant and opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fair_perc_self_calc\": {\n      \"description\": \"Calculated fair percentage share for the participant based on token contributions, handling sum_tokens=0 case by defaulting to 50%\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"IF\": {\n      \"description\": \"Conditional function: IF(condition, value_if_true, value_if_false)\",\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"is_below_fair\": {\n      \"description\": \"Binary indicator: 1 if the proposed share for the participant (split_perc_self) is strictly below their calculated fair share (fair_perc_self_calc), 0 otherwise\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"deviation_sensitivity\": {\n      \"description\": \"Sensitivity of utility to the continuous deviation of the proposed share from the calculated fair share\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"below_fair_impact\": {\n      \"description\": \"Additional impact on utility when the proposed share is below the calculated fair share\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U_accept\": {\n      \"description\": \"Utility of accepting the offer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<SUMMARY>\nA utility model for responder decisions based on the fairness of the proposed split. The utility of accepting an offer is calculated as a linear combination of two terms, each scaled by a learnable parameter. The first term represents the continuous deviation of the proposed percentage share from the calculated fair share based on token contributions, scaled by 'deviation_sensitivity'. The second term is a binary indicator that is 1 if the proposed share is below the fair share, scaled by 'below_fair_impact'. This structure models sensitivity to the magnitude of unfairness (deviation_sensitivity) and a distinct impact specifically for offers falling below the fairness threshold (below_fair_impact). The combination of a linear term based on deviation and a step function based on the 'below fair' state is designed to provide structurally separable influences, enhancing the identifiability of the two learnable parameters.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: sum_tokens = token_self + token_opp\nfair_perc_self_calc = IF(sum_tokens == 0, 50.0, (token_self / sum_tokens) * 100)\nis_below_fair = IF(split_perc_self < fair_perc_self_calc, 1, 0)\nU_accept = deviation_sensitivity * (split_perc_self - fair_perc_self_calc) + below_fair_impact * is_below_fair\nSummary: A utility model for responder decisions based on the fairness of the proposed split. The utility of accepting an offer is calculated as a linear combination of two terms, each scaled by a learnable parameter. The first term represents the continuous deviation of the proposed percentage share from the calculated fair share based on token contributions, scaled by 'deviation_sensitivity'. The second term is a binary indicator that is 1 if the proposed share is below the fair share, scaled by 'below_fair_impact'. This structure models sensitivity to the magnitude of unfairness (deviation_sensitivity) and a distinct impact specifically for offers falling below the fairness threshold (below_fair_impact). The combination of a linear term based on deviation and a step function based on the 'below fair' state is designed to provide structurally separable influences, enhancing the identifiability of the two learnable parameters.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, deviation_sensitivity=1, below_fair_impact=1):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        split_perc_self = trial.get(\"splitperc_self\", 0)\n\n        sum_tokens = token_self + token_opp\n        if sum_tokens == 0:\n            fair_perc_self_calc = 50.0\n        else:\n            fair_perc_self_calc = (token_self / sum_tokens) * 100\n\n        if split_perc_self < fair_perc_self_calc:\n            is_below_fair = 1\n        else:\n            is_below_fair = 0\n\n        U_accept = deviation_sensitivity * (split_perc_self - fair_perc_self_calc) + below_fair_impact * is_below_fair\n        model_predictions.append(U_accept)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.7490842490842491,
  "group_accuracies": {
    "Control": 0.7939276485788114,
    "Cocaine": 0.7089120370370371
  },
  "group_parameter_averages": {
    "Control": {
      "deviation_sensitivity": -1.7269718868682056,
      "below_fair_impact": 4.5177726914346055
    },
    "Cocaine": {
      "deviation_sensitivity": 0.5741840394990384,
      "below_fair_impact": 1.6744189329184247
    }
  },
  "fitting_results": [
    {
      "deviation_sensitivity": 0.05396690843357115,
      "below_fair_impact": -2.386772772692414,
      "success": true,
      "log_likelihood": -6.925190461845945,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.1170332397582844,
      "below_fair_impact": 2.3112448420530143,
      "success": true,
      "log_likelihood": -18.785809141372596,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.3605422650402235,
      "below_fair_impact": 7.671185010614655,
      "success": true,
      "log_likelihood": -9.28285731148684,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.12652222707813093,
      "below_fair_impact": 1.92252325977377,
      "success": true,
      "log_likelihood": -17.45009470762891,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.5625370126300454,
      "below_fair_impact": 10.0,
      "success": true,
      "log_likelihood": -6.418540177264313,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.14220083445619658,
      "below_fair_impact": 3.8673907184683975,
      "success": true,
      "log_likelihood": -16.680112272130707,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": -10.0,
      "below_fair_impact": 10.0,
      "success": true,
      "log_likelihood": -47.4379962174008,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": -4.964512294338933,
      "below_fair_impact": -3.9709337612141153,
      "success": true,
      "log_likelihood": -323.7481719857982,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": -10.0,
      "below_fair_impact": 2.407643221704715,
      "success": true,
      "log_likelihood": -47.4379962174008,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.22615216498892116,
      "below_fair_impact": 3.3734514217315636,
      "success": true,
      "log_likelihood": -12.448277146333025,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.4862740936239633,
      "below_fair_impact": 8.643777239386424,
      "success": true,
      "log_likelihood": -7.294774278487226,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.10209211420082355,
      "below_fair_impact": -0.9622563701464139,
      "success": true,
      "log_likelihood": -8.923662481601188,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.21649965403398516,
      "below_fair_impact": 3.5054747014281458,
      "success": true,
      "log_likelihood": -13.063158426606785,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.12652346500589357,
      "below_fair_impact": 10.0,
      "success": true,
      "log_likelihood": -1.9527418384757536,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": -10.0,
      "below_fair_impact": 10.0,
      "success": true,
      "log_likelihood": -47.437996217400794,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.12652549066879443,
      "below_fair_impact": 10.0,
      "success": true,
      "log_likelihood": -1.9527418388864242,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.12652561275979762,
      "below_fair_impact": 10.0,
      "success": true,
      "log_likelihood": -1.9527418389369753,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": -6.791750086260033,
      "below_fair_impact": 4.451464054186525,
      "success": true,
      "log_likelihood": -162.56725086738987,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.24333449378485028,
      "below_fair_impact": 10.0,
      "success": true,
      "log_likelihood": -6.702020650806144,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": -10.0,
      "below_fair_impact": 9.381945482583632,
      "success": true,
      "log_likelihood": -47.43799621740077,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": -5.5584450063063695,
      "below_fair_impact": 5.231623532490083,
      "success": true,
      "log_likelihood": -415.85161029155364,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.1600937259825307,
      "below_fair_impact": 6.553215582928676,
      "success": true,
      "log_likelihood": -11.012332266285558,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 10.0,
      "below_fair_impact": -8.727066627741305,
      "success": true,
      "log_likelihood": -208.61895272768413,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.0912787142786456,
      "below_fair_impact": 1.9345818001162187,
      "success": true,
      "log_likelihood": -20.63802444763022,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.20575925638917836,
      "below_fair_impact": 4.1245445432998205,
      "success": true,
      "log_likelihood": -13.902456841988664,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.16853191558904318,
      "below_fair_impact": 4.0580495826647764,
      "success": true,
      "log_likelihood": -15.571953669745499,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.11682509834320634,
      "below_fair_impact": 2.6724365054620964,
      "success": true,
      "log_likelihood": -18.868740128671327,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.3644929241205402,
      "below_fair_impact": 3.61365762225564,
      "success": true,
      "log_likelihood": -7.717351826602295,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.16359348733256673,
      "below_fair_impact": 7.0733492255953765,
      "success": true,
      "log_likelihood": -9.869398058079904,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": -6.187120989058979,
      "below_fair_impact": -1.1564527166275802,
      "success": true,
      "log_likelihood": -231.64480365254482,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": -9.999999999999998,
      "below_fair_impact": 8.243766722854955,
      "success": true,
      "log_likelihood": -47.437996217400794,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 10.0,
      "below_fair_impact": -4.802220336184789,
      "success": true,
      "log_likelihood": -47.43799621740082,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.05174969131118643,
      "below_fair_impact": 0.6344951789373149,
      "success": true,
      "log_likelihood": -22.401649140516923,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.11364647214843063,
      "below_fair_impact": 1.4932356161033093,
      "success": true,
      "log_likelihood": -17.755009579970647,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.12652559766229612,
      "below_fair_impact": 10.0,
      "success": true,
      "log_likelihood": -1.9527418389305633,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.08720815833597671,
      "below_fair_impact": 2.490864313828524,
      "success": true,
      "log_likelihood": -20.41001631585854,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.19712511655939033,
      "below_fair_impact": 5.814118355574129,
      "success": true,
      "log_likelihood": -13.05755336287376,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.16238760972056568,
      "below_fair_impact": 3.243898079601365,
      "success": true,
      "log_likelihood": -16.030270941919994,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": -10.0,
      "below_fair_impact": 9.615242556699908,
      "success": true,
      "log_likelihood": -323.74820737788656,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.09207187980415743,
      "below_fair_impact": 4.941910479023586,
      "success": true,
      "log_likelihood": -10.855637999145674,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": -6.007609787641108,
      "below_fair_impact": 6.732183697216218,
      "success": true,
      "log_likelihood": -369.7999091975902,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.13162780423138395,
      "below_fair_impact": 0.2626549697118162,
      "success": true,
      "log_likelihood": -11.69030783137142,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": -10.0,
      "below_fair_impact": 10.0,
      "success": true,
      "log_likelihood": -70.46384714744124,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.07981427006708042,
      "below_fair_impact": 1.837421116150962,
      "success": true,
      "log_likelihood": -21.45754908363515,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.13215084633378577,
      "below_fair_impact": 3.4119394674781804,
      "success": true,
      "log_likelihood": -17.572980330038224,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.05807107823612856,
      "below_fair_impact": 2.2317349601792333,
      "success": true,
      "log_likelihood": -20.797163410588166,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.08911820990248734,
      "below_fair_impact": 1.887255173772446,
      "success": true,
      "log_likelihood": -20.788344917847326,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.06553748786255988,
      "below_fair_impact": 0.604469289930649,
      "success": true,
      "log_likelihood": -20.529781131728683,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.23689528853499908,
      "below_fair_impact": 3.8559805161784335,
      "success": true,
      "log_likelihood": -12.30860478617725,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.02436053009063314,
      "below_fair_impact": 0.5652784548089037,
      "success": true,
      "log_likelihood": -24.550708667267926,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.05549459974414137,
      "below_fair_impact": 2.006250871949257,
      "success": true,
      "log_likelihood": -21.590030175015258,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 10.0,
      "below_fair_impact": -3.9135981931763295,
      "success": true,
      "log_likelihood": -93.48969807748169,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.08777741539213131,
      "below_fair_impact": 2.017906529930457,
      "success": true,
      "log_likelihood": -20.899285935569544,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.02958987592445637,
      "below_fair_impact": 0.9464836331944538,
      "success": true,
      "log_likelihood": -24.120162297428408,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.12408609737804778,
      "below_fair_impact": 1.676093516900329,
      "success": true,
      "log_likelihood": -17.161173376257853,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.38893007614648567,
      "below_fair_impact": 4.97665262905572,
      "success": true,
      "log_likelihood": -7.931983503792291,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.16129407300090795,
      "below_fair_impact": 1.2666708031761584,
      "success": true,
      "log_likelihood": -12.83612243977047,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": -0.0684515309876613,
      "below_fair_impact": 0.6191419558576419,
      "success": true,
      "log_likelihood": -13.62493976355384,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 9.757962505344587,
      "below_fair_impact": -10.0,
      "success": true,
      "log_likelihood": -70.46384714744129,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.05777362386281541,
      "below_fair_impact": 2.7610307581921587,
      "success": true,
      "log_likelihood": -18.06655089384368,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": -8.449688766122545,
      "below_fair_impact": -1.7626965710585445,
      "success": true,
      "log_likelihood": -369.76633325391936,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.13320445431769323,
      "below_fair_impact": 2.6458552477197714,
      "success": true,
      "log_likelihood": -17.745209097811593,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 3.6533177938690016,
      "below_fair_impact": 6.756474198438946,
      "success": true,
      "log_likelihood": -47.212096853619755,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 10.0,
      "below_fair_impact": -0.6107243652216938,
      "success": true,
      "log_likelihood": -300.7223564478449,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.11169362936275583,
      "below_fair_impact": 0.008999737208793004,
      "success": true,
      "log_likelihood": -12.296930820087448,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.11128505346484592,
      "below_fair_impact": 2.5480396735379025,
      "success": true,
      "log_likelihood": -19.24882721884692,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.08740909843551832,
      "below_fair_impact": 4.784288908888834,
      "success": true,
      "log_likelihood": -11.005179543454155,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": -7.675135366836812,
      "below_fair_impact": 3.217349522890853,
      "success": true,
      "log_likelihood": -162.5672508676031,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.08174207441441449,
      "below_fair_impact": 1.881162534760712,
      "success": true,
      "log_likelihood": -21.3229268232786,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.07866859837326165,
      "below_fair_impact": 4.49424718982392,
      "success": true,
      "log_likelihood": -11.281746365433186,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 6.433322849866109,
      "below_fair_impact": 7.427843608403656,
      "success": true,
      "log_likelihood": -1.3862959930896388,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 5.0047890801806165,
      "below_fair_impact": -8.287910125050344,
      "success": true,
      "log_likelihood": -93.48966477137428,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.10798183219286346,
      "below_fair_impact": 2.2983599441415175,
      "success": true,
      "log_likelihood": -19.478666742226753,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.06829621142167706,
      "below_fair_impact": 2.8605404174508737,
      "success": true,
      "log_likelihood": -18.565390523211548,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.031037696118312204,
      "below_fair_impact": 0.58976127709702,
      "success": true,
      "log_likelihood": -24.2518588698019,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.09560110378827248,
      "below_fair_impact": 3.0540370101273315,
      "success": true,
      "log_likelihood": -18.989386479794373,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": -9.999999999999998,
      "below_fair_impact": 7.448737502728167,
      "success": true,
      "log_likelihood": -93.48969807748169,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": -0.08321538285996301,
      "below_fair_impact": -5.891417745836168,
      "success": true,
      "log_likelihood": -6.495090836248458,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.02068685739581316,
      "below_fair_impact": 0.7358540964005351,
      "success": true,
      "log_likelihood": -24.41314640254251,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 3.8848519860177255,
      "below_fair_impact": -6.007821955389971,
      "success": true,
      "log_likelihood": -47.38301646605785,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.01831057247055846,
      "below_fair_impact": 0.2982298009259754,
      "success": true,
      "log_likelihood": -24.66213974876931,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": -0.009018672145569869,
      "below_fair_impact": 2.0645693244276417,
      "success": true,
      "log_likelihood": -12.707683076872417,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.05701642907248546,
      "below_fair_impact": -1.145076227882245,
      "success": true,
      "log_likelihood": -12.018716085504268,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.1297245560180264,
      "below_fair_impact": 2.5740788938235144,
      "success": true,
      "log_likelihood": -17.96429708374036,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.021950424967326125,
      "below_fair_impact": 0.765838083231432,
      "success": true,
      "log_likelihood": -24.377623951111367,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 8.15741981909758,
      "below_fair_impact": 8.547610345342317,
      "success": true,
      "log_likelihood": -24.41214530336094,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.07849584511861138,
      "below_fair_impact": 2.6023758504542824,
      "success": true,
      "log_likelihood": -20.146735945052722,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.15419693122523087,
      "below_fair_impact": 1.1737908876175782,
      "success": true,
      "log_likelihood": -13.098962534221535,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.21041250019607777,
      "below_fair_impact": 10.0,
      "success": true,
      "log_likelihood": -6.026462640768005,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.08595701111691877,
      "below_fair_impact": 1.49761934450172,
      "success": true,
      "log_likelihood": -20.670668149125213,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": -6.31988477141655,
      "below_fair_impact": 7.051380887001407,
      "success": true,
      "log_likelihood": -300.71622905896385,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "deviation_sensitivity": {
        "r": 0.8717032610978865,
        "p": 4.0333560421822183e-32
      },
      "below_fair_impact": {
        "r": 0.2635889877090706,
        "p": 0.00805429691366735
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 116.37008313718479,
  "bic_Control": 134.26642845243535,
  "bic_Cocaine": 100.33794045893951,
  "bic_results": {
    "average_bic": 116.37008313718479,
    "individual_bics": [
      21.017418800604112,
      44.73865615965741,
      25.732752499885898,
      42.06722729217004,
      20.004118231440845,
      40.52726242117363,
      102.04303031171382,
      654.6633818485086,
      102.04303031171382,
      32.06359216957827,
      21.75658643388667,
      25.014362840114593,
      33.29335473012579,
      11.072521553863726,
      102.0430303117138,
      11.072521554685068,
      11.07252155478617,
      332.30153961169196,
      20.571079178524506,
      102.04303031171376,
      838.8702584600195,
      29.191702409483334,
      424.4049433322805,
      48.443086772172656,
      34.97195156088955,
      38.31094521640322,
      44.90451813425487,
      22.60174153011681,
      26.90583399307203,
      470.45664518200186,
      102.0430303117138,
      102.04303031171386,
      51.970336157946065,
      42.67705703685351,
      11.072521554773346,
      47.9870705086293,
      33.28214460265974,
      39.22757976075221,
      654.6634526326853,
      28.878313875203567,
      746.7668562720926,
      30.54765353965506,
      148.0947321717947,
      50.08213604418252,
      42.312998536988665,
      48.76136469808855,
      48.74372771260687,
      48.226600140369584,
      31.784247449266722,
      56.26845521144807,
      50.347098226942734,
      194.1464340318756,
      48.96560974805131,
      55.407362471769034,
      41.489384629427924,
      23.031004884496802,
      32.83928275645316,
      34.4169174040199,
      148.0947321717948,
      43.30013966459958,
      746.6997043847509,
      42.6574560725354,
      101.59123158415173,
      608.611750772602,
      31.76089951708712,
      45.66469231460606,
      29.177396963820527,
      332.3015396121184,
      49.81289152346942,
      29.73053060777859,
      9.939629863091497,
      194.14636741966078,
      46.124371361365725,
      44.29781892333531,
      55.67075561651602,
      45.145810836500964,
      194.1464340318756,
      20.157219549409135,
      55.993330681997236,
      101.93307080902792,
      56.49131737445084,
      32.58240403065705,
      31.204470047920758,
      43.095632044392936,
      55.92228577913495,
      55.9913284836341,
      47.46050976701766,
      33.36496294535529,
      19.21996315844823,
      48.50837417516264,
      608.5994959948399
    ],
    "group_enabled": true,
    "group_bics": {
      "Control": [
        21.017418800604112,
        44.73865615965741,
        25.732752499885898,
        42.06722729217004,
        20.004118231440845,
        40.52726242117363,
        102.04303031171382,
        654.6633818485086,
        102.04303031171382,
        32.06359216957827,
        21.75658643388667,
        25.014362840114593,
        33.29335473012579,
        11.072521553863726,
        102.0430303117138,
        11.072521554685068,
        11.07252155478617,
        332.30153961169196,
        20.571079178524506,
        102.04303031171376,
        838.8702584600195,
        29.191702409483334,
        424.4049433322805,
        48.443086772172656,
        34.97195156088955,
        38.31094521640322,
        44.90451813425487,
        22.60174153011681,
        26.90583399307203,
        470.45664518200186,
        102.0430303117138,
        102.04303031171386,
        51.970336157946065,
        42.67705703685351,
        11.072521554773346,
        47.9870705086293,
        33.28214460265974,
        39.22757976075221,
        654.6634526326853,
        28.878313875203567,
        746.7668562720926,
        30.54765353965506,
        148.0947321717947
      ],
      "Cocaine": [
        50.08213604418252,
        42.312998536988665,
        48.76136469808855,
        48.74372771260687,
        48.226600140369584,
        31.784247449266722,
        56.26845521144807,
        50.347098226942734,
        194.1464340318756,
        48.96560974805131,
        55.407362471769034,
        41.489384629427924,
        23.031004884496802,
        32.83928275645316,
        34.4169174040199,
        148.0947321717948,
        43.30013966459958,
        746.6997043847509,
        42.6574560725354,
        101.59123158415173,
        608.611750772602,
        31.76089951708712,
        45.66469231460606,
        29.177396963820527,
        332.3015396121184,
        49.81289152346942,
        29.73053060777859,
        9.939629863091497,
        194.14636741966078,
        46.124371361365725,
        44.29781892333531,
        55.67075561651602,
        45.145810836500964,
        194.1464340318756,
        20.157219549409135,
        55.993330681997236,
        101.93307080902792,
        56.49131737445084,
        32.58240403065705,
        31.204470047920758,
        43.095632044392936,
        55.92228577913495,
        55.9913284836341,
        47.46050976701766,
        33.36496294535529,
        19.21996315844823,
        48.50837417516264,
        608.5994959948399
      ]
    },
    "num_parameters": 2,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- deviation_sensitivity: r = 0.872\n- below_fair_impact: r = 0.264",
  "previous_models": [
    "Specification: sum_tokens = token_self + token_opp\nfair_perc_self_calc = IF(sum_tokens == 0, 50.0, (token_self / sum_tokens) * 100)\nis_below_fair = IF(split_perc_self < fair_perc_self_calc, 1, 0)\nU_accept = deviation_sensitivity * (split_perc_self - fair_perc_self_calc) + below_fair_impact * is_below_fair\nSummary: A utility model for responder decisions based on the fairness of the proposed split. The utility of accepting an offer is calculated as a linear combination of two terms, each scaled by a learnable parameter. The first term represents the continuous deviation of the proposed percentage share from the calculated fair share based on token contributions, scaled by 'deviation_sensitivity'. The second term is a binary indicator that is 1 if the proposed share is below the fair share, scaled by 'below_fair_impact'. This structure models sensitivity to the magnitude of unfairness (deviation_sensitivity) and a distinct impact specifically for offers falling below the fairness threshold (below_fair_impact). The combination of a linear term based on deviation and a step function based on the 'below fair' state is designed to provide structurally separable influences, enhancing the identifiability of the two learnable parameters.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 116.37008313718479\nOverall Accuracy: 0.7491\nGroup Accuracies:\n- Control: 0.7939\n- Cocaine: 0.7089\n\nParameter Recovery:\n- deviation_sensitivity: r = 0.872\n- below_fair_impact: r = 0.264"
  ]
}