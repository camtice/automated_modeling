Okay, here are the improved instructions for the next run (Run 99 of 100).

Task Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable "token_self". The other variable, "token_opp", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.

Again, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.

Note that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same "fairness".

Below is the description of each variable in the dataset:

trial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]
trial_role = the role of the participant [1 = responder, 2 = proposer]
token_opp = number of tokens found by the opponent
token_self = number of tokens found by the participant
combined_earning = amount of money earned in total (note that each token found is £3)
split_opp = the proposed share of the opponent (in £)
split_self = the proposed share for the participant (in £)
splitperc_opp = same but in %
split_perc_self = same but in %
accept = whether the participant responded accept (1) or reject (0)
accepted_amount = if accepted, what is the amount gain (in £)
accepted_perc = same as above but in %
proposed_perc = when participant is the proposer, what is the % proposed to the opponent
proposed_amount = when participant is the proposer, what is the amount proposed to the opponent (in £)

Desired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified).

The model should:
1. Predict only responder behavior (should target "accept = whether the participant responded accept (1) or reject (0)")
2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy. Specifically, *all* learnable parameters must have a parameter recovery value of >= 0.7.
3. Be applicable to the dataset given within the task description (i.e. the model should be able to be run using only the provided dataset structure).
4. Predict utility, where less than 0 is less than 50% likely.

For any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).

Then, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.
For example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal.

Use clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied.

{
  "variables": {
    "variable_name": {
      "description": "Clear description",
      "range": {
        "min": value,
        "max": value,
        "inclusive_min": boolean,
        "inclusive_max": boolean
      },
      "distribution": {
        "type": "distribution type",
        "parameters": {}
      },
      "learnable": boolean,
      "source": "learnable/data/calculated"
    }
  }
}
</VARIABLES>

Example #1:
<EXAMPLE>
(Model of a Random Choice Task):
Let me think through this step by step...
[your reasoning here]

<MODEL>
U_i = beta + epsilon*E + eta*N
</MODEL>

<VARIABLES>
{
  "variables": {
    "U_i": {
      "description": "Utility of choosing action i",
      "range": {
        "min": "-inf",
        "max": "inf"
      },
      "learnable": false,
      "source": "calculated"
    },
    "beta": {
      "description": "Base tendency parameter (inherent preference)",
      "range": {"min": 0, "max": 1},
      "learnable": true,
      "source": "learnable"
    },
    "epsilon": {
      "description": "Environmental sensitivity parameter",
      "range": {"min": "-inf", "max": "inf"},
      "learnable": true,
      "source": "learnable"
    },
    "E": {
      "description": "Environmental cue value",
      "range": {"min": "-inf", "max": "inf"},
      "learnable": false,
      "source": "data"
    },
    "eta": {"description": "Noise parameter",
      "range": {"min": 0, "max": 1, "exclusive_max": true},
      "learnable": false,
      "source": "data"
    },
    "N": {
      "description": "Random noise drawn from normal distribution N(0,1)",
      "distribution": {
        "type": "normal",
        "mean": 0,\n        "std": 1
      },
      "learnable": false,
      "source": "calculated"
    }
  }
}
</VARIABLES>
<SUMMARY>
A linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (β) constrained to [0,1] and an unconstrained environmental sensitivity parameter (ε). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.
</SUMMARY>
</EXAMPLE>

Please be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.

The variable names you choose in your <VARIABLES> section must be used exactly as specified in the <MODEL> formula. Please ensure these names can be used directly in Python code (e.g., avoid Python reserved words). Also, ensure consistency between the variable names in your JSON and the variable names in the provided data description where applicable (e.g., use `split_perc_self` exactly as provided).

Model Type:
Your model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.

Instructions: Okay, here are the improved instructions for the next run (Run 99 of 100).

The previous model (`deviation_sensitivity * (split_perc_self - fair_perc_self_calc) + self_more_contrib_intercept_shift * is_self_more_contrib`) showed mixed results. While it built on previous insights, the parameter recovery for both parameters (`deviation_sensitivity`: r = 0.655, `self_more_contrib_intercept_shift`: r = 0.387) fell short of the required >= 0.7 threshold. Its overall accuracy (0.697) and BIC (450.68) were also worse than the recent model with the best overall BIC (52.82) and the target based on the previously best-recovering deviation model (BIC < 116.37, accuracy > 0.749).

Robust parameter identifiability (recovery >= 0.7 for *all* learnable parameters) remains the **highest priority**. It MUST be achieved alongside improved accuracy and a better BIC.

We must learn from the repeated failure of models that use a linear combination of a continuous fairness deviation term (`split_perc_self - fair_perc_self_calc`) and a scaled **binary indicator** (like `is_below_fair` or `is_self_more_contrib`). The parameter scaling the binary term consistently fails recovery. This strongly suggests that in this structure, the binary indicator does not introduce a sufficiently distinct or non-confounding source of variance from the continuous deviation term for both parameters to be reliably estimated. Models scaling related continuous terms have also struggled with recovering both parameters.

You *must* include these standard calculation steps first before defining `U_accept`:\n1.  Calculate `sum_tokens = token_self + token_opp`.\n2.  Calculate `fair_perc_self_calc` handling the `sum_tokens == 0` case (defaulting to 50.0), using `token_self` and `token_opp` from the data. Use `IF` for the conditional calculation.

Now, design a **novel** formula for `U_accept` incorporating exactly **two learnable parameters**. Focus intently on creating a structure where these two parameters scale inputs that have demonstrably *different structural roles* and *sources of variance* on the utility calculation to ensure robust identifiability for *both* parameters (target r >= 0.7 for both) and improve performance (accuracy > 0.697, BIC < 450.68, aiming towards the best BIC 52.82).

To achieve this, pair a parameter scaling the **deviation from fairness** (`split_perc_self - fair_perc_self_calc`) with a second parameter scaling an input that is **structurally distinct** and unlikely to be confounded with the deviation term in a linear combination. **Explicitly avoid using binary indicators** derived from offer comparison to fairness or contribution type (like `is_below_fair`, `is_unfair`, `is_self_more_contrib`) as the scaled input for the second parameter, as this strategy has repeatedly failed parameter recovery.

Consider these structural approaches for your two-parameter model, where one parameter scales `(split_perc_self - fair_perc_self_calc)` and the second parameter scales a distinct input:

1.  **Deviation + Constant (Intercept):** The second parameter scales a constant (e.g., 1). This adds a baseline utility shift independent of the offer details. Model form: `U_accept = deviation_sensitivity * (split_perc_self - fair_perc_self_calc) + intercept_parameter`. This is a fundamental structure in linear models and should promote identifiability if the deviation input varies.
2.  **Deviation + Absolute Deviation:** The second parameter scales the absolute magnitude of the fairness deviation. Model form: `U_accept = deviation_sensitivity * (split_perc_self - fair_perc_self_calc) + absolute_deviation_sensitivity * abs(split_perc_self - fair_perc_self_calc)`. This captures potential non-linear sensitivity (like loss aversion) around the fair point, and `(split_perc_self - fair_perc_self_calc)` and `abs(split_perc_self - fair_perc_self_calc)` are structurally different inputs.
3.  **Deviation + Total Resource:** The second parameter scales the total earnings available in the trial (`combined_earning`). Model form: `U_accept = deviation_sensitivity * (split_perc_self - fair_perc_self_calc) + total_earning_sensitivity * combined_earning`. The total resource size is distinct from the fairness of the split percentage and could influence willingness to accept.

You *must* select one of these structural patterns (or propose a similarly novel structure with a clear justification) for your model. Choose descriptive, Python-safe names for your exactly two learnable parameters.

*   **Key Inputs & Calculated Variables:** Use `split_perc_self`, `token_self`, `token_opp` as data variables, plus `combined_earning` if using option 3, and `trial_type` if using it to derive other non-binary inputs. Calculate `sum_tokens`, `fair_perc_self_calc`, and `U_accept`. Include calculation steps for derived variables *before* the formula for `U_accept`. Include function definitions like `IF` if used.
*   **Learnable Parameters:** Exactly **2 learnable parameters**. Choose descriptive, Python-safe names. Define clear, generous, finite numerical bounds. Ensure the parameters' roles are structurally distinct as discussed above to promote identifiability (recovery >= 0.7 for BOTH).
*   **Calculated Variables:** Include descriptions for *all* calculated variables used in the model (including `U_accept`, `sum_tokens`, `fair_perc_self_calc`, any derived variables, and any functions like `IF`) with `source: "calculated"`. Include descriptions for all data variables used as inputs with `source: "data"` that appear in your <MODEL>.
*   **Variable Descriptions:** Provide variable descriptions in JSON format between <VARIABLES> tags for *all* variables used in the <MODEL> formula. Include source, range (with inclusive flags), distribution (if applicable), and learnable status. Remember variable names must exactly match the model formula and data descriptions.
*   **Target Variable:** Specify "accept" using <target_variable> tags.
*   **Summary:** Provide a concise summary between <SUMMARY> tags. Describe the model's core idea. **Crucially, explain *how* the specific structural difference between the inputs scaled by your two learnable parameters promotes robust parameter identifiability (recovery >= 0.7 for BOTH learnable parameters), explicitly addressing why this structure is expected to succeed where linear combinations of deviation and binary indicators failed.**

Available Data Variables:
- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.
(Note: Use `split_perc_self` for the participant's proposed percentage share).

Please think through this step by step, then provide your model specification and variable descriptions. Remember that robust parameter identifiability for *both* learnable parameters (>= 0.7 recovery for both) AND improved accuracy/BIC are the absolute priorities. Your goal is to find a novel structure with *exactly two* parameters where their influences are clearly distinguishable through structurally different mathematical roles, allowing for reliable estimation and better fits the human decision data. Be creative and think "out of the box" about how to use the available data variables and exactly two parameters to capture distinct aspects of the responder's decision process while maintaining identifiability and improving predictive power.