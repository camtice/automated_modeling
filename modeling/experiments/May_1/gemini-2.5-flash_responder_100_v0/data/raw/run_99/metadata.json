{
  "task_description": "In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "Okay, here are the improved instructions for the next run (Run 99 of 100).\n\nTask Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\nproposed_amount = when participant is the proposer, what is the amount proposed to the opponent (in \u00a3)\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified).\n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy. Specifically, *all* learnable parameters must have a parameter recovery value of >= 0.7.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able to be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal.\n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied.\n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1:\n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = beta + epsilon*E + eta*N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\"min\": 0, \"max\": 1},\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\"min\": \"-inf\", \"max\": \"inf\"},\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\"min\": \"-inf\", \"max\": \"inf\"},\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\"description\": \"Noise parameter\",\n      \"range\": {\"min\": 0, \"max\": 1, \"exclusive_max\": true},\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe variable names you choose in your <VARIABLES> section must be used exactly as specified in the <MODEL> formula. Please ensure these names can be used directly in Python code (e.g., avoid Python reserved words). Also, ensure consistency between the variable names in your JSON and the variable names in the provided data description where applicable (e.g., use `split_perc_self` exactly as provided).\n\nModel Type:\nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\nInstructions: Okay, here are the improved instructions for the next run (Run 99 of 100).\n\nThe previous model (`deviation_sensitivity * (split_perc_self - fair_perc_self_calc) + self_more_contrib_intercept_shift * is_self_more_contrib`) showed mixed results. While it built on previous insights, the parameter recovery for both parameters (`deviation_sensitivity`: r = 0.655, `self_more_contrib_intercept_shift`: r = 0.387) fell short of the required >= 0.7 threshold. Its overall accuracy (0.697) and BIC (450.68) were also worse than the recent model with the best overall BIC (52.82) and the target based on the previously best-recovering deviation model (BIC < 116.37, accuracy > 0.749).\n\nRobust parameter identifiability (recovery >= 0.7 for *all* learnable parameters) remains the **highest priority**. It MUST be achieved alongside improved accuracy and a better BIC.\n\nWe must learn from the repeated failure of models that use a linear combination of a continuous fairness deviation term (`split_perc_self - fair_perc_self_calc`) and a scaled **binary indicator** (like `is_below_fair` or `is_self_more_contrib`). The parameter scaling the binary term consistently fails recovery. This strongly suggests that in this structure, the binary indicator does not introduce a sufficiently distinct or non-confounding source of variance from the continuous deviation term for both parameters to be reliably estimated. Models scaling related continuous terms have also struggled with recovering both parameters.\n\nYou *must* include these standard calculation steps first before defining `U_accept`:\\n1.  Calculate `sum_tokens = token_self + token_opp`.\\n2.  Calculate `fair_perc_self_calc` handling the `sum_tokens == 0` case (defaulting to 50.0), using `token_self` and `token_opp` from the data. Use `IF` for the conditional calculation.\n\nNow, design a **novel** formula for `U_accept` incorporating exactly **two learnable parameters**. Focus intently on creating a structure where these two parameters scale inputs that have demonstrably *different structural roles* and *sources of variance* on the utility calculation to ensure robust identifiability for *both* parameters (target r >= 0.7 for both) and improve performance (accuracy > 0.697, BIC < 450.68, aiming towards the best BIC 52.82).\n\nTo achieve this, pair a parameter scaling the **deviation from fairness** (`split_perc_self - fair_perc_self_calc`) with a second parameter scaling an input that is **structurally distinct** and unlikely to be confounded with the deviation term in a linear combination. **Explicitly avoid using binary indicators** derived from offer comparison to fairness or contribution type (like `is_below_fair`, `is_unfair`, `is_self_more_contrib`) as the scaled input for the second parameter, as this strategy has repeatedly failed parameter recovery.\n\nConsider these structural approaches for your two-parameter model, where one parameter scales `(split_perc_self - fair_perc_self_calc)` and the second parameter scales a distinct input:\n\n1.  **Deviation + Constant (Intercept):** The second parameter scales a constant (e.g., 1). This adds a baseline utility shift independent of the offer details. Model form: `U_accept = deviation_sensitivity * (split_perc_self - fair_perc_self_calc) + intercept_parameter`. This is a fundamental structure in linear models and should promote identifiability if the deviation input varies.\n2.  **Deviation + Absolute Deviation:** The second parameter scales the absolute magnitude of the fairness deviation. Model form: `U_accept = deviation_sensitivity * (split_perc_self - fair_perc_self_calc) + absolute_deviation_sensitivity * abs(split_perc_self - fair_perc_self_calc)`. This captures potential non-linear sensitivity (like loss aversion) around the fair point, and `(split_perc_self - fair_perc_self_calc)` and `abs(split_perc_self - fair_perc_self_calc)` are structurally different inputs.\n3.  **Deviation + Total Resource:** The second parameter scales the total earnings available in the trial (`combined_earning`). Model form: `U_accept = deviation_sensitivity * (split_perc_self - fair_perc_self_calc) + total_earning_sensitivity * combined_earning`. The total resource size is distinct from the fairness of the split percentage and could influence willingness to accept.\n\nYou *must* select one of these structural patterns (or propose a similarly novel structure with a clear justification) for your model. Choose descriptive, Python-safe names for your exactly two learnable parameters.\n\n*   **Key Inputs & Calculated Variables:** Use `split_perc_self`, `token_self`, `token_opp` as data variables, plus `combined_earning` if using option 3, and `trial_type` if using it to derive other non-binary inputs. Calculate `sum_tokens`, `fair_perc_self_calc`, and `U_accept`. Include calculation steps for derived variables *before* the formula for `U_accept`. Include function definitions like `IF` if used.\n*   **Learnable Parameters:** Exactly **2 learnable parameters**. Choose descriptive, Python-safe names. Define clear, generous, finite numerical bounds. Ensure the parameters' roles are structurally distinct as discussed above to promote identifiability (recovery >= 0.7 for BOTH).\n*   **Calculated Variables:** Include descriptions for *all* calculated variables used in the model (including `U_accept`, `sum_tokens`, `fair_perc_self_calc`, any derived variables, and any functions like `IF`) with `source: \"calculated\"`. Include descriptions for all data variables used as inputs with `source: \"data\"` that appear in your <MODEL>.\n*   **Variable Descriptions:** Provide variable descriptions in JSON format between <VARIABLES> tags for *all* variables used in the <MODEL> formula. Include source, range (with inclusive flags), distribution (if applicable), and learnable status. Remember variable names must exactly match the model formula and data descriptions.\n*   **Target Variable:** Specify \"accept\" using <target_variable> tags.\n*   **Summary:** Provide a concise summary between <SUMMARY> tags. Describe the model's core idea. **Crucially, explain *how* the specific structural difference between the inputs scaled by your two learnable parameters promotes robust parameter identifiability (recovery >= 0.7 for BOTH learnable parameters), explicitly addressing why this structure is expected to succeed where linear combinations of deviation and binary indicators failed.**\n\nAvailable Data Variables:\n- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.\n(Note: Use `split_perc_self` for the participant's proposed percentage share).\n\nPlease think through this step by step, then provide your model specification and variable descriptions. Remember that robust parameter identifiability for *both* learnable parameters (>= 0.7 recovery for both) AND improved accuracy/BIC are the absolute priorities. Your goal is to find a novel structure with *exactly two* parameters where their influences are clearly distinguishable through structurally different mathematical roles, allowing for reliable estimation and better fits the human decision data. Be creative and think \"out of the box\" about how to use the available data variables and exactly two parameters to capture distinct aspects of the responder's decision process while maintaining identifiability and improving predictive power.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: Okay, here are the improved instructions for the next run (Run 99 of 100).\n\nTask Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\nproposed_amount = when participant is the proposer, what is the amount proposed to the opponent (in \u00a3)\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified).\n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy. Specifically, *all* learnable parameters must have a parameter recovery value of >= 0.7.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able to be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal.\n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied.\n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1:\n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = beta + epsilon*E + eta*N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\"min\": 0, \"max\": 1},\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\"min\": \"-inf\", \"max\": \"inf\"},\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\"min\": \"-inf\", \"max\": \"inf\"},\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\"description\": \"Noise parameter\",\n      \"range\": {\"min\": 0, \"max\": 1, \"exclusive_max\": true},\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe variable names you choose in your <VARIABLES> section must be used exactly as specified in the <MODEL> formula. Please ensure these names can be used directly in Python code (e.g., avoid Python reserved words). Also, ensure consistency between the variable names in your JSON and the variable names in the provided data description where applicable (e.g., use `split_perc_self` exactly as provided).\n\nModel Type:\nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\nInstructions: Okay, here are the improved instructions for the next run (Run 99 of 100).\n\nThe previous model (`deviation_sensitivity * (split_perc_self - fair_perc_self_calc) + self_more_contrib_intercept_shift * is_self_more_contrib`) showed mixed results. While it built on previous insights, the parameter recovery for both parameters (`deviation_sensitivity`: r = 0.655, `self_more_contrib_intercept_shift`: r = 0.387) fell short of the required >= 0.7 threshold. Its overall accuracy (0.697) and BIC (450.68) were also worse than the recent model with the best overall BIC (52.82) and the target based on the previously best-recovering deviation model (BIC < 116.37, accuracy > 0.749).\n\nRobust parameter identifiability (recovery >= 0.7 for *all* learnable parameters) remains the **highest priority**. It MUST be achieved alongside improved accuracy and a better BIC.\n\nWe must learn from the repeated failure of models that use a linear combination of a continuous fairness deviation term (`split_perc_self - fair_perc_self_calc`) and a scaled **binary indicator** (like `is_below_fair` or `is_self_more_contrib`). The parameter scaling the binary term consistently fails recovery. This strongly suggests that in this structure, the binary indicator does not introduce a sufficiently distinct or non-confounding source of variance from the continuous deviation term for both parameters to be reliably estimated. Models scaling related continuous terms have also struggled with recovering both parameters.\n\nYou *must* include these standard calculation steps first before defining `U_accept`:\\n1.  Calculate `sum_tokens = token_self + token_opp`.\\n2.  Calculate `fair_perc_self_calc` handling the `sum_tokens == 0` case (defaulting to 50.0), using `token_self` and `token_opp` from the data. Use `IF` for the conditional calculation.\n\nNow, design a **novel** formula for `U_accept` incorporating exactly **two learnable parameters**. Focus intently on creating a structure where these two parameters scale inputs that have demonstrably *different structural roles* and *sources of variance* on the utility calculation to ensure robust identifiability for *both* parameters (target r >= 0.7 for both) and improve performance (accuracy > 0.697, BIC < 450.68, aiming towards the best BIC 52.82).\n\nTo achieve this, pair a parameter scaling the **deviation from fairness** (`split_perc_self - fair_perc_self_calc`) with a second parameter scaling an input that is **structurally distinct** and unlikely to be confounded with the deviation term in a linear combination. **Explicitly avoid using binary indicators** derived from offer comparison to fairness or contribution type (like `is_below_fair`, `is_unfair`, `is_self_more_contrib`) as the scaled input for the second parameter, as this strategy has repeatedly failed parameter recovery.\n\nConsider these structural approaches for your two-parameter model, where one parameter scales `(split_perc_self - fair_perc_self_calc)` and the second parameter scales a distinct input:\n\n1.  **Deviation + Constant (Intercept):** The second parameter scales a constant (e.g., 1). This adds a baseline utility shift independent of the offer details. Model form: `U_accept = deviation_sensitivity * (split_perc_self - fair_perc_self_calc) + intercept_parameter`. This is a fundamental structure in linear models and should promote identifiability if the deviation input varies.\n2.  **Deviation + Absolute Deviation:** The second parameter scales the absolute magnitude of the fairness deviation. Model form: `U_accept = deviation_sensitivity * (split_perc_self - fair_perc_self_calc) + absolute_deviation_sensitivity * abs(split_perc_self - fair_perc_self_calc)`. This captures potential non-linear sensitivity (like loss aversion) around the fair point, and `(split_perc_self - fair_perc_self_calc)` and `abs(split_perc_self - fair_perc_self_calc)` are structurally different inputs.\n3.  **Deviation + Total Resource:** The second parameter scales the total earnings available in the trial (`combined_earning`). Model form: `U_accept = deviation_sensitivity * (split_perc_self - fair_perc_self_calc) + total_earning_sensitivity * combined_earning`. The total resource size is distinct from the fairness of the split percentage and could influence willingness to accept.\n\nYou *must* select one of these structural patterns (or propose a similarly novel structure with a clear justification) for your model. Choose descriptive, Python-safe names for your exactly two learnable parameters.\n\n*   **Key Inputs & Calculated Variables:** Use `split_perc_self`, `token_self`, `token_opp` as data variables, plus `combined_earning` if using option 3, and `trial_type` if using it to derive other non-binary inputs. Calculate `sum_tokens`, `fair_perc_self_calc`, and `U_accept`. Include calculation steps for derived variables *before* the formula for `U_accept`. Include function definitions like `IF` if used.\n*   **Learnable Parameters:** Exactly **2 learnable parameters**. Choose descriptive, Python-safe names. Define clear, generous, finite numerical bounds. Ensure the parameters' roles are structurally distinct as discussed above to promote identifiability (recovery >= 0.7 for BOTH).\n*   **Calculated Variables:** Include descriptions for *all* calculated variables used in the model (including `U_accept`, `sum_tokens`, `fair_perc_self_calc`, any derived variables, and any functions like `IF`) with `source: \"calculated\"`. Include descriptions for all data variables used as inputs with `source: \"data\"` that appear in your <MODEL>.\n*   **Variable Descriptions:** Provide variable descriptions in JSON format between <VARIABLES> tags for *all* variables used in the <MODEL> formula. Include source, range (with inclusive flags), distribution (if applicable), and learnable status. Remember variable names must exactly match the model formula and data descriptions.\n*   **Target Variable:** Specify \"accept\" using <target_variable> tags.\n*   **Summary:** Provide a concise summary between <SUMMARY> tags. Describe the model's core idea. **Crucially, explain *how* the specific structural difference between the inputs scaled by your two learnable parameters promotes robust parameter identifiability (recovery >= 0.7 for BOTH learnable parameters), explicitly addressing why this structure is expected to succeed where linear combinations of deviation and binary indicators failed.**\n\nAvailable Data Variables:\n- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.\n(Note: Use `split_perc_self` for the participant's proposed percentage share).\n\nPlease think through this step by step, then provide your model specification and variable descriptions. Remember that robust parameter identifiability for *both* learnable parameters (>= 0.7 recovery for both) AND improved accuracy/BIC are the absolute priorities. Your goal is to find a novel structure with *exactly two* parameters where their influences are clearly distinguishable through structurally different mathematical roles, allowing for reliable estimation and better fits the human decision data. Be creative and think \"out of the box\" about how to use the available data variables and exactly two parameters to capture distinct aspects of the responder's decision process while maintaining identifiability and improving predictive power.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<MODEL>\nsum_tokens = token_self + token_opp\nfair_perc_self_calc = IF(sum_tokens == 0, 50.0, (token_self / sum_tokens) * 100)\ndeviation = split_perc_self - fair_perc_self_calc\nU_accept = deviation_sensitivity * deviation + base_accept_utility\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"sum_tokens\": {\n      \"description\": \"Sum of tokens found by participant and opponent.\",\n      \"range\": { \"min\": 0, \"max\": 100, \"inclusive_min\": true, \"inclusive_max\": true },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant.\",\n      \"range\": { \"min\": 0, \"max\": 50, \"inclusive_min\": true, \"inclusive_max\": true },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent.\",\n      \"range\": { \"min\": 0, \"max\": 50, \"inclusive_min\": true, \"inclusive_max\": true },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"fair_perc_self_calc\": {\n      \"description\": \"Calculated fair percentage for the participant based on their token contribution relative to the total tokens. Defaults to 50% if total tokens are zero.\",\n      \"range\": { \"min\": 0, \"max\": 100, \"inclusive_min\": true, \"inclusive_max\": true },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The proposed share for the participant in percentage.\",\n      \"range\": { \"min\": 0, \"max\": 100, \"inclusive_min\": true, \"inclusive_max\": true },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"deviation\": {\n      \"description\": \"The difference between the proposed percentage share for the participant and the calculated fair percentage.\",\n      \"range\": { \"min\": -100, \"max\": 100, \"inclusive_min\": true, \"inclusive_max\": true },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"deviation_sensitivity\": {\n      \"description\": \"Learnable parameter scaling the influence of the fairness deviation on the utility of accepting.\",\n      \"range\": { \"min\": -10, \"max\": 10, \"inclusive_min\": true, \"inclusive_max\": true },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"base_accept_utility\": {\n      \"description\": \"Learnable parameter representing a baseline tendency to accept an offer, independent of its fairness deviation.\",\n      \"range\": { \"min\": -10, \"max\": 10, \"inclusive_min\": true, \"inclusive_max\": true },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U_accept\": {\n      \"description\": \"The calculated utility of accepting the proposed offer.\",\n      \"range\": { \"min\": \"-inf\", \"max\": \"inf\" },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n     \"IF\": {\n      \"description\": \"A conditional function: IF(condition, value_if_true, value_if_false).\",\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nThis model predicts the utility of accepting a proposed offer in the ultimatum game responder role. The utility of accepting (`U_accept`) is calculated as a linear combination of the deviation of the proposed self-share percentage from the calculated fair share percentage, scaled by a `deviation_sensitivity` parameter, plus a `base_accept_utility` parameter that represents an overall bias towards acceptance or rejection. The fair percentage is calculated based on the relative token contributions of the participant and opponent, defaulting to 50% if total tokens are zero. This structure uses exactly two learnable parameters: `deviation_sensitivity`, which quantifies sensitivity to fairness deviation, and `base_accept_utility`, which captures a general response bias. The structural difference between the inputs scaled by these parameters (the varying fairness deviation vs. a constant implicit input for the base utility) is designed to ensure robust parameter identifiability, allowing for reliable estimation of both parameters, unlike previous models that combined deviation with binary indicators correlated with the deviation.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['deviation_sensitivity', 'base_accept_utility']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                sum_tokens = token_self + token_opp\nfair_perc_self_calc = IF(sum_tokens == 0, 50.0, (token_self / sum_tokens) * 100)\ndeviation = split_perc_self - fair_perc_self_calc\nU_accept = deviation_sensitivity * deviation + base_accept_utility\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"sum_tokens\": {\n      \"description\": \"Sum of tokens found by participant and opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 50,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 50,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"fair_perc_self_calc\": {\n      \"description\": \"Calculated fair percentage for the participant based on their token contribution relative to the total tokens. Defaults to 50% if total tokens are zero.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The proposed share for the participant in percentage.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"deviation\": {\n      \"description\": \"The difference between the proposed percentage share for the participant and the calculated fair percentage.\",\n      \"range\": {\n        \"min\": -100,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"deviation_sensitivity\": {\n      \"description\": \"Learnable parameter scaling the influence of the fairness deviation on the utility of accepting.\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"base_accept_utility\": {\n      \"description\": \"Learnable parameter representing a baseline tendency to accept an offer, independent of its fairness deviation.\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U_accept\": {\n      \"description\": \"The calculated utility of accepting the proposed offer.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"IF\": {\n      \"description\": \"A conditional function: IF(condition, value_if_true, value_if_false).\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, deviation_sensitivity=0, base_accept_utility=0):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        split_perc_self = trial.get(\"splitperc_self\", 0)\n\n        sum_tokens = token_self + token_opp\n        fair_perc_self_calc = 50.0 if sum_tokens == 0 else (token_self / sum_tokens) * 100\n        deviation = split_perc_self - fair_perc_self_calc\n        U_accept = deviation_sensitivity * deviation + base_accept_utility\n\n        model_predictions.append(U_accept)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n```",
      "timestamp": 1746105104.685813
    }
  ],
  "learnable_parameters": {
    "deviation_sensitivity": {
      "description": "Learnable parameter scaling the influence of the fairness deviation on the utility of accepting.",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "base_accept_utility": {
      "description": "Learnable parameter representing a baseline tendency to accept an offer, independent of its fairness deviation.",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "sum_tokens = token_self + token_opp\nfair_perc_self_calc = IF(sum_tokens == 0, 50.0, (token_self / sum_tokens) * 100)\ndeviation = split_perc_self - fair_perc_self_calc\nU_accept = deviation_sensitivity * deviation + base_accept_utility",
  "variable_descriptions": {
    "sum_tokens": {
      "description": "Sum of tokens found by participant and opponent.",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "token_self": {
      "description": "Number of tokens found by the participant.",
      "range": {
        "min": 0,
        "max": 50,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent.",
      "range": {
        "min": 0,
        "max": 50,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "fair_perc_self_calc": {
      "description": "Calculated fair percentage for the participant based on their token contribution relative to the total tokens. Defaults to 50% if total tokens are zero.",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "split_perc_self": {
      "description": "The proposed share for the participant in percentage.",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "deviation": {
      "description": "The difference between the proposed percentage share for the participant and the calculated fair percentage.",
      "range": {
        "min": -100,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "deviation_sensitivity": {
      "description": "Learnable parameter scaling the influence of the fairness deviation on the utility of accepting.",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "base_accept_utility": {
      "description": "Learnable parameter representing a baseline tendency to accept an offer, independent of its fairness deviation.",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "U_accept": {
      "description": "The calculated utility of accepting the proposed offer.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "IF": {
      "description": "A conditional function: IF(condition, value_if_true, value_if_false).",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "This model predicts the utility of accepting a proposed offer in the ultimatum game responder role. The utility of accepting (`U_accept`) is calculated as a linear combination of the deviation of the proposed self-share percentage from the calculated fair share percentage, scaled by a `deviation_sensitivity` parameter, plus a `base_accept_utility` parameter that represents an overall bias towards acceptance or rejection. The fair percentage is calculated based on the relative token contributions of the participant and opponent, defaulting to 50% if total tokens are zero. This structure uses exactly two learnable parameters: `deviation_sensitivity`, which quantifies sensitivity to fairness deviation, and `base_accept_utility`, which captures a general response bias. The structural difference between the inputs scaled by these parameters (the varying fairness deviation vs. a constant implicit input for the base utility) is designed to ensure robust parameter identifiability, allowing for reliable estimation of both parameters, unlike previous models that combined deviation with binary indicators correlated with the deviation.",
  "target_variable": "accept",
  "full_reasoning": "<MODEL>\nsum_tokens = token_self + token_opp\nfair_perc_self_calc = IF(sum_tokens == 0, 50.0, (token_self / sum_tokens) * 100)\ndeviation = split_perc_self - fair_perc_self_calc\nU_accept = deviation_sensitivity * deviation + base_accept_utility\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"sum_tokens\": {\n      \"description\": \"Sum of tokens found by participant and opponent.\",\n      \"range\": { \"min\": 0, \"max\": 100, \"inclusive_min\": true, \"inclusive_max\": true },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant.\",\n      \"range\": { \"min\": 0, \"max\": 50, \"inclusive_min\": true, \"inclusive_max\": true },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent.\",\n      \"range\": { \"min\": 0, \"max\": 50, \"inclusive_min\": true, \"inclusive_max\": true },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"fair_perc_self_calc\": {\n      \"description\": \"Calculated fair percentage for the participant based on their token contribution relative to the total tokens. Defaults to 50% if total tokens are zero.\",\n      \"range\": { \"min\": 0, \"max\": 100, \"inclusive_min\": true, \"inclusive_max\": true },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The proposed share for the participant in percentage.\",\n      \"range\": { \"min\": 0, \"max\": 100, \"inclusive_min\": true, \"inclusive_max\": true },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"deviation\": {\n      \"description\": \"The difference between the proposed percentage share for the participant and the calculated fair percentage.\",\n      \"range\": { \"min\": -100, \"max\": 100, \"inclusive_min\": true, \"inclusive_max\": true },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"deviation_sensitivity\": {\n      \"description\": \"Learnable parameter scaling the influence of the fairness deviation on the utility of accepting.\",\n      \"range\": { \"min\": -10, \"max\": 10, \"inclusive_min\": true, \"inclusive_max\": true },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"base_accept_utility\": {\n      \"description\": \"Learnable parameter representing a baseline tendency to accept an offer, independent of its fairness deviation.\",\n      \"range\": { \"min\": -10, \"max\": 10, \"inclusive_min\": true, \"inclusive_max\": true },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U_accept\": {\n      \"description\": \"The calculated utility of accepting the proposed offer.\",\n      \"range\": { \"min\": \"-inf\", \"max\": \"inf\" },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n     \"IF\": {\n      \"description\": \"A conditional function: IF(condition, value_if_true, value_if_false).\",\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nThis model predicts the utility of accepting a proposed offer in the ultimatum game responder role. The utility of accepting (`U_accept`) is calculated as a linear combination of the deviation of the proposed self-share percentage from the calculated fair share percentage, scaled by a `deviation_sensitivity` parameter, plus a `base_accept_utility` parameter that represents an overall bias towards acceptance or rejection. The fair percentage is calculated based on the relative token contributions of the participant and opponent, defaulting to 50% if total tokens are zero. This structure uses exactly two learnable parameters: `deviation_sensitivity`, which quantifies sensitivity to fairness deviation, and `base_accept_utility`, which captures a general response bias. The structural difference between the inputs scaled by these parameters (the varying fairness deviation vs. a constant implicit input for the base utility) is designed to ensure robust parameter identifiability, allowing for reliable estimation of both parameters, unlike previous models that combined deviation with binary indicators correlated with the deviation.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: sum_tokens = token_self + token_opp\nfair_perc_self_calc = IF(sum_tokens == 0, 50.0, (token_self / sum_tokens) * 100)\ndeviation = split_perc_self - fair_perc_self_calc\nU_accept = deviation_sensitivity * deviation + base_accept_utility\nSummary: This model predicts the utility of accepting a proposed offer in the ultimatum game responder role. The utility of accepting (`U_accept`) is calculated as a linear combination of the deviation of the proposed self-share percentage from the calculated fair share percentage, scaled by a `deviation_sensitivity` parameter, plus a `base_accept_utility` parameter that represents an overall bias towards acceptance or rejection. The fair percentage is calculated based on the relative token contributions of the participant and opponent, defaulting to 50% if total tokens are zero. This structure uses exactly two learnable parameters: `deviation_sensitivity`, which quantifies sensitivity to fairness deviation, and `base_accept_utility`, which captures a general response bias. The structural difference between the inputs scaled by these parameters (the varying fairness deviation vs. a constant implicit input for the base utility) is designed to ensure robust parameter identifiability, allowing for reliable estimation of both parameters, unlike previous models that combined deviation with binary indicators correlated with the deviation.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, deviation_sensitivity=0, base_accept_utility=0):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        split_perc_self = trial.get(\"splitperc_self\", 0)\n\n        sum_tokens = token_self + token_opp\n        fair_perc_self_calc = 50.0 if sum_tokens == 0 else (token_self / sum_tokens) * 100\n        deviation = split_perc_self - fair_perc_self_calc\n        U_accept = deviation_sensitivity * deviation + base_accept_utility\n\n        model_predictions.append(U_accept)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.7854090354090355,
  "group_accuracies": {
    "Control": 0.8481912144702842,
    "Cocaine": 0.7291666666666666
  },
  "group_parameter_averages": {
    "Control": {
      "deviation_sensitivity": -0.44109915414100537,
      "base_accept_utility": 5.1875231994207365
    },
    "Cocaine": {
      "deviation_sensitivity": 1.2287469840354532,
      "base_accept_utility": 2.3269716243261223
    }
  },
  "fitting_results": [
    {
      "deviation_sensitivity": 0.12103536900431221,
      "base_accept_utility": -1.147669305775409,
      "success": true,
      "log_likelihood": -7.230308461746913,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.11877663283493281,
      "base_accept_utility": 2.388224735328206,
      "success": true,
      "log_likelihood": -17.130826492285923,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.34988280856306486,
      "base_accept_utility": 7.445585125593099,
      "success": true,
      "log_likelihood": -7.805437463256591,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.13135648401162286,
      "base_accept_utility": 2.0690820467484325,
      "success": true,
      "log_likelihood": -15.926373630357322,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.5622288397209189,
      "base_accept_utility": 10.0,
      "success": true,
      "log_likelihood": -5.0089893122272615,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.1379462708560712,
      "base_accept_utility": 3.7722204542709936,
      "success": true,
      "log_likelihood": -14.92393750538477,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": -0.08880745857223477,
      "base_accept_utility": 10.0,
      "success": true,
      "log_likelihood": -0.0006919768652957059,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.15076756536886118,
      "base_accept_utility": 4.316620372307475,
      "success": true,
      "log_likelihood": -13.771835175377166,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": -0.08881507634490682,
      "base_accept_utility": 10.0,
      "success": true,
      "log_likelihood": -0.0006919767738336345,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.22414974558520134,
      "base_accept_utility": 3.363673969191756,
      "success": true,
      "log_likelihood": -10.913739546753268,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.47553090120279323,
      "base_accept_utility": 8.451984001335495,
      "success": true,
      "log_likelihood": -5.8688369533751406,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.12104793988219366,
      "base_accept_utility": -0.7173796259051382,
      "success": true,
      "log_likelihood": -8.759947827644433,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.2137070560530038,
      "base_accept_utility": 3.476565575884761,
      "success": true,
      "log_likelihood": -11.503835381551148,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": -0.08874275445295417,
      "base_accept_utility": 10.0,
      "success": true,
      "log_likelihood": -0.0006919779517364592,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": -0.08888491216870606,
      "base_accept_utility": 10.0,
      "success": true,
      "log_likelihood": -0.0006919762930838778,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": -0.08890346792548377,
      "base_accept_utility": 10.0,
      "success": true,
      "log_likelihood": -0.0006919762737957308,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": -0.08887361847949538,
      "base_accept_utility": 10.0,
      "success": true,
      "log_likelihood": -0.0006919763271103253,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": -8.927415161221765,
      "base_accept_utility": 9.873816401650414,
      "success": true,
      "log_likelihood": -161.1810595156003,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.24282883591379945,
      "base_accept_utility": 10.0,
      "success": true,
      "log_likelihood": -5.118099164469444,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": -0.08880581033571143,
      "base_accept_utility": 10.0,
      "success": true,
      "log_likelihood": -0.0006919768860967155,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.17124147288742328,
      "base_accept_utility": 3.8984573987036395,
      "success": true,
      "log_likelihood": -13.624651473827173,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.14862833445576645,
      "base_accept_utility": 6.15591030713752,
      "success": true,
      "log_likelihood": -9.251176636028154,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.07558369520808121,
      "base_accept_utility": 0.7896085639062359,
      "success": true,
      "log_likelihood": -19.48184676427152,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.09472564606207112,
      "base_accept_utility": 2.0612952183261974,
      "success": true,
      "log_likelihood": -18.98132353679033,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.20069555704071015,
      "base_accept_utility": 4.0324572074928255,
      "success": true,
      "log_likelihood": -12.291892203118781,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.163767638446032,
      "base_accept_utility": 3.9577034954940857,
      "success": true,
      "log_likelihood": -13.882515768405243,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.11665979277277594,
      "base_accept_utility": 2.699017622384432,
      "success": true,
      "log_likelihood": -17.14340452125411,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.36486044413911484,
      "base_accept_utility": 3.64649337519237,
      "success": true,
      "log_likelihood": -6.299207453638907,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.14988774915414696,
      "base_accept_utility": 6.576988362705143,
      "success": true,
      "log_likelihood": -8.113595346123494,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": -6.509311872369016,
      "base_accept_utility": 9.133873151821378,
      "success": true,
      "log_likelihood": -230.25871198380977,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": -0.0888924753918573,
      "base_accept_utility": 10.0,
      "success": true,
      "log_likelihood": -0.0006919762797260958,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.1210348305699315,
      "base_accept_utility": -1.1476769017209578,
      "success": true,
      "log_likelihood": -7.230308461762206,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.05167872139327261,
      "base_accept_utility": 0.652618134564965,
      "success": true,
      "log_likelihood": -22.132388725491623,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.12181342374745736,
      "base_accept_utility": 1.7177130819784854,
      "success": true,
      "log_likelihood": -16.34069559256399,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": -8.313920483525617,
      "base_accept_utility": 10.0,
      "success": true,
      "log_likelihood": -46.051792654092395,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.08749739597336778,
      "base_accept_utility": 2.5326196133204157,
      "success": true,
      "log_likelihood": -18.589364686432994,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.1891545221160047,
      "base_accept_utility": 5.597094343088143,
      "success": true,
      "log_likelihood": -11.396040978887623,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.16021100611416192,
      "base_accept_utility": 3.220096223726548,
      "success": true,
      "log_likelihood": -14.37813517950916,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.09705837244233254,
      "base_accept_utility": 2.9363812883196925,
      "success": true,
      "log_likelihood": -17.39658622386827,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.07891294056236255,
      "base_accept_utility": 4.514610245121511,
      "success": true,
      "log_likelihood": -8.830178869596338,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.0852957592471419,
      "base_accept_utility": 2.3217832245998737,
      "success": true,
      "log_likelihood": -19.14383962271387,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.16614377808332628,
      "base_accept_utility": 0.9183841947719303,
      "success": true,
      "log_likelihood": -10.98790640074103,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": -6.668773878379466e-08,
      "base_accept_utility": 3.5553456735271323,
      "success": true,
      "log_likelihood": -4.569499625091527,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.08362945224662771,
      "base_accept_utility": 1.9789223191275627,
      "success": true,
      "log_likelihood": -19.78156450587444,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.12921262272955633,
      "base_accept_utility": 3.3579170648136554,
      "success": true,
      "log_likelihood": -15.814356573266398,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.24277410924294981,
      "base_accept_utility": 8.832357717753553,
      "success": true,
      "log_likelihood": -31.64541777671235,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.09281883815487024,
      "base_accept_utility": 2.021779383202954,
      "success": true,
      "log_likelihood": -19.137618728717015,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.08060613215532225,
      "base_accept_utility": 1.0266596779928123,
      "success": true,
      "log_likelihood": -19.485436961298497,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.23277242867818176,
      "base_accept_utility": 3.800005430565016,
      "success": true,
      "log_likelihood": -10.760776442322474,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.026251694267306065,
      "base_accept_utility": 0.6412162257860887,
      "success": true,
      "log_likelihood": -24.209363041483755,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.05794871104913073,
      "base_accept_utility": 2.1213449414504266,
      "success": true,
      "log_likelihood": -19.723806333539144,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 10.0,
      "base_accept_utility": 5.837712671948268e-07,
      "success": true,
      "log_likelihood": -93.48969807748179,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.07028709320399149,
      "base_accept_utility": 1.5508395619207647,
      "success": true,
      "log_likelihood": -21.02770460182427,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.027020814826174765,
      "base_accept_utility": 0.8913498205262939,
      "success": true,
      "log_likelihood": -23.743444178532318,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.13104519116684596,
      "base_accept_utility": 1.8691940067855448,
      "success": true,
      "log_likelihood": -15.709015685829778,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.38184583929257127,
      "base_accept_utility": 4.888691956902579,
      "success": true,
      "log_likelihood": -6.485186863238087,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.17736365545855526,
      "base_accept_utility": 1.596413242230042,
      "success": true,
      "log_likelihood": -11.624353215175287,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": -0.04545509016465366,
      "base_accept_utility": 1.3528743652817676,
      "success": true,
      "log_likelihood": -11.74282239225404,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 10.0,
      "base_accept_utility": 1.8077806220735104e-05,
      "success": true,
      "log_likelihood": -70.46384714752298,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.05595977899086517,
      "base_accept_utility": 2.748066225522282,
      "success": true,
      "log_likelihood": -16.02165903951883,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.06257698290790971,
      "base_accept_utility": 1.7983903970150328,
      "success": true,
      "log_likelihood": -20.978819144598138,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.13348128524934721,
      "base_accept_utility": 2.683797934083414,
      "success": true,
      "log_likelihood": -16.081994044044084,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 7.818247001186997,
      "base_accept_utility": -1.4333987022379363e-06,
      "success": true,
      "log_likelihood": -47.437996217410934,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.06662901962378866,
      "base_accept_utility": 1.0646618610672103,
      "success": true,
      "log_likelihood": -21.1810228827819,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.14839014588516522,
      "base_accept_utility": 0.7456639133454612,
      "success": true,
      "log_likelihood": -11.772620976928241,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.11163616877909031,
      "base_accept_utility": 2.5891066858543956,
      "success": true,
      "log_likelihood": -17.523797606663894,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.07455763593767394,
      "base_accept_utility": 4.374487458595868,
      "success": true,
      "log_likelihood": -8.958043594942122,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.1204218332183796,
      "base_accept_utility": 5.196964679579482,
      "success": true,
      "log_likelihood": -10.365547445531485,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.085317763701397,
      "base_accept_utility": 2.0155425480345777,
      "success": true,
      "log_likelihood": -19.640780515700023,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.0663924804301224,
      "base_accept_utility": 4.117601455002738,
      "success": true,
      "log_likelihood": -9.1927758048099,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 7.079321275322219,
      "base_accept_utility": 10.0,
      "success": true,
      "log_likelihood": -9.328082510517521e-05,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.07044960918124273,
      "base_accept_utility": -0.7956861081239792,
      "success": true,
      "log_likelihood": -12.422830642634398,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.10959392931086424,
      "base_accept_utility": 2.373623271430516,
      "success": true,
      "log_likelihood": -17.792291645617297,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.0663972314389294,
      "base_accept_utility": 2.8391139815241955,
      "success": true,
      "log_likelihood": -16.571080021612612,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.03237831547775488,
      "base_accept_utility": 0.6486192218334024,
      "success": true,
      "log_likelihood": -23.92668298407595,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.0935586858661477,
      "base_accept_utility": 3.0230992805165533,
      "success": true,
      "log_likelihood": -17.11701282167217,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.15037910799992266,
      "base_accept_utility": 7.608602070895058,
      "success": true,
      "log_likelihood": -5.270868079210776,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 8.662012548542318,
      "base_accept_utility": 8.789794049590842e-07,
      "success": true,
      "log_likelihood": -70.463847147442,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.03245057949499538,
      "base_accept_utility": 1.128300173747417,
      "success": true,
      "log_likelihood": -23.08173140008795,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 3.81206199662364,
      "base_accept_utility": -0.1876390722009017,
      "success": true,
      "log_likelihood": -47.341731752690116,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.034388978018524086,
      "base_accept_utility": 0.807590768985313,
      "success": true,
      "log_likelihood": -23.755220893558477,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": -0.010290202380217106,
      "base_accept_utility": 2.2023956114116303,
      "success": true,
      "log_likelihood": -10.291735652794616,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.06258731921563684,
      "base_accept_utility": -1.1619230085267918,
      "success": true,
      "log_likelihood": -11.11498431803125,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.13025335522249556,
      "base_accept_utility": 2.618794694674811,
      "success": true,
      "log_likelihood": -16.30170145858963,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.033422309788020535,
      "base_accept_utility": 1.1493582274198395,
      "success": true,
      "log_likelihood": -23.026838987071322,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 7.6648155506576146,
      "base_accept_utility": 3.814956707137271e-08,
      "success": true,
      "log_likelihood": -24.412145287376397,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.07813023106592398,
      "base_accept_utility": 2.625977363154463,
      "success": true,
      "log_likelihood": -18.25827356788719,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.1113029549023834,
      "base_accept_utility": 0.3585847390852153,
      "success": true,
      "log_likelihood": -13.69751745934544,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.20774569333148135,
      "base_accept_utility": 9.92047861908843,
      "success": true,
      "log_likelihood": -4.390017270401095,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.09251779360139355,
      "base_accept_utility": 1.704324161557341,
      "success": true,
      "log_likelihood": -19.156872595983955,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "deviation_sensitivity": 0.03464638280229699,
      "base_accept_utility": 1.567156953434075,
      "success": true,
      "log_likelihood": -21.175865792112788,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "deviation_sensitivity": {
        "r": 0.9042363658719473,
        "p": 5.409112395074229e-38
      },
      "base_accept_utility": {
        "r": 0.5449554230310514,
        "p": 4.57760894459225e-09
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 48.15808486171929,
  "bic_Control": 45.8425646188517,
  "bic_Cocaine": 50.232405079288164,
  "bic_results": {
    "average_bic": 48.15808486171929,
    "individual_bics": [
      21.627654800406045,
      41.428690861484064,
      22.7779128034254,
      39.01978513762686,
      17.185016501366743,
      37.01491288768176,
      7.168421830642811,
      34.71070822766655,
      7.168421830459887,
      28.994516970418758,
      18.9047117836625,
      24.68693353220109,
      30.174708640014515,
      7.168421832815692,
      7.168421829498388,
      7.168421829459811,
      7.168421829566441,
      329.52915690811284,
      17.40323620585111,
      7.168421830684413,
      34.41634082456657,
      25.66939114896853,
      46.13073140545526,
      45.12968495049288,
      31.75082228314978,
      34.93206941372271,
      41.453846919420435,
      19.765452784190032,
      23.39422856915921,
      467.68446184453177,
      7.168421829471672,
      21.62765480043663,
      51.431815327895464,
      39.848429062040196,
      99.27062318509701,
      44.345767249778206,
      29.959119834687463,
      35.92330823593054,
      41.960210324648756,
      24.827395616104894,
      45.45471712233996,
      29.142850678394282,
      16.306037127095273,
      46.730166888661095,
      38.795751023445014,
      70.45787343033692,
      45.44227533434625,
      46.13791179950921,
      28.688590761557165,
      55.58576395987973,
      46.61465054399051,
      194.1464340318758,
      49.222447080560755,
      54.653926233976854,
      38.58506924857178,
      20.137411603388394,
      30.41574430726279,
      30.6526826614203,
      148.09473217195819,
      39.21035595594988,
      49.12467616610849,
      39.331025965000386,
      102.04303031173409,
      49.52908364247602,
      30.7122798307687,
      42.21463309024001,
      25.083125066796462,
      27.89813276797519,
      46.44859890831226,
      25.55258948653202,
      7.16722443856243,
      32.012699162181015,
      42.75162116814681,
      40.30919792013744,
      55.020403845064116,
      41.40106352025656,
      17.70877403533377,
      148.0947321717962,
      53.33050067708812,
      101.85050138229245,
      54.67747966402917,
      27.750509182501453,
      29.39700651297472,
      39.77044079409148,
      53.22071585105486,
      55.99132845166501,
      43.6835850126866,
      34.5620727956031,
      15.94707241771441,
      45.48078306888013,
      49.51876946113779
    ],
    "group_enabled": true,
    "group_bics": {
      "Control": [
        21.627654800406045,
        41.428690861484064,
        22.7779128034254,
        39.01978513762686,
        17.185016501366743,
        37.01491288768176,
        7.168421830642811,
        34.71070822766655,
        7.168421830459887,
        28.994516970418758,
        18.9047117836625,
        24.68693353220109,
        30.174708640014515,
        7.168421832815692,
        7.168421829498388,
        7.168421829459811,
        7.168421829566441,
        329.52915690811284,
        17.40323620585111,
        7.168421830684413,
        34.41634082456657,
        25.66939114896853,
        46.13073140545526,
        45.12968495049288,
        31.75082228314978,
        34.93206941372271,
        41.453846919420435,
        19.765452784190032,
        23.39422856915921,
        467.68446184453177,
        7.168421829471672,
        21.62765480043663,
        51.431815327895464,
        39.848429062040196,
        99.27062318509701,
        44.345767249778206,
        29.959119834687463,
        35.92330823593054,
        41.960210324648756,
        24.827395616104894,
        45.45471712233996,
        29.142850678394282,
        16.306037127095273
      ],
      "Cocaine": [
        46.730166888661095,
        38.795751023445014,
        70.45787343033692,
        45.44227533434625,
        46.13791179950921,
        28.688590761557165,
        55.58576395987973,
        46.61465054399051,
        194.1464340318758,
        49.222447080560755,
        54.653926233976854,
        38.58506924857178,
        20.137411603388394,
        30.41574430726279,
        30.6526826614203,
        148.09473217195819,
        39.21035595594988,
        49.12467616610849,
        39.331025965000386,
        102.04303031173409,
        49.52908364247602,
        30.7122798307687,
        42.21463309024001,
        25.083125066796462,
        27.89813276797519,
        46.44859890831226,
        25.55258948653202,
        7.16722443856243,
        32.012699162181015,
        42.75162116814681,
        40.30919792013744,
        55.020403845064116,
        41.40106352025656,
        17.70877403533377,
        148.0947321717962,
        53.33050067708812,
        101.85050138229245,
        54.67747966402917,
        27.750509182501453,
        29.39700651297472,
        39.77044079409148,
        53.22071585105486,
        55.99132845166501,
        43.6835850126866,
        34.5620727956031,
        15.94707241771441,
        45.48078306888013,
        49.51876946113779
      ]
    },
    "num_parameters": 2,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- deviation_sensitivity: r = 0.904\n- base_accept_utility: r = 0.545",
  "previous_models": [
    "Specification: sum_tokens = token_self + token_opp\nfair_perc_self_calc = IF(sum_tokens == 0, 50.0, (token_self / sum_tokens) * 100)\ndeviation = split_perc_self - fair_perc_self_calc\nU_accept = deviation_sensitivity * deviation + base_accept_utility\nSummary: This model predicts the utility of accepting a proposed offer in the ultimatum game responder role. The utility of accepting (`U_accept`) is calculated as a linear combination of the deviation of the proposed self-share percentage from the calculated fair share percentage, scaled by a `deviation_sensitivity` parameter, plus a `base_accept_utility` parameter that represents an overall bias towards acceptance or rejection. The fair percentage is calculated based on the relative token contributions of the participant and opponent, defaulting to 50% if total tokens are zero. This structure uses exactly two learnable parameters: `deviation_sensitivity`, which quantifies sensitivity to fairness deviation, and `base_accept_utility`, which captures a general response bias. The structural difference between the inputs scaled by these parameters (the varying fairness deviation vs. a constant implicit input for the base utility) is designed to ensure robust parameter identifiability, allowing for reliable estimation of both parameters, unlike previous models that combined deviation with binary indicators correlated with the deviation.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 48.15808486171929\nOverall Accuracy: 0.7854\nGroup Accuracies:\n- Control: 0.8482\n- Cocaine: 0.7292\n\nParameter Recovery:\n- deviation_sensitivity: r = 0.904\n- base_accept_utility: r = 0.545"
  ]
}