{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "Be VERY considerate of high covariance between learnable parameters as the model. Have an appropriate number or learnable parameters, with a slight bias for less learnable paramters.\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function, and then used to predict binary decisions.\n\n\nInstructions: Be VERY considerate of high covariance between learnable parameters as the model. Have an appropriate number or learnable parameters, with a slight bias for less learnable paramters.\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "Let's design a computational model to predict responder acceptance behavior in this economic game.\n\n**Step 1: Key Psychological Mechanisms**\n\nResponders likely consider fairness and self-interest.  Fairness could be assessed relative to the combined earnings and the opponent's contribution. Self-interest is directly tied to the proposed `split_self`.  We also need to account for individual differences in how much weight people assign to fairness versus self-interest.\n\n**Step 2: Interaction of Mechanisms**\n\nA responder's acceptance decision depends on the interaction between their perceived fairness of the offer and their self-interest.  A highly unfair offer might be rejected even if it offers a large monetary gain. Conversely, a slightly unfair but lucrative offer might be accepted. Individual differences in the weighting of fairness and self-interest will modulate this interaction.\n\n**Step 3: Mathematical Form**\n\nWe can model this using a weighted combination of fairness and self-interest to predict utility. A logistic function can then transform this utility into a probability of acceptance.\n\n**Step 4: Model Parameters**\n\nWe need parameters to represent:\n\n* **Weighting of fairness (fairness_weight):** How much the responder values fairness compared to self-interest.\n* **Fairness sensitivity (fairness_sensitivity):** How strongly the perceived unfairness impacts utility. This accounts for individual differences in fairness considerations.\n* **Self-interest sensitivity (self_interest_sensitivity):** How strongly the proposed amount impacts utility. This captures individual differences in how much responders care about monetary gain.\n\n**Step 5: Mapping Variables to Behavior**\n\nWe can define perceived fairness as a function of the ratio between the respondent's share and the opponent's share, considering their relative contributions:\n\n`perceived_fairness = (split_self / token_self) / (split_opp / token_opp)`\n\nThis ratio captures the relative payoff based on contribution. Values above 1 indicate a more favorable split for the responder, while values below 1 indicate a less favorable split.  The model will penalize deviations from 1 (perfect fairness).\n\n**Model Specification**\n\n\n<MODEL>\nutility = self_interest_sensitivity * split_self + fairness_weight * fairness_sensitivity * (1 - abs( (split_self / token_self) / (split_opp / token_opp) -1))\nprobability_accept = 1 / (1 + exp(-utility))\naccept = probability_accept > 0.5\n\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"utility\": {\n      \"description\": \"Utility of accepting the proposal\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"self_interest_sensitivity\": {\n      \"description\": \"Sensitivity to self-interest (how much the responder cares about monetary gain)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"fairness_weight\": {\n      \"description\": \"Weight given to fairness considerations relative to self-interest\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"fairness_sensitivity\": {\n      \"description\": \"Sensitivity to perceived unfairness\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant (in \u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_opp\": {\n      \"description\": \"Proposed share for the opponent (in \u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"probability_accept\":{\n      \"description\": \"Probability of accepting the proposal\",\n      \"range\":{\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"accept\": {\n      \"description\": \"Whether the participant accepted (1) or rejected (0)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA model of responder behavior in a bargaining game. Utility is a weighted sum of self-interest (proportional to the respondent's proposed share) and a fairness term that penalizes deviations from a fair split (calculated as a ratio of shares relative to contributions).  Three parameters capture individual differences in sensitivity to self-interest, the weight given to fairness, and the sensitivity to unfairness.  Utility is transformed into a probability of acceptance using a logistic function.\n</SUMMARY>\n"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['self_interest_sensitivity', 'fairness_weight', 'fairness_sensitivity']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                utility = self_interest_sensitivity * split_self + fairness_weight * fairness_sensitivity * (1 - abs( (split_self / token_self) / (split_opp / token_opp) -1))\nprobability_accept = 1 / (1 + exp(-utility))\naccept = probability_accept > 0.5\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"utility\": {\n      \"description\": \"Utility of accepting the proposal\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"self_interest_sensitivity\": {\n      \"description\": \"Sensitivity to self-interest (how much the responder cares about monetary gain)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"fairness_weight\": {\n      \"description\": \"Weight given to fairness considerations relative to self-interest\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"fairness_sensitivity\": {\n      \"description\": \"Sensitivity to perceived unfairness\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant (in \\u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_opp\": {\n      \"description\": \"Proposed share for the opponent (in \\u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"probability_accept\": {\n      \"description\": \"Probability of accepting the proposal\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"accept\": {\n      \"description\": \"Whether the participant accepted (1) or rejected (0)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "```python\nimport json\nimport math\n\ndef simulate_model(trial_data, self_interest_sensitivity=1, fairness_weight=1, fairness_sensitivity=1):\n    model_predictions = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0)\n        token_self = trial.get(\"token_self\", 1)  # avoid division by zero\n        split_opp = trial.get(\"split_opp\", 0)\n        token_opp = trial.get(\"token_opp\", 1)  # avoid division by zero\n\n        # Ensure token_self and token_opp are not zero\n        token_self = max(token_self, 0.00000001)\n        token_opp = max(token_opp, 0.00000001)\n\n        try:\n            fairness_ratio = (split_self / token_self) / (split_opp / token_opp)\n        except ZeroDivisionError:\n            fairness_ratio = 1.0  # Handle potential division by zero\n\n        utility = self_interest_sensitivity * split_self + fairness_weight * fairness_sensitivity * (1 - abs(fairness_ratio - 1))\n\n        try:\n            probability_accept = 1 / (1 + math.exp(-utility))\n        except OverflowError:\n            probability_accept = 0.0 if utility < 0 else 1.0 # Handle potential overflow\n\n        accept = 1 if probability_accept > 0.5 else 0\n        model_predictions.append(accept)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n",
      "timestamp": 1743522449.14853
    }
  ],
  "learnable_parameters": {
    "self_interest_sensitivity": {
      "description": "Sensitivity to self-interest (how much the responder cares about monetary gain)",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "fairness_weight": {
      "description": "Weight given to fairness considerations relative to self-interest",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "fairness_sensitivity": {
      "description": "Sensitivity to perceived unfairness",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "utility = self_interest_sensitivity * split_self + fairness_weight * fairness_sensitivity * (1 - abs( (split_self / token_self) / (split_opp / token_opp) -1))\nprobability_accept = 1 / (1 + exp(-utility))\naccept = probability_accept > 0.5",
  "variable_descriptions": {
    "utility": {
      "description": "Utility of accepting the proposal",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "self_interest_sensitivity": {
      "description": "Sensitivity to self-interest (how much the responder cares about monetary gain)",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "fairness_weight": {
      "description": "Weight given to fairness considerations relative to self-interest",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "fairness_sensitivity": {
      "description": "Sensitivity to perceived unfairness",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "split_self": {
      "description": "Proposed share for the participant (in \u00a3)",
      "range": {
        "min": 0,
        "max": 1000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Number of tokens found by the participant",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "split_opp": {
      "description": "Proposed share for the opponent (in \u00a3)",
      "range": {
        "min": 0,
        "max": 1000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "probability_accept": {
      "description": "Probability of accepting the proposal",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "accept": {
      "description": "Whether the participant accepted (1) or rejected (0)",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "A model of responder behavior in a bargaining game. Utility is a weighted sum of self-interest (proportional to the respondent's proposed share) and a fairness term that penalizes deviations from a fair split (calculated as a ratio of shares relative to contributions).  Three parameters capture individual differences in sensitivity to self-interest, the weight given to fairness, and the sensitivity to unfairness.  Utility is transformed into a probability of acceptance using a logistic function.",
  "target_variable": "accept",
  "full_reasoning": "Let's design a computational model to predict responder acceptance behavior in this economic game.\n\n**Step 1: Key Psychological Mechanisms**\n\nResponders likely consider fairness and self-interest.  Fairness could be assessed relative to the combined earnings and the opponent's contribution. Self-interest is directly tied to the proposed `split_self`.  We also need to account for individual differences in how much weight people assign to fairness versus self-interest.\n\n**Step 2: Interaction of Mechanisms**\n\nA responder's acceptance decision depends on the interaction between their perceived fairness of the offer and their self-interest.  A highly unfair offer might be rejected even if it offers a large monetary gain. Conversely, a slightly unfair but lucrative offer might be accepted. Individual differences in the weighting of fairness and self-interest will modulate this interaction.\n\n**Step 3: Mathematical Form**\n\nWe can model this using a weighted combination of fairness and self-interest to predict utility. A logistic function can then transform this utility into a probability of acceptance.\n\n**Step 4: Model Parameters**\n\nWe need parameters to represent:\n\n* **Weighting of fairness (fairness_weight):** How much the responder values fairness compared to self-interest.\n* **Fairness sensitivity (fairness_sensitivity):** How strongly the perceived unfairness impacts utility. This accounts for individual differences in fairness considerations.\n* **Self-interest sensitivity (self_interest_sensitivity):** How strongly the proposed amount impacts utility. This captures individual differences in how much responders care about monetary gain.\n\n**Step 5: Mapping Variables to Behavior**\n\nWe can define perceived fairness as a function of the ratio between the respondent's share and the opponent's share, considering their relative contributions:\n\n`perceived_fairness = (split_self / token_self) / (split_opp / token_opp)`\n\nThis ratio captures the relative payoff based on contribution. Values above 1 indicate a more favorable split for the responder, while values below 1 indicate a less favorable split.  The model will penalize deviations from 1 (perfect fairness).\n\n**Model Specification**\n\n\n<MODEL>\nutility = self_interest_sensitivity * split_self + fairness_weight * fairness_sensitivity * (1 - abs( (split_self / token_self) / (split_opp / token_opp) -1))\nprobability_accept = 1 / (1 + exp(-utility))\naccept = probability_accept > 0.5\n\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"utility\": {\n      \"description\": \"Utility of accepting the proposal\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"self_interest_sensitivity\": {\n      \"description\": \"Sensitivity to self-interest (how much the responder cares about monetary gain)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"fairness_weight\": {\n      \"description\": \"Weight given to fairness considerations relative to self-interest\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"fairness_sensitivity\": {\n      \"description\": \"Sensitivity to perceived unfairness\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant (in \u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_opp\": {\n      \"description\": \"Proposed share for the opponent (in \u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"probability_accept\":{\n      \"description\": \"Probability of accepting the proposal\",\n      \"range\":{\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"accept\": {\n      \"description\": \"Whether the participant accepted (1) or rejected (0)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA model of responder behavior in a bargaining game. Utility is a weighted sum of self-interest (proportional to the respondent's proposed share) and a fairness term that penalizes deviations from a fair split (calculated as a ratio of shares relative to contributions).  Three parameters capture individual differences in sensitivity to self-interest, the weight given to fairness, and the sensitivity to unfairness.  Utility is transformed into a probability of acceptance using a logistic function.\n</SUMMARY>\n",
  "prediction_type": "utility",
  "current_model": "Specification: utility = self_interest_sensitivity * split_self + fairness_weight * fairness_sensitivity * (1 - abs( (split_self / token_self) / (split_opp / token_opp) -1))\nprobability_accept = 1 / (1 + exp(-utility))\naccept = probability_accept > 0.5\nSummary: A model of responder behavior in a bargaining game. Utility is a weighted sum of self-interest (proportional to the respondent's proposed share) and a fairness term that penalizes deviations from a fair split (calculated as a ratio of shares relative to contributions).  Three parameters capture individual differences in sensitivity to self-interest, the weight given to fairness, and the sensitivity to unfairness.  Utility is transformed into a probability of acceptance using a logistic function.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, self_interest_sensitivity=1, fairness_weight=1, fairness_sensitivity=1):\n    model_predictions = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0)\n        token_self = trial.get(\"token_self\", 1)  # avoid division by zero\n        split_opp = trial.get(\"split_opp\", 0)\n        token_opp = trial.get(\"token_opp\", 1)  # avoid division by zero\n\n        # Ensure token_self and token_opp are not zero\n        token_self = max(token_self, 0.00000001)\n        token_opp = max(token_opp, 0.00000001)\n\n        try:\n            fairness_ratio = (split_self / token_self) / (split_opp / token_opp)\n        except ZeroDivisionError:\n            fairness_ratio = 1.0  # Handle potential division by zero\n\n        utility = self_interest_sensitivity * split_self + fairness_weight * fairness_sensitivity * (1 - abs(fairness_ratio - 1))\n\n        try:\n            probability_accept = 1 / (1 + math.exp(-utility))\n        except OverflowError:\n            probability_accept = 0.0 if utility < 0 else 1.0 # Handle potential overflow\n\n        accept = 1 if probability_accept > 0.5 else 0\n        model_predictions.append(accept)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.5692918192918193,
  "fitting_results": [
    {
      "self_interest_sensitivity": 0.15138031551425457,
      "fairness_weight": 0.888280761678305,
      "fairness_sensitivity": 2.3529852178355783,
      "success": true,
      "log_likelihood": -330.0015616695467,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.08333333333333333,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_sensitivity": 7.350238242505601,
      "fairness_weight": 5.402087645026913,
      "fairness_sensitivity": 4.105515187740973,
      "success": true,
      "log_likelihood": -180.00159470919448,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_sensitivity": 0.4285698195138976,
      "fairness_weight": 3.096179206913133,
      "fairness_sensitivity": 0.8725147240898345,
      "success": true,
      "log_likelihood": -170.00159691183765,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_sensitivity": 0.614805757932877,
      "fairness_weight": 3.2382341572703033,
      "fairness_sensitivity": 8.702893106049972,
      "success": true,
      "log_likelihood": -210.00158810126496,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_sensitivity": 4.165071341388652,
      "fairness_weight": 2.151516297689424,
      "fairness_sensitivity": 7.5199035026486065,
      "success": true,
      "log_likelihood": -200.00159030390816,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_sensitivity": 1.3349883762207204,
      "fairness_weight": 3.948558505563644,
      "fairness_sensitivity": 7.587974035530138,
      "success": true,
      "log_likelihood": -130.00160572241035,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_sensitivity": 3.414946884110331,
      "fairness_weight": 4.577229610655661,
      "fairness_sensitivity": 8.402835564677197,
      "success": true,
      "log_likelihood": -0.0016343567716418062,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_sensitivity": 6.6920743872499155,
      "fairness_weight": 7.0660194530555,
      "fairness_sensitivity": 4.239247966423925,
      "success": true,
      "log_likelihood": -120.0016079250535,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_sensitivity": 1.810422806023545,
      "fairness_weight": 6.485346358558726,
      "fairness_sensitivity": 8.600555887601855,
      "success": true,
      "log_likelihood": -0.0016343567716418062,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_sensitivity": 7.486216372018798,
      "fairness_weight": 4.373929941757927,
      "fairness_sensitivity": 8.568036222515525,
      "success": true,
      "log_likelihood": -220.00158589862178,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_sensitivity": 0.1729609285498357,
      "fairness_weight": 9.779656740521057,
      "fairness_sensitivity": 9.84332703254809,
      "success": true,
      "log_likelihood": -200.00159030390816,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_sensitivity": 7.282332377847345,
      "fairness_weight": 7.223777592645484,
      "fairness_sensitivity": 8.476099855575024,
      "success": true,
      "log_likelihood": -320.0015638721899,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.1111111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_sensitivity": 8.999380813931834,
      "fairness_weight": 1.7839514185707206,
      "fairness_sensitivity": 4.495862329768634,
      "success": true,
      "log_likelihood": -210.00158810126496,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_sensitivity": 9.853248226370951,
      "fairness_weight": 9.922060796982066,
      "fairness_sensitivity": 4.822036899304901,
      "success": true,
      "log_likelihood": -0.0016343567716418062,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_sensitivity": 2.4008145191277053,
      "fairness_weight": 7.752247569118225,
      "fairness_sensitivity": 3.751582567332451,
      "success": true,
      "log_likelihood": -0.0016343567716418062,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_sensitivity": 4.962835918288359,
      "fairness_weight": 5.240182497763439,
      "fairness_sensitivity": 4.384195849064158,
      "success": true,
      "log_likelihood": -0.0016343567716418062,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_sensitivity": 0.4300335734030669,
      "fairness_weight": 4.768997791950623,
      "fairness_sensitivity": 6.395962120836389,
      "success": true,
      "log_likelihood": -0.0016343567716418062,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_sensitivity": 3.1909118259615976,
      "fairness_weight": 1.5171720039681846,
      "fairness_sensitivity": 3.2948341479318968,
      "success": true,
      "log_likelihood": -50.001623343555714,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_sensitivity": 4.607789839286744,
      "fairness_weight": 2.7763061091806254,
      "fairness_sensitivity": 5.185709344686859,
      "success": true,
      "log_likelihood": -40.001625546198824,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_sensitivity": 2.844690533275127,
      "fairness_weight": 2.5986884425033754,
      "fairness_sensitivity": 8.805666508019907,
      "success": true,
      "log_likelihood": -0.0016343567716418062,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_sensitivity": 5.320815720802404,
      "fairness_weight": 6.912134214783508,
      "fairness_sensitivity": 2.938705311443247,
      "success": true,
      "log_likelihood": -160.0015991144808,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_sensitivity": 9.875016126175531,
      "fairness_weight": 1.510603640213345,
      "fairness_sensitivity": 1.7440767429114579,
      "success": true,
      "log_likelihood": -50.00162334355571,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_sensitivity": 4.392123873851644,
      "fairness_weight": 8.24036490694325,
      "fairness_sensitivity": 9.057313577246601,
      "success": true,
      "log_likelihood": -230.00158369597864,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_sensitivity": 4.196175044788334,
      "fairness_weight": 0.028382339247965405,
      "fairness_sensitivity": 9.837848248027889,
      "success": true,
      "log_likelihood": -170.00159691183765,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_sensitivity": 8.753745250163874,
      "fairness_weight": 1.9940427278858641,
      "fairness_sensitivity": 1.019138291395918,
      "success": true,
      "log_likelihood": -180.00159470919445,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_sensitivity": 1.9726914863689105,
      "fairness_weight": 7.893699276398313,
      "fairness_sensitivity": 8.857765337838032,
      "success": true,
      "log_likelihood": -150.00160131712397,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_sensitivity": 5.8877683198676465,
      "fairness_weight": 2.820442058165895,
      "fairness_sensitivity": 3.283841182663515,
      "success": true,
      "log_likelihood": -160.0015991144808,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_sensitivity": 6.54070233969856,
      "fairness_weight": 7.208851556795891,
      "fairness_sensitivity": 9.580246026081701,
      "success": true,
      "log_likelihood": -260.0015770880491,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.2777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_sensitivity": 5.007628059992836,
      "fairness_weight": 4.294119008256479,
      "fairness_sensitivity": 2.9636069824941935,
      "success": true,
      "log_likelihood": -40.00162554619887,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_sensitivity": 8.780447262749924,
      "fairness_weight": 4.193762284049002,
      "fairness_sensitivity": 7.332629662219209,
      "success": true,
      "log_likelihood": -80.0016167356262,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_sensitivity": 1.3863095244239587,
      "fairness_weight": 5.525078254094139,
      "fairness_sensitivity": 2.7395258043214565,
      "success": true,
      "log_likelihood": -0.0016343567716418062,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_sensitivity": 8.282371865201783,
      "fairness_weight": 4.352798601393069,
      "fairness_sensitivity": 3.711871736968267,
      "success": true,
      "log_likelihood": -330.0015616695467,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.08333333333333333,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_sensitivity": 0.145506873863529,
      "fairness_weight": 5.7618767221410465,
      "fairness_sensitivity": 6.976204215554618,
      "success": true,
      "log_likelihood": -210.00158810126496,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_sensitivity": 4.747763976507232,
      "fairness_weight": 3.1664175801510464,
      "fairness_sensitivity": 3.268072897876002,
      "success": true,
      "log_likelihood": -220.00158589862178,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_sensitivity": 9.525523879604348,
      "fairness_weight": 0.7063140937273904,
      "fairness_sensitivity": 0.8586517913268676,
      "success": true,
      "log_likelihood": -0.0016343567716418062,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_sensitivity": 6.454911171224521,
      "fairness_weight": 4.494356199364049,
      "fairness_sensitivity": 4.3677279040670145,
      "success": true,
      "log_likelihood": -130.00160572241035,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_sensitivity": 3.9387043967290145,
      "fairness_weight": 5.927984944169152,
      "fairness_sensitivity": 4.962201045771516,
      "success": true,
      "log_likelihood": -110.00161012769668,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_sensitivity": 2.591818450729002,
      "fairness_weight": 0.19763950919144513,
      "fairness_sensitivity": 7.567909221432073,
      "success": true,
      "log_likelihood": -180.00159470919448,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_sensitivity": 7.269621490074396,
      "fairness_weight": 2.8437679447312414,
      "fairness_sensitivity": 2.114347440922212,
      "success": true,
      "log_likelihood": -120.00160792505352,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_sensitivity": 5.051592101415504,
      "fairness_weight": 1.4806892840638652,
      "fairness_sensitivity": 1.087506024554673,
      "success": true,
      "log_likelihood": -30.001627748842107,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_sensitivity": 1.2013987248485514,
      "fairness_weight": 8.951074175321931,
      "fairness_sensitivity": 4.686956738234218,
      "success": true,
      "log_likelihood": -140.00160351976717,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_sensitivity": 4.994684560719982,
      "fairness_weight": 5.104213004976174,
      "fairness_sensitivity": 8.855039890616975,
      "success": true,
      "log_likelihood": -280.0015726827627,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.2222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_sensitivity": 1.5048155428195031,
      "fairness_weight": 7.300492639969298,
      "fairness_sensitivity": 6.066007946102446,
      "success": true,
      "log_likelihood": -10.001632154128465,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_sensitivity": 6.241684151124919,
      "fairness_weight": 1.5993049479428223,
      "fairness_sensitivity": 6.315634192745079,
      "success": true,
      "log_likelihood": -160.00159911448085,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_sensitivity": 7.31422917157447,
      "fairness_weight": 9.973346196538447,
      "fairness_sensitivity": 1.639195065875133,
      "success": true,
      "log_likelihood": -140.00160351976717,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_sensitivity": 1.8365375531604744,
      "fairness_weight": 1.6661325748526912,
      "fairness_sensitivity": 0.08882429494934674,
      "success": true,
      "log_likelihood": -100.00161233033987,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_sensitivity": 4.523567101088947,
      "fairness_weight": 1.7088106950598925,
      "fairness_sensitivity": 2.212272998881902,
      "success": true,
      "log_likelihood": -170.00159691183765,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_sensitivity": 4.7640942225235285,
      "fairness_weight": 0.023367504001441386,
      "fairness_sensitivity": 8.686963402871056,
      "success": true,
      "log_likelihood": -220.00158589862178,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_sensitivity": 4.710210979147461,
      "fairness_weight": 2.383557289623539,
      "fairness_sensitivity": 4.940409091024938,
      "success": true,
      "log_likelihood": -210.00158810126496,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_sensitivity": 4.473257735804543,
      "fairness_weight": 2.4179507293628233,
      "fairness_sensitivity": 1.3887457518876756,
      "success": true,
      "log_likelihood": -170.00159691183765,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_sensitivity": 3.5741843132493867,
      "fairness_weight": 2.1301976159400837,
      "fairness_sensitivity": 4.565499994466828,
      "success": true,
      "log_likelihood": -110.00161012769671,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_sensitivity": 6.7846741955978835,
      "fairness_weight": 9.788210718643125,
      "fairness_sensitivity": 6.767249191117846,
      "success": true,
      "log_likelihood": -310.0015660748331,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.1388888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_sensitivity": 2.8060202557271507,
      "fairness_weight": 3.9049136185699185,
      "fairness_sensitivity": 6.372118429992991,
      "success": true,
      "log_likelihood": -170.00159691183765,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_sensitivity": 8.022174809934782,
      "fairness_weight": 7.048485720245545,
      "fairness_sensitivity": 9.67201966863499,
      "success": true,
      "log_likelihood": -150.00160131712403,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_sensitivity": 7.912960862372351,
      "fairness_weight": 1.434311502477389,
      "fairness_sensitivity": 9.413939972878872,
      "success": true,
      "log_likelihood": -220.0015858986218,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_sensitivity": 1.3070446121204227,
      "fairness_weight": 9.349939961734279,
      "fairness_sensitivity": 7.675975324245298,
      "success": true,
      "log_likelihood": -240.00158149333546,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3333333333333333,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_sensitivity": 0.5138431918762421,
      "fairness_weight": 3.881446681453553,
      "fairness_sensitivity": 6.290046031866562,
      "success": true,
      "log_likelihood": -260.0015770880491,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.2777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_sensitivity": 2.806920382493696,
      "fairness_weight": 4.008652047602748,
      "fairness_sensitivity": 7.09734540792848,
      "success": true,
      "log_likelihood": -40.00162554619886,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_sensitivity": 1.5347412181926567,
      "fairness_weight": 4.207130904449009,
      "fairness_sensitivity": 6.699063084309551,
      "success": true,
      "log_likelihood": -320.0015638721899,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.1111111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_sensitivity": 2.278665713468908,
      "fairness_weight": 8.629455577251994,
      "fairness_sensitivity": 0.714333382444815,
      "success": true,
      "log_likelihood": -70.00161893826937,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_sensitivity": 5.059400710087655,
      "fairness_weight": 3.657797391947357,
      "fairness_sensitivity": 6.286014070230257,
      "success": true,
      "log_likelihood": -140.00160351976717,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_sensitivity": 7.524765375661965,
      "fairness_weight": 8.084971437569463,
      "fairness_sensitivity": 1.689275125587304,
      "success": true,
      "log_likelihood": -180.00159470919448,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_sensitivity": 3.0484323923533463,
      "fairness_weight": 1.0507916582734822,
      "fairness_sensitivity": 6.210688423607397,
      "success": true,
      "log_likelihood": -330.0015616695467,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.08333333333333333,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_sensitivity": 2.6290432587962687,
      "fairness_weight": 9.338321934955506,
      "fairness_sensitivity": 0.5110662579671144,
      "success": true,
      "log_likelihood": -200.00159030390813,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_sensitivity": 0.09996997855462264,
      "fairness_weight": 7.876257022154753,
      "fairness_sensitivity": 1.9504246672960046,
      "success": true,
      "log_likelihood": -280.0015726827627,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.2222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_sensitivity": 7.76846941520465,
      "fairness_weight": 1.2904287474959797,
      "fairness_sensitivity": 6.916886702163714,
      "success": true,
      "log_likelihood": -160.0015991144808,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_sensitivity": 1.9439390225937003,
      "fairness_weight": 4.793591002099288,
      "fairness_sensitivity": 6.751920081925319,
      "success": true,
      "log_likelihood": -30.00162774884211,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_sensitivity": 8.588209093425101,
      "fairness_weight": 6.927200693081233,
      "fairness_sensitivity": 0.023673081816075747,
      "success": true,
      "log_likelihood": -50.00162334355575,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_sensitivity": 9.586464678187506,
      "fairness_weight": 1.7401249046882838,
      "fairness_sensitivity": 3.171015660921576,
      "success": true,
      "log_likelihood": -160.00159911448085,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_sensitivity": 6.1519056046277845,
      "fairness_weight": 2.841692233913684,
      "fairness_sensitivity": 6.344638212392534,
      "success": true,
      "log_likelihood": -30.00162774884211,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_sensitivity": 1.478562500957028,
      "fairness_weight": 0.11580703856591601,
      "fairness_sensitivity": 3.495685993181331,
      "success": true,
      "log_likelihood": -320.0015638721899,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.1111111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_sensitivity": 6.273020828739439,
      "fairness_weight": 1.800816076288566,
      "fairness_sensitivity": 3.5975579396368893,
      "success": true,
      "log_likelihood": -310.0015660748331,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.1388888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_sensitivity": 8.260189791949609,
      "fairness_weight": 5.175793683278148,
      "fairness_sensitivity": 1.0677661376673064,
      "success": true,
      "log_likelihood": -170.00159691183765,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_sensitivity": 3.7033385548069733,
      "fairness_weight": 6.326645548159796,
      "fairness_sensitivity": 4.939178259512421,
      "success": true,
      "log_likelihood": -80.00161673562623,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_sensitivity": 8.418252673522149,
      "fairness_weight": 1.5227417873557225,
      "fairness_sensitivity": 3.696432844478652,
      "success": true,
      "log_likelihood": -180.00159470919448,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_sensitivity": 1.4414750039378688,
      "fairness_weight": 3.854910960312865,
      "fairness_sensitivity": 5.8328109832656345,
      "success": true,
      "log_likelihood": -110.00161012769672,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_sensitivity": 5.524388790307475,
      "fairness_weight": 4.8893750361079915,
      "fairness_sensitivity": 8.333671834422681,
      "success": true,
      "log_likelihood": -20.001629951485288,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_sensitivity": 7.307906642982454,
      "fairness_weight": 4.162895243501589,
      "fairness_sensitivity": 0.6045433956884871,
      "success": true,
      "log_likelihood": -340.0015594669035,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.05555555555555555,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_sensitivity": 2.376584566370399,
      "fairness_weight": 7.253691355129858,
      "fairness_sensitivity": 9.838940222995612,
      "success": true,
      "log_likelihood": -140.00160351976717,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_sensitivity": 2.6271496533290484,
      "fairness_weight": 8.551860628574724,
      "fairness_sensitivity": 7.169293226314961,
      "success": true,
      "log_likelihood": -330.0015616695467,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.08333333333333333,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_sensitivity": 1.1613072014106496,
      "fairness_weight": 2.741545902447946,
      "fairness_sensitivity": 1.6182647654958537,
      "success": true,
      "log_likelihood": -170.00159691183765,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_sensitivity": 8.397333679553048,
      "fairness_weight": 9.478537263359602,
      "fairness_sensitivity": 2.316167899572783,
      "success": true,
      "log_likelihood": -30.001627748842107,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_sensitivity": 0.38474781783057854,
      "fairness_weight": 6.105157399902607,
      "fairness_sensitivity": 8.588527876560155,
      "success": true,
      "log_likelihood": -320.0015638721899,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.1111111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_sensitivity": 8.530038451883849,
      "fairness_weight": 2.94668966625839,
      "fairness_sensitivity": 8.87963462545408,
      "success": true,
      "log_likelihood": -180.00159470919448,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_sensitivity": 3.4654269781005596,
      "fairness_weight": 8.5057291905076,
      "fairness_sensitivity": 7.91353968444477,
      "success": true,
      "log_likelihood": -140.0016035197672,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_sensitivity": 2.360347510283596,
      "fairness_weight": 6.214267369802187,
      "fairness_sensitivity": 4.530392323937874,
      "success": true,
      "log_likelihood": -320.0015638721899,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.1111111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_sensitivity": 7.307584164232371,
      "fairness_weight": 2.3352334755159743,
      "fairness_sensitivity": 9.087307741671841,
      "success": true,
      "log_likelihood": -110.0016101276967,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_sensitivity": 5.672490663757853,
      "fairness_weight": 1.8301645987344028,
      "fairness_sensitivity": 2.666984168324703,
      "success": true,
      "log_likelihood": -280.0015726827627,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.2222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_sensitivity": 5.817016555281052,
      "fairness_weight": 9.760768553114023,
      "fairness_sensitivity": 3.29996214306194,
      "success": true,
      "log_likelihood": -20.001629951485288,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_sensitivity": 6.812078749486866,
      "fairness_weight": 5.245616842868576,
      "fairness_sensitivity": 6.305347496922345,
      "success": true,
      "log_likelihood": -190.00159250655133,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_sensitivity": 1.5253319019210865,
      "fairness_weight": 9.73506103516998,
      "fairness_sensitivity": 8.494016564929073,
      "success": true,
      "log_likelihood": -110.00161012769672,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "self_interest_sensitivity": {
        "r": -0.005422019243325218,
        "p": 0.9573025404819725
      },
      "fairness_weight": {
        "r": -0.11860813977813107,
        "p": 0.23986533386344586
      },
      "fairness_sensitivity": {
        "r": 0.18350124914694366,
        "p": 0.0676256982296892
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 320.86364733265833,
  "bic_results": {
    "average_bic": 320.86364733265833,
    "individual_bics": [
      670.7536801544617,
      370.7537462337573,
      350.75375063904363,
      430.75373301789824,
      410.75373742318465,
      270.753768260189,
      10.753825528911614,
      250.75377266547534,
      10.753825528911614,
      450.7537286126119,
      410.75373742318465,
      650.7536845597481,
      430.75373301789824,
      10.753825528911614,
      10.753825528911614,
      10.753825528911614,
      10.753825528911614,
      110.75380350247976,
      90.75380790776597,
      10.753825528911614,
      330.7537550443299,
      110.75380350247974,
      470.7537242073256,
      350.75375063904363,
      370.7537462337572,
      310.75375944961627,
      330.7537550443299,
      530.7537109914665,
      90.75380790776607,
      170.75379028662073,
      10.753825528911614,
      670.7536801544617,
      430.75373301789824,
      450.7537286126119,
      10.753825528911614,
      270.753768260189,
      230.75377707076169,
      370.7537462337573,
      250.75377266547537,
      70.75381231305255,
      290.7537638549027,
      570.7537021808937,
      30.75382112362526,
      330.75375504433003,
      290.7537638549027,
      210.75378147604806,
      350.75375063904363,
      450.7537286126119,
      430.75373301789824,
      350.75375063904363,
      230.75377707076174,
      630.7536889650345,
      350.75375063904363,
      310.7537594496164,
      450.75372861261195,
      490.75371980203926,
      530.7537109914665,
      90.75380790776605,
      650.7536845597481,
      150.75379469190707,
      290.7537638549027,
      370.7537462337573,
      670.7536801544617,
      410.7537374231846,
      570.7537021808937,
      330.7537550443299,
      70.75381231305255,
      110.75380350247983,
      330.75375504433003,
      70.75381231305255,
      650.7536845597481,
      630.7536889650345,
      350.75375063904363,
      170.75379028662078,
      370.7537462337573,
      230.75377707076177,
      50.75381671833891,
      690.7536757491753,
      290.7537638549027,
      670.7536801544617,
      350.75375063904363,
      70.75381231305255,
      650.7536845597481,
      370.7537462337573,
      290.75376385490273,
      650.7536845597481,
      230.7537770707617,
      570.7537021808937,
      50.75381671833891,
      390.753741828471,
      230.75377707076177
    ],
    "group_enabled": false,
    "group_bics": null,
    "num_parameters": 3,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- self_interest_sensitivity: r = -0.005\n- fairness_weight: r = -0.119\n- fairness_sensitivity: r = 0.184",
  "previous_models": [
    "Specification: utility = self_interest_sensitivity * split_self + fairness_weight * fairness_sensitivity * (1 - abs( (split_self / token_self) / (split_opp / token_opp) -1))\nprobability_accept = 1 / (1 + exp(-utility))\naccept = probability_accept > 0.5\nSummary: A model of responder behavior in a bargaining game. Utility is a weighted sum of self-interest (proportional to the respondent's proposed share) and a fairness term that penalizes deviations from a fair split (calculated as a ratio of shares relative to contributions).  Three parameters capture individual differences in sensitivity to self-interest, the weight given to fairness, and the sensitivity to unfairness.  Utility is transformed into a probability of acceptance using a logistic function.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 320.86364733265833\nOverall Accuracy: 0.5693\n\nParameter Recovery:\n- self_interest_sensitivity: r = -0.005\n- fairness_weight: r = -0.119\n- fairness_sensitivity: r = 0.184"
  ]
}