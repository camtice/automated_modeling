{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "<think>\nFor run 3, we should further encourage innovative transformations and normalization to reduce scaling issues and improve both fit and parameter recovery. Consider a logarithmic transformation (e.g., log(1+token_self)) to address nonlinearity while also ensuring no division by zero. Revisit the fairness deviation calculation and emphasize that exactly two learnable parameters (beta and gamma) must be used with finite, possibly narrowed bounds (e.g., [-5, 5]). Insist on specifying the entire model using only the tags <MODEL> and <VARIABLES> with no additional explanation in the <MODEL> section, and remind to map the utility to acceptance probability using the logistic function. Emphasize creativity in the transformation and normalization ideas to achieve lower BIC and higher accuracy.\n</think>\n\nPlease create a computational model for predicting responder behavior (binary acceptance decisions) following the guidelines below:\n\n1. Predict the binary variable \u201caccept\u201d using a logistic function applied to a utility (U).\n2. Calculate U based on a fairness deviation between the observed monetary share (split_self) and a \u201cfair share\u201d derived using a transformation on token contributions. For instance, consider using a logarithmic transformation to compute:\n\u2003\u2003fair_share = combined_earning * (log(1 + token_self) / (log(1 + token_self) + log(1 + token_opp)))\n3. Define U as:\n\u2003\u2003U = beta * (split_self - fair_share) + gamma\n4. Use exactly two learnable parameters (beta and gamma) with finite parameter bounds (e.g., [-5, 5]) to help ensure improved parameter recovery.\n5. Ensure that the utility U is mapped to the probability of accepting as P(accept = 1) = 1/(1 + exp(-U)).\n6. Provide the complete mathematical model solely between <MODEL> and </MODEL> tags without any additional explanation.\n7. In the <VARIABLES> section, include detailed JSON descriptions for every variable (data, calculated, and learnable) with proper finite bounds and flags for learnable parameters.\n8. Encourage creative yet parsimonious modifications to the fairness deviation to strive for lower BIC, higher prediction accuracy, and improved parameter recovery.\n\nOutput only the new instructions text for run 3.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function, and then used to predict binary decisions.\n\n\nInstructions: <think>\nFor run 3, we should further encourage innovative transformations and normalization to reduce scaling issues and improve both fit and parameter recovery. Consider a logarithmic transformation (e.g., log(1+token_self)) to address nonlinearity while also ensuring no division by zero. Revisit the fairness deviation calculation and emphasize that exactly two learnable parameters (beta and gamma) must be used with finite, possibly narrowed bounds (e.g., [-5, 5]). Insist on specifying the entire model using only the tags <MODEL> and <VARIABLES> with no additional explanation in the <MODEL> section, and remind to map the utility to acceptance probability using the logistic function. Emphasize creativity in the transformation and normalization ideas to achieve lower BIC and higher accuracy.\n</think>\n\nPlease create a computational model for predicting responder behavior (binary acceptance decisions) following the guidelines below:\n\n1. Predict the binary variable \u201caccept\u201d using a logistic function applied to a utility (U).\n2. Calculate U based on a fairness deviation between the observed monetary share (split_self) and a \u201cfair share\u201d derived using a transformation on token contributions. For instance, consider using a logarithmic transformation to compute:\n\u2003\u2003fair_share = combined_earning * (log(1 + token_self) / (log(1 + token_self) + log(1 + token_opp)))\n3. Define U as:\n\u2003\u2003U = beta * (split_self - fair_share) + gamma\n4. Use exactly two learnable parameters (beta and gamma) with finite parameter bounds (e.g., [-5, 5]) to help ensure improved parameter recovery.\n5. Ensure that the utility U is mapped to the probability of accepting as P(accept = 1) = 1/(1 + exp(-U)).\n6. Provide the complete mathematical model solely between <MODEL> and </MODEL> tags without any additional explanation.\n7. In the <VARIABLES> section, include detailed JSON descriptions for every variable (data, calculated, and learnable) with proper finite bounds and flags for learnable parameters.\n8. Encourage creative yet parsimonious modifications to the fairness deviation to strive for lower BIC, higher prediction accuracy, and improved parameter recovery.\n\nOutput only the new instructions text for run 3.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<MODEL>\nfair_share = combined_earning * (log(1 + token_self) / (log(1 + token_self) + log(1 + token_opp)))\nU = beta * (split_self - fair_share) + gamma\nP_accept = 1 / (1 + exp(-U))\n</MODEL>\n<VARIABLES>\n{\n  \"variables\": {\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"integer\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"integer\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total money earned in the trial (each token is worth \u00a33)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"integer\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant in \u00a3\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"float\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"beta\": {\n      \"description\": \"Learnable sensitivity parameter for fairness deviation\",\n      \"range\": {\n        \"min\": -5,\n        \"max\": 5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": -5,\n          \"max\": 5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Learnable intercept parameter\",\n      \"range\": {\n        \"min\": -5,\n        \"max\": 5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": -5,\n          \"max\": 5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"fair_share\": {\n      \"description\": \"Calculated fair share based on logarithmic transformation of token contributions\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"calculation\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"U\": {\n      \"description\": \"Utility computed as a function of fairness deviation\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"calculation\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"P_accept\": {\n      \"description\": \"Probability of accepting the proposal mapped through the logistic function\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"calculation\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"accept\": {\n      \"description\": \"Binary decision variable: 1 for accept, 0 for reject\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"bernoulli\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n<target_variable>accept</target_variable>\n<SUMMARY>\nA logistic decision model where the utility is determined by the deviation between the participant's proposed share and a fairness benchmark derived from logarithmically transformed token contributions; two learnable parameters (beta and gamma) modulate this deviation to map utility to acceptance probability.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['beta', 'gamma']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                fair_share = combined_earning * (log(1 + token_self) / (log(1 + token_self) + log(1 + token_opp)))\nU = beta * (split_self - fair_share) + gamma\nP_accept = 1 / (1 + exp(-U))\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"integer\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"integer\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total money earned in the trial (each token is worth \\u00a33)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"integer\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant in \\u00a3\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"float\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"beta\": {\n      \"description\": \"Learnable sensitivity parameter for fairness deviation\",\n      \"range\": {\n        \"min\": -5,\n        \"max\": 5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": -5,\n          \"max\": 5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Learnable intercept parameter\",\n      \"range\": {\n        \"min\": -5,\n        \"max\": 5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": -5,\n          \"max\": 5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"fair_share\": {\n      \"description\": \"Calculated fair share based on logarithmic transformation of token contributions\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"calculation\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"U\": {\n      \"description\": \"Utility computed as a function of fairness deviation\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"calculation\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"P_accept\": {\n      \"description\": \"Probability of accepting the proposal mapped through the logistic function\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"calculation\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"accept\": {\n      \"description\": \"Binary decision variable: 1 for accept, 0 for reject\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"bernoulli\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, beta=0.0, gamma=0.0):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n        split_self = trial.get(\"split_self\", 0)\n\n        #Fair share calculation\n        fair_share = combined_earning * (math.log(1 + token_self) / (math.log(1 + token_self) + math.log(1 + token_opp)))\n\n        #Utility Calculation\n        U = beta * (split_self - fair_share) + gamma\n\n        #Probability of acceptance\n        try:\n            P_accept = 1 / (1 + math.exp(-U))\n        except OverflowError:\n            if U > 0:\n                P_accept = 0.0\n            else:\n                P_accept = 1.0\n\n        model_predictions.append(P_accept)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n",
      "timestamp": 1743524760.215839
    }
  ],
  "learnable_parameters": {
    "beta": {
      "description": "Learnable sensitivity parameter for fairness deviation",
      "range": {
        "min": -5,
        "max": 5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": -5,
          "max": 5
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Learnable intercept parameter",
      "range": {
        "min": -5,
        "max": 5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": -5,
          "max": 5
        }
      },
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "fair_share = combined_earning * (log(1 + token_self) / (log(1 + token_self) + log(1 + token_opp)))\nU = beta * (split_self - fair_share) + gamma\nP_accept = 1 / (1 + exp(-U))",
  "variable_descriptions": {
    "token_self": {
      "description": "Number of tokens found by the participant",
      "range": {
        "min": 0,
        "max": 1000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "integer",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent",
      "range": {
        "min": 0,
        "max": 1000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "integer",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "combined_earning": {
      "description": "Total money earned in the trial (each token is worth \u00a33)",
      "range": {
        "min": 0,
        "max": 10000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "integer",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "split_self": {
      "description": "Proposed share for the participant in \u00a3",
      "range": {
        "min": 0,
        "max": 10000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "float",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "beta": {
      "description": "Learnable sensitivity parameter for fairness deviation",
      "range": {
        "min": -5,
        "max": 5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": -5,
          "max": 5
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Learnable intercept parameter",
      "range": {
        "min": -5,
        "max": 5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": -5,
          "max": 5
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "fair_share": {
      "description": "Calculated fair share based on logarithmic transformation of token contributions",
      "range": {
        "min": 0,
        "max": 10000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "calculation",
        "parameters": {}
      },
      "learnable": false,
      "source": "calculated"
    },
    "U": {
      "description": "Utility computed as a function of fairness deviation",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": {
        "type": "calculation",
        "parameters": {}
      },
      "learnable": false,
      "source": "calculated"
    },
    "P_accept": {
      "description": "Probability of accepting the proposal mapped through the logistic function",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "calculation",
        "parameters": {}
      },
      "learnable": false,
      "source": "calculated"
    },
    "accept": {
      "description": "Binary decision variable: 1 for accept, 0 for reject",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "bernoulli",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    }
  },
  "model_summary": "A logistic decision model where the utility is determined by the deviation between the participant's proposed share and a fairness benchmark derived from logarithmically transformed token contributions; two learnable parameters (beta and gamma) modulate this deviation to map utility to acceptance probability.",
  "target_variable": "accept",
  "full_reasoning": "<MODEL>\nfair_share = combined_earning * (log(1 + token_self) / (log(1 + token_self) + log(1 + token_opp)))\nU = beta * (split_self - fair_share) + gamma\nP_accept = 1 / (1 + exp(-U))\n</MODEL>\n<VARIABLES>\n{\n  \"variables\": {\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"integer\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"integer\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total money earned in the trial (each token is worth \u00a33)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"integer\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant in \u00a3\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"float\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"beta\": {\n      \"description\": \"Learnable sensitivity parameter for fairness deviation\",\n      \"range\": {\n        \"min\": -5,\n        \"max\": 5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": -5,\n          \"max\": 5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Learnable intercept parameter\",\n      \"range\": {\n        \"min\": -5,\n        \"max\": 5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": -5,\n          \"max\": 5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"fair_share\": {\n      \"description\": \"Calculated fair share based on logarithmic transformation of token contributions\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"calculation\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"U\": {\n      \"description\": \"Utility computed as a function of fairness deviation\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"calculation\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"P_accept\": {\n      \"description\": \"Probability of accepting the proposal mapped through the logistic function\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"calculation\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"accept\": {\n      \"description\": \"Binary decision variable: 1 for accept, 0 for reject\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"bernoulli\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n<target_variable>accept</target_variable>\n<SUMMARY>\nA logistic decision model where the utility is determined by the deviation between the participant's proposed share and a fairness benchmark derived from logarithmically transformed token contributions; two learnable parameters (beta and gamma) modulate this deviation to map utility to acceptance probability.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: fair_share = combined_earning * (log(1 + token_self) / (log(1 + token_self) + log(1 + token_opp)))\nU = beta * (split_self - fair_share) + gamma\nP_accept = 1 / (1 + exp(-U))\nSummary: A logistic decision model where the utility is determined by the deviation between the participant's proposed share and a fairness benchmark derived from logarithmically transformed token contributions; two learnable parameters (beta and gamma) modulate this deviation to map utility to acceptance probability.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, beta=0.0, gamma=0.0):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n        split_self = trial.get(\"split_self\", 0)\n\n        #Fair share calculation\n        fair_share = combined_earning * (math.log(1 + token_self) / (math.log(1 + token_self) + math.log(1 + token_opp)))\n\n        #Utility Calculation\n        U = beta * (split_self - fair_share) + gamma\n\n        #Probability of acceptance\n        try:\n            P_accept = 1 / (1 + math.exp(-U))\n        except OverflowError:\n            if U > 0:\n                P_accept = 0.0\n            else:\n                P_accept = 1.0\n\n        model_predictions.append(P_accept)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.6733821733821734,
  "fitting_results": [
    {
      "beta": 5.0,
      "gamma": -5.0,
      "success": true,
      "log_likelihood": -24.29912596876638,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 4.288276207513431,
      "gamma": 3.374536843252195,
      "success": true,
      "log_likelihood": -18.98705270706651,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.90161387361932,
      "gamma": 1.92905059783031,
      "success": true,
      "log_likelihood": -18.704159819476835,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 5.0,
      "gamma": -0.3423656221444053,
      "success": true,
      "log_likelihood": -22.912551772684967,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 4.1418821427176455,
      "gamma": 3.2356886623287195,
      "success": true,
      "log_likelihood": -18.945358092624424,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.68343121256871,
      "gamma": 2.9785238043546074,
      "success": true,
      "log_likelihood": -15.490124179363812,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.3044710902764507,
      "gamma": 5.0,
      "success": true,
      "log_likelihood": -0.0016648789971576107,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.1042698351162537,
      "gamma": 0.426800433902651,
      "success": true,
      "log_likelihood": -16.036866127059906,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.3563693220131525,
      "gamma": 5.0,
      "success": true,
      "log_likelihood": -0.0016650292167879992,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 5.0,
      "gamma": 3.2982174258532186,
      "success": true,
      "log_likelihood": -19.9645399387934,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 4.340310509479228,
      "gamma": 3.411259507845061,
      "success": true,
      "log_likelihood": -19.017991778211258,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 5.0,
      "gamma": -5.0,
      "success": true,
      "log_likelihood": -24.299058643825138,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 4.5574671621915535,
      "gamma": 3.6563697604103353,
      "success": true,
      "log_likelihood": -19.02674699072021,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.3544662913040588,
      "gamma": 5.0,
      "success": true,
      "log_likelihood": -0.0016650219646379637,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.292589367063193,
      "gamma": 5.0,
      "success": true,
      "log_likelihood": -0.0016648585936151245,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.0440624634110274,
      "gamma": 5.0,
      "success": true,
      "log_likelihood": -0.0016657077730652353,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.3559325929576744,
      "gamma": 5.0,
      "success": true,
      "log_likelihood": -0.0016650275408032925,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.5836997724995617,
      "gamma": 0.2293817702836124,
      "success": true,
      "log_likelihood": -11.0127960013156,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.8370306710044217,
      "gamma": 5.0,
      "success": true,
      "log_likelihood": -6.516284663436378,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.3081814548199462,
      "gamma": 5.0,
      "success": true,
      "log_likelihood": -0.0016648864431183308,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 3.873633586731682,
      "gamma": 5.0,
      "success": true,
      "log_likelihood": -15.158181371729293,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.0540039515895199,
      "gamma": 1.9047129691128706,
      "success": true,
      "log_likelihood": -8.867623175908447,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 5.0,
      "gamma": 0.7928515936692204,
      "success": true,
      "log_likelihood": -22.60961881273108,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.679813029728008,
      "gamma": -0.343092033085144,
      "success": true,
      "log_likelihood": -21.284302818108493,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 4.479628134211788,
      "gamma": 5.0,
      "success": true,
      "log_likelihood": -16.350259157038895,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.1809622851190693,
      "gamma": 1.221951169543548,
      "success": true,
      "log_likelihood": -18.347694420935987,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.268679348223811,
      "gamma": 1.1323184911044397,
      "success": true,
      "log_likelihood": -18.831202940341242,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 5.0,
      "gamma": 2.8410332250272337,
      "success": true,
      "log_likelihood": -20.44338697676192,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.6987907290972962,
      "gamma": 0.8116141618634952,
      "success": true,
      "log_likelihood": -9.02061386852796,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.8481841180469933,
      "gamma": 5.0,
      "success": true,
      "log_likelihood": -12.271847184701203,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.3469784190996887,
      "gamma": 5.0,
      "success": true,
      "log_likelihood": -0.0016649947129767965,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 5.0,
      "gamma": -5.0,
      "success": true,
      "log_likelihood": -24.299125968766372,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 5.0,
      "gamma": -0.2159461834310317,
      "success": true,
      "log_likelihood": -22.884550037968857,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 5.0,
      "gamma": 3.0320091462004246,
      "success": true,
      "log_likelihood": -20.230923024081022,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.1349440893225906,
      "gamma": 5.0,
      "success": true,
      "log_likelihood": -0.0016651013586521713,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 5.0,
      "gamma": 3.412695499633707,
      "success": true,
      "log_likelihood": -19.845987044029474,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.5942730541706398,
      "gamma": 1.371148536824928,
      "success": true,
      "log_likelihood": -15.144220247431685,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 4.249244997936242,
      "gamma": 3.3301977719877467,
      "success": true,
      "log_likelihood": -18.985762915738455,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.3696428227047177,
      "gamma": 0.5184375792450157,
      "success": true,
      "log_likelihood": -17.227283921999508,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.8297158463700645,
      "gamma": 5.0,
      "success": true,
      "log_likelihood": -6.483323903397383,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 4.2621714996405204,
      "gamma": 5.0,
      "success": true,
      "log_likelihood": -16.09378432409239,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 5.0,
      "gamma": -0.04029541174500811,
      "success": true,
      "log_likelihood": -22.85543328164306,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.21466246144504864,
      "gamma": 0.03213317314650415,
      "success": true,
      "log_likelihood": -4.296633597092264,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 5.0,
      "gamma": 3.4126831185737645,
      "success": true,
      "log_likelihood": -19.8459956383634,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 4.653166381848212,
      "gamma": 5.0,
      "success": true,
      "log_likelihood": -16.732343184388487,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.4588607615996492,
      "gamma": -1.1489857179774963,
      "success": true,
      "log_likelihood": -19.481748297265284,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 3.856590576640457,
      "gamma": 2.992522546613973,
      "success": true,
      "log_likelihood": -18.77678432928616,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 5.0,
      "gamma": 1.6417922689564992,
      "success": true,
      "log_likelihood": -21.97929935963974,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 5.0,
      "gamma": 3.369911614615928,
      "success": true,
      "log_likelihood": -19.89747582816467,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.1297762426049855,
      "gamma": -2.361031879313707,
      "success": true,
      "log_likelihood": -24.225654333384494,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.6511123035739502,
      "gamma": -0.878100224462829,
      "success": true,
      "log_likelihood": -19.420991425066255,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 5.0,
      "gamma": -5.0,
      "success": true,
      "log_likelihood": -24.295772456053317,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.7486291143935315,
      "gamma": -0.7389776323616494,
      "success": true,
      "log_likelihood": -22.235023267722354,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 5.0,
      "gamma": -5.0,
      "success": true,
      "log_likelihood": -24.291393440473325,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 4.619691848298471,
      "gamma": -0.0007639538303312661,
      "success": true,
      "log_likelihood": -22.818318938664753,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.186247590695697,
      "gamma": -0.41380277928259807,
      "success": true,
      "log_likelihood": -22.205143144308785,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 5.0,
      "gamma": 1.5948271006109267,
      "success": true,
      "log_likelihood": -22.023600677788377,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.5729865030870506,
      "gamma": -2.5330876026435405,
      "success": true,
      "log_likelihood": -11.133513856492488,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 5.0,
      "gamma": -5.0,
      "success": true,
      "log_likelihood": -24.29895895454794,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.667110649560946,
      "gamma": -0.2648964423226095,
      "success": true,
      "log_likelihood": -15.582368589257293,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.1161731162154804,
      "gamma": -0.6041978819921879,
      "success": true,
      "log_likelihood": -20.537334898345364,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 4.43840714543066,
      "gamma": 5.0,
      "success": true,
      "log_likelihood": -16.37379432153565,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 5.0,
      "gamma": -5.0,
      "success": true,
      "log_likelihood": -24.29912596876638,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 5.0,
      "gamma": -0.671563008688147,
      "success": true,
      "log_likelihood": -22.994323615354013,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 5.0,
      "gamma": 0.7010804215915506,
      "success": true,
      "log_likelihood": -22.647147397097655,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.6885057624711703,
      "gamma": 1.6000565924843682,
      "success": true,
      "log_likelihood": -18.8670378772652,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.476640848661847,
      "gamma": 3.897026144814482,
      "success": true,
      "log_likelihood": -6.442322123900919,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.0947722282390713,
      "gamma": 1.661780890832992,
      "success": true,
      "log_likelihood": -10.227505201188489,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.0376802152235047,
      "gamma": -0.14157947388748227,
      "success": true,
      "log_likelihood": -21.485990718272436,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.2622911701851541,
      "gamma": -0.46325976892109677,
      "success": true,
      "log_likelihood": -9.81329553814176,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 5.0,
      "gamma": -0.9084728224132907,
      "success": true,
      "log_likelihood": -23.080102975717963,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 5.0,
      "gamma": -5.0,
      "success": true,
      "log_likelihood": -24.298954352637562,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.3998932767503844,
      "gamma": -0.4258621911918788,
      "success": true,
      "log_likelihood": -20.86103959839765,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.5208521082158194,
      "gamma": -0.71783327224747,
      "success": true,
      "log_likelihood": -17.151073324914403,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.5594893066971882,
      "gamma": -2.6872535259980532,
      "success": true,
      "log_likelihood": -24.52039140472692,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.9901599465907962,
      "gamma": 0.4222926643040702,
      "success": true,
      "log_likelihood": -15.198516361927483,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.7371956823202848,
      "gamma": 1.4292865267624655,
      "success": true,
      "log_likelihood": -6.216860698176236,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.2635828918912817,
      "gamma": -5.0,
      "success": true,
      "log_likelihood": -25.204802290646036,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.3720200338763493,
      "gamma": -0.5473215316294151,
      "success": true,
      "log_likelihood": -22.500615717599555,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 5.0,
      "gamma": -5.0,
      "success": true,
      "log_likelihood": -24.29912596876639,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 5.0,
      "gamma": 1.6050567072300357,
      "success": true,
      "log_likelihood": -22.01406225857946,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.05527521399308679,
      "gamma": -1.0160979304252955,
      "success": true,
      "log_likelihood": -10.290701845624389,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.1425595090987188,
      "gamma": -5.0,
      "success": true,
      "log_likelihood": -25.147379867689622,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 5.0,
      "gamma": 1.791690212384688,
      "success": true,
      "log_likelihood": -21.83256613010739,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 5.0,
      "gamma": 2.9539580126912695,
      "success": true,
      "log_likelihood": -20.38214009788153,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 5.0,
      "gamma": -1.1734681768327755,
      "success": true,
      "log_likelihood": -23.205237757593764,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 4.390891496405836,
      "gamma": 5.0,
      "success": true,
      "log_likelihood": -16.322752964960316,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.0245760460406161,
      "gamma": -5.0,
      "success": true,
      "log_likelihood": -25.03611805469309,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.39895561107677097,
      "gamma": 0.37899164517310463,
      "success": true,
      "log_likelihood": -6.067556639563136,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 5.0,
      "gamma": 0.895080560809141,
      "success": true,
      "log_likelihood": -22.563053803816512,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.7631329458216418,
      "gamma": -0.8422263701632132,
      "success": true,
      "log_likelihood": -19.9274905804773,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "beta": {
        "r": 0.75661528197941,
        "p": 8.723402498584762e-20
      },
      "gamma": {
        "r": 0.8262536650712629,
        "p": 3.6180163206137736e-26
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 40.701372102367216,
  "bic_results": {
    "average_bic": 40.701372102367216,
    "individual_bics": [
      55.76528981444498,
      45.14114329104524,
      44.57535751586589,
      52.99214142228215,
      45.05775406216107,
      38.14728623563985,
      7.170367634906535,
      39.24077013103203,
      7.170367935345796,
      47.09611775449902,
      45.20302143333473,
      55.76515516456249,
      45.220531858352636,
      7.170367920841496,
      7.17036759409945,
      7.17036929245835,
      7.170367931993827,
      29.192629879543418,
      20.199607203784975,
      7.1703676497984565,
      37.48340062037081,
      24.902284228729116,
      52.38627550237438,
      49.735643513129205,
      39.86755619099001,
      43.86242671878419,
      44.8294437575947,
      48.05381183043606,
      25.208265613968138,
      31.710732246314628,
      7.170367866338173,
      55.76528981444496,
      52.93613795284993,
      47.62888392507426,
      7.170368079629524,
      46.85901196497117,
      37.45547837177559,
      45.13856370838913,
      41.621605720911234,
      20.133685683706986,
      39.354606525097,
      52.877904440198336,
      15.760305071096747,
      46.85902915363902,
      40.63172424568919,
      46.130534471442786,
      44.720606535484535,
      51.1256365961917,
      46.96198953324156,
      55.618346543681206,
      46.00902072704473,
      55.75858278901885,
      51.63708441235693,
      55.74982475785887,
      52.80367575424172,
      51.57732416552979,
      51.21423923248897,
      29.434065589897195,
      55.764955786008095,
      38.3317750554268,
      48.241707673602946,
      39.91462651998352,
      55.76528981444498,
      53.15568510762024,
      52.46133267110753,
      44.90111363144262,
      20.051682124714056,
      27.622048279289196,
      50.13901931345709,
      26.793628953195743,
      53.327243828348145,
      55.76494658218734,
      48.88911707370752,
      41.469184526741024,
      56.207820686366055,
      37.56407060076719,
      19.600759273264693,
      57.57664245820429,
      52.16826931211133,
      55.765289814445,
      51.19516239407114,
      27.748441568161,
      57.46179761229146,
      50.832170137127,
      47.931318072675275,
      53.577513392099746,
      39.81254380683285,
      57.2392739862984,
      19.30215115603849,
      52.29314548454524,
      47.02201903786682
    ],
    "group_enabled": false,
    "group_bics": null,
    "num_parameters": 2,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- beta: r = 0.757\n- gamma: r = 0.826",
  "previous_models": [
    "Specification: fair_share = combined_earning * (log(1 + token_self) / (log(1 + token_self) + log(1 + token_opp)))\nU = beta * (split_self - fair_share) + gamma\nP_accept = 1 / (1 + exp(-U))\nSummary: A logistic decision model where the utility is determined by the deviation between the participant's proposed share and a fairness benchmark derived from logarithmically transformed token contributions; two learnable parameters (beta and gamma) modulate this deviation to map utility to acceptance probability.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 40.701372102367216\nOverall Accuracy: 0.6734\n\nParameter Recovery:\n- beta: r = 0.757\n- gamma: r = 0.826"
  ]
}