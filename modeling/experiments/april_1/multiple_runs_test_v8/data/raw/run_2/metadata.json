{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "<think>The previous model had decent accuracy (0.657), but poor parameter recovery, especially for `fairness_weight`.  The negative correlation suggests the model is fitting the data in a way that doesn't reflect the true underlying parameters.  This might be due to high covariance between the parameters or a misspecified model form. Let's try to address this by simplifying the model and focusing on more directly measurable influences, while also explicitly accounting for potential interactions.  We should retain `self_interest_weight` as it shows some recovery, and possibly remove `contribution_weight` due to the high intercorrelation.  We will also add a term to better capture fairness perception.\n</think>\n\nRefined Instructions:\n\nFocus on improving parameter recovery while maintaining reasonable accuracy.  The previous model suffered from high parameter covariance. The new model should address this by:\n\n1. **Simplifying the model structure:** Reduce the number of learnable parameters if possible, prioritizing those with better parameter recovery in the previous run.  Consider removing or combining terms based on the correlation analysis of the previous run.\n\n2. **Explicitly modeling interactions:** Instead of simply weighting terms additively,  consider introducing multiplicative interactions between parameters to explicitly capture the interaction between self-interest and fairness.\n\n3. **Improved fairness metric:** Replace `(0.5 - abs(splitperc_self - 0.5))` with a more nuanced fairness metric that considers not only the percentage difference from an equal split, but also potentially the absolute difference in amounts (`abs(split_self - split_opp)`).  This might be weighted by the relative contribution of tokens.\n\n4. **Regularization:** If needed, introduce regularization terms in your mathematical model to penalize overly complex models and reduce overfitting, thereby improving parameter recovery.\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved (re-evaluate based on the results of the previous run)\n* How these mechanisms interact (focus on interactions between fairness and self-interest, explicitly modeling them).\n* What mathematical form could capture these interactions (use multiplicative terms or interactions to model the relationships).\n* What parameters would be needed to calibrate the model (prioritize parameters showing better recovery in previous run)\n* How the model variables map to observable behavior (make sure the model is easily interpretable).",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function, and then used to predict binary decisions.\n\n\nInstructions: <think>The previous model had decent accuracy (0.657), but poor parameter recovery, especially for `fairness_weight`.  The negative correlation suggests the model is fitting the data in a way that doesn't reflect the true underlying parameters.  This might be due to high covariance between the parameters or a misspecified model form. Let's try to address this by simplifying the model and focusing on more directly measurable influences, while also explicitly accounting for potential interactions.  We should retain `self_interest_weight` as it shows some recovery, and possibly remove `contribution_weight` due to the high intercorrelation.  We will also add a term to better capture fairness perception.\n</think>\n\nRefined Instructions:\n\nFocus on improving parameter recovery while maintaining reasonable accuracy.  The previous model suffered from high parameter covariance. The new model should address this by:\n\n1. **Simplifying the model structure:** Reduce the number of learnable parameters if possible, prioritizing those with better parameter recovery in the previous run.  Consider removing or combining terms based on the correlation analysis of the previous run.\n\n2. **Explicitly modeling interactions:** Instead of simply weighting terms additively,  consider introducing multiplicative interactions between parameters to explicitly capture the interaction between self-interest and fairness.\n\n3. **Improved fairness metric:** Replace `(0.5 - abs(splitperc_self - 0.5))` with a more nuanced fairness metric that considers not only the percentage difference from an equal split, but also potentially the absolute difference in amounts (`abs(split_self - split_opp)`).  This might be weighted by the relative contribution of tokens.\n\n4. **Regularization:** If needed, introduce regularization terms in your mathematical model to penalize overly complex models and reduce overfitting, thereby improving parameter recovery.\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved (re-evaluate based on the results of the previous run)\n* How these mechanisms interact (focus on interactions between fairness and self-interest, explicitly modeling them).\n* What mathematical form could capture these interactions (use multiplicative terms or interactions to model the relationships).\n* What parameters would be needed to calibrate the model (prioritize parameters showing better recovery in previous run)\n* How the model variables map to observable behavior (make sure the model is easily interpretable).\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<think>\nThe previous model's poor parameter recovery suggests overfitting or high correlation between parameters.  To address this, we'll simplify.  Self-interest is a strong predictor, so we'll keep a weight for that (`self_interest_weight`).  Fairness perception is crucial; instead of a simple difference from 50%, let's incorporate both percentage difference and absolute monetary difference, weighted by relative contribution. The contribution weight will be replaced with this new fairness metric.\n\n\nThe key psychological mechanisms are:\n\n1. **Self-interest:** Responders prioritize maximizing their own monetary gain.\n2. **Fairness:** Responders consider the fairness of the offer, considering both proportional and absolute differences between the proposed splits.\n\n\nThe interaction between these is multiplicative:  a highly unfair offer might be accepted if the self-interest is very high, and a fair offer might be rejected if the self-interest is low.\n\nMathematically, we can represent this as:\n\n\nUtility = f(self-interest) * f(fairness) + error\n\n\nwhere f(x) is a function that increases monotonically with increasing x.  We will model these functions using exponentials to ensure positivity and an easily differentiable form:\n\nThe improved fairness metric will be a weighted average of proportional and absolute fairness:\n\nfairness = w_prop * (0.5 - abs(splitperc_self - 0.5)) + w_abs * (abs(split_self - split_opp) / combined_earning)\n\nwhere w_prop and w_abs are fixed weights representing the relative importance of proportional and absolute fairness, and  the division by combined_earning scales the absolute difference to a comparable magnitude to the percentage difference.\n\n\nLearnable parameters will be:\n\n1. `self_interest_weight`:  Weights the importance of self-interest in the utility calculation.\n2. `fairness_weight`: Weights the overall importance of fairness in the utility calculation.\n\n\n\nFinally, we use a logistic function to convert utility to a probability of acceptance:\n\nP(accept) = 1 / (1 + exp(-utility))\n\n\nThis approach simplifies the model, reduces parameter intercorrelation by explicitly modelling the interaction through multiplication, and improves the fairness metric for better parameter recovery.\n</think>\n\n\n<MODEL>\nutility = exp(self_interest_weight * split_self) * exp(fairness_weight * (0.5 * (0.5 - abs(splitperc_self - 0.5)) + 0.5 * (abs(split_self - split_opp) / combined_earning)))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"utility\": {\n      \"description\": \"Utility of accepting the proposal\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"self_interest_weight\": {\n      \"description\": \"Weight representing the importance of self-interest in utility calculation\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"The proposed share for the participant (in \u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"fairness_weight\": {\n      \"description\": \"Weight representing the importance of fairness in utility calculation\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"splitperc_self\": {\n      \"description\": \"Proposed share for the participant (in %)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_opp\":{\n      \"description\": \"The proposed share of the opponent (in \u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Amount of money earned in total\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n\n  }\n}\n</VARIABLES>\n<target_variable>accept</target_variable>\n<SUMMARY>\nA multiplicative utility model combining self-interest and fairness.  Self-interest is represented by the participant's proposed share. Fairness considers both proportional and absolute differences in the proposed shares, weighted equally.  The model uses two learnable parameters, self_interest_weight and fairness_weight, representing the relative importance of each factor. Utility is transformed into a probability of acceptance using a logistic function.\n</SUMMARY>\n"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['self_interest_weight', 'fairness_weight']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                utility = exp(self_interest_weight * split_self) * exp(fairness_weight * (0.5 * (0.5 - abs(splitperc_self - 0.5)) + 0.5 * (abs(split_self - split_opp) / combined_earning)))\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"utility\": {\n      \"description\": \"Utility of accepting the proposal\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"self_interest_weight\": {\n      \"description\": \"Weight representing the importance of self-interest in utility calculation\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"The proposed share for the participant (in \\u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"fairness_weight\": {\n      \"description\": \"Weight representing the importance of fairness in utility calculation\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"splitperc_self\": {\n      \"description\": \"Proposed share for the participant (in %)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_opp\": {\n      \"description\": \"The proposed share of the opponent (in \\u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Amount of money earned in total\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "```python\nimport json\nimport math\n\ndef simulate_model(trial_data, self_interest_weight=0.0, fairness_weight=0.0):\n    model_predictions = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0.0)\n        splitperc_self = trial.get(\"splitperc_self\", 0.0)\n        split_opp = trial.get(\"split_opp\", 0.0)\n        combined_earning = trial.get(\"combined_earning\", 1.0)\n\n        # Calculate fairness component\n        fairness = 0.5 * (0.5 - abs(splitperc_self / 100.0 - 0.5)) + 0.5 * (abs(split_self - split_opp) / combined_earning)\n\n        # Calculate utility\n        utility = math.exp(self_interest_weight * split_self) * math.exp(fairness_weight * fairness)\n\n        model_predictions.append(utility)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '[{\"ID\": 0, \"group\": \"group1\", \"trial_number\": 1, \"trial_type\": 0, \"trial_role\": 1, \"token_opp\": 5, \"token_self\": 5, \"combined_earning\": 10, \"split_opp\": 3.0, \"split_self\": 7.0, \"splitperc_opp\": 30, \"splitperc_self\": 70, \"accept\": 1.0, \"accepted_amount\": 7.0, \"accepted_perc\": 70.0, \"proposed_perc\": 70.0, \"proposed_amount\": 7.0}, {\"ID\": 1, \"group\": \"group1\", \"trial_number\": 2, \"trial_type\": 0, \"trial_role\": 1, \"token_opp\": 5, \"token_self\": 5, \"combined_earning\": 10, \"split_opp\": 5.0, \"split_self\": 5.0, \"splitperc_opp\": 50, \"splitperc_self\": 50, \"accept\": 1.0, \"accepted_amount\": 5.0, \"accepted_perc\": 50.0, \"proposed_perc\": 50.0, \"proposed_amount\": 5.0}]'\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n```",
      "timestamp": 1743518961.875715
    }
  ],
  "learnable_parameters": {
    "self_interest_weight": {
      "description": "Weight representing the importance of self-interest in utility calculation",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "fairness_weight": {
      "description": "Weight representing the importance of fairness in utility calculation",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "utility = exp(self_interest_weight * split_self) * exp(fairness_weight * (0.5 * (0.5 - abs(splitperc_self - 0.5)) + 0.5 * (abs(split_self - split_opp) / combined_earning)))",
  "variable_descriptions": {
    "utility": {
      "description": "Utility of accepting the proposal",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "self_interest_weight": {
      "description": "Weight representing the importance of self-interest in utility calculation",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "split_self": {
      "description": "The proposed share for the participant (in \u00a3)",
      "range": {
        "min": 0,
        "max": 1000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "fairness_weight": {
      "description": "Weight representing the importance of fairness in utility calculation",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "splitperc_self": {
      "description": "Proposed share for the participant (in %)",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "split_opp": {
      "description": "The proposed share of the opponent (in \u00a3)",
      "range": {
        "min": 0,
        "max": 1000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "combined_earning": {
      "description": "Amount of money earned in total",
      "range": {
        "min": 0,
        "max": 1000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    }
  },
  "model_summary": "A multiplicative utility model combining self-interest and fairness.  Self-interest is represented by the participant's proposed share. Fairness considers both proportional and absolute differences in the proposed shares, weighted equally.  The model uses two learnable parameters, self_interest_weight and fairness_weight, representing the relative importance of each factor. Utility is transformed into a probability of acceptance using a logistic function.",
  "target_variable": "accept",
  "full_reasoning": "<think>\nThe previous model's poor parameter recovery suggests overfitting or high correlation between parameters.  To address this, we'll simplify.  Self-interest is a strong predictor, so we'll keep a weight for that (`self_interest_weight`).  Fairness perception is crucial; instead of a simple difference from 50%, let's incorporate both percentage difference and absolute monetary difference, weighted by relative contribution. The contribution weight will be replaced with this new fairness metric.\n\n\nThe key psychological mechanisms are:\n\n1. **Self-interest:** Responders prioritize maximizing their own monetary gain.\n2. **Fairness:** Responders consider the fairness of the offer, considering both proportional and absolute differences between the proposed splits.\n\n\nThe interaction between these is multiplicative:  a highly unfair offer might be accepted if the self-interest is very high, and a fair offer might be rejected if the self-interest is low.\n\nMathematically, we can represent this as:\n\n\nUtility = f(self-interest) * f(fairness) + error\n\n\nwhere f(x) is a function that increases monotonically with increasing x.  We will model these functions using exponentials to ensure positivity and an easily differentiable form:\n\nThe improved fairness metric will be a weighted average of proportional and absolute fairness:\n\nfairness = w_prop * (0.5 - abs(splitperc_self - 0.5)) + w_abs * (abs(split_self - split_opp) / combined_earning)\n\nwhere w_prop and w_abs are fixed weights representing the relative importance of proportional and absolute fairness, and  the division by combined_earning scales the absolute difference to a comparable magnitude to the percentage difference.\n\n\nLearnable parameters will be:\n\n1. `self_interest_weight`:  Weights the importance of self-interest in the utility calculation.\n2. `fairness_weight`: Weights the overall importance of fairness in the utility calculation.\n\n\n\nFinally, we use a logistic function to convert utility to a probability of acceptance:\n\nP(accept) = 1 / (1 + exp(-utility))\n\n\nThis approach simplifies the model, reduces parameter intercorrelation by explicitly modelling the interaction through multiplication, and improves the fairness metric for better parameter recovery.\n</think>\n\n\n<MODEL>\nutility = exp(self_interest_weight * split_self) * exp(fairness_weight * (0.5 * (0.5 - abs(splitperc_self - 0.5)) + 0.5 * (abs(split_self - split_opp) / combined_earning)))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"utility\": {\n      \"description\": \"Utility of accepting the proposal\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"self_interest_weight\": {\n      \"description\": \"Weight representing the importance of self-interest in utility calculation\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"The proposed share for the participant (in \u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"fairness_weight\": {\n      \"description\": \"Weight representing the importance of fairness in utility calculation\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"splitperc_self\": {\n      \"description\": \"Proposed share for the participant (in %)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_opp\":{\n      \"description\": \"The proposed share of the opponent (in \u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Amount of money earned in total\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n\n  }\n}\n</VARIABLES>\n<target_variable>accept</target_variable>\n<SUMMARY>\nA multiplicative utility model combining self-interest and fairness.  Self-interest is represented by the participant's proposed share. Fairness considers both proportional and absolute differences in the proposed shares, weighted equally.  The model uses two learnable parameters, self_interest_weight and fairness_weight, representing the relative importance of each factor. Utility is transformed into a probability of acceptance using a logistic function.\n</SUMMARY>\n",
  "prediction_type": "utility",
  "current_model": "Specification: utility = exp(self_interest_weight * split_self) * exp(fairness_weight * (0.5 * (0.5 - abs(splitperc_self - 0.5)) + 0.5 * (abs(split_self - split_opp) / combined_earning)))\nSummary: A multiplicative utility model combining self-interest and fairness.  Self-interest is represented by the participant's proposed share. Fairness considers both proportional and absolute differences in the proposed shares, weighted equally.  The model uses two learnable parameters, self_interest_weight and fairness_weight, representing the relative importance of each factor. Utility is transformed into a probability of acceptance using a logistic function.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, self_interest_weight=0.0, fairness_weight=0.0):\n    model_predictions = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0.0)\n        splitperc_self = trial.get(\"splitperc_self\", 0.0)\n        split_opp = trial.get(\"split_opp\", 0.0)\n        combined_earning = trial.get(\"combined_earning\", 1.0)\n\n        # Calculate fairness component\n        fairness = 0.5 * (0.5 - abs(splitperc_self / 100.0 - 0.5)) + 0.5 * (abs(split_self - split_opp) / combined_earning)\n\n        # Calculate utility\n        utility = math.exp(self_interest_weight * split_self) * math.exp(fairness_weight * fairness)\n\n        model_predictions.append(utility)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.5824175824175825,
  "fitting_results": [
    {
      "self_interest_weight": -10.0,
      "fairness_weight": -10.0,
      "success": true,
      "log_likelihood": -24.953299436039753,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": -8.32880803596395,
      "fairness_weight": -8.232813408867685,
      "success": true,
      "log_likelihood": -24.953313590952423,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3333333333333333,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": -10.0,
      "fairness_weight": -6.819633146818472,
      "success": true,
      "log_likelihood": -24.953302077798753,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": -10.0,
      "fairness_weight": -10.0,
      "success": true,
      "log_likelihood": -24.953299435999384,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": -7.992122048398452,
      "fairness_weight": -9.581324786877271,
      "success": true,
      "log_likelihood": -24.9533114128595,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": -1.99986874047069,
      "fairness_weight": -7.997007430488284,
      "success": true,
      "log_likelihood": -24.95626945163427,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 6.5401627886395275,
      "fairness_weight": -5.769867698812736,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": -8.794984330222485,
      "fairness_weight": 2.894768316373048,
      "success": true,
      "log_likelihood": -24.953433798378033,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 6.830743925688118,
      "fairness_weight": -3.2969858019693676,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": -10.0,
      "fairness_weight": -10.0,
      "success": true,
      "log_likelihood": -24.95329943319057,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": -10.0,
      "fairness_weight": -2.1813956862838153,
      "success": true,
      "log_likelihood": -24.953324087389202,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": -10.0,
      "fairness_weight": 1.1936298748123875,
      "success": true,
      "log_likelihood": -24.953406182102434,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": -10.0,
      "fairness_weight": -1.2646499317285733,
      "success": true,
      "log_likelihood": -24.953336279241352,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 6.656219029422816,
      "fairness_weight": 0.18491006799657494,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 2.1693617293681484,
      "fairness_weight": -2.0925920803532065,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 8.813584283624046,
      "fairness_weight": 9.109969205790435,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 7.142188626213354,
      "fairness_weight": -3.560580567846725,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": -10.0,
      "fairness_weight": -10.0,
      "success": true,
      "log_likelihood": -24.953299428543623,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.32646728752480075,
      "fairness_weight": -6.9243829585017,
      "success": true,
      "log_likelihood": -9.199220038465851,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 6.679346171815318,
      "fairness_weight": 1.8173578418047427,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": -10.0,
      "fairness_weight": -8.401990407841879,
      "success": true,
      "log_likelihood": -24.9533003254443,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": -9.889198758571231,
      "fairness_weight": -4.7251376587056875,
      "success": true,
      "log_likelihood": -24.953297762078876,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": -10.0,
      "fairness_weight": -2.445159222685394,
      "success": true,
      "log_likelihood": -24.95332137648018,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": -10.0,
      "fairness_weight": -8.39250303717476,
      "success": true,
      "log_likelihood": -24.95330034615919,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": -9.455120421653683,
      "fairness_weight": -5.282683846796092,
      "success": true,
      "log_likelihood": -24.953311725884053,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": -5.479140507677776,
      "fairness_weight": -9.916412862524888,
      "success": true,
      "log_likelihood": -24.953549920335803,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": -10.0,
      "fairness_weight": -10.0,
      "success": true,
      "log_likelihood": -24.95329943597891,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": -7.558006526759079,
      "fairness_weight": -10.0,
      "success": true,
      "log_likelihood": -24.953317173515774,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": -0.23961856301065076,
      "fairness_weight": -1.5409764805231834,
      "success": true,
      "log_likelihood": -15.541685865805134,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.21701243542898666,
      "fairness_weight": -8.151332419402577,
      "success": true,
      "log_likelihood": -16.655340102825836,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 2.2251639969949686,
      "fairness_weight": -0.9088166737748864,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": -10.0,
      "fairness_weight": -10.0,
      "success": true,
      "log_likelihood": -24.953299436039757,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": -10.0,
      "fairness_weight": -3.8178082669106574,
      "success": true,
      "log_likelihood": -24.953311278735026,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 5.7359439363851905,
      "fairness_weight": -5.135074166516214,
      "success": true,
      "log_likelihood": -506.56872045729034,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 2.3255096438498875,
      "fairness_weight": 9.5365630939691,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": -8.847857248585646,
      "fairness_weight": -6.672089326382553,
      "success": true,
      "log_likelihood": -24.953314061389328,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": -10.0,
      "fairness_weight": 4.892832130856304,
      "success": true,
      "log_likelihood": -24.95338714457163,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": -7.424422663825005,
      "fairness_weight": -2.328430399383451,
      "success": true,
      "log_likelihood": -24.953856041760776,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": -7.495330237227806,
      "fairness_weight": -6.146997238675153,
      "success": true,
      "log_likelihood": -24.95329343912108,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.12371714898004355,
      "fairness_weight": -5.026648403840585,
      "success": true,
      "log_likelihood": -8.714691388551794,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": -10.0,
      "fairness_weight": -1.0261741005153702,
      "success": true,
      "log_likelihood": -24.953299448225494,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": -7.938886913970692,
      "fairness_weight": -8.308483311682117,
      "success": true,
      "log_likelihood": -24.95332229592435,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": -0.22612384788392448,
      "fairness_weight": -0.2692704100695139,
      "success": true,
      "log_likelihood": -3.794184075062634,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": -9.970355556416889,
      "fairness_weight": -0.19688635731490167,
      "success": true,
      "log_likelihood": -24.95336005314034,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": -9.679266931804488,
      "fairness_weight": -3.3007878022078847,
      "success": true,
      "log_likelihood": -24.953321919809184,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": -6.205835526294592,
      "fairness_weight": -6.204414375434298,
      "success": true,
      "log_likelihood": -24.9533080887864,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": -10.0,
      "fairness_weight": -3.5895156208126626,
      "success": true,
      "log_likelihood": -24.953312533445676,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": -6.24649367273818,
      "fairness_weight": -6.073465735469104,
      "success": true,
      "log_likelihood": -24.95331000609694,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": -8.791447095249099,
      "fairness_weight": -4.927556150074328,
      "success": true,
      "log_likelihood": -24.95329666821318,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": -10.0,
      "fairness_weight": -10.0,
      "success": true,
      "log_likelihood": -24.95329936804754,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": -5.548678493580535,
      "fairness_weight": -4.141480560727225,
      "success": true,
      "log_likelihood": -24.951485554887192,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": -10.0,
      "fairness_weight": -10.0,
      "success": true,
      "log_likelihood": -24.953299436020966,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": -10.0,
      "fairness_weight": -3.4462282545166003,
      "success": true,
      "log_likelihood": -24.95331345858898,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.2134899733318021,
      "fairness_weight": -10.0,
      "success": true,
      "log_likelihood": -21.97189762342133,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": -10.0,
      "fairness_weight": -10.0,
      "success": true,
      "log_likelihood": -24.953299399226683,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": -10.0,
      "fairness_weight": -0.6897447732044217,
      "success": true,
      "log_likelihood": -24.953346749457424,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 4.178535645765383,
      "fairness_weight": -6.284463697770091,
      "success": true,
      "log_likelihood": -598.672124177452,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.2777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": -0.07573268102616877,
      "fairness_weight": -3.746710229312755,
      "success": true,
      "log_likelihood": -13.201658826298772,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": -9.823710446547,
      "fairness_weight": 0.9557464295047987,
      "success": true,
      "log_likelihood": -24.953419071023205,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.21989629322456092,
      "fairness_weight": -7.386647425954594,
      "success": true,
      "log_likelihood": -14.232565853967962,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": -9.54464471735415,
      "fairness_weight": -8.628009764680906,
      "success": true,
      "log_likelihood": -24.95329921538229,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": -9.528264931416713,
      "fairness_weight": -4.826458657061418,
      "success": true,
      "log_likelihood": -24.953313183384864,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": -10.0,
      "fairness_weight": -3.4774928710886766,
      "success": true,
      "log_likelihood": -24.953313262183034,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3333333333333333,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": -10.0,
      "fairness_weight": -2.8421572748499386,
      "success": true,
      "log_likelihood": -24.953316976508148,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": -10.0,
      "fairness_weight": -10.0,
      "success": true,
      "log_likelihood": -24.953299436020966,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": -10.0,
      "fairness_weight": -10.0,
      "success": true,
      "log_likelihood": -24.953299435979456,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.36373109492386824,
      "fairness_weight": -6.766585961210751,
      "success": true,
      "log_likelihood": -7.808522661289857,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.12771233902777485,
      "fairness_weight": -5.912822464199068,
      "success": true,
      "log_likelihood": -12.452769180709508,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": -10.0,
      "fairness_weight": -1.0658100610809045,
      "success": true,
      "log_likelihood": -24.953339613746895,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": -0.05086542065928388,
      "fairness_weight": -3.5316901692360285,
      "success": true,
      "log_likelihood": -10.070545442786896,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": -9.829445041263575,
      "fairness_weight": -4.861269435307444,
      "success": true,
      "log_likelihood": -24.95330860759509,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": -10.0,
      "fairness_weight": -2.8248527698523858,
      "success": true,
      "log_likelihood": -24.953317971122786,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": -10.0,
      "fairness_weight": 4.995052022444594,
      "success": true,
      "log_likelihood": -24.953364396597983,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": -9.01671513348646,
      "fairness_weight": -9.564334343340668,
      "success": true,
      "log_likelihood": -24.953302007832875,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 6.144798684161646,
      "fairness_weight": 1.4230289900597786,
      "success": true,
      "log_likelihood": -414.4653167371285,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": -9.593940457868296,
      "fairness_weight": 1.7176798874159684,
      "success": true,
      "log_likelihood": -24.953319314869393,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.08249719274458212,
      "fairness_weight": -4.234411927606422,
      "success": true,
      "log_likelihood": -7.0567092972137475,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": -8.797221030984613,
      "fairness_weight": -9.985076140848042,
      "success": true,
      "log_likelihood": -24.95329780416181,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": -4.879289202039596,
      "fairness_weight": -0.8228383750729349,
      "success": true,
      "log_likelihood": -24.950971592852152,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": -10.0,
      "fairness_weight": -10.0,
      "success": true,
      "log_likelihood": -24.953299436039757,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": -5.572102428017902,
      "fairness_weight": -8.485800979272552,
      "success": true,
      "log_likelihood": -24.953289550939264,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": -8.110753565367425,
      "fairness_weight": -5.28821304199604,
      "success": true,
      "log_likelihood": -24.953229541679534,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": -10.0,
      "fairness_weight": -10.0,
      "success": true,
      "log_likelihood": -24.953299436020966,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.3206210351376527,
      "fairness_weight": -10.0,
      "success": true,
      "log_likelihood": -20.251103090737033,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": -8.727322097002121,
      "fairness_weight": 0.5227208202094571,
      "success": true,
      "log_likelihood": -24.953294847103727,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": -8.323675465026364,
      "fairness_weight": -8.539459122410518,
      "success": true,
      "log_likelihood": -24.953311954724587,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": -9.783282394014194,
      "fairness_weight": 2.279608767988104,
      "success": true,
      "log_likelihood": -24.953310219421525,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": -10.0,
      "fairness_weight": -3.6763792218573514,
      "success": true,
      "log_likelihood": -24.953312067964273,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.22871024119454017,
      "fairness_weight": -5.2316974660765725,
      "success": true,
      "log_likelihood": -6.468788920567489,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": -7.785306073565644,
      "fairness_weight": -8.507319350162199,
      "success": true,
      "log_likelihood": -24.953324936538664,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.5696227243766714,
      "fairness_weight": 9.440945460134987,
      "success": true,
      "log_likelihood": -253.28436022684528,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "self_interest_weight": {
        "r": 0.7443141618698446,
        "p": 7.035103705258214e-19
      },
      "fairness_weight": {
        "r": 0.009132472144773366,
        "p": 0.9281454392779034
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 84.9125760499937,
  "bic_results": {
    "average_bic": 84.9125760499937,
    "individual_bics": [
      57.073636748991724,
      57.07366505881706,
      57.073642032509724,
      57.073636748910985,
      57.073660702631216,
      57.07957678018076,
      7.167037869712219,
      57.07390547366828,
      7.167037869712219,
      57.073636743293356,
      57.07368605169062,
      57.073850241117086,
      57.07371043539492,
      7.167037869712219,
      7.167037869712219,
      7.167037869712219,
      7.167037869712219,
      57.073636733999464,
      25.565477953843924,
      7.167037869712219,
      57.07363852780082,
      57.07363340106997,
      57.07368062987258,
      57.073638569230596,
      57.07366132868032,
      57.074137717583824,
      57.07363674887004,
      57.07367222394377,
      38.25040960852249,
      40.47771808256389,
      7.167037869712219,
      57.07363674899173,
      57.07366043438227,
      1020.3044787914929,
      7.167037869712219,
      57.073665999690874,
      57.073812166055475,
      57.07474996043377,
      57.07362475515438,
      24.59642065401581,
      57.073636773363205,
      57.07368246876092,
      14.755406027037488,
      57.0737579831929,
      57.07368171653059,
      57.07365405448502,
      57.07366294380357,
      57.0736578891061,
      57.07363121333858,
      57.073636613007295,
      57.0700089866866,
      57.07363674895415,
      57.07366479409018,
      51.11083312375488,
      57.073636675365584,
      57.073731375827066,
      1204.5112862318163,
      33.57035552950976,
      57.07387601895863,
      35.63216958484814,
      57.0736363076768,
      57.07366424368195,
      57.073664401278286,
      57.073671829928514,
      57.07363674895415,
      57.07363674887113,
      22.78408319949193,
      32.07257623833124,
      57.07371710440601,
      27.308128762486014,
      57.0736550921024,
      57.07367381915779,
      57.073766670108185,
      57.07364189257797,
      836.0976713511692,
      57.073676506651005,
      21.280456471339715,
      57.07363348523584,
      57.06898106261652,
      57.07363674899173,
      57.073616978790746,
      57.073496960271285,
      57.07363674895415,
      47.66924405838628,
      57.07362757111967,
      57.07366178636139,
      57.07365831575527,
      57.073662012840764,
      20.1046157180472,
      57.073687749989546,
      513.7357583306028
    ],
    "group_enabled": false,
    "group_bics": null,
    "num_parameters": 2,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- self_interest_weight: r = 0.744\n- fairness_weight: r = 0.009",
  "previous_models": [
    "Specification: utility = exp(self_interest_weight * split_self) * exp(fairness_weight * (0.5 * (0.5 - abs(splitperc_self - 0.5)) + 0.5 * (abs(split_self - split_opp) / combined_earning)))\nSummary: A multiplicative utility model combining self-interest and fairness.  Self-interest is represented by the participant's proposed share. Fairness considers both proportional and absolute differences in the proposed shares, weighted equally.  The model uses two learnable parameters, self_interest_weight and fairness_weight, representing the relative importance of each factor. Utility is transformed into a probability of acceptance using a logistic function.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 84.9125760499937\nOverall Accuracy: 0.5824\n\nParameter Recovery:\n- self_interest_weight: r = 0.744\n- fairness_weight: r = 0.009"
  ]
}