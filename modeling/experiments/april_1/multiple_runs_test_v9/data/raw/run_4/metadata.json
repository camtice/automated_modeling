{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "<think>\n\nOkay, let's look at the previous results. The BIC was 55.98, which is higher than the previous run mentioned earlier (33.57), so maybe the model became more complex without enough improvement. The accuracy is 80.7%, which is good, but parameter recovery for alpha and beta dropped to around 0.73 and 0.76, which is lower than before. The previous instructions suggested adding a quadratic penalty, trial-type modulation, and logistic scaling. But the results show that parameter recovery decreased, which might indicate issues with identifiability or collinearity between terms.\n\nHmm, why did parameter recovery drop? Maybe the added complexity (quadratic term, trial-type weights, logistic scaling) introduced more parameters or made the model's terms correlated. For example, the trial-type weights are fixed, but if they interact with beta, it might make beta harder to estimate. Also, the logistic function with a fixed k=5 could be compressing the monetary term too much, reducing the sensitivity of alpha.\n\nThe quadratic term for inequality might be causing scaling issues. Since the squared term grows rapidly, beta's range [0, 0.5] might not be sufficient, leading to underpenalization or overpenalization depending on the data. Also, normalizing the monetary term (split_self/CE) to [0,1] while keeping the inequality term in absolute \u00a3 could create orthogonality problems if the scales are mismatched.\n\nTo improve parameter recovery, perhaps simplify the model by removing some components. For instance, the trial-type weights were fixed, but maybe they aren't necessary. If the weights are based on pretesting, but the actual data doesn't align with those weights, it could introduce bias. Removing trial-type modulation might reduce complexity and improve parameter recovery.\n\nAlternatively, adjust the bounds for alpha and beta. If the previous bounds were too restrictive (alpha [0,15], beta [0,0.5]), the optimization might not find the true values. Maybe expanding beta's range to allow higher values could help, especially with the squared term.\n\nAnother angle: the logistic scaling on the monetary term (\u03c3(\u03b1*(split_self/CE))) might be limiting the model's ability to capture linear effects. If participants are sensitive to absolute monetary values, the logistic function could dampen that. Removing the logistic scaling and reverting to a linear term for monetary utility might help.\n\nAlso, ensuring that the monetary and fairness terms are orthogonal is crucial. If split_self/CE is correlated with (fair_share - split_self)^2, then alpha and beta might be confounded. Perhaps using different normalizations or transformations to decouple them.\n\nLet me think of a revised approach. Keep the quadratic penalty but remove the logistic scaling and trial-type weights. Normalize both terms appropriately to maintain orthogonality. For example:\n\nU = \u03b1*(split_self / CE) - \u03b2*(max(fair_share - split_self, 0)/CE)^2\n\nHere, both terms are normalized by CE, which might reduce scaling issues. The fair_share is 3*token_self, so fair_share - split_self is the absolute unfairness in \u00a3, then divided by CE to make it a proportion. Squaring this term would emphasize larger proportional unfairness.\n\nThis way, both terms are unitless and scaled similarly, which could improve parameter orthogonality. The parameters alpha and beta can have similar ranges, say [0,10], allowing the model to capture their effects without one dominating the other.\n\nAdditionally, to address the BIC, which penalizes model complexity, ensuring that the model remains parsimonious is key. By removing the trial-type modulation and logistic scaling, the model has fewer fixed components, reducing effective complexity.\n\nAnother consideration: introducing a small intercept term to account for baseline acceptance. For example, U = theta + alpha*(split_self/CE) - beta*(unfairness_term). This could capture a general tendency to accept or reject, improving accuracy. However, adding theta would increase the number of parameters, affecting BIC. If the gain in accuracy outweighs the complexity, it might be worth it. But given the previous parameter recovery issues, keeping the model at two parameters might be better.\n\nIn summary, the revised instructions should focus on:\n\n1. Quadratic unfairness term normalized by CE to match the monetary term's scale.\n2. Remove trial-type modulation and logistic scaling to simplify the model.\n3. Adjust parameter bounds to allow more flexibility.\n4. Ensure orthogonality by normalizing both terms similarly.\n\nThis should enhance parameter recovery by reducing collinearity and model complexity while maintaining the nonlinear sensitivity to inequality.\n</think>\n\nEnhance nonlinear sensitivity while improving parameter identifiability through these adjustments:\n\n1. **Dual normalization framework** - Express both utility components as proportions of combined earnings:\n   - Monetary utility: split_self/combined_earning\n   - Quadratic fairness penalty: (max(fair_share - split_self, 0)/combined_earning)^2\n   Where fair_share = 3*token_self (absolute contribution value)\n\n2. **Remove fixed trial-type weights** - Use raw trial_type as categorical moderator:\n   U = \u03b1*(split_self/CE) - \u03b2*(trial_type)*max((FS - SS)/CE, 0)^2\n   With trial_type \u2208 {1,2,3} implemented as continuous multiplier\n\n3. **Expand parameter bounds** to accommodate proportional scaling:\n   - \u03b1: [0, 25] (broader range for normalized monetary sensitivity)\n   - \u03b2: [0, 2] (tighter range for moderated quadratic penalty)\n\n4. **Add intercept term** \u03b8 \u2208 [-5,5] to capture baseline acceptance tendency\n\n5. **Orthogonality enforcement** - Include explicit correlation constraint during fitting:\n   |corr(monetary_term, fairness_term)| < 0.4 in synthetic validation\n\nImplementation target: \n- BIC reduction >15% from previous\n- Parameter recovery r > 0.85 for all parameters\n- Maintain accuracy >82%",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function, and then used to predict binary decisions.\n\n\nInstructions: <think>\n\nOkay, let's look at the previous results. The BIC was 55.98, which is higher than the previous run mentioned earlier (33.57), so maybe the model became more complex without enough improvement. The accuracy is 80.7%, which is good, but parameter recovery for alpha and beta dropped to around 0.73 and 0.76, which is lower than before. The previous instructions suggested adding a quadratic penalty, trial-type modulation, and logistic scaling. But the results show that parameter recovery decreased, which might indicate issues with identifiability or collinearity between terms.\n\nHmm, why did parameter recovery drop? Maybe the added complexity (quadratic term, trial-type weights, logistic scaling) introduced more parameters or made the model's terms correlated. For example, the trial-type weights are fixed, but if they interact with beta, it might make beta harder to estimate. Also, the logistic function with a fixed k=5 could be compressing the monetary term too much, reducing the sensitivity of alpha.\n\nThe quadratic term for inequality might be causing scaling issues. Since the squared term grows rapidly, beta's range [0, 0.5] might not be sufficient, leading to underpenalization or overpenalization depending on the data. Also, normalizing the monetary term (split_self/CE) to [0,1] while keeping the inequality term in absolute \u00a3 could create orthogonality problems if the scales are mismatched.\n\nTo improve parameter recovery, perhaps simplify the model by removing some components. For instance, the trial-type weights were fixed, but maybe they aren't necessary. If the weights are based on pretesting, but the actual data doesn't align with those weights, it could introduce bias. Removing trial-type modulation might reduce complexity and improve parameter recovery.\n\nAlternatively, adjust the bounds for alpha and beta. If the previous bounds were too restrictive (alpha [0,15], beta [0,0.5]), the optimization might not find the true values. Maybe expanding beta's range to allow higher values could help, especially with the squared term.\n\nAnother angle: the logistic scaling on the monetary term (\u03c3(\u03b1*(split_self/CE))) might be limiting the model's ability to capture linear effects. If participants are sensitive to absolute monetary values, the logistic function could dampen that. Removing the logistic scaling and reverting to a linear term for monetary utility might help.\n\nAlso, ensuring that the monetary and fairness terms are orthogonal is crucial. If split_self/CE is correlated with (fair_share - split_self)^2, then alpha and beta might be confounded. Perhaps using different normalizations or transformations to decouple them.\n\nLet me think of a revised approach. Keep the quadratic penalty but remove the logistic scaling and trial-type weights. Normalize both terms appropriately to maintain orthogonality. For example:\n\nU = \u03b1*(split_self / CE) - \u03b2*(max(fair_share - split_self, 0)/CE)^2\n\nHere, both terms are normalized by CE, which might reduce scaling issues. The fair_share is 3*token_self, so fair_share - split_self is the absolute unfairness in \u00a3, then divided by CE to make it a proportion. Squaring this term would emphasize larger proportional unfairness.\n\nThis way, both terms are unitless and scaled similarly, which could improve parameter orthogonality. The parameters alpha and beta can have similar ranges, say [0,10], allowing the model to capture their effects without one dominating the other.\n\nAdditionally, to address the BIC, which penalizes model complexity, ensuring that the model remains parsimonious is key. By removing the trial-type modulation and logistic scaling, the model has fewer fixed components, reducing effective complexity.\n\nAnother consideration: introducing a small intercept term to account for baseline acceptance. For example, U = theta + alpha*(split_self/CE) - beta*(unfairness_term). This could capture a general tendency to accept or reject, improving accuracy. However, adding theta would increase the number of parameters, affecting BIC. If the gain in accuracy outweighs the complexity, it might be worth it. But given the previous parameter recovery issues, keeping the model at two parameters might be better.\n\nIn summary, the revised instructions should focus on:\n\n1. Quadratic unfairness term normalized by CE to match the monetary term's scale.\n2. Remove trial-type modulation and logistic scaling to simplify the model.\n3. Adjust parameter bounds to allow more flexibility.\n4. Ensure orthogonality by normalizing both terms similarly.\n\nThis should enhance parameter recovery by reducing collinearity and model complexity while maintaining the nonlinear sensitivity to inequality.\n</think>\n\nEnhance nonlinear sensitivity while improving parameter identifiability through these adjustments:\n\n1. **Dual normalization framework** - Express both utility components as proportions of combined earnings:\n   - Monetary utility: split_self/combined_earning\n   - Quadratic fairness penalty: (max(fair_share - split_self, 0)/combined_earning)^2\n   Where fair_share = 3*token_self (absolute contribution value)\n\n2. **Remove fixed trial-type weights** - Use raw trial_type as categorical moderator:\n   U = \u03b1*(split_self/CE) - \u03b2*(trial_type)*max((FS - SS)/CE, 0)^2\n   With trial_type \u2208 {1,2,3} implemented as continuous multiplier\n\n3. **Expand parameter bounds** to accommodate proportional scaling:\n   - \u03b1: [0, 25] (broader range for normalized monetary sensitivity)\n   - \u03b2: [0, 2] (tighter range for moderated quadratic penalty)\n\n4. **Add intercept term** \u03b8 \u2208 [-5,5] to capture baseline acceptance tendency\n\n5. **Orthogonality enforcement** - Include explicit correlation constraint during fitting:\n   |corr(monetary_term, fairness_term)| < 0.4 in synthetic validation\n\nImplementation target: \n- BIC reduction >15% from previous\n- Parameter recovery r > 0.85 for all parameters\n- Maintain accuracy >82%\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<think>\nOkay, let's tackle this step by step. The goal is to design a computational model that predicts whether a participant accepts or rejects a proposal, focusing on responder behavior. The model needs to use the given variables appropriately, pass parameter recovery tests, and predict utility such that a negative utility corresponds to less than 50% acceptance probability.\n\nFirst, I need to identify the key variables that influence the responder's decision. The target variable is \"accept\", which is binary. The main factors likely involve the proposed share for the participant (split_self), the combined earnings, and fairness considerations based on each participant's contribution (token_self and token_opp).\n\nThe model should calculate a utility based on these factors. The utility function should combine the monetary gain and fairness considerations. A common approach is to use a logistic function to convert utility into a probability of acceptance.\n\nFor the monetary component, the split_self divided by combined_earning gives the proportion of the total that the participant would receive. This makes sense because the same split percentage can represent different absolute amounts depending on the total, so normalizing by combined_earning accounts for that.\n\nFor fairness, the participant's contribution is token_self, each worth \u00a33, so their fair share would be 3 * token_self. The difference between this fair share and the proposed split_self represents unfairness. To penalize inequality, we can square this difference, making larger disparities more impactful. However, since combined_earning varies, we should normalize this term by dividing by combined_earning squared to keep the scale consistent across trials.\n\nThe utility function could then be the sum of the monetary term weighted by \u03b1 and the fairness term weighted by \u03b2. To ensure the model is identifiable, \u03b1 and \u03b2 need to have finite bounds. The logistic function will convert the utility into a probability, which can then be used to predict acceptance.\n\nParameters \u03b1 and \u03b2 are learnable. Alpha represents sensitivity to monetary gain, so it should be positive. Beta represents sensitivity to unfairness, so it should also be positive. Bounds for \u03b1 and \u03b2 can be set generously, say 0 to 15 and 0 to 0.5, respectively, to cover plausible ranges without being too restrictive.\n\nVariables like token_self, split_self, and combined_earning are from the data. The fair_share is calculated as 3 * token_self. The model doesn't need trial_type or trial_role since we're focusing only on responder behavior, and trial_role can be filtered to 1 (responder).\n\nFinally, the probability of acceptance is the logistic of the utility. If the utility is negative, the probability is less than 0.5, meeting the requirement.\n\nNow, structuring this into the required format with MODEL, VARIABLES, and SUMMARY tags.\n</think>\n\n<MODEL>\nU = \u03b1*(split_self/combined_earning) - \u03b2*((max(3*token_self - split_self, 0)/combined_earning)^2) + \u03b8\nP(accept=1) = 1 / (1 + exp(-U))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the proposal\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"alpha\": {\n      \"description\": \"Monetary sensitivity parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 25,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta\": {\n      \"description\": \"Quadratic inequality aversion parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 2,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"theta\": {\n      \"description\": \"Baseline acceptance tendency\",\n      \"range\": {\n        \"min\": -5,\n        \"max\": 5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share for participant in \u00a3\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total combined earnings in \u00a3\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Participant's token count\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA logistic choice model combining normalized monetary utility and quadratic inequality aversion. The utility function contains three components: 1) proportional monetary gain (split_self/CE), 2) quadratic penalty for offers below fair share (3*token_self), normalized by total earnings, and 3) baseline acceptance tendency. Parameters \u03b1 (monetary sensitivity) and \u03b2 (inequality aversion) are constrained to positive values with expanded bounds, while \u03b8 captures general acceptance bias. The quadratic term specifically penalizes disadvantageous inequality relative to contribution-based fairness norms.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['alpha', 'beta', 'theta']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                U = \u03b1*(split_self/combined_earning) - \u03b2*((max(3*token_self - split_self, 0)/combined_earning)^2) + \u03b8\nP(accept=1) = 1 / (1 + exp(-U))\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the proposal\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"alpha\": {\n      \"description\": \"Monetary sensitivity parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 25,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta\": {\n      \"description\": \"Quadratic inequality aversion parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 2,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"theta\": {\n      \"description\": \"Baseline acceptance tendency\",\n      \"range\": {\n        \"min\": -5,\n        \"max\": 5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share for participant in \\u00a3\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total combined earnings in \\u00a3\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Participant's token count\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, alpha=1, beta=1, theta=0):\n    model_predictions = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0)\n        combined_earning = trial.get(\"combined_earning\", 1)  # Avoid division by zero\n        token_self = trial.get(\"token_self\", 0)\n\n        # Calculate utility\n        monetary_component = alpha * (split_self / combined_earning) if combined_earning != 0 else 0\n        inequality_component = -beta * ((max(3 * token_self - split_self, 0) / combined_earning)**2) if combined_earning != 0 else 0\n        utility = monetary_component + inequality_component + theta\n\n        # Calculate probability of acceptance\n        try:\n            probability_accept = 1 / (1 + math.exp(-utility))\n        except OverflowError:  # Handle potential overflow in math.exp\n            probability_accept = 0.0 if utility < 0 else 1.0  # Assign near 0 or 1\n\n        model_predictions.append(probability_accept)\n    return model_predictions\n```",
      "timestamp": 1743519555.962803
    }
  ],
  "learnable_parameters": {
    "alpha": {
      "description": "Monetary sensitivity parameter",
      "range": {
        "min": 0,
        "max": 25,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta": {
      "description": "Quadratic inequality aversion parameter",
      "range": {
        "min": 0,
        "max": 2,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "theta": {
      "description": "Baseline acceptance tendency",
      "range": {
        "min": -5,
        "max": 5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "U = \u03b1*(split_self/combined_earning) - \u03b2*((max(3*token_self - split_self, 0)/combined_earning)^2) + \u03b8\nP(accept=1) = 1 / (1 + exp(-U))",
  "variable_descriptions": {
    "U": {
      "description": "Utility of accepting the proposal",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "alpha": {
      "description": "Monetary sensitivity parameter",
      "range": {
        "min": 0,
        "max": 25,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta": {
      "description": "Quadratic inequality aversion parameter",
      "range": {
        "min": 0,
        "max": 2,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "theta": {
      "description": "Baseline acceptance tendency",
      "range": {
        "min": -5,
        "max": 5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "split_self": {
      "description": "Proposed share for participant in \u00a3",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "combined_earning": {
      "description": "Total combined earnings in \u00a3",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Participant's token count",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    }
  },
  "model_summary": "A logistic choice model combining normalized monetary utility and quadratic inequality aversion. The utility function contains three components: 1) proportional monetary gain (split_self/CE), 2) quadratic penalty for offers below fair share (3*token_self), normalized by total earnings, and 3) baseline acceptance tendency. Parameters \u03b1 (monetary sensitivity) and \u03b2 (inequality aversion) are constrained to positive values with expanded bounds, while \u03b8 captures general acceptance bias. The quadratic term specifically penalizes disadvantageous inequality relative to contribution-based fairness norms.",
  "target_variable": "accept",
  "full_reasoning": "<think>\nOkay, let's tackle this step by step. The goal is to design a computational model that predicts whether a participant accepts or rejects a proposal, focusing on responder behavior. The model needs to use the given variables appropriately, pass parameter recovery tests, and predict utility such that a negative utility corresponds to less than 50% acceptance probability.\n\nFirst, I need to identify the key variables that influence the responder's decision. The target variable is \"accept\", which is binary. The main factors likely involve the proposed share for the participant (split_self), the combined earnings, and fairness considerations based on each participant's contribution (token_self and token_opp).\n\nThe model should calculate a utility based on these factors. The utility function should combine the monetary gain and fairness considerations. A common approach is to use a logistic function to convert utility into a probability of acceptance.\n\nFor the monetary component, the split_self divided by combined_earning gives the proportion of the total that the participant would receive. This makes sense because the same split percentage can represent different absolute amounts depending on the total, so normalizing by combined_earning accounts for that.\n\nFor fairness, the participant's contribution is token_self, each worth \u00a33, so their fair share would be 3 * token_self. The difference between this fair share and the proposed split_self represents unfairness. To penalize inequality, we can square this difference, making larger disparities more impactful. However, since combined_earning varies, we should normalize this term by dividing by combined_earning squared to keep the scale consistent across trials.\n\nThe utility function could then be the sum of the monetary term weighted by \u03b1 and the fairness term weighted by \u03b2. To ensure the model is identifiable, \u03b1 and \u03b2 need to have finite bounds. The logistic function will convert the utility into a probability, which can then be used to predict acceptance.\n\nParameters \u03b1 and \u03b2 are learnable. Alpha represents sensitivity to monetary gain, so it should be positive. Beta represents sensitivity to unfairness, so it should also be positive. Bounds for \u03b1 and \u03b2 can be set generously, say 0 to 15 and 0 to 0.5, respectively, to cover plausible ranges without being too restrictive.\n\nVariables like token_self, split_self, and combined_earning are from the data. The fair_share is calculated as 3 * token_self. The model doesn't need trial_type or trial_role since we're focusing only on responder behavior, and trial_role can be filtered to 1 (responder).\n\nFinally, the probability of acceptance is the logistic of the utility. If the utility is negative, the probability is less than 0.5, meeting the requirement.\n\nNow, structuring this into the required format with MODEL, VARIABLES, and SUMMARY tags.\n</think>\n\n<MODEL>\nU = \u03b1*(split_self/combined_earning) - \u03b2*((max(3*token_self - split_self, 0)/combined_earning)^2) + \u03b8\nP(accept=1) = 1 / (1 + exp(-U))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the proposal\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"alpha\": {\n      \"description\": \"Monetary sensitivity parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 25,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta\": {\n      \"description\": \"Quadratic inequality aversion parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 2,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"theta\": {\n      \"description\": \"Baseline acceptance tendency\",\n      \"range\": {\n        \"min\": -5,\n        \"max\": 5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share for participant in \u00a3\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total combined earnings in \u00a3\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Participant's token count\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA logistic choice model combining normalized monetary utility and quadratic inequality aversion. The utility function contains three components: 1) proportional monetary gain (split_self/CE), 2) quadratic penalty for offers below fair share (3*token_self), normalized by total earnings, and 3) baseline acceptance tendency. Parameters \u03b1 (monetary sensitivity) and \u03b2 (inequality aversion) are constrained to positive values with expanded bounds, while \u03b8 captures general acceptance bias. The quadratic term specifically penalizes disadvantageous inequality relative to contribution-based fairness norms.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: U = \u03b1*(split_self/combined_earning) - \u03b2*((max(3*token_self - split_self, 0)/combined_earning)^2) + \u03b8\nP(accept=1) = 1 / (1 + exp(-U))\nSummary: A logistic choice model combining normalized monetary utility and quadratic inequality aversion. The utility function contains three components: 1) proportional monetary gain (split_self/CE), 2) quadratic penalty for offers below fair share (3*token_self), normalized by total earnings, and 3) baseline acceptance tendency. Parameters \u03b1 (monetary sensitivity) and \u03b2 (inequality aversion) are constrained to positive values with expanded bounds, while \u03b8 captures general acceptance bias. The quadratic term specifically penalizes disadvantageous inequality relative to contribution-based fairness norms.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, alpha=1, beta=1, theta=0):\n    model_predictions = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0)\n        combined_earning = trial.get(\"combined_earning\", 1)  # Avoid division by zero\n        token_self = trial.get(\"token_self\", 0)\n\n        # Calculate utility\n        monetary_component = alpha * (split_self / combined_earning) if combined_earning != 0 else 0\n        inequality_component = -beta * ((max(3 * token_self - split_self, 0) / combined_earning)**2) if combined_earning != 0 else 0\n        utility = monetary_component + inequality_component + theta\n\n        # Calculate probability of acceptance\n        try:\n            probability_accept = 1 / (1 + math.exp(-utility))\n        except OverflowError:  # Handle potential overflow in math.exp\n            probability_accept = 0.0 if utility < 0 else 1.0  # Assign near 0 or 1\n\n        model_predictions.append(probability_accept)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.6553724053724054,
  "fitting_results": [
    {
      "alpha": 0.0,
      "beta": 2.0,
      "theta": -5.0,
      "success": true,
      "log_likelihood": -25.844889901526876,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 7.585311701043415,
      "beta": 2.0,
      "theta": -5.0,
      "success": true,
      "log_likelihood": -22.77163061440137,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 7.646720299324576,
      "beta": 2.0,
      "theta": -5.0,
      "success": true,
      "log_likelihood": -22.39449955094173,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 6.760630374872863,
      "beta": 2.0,
      "theta": -5.0,
      "success": true,
      "log_likelihood": -24.053759056801823,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 6.188924798244274,
      "beta": 2.0,
      "theta": -5.0,
      "success": true,
      "log_likelihood": -24.2815545449788,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.501364731638143,
      "beta": 2.0,
      "theta": -5.0,
      "success": true,
      "log_likelihood": -17.064208583884557,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 6.633227890606436,
      "beta": 0.0,
      "theta": 5.0,
      "success": true,
      "log_likelihood": -0.001653520658702434,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.587010367534354,
      "beta": 2.0,
      "theta": -5.0,
      "success": true,
      "log_likelihood": -16.747467788124364,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 22.465648439825454,
      "beta": 0.7322389747863092,
      "theta": 4.108225811264145,
      "success": true,
      "log_likelihood": -0.0016378481236603815,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 5.616179247399196,
      "beta": 2.0,
      "theta": -5.0,
      "success": true,
      "log_likelihood": -24.827850978934116,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 7.338106896920121,
      "beta": 2.0,
      "theta": -5.0,
      "success": true,
      "log_likelihood": -23.255447205561584,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 2.0,
      "theta": -5.0,
      "success": true,
      "log_likelihood": -25.778292976575614,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 6.586508678041299,
      "beta": 2.0,
      "theta": -5.0,
      "success": true,
      "log_likelihood": -24.129291993867984,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 4.262108602057664,
      "beta": 1.93523886705105,
      "theta": 4.8807237508977455,
      "success": true,
      "log_likelihood": -0.0016801576488257041,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 20.343962880326146,
      "beta": 0.5074712225939136,
      "theta": 2.5832500743880034,
      "success": true,
      "log_likelihood": -0.0016554067852360393,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 17.464415130994354,
      "beta": 0.0,
      "theta": 3.757212298631085,
      "success": true,
      "log_likelihood": -0.001643284207382387,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 25.0,
      "beta": 0.0,
      "theta": 2.980489857553708,
      "success": true,
      "log_likelihood": -0.0016414327461987343,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 16.930632468041807,
      "beta": 2.0,
      "theta": -5.0,
      "success": true,
      "log_likelihood": -6.784444402148587,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 15.869498414795405,
      "beta": 2.0,
      "theta": -5.0,
      "success": true,
      "log_likelihood": -7.610928827570217,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 20.250608447191834,
      "beta": 0.1917872427856744,
      "theta": 3.6702611588269214,
      "success": true,
      "log_likelihood": -0.0016410731367906036,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 8.1265497079488,
      "beta": 2.0,
      "theta": -5.0,
      "success": true,
      "log_likelihood": -21.637642128450796,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.550098911350698,
      "beta": 2.0,
      "theta": -4.036160073328838,
      "success": true,
      "log_likelihood": -9.976372943014837,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 2.0,
      "theta": -5.0,
      "success": true,
      "log_likelihood": -25.213661112106326,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 8.350446177828655,
      "beta": 2.0,
      "theta": -5.0,
      "success": true,
      "log_likelihood": -21.542159203749417,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 6.717086255564056,
      "beta": 2.0,
      "theta": -5.0,
      "success": true,
      "log_likelihood": -23.63299746921621,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 8.740067672247788,
      "beta": 2.0,
      "theta": -5.0,
      "success": true,
      "log_likelihood": -20.53983745859902,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 9.845399430241033,
      "beta": 2.0,
      "theta": -5.0,
      "success": true,
      "log_likelihood": -18.861726111123755,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 2.0,
      "theta": -5.0,
      "success": true,
      "log_likelihood": -25.37866522889361,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 9.133498408589348,
      "beta": 2.0,
      "theta": -3.598888942293369,
      "success": true,
      "log_likelihood": -9.611689042793339,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 11.012254165311585,
      "beta": 2.0,
      "theta": -5.0,
      "success": true,
      "log_likelihood": -15.29802114915414,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 18.37060855107931,
      "beta": 1.5720371654732463,
      "theta": 4.641904407938997,
      "success": true,
      "log_likelihood": -0.0016383798632476506,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 2.0,
      "theta": -5.0,
      "success": true,
      "log_likelihood": -25.844889901526866,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 6.8151796925410215,
      "beta": 2.0,
      "theta": -5.0,
      "success": true,
      "log_likelihood": -24.068537322038356,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 6.353441079703491,
      "beta": 2.0,
      "theta": -5.0,
      "success": true,
      "log_likelihood": -24.488972079057003,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 15.131737881158918,
      "beta": 0.9200406181038429,
      "theta": 4.530771753021083,
      "success": true,
      "log_likelihood": -0.0016410201690583819,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.785559144630136,
      "beta": 2.0,
      "theta": -5.0,
      "success": true,
      "log_likelihood": -16.623064746402108,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 11.529123160796921,
      "beta": 2.0,
      "theta": -5.0,
      "success": true,
      "log_likelihood": -14.769190496964024,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 7.405009094065757,
      "beta": 2.0,
      "theta": -5.0,
      "success": true,
      "log_likelihood": -22.986628329832033,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 8.995045420292024,
      "beta": 2.0,
      "theta": -5.0,
      "success": true,
      "log_likelihood": -19.67202831017052,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 12.415218678512264,
      "beta": 2.0,
      "theta": -4.131897401457225,
      "success": true,
      "log_likelihood": -7.6204959728771255,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 8.54780598396898,
      "beta": 2.0,
      "theta": -5.0,
      "success": true,
      "log_likelihood": -20.721841835858356,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 2.0,
      "theta": -5.0,
      "success": true,
      "log_likelihood": -25.517692550672916,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.2653170826891426e-05,
      "beta": 0.0,
      "theta": -0.5947909782216233,
      "success": true,
      "log_likelihood": -4.569499625374642,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 9.072956761504203,
      "beta": 2.0,
      "theta": -5.0,
      "success": true,
      "log_likelihood": -20.21581335120369,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 9.833005639633578,
      "beta": 2.0,
      "theta": -5.0,
      "success": true,
      "log_likelihood": -18.496061410486117,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 9.836144970661056,
      "beta": 2.0,
      "theta": -5.0,
      "success": true,
      "log_likelihood": -17.92374236909771,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 8.738611461491644,
      "beta": 2.0,
      "theta": -5.0,
      "success": true,
      "log_likelihood": -20.918278409175848,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 5.320904928261221,
      "beta": 2.0,
      "theta": -5.0,
      "success": true,
      "log_likelihood": -24.98778846195016,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 4.984586774105028,
      "beta": 2.0,
      "theta": -5.0,
      "success": true,
      "log_likelihood": -24.896232923707572,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 7.2267573654079476,
      "beta": 2.0,
      "theta": -5.0,
      "success": true,
      "log_likelihood": -23.230145310540458,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 9.471070563225032,
      "beta": 2.0,
      "theta": -5.0,
      "success": true,
      "log_likelihood": -18.777379769444792,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 2.0,
      "theta": -5.0,
      "success": true,
      "log_likelihood": -25.720167281649235,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 8.391891885674479,
      "beta": 2.0,
      "theta": -5.0,
      "success": true,
      "log_likelihood": -21.499139665781048,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 7.564740383762377,
      "beta": 2.0,
      "theta": -5.0,
      "success": true,
      "log_likelihood": -22.42406667294402,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 2.0,
      "theta": -5.0,
      "success": true,
      "log_likelihood": -25.138696382232315,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 2.0,
      "theta": -5.0,
      "success": true,
      "log_likelihood": -25.248651427894302,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 2.0,
      "theta": -5.0,
      "success": true,
      "log_likelihood": -25.38403842007579,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 0.0,
      "theta": -1.3373622730034327,
      "success": true,
      "log_likelihood": -12.557955443149174,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 2.0,
      "theta": -5.0,
      "success": true,
      "log_likelihood": -25.779277970199846,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 12.226885430389931,
      "beta": 2.0,
      "theta": -5.0,
      "success": true,
      "log_likelihood": -13.167467227490729,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 8.989421256529031,
      "beta": 2.0,
      "theta": -5.0,
      "success": true,
      "log_likelihood": -20.16294579717203,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 7.685157003007319,
      "beta": 2.0,
      "theta": -5.0,
      "success": true,
      "log_likelihood": -22.594117526793834,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 2.0,
      "theta": -5.0,
      "success": true,
      "log_likelihood": -25.84488990152687,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 7.140657321960767,
      "beta": 2.0,
      "theta": -5.0,
      "success": true,
      "log_likelihood": -23.631210544597174,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 2.0,
      "theta": -5.0,
      "success": true,
      "log_likelihood": -25.51700941788593,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 9.553825695173527,
      "beta": 2.0,
      "theta": -5.0,
      "success": true,
      "log_likelihood": -19.39579343828266,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 17.09369466331696,
      "beta": 2.0,
      "theta": -5.0,
      "success": true,
      "log_likelihood": -6.4278758949007395,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 7.793508948526131,
      "beta": 2.0,
      "theta": -3.451177844940122,
      "success": true,
      "log_likelihood": -11.421432325809262,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 9.13341429212642,
      "beta": 2.0,
      "theta": -5.0,
      "success": true,
      "log_likelihood": -20.123727765417318,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0371800762269139,
      "beta": 2.0,
      "theta": -1.297892189625174,
      "success": true,
      "log_likelihood": -9.791603788907821,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 2.0,
      "theta": -5.0,
      "success": true,
      "log_likelihood": -25.77436744728907,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 2.0,
      "theta": -5.0,
      "success": true,
      "log_likelihood": -25.721170718138712,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 8.803231161337118,
      "beta": 2.0,
      "theta": -5.0,
      "success": true,
      "log_likelihood": -20.914238969416534,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 11.799935501783853,
      "beta": 2.0,
      "theta": -5.0,
      "success": true,
      "log_likelihood": -13.96928304248136,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 5.484436165347389,
      "beta": 2.0,
      "theta": -5.0,
      "success": true,
      "log_likelihood": -24.45487267046135,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 11.330665993070003,
      "beta": 2.0,
      "theta": -5.0,
      "success": true,
      "log_likelihood": -15.255136603971403,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 4.513830936540442,
      "beta": 2.0,
      "theta": -1.955427370662732,
      "success": true,
      "log_likelihood": -6.507009480410964,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 2.0,
      "theta": -5.0,
      "success": true,
      "log_likelihood": -25.91918788274273,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 7.584939211205045,
      "beta": 2.0,
      "theta": -5.0,
      "success": true,
      "log_likelihood": -22.367140993012487,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 2.0,
      "theta": -5.0,
      "success": true,
      "log_likelihood": -25.844889901526873,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 6.809506903434876,
      "beta": 2.0,
      "theta": -5.0,
      "success": true,
      "log_likelihood": -23.578339888145734,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 2.561106869377062,
      "beta": 0.0,
      "theta": -1.8975676222269735,
      "success": true,
      "log_likelihood": -10.101622205476328,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 2.0,
      "theta": -5.0,
      "success": true,
      "log_likelihood": -25.77960955447804,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 9.057808634611867,
      "beta": 2.0,
      "theta": -5.0,
      "success": true,
      "log_likelihood": -20.560582791688656,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 5.309372852093674,
      "beta": 2.0,
      "theta": -4.5749103307557135,
      "success": true,
      "log_likelihood": -23.54035788151867,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 2.0,
      "theta": -5.0,
      "success": true,
      "log_likelihood": -25.777961392297417,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 9.794126679316573,
      "beta": 2.0,
      "theta": -5.0,
      "success": true,
      "log_likelihood": -18.165286874051944,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 2.0,
      "theta": -5.0,
      "success": true,
      "log_likelihood": -25.516346588471485,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3333333333333333,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 4.043807821689283,
      "beta": 2.0,
      "theta": -1.7888607724728203,
      "success": true,
      "log_likelihood": -6.242685766028144,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 8.628029910498357,
      "beta": 2.0,
      "theta": -5.0,
      "success": true,
      "log_likelihood": -21.472081942007474,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.094769959082456,
      "beta": 2.0,
      "theta": -5.0,
      "success": true,
      "log_likelihood": -17.85632662987899,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "alpha": {
        "r": 0.43862032695657005,
        "p": 5.005138794371605e-06
      },
      "beta": {
        "r": -0.001508166447370677,
        "p": 0.988118296953645
      },
      "theta": {
        "r": 0.6373545349931519,
        "p": 1.0053703764909886e-12
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 46.81052867665059,
  "bic_results": {
    "average_bic": 46.81052867665059,
    "individual_bics": [
      62.44033661842208,
      56.293818044171076,
      55.53955591725179,
      58.85807492897197,
      59.313665905325934,
      44.87897398313744,
      10.753863856685735,
      44.24549239161706,
      10.753832511615652,
      60.40625877323656,
      57.2614512264915,
      62.307142768519554,
      59.0091408031043,
      10.753917130665982,
      10.753867628938803,
      10.753843383783096,
      10.753839680860729,
      24.319445619665505,
      25.972414470508767,
      10.753838961641911,
      54.02584107226993,
      30.703302701398005,
      61.177879039580986,
      53.83487522286717,
      58.016551753800755,
      51.830231732566375,
      48.47400903761584,
      61.507887273155546,
      29.97393490095501,
      41.34659911367661,
      10.753833575094825,
      62.440336618422066,
      58.887631459445046,
      59.72850097348234,
      10.753838855706448,
      43.99668630817254,
      40.28893780929638,
      56.7238134750324,
      50.09461343570938,
      25.99154876112258,
      52.19424048708504,
      61.785941916714165,
      19.889556066117613,
      51.18218351777571,
      47.74267963634057,
      46.598041553563746,
      52.58711363372002,
      60.72613373926865,
      60.54302266278347,
      57.21084743644924,
      48.30531635425791,
      62.190891378666805,
      53.74883614693043,
      55.59869016125637,
      61.02794957983296,
      61.24785967115693,
      61.518633655519906,
      35.86646770166668,
      62.30911275576803,
      37.08549127034979,
      51.076448409712384,
      55.938791868956,
      62.440336618422066,
      58.012977904562675,
      61.78457565114019,
      49.542143691933646,
      23.606308605169808,
      33.593421466986854,
      50.99801234620297,
      30.333764393183973,
      62.29929170994647,
      62.19289825164576,
      52.5790347542014,
      38.68912290033105,
      59.660302156291024,
      41.26083002331114,
      23.76457577619026,
      62.58893258085379,
      55.48483880139331,
      62.44033661842208,
      57.907236591659796,
      30.953801226320987,
      62.30977592432441,
      51.871722398745646,
      57.831272578405674,
      62.30647959996317,
      47.081130563472215,
      61.7832499923113,
      23.23592834742462,
      53.69472069938328,
      46.46321007512631
    ],
    "group_enabled": false,
    "group_bics": null,
    "num_parameters": 3,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- alpha: r = 0.439\n- beta: r = -0.002\n- theta: r = 0.637",
  "previous_models": [
    "Specification: U = \u03b1*(split_self/combined_earning) - \u03b2*((max(3*token_self - split_self, 0)/combined_earning)^2) + \u03b8\nP(accept=1) = 1 / (1 + exp(-U))\nSummary: A logistic choice model combining normalized monetary utility and quadratic inequality aversion. The utility function contains three components: 1) proportional monetary gain (split_self/CE), 2) quadratic penalty for offers below fair share (3*token_self), normalized by total earnings, and 3) baseline acceptance tendency. Parameters \u03b1 (monetary sensitivity) and \u03b2 (inequality aversion) are constrained to positive values with expanded bounds, while \u03b8 captures general acceptance bias. The quadratic term specifically penalizes disadvantageous inequality relative to contribution-based fairness norms.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 46.81052867665059\nOverall Accuracy: 0.6554\n\nParameter Recovery:\n- alpha: r = 0.439\n- beta: r = -0.002\n- theta: r = 0.637"
  ]
}