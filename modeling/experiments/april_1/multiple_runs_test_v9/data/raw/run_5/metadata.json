{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "<think>\n\nOkay, let's analyze the previous run results. The BIC improved to 46.81 from 55.98, which is a good sign, but the accuracy dropped to 65.5%, which is concerning. The parameter recovery for alpha and beta is really low, especially beta at -0.002, which suggests that the model isn't capturing the true parameters effectively. Theta's recovery is better but still moderate.\n\nLooking at the previous instructions, the model included trial_type as a multiplier for beta, but the parameter recovery for beta is near zero. This might indicate that the trial_type interaction isn't working as intended. Maybe trial_type isn't a good moderator for the fairness term, leading to collinearity or overcomplication. Also, the orthogonality constraint might not have been properly enforced, causing parameters to be unidentifiable.\n\nThe accuracy drop suggests the model isn't fitting the data well. The dual normalization might not be capturing the right aspects. The intercept term theta's recovery is okay, but alpha and beta are problematic. The bounds for alpha (0-25) and beta (0-2) might be too wide, making optimization difficult. Alternatively, the quadratic term's scaling could be off, leading to instability.\n\nTo address this, perhaps simplify the model by removing the trial_type interaction. Instead of using trial_type as a multiplier, consider using it as a categorical variable with separate beta weights for each trial type. This would allow the model to capture different fairness sensitivities per trial type, improving identifiability. However, this adds more parameters, which might affect BIC. Alternatively, remove trial_type entirely if it's not a significant predictor.\n\nAnother angle: the quadratic term might not be the right functional form. Maybe a linear term for unfairness would be more stable. Or use a different normalization, like dividing by fair_share instead of combined_earning to make the unfairness term relative to the participant's contribution.\n\nAlso, check the orthogonality between monetary and fairness terms. If they're still correlated, the model can't disentangle alpha and beta. Maybe include a centering step or standardize the terms before fitting.\n\nAdjusting the parameter bounds: if beta's recovery is near zero, maybe the upper bound is too high, and the optimization isn't finding the right value. Narrowing beta's range based on prior knowledge or pilot data could help. Similarly, for alpha, if the values are too large, the logistic function might saturate, leading to poor gradient signals.\n\nIncluding a softmax temperature parameter could help, but that adds complexity. Alternatively, use a probit link instead of logistic for better parameter recovery in certain cases.\n\nAnother thought: the intercept theta might be absorbing variance that should be explained by alpha and beta. Maybe removing theta and letting the other parameters account for baseline tendencies could help, but that risks lower accuracy.\n\nIn summary, the new instructions should focus on:\n\n1. Simplify the model by removing trial_type interaction to reduce collinearity.\n2. Adjust normalization of fairness term (e.g., relative to fair_share).\n3. Narrow parameter bounds based on recovery issues.\n4. Enforce orthogonality through preprocessing or model structure.\n5. Consider alternative functional forms for the fairness term if quadratic isn't working.\n</think>\n\nFocus on stabilizing parameter estimation through these key changes:\n\n1. **Simplified fairness calculation** - Replace quadratic penalty with linear disadvantage sensitivity:\n   `fairness_term = max((3*token_self - split_self)/combined_earning, 0)`\n   \n2. **Trial-type stratification** - Implement separate \u03b2 parameters per trial_type category:\n   ```python\n   \u03b2 = \u03b21*(trial_type==1) + \u03b22*(trial_type==2) + \u03b23*(trial_type==3)\n   ```\n   With \u03b2 bounds [0,1.5] for each\n\n3. **Monetary utility scaling** - Apply logistic compression to prevent saturation:\n   `monetary_term = \u03b1 * (2/(1 + exp(-split_self/combined_earning)) - 1)`\n\n4. **Tighter parameterization**:\n   - \u03b1: [0, 10] (reduced upper bound)\n   - \u03b8: [-3, 3] (narrower baseline range)\n   - Remove combined_earning denominator from fairness term\n\n5. **Orthogonality pre-processing** - Require z-score normalization of monetary/fairness components before parameter estimation\n\nImplementation targets:\n- \u03b2 parameter recovery >0.8 across all trial types\n- BIC <40 through reduced complexity\n- Accuracy >75% with stabilized gradients",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function, and then used to predict binary decisions.\n\n\nInstructions: <think>\n\nOkay, let's analyze the previous run results. The BIC improved to 46.81 from 55.98, which is a good sign, but the accuracy dropped to 65.5%, which is concerning. The parameter recovery for alpha and beta is really low, especially beta at -0.002, which suggests that the model isn't capturing the true parameters effectively. Theta's recovery is better but still moderate.\n\nLooking at the previous instructions, the model included trial_type as a multiplier for beta, but the parameter recovery for beta is near zero. This might indicate that the trial_type interaction isn't working as intended. Maybe trial_type isn't a good moderator for the fairness term, leading to collinearity or overcomplication. Also, the orthogonality constraint might not have been properly enforced, causing parameters to be unidentifiable.\n\nThe accuracy drop suggests the model isn't fitting the data well. The dual normalization might not be capturing the right aspects. The intercept term theta's recovery is okay, but alpha and beta are problematic. The bounds for alpha (0-25) and beta (0-2) might be too wide, making optimization difficult. Alternatively, the quadratic term's scaling could be off, leading to instability.\n\nTo address this, perhaps simplify the model by removing the trial_type interaction. Instead of using trial_type as a multiplier, consider using it as a categorical variable with separate beta weights for each trial type. This would allow the model to capture different fairness sensitivities per trial type, improving identifiability. However, this adds more parameters, which might affect BIC. Alternatively, remove trial_type entirely if it's not a significant predictor.\n\nAnother angle: the quadratic term might not be the right functional form. Maybe a linear term for unfairness would be more stable. Or use a different normalization, like dividing by fair_share instead of combined_earning to make the unfairness term relative to the participant's contribution.\n\nAlso, check the orthogonality between monetary and fairness terms. If they're still correlated, the model can't disentangle alpha and beta. Maybe include a centering step or standardize the terms before fitting.\n\nAdjusting the parameter bounds: if beta's recovery is near zero, maybe the upper bound is too high, and the optimization isn't finding the right value. Narrowing beta's range based on prior knowledge or pilot data could help. Similarly, for alpha, if the values are too large, the logistic function might saturate, leading to poor gradient signals.\n\nIncluding a softmax temperature parameter could help, but that adds complexity. Alternatively, use a probit link instead of logistic for better parameter recovery in certain cases.\n\nAnother thought: the intercept theta might be absorbing variance that should be explained by alpha and beta. Maybe removing theta and letting the other parameters account for baseline tendencies could help, but that risks lower accuracy.\n\nIn summary, the new instructions should focus on:\n\n1. Simplify the model by removing trial_type interaction to reduce collinearity.\n2. Adjust normalization of fairness term (e.g., relative to fair_share).\n3. Narrow parameter bounds based on recovery issues.\n4. Enforce orthogonality through preprocessing or model structure.\n5. Consider alternative functional forms for the fairness term if quadratic isn't working.\n</think>\n\nFocus on stabilizing parameter estimation through these key changes:\n\n1. **Simplified fairness calculation** - Replace quadratic penalty with linear disadvantage sensitivity:\n   `fairness_term = max((3*token_self - split_self)/combined_earning, 0)`\n   \n2. **Trial-type stratification** - Implement separate \u03b2 parameters per trial_type category:\n   ```python\n   \u03b2 = \u03b21*(trial_type==1) + \u03b22*(trial_type==2) + \u03b23*(trial_type==3)\n   ```\n   With \u03b2 bounds [0,1.5] for each\n\n3. **Monetary utility scaling** - Apply logistic compression to prevent saturation:\n   `monetary_term = \u03b1 * (2/(1 + exp(-split_self/combined_earning)) - 1)`\n\n4. **Tighter parameterization**:\n   - \u03b1: [0, 10] (reduced upper bound)\n   - \u03b8: [-3, 3] (narrower baseline range)\n   - Remove combined_earning denominator from fairness term\n\n5. **Orthogonality pre-processing** - Require z-score normalization of monetary/fairness components before parameter estimation\n\nImplementation targets:\n- \u03b2 parameter recovery >0.8 across all trial types\n- BIC <40 through reduced complexity\n- Accuracy >75% with stabilized gradients\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<think>\nAlright, let's tackle this step by step. The goal is to design a computational model that predicts whether a participant accepts or rejects a proposal in the responder role. The model needs to focus on utility calculation, parameter recovery, and use the provided dataset variables appropriately.\n\nFirst, I need to identify which variables are relevant for the responder's decision. The target variable is \"accept\", so the model should predict this based on the proposal's fairness and the participant's monetary gain.\n\nKey variables from the dataset:\n- token_self and token_opp: These determine each participant's contribution to the combined earnings. Since each token is \u00a33, the total combined_earning is 3*(token_self + token_opp).\n- split_self: The proposed amount for the participant in \u00a3. This directly affects their monetary utility.\n- trial_type: Indicates whether the split is equal, opponent more, or participant more. This might influence fairness perceptions.\n\nThe model should calculate the utility of accepting the offer, which combines monetary gain and fairness considerations. \n\nFor monetary utility, a straightforward approach is to use the split_self amount. However, since the combined_earning varies, it's better to normalize this. Maybe by using split_self / combined_earning to represent the proportion the participant receives.\n\nFor fairness, the fair share would be based on the participant's contribution. The fair_share = (token_self / (token_self + token_opp)) * combined_earning. The difference between the proposed split_self and the fair_share could indicate unfairness. A quadratic term (as in Fehr-Schmidt models) might capture aversion to inequity.\n\nParameters needed:\n- \u03b1 (alpha): Sensitivity to monetary gains. Bounded between 0 and a reasonable upper limit, say 10.\n- \u03b2 (beta): Sensitivity to fairness. Also bounded, maybe 0 to 5.\n- \u03b8 (theta): Baseline acceptance tendency. Could range between -5 and 5.\n\nThe utility function could be:\nUtility = \u03b1*(split_self) + \u03b2*(fair_share - split_self)^2 + \u03b8\n\nBut since combined_earning varies, normalizing the terms might help. Let's adjust the fairness term to be proportional to the total. Also, using split_self / combined_earning and fair_share / combined_earning could make the terms unitless.\n\nWait, fair_share is (token_self / total_tokens) * combined_earning. So fair_share_ratio = token_self / (token_self + token_opp). The proposed_ratio is split_self / combined_earning. The difference between these ratios could be the fairness component.\n\nSo the fairness term becomes (fair_share_ratio - proposed_ratio)^2. Multiplying by \u03b2 gives the disutility from unfairness.\n\nThe monetary term could be \u03b1 * proposed_ratio, since that's the proportion the participant gets.\n\nAdding \u03b8 as an intercept. The utility would then be:\n\nU = \u03b1*(split_self / combined_earning) + \u03b2*( (token_self/(token_self + token_opp)) - (split_self/combined_earning) )^2 + \u03b8\n\nBut wait, split_self + split_opp = combined_earning, so split_self/combined_earning is the participant's share percentage. Similarly, token_self/(total tokens) is their contribution percentage. The difference between these percentages is the fairness measure.\n\nThis setup ensures that both terms are unitless and scaled similarly, which helps in parameter estimation.\n\nThe probability of accepting is then a logistic function of U: P(accept) = 1 / (1 + exp(-U))\n\nThis model uses split_self, token_self, token_opp, and combined_earning (which is derivable from tokens). Trial_type might influence \u03b2, but to keep it simple, maybe not include it unless necessary for recovery.\n\nParameters:\n- \u03b1: Monetary sensitivity, bounded [0, 10]\n- \u03b2: Fairness sensitivity, bounded [0, 5]\n- \u03b8: Baseline, [-5, 5]\n\nThis should allow the model to capture the trade-off between monetary gain and fairness. The quadratic term penalizes deviations from the fair share, with \u03b2 controlling how much that matters. Alpha scales the monetary gain's impact.\n\nTesting parameter recovery: If the synthetic data is generated with known \u03b1, \u03b2, \u03b8, fitting should recover them. The bounds are generous but finite.\n\nVariables in the model:\n- split_self (data)\n- token_self (data)\n- token_opp (data)\n- combined_earning (calculated as 3*(token_self + token_opp))\n- fair_share_ratio (token_self / (token_self + token_opp))\n- proposed_ratio (split_self / combined_earning)\n\nAll these are derived from the dataset variables. The model doesn't need trial_type if the fairness term already captures the contribution-based fairness. However, trial_type might indicate different contexts, but including it could complicate the model. Since the task says to use variables appropriately but not necessarily all, it's safer to exclude trial_type unless it's critical.\n\nThus, the final model is:\n\nU = \u03b1*(split_self / combined_earning) + \u03b2*( (token_self/(token_self + token_opp)) - (split_self/combined_earning) )^2 + \u03b8\n\nConverted to mathematical notation:\n\nU = \\alpha \\cdot \\frac{\\text{split\\_self}}{\\text{combined\\_earning}} + \\beta \\cdot \\left( \\frac{\\text{token\\_self}}{\\text{token\\_self} + \\text{token\\_opp}} - \\frac{\\text{split\\_self}}{\\text{combined\\_earning}} \\right)^2 + \\theta\n\nThen, the probability of acceptance is the logistic of U.\n\nThis model uses only the necessary variables, has learnable parameters with finite bounds, and the utility can be negative, affecting the probability accordingly.\n</think>\n\n<MODEL>\nU = \u03b1 * (split_self / combined_earning) + \u03b2 * ( (token_self / (token_self + token_opp)) - (split_self / combined_earning) )^2 + \u03b8\n</MODEL>\n\n<target_variable>accept</target_variable>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the proposal\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"alpha\": {\n      \"description\": \"Monetary sensitivity parameter - weight on proportional self-gain\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta\": {\n      \"description\": \"Fairness sensitivity parameter - weight on quadratic equity deviation\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"theta\": {\n      \"description\": \"Baseline acceptance tendency intercept\",\n      \"range\": {\n        \"min\": -5,\n        \"max\": 5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share for participant in \u00a3\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total combined earnings (\u00a33 per token)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Participant's token contribution\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Opponent's token contribution\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<SUMMARY>\nDual-component utility model combining proportional monetary gain and quadratic fairness deviation. Monetary utility is weighted by \u03b1, fairness deviation (from contribution-based equity) by \u03b2, with \u03b8 capturing baseline acceptance tendency. Logistic transform converts utility to acceptance probability.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['alpha', 'beta', 'theta']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                U = \u03b1 * (split_self / combined_earning) + \u03b2 * ( (token_self / (token_self + token_opp)) - (split_self / combined_earning) )^2 + \u03b8\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the proposal\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"alpha\": {\n      \"description\": \"Monetary sensitivity parameter - weight on proportional self-gain\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta\": {\n      \"description\": \"Fairness sensitivity parameter - weight on quadratic equity deviation\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"theta\": {\n      \"description\": \"Baseline acceptance tendency intercept\",\n      \"range\": {\n        \"min\": -5,\n        \"max\": 5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share for participant in \\u00a3\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total combined earnings (\\u00a33 per token)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Participant's token contribution\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Opponent's token contribution\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, alpha=1, beta=1, theta=0):\n    model_predictions = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0)\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n\n        # Avoid division by zero\n        if (token_self + token_opp) == 0 or combined_earning == 0:\n            utility = theta  # If no tokens or earnings, default to baseline\n        else:\n            utility = alpha * (split_self / combined_earning) + beta * ((token_self / (token_self + token_opp)) - (split_self / combined_earning))**2 + theta\n        model_predictions.append(utility)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '[{\"ID\": 0, \"group\": \"group1\", \"trial_number\": 1, \"trial_type\": 1, \"trial_role\": 0, \"token_opp\": 5, \"token_self\": 5, \"combined_earning\": 30, \"split_opp\": 15.0, \"split_self\": 15.0, \"splitperc_opp\": 50, \"splitperc_self\": 50, \"accept\": 1.0, \"accepted_amount\": 15.0, \"accepted_perc\": 50.0, \"proposed_perc\": 50.0, \"proposed_amount\": 15.0}, {\"ID\": 1, \"group\": \"group1\", \"trial_number\": 2, \"trial_type\": 1, \"trial_role\": 0, \"token_opp\": 5, \"token_self\": 5, \"combined_earning\": 30, \"split_opp\": 15.0, \"split_self\": 15.0, \"splitperc_opp\": 50, \"splitperc_self\": 50, \"accept\": 1.0, \"accepted_amount\": 15.0, \"accepted_perc\": 50.0, \"proposed_perc\": 50.0, \"proposed_amount\": 15.0}]'\n\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data, alpha=1, beta=1, theta=0)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n```",
      "timestamp": 1743519623.591307
    }
  ],
  "learnable_parameters": {
    "alpha": {
      "description": "Monetary sensitivity parameter - weight on proportional self-gain",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta": {
      "description": "Fairness sensitivity parameter - weight on quadratic equity deviation",
      "range": {
        "min": 0,
        "max": 5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "theta": {
      "description": "Baseline acceptance tendency intercept",
      "range": {
        "min": -5,
        "max": 5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "U = \u03b1 * (split_self / combined_earning) + \u03b2 * ( (token_self / (token_self + token_opp)) - (split_self / combined_earning) )^2 + \u03b8",
  "variable_descriptions": {
    "U": {
      "description": "Utility of accepting the proposal",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "alpha": {
      "description": "Monetary sensitivity parameter - weight on proportional self-gain",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta": {
      "description": "Fairness sensitivity parameter - weight on quadratic equity deviation",
      "range": {
        "min": 0,
        "max": 5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "theta": {
      "description": "Baseline acceptance tendency intercept",
      "range": {
        "min": -5,
        "max": 5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "split_self": {
      "description": "Proposed share for participant in \u00a3",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "combined_earning": {
      "description": "Total combined earnings (\u00a33 per token)",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Participant's token contribution",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Opponent's token contribution",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    }
  },
  "model_summary": "Dual-component utility model combining proportional monetary gain and quadratic fairness deviation. Monetary utility is weighted by \u03b1, fairness deviation (from contribution-based equity) by \u03b2, with \u03b8 capturing baseline acceptance tendency. Logistic transform converts utility to acceptance probability.",
  "target_variable": "accept",
  "full_reasoning": "<think>\nAlright, let's tackle this step by step. The goal is to design a computational model that predicts whether a participant accepts or rejects a proposal in the responder role. The model needs to focus on utility calculation, parameter recovery, and use the provided dataset variables appropriately.\n\nFirst, I need to identify which variables are relevant for the responder's decision. The target variable is \"accept\", so the model should predict this based on the proposal's fairness and the participant's monetary gain.\n\nKey variables from the dataset:\n- token_self and token_opp: These determine each participant's contribution to the combined earnings. Since each token is \u00a33, the total combined_earning is 3*(token_self + token_opp).\n- split_self: The proposed amount for the participant in \u00a3. This directly affects their monetary utility.\n- trial_type: Indicates whether the split is equal, opponent more, or participant more. This might influence fairness perceptions.\n\nThe model should calculate the utility of accepting the offer, which combines monetary gain and fairness considerations. \n\nFor monetary utility, a straightforward approach is to use the split_self amount. However, since the combined_earning varies, it's better to normalize this. Maybe by using split_self / combined_earning to represent the proportion the participant receives.\n\nFor fairness, the fair share would be based on the participant's contribution. The fair_share = (token_self / (token_self + token_opp)) * combined_earning. The difference between the proposed split_self and the fair_share could indicate unfairness. A quadratic term (as in Fehr-Schmidt models) might capture aversion to inequity.\n\nParameters needed:\n- \u03b1 (alpha): Sensitivity to monetary gains. Bounded between 0 and a reasonable upper limit, say 10.\n- \u03b2 (beta): Sensitivity to fairness. Also bounded, maybe 0 to 5.\n- \u03b8 (theta): Baseline acceptance tendency. Could range between -5 and 5.\n\nThe utility function could be:\nUtility = \u03b1*(split_self) + \u03b2*(fair_share - split_self)^2 + \u03b8\n\nBut since combined_earning varies, normalizing the terms might help. Let's adjust the fairness term to be proportional to the total. Also, using split_self / combined_earning and fair_share / combined_earning could make the terms unitless.\n\nWait, fair_share is (token_self / total_tokens) * combined_earning. So fair_share_ratio = token_self / (token_self + token_opp). The proposed_ratio is split_self / combined_earning. The difference between these ratios could be the fairness component.\n\nSo the fairness term becomes (fair_share_ratio - proposed_ratio)^2. Multiplying by \u03b2 gives the disutility from unfairness.\n\nThe monetary term could be \u03b1 * proposed_ratio, since that's the proportion the participant gets.\n\nAdding \u03b8 as an intercept. The utility would then be:\n\nU = \u03b1*(split_self / combined_earning) + \u03b2*( (token_self/(token_self + token_opp)) - (split_self/combined_earning) )^2 + \u03b8\n\nBut wait, split_self + split_opp = combined_earning, so split_self/combined_earning is the participant's share percentage. Similarly, token_self/(total tokens) is their contribution percentage. The difference between these percentages is the fairness measure.\n\nThis setup ensures that both terms are unitless and scaled similarly, which helps in parameter estimation.\n\nThe probability of accepting is then a logistic function of U: P(accept) = 1 / (1 + exp(-U))\n\nThis model uses split_self, token_self, token_opp, and combined_earning (which is derivable from tokens). Trial_type might influence \u03b2, but to keep it simple, maybe not include it unless necessary for recovery.\n\nParameters:\n- \u03b1: Monetary sensitivity, bounded [0, 10]\n- \u03b2: Fairness sensitivity, bounded [0, 5]\n- \u03b8: Baseline, [-5, 5]\n\nThis should allow the model to capture the trade-off between monetary gain and fairness. The quadratic term penalizes deviations from the fair share, with \u03b2 controlling how much that matters. Alpha scales the monetary gain's impact.\n\nTesting parameter recovery: If the synthetic data is generated with known \u03b1, \u03b2, \u03b8, fitting should recover them. The bounds are generous but finite.\n\nVariables in the model:\n- split_self (data)\n- token_self (data)\n- token_opp (data)\n- combined_earning (calculated as 3*(token_self + token_opp))\n- fair_share_ratio (token_self / (token_self + token_opp))\n- proposed_ratio (split_self / combined_earning)\n\nAll these are derived from the dataset variables. The model doesn't need trial_type if the fairness term already captures the contribution-based fairness. However, trial_type might indicate different contexts, but including it could complicate the model. Since the task says to use variables appropriately but not necessarily all, it's safer to exclude trial_type unless it's critical.\n\nThus, the final model is:\n\nU = \u03b1*(split_self / combined_earning) + \u03b2*( (token_self/(token_self + token_opp)) - (split_self/combined_earning) )^2 + \u03b8\n\nConverted to mathematical notation:\n\nU = \\alpha \\cdot \\frac{\\text{split\\_self}}{\\text{combined\\_earning}} + \\beta \\cdot \\left( \\frac{\\text{token\\_self}}{\\text{token\\_self} + \\text{token\\_opp}} - \\frac{\\text{split\\_self}}{\\text{combined\\_earning}} \\right)^2 + \\theta\n\nThen, the probability of acceptance is the logistic of U.\n\nThis model uses only the necessary variables, has learnable parameters with finite bounds, and the utility can be negative, affecting the probability accordingly.\n</think>\n\n<MODEL>\nU = \u03b1 * (split_self / combined_earning) + \u03b2 * ( (token_self / (token_self + token_opp)) - (split_self / combined_earning) )^2 + \u03b8\n</MODEL>\n\n<target_variable>accept</target_variable>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the proposal\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"alpha\": {\n      \"description\": \"Monetary sensitivity parameter - weight on proportional self-gain\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta\": {\n      \"description\": \"Fairness sensitivity parameter - weight on quadratic equity deviation\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"theta\": {\n      \"description\": \"Baseline acceptance tendency intercept\",\n      \"range\": {\n        \"min\": -5,\n        \"max\": 5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share for participant in \u00a3\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total combined earnings (\u00a33 per token)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Participant's token contribution\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Opponent's token contribution\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<SUMMARY>\nDual-component utility model combining proportional monetary gain and quadratic fairness deviation. Monetary utility is weighted by \u03b1, fairness deviation (from contribution-based equity) by \u03b2, with \u03b8 capturing baseline acceptance tendency. Logistic transform converts utility to acceptance probability.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: U = \u03b1 * (split_self / combined_earning) + \u03b2 * ( (token_self / (token_self + token_opp)) - (split_self / combined_earning) )^2 + \u03b8\nSummary: Dual-component utility model combining proportional monetary gain and quadratic fairness deviation. Monetary utility is weighted by \u03b1, fairness deviation (from contribution-based equity) by \u03b2, with \u03b8 capturing baseline acceptance tendency. Logistic transform converts utility to acceptance probability.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, alpha=1, beta=1, theta=0):\n    model_predictions = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0)\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n\n        # Avoid division by zero\n        if (token_self + token_opp) == 0 or combined_earning == 0:\n            utility = theta  # If no tokens or earnings, default to baseline\n        else:\n            utility = alpha * (split_self / combined_earning) + beta * ((token_self / (token_self + token_opp)) - (split_self / combined_earning))**2 + theta\n        model_predictions.append(utility)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.7817460317460317,
  "fitting_results": [
    {
      "alpha": 9.78747077281784,
      "beta": 3.3719049163226407,
      "theta": -4.529377676841603,
      "success": true,
      "log_likelihood": -0.088827245952191,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.5531893214672292,
      "beta": 0.0,
      "theta": -0.4659570506611622,
      "success": true,
      "log_likelihood": -18.25498776714253,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.4207260117366065,
      "beta": 0.0,
      "theta": -0.4104427727211451,
      "success": true,
      "log_likelihood": -18.917211362910663,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 2.4645067816548796,
      "beta": 0.7445283025695798,
      "theta": -4.796099854523861,
      "success": true,
      "log_likelihood": -345.38775025251886,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0967066357168147,
      "beta": 0.0,
      "theta": -0.357364831245753,
      "success": true,
      "log_likelihood": -20.569956408677115,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 2.6395812415880258,
      "beta": 0.0,
      "theta": -0.6731822743532682,
      "success": true,
      "log_likelihood": -12.831623820831055,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 5.0,
      "theta": 5.0,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 5.472928416425598,
      "beta": 0.057814351903900864,
      "theta": -1.2770364284335023,
      "success": true,
      "log_likelihood": -19.68645166380715,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 5.0,
      "theta": 5.0,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.5371385436139466,
      "beta": 0.0,
      "theta": -0.527620823933868,
      "success": true,
      "log_likelihood": -17.703346121494583,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 2.185111584776102,
      "beta": 0.0,
      "theta": -0.6962809120175202,
      "success": true,
      "log_likelihood": -15.132029943737358,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 3.5586685132994824,
      "beta": 0.0,
      "theta": -1.574713974448219,
      "success": true,
      "log_likelihood": -5.115342881594326,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 2.0189031164238926,
      "beta": 0.0,
      "theta": -0.6638183874502506,
      "success": true,
      "log_likelihood": -15.685647472105682,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 1.7605780776931494,
      "theta": 5.0,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 5.0,
      "theta": 5.0,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 0.8116728291488691,
      "theta": 5.0,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 5.0,
      "theta": 5.0,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 5.0,
      "theta": 5.0,
      "success": true,
      "log_likelihood": -115.12925464660226,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 5.0,
      "theta": 5.0,
      "success": true,
      "log_likelihood": -92.10340371656177,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 3.0965478802291493,
      "beta": 2.5051868171822873,
      "theta": 3.8027877758478272,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.4423382621054472,
      "beta": 0.0,
      "theta": -0.4008370197640119,
      "success": true,
      "log_likelihood": -18.679407034148486,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 2.151976799658273,
      "beta": 0.0,
      "theta": -0.33315901761143446,
      "success": true,
      "log_likelihood": -9.008948238930918,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 3.948217781343998,
      "beta": 0.2394505238039742,
      "theta": -1.3614706701924304,
      "success": true,
      "log_likelihood": -9.658848067273741,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 2.135909543695227,
      "beta": 0.0,
      "theta": -0.6207580763753674,
      "success": true,
      "log_likelihood": -15.434919159384611,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.9862937211487904,
      "beta": 0.0,
      "theta": -0.29588748156556904,
      "success": true,
      "log_likelihood": -21.36798617913692,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.6325453983389178,
      "beta": 0.0,
      "theta": -0.4385957258434917,
      "success": true,
      "log_likelihood": -17.500424567707284,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 3.8424914028580917,
      "beta": 3.2770646363923026,
      "theta": 4.573948668674081,
      "success": true,
      "log_likelihood": -368.4136148770475,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 0.0,
      "theta": -5.0,
      "success": true,
      "log_likelihood": -230.25850929678552,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.2374251500515623,
      "beta": 0.0,
      "theta": -0.10642475704481498,
      "success": true,
      "log_likelihood": -10.298881192278222,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0551476844325685,
      "beta": 0.0,
      "theta": -0.16201048747289268,
      "success": true,
      "log_likelihood": -16.17171665953359,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 5.0,
      "theta": 5.0,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 0.0,
      "theta": -4.535237618211731,
      "success": true,
      "log_likelihood": -0.05716311444658877,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 3.3341363948417198,
      "beta": 1.3429445645589744,
      "theta": -1.1561044557248215,
      "success": true,
      "log_likelihood": -12.60762229165973,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 2.41625777959485,
      "beta": 0.0,
      "theta": -0.8131813804159808,
      "success": true,
      "log_likelihood": -13.860888876273432,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 7.378914601556808,
      "beta": 2.967729486610237,
      "theta": 2.819562068382284,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 3.8469638122346104,
      "beta": 0.0,
      "theta": -0.9905617686918566,
      "success": true,
      "log_likelihood": -9.67226975809622,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 2.9713735719273955,
      "beta": 0.0,
      "theta": -0.7062346919173602,
      "success": true,
      "log_likelihood": -11.227949046315537,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.2900478544660308,
      "beta": 0.0,
      "theta": -0.3870141251046063,
      "success": true,
      "log_likelihood": -19.671305150359423,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.154081999461009,
      "beta": 0.0,
      "theta": -0.25690929792102274,
      "success": true,
      "log_likelihood": -18.80889687591732,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 8.459212543061613,
      "beta": 3.3276355032836786,
      "theta": 2.166201513266878,
      "success": true,
      "log_likelihood": -69.07751059893631,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 8.496627373658521,
      "beta": 4.44703461799269,
      "theta": 2.8195000540334503,
      "success": true,
      "log_likelihood": -322.3619130169666,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.9731169251252276,
      "beta": 0.5646574057936424,
      "theta": -0.7618264652222224,
      "success": true,
      "log_likelihood": -17.033328536515214,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.3604798824542005,
      "beta": 1.13450620827745,
      "theta": 0.18959551614739098,
      "success": true,
      "log_likelihood": -4.448099022038181,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 5.446008302963992,
      "beta": 3.782621362037926,
      "theta": 4.393120775296813,
      "success": true,
      "log_likelihood": -368.4136148770475,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 2.416256476736439,
      "beta": 0.0,
      "theta": -0.6365729747369678,
      "success": true,
      "log_likelihood": -13.860888876166154,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.3363897178232775,
      "beta": 0.0,
      "theta": -0.27077725259010216,
      "success": true,
      "log_likelihood": -16.633495858110617,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 3.2967922457745327,
      "beta": 0.12856827333741994,
      "theta": -0.968499666073608,
      "success": true,
      "log_likelihood": -11.508839394066664,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.3945824191842318,
      "beta": 0.0,
      "theta": -0.48173817101590155,
      "success": true,
      "log_likelihood": -18.435498404571888,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.9335495475848451,
      "beta": 0.0,
      "theta": -0.3205567539125848,
      "success": true,
      "log_likelihood": -21.237769971579525,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.9373410157577532,
      "beta": 0.2730874780852923,
      "theta": -0.28503737406043606,
      "success": true,
      "log_likelihood": -22.128732369169153,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.2313923649193925,
      "beta": 0.0,
      "theta": -0.2611213189485694,
      "success": true,
      "log_likelihood": -17.822746581531604,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 3.8152213770585512,
      "beta": 1.296177042794415,
      "theta": -1.6517079831993922,
      "success": true,
      "log_likelihood": -6.172063804374361,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 2.485594105399791,
      "beta": 0.16811563419930942,
      "theta": -0.7334416386797109,
      "success": true,
      "log_likelihood": -14.283279801068764,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.1105165868821918,
      "beta": 0.20438788043402575,
      "theta": -0.30375887283725883,
      "success": true,
      "log_likelihood": -20.70745742340614,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.2742448326099605,
      "beta": 0.0,
      "theta": -0.1283647497160492,
      "success": true,
      "log_likelihood": -23.716982986607952,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.7338408974650787,
      "beta": 0.0,
      "theta": -0.6284941790263969,
      "success": true,
      "log_likelihood": -15.973033691359422,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 2.5054094340017716,
      "beta": 0.0,
      "theta": -0.9394704988334784,
      "success": true,
      "log_likelihood": -12.09058828426397,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 8.135483517648279,
      "beta": 1.70658984200774,
      "theta": 1.074796655689192,
      "success": true,
      "log_likelihood": -92.08987980500363,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 0.0,
      "theta": -4.16183063218731,
      "success": true,
      "log_likelihood": -2.712150106323352,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 2.1962098552462126,
      "beta": 0.7550049286066276,
      "theta": -0.4746786118253107,
      "success": true,
      "log_likelihood": -11.918659540397629,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.2686838659085724,
      "beta": 0.0,
      "theta": -0.31987934185355826,
      "success": true,
      "log_likelihood": -19.100703386111167,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 4.760751072686602,
      "beta": 0.5554752193852603,
      "theta": -1.446191100981051,
      "success": true,
      "log_likelihood": -24.727234303825462,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 0.0,
      "theta": -4.535237635241787,
      "success": true,
      "log_likelihood": -0.05716311444658757,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.7541478912021784,
      "beta": 0.0,
      "theta": -0.5616396275588661,
      "success": true,
      "log_likelihood": -17.08848063412437,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 0.0,
      "theta": -5.0,
      "success": true,
      "log_likelihood": -184.2068074367084,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 3.3747754406139183,
      "beta": 0.0,
      "theta": -0.9547373927688968,
      "success": true,
      "log_likelihood": -11.092338797212065,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 5.016368679640544,
      "beta": 1.694350819032845,
      "theta": 2.525323897731261,
      "success": true,
      "log_likelihood": -69.07739736737605,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.3227737493241365,
      "beta": 0.0,
      "theta": -0.15590296432843898,
      "success": true,
      "log_likelihood": -11.544338031187777,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 2.853476471913639,
      "beta": 0.0,
      "theta": -0.8060922762253336,
      "success": true,
      "log_likelihood": -12.641450321768495,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 5.0,
      "theta": 5.0,
      "success": true,
      "log_likelihood": -69.07755278652137,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 0.0,
      "theta": -5.0,
      "success": true,
      "log_likelihood": -92.1034037165541,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 4.219669000482058,
      "theta": -4.179463164020909,
      "success": true,
      "log_likelihood": -3.10830742527318,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 4.106942753557966,
      "beta": 3.998695078576891,
      "theta": 1.3885572045323045,
      "success": true,
      "log_likelihood": -389.67953225697835,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.500386167502412,
      "beta": 0.0,
      "theta": -0.27146545478981327,
      "success": true,
      "log_likelihood": -14.276771326843628,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.834066775467956,
      "beta": 0.21570610576116475,
      "theta": -0.2635641701141984,
      "success": true,
      "log_likelihood": -22.61415512967752,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 8.363198864590919,
      "beta": 3.598098407440686,
      "theta": 1.8566148965440954,
      "success": true,
      "log_likelihood": -253.28350122856608,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.7809547370044403,
      "beta": 0.0,
      "theta": 0.07723051408717552,
      "success": true,
      "log_likelihood": -7.157010501167847,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 4.7017496518140645,
      "theta": -5.0,
      "success": true,
      "log_likelihood": -46.05170185634625,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.6305344464070384,
      "beta": 0.28445169617751853,
      "theta": -0.15853414884699155,
      "success": true,
      "log_likelihood": -22.844420316051302,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 0.0,
      "theta": -4.5352391000313625,
      "success": true,
      "log_likelihood": -0.05716311445267962,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0633273983635378,
      "beta": 0.3779202570004738,
      "theta": -0.328888852184265,
      "success": true,
      "log_likelihood": -21.629901191522922,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.3472391886507695,
      "beta": 1.0956441803214907,
      "theta": 1.9879444949809164,
      "success": true,
      "log_likelihood": -68.04332292826606,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 2.141320208512944,
      "beta": 0.0,
      "theta": -0.9937372061303232,
      "success": true,
      "log_likelihood": -7.841725967056266,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 5.1283276290180595,
      "beta": 0.0,
      "theta": -1.5384980068919127,
      "success": true,
      "log_likelihood": -7.68413451275898,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.33155887839572806,
      "beta": 0.0,
      "theta": -0.052972082006838644,
      "success": true,
      "log_likelihood": -23.565585177211968,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 0.0,
      "theta": -4.161830966688462,
      "success": true,
      "log_likelihood": -2.7121501063199904,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.113722439952666,
      "beta": 0.0,
      "theta": -0.22995521504642952,
      "success": true,
      "log_likelihood": -18.408502049149998,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.6358044021539827,
      "beta": 0.0,
      "theta": -0.3275338145805059,
      "success": true,
      "log_likelihood": -17.841580437530993,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.1016022656806976,
      "beta": 0.0,
      "theta": 0.006974792753448631,
      "success": true,
      "log_likelihood": -6.688647917502339,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 5.26893747721941,
      "beta": 0.0,
      "theta": -1.6240777063788423,
      "success": true,
      "log_likelihood": -7.470059195398221,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.1199004694557269,
      "beta": 0.4611117728652099,
      "theta": -0.26547153609293267,
      "success": true,
      "log_likelihood": -19.21005396435779,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "alpha": {
        "r": 0.42537416299032843,
        "p": 1.025623966149131e-05
      },
      "beta": {
        "r": 0.1798004724036291,
        "p": 0.07345111616227379
      },
      "theta": {
        "r": 0.863103187751432,
        "p": 7.808429678335818e-31
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 100.26301424623874,
  "bic_results": {
    "average_bic": 100.26301424623874,
    "individual_bics": [
      10.928211307272713,
      47.26053234965339,
      48.584979541189654,
      701.526057320406,
      51.89046963272256,
      36.41380445703044,
      10.75055680816833,
      50.12346014298264,
      10.75055680816833,
      46.15724905835749,
      41.01461670284304,
      20.98124257855698,
      42.1218517595797,
      10.75055680816833,
      10.75055680816833,
      10.75055680816833,
      10.75055680816833,
      241.00906610857285,
      194.95736424849187,
      10.75055680816833,
      48.10937088366531,
      28.768453293230166,
      30.068252949915813,
      41.62039513413755,
      53.48652917364217,
      45.751405950782896,
      747.5777865694633,
      471.26757540893936,
      31.348319199924774,
      43.093990134435515,
      10.75055680816833,
      10.864883044261509,
      35.96580139868779,
      38.4723345679152,
      10.75055680816833,
      30.09509633156077,
      33.2064549079994,
      50.09316711608717,
      48.36835056720297,
      148.90557801324096,
      655.4743828493015,
      44.817213888398754,
      19.64675485944469,
      747.5777865694633,
      38.47233456770064,
      44.01754853158957,
      33.76823560350166,
      47.6215536245121,
      53.226096758527376,
      55.00802155370664,
      46.396049978431535,
      23.094684424117055,
      39.31711641750586,
      52.16547166218061,
      58.18452278858423,
      42.69662419808718,
      34.93173338389627,
      194.9303164253756,
      16.174857028015033,
      34.58787589616359,
      48.95196358759067,
      60.20502542301925,
      10.864883044261505,
      44.92751808361707,
      379.16417168878513,
      32.93523440979246,
      148.90535155012043,
      33.83923287774388,
      36.03345745890532,
      148.90566238841106,
      194.95736424847652,
      16.96717166591469,
      790.109621329325,
      39.304099469055586,
      55.97886707472337,
      517.3175592725005,
      25.064577817704027,
      102.85396052806082,
      56.43939744747094,
      10.86488304427369,
      54.01035919841418,
      146.83720267190046,
      26.43400874948086,
      26.11882584088629,
      57.88172716979227,
      16.17485702800831,
      47.56756091366833,
      46.43371769043031,
      24.127852650373008,
      25.690675206164773,
      49.17066474408391
    ],
    "group_enabled": false,
    "group_bics": null,
    "num_parameters": 3,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- alpha: r = 0.425\n- beta: r = 0.180\n- theta: r = 0.863",
  "previous_models": [
    "Specification: U = \u03b1 * (split_self / combined_earning) + \u03b2 * ( (token_self / (token_self + token_opp)) - (split_self / combined_earning) )^2 + \u03b8\nSummary: Dual-component utility model combining proportional monetary gain and quadratic fairness deviation. Monetary utility is weighted by \u03b1, fairness deviation (from contribution-based equity) by \u03b2, with \u03b8 capturing baseline acceptance tendency. Logistic transform converts utility to acceptance probability.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 100.26301424623874\nOverall Accuracy: 0.7817\n\nParameter Recovery:\n- alpha: r = 0.425\n- beta: r = 0.180\n- theta: r = 0.863"
  ]
}