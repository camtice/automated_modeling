{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the given task. The model should obtain the utility, (not the probability of choosing an action).  Your goal is to eventually explore the entire space of possible explainations and mechanisms by which the observed behavior arises.\n\nYour model should use the given variables appropriately, but does not necessary need to use all or even most of the variables. Do not include the model for the utility of rejecting an offer. \n\nThe model should:\n1. Predict only responder behavior.\n2. Build on relevant psychological principles.\n3. Be considerate of high covariance between learnable parameters as the model\nwill have to pass parameter recovery tests.\n4. Be applicable to the dataset given within the task description (i.e. the model should be able to be run using only the provided dataset structure).\n5. Not include parameters to simulate general stochasticity of behavior, because this will be handled later by a temperature parameter.\n6. Should have no more than two learnable parameters.\n7. This specific model should calculate the utility of an action, which will then be used to determine\nthe probability of choosing that action. Negative values should represent a negative utility, and thus an unlikly action.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Use clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'. DO NOT USE 'lambda' AS A PARAMETER NAME.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the given task. The model should obtain the utility, (not the probability of choosing an action).  Your goal is to eventually explore the entire space of possible explainations and mechanisms by which the observed behavior arises.\n\nYour model should use the given variables appropriately, but does not necessary need to use all or even most of the variables. Do not include the model for the utility of rejecting an offer. \n\nThe model should:\n1. Predict only responder behavior.\n2. Build on relevant psychological principles.\n3. Be considerate of high covariance between learnable parameters as the model\nwill have to pass parameter recovery tests.\n4. Be applicable to the dataset given within the task description (i.e. the model should be able to be run using only the provided dataset structure).\n5. Not include parameters to simulate general stochasticity of behavior, because this will be handled later by a temperature parameter.\n6. Should have no more than two learnable parameters.\n7. This specific model should calculate the utility of an action, which will then be used to determine\nthe probability of choosing that action. Negative values should represent a negative utility, and thus an unlikly action.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Use clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'. DO NOT USE 'lambda' AS A PARAMETER NAME.\n\nPrevious Models:\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<think>\nOkay, let's tackle this problem step by step. The goal is to design a computational model that predicts the utility of accepting an offer for a responder in the given experiment. The model needs to be based on psychological principles, use the provided dataset variables appropriately, and have no more than two learnable parameters. Also, it should avoid parameters for stochasticity since that's handled later with a temperature parameter.\n\nFirst, I need to focus on the responder's behavior. The key variables here are the ones related to the split proposed, the tokens found by both the participant and the opponent, and the combined earnings. The model should capture why a responder would accept or reject an offer. \n\nFrom psychological principles, fairness and equity are likely important. People often compare their share to what they perceive as fair. The equity theory suggests that individuals evaluate fairness by comparing their input-output ratio to others'. In this case, the participant's tokens (input) and the proposed split (output) compared to the opponent's could be key.\n\nSo, the utility of accepting might depend on two factors: \n1. The absolute monetary gain from accepting (split_self).\n2. The fairness of the split relative to contributions (token_self vs. token_opp).\n\nBut the problem states that two equal split_self values don't represent the same fairness because combined_earning varies. So, maybe the fairness should be calculated relative to contributions. For example, if the participant contributed more tokens, they might expect a higher share. If the proposed split doesn't align with their contribution proportion, that could reduce utility.\n\nLet me think about mathematical forms. The utility could be a combination of the monetary value and a fairness term. The fairness term could be the difference between the proposed percentage (splitperc_self) and the \"deserved\" percentage based on tokens. The deserved percentage might be token_self / (token_self + token_opp) * 100. So, if the split percentage is lower than deserved, that's unfair, leading to negative utility.\n\nSo, the fairness term could be (splitperc_self - deserved_perc), where deserved_perc is (token_self / (token_self + token_opp)) * 100. If this term is positive, the offer is more than fair, increasing utility. If negative, it's unfair, decreasing utility.\n\nBut how to model this? Maybe the utility is split_self (monetary gain) plus a parameter (alpha) multiplied by the fairness term. But split_self is in pounds, and the fairness term is a percentage. To combine them, perhaps we need to normalize. Alternatively, since split_self is derived from the percentage of combined_earning, maybe split_self is splitperc_self/100 * combined_earning. But that's already given. Hmm.\n\nAlternatively, the utility could be:\n\nUtility = split_self + \u03b1 * (splitperc_self - deserved_perc)\n\nBut split_self is splitperc_self/100 * combined_earning. So, maybe the model can be expressed in terms of splitperc_self and the deserved percentage. However, combining monetary value and fairness as separate terms might require scaling. For example, \u03b1 could scale the importance of fairness relative to monetary gain.\n\nAnother approach: The utility could be the monetary gain (split_self) adjusted by a fairness coefficient. The fairness coefficient could be 1 + \u03b2*(fairness term), where \u03b2 is a parameter. But this might complicate things.\n\nAlternatively, using a linear combination where one term is the monetary value and the other is the fairness discrepancy. Let's say:\n\nUtility = \u03b8 * split_self + \u03b1 * (splitperc_self - deserved_perc)\n\nHere, \u03b8 and \u03b1 are parameters. But the problem states no more than two learnable parameters. However, \u03b8 could be fixed to 1 if we assume that the utility is directly the monetary value adjusted by fairness. But maybe \u03b8 is redundant if we can combine the terms. Alternatively, if \u03b8 is set to 1, then we have one parameter (alpha). But maybe that's better to limit the parameters.\n\nWait, the problem says the model should have no more than two learnable parameters. So, perhaps two parameters: one for the weight on monetary gain and another for the weight on fairness. But maybe we can combine them into a single parameter. For example, if the utility is split_self + alpha*(fairness term). Then alpha is the weight on fairness. But then, the monetary term is not weighted. Alternatively, if we have a parameter that weights the fairness term relative to the monetary term. For example, Utility = split_self + alpha * fairness_term. Here, alpha could be positive or negative. If alpha is positive, fairness matters positively; if negative, unfairness reduces utility.\n\nBut maybe the fairness term is (splitperc_self - deserved_perc). So, if the split is more than deserved, that's good. If less, bad. So, the utility would be split_self (monetary) plus alpha times the fairness term. But split_self is in pounds, and the fairness term is a percentage. So, the units are different. To combine them, perhaps we need to normalize. For example, convert the fairness term into a monetary equivalent. The deserved amount would be (token_self / (token_self + token_opp)) * combined_earning. The split_self is the proposed amount. The difference between split_self and deserved amount is (split_self - deserved_amount). Then, the fairness term could be this difference. So, the utility would be split_self + alpha*(split_self - deserved_amount). Wait, but that would be combining split_self with a term that's split_self minus deserved. Alternatively, maybe the utility is split_self + alpha*(split_self - deserved_amount). But that's equivalent to (1 + alpha)*split_self - alpha*deserved_amount. But maybe that's not the right way. Alternatively, the utility could be split_self - alpha*(deserved_amount - split_self). If split_self is less than deserved, then the term (deserved - split_self) is positive, so the utility is reduced by alpha times that. If split_self is more than deserved, the utility is increased. That makes sense. So, the utility would be split_self - alpha*(max(deserved_amount - split_self, 0)) + beta*(split_self - deserved_amount if split_self > deserved_amount else 0). Wait, but that's getting complicated. Maybe a simpler approach is to model the difference between the proposed split and the fair split (deserved_amount). So, the utility is split_self + alpha*(split_self - deserved_amount). But that's equivalent to (1 + alpha)*split_self - alpha*deserved_amount. Alternatively, maybe the utility is split_self + alpha*(split_self - deserved_amount). But this would mean that if alpha is positive, getting more than deserved increases utility, but getting less than deserved would decrease utility. But maybe the responder is sensitive to both advantageous and disadvantageous inequality. However, the problem states that the model should not include parameters for general stochasticity, but the utility should capture the deterministic component. \n\nAlternatively, using the concept from Fehr and Schmidt's inequality aversion model. In their model, utility is own payoff minus alpha times the difference if others have more, and minus beta times the difference if self has more. But in this case, the responder is comparing their split to the opponent's split. But here, the opponent's split is split_opp, and the combined_earning is split_self + split_opp. But the deserved_amount is based on the tokens contributed. So, perhaps the fairness is based on the ratio of tokens. \n\nWait, the problem mentions that the combined earning is from tokens found by both, where each token is \u00a33. So, combined_earning = 3*(token_self + token_opp). The split_self is the amount offered to the participant, and split_opp is the amount the opponent would take. The participant's contribution is token_self, opponent's is token_opp. So, the fair split would be proportional to their contributions. So, the fair split_self would be (token_self / (token_self + token_opp)) * combined_earning. Let's call this fair_self. Then, the difference between the proposed split_self and fair_self is (split_self - fair_self). If this is positive, the offer is more than fair; if negative, less than fair. \n\nSo, the utility could be split_self + alpha*(split_self - fair_self). But this would be equivalent to (1 + alpha)*split_self - alpha*fair_self. Alternatively, the utility could be split_self + alpha*(split_self - fair_self). But maybe the responder's utility is influenced by both the monetary gain and how fair the offer is relative to their contribution. \n\nAlternatively, the utility could be split_self multiplied by a fairness factor. For example, if the offer is fair, the utility is higher. But how to model that. Maybe:\n\nUtility = split_self * (1 + alpha * (split_self / fair_self - 1))\n\nBut this complicates things. Alternatively, using a linear model where the utility is split_self plus a term that captures the deviation from fairness. \n\nAnother angle: The participant's perception of fairness could be based on the ratio of the proposed split to their deserved split. If the proposed split is equal to or greater than the deserved, utility is higher. If it's less, utility decreases. So, the utility could be split_self + alpha * (split_self - fair_self). Here, alpha is a parameter that determines how much the fairness deviation affects utility. If alpha is positive, then getting more than fair increases utility, less than fair decreases it. \n\nBut maybe the responder is only averse to being below the fair split. For example, if the proposed split is less than fair, that's a negative term. If it's more than fair, they don't care. So, the utility could be split_self + alpha * max(fair_self - split_self, 0). In this case, alpha would be a negative parameter, as getting less than fair reduces utility. But the problem allows parameters to be within a range. \n\nAlternatively, using a parameter that scales the difference between the proposed split and the fair split. So, the utility is split_self + alpha * (split_self - fair_self). If alpha is positive, then the responder values getting more than fair, but dislikes getting less. If alpha is negative, then getting less than fair is bad, and more than fair is good. Wait, no. If alpha is positive, then (split_self - fair_self) is added. So, if split_self is higher than fair_self, utility increases. If lower, utility decreases. So, a positive alpha would mean that the responder likes advantageous inequality and dislikes disadvantageous. But maybe in reality, people dislike both, but more so disadvantageous. But given the model needs to be simple, perhaps this linear term is sufficient. \n\nBut given that the model should have no more than two parameters, maybe we can have one parameter for the weight on the fairness term. So, the utility is split_self + alpha * (split_self - fair_self). But this is equivalent to (1 + alpha) * split_self - alpha * fair_self. Alternatively, maybe the model is:\n\nUtility = split_self - alpha * (fair_self - split_self)\n\nWhich simplifies to split_self - alpha * fair_self + alpha * split_self = (1 + alpha) * split_self - alpha * fair_self. But this is the same as the previous expression. \n\nAlternatively, maybe the model is:\n\nUtility = split_self + alpha * (split_self - fair_self) \n\nBut this can be rewritten as split_self * (1 + alpha) - alpha * fair_self. \n\nBut perhaps the key is that the utility depends on both the monetary value and the fairness. The parameter alpha determines how much the fairness matters. If alpha is positive, then the responder gains more utility when the offer is more than fair, and loses utility when it's less. If alpha is negative, the opposite. \n\nBut maybe the responder is only sensitive to being below the fair split. So, the utility is split_self + alpha * max(fair_self - split_self, 0). In this case, alpha would be negative, as getting less than fair reduces utility. \n\nAlternatively, the responder could be sensitive to both being below and above, but with a single parameter. For example, the utility is split_self + alpha * (split_self - fair_self). If alpha is positive, then they like getting more than fair, dislike getting less. If alpha is negative, they dislike getting more than fair (maybe due to guilt) and like getting less (unlikely). So, perhaps alpha is positive. \n\nBut given that the model needs to be simple and have few parameters, perhaps the first approach is better. \n\nAnother consideration: The combined_earning is variable, so the same split percentage can lead to different absolute amounts. But the model should account for that. Since split_self is in pounds, the model already includes the absolute amount. \n\nSo, the model variables would be split_self (monetary gain) and the difference between split_self and fair_self (fairness). The fair_self is calculated as (token_self / (token_self + token_opp)) * combined_earning. \n\nBut combined_earning is 3*(token_self + token_opp), so fair_self is 3 * token_self. Because (token_self / (token_self + token_opp)) * 3*(token_self + token_opp) = 3*token_self. Wait, that's right. So, fair_self is simply 3 * token_self. Because each token is \u00a33, so the participant's contribution is token_self * \u00a33, and the opponent's is token_opp * \u00a33. The total combined earning is 3*(token_self + token_opp). So, the fair split would be each keeping their own contribution. So, fair_self = 3 * token_self, fair_opp = 3 * token_opp. \n\nBut in the task, the split_self and split_opp are the proposed amounts. So, the fair split would be each getting their own contribution. So, if the proposer offers split_self less than 3*token_self, that's unfair. \n\nSo, the fairness term could be split_self - 3*token_self. If this is positive, the offer is more than fair; if negative, less than fair. \n\nSo, the utility could be split_self + alpha*(split_self - 3*token_self). \n\nBut wait, split_self is the amount the responder would get. If the responder's own contribution is 3*token_self, then the fair split would be to get that amount. So, the difference (split_self - 3*token_self) represents how much more or less than fair the offer is. \n\nSo, the utility would be:\n\nUtility = split_self + alpha*(split_self - 3*token_self)\n\nBut this can be rewritten as (1 + alpha)*split_self - alpha*3*token_self. \n\nAlternatively, maybe the responder's utility is influenced by both the absolute amount and how much they are getting relative to their contribution. For example, if they contributed more, they expect a higher split. \n\nBut this model has one parameter, alpha. However, the problem allows up to two parameters. Maybe another parameter could capture the weight on the absolute split. For example:\n\nUtility = beta * split_self + alpha*(split_self - 3*token_self)\n\nBut this would be two parameters. However, beta and alpha. But perhaps beta can be set to 1, assuming that the utility is linear in the split_self. Then, alpha captures the additional effect of fairness. \n\nAlternatively, combining the two terms into a single parameter. For example, if the model is:\n\nUtility = split_self + alpha*(split_self - 3*token_self)\n\nThis has one parameter, alpha. But the problem allows up to two. So, maybe adding another term. For example, the responder might also care about the opponent's share relative to their contribution. But that complicates things. \n\nAlternatively, the responder could compare their split percentage to their contribution percentage. The split percentage is splitperc_self, and their contribution percentage is (token_self / (token_self + token_opp)) * 100. The difference between these two percentages could be the fairness term. \n\nSo, splitperc_self - (token_self / (token_self + token_opp))*100. Let's call this term delta_perc. Then, the utility could be split_self + alpha*delta_perc. But split_self is in pounds, and delta_perc is a percentage. To combine them, perhaps we need to scale delta_perc. For example, delta_perc * combined_earning / 100 would convert it to pounds. But combined_earning is 3*(token_self + token_opp). So, delta_perc * 3*(token_self + token_opp)/100. \n\nBut this might complicate the model. Alternatively, the utility could be:\n\nUtility = split_self + alpha*(splitperc_self - (token_self / (token_self + token_opp))*100 )\n\nBut split_self is splitperc_self/100 * combined_earning. So, this term is split_self + alpha*(splitperc_self - contribution_percent). But contribution_percent is (token_self/(token_self + token_opp))*100. \n\nAlternatively, maybe the utility is:\n\nUtility = split_self + alpha*(splitperc_self - contribution_percent) \n\nBut split_self is already determined by splitperc_self and combined_earning. So, this model would have split_self (monetary) plus a term based on the percentage difference. \n\nBut the problem states that two equal split_self values don't represent the same fairness because combined_earning varies. So, the same split_self could come from different split percentages if combined_earning is different. Therefore, the model should account for the percentage split relative to contribution. \n\nSo, the fairness term should be based on the percentage split compared to the contribution percentage. \n\nThus, the utility could be:\n\nUtility = split_self + alpha*(splitperc_self - contribution_percent)\n\nWhere contribution_percent = (token_self / (token_self + token_opp)) * 100.\n\nThis way, even if split_self is the same, if the contribution_percent is different (due to different combined_earning), the utility would vary. \n\nBut split_self is splitperc_self/100 * combined_earning. So, split_self = (splitperc_self/100) * 3*(token_self + token_opp). \n\nSo, the model would have two components: the actual monetary gain (split_self) and the fairness in terms of percentage (splitperc_self - contribution_percent). \n\nBut combining these two terms into the utility. The parameter alpha would determine how much the percentage difference affects utility. \n\nAlternatively, maybe the utility is a weighted sum of split_self and the fairness percentage. For example:\n\nUtility = beta * split_self + alpha * (splitperc_self - contribution_percent)\n\nHere, beta and alpha are two parameters. But the problem allows up to two parameters. However, beta could be fixed to 1 if we assume that the utility is linear in split_self. But if we allow beta to be a learnable parameter, then we have two parameters. \n\nBut the problem states that the model should have no more than two learnable parameters. So, using two parameters here would be acceptable. \n\nBut perhaps beta is redundant. For example, if beta is 1, then the model is:\n\nUtility = split_self + alpha * (splitperc_self - contribution_percent)\n\nBut split_self is already in pounds, and the second term is a percentage. So, the units are different. To make them compatible, perhaps the second term should be scaled. For example, alpha could have units of pounds per percentage point. But this complicates interpretation. \n\nAlternatively, the model could use only the percentage terms. For example:\n\nUtility = splitperc_self + alpha * (splitperc_self - contribution_percent)\n\nBut splitperc_self is a percentage, and the utility would be in percentage terms. But the actual monetary value is split_self, which is splitperc_self/100 * combined_earning. So, maybe this approach is not capturing the monetary aspect. \n\nAlternatively, the model could be:\n\nUtility = split_self + alpha * (split_self - fair_self)\n\nWhere fair_self is 3 * token_self. As discussed earlier. \n\nThis model has one parameter, alpha. But the problem allows up to two. So, maybe adding another parameter. For example, the responder might have a different sensitivity to advantageous vs. disadvantageous inequality. But that would require two parameters. However, the problem restricts to two. \n\nAlternatively, the model could have two parameters: one for the weight on the monetary term and one for the fairness term. For example:\n\nUtility = beta * split_self + alpha * (split_self - fair_self)\n\nBut this is equivalent to (beta + alpha) * split_self - alpha * fair_self. But this introduces two parameters. However, if beta is set to 1, then it's the same as the previous model. \n\nBut given the problem allows two parameters, perhaps this is acceptable. However, the problem says the model should have no more than two learnable parameters. So, beta and alpha would be two parameters. But maybe this is overcomplicating. \n\nAlternatively, the model could use the ratio of split_self to fair_self. For example:\n\nUtility = split_self + alpha * (split_self / fair_self - 1)\n\nBut this introduces a non-linear term. However, the problem doesn't restrict the model to linear terms. \n\nBut given that parameter recovery is a concern, having a model with parameters that are not highly correlated is important. So, if the model has two parameters that are orthogonal in their effects, that's better. \n\nAlternatively, the model could be:\n\nUtility = alpha * split_self + beta * (split_self - fair_self)\n\nBut this is equivalent to (alpha + beta) * split_self - beta * fair_self. So, two parameters. But perhaps this is redundant. \n\nAlternatively, the model could be:\n\nUtility = split_self + alpha * (split_self - fair_self) + beta * (split_opp - fair_opp)\n\nBut split_opp is the opponent's proposed share. However, the problem states that the model should predict responder behavior, and the variables available include split_opp. But the responder's decision might also be influenced by the opponent's share. For example, if the opponent is taking more than their fair share, the responder might be unhappy. \n\nBut the problem says the model should not include parameters for general stochasticity, but focus on utility. So, including split_opp could be relevant. \n\nBut the fair_opp is 3 * token_opp. So, if split_opp is more than fair_opp, the opponent is getting more than their contribution. The responder might dislike that. \n\nSo, the utility could be:\n\nUtility = split_self + alpha * (split_self - fair_self) + beta * (split_opp - fair_opp)\n\nBut this introduces two parameters. However, this might capture both the responder's own fairness and the opponent's fairness. \n\nBut the problem allows up to two parameters, so this is acceptable. \n\nBut the model needs to use variables from the dataset. split_self and split_opp are available. token_self and token_opp are available, so fair_self and fair_opp can be calculated. \n\nSo, the model would be:\n\nUtility = split_self + alpha*(split_self - 3*token_self) + beta*(split_opp - 3*token_opp)\n\nBut split_opp is the opponent's proposed share, which is part of the proposal. However, in the responder's role, the split_opp is determined by the proposer (the opponent). The responder's utility might be influenced by both their own share and the opponent's share relative to their contributions. \n\nBut this model has two parameters, alpha and beta. \n\nAlternatively, the responder might only care about their own fairness. So, the model would have one parameter. But given the problem allows two, perhaps including both parameters is better. \n\nBut the problem states that the model should build on relevant psychological principles. Equity theory suggests that people compare their input-output ratio to others'. So, the responder's utility could depend on the ratio of their output (split_self) to input (token_self) compared to the opponent's ratio (split_opp/token_opp). \n\nBut if token_opp is zero, this could be a problem. But in the dataset, token_opp is an integer, so maybe it's always positive. \n\nThe equity theory utility could be something like:\n\nUtility = split_self - alpha * ( (split_self / token_self) - (split_opp / token_opp) )\n\nBut this compares the ratios. If the responder's ratio is less than the opponent's, this term is negative, so utility decreases. \n\nBut this model has one parameter, alpha. \n\nAlternatively, the difference in ratios could be squared to capture aversion to any inequity. But that would introduce non-linearity. \n\nBut given the need for simplicity and parameter recovery, a linear model is better. \n\nSo, the model could be:\n\nUtility = split_self + alpha * (split_self / token_self - split_opp / token_opp )\n\nBut this requires token_self and token_opp to be non-zero. Also, the units are different (split_self is in pounds, token_self is count). So, the term (split_self / token_self) is pounds per token. If the opponent's split_opp is higher per token, the responder might feel it's unfair. \n\nBut this model has one parameter. \n\nAlternatively, combining both approaches: own fairness and opponent's fairness. \n\nBut perhaps the most straightforward model with two parameters is:\n\nUtility = beta * split_self + alpha * (split_self - fair_self)\n\nWhere fair_self = 3 * token_self. \n\nThis model has two parameters: beta (weight on monetary gain) and alpha (weight on fairness). \n\nBut if beta is set to 1, then it's one parameter. But the problem allows two. \n\nAlternatively, the model could be:\n\nUtility = split_self + alpha * (split_self - fair_self) + beta * (split_opp - fair_opp)\n\nBut this uses two parameters. \n\nBut considering the variables available, split_opp is present. However, the problem says the model should predict responder behavior, and the proposer's variables are split_opp and split_self. \n\nBut in the responder's role, the proposer is the opponent, so split_opp is the amount the opponent would take. The responder might care about whether the opponent is taking more than their fair share. \n\nSo, the model could include both terms: how much the responder is getting relative to their contribution, and how much the opponent is getting relative to theirs. \n\nThus, the utility would be:\n\nUtility = split_self + alpha*(split_self - 3*token_self) + beta*(split_opp - 3*token_opp)\n\nBut split_opp is equal to combined_earning - split_self. Because combined_earning is split_self + split_opp. So, split_opp = combined_earning - split_self. \n\nBut combined_earning is 3*(token_self + token_opp). So, split_opp = 3*(token_self + token_opp) - split_self. \n\nSo, substituting into the model:\n\nUtility = split_self + alpha*(split_self - 3*token_self) + beta*( (3*(token_self + token_opp) - split_self) - 3*token_opp )\n\nSimplify the opponent's term:\n\n(3*(token_self + token_opp) - split_self) - 3*token_opp = 3*token_self + 3*token_opp - split_self - 3*token_opp = 3*token_self - split_self\n\nSo, the model becomes:\n\nUtility = split_self + alpha*(split_self - 3*token_self) + beta*(3*token_self - split_self)\n\nCombine terms:\n\nsplit_self + alpha*split_self - alpha*3*token_self + beta*3*token_self - beta*split_self\n\nGroup like terms:\n\nsplit_self*(1 + alpha - beta) + token_self*( -3 alpha + 3 beta )\n\nThis shows that the model can be expressed in terms of split_self and token_self, with parameters (1 + alpha - beta) and (3 beta - 3 alpha). But this introduces two parameters, alpha and beta. However, this might lead to identifiability issues if the parameters are not constrained properly. For example, if alpha and beta are such that (1 + alpha - beta) and (3 beta - 3 alpha) can be represented by other parameter combinations, it could cause high covariance. \n\nThis suggests that including both alpha and beta might lead to parameter recovery problems. Therefore, perhaps a simpler model with one parameter is better. \n\nGoing back to the earlier idea, using the difference between the proposed split percentage and the contribution percentage. \n\nThe contribution percentage is (token_self / (token_self + token_opp)) * 100. The proposed split percentage is splitperc_self. The difference is splitperc_self - contribution_percent. \n\nSo, the utility could be:\n\nUtility = split_self + alpha * (splitperc_self - contribution_percent)\n\nThis model has one parameter, alpha. The split_self term captures the monetary value, and the alpha term captures the fairness in percentage terms. \n\nBut since split_self is splitperc_self/100 * combined_earning, and combined_earning is 3*(token_self + token_opp), this model can be rewritten as:\n\nUtility = (splitperc_self/100)*3*(token_self + token_opp) + alpha*(splitperc_self - (token_self/(token_self + token_opp))*100 )\n\nBut this might not be as straightforward. However, the advantage is that it directly uses the percentage terms, which might align with how participants perceive fairness (as percentages rather than absolute amounts). \n\nAlternatively, the model could use the difference between split_self and fair_self, where fair_self is 3*token_self. \n\nUtility = split_self + alpha*(split_self - 3*token_self)\n\nThis model has one parameter, alpha. If alpha is positive, then the responder values getting more than their contribution, which might not be realistic. If alpha is negative, then getting less than their contribution reduces utility. \n\nBut in reality, people might be averse to getting less than their contribution but might not care much about getting more. So, perhaps the model should only penalize when split_self is less than fair_self. \n\nIn that case, the utility could be:\n\nUtility = split_self + alpha*max(3*token_self - split_self, 0)\n\nHere, alpha would be a negative parameter, so when split_self is less than fair_self, the term is positive (since 3*token_self - split_self is positive), and multiplied by alpha (negative) makes the utility lower. \n\nThis model captures the idea that the responder dislikes getting less than their fair share. The parameter alpha represents the sensitivity to this disadvantageous inequality. \n\nThis model has one parameter, alpha, with a range that allows negative values. \n\nBut the problem allows up to two parameters. So, perhaps adding another term for advantageous inequality (when split_self > fair_self). For example:\n\nUtility = split_self + alpha*max(3*token_self - split_self, 0) + beta*max(split_self - 3*token_self, 0)\n\nHere, alpha is negative (penalty for disadvantageous inequality), and beta could be positive or negative. If beta is positive, getting more than fair increases utility; if negative, it decreases (maybe due to guilt). \n\nBut this introduces two parameters. However, the problem states that the model should have no more than two learnable parameters. This model uses two. \n\nBut considering parameter recovery, having two parameters that capture different aspects (disadvantageous and advantageous inequality) might be feasible. \n\nThis is similar to the Fehr-Schmidt model, which has two parameters for disadvantageous and advantageous inequality aversion. \n\nIn the Fehr-Schmidt model, utility is own payoff minus alpha times the sum of others' payoffs exceeding own, and minus beta times the sum of own payoff exceeding others'. \n\nBut in this case, the comparison is to the fair share based on contributions, not the opponent's actual share. \n\nSo, adapting Fehr-Schmidt to this context:\n\nUtility = split_self - alpha*max(fair_self - split_self, 0) - beta*max(split_self - fair_self, 0)\n\nHere, alpha is the aversion to disadvantageous inequality (getting less than fair), and beta is the aversion to advantageous inequality (getting more than fair). Typically, alpha is positive (reducing utility when getting less), and beta is positive but smaller than alpha (people dislike getting more than fair, but less so). \n\nBut in this model, both alpha and beta are learnable parameters. \n\nHowever, the problem allows up to two parameters, so this fits. \n\nBut the problem states that the model should not include parameters for general stochasticity, which is handled later. \n\nSo, this model would have two parameters: alpha and beta. \n\nBut the question is whether this model can be implemented with the available variables. \n\nYes, because split_self and token_self are available, so fair_self = 3*token_self. \n\nThus, the utility function would be:\n\nUtility = split_self - alpha * max(3*token_self - split_self, 0) - beta * max(split_self - 3*token_self, 0)\n\nThis can be simplified as:\n\nIf split_self < 3*token_self:\nUtility = split_self - alpha*(3*token_self - split_self)\nElse:\nUtility = split_self - beta*(split_self - 3*token_self)\n\nWhich can be rewritten as:\n\nUtility = split_self - alpha*D - beta*A, where D is disadvantageous inequality and A is advantageous inequality. \n\nThis model has two parameters, alpha and beta, which are both learnable. \n\nBut the problem says the model should have no more than two parameters, which is satisfied here. \n\nThis model is based on equity theory and inequality aversion, which are relevant psychological principles. \n\nThe parameters alpha and beta would need to have bounds. For example, alpha (disadvantageous inequality aversion) is typically positive, and beta (advantageous) is between 0 and 1. But the bounds should be generous. \n\nSo, alpha's range could be [0, 5], and beta's range [0, 2]. But the exact bounds can be set based on typical values in the literature. \n\nThis model uses split_self and token_self from the dataset. It calculates fair_self as 3*token_self. \n\nThus, the model meets the requirements: predicts responder behavior, uses relevant variables, has two learnable parameters, and is based on psychological principles. \n\nAnother consideration is high covariance between parameters. If alpha and beta are both positive, but the data doesn't have enough instances of advantageous inequality, then the parameters might be hard to recover. But given the dataset has 36 trials per participant, and trial_type includes cases where the participant gets more, this might be feasible. \n\nIn summary, the model should capture the responder's utility based on their monetary gain and fairness relative to their contribution, using two parameters for disadvantageous and advantageous inequality aversion.\n</think>\n\n<MODEL>\nUtility = split_self - alpha * max(3 * token_self - split_self, 0) - beta * max(split_self - 3 * token_self, 0)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"Utility\": {\n      \"description\": \"Utility of accepting the proposed split for the responder\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed monetary amount for the participant (in \u00a3)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant (converted to \u00a33 per token)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"alpha\": {\n      \"description\": \"Disadvantageous inequality aversion parameter (sensitivity to receiving less than fair share)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta\": {\n      \"description\": \"Advantageous inequality aversion parameter (sensitivity to receiving more than fair share)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 2,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    }\n  }\n}\n</VARIABLES>\n\n<SUMMARY>\nA two-parameter utility model capturing responder behavior through inequality aversion relative to contribution-based fairness. The utility combines the monetary value of the offer with penalties for deviations from the participant's fair share (3 * token_self). Alpha penalizes disadvantageous inequality (offers below fair share), while beta penalizes advantageous inequality (offers above fair share). The model aligns with equity theory and allows distinct sensitivities to under/over-compensation.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return the utility values for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['alpha', 'beta']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                5. Returns a list of utility values for each trial\n\n                Your code will be implemented within the following code block:\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    utility_values = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        utility_values.append(beta + (epsilon * E) + (eta * N))\n    return utility_values\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE UTLITY VALUES.\n                Model Specification:\n                Utility = split_self - alpha * max(3 * token_self - split_self, 0) - beta * max(split_self - 3 * token_self, 0)\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"Utility\": {\n      \"description\": \"Utility of accepting the proposed split for the responder\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed monetary amount for the participant (in \\u00a3)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant (converted to \\u00a33 per token)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"alpha\": {\n      \"description\": \"Disadvantageous inequality aversion parameter (sensitivity to receiving less than fair share)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta\": {\n      \"description\": \"Advantageous inequality aversion parameter (sensitivity to receiving more than fair share)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 2,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "```python\nimport json\nimport math\n\ndef simulate_model(trial_data, alpha=1, beta=1):\n    utility_values = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0)\n        token_self = trial.get(\"token_self\", 0)\n        fair_share = 3 * token_self\n        utility = split_self - alpha * max(fair_share - split_self, 0) - beta * max(split_self - fair_share, 0)\n        utility_values.append(utility)\n    return utility_values\n\n# Data as list of dictionaries\ndata_json = \"\"\"\n[\n  {\"ID\": 1, \"group\": \"A\", \"trial_number\": 1, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 2, \"token_self\": 3, \"combined_earning\": 15, \"split_opp\": 6, \"split_self\": 9, \"splitperc_opp\": 40, \"splitperc_self\": 60, \"accept\": 1, \"accepted_amount\": 9, \"accepted_perc\": 60, \"proposed_perc\": 60, \"proposed_amount\": 9},\n  {\"ID\": 2, \"group\": \"A\", \"trial_number\": 2, \"trial_type\": 2, \"trial_role\": 1, \"token_opp\": 5, \"token_self\": 1, \"combined_earning\": 18, \"split_opp\": 15, \"split_self\": 3, \"splitperc_opp\": 83, \"splitperc_self\": 17, \"accept\": 0, \"accepted_amount\": null, \"accepted_perc\": null, \"proposed_perc\": 17, \"proposed_amount\": 3}\n]\n\"\"\"\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data, alpha=0.5, beta=0.2)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n```"
    }
  ],
  "learnable_parameters": {
    "alpha": {
      "description": "Disadvantageous inequality aversion parameter (sensitivity to receiving less than fair share)",
      "range": {
        "min": 0,
        "max": 5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform"
      },
      "learnable": true,
      "source": "learnable"
    },
    "beta": {
      "description": "Advantageous inequality aversion parameter (sensitivity to receiving more than fair share)",
      "range": {
        "min": 0,
        "max": 2,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform"
      },
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "Utility = split_self - alpha * max(3 * token_self - split_self, 0) - beta * max(split_self - 3 * token_self, 0)",
  "variable_descriptions": {
    "Utility": {
      "description": "Utility of accepting the proposed split for the responder",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "split_self": {
      "description": "Proposed monetary amount for the participant (in \u00a3)",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Number of tokens found by the participant (converted to \u00a33 per token)",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "alpha": {
      "description": "Disadvantageous inequality aversion parameter (sensitivity to receiving less than fair share)",
      "range": {
        "min": 0,
        "max": 5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform"
      },
      "learnable": true,
      "source": "learnable"
    },
    "beta": {
      "description": "Advantageous inequality aversion parameter (sensitivity to receiving more than fair share)",
      "range": {
        "min": 0,
        "max": 2,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform"
      },
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_summary": "A two-parameter utility model capturing responder behavior through inequality aversion relative to contribution-based fairness. The utility combines the monetary value of the offer with penalties for deviations from the participant's fair share (3 * token_self). Alpha penalizes disadvantageous inequality (offers below fair share), while beta penalizes advantageous inequality (offers above fair share). The model aligns with equity theory and allows distinct sensitivities to under/over-compensation.",
  "full_reasoning": "<think>\nOkay, let's tackle this problem step by step. The goal is to design a computational model that predicts the utility of accepting an offer for a responder in the given experiment. The model needs to be based on psychological principles, use the provided dataset variables appropriately, and have no more than two learnable parameters. Also, it should avoid parameters for stochasticity since that's handled later with a temperature parameter.\n\nFirst, I need to focus on the responder's behavior. The key variables here are the ones related to the split proposed, the tokens found by both the participant and the opponent, and the combined earnings. The model should capture why a responder would accept or reject an offer. \n\nFrom psychological principles, fairness and equity are likely important. People often compare their share to what they perceive as fair. The equity theory suggests that individuals evaluate fairness by comparing their input-output ratio to others'. In this case, the participant's tokens (input) and the proposed split (output) compared to the opponent's could be key.\n\nSo, the utility of accepting might depend on two factors: \n1. The absolute monetary gain from accepting (split_self).\n2. The fairness of the split relative to contributions (token_self vs. token_opp).\n\nBut the problem states that two equal split_self values don't represent the same fairness because combined_earning varies. So, maybe the fairness should be calculated relative to contributions. For example, if the participant contributed more tokens, they might expect a higher share. If the proposed split doesn't align with their contribution proportion, that could reduce utility.\n\nLet me think about mathematical forms. The utility could be a combination of the monetary value and a fairness term. The fairness term could be the difference between the proposed percentage (splitperc_self) and the \"deserved\" percentage based on tokens. The deserved percentage might be token_self / (token_self + token_opp) * 100. So, if the split percentage is lower than deserved, that's unfair, leading to negative utility.\n\nSo, the fairness term could be (splitperc_self - deserved_perc), where deserved_perc is (token_self / (token_self + token_opp)) * 100. If this term is positive, the offer is more than fair, increasing utility. If negative, it's unfair, decreasing utility.\n\nBut how to model this? Maybe the utility is split_self (monetary gain) plus a parameter (alpha) multiplied by the fairness term. But split_self is in pounds, and the fairness term is a percentage. To combine them, perhaps we need to normalize. Alternatively, since split_self is derived from the percentage of combined_earning, maybe split_self is splitperc_self/100 * combined_earning. But that's already given. Hmm.\n\nAlternatively, the utility could be:\n\nUtility = split_self + \u03b1 * (splitperc_self - deserved_perc)\n\nBut split_self is splitperc_self/100 * combined_earning. So, maybe the model can be expressed in terms of splitperc_self and the deserved percentage. However, combining monetary value and fairness as separate terms might require scaling. For example, \u03b1 could scale the importance of fairness relative to monetary gain.\n\nAnother approach: The utility could be the monetary gain (split_self) adjusted by a fairness coefficient. The fairness coefficient could be 1 + \u03b2*(fairness term), where \u03b2 is a parameter. But this might complicate things.\n\nAlternatively, using a linear combination where one term is the monetary value and the other is the fairness discrepancy. Let's say:\n\nUtility = \u03b8 * split_self + \u03b1 * (splitperc_self - deserved_perc)\n\nHere, \u03b8 and \u03b1 are parameters. But the problem states no more than two learnable parameters. However, \u03b8 could be fixed to 1 if we assume that the utility is directly the monetary value adjusted by fairness. But maybe \u03b8 is redundant if we can combine the terms. Alternatively, if \u03b8 is set to 1, then we have one parameter (alpha). But maybe that's better to limit the parameters.\n\nWait, the problem says the model should have no more than two learnable parameters. So, perhaps two parameters: one for the weight on monetary gain and another for the weight on fairness. But maybe we can combine them into a single parameter. For example, if the utility is split_self + alpha*(fairness term). Then alpha is the weight on fairness. But then, the monetary term is not weighted. Alternatively, if we have a parameter that weights the fairness term relative to the monetary term. For example, Utility = split_self + alpha * fairness_term. Here, alpha could be positive or negative. If alpha is positive, fairness matters positively; if negative, unfairness reduces utility.\n\nBut maybe the fairness term is (splitperc_self - deserved_perc). So, if the split is more than deserved, that's good. If less, bad. So, the utility would be split_self (monetary) plus alpha times the fairness term. But split_self is in pounds, and the fairness term is a percentage. So, the units are different. To combine them, perhaps we need to normalize. For example, convert the fairness term into a monetary equivalent. The deserved amount would be (token_self / (token_self + token_opp)) * combined_earning. The split_self is the proposed amount. The difference between split_self and deserved amount is (split_self - deserved_amount). Then, the fairness term could be this difference. So, the utility would be split_self + alpha*(split_self - deserved_amount). Wait, but that would be combining split_self with a term that's split_self minus deserved. Alternatively, maybe the utility is split_self + alpha*(split_self - deserved_amount). But that's equivalent to (1 + alpha)*split_self - alpha*deserved_amount. But maybe that's not the right way. Alternatively, the utility could be split_self - alpha*(deserved_amount - split_self). If split_self is less than deserved, then the term (deserved - split_self) is positive, so the utility is reduced by alpha times that. If split_self is more than deserved, the utility is increased. That makes sense. So, the utility would be split_self - alpha*(max(deserved_amount - split_self, 0)) + beta*(split_self - deserved_amount if split_self > deserved_amount else 0). Wait, but that's getting complicated. Maybe a simpler approach is to model the difference between the proposed split and the fair split (deserved_amount). So, the utility is split_self + alpha*(split_self - deserved_amount). But that's equivalent to (1 + alpha)*split_self - alpha*deserved_amount. Alternatively, maybe the utility is split_self + alpha*(split_self - deserved_amount). But this would mean that if alpha is positive, getting more than deserved increases utility, but getting less than deserved would decrease utility. But maybe the responder is sensitive to both advantageous and disadvantageous inequality. However, the problem states that the model should not include parameters for general stochasticity, but the utility should capture the deterministic component. \n\nAlternatively, using the concept from Fehr and Schmidt's inequality aversion model. In their model, utility is own payoff minus alpha times the difference if others have more, and minus beta times the difference if self has more. But in this case, the responder is comparing their split to the opponent's split. But here, the opponent's split is split_opp, and the combined_earning is split_self + split_opp. But the deserved_amount is based on the tokens contributed. So, perhaps the fairness is based on the ratio of tokens. \n\nWait, the problem mentions that the combined earning is from tokens found by both, where each token is \u00a33. So, combined_earning = 3*(token_self + token_opp). The split_self is the amount offered to the participant, and split_opp is the amount the opponent would take. The participant's contribution is token_self, opponent's is token_opp. So, the fair split would be proportional to their contributions. So, the fair split_self would be (token_self / (token_self + token_opp)) * combined_earning. Let's call this fair_self. Then, the difference between the proposed split_self and fair_self is (split_self - fair_self). If this is positive, the offer is more than fair; if negative, less than fair. \n\nSo, the utility could be split_self + alpha*(split_self - fair_self). But this would be equivalent to (1 + alpha)*split_self - alpha*fair_self. Alternatively, the utility could be split_self + alpha*(split_self - fair_self). But maybe the responder's utility is influenced by both the monetary gain and how fair the offer is relative to their contribution. \n\nAlternatively, the utility could be split_self multiplied by a fairness factor. For example, if the offer is fair, the utility is higher. But how to model that. Maybe:\n\nUtility = split_self * (1 + alpha * (split_self / fair_self - 1))\n\nBut this complicates things. Alternatively, using a linear model where the utility is split_self plus a term that captures the deviation from fairness. \n\nAnother angle: The participant's perception of fairness could be based on the ratio of the proposed split to their deserved split. If the proposed split is equal to or greater than the deserved, utility is higher. If it's less, utility decreases. So, the utility could be split_self + alpha * (split_self - fair_self). Here, alpha is a parameter that determines how much the fairness deviation affects utility. If alpha is positive, then getting more than fair increases utility, less than fair decreases it. \n\nBut maybe the responder is only averse to being below the fair split. For example, if the proposed split is less than fair, that's a negative term. If it's more than fair, they don't care. So, the utility could be split_self + alpha * max(fair_self - split_self, 0). In this case, alpha would be a negative parameter, as getting less than fair reduces utility. But the problem allows parameters to be within a range. \n\nAlternatively, using a parameter that scales the difference between the proposed split and the fair split. So, the utility is split_self + alpha * (split_self - fair_self). If alpha is positive, then the responder values getting more than fair, but dislikes getting less. If alpha is negative, then getting less than fair is bad, and more than fair is good. Wait, no. If alpha is positive, then (split_self - fair_self) is added. So, if split_self is higher than fair_self, utility increases. If lower, utility decreases. So, a positive alpha would mean that the responder likes advantageous inequality and dislikes disadvantageous. But maybe in reality, people dislike both, but more so disadvantageous. But given the model needs to be simple, perhaps this linear term is sufficient. \n\nBut given that the model should have no more than two parameters, maybe we can have one parameter for the weight on the fairness term. So, the utility is split_self + alpha * (split_self - fair_self). But this is equivalent to (1 + alpha) * split_self - alpha * fair_self. Alternatively, maybe the model is:\n\nUtility = split_self - alpha * (fair_self - split_self)\n\nWhich simplifies to split_self - alpha * fair_self + alpha * split_self = (1 + alpha) * split_self - alpha * fair_self. But this is the same as the previous expression. \n\nAlternatively, maybe the model is:\n\nUtility = split_self + alpha * (split_self - fair_self) \n\nBut this can be rewritten as split_self * (1 + alpha) - alpha * fair_self. \n\nBut perhaps the key is that the utility depends on both the monetary value and the fairness. The parameter alpha determines how much the fairness matters. If alpha is positive, then the responder gains more utility when the offer is more than fair, and loses utility when it's less. If alpha is negative, the opposite. \n\nBut maybe the responder is only sensitive to being below the fair split. So, the utility is split_self + alpha * max(fair_self - split_self, 0). In this case, alpha would be negative, as getting less than fair reduces utility. \n\nAlternatively, the responder could be sensitive to both being below and above, but with a single parameter. For example, the utility is split_self + alpha * (split_self - fair_self). If alpha is positive, then they like getting more than fair, dislike getting less. If alpha is negative, they dislike getting more than fair (maybe due to guilt) and like getting less (unlikely). So, perhaps alpha is positive. \n\nBut given that the model needs to be simple and have few parameters, perhaps the first approach is better. \n\nAnother consideration: The combined_earning is variable, so the same split percentage can lead to different absolute amounts. But the model should account for that. Since split_self is in pounds, the model already includes the absolute amount. \n\nSo, the model variables would be split_self (monetary gain) and the difference between split_self and fair_self (fairness). The fair_self is calculated as (token_self / (token_self + token_opp)) * combined_earning. \n\nBut combined_earning is 3*(token_self + token_opp), so fair_self is 3 * token_self. Because (token_self / (token_self + token_opp)) * 3*(token_self + token_opp) = 3*token_self. Wait, that's right. So, fair_self is simply 3 * token_self. Because each token is \u00a33, so the participant's contribution is token_self * \u00a33, and the opponent's is token_opp * \u00a33. The total combined earning is 3*(token_self + token_opp). So, the fair split would be each keeping their own contribution. So, fair_self = 3 * token_self, fair_opp = 3 * token_opp. \n\nBut in the task, the split_self and split_opp are the proposed amounts. So, the fair split would be each getting their own contribution. So, if the proposer offers split_self less than 3*token_self, that's unfair. \n\nSo, the fairness term could be split_self - 3*token_self. If this is positive, the offer is more than fair; if negative, less than fair. \n\nSo, the utility could be split_self + alpha*(split_self - 3*token_self). \n\nBut wait, split_self is the amount the responder would get. If the responder's own contribution is 3*token_self, then the fair split would be to get that amount. So, the difference (split_self - 3*token_self) represents how much more or less than fair the offer is. \n\nSo, the utility would be:\n\nUtility = split_self + alpha*(split_self - 3*token_self)\n\nBut this can be rewritten as (1 + alpha)*split_self - alpha*3*token_self. \n\nAlternatively, maybe the responder's utility is influenced by both the absolute amount and how much they are getting relative to their contribution. For example, if they contributed more, they expect a higher split. \n\nBut this model has one parameter, alpha. However, the problem allows up to two parameters. Maybe another parameter could capture the weight on the absolute split. For example:\n\nUtility = beta * split_self + alpha*(split_self - 3*token_self)\n\nBut this would be two parameters. However, beta and alpha. But perhaps beta can be set to 1, assuming that the utility is linear in the split_self. Then, alpha captures the additional effect of fairness. \n\nAlternatively, combining the two terms into a single parameter. For example, if the model is:\n\nUtility = split_self + alpha*(split_self - 3*token_self)\n\nThis has one parameter, alpha. But the problem allows up to two. So, maybe adding another term. For example, the responder might also care about the opponent's share relative to their contribution. But that complicates things. \n\nAlternatively, the responder could compare their split percentage to their contribution percentage. The split percentage is splitperc_self, and their contribution percentage is (token_self / (token_self + token_opp)) * 100. The difference between these two percentages could be the fairness term. \n\nSo, splitperc_self - (token_self / (token_self + token_opp))*100. Let's call this term delta_perc. Then, the utility could be split_self + alpha*delta_perc. But split_self is in pounds, and delta_perc is a percentage. To combine them, perhaps we need to scale delta_perc. For example, delta_perc * combined_earning / 100 would convert it to pounds. But combined_earning is 3*(token_self + token_opp). So, delta_perc * 3*(token_self + token_opp)/100. \n\nBut this might complicate the model. Alternatively, the utility could be:\n\nUtility = split_self + alpha*(splitperc_self - (token_self / (token_self + token_opp))*100 )\n\nBut split_self is splitperc_self/100 * combined_earning. So, this term is split_self + alpha*(splitperc_self - contribution_percent). But contribution_percent is (token_self/(token_self + token_opp))*100. \n\nAlternatively, maybe the utility is:\n\nUtility = split_self + alpha*(splitperc_self - contribution_percent) \n\nBut split_self is already determined by splitperc_self and combined_earning. So, this model would have split_self (monetary) plus a term based on the percentage difference. \n\nBut the problem states that two equal split_self values don't represent the same fairness because combined_earning varies. So, the same split_self could come from different split percentages if combined_earning is different. Therefore, the model should account for the percentage split relative to contribution. \n\nSo, the fairness term should be based on the percentage split compared to the contribution percentage. \n\nThus, the utility could be:\n\nUtility = split_self + alpha*(splitperc_self - contribution_percent)\n\nWhere contribution_percent = (token_self / (token_self + token_opp)) * 100.\n\nThis way, even if split_self is the same, if the contribution_percent is different (due to different combined_earning), the utility would vary. \n\nBut split_self is splitperc_self/100 * combined_earning. So, split_self = (splitperc_self/100) * 3*(token_self + token_opp). \n\nSo, the model would have two components: the actual monetary gain (split_self) and the fairness in terms of percentage (splitperc_self - contribution_percent). \n\nBut combining these two terms into the utility. The parameter alpha would determine how much the percentage difference affects utility. \n\nAlternatively, maybe the utility is a weighted sum of split_self and the fairness percentage. For example:\n\nUtility = beta * split_self + alpha * (splitperc_self - contribution_percent)\n\nHere, beta and alpha are two parameters. But the problem allows up to two parameters. However, beta could be fixed to 1 if we assume that the utility is linear in split_self. But if we allow beta to be a learnable parameter, then we have two parameters. \n\nBut the problem states that the model should have no more than two learnable parameters. So, using two parameters here would be acceptable. \n\nBut perhaps beta is redundant. For example, if beta is 1, then the model is:\n\nUtility = split_self + alpha * (splitperc_self - contribution_percent)\n\nBut split_self is already in pounds, and the second term is a percentage. So, the units are different. To make them compatible, perhaps the second term should be scaled. For example, alpha could have units of pounds per percentage point. But this complicates interpretation. \n\nAlternatively, the model could use only the percentage terms. For example:\n\nUtility = splitperc_self + alpha * (splitperc_self - contribution_percent)\n\nBut splitperc_self is a percentage, and the utility would be in percentage terms. But the actual monetary value is split_self, which is splitperc_self/100 * combined_earning. So, maybe this approach is not capturing the monetary aspect. \n\nAlternatively, the model could be:\n\nUtility = split_self + alpha * (split_self - fair_self)\n\nWhere fair_self is 3 * token_self. As discussed earlier. \n\nThis model has one parameter, alpha. But the problem allows up to two. So, maybe adding another parameter. For example, the responder might have a different sensitivity to advantageous vs. disadvantageous inequality. But that would require two parameters. However, the problem restricts to two. \n\nAlternatively, the model could have two parameters: one for the weight on the monetary term and one for the fairness term. For example:\n\nUtility = beta * split_self + alpha * (split_self - fair_self)\n\nBut this is equivalent to (beta + alpha) * split_self - alpha * fair_self. But this introduces two parameters. However, if beta is set to 1, then it's the same as the previous model. \n\nBut given the problem allows two parameters, perhaps this is acceptable. However, the problem says the model should have no more than two learnable parameters. So, beta and alpha would be two parameters. But maybe this is overcomplicating. \n\nAlternatively, the model could use the ratio of split_self to fair_self. For example:\n\nUtility = split_self + alpha * (split_self / fair_self - 1)\n\nBut this introduces a non-linear term. However, the problem doesn't restrict the model to linear terms. \n\nBut given that parameter recovery is a concern, having a model with parameters that are not highly correlated is important. So, if the model has two parameters that are orthogonal in their effects, that's better. \n\nAlternatively, the model could be:\n\nUtility = alpha * split_self + beta * (split_self - fair_self)\n\nBut this is equivalent to (alpha + beta) * split_self - beta * fair_self. So, two parameters. But perhaps this is redundant. \n\nAlternatively, the model could be:\n\nUtility = split_self + alpha * (split_self - fair_self) + beta * (split_opp - fair_opp)\n\nBut split_opp is the opponent's proposed share. However, the problem states that the model should predict responder behavior, and the variables available include split_opp. But the responder's decision might also be influenced by the opponent's share. For example, if the opponent is taking more than their fair share, the responder might be unhappy. \n\nBut the problem says the model should not include parameters for general stochasticity, but focus on utility. So, including split_opp could be relevant. \n\nBut the fair_opp is 3 * token_opp. So, if split_opp is more than fair_opp, the opponent is getting more than their contribution. The responder might dislike that. \n\nSo, the utility could be:\n\nUtility = split_self + alpha * (split_self - fair_self) + beta * (split_opp - fair_opp)\n\nBut this introduces two parameters. However, this might capture both the responder's own fairness and the opponent's fairness. \n\nBut the problem allows up to two parameters, so this is acceptable. \n\nBut the model needs to use variables from the dataset. split_self and split_opp are available. token_self and token_opp are available, so fair_self and fair_opp can be calculated. \n\nSo, the model would be:\n\nUtility = split_self + alpha*(split_self - 3*token_self) + beta*(split_opp - 3*token_opp)\n\nBut split_opp is the opponent's proposed share, which is part of the proposal. However, in the responder's role, the split_opp is determined by the proposer (the opponent). The responder's utility might be influenced by both their own share and the opponent's share relative to their contributions. \n\nBut this model has two parameters, alpha and beta. \n\nAlternatively, the responder might only care about their own fairness. So, the model would have one parameter. But given the problem allows two, perhaps including both parameters is better. \n\nBut the problem states that the model should build on relevant psychological principles. Equity theory suggests that people compare their input-output ratio to others'. So, the responder's utility could depend on the ratio of their output (split_self) to input (token_self) compared to the opponent's ratio (split_opp/token_opp). \n\nBut if token_opp is zero, this could be a problem. But in the dataset, token_opp is an integer, so maybe it's always positive. \n\nThe equity theory utility could be something like:\n\nUtility = split_self - alpha * ( (split_self / token_self) - (split_opp / token_opp) )\n\nBut this compares the ratios. If the responder's ratio is less than the opponent's, this term is negative, so utility decreases. \n\nBut this model has one parameter, alpha. \n\nAlternatively, the difference in ratios could be squared to capture aversion to any inequity. But that would introduce non-linearity. \n\nBut given the need for simplicity and parameter recovery, a linear model is better. \n\nSo, the model could be:\n\nUtility = split_self + alpha * (split_self / token_self - split_opp / token_opp )\n\nBut this requires token_self and token_opp to be non-zero. Also, the units are different (split_self is in pounds, token_self is count). So, the term (split_self / token_self) is pounds per token. If the opponent's split_opp is higher per token, the responder might feel it's unfair. \n\nBut this model has one parameter. \n\nAlternatively, combining both approaches: own fairness and opponent's fairness. \n\nBut perhaps the most straightforward model with two parameters is:\n\nUtility = beta * split_self + alpha * (split_self - fair_self)\n\nWhere fair_self = 3 * token_self. \n\nThis model has two parameters: beta (weight on monetary gain) and alpha (weight on fairness). \n\nBut if beta is set to 1, then it's one parameter. But the problem allows two. \n\nAlternatively, the model could be:\n\nUtility = split_self + alpha * (split_self - fair_self) + beta * (split_opp - fair_opp)\n\nBut this uses two parameters. \n\nBut considering the variables available, split_opp is present. However, the problem says the model should predict responder behavior, and the proposer's variables are split_opp and split_self. \n\nBut in the responder's role, the proposer is the opponent, so split_opp is the amount the opponent would take. The responder might care about whether the opponent is taking more than their fair share. \n\nSo, the model could include both terms: how much the responder is getting relative to their contribution, and how much the opponent is getting relative to theirs. \n\nThus, the utility would be:\n\nUtility = split_self + alpha*(split_self - 3*token_self) + beta*(split_opp - 3*token_opp)\n\nBut split_opp is equal to combined_earning - split_self. Because combined_earning is split_self + split_opp. So, split_opp = combined_earning - split_self. \n\nBut combined_earning is 3*(token_self + token_opp). So, split_opp = 3*(token_self + token_opp) - split_self. \n\nSo, substituting into the model:\n\nUtility = split_self + alpha*(split_self - 3*token_self) + beta*( (3*(token_self + token_opp) - split_self) - 3*token_opp )\n\nSimplify the opponent's term:\n\n(3*(token_self + token_opp) - split_self) - 3*token_opp = 3*token_self + 3*token_opp - split_self - 3*token_opp = 3*token_self - split_self\n\nSo, the model becomes:\n\nUtility = split_self + alpha*(split_self - 3*token_self) + beta*(3*token_self - split_self)\n\nCombine terms:\n\nsplit_self + alpha*split_self - alpha*3*token_self + beta*3*token_self - beta*split_self\n\nGroup like terms:\n\nsplit_self*(1 + alpha - beta) + token_self*( -3 alpha + 3 beta )\n\nThis shows that the model can be expressed in terms of split_self and token_self, with parameters (1 + alpha - beta) and (3 beta - 3 alpha). But this introduces two parameters, alpha and beta. However, this might lead to identifiability issues if the parameters are not constrained properly. For example, if alpha and beta are such that (1 + alpha - beta) and (3 beta - 3 alpha) can be represented by other parameter combinations, it could cause high covariance. \n\nThis suggests that including both alpha and beta might lead to parameter recovery problems. Therefore, perhaps a simpler model with one parameter is better. \n\nGoing back to the earlier idea, using the difference between the proposed split percentage and the contribution percentage. \n\nThe contribution percentage is (token_self / (token_self + token_opp)) * 100. The proposed split percentage is splitperc_self. The difference is splitperc_self - contribution_percent. \n\nSo, the utility could be:\n\nUtility = split_self + alpha * (splitperc_self - contribution_percent)\n\nThis model has one parameter, alpha. The split_self term captures the monetary value, and the alpha term captures the fairness in percentage terms. \n\nBut since split_self is splitperc_self/100 * combined_earning, and combined_earning is 3*(token_self + token_opp), this model can be rewritten as:\n\nUtility = (splitperc_self/100)*3*(token_self + token_opp) + alpha*(splitperc_self - (token_self/(token_self + token_opp))*100 )\n\nBut this might not be as straightforward. However, the advantage is that it directly uses the percentage terms, which might align with how participants perceive fairness (as percentages rather than absolute amounts). \n\nAlternatively, the model could use the difference between split_self and fair_self, where fair_self is 3*token_self. \n\nUtility = split_self + alpha*(split_self - 3*token_self)\n\nThis model has one parameter, alpha. If alpha is positive, then the responder values getting more than their contribution, which might not be realistic. If alpha is negative, then getting less than their contribution reduces utility. \n\nBut in reality, people might be averse to getting less than their contribution but might not care much about getting more. So, perhaps the model should only penalize when split_self is less than fair_self. \n\nIn that case, the utility could be:\n\nUtility = split_self + alpha*max(3*token_self - split_self, 0)\n\nHere, alpha would be a negative parameter, so when split_self is less than fair_self, the term is positive (since 3*token_self - split_self is positive), and multiplied by alpha (negative) makes the utility lower. \n\nThis model captures the idea that the responder dislikes getting less than their fair share. The parameter alpha represents the sensitivity to this disadvantageous inequality. \n\nThis model has one parameter, alpha, with a range that allows negative values. \n\nBut the problem allows up to two parameters. So, perhaps adding another term for advantageous inequality (when split_self > fair_self). For example:\n\nUtility = split_self + alpha*max(3*token_self - split_self, 0) + beta*max(split_self - 3*token_self, 0)\n\nHere, alpha is negative (penalty for disadvantageous inequality), and beta could be positive or negative. If beta is positive, getting more than fair increases utility; if negative, it decreases (maybe due to guilt). \n\nBut this introduces two parameters. However, the problem states that the model should have no more than two learnable parameters. This model uses two. \n\nBut considering parameter recovery, having two parameters that capture different aspects (disadvantageous and advantageous inequality) might be feasible. \n\nThis is similar to the Fehr-Schmidt model, which has two parameters for disadvantageous and advantageous inequality aversion. \n\nIn the Fehr-Schmidt model, utility is own payoff minus alpha times the sum of others' payoffs exceeding own, and minus beta times the sum of own payoff exceeding others'. \n\nBut in this case, the comparison is to the fair share based on contributions, not the opponent's actual share. \n\nSo, adapting Fehr-Schmidt to this context:\n\nUtility = split_self - alpha*max(fair_self - split_self, 0) - beta*max(split_self - fair_self, 0)\n\nHere, alpha is the aversion to disadvantageous inequality (getting less than fair), and beta is the aversion to advantageous inequality (getting more than fair). Typically, alpha is positive (reducing utility when getting less), and beta is positive but smaller than alpha (people dislike getting more than fair, but less so). \n\nBut in this model, both alpha and beta are learnable parameters. \n\nHowever, the problem allows up to two parameters, so this fits. \n\nBut the problem states that the model should not include parameters for general stochasticity, which is handled later. \n\nSo, this model would have two parameters: alpha and beta. \n\nBut the question is whether this model can be implemented with the available variables. \n\nYes, because split_self and token_self are available, so fair_self = 3*token_self. \n\nThus, the utility function would be:\n\nUtility = split_self - alpha * max(3*token_self - split_self, 0) - beta * max(split_self - 3*token_self, 0)\n\nThis can be simplified as:\n\nIf split_self < 3*token_self:\nUtility = split_self - alpha*(3*token_self - split_self)\nElse:\nUtility = split_self - beta*(split_self - 3*token_self)\n\nWhich can be rewritten as:\n\nUtility = split_self - alpha*D - beta*A, where D is disadvantageous inequality and A is advantageous inequality. \n\nThis model has two parameters, alpha and beta, which are both learnable. \n\nBut the problem says the model should have no more than two parameters, which is satisfied here. \n\nThis model is based on equity theory and inequality aversion, which are relevant psychological principles. \n\nThe parameters alpha and beta would need to have bounds. For example, alpha (disadvantageous inequality aversion) is typically positive, and beta (advantageous) is between 0 and 1. But the bounds should be generous. \n\nSo, alpha's range could be [0, 5], and beta's range [0, 2]. But the exact bounds can be set based on typical values in the literature. \n\nThis model uses split_self and token_self from the dataset. It calculates fair_self as 3*token_self. \n\nThus, the model meets the requirements: predicts responder behavior, uses relevant variables, has two learnable parameters, and is based on psychological principles. \n\nAnother consideration is high covariance between parameters. If alpha and beta are both positive, but the data doesn't have enough instances of advantageous inequality, then the parameters might be hard to recover. But given the dataset has 36 trials per participant, and trial_type includes cases where the participant gets more, this might be feasible. \n\nIn summary, the model should capture the responder's utility based on their monetary gain and fairness relative to their contribution, using two parameters for disadvantageous and advantageous inequality aversion.\n</think>\n\n<MODEL>\nUtility = split_self - alpha * max(3 * token_self - split_self, 0) - beta * max(split_self - 3 * token_self, 0)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"Utility\": {\n      \"description\": \"Utility of accepting the proposed split for the responder\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed monetary amount for the participant (in \u00a3)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant (converted to \u00a33 per token)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"alpha\": {\n      \"description\": \"Disadvantageous inequality aversion parameter (sensitivity to receiving less than fair share)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta\": {\n      \"description\": \"Advantageous inequality aversion parameter (sensitivity to receiving more than fair share)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 2,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    }\n  }\n}\n</VARIABLES>\n\n<SUMMARY>\nA two-parameter utility model capturing responder behavior through inequality aversion relative to contribution-based fairness. The utility combines the monetary value of the offer with penalties for deviations from the participant's fair share (3 * token_self). Alpha penalizes disadvantageous inequality (offers below fair share), while beta penalizes advantageous inequality (offers above fair share). The model aligns with equity theory and allows distinct sensitivities to under/over-compensation.\n</SUMMARY>",
  "previous_models": [
    "Specification: Utility = split_self - alpha * max(3 * token_self - split_self, 0) - beta * max(split_self - 3 * token_self, 0)\nSummary: A two-parameter utility model capturing responder behavior through inequality aversion relative to contribution-based fairness. The utility combines the monetary value of the offer with penalties for deviations from the participant's fair share (3 * token_self). Alpha penalizes disadvantageous inequality (offers below fair share), while beta penalizes advantageous inequality (offers above fair share). The model aligns with equity theory and allows distinct sensitivities to under/over-compensation."
  ],
  "simulation_code": "def simulate_model(trial_data, alpha=1, beta=1):\n    utility_values = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0)\n        token_self = trial.get(\"token_self\", 0)\n        fair_share = 3 * token_self\n        utility = split_self - alpha * max(fair_share - split_self, 0) - beta * max(split_self - fair_share, 0)\n        utility_values.append(utility)\n    return utility_values",
  "fitting_results": [
    {
      "alpha": 5.0,
      "beta": 1.9267233191541162,
      "success": true,
      "log_likelihood": -12.824251232156762,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.551220104044977,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -16.37303515363713,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.6418941147459323,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -12.536623085400597,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.8940783395742182,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -14.026061752359247,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 2.2600066428851173,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -11.165990478075964,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.1121989249323374,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -13.729366392628565,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -6.9501298794562105,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0595172792327319,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -13.793657024789061,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -6.950129879456211,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 2.4063793182862243,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -11.667391941212781,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 2.2067892185635953,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -9.135942097573658,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 5.0,
      "beta": 1.9267141044234317,
      "success": true,
      "log_likelihood": -12.074251232319206,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 2.390760162884577,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -10.422283600815001,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -6.950129879456208,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -6.950129879456209,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -6.95012987945621,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -6.950129879456209,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.1880743849460698,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -10.280097766720264,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.15499418085477304,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -10.895189135963605,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -6.950129879456208,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.466580129657753,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -15.630634720834369,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.2655518989329412,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -11.715535548952777,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.8188965207392012,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -18.739706213180735,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.3057264493947685,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -17.101735091847193,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.8844041580883735,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -14.242754334715618,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.2002228115789577,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -15.642404018955524,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.3742029937402043,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -13.671493923467512,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 4.419227927546096,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -5.698332469571573,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.11115050468602203,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -11.660104839713668,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.5108863663444689,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -16.27666092100739,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 1.292055698304014e-17,
      "success": true,
      "log_likelihood": -6.950129879456209,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 5.0,
      "beta": 1.9267146313646444,
      "success": true,
      "log_likelihood": -12.824251232154554,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.44624490494642,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -22.18332168727024,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 2.03918202206232,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -15.412768893687318,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -6.9501298794562105,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.8212821192806646,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -14.91576054969194,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.9007484138273724,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -12.54327000200023,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.7397888556866778,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -14.615461339618403,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.924700410881272,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -17.8260068568004,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -10.850129878148211,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.1777502106532935,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -17.799091766737206,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 3.5897007141996795,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -13.536569215751477,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -9.650129877974955,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.2230305276860083,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -16.47892458771171,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.1283431376004804,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -14.75230916758007,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.5151316672462372,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -16.163185250404705,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.4665799180506816,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -15.630634721864453,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.7229089556893624,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -19.525160698607742,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 2.505377782406874,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -11.61260529214423,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.8629947427505831,
      "beta": 1.9267285421040397,
      "success": true,
      "log_likelihood": -25.768961983339832,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.6826039669024692,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -17.487698787335137,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 3.6878883064429884,
      "beta": 1.926771602403638,
      "success": true,
      "log_likelihood": -18.937449811102926,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.133749697568766,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -19.092480975787606,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.73549105219145,
      "beta": 1.927176340484749,
      "success": true,
      "log_likelihood": -22.046225513973166,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.9336323753900064,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -20.651940060280133,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 3.2624871056810862,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -7.18761445378938,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 3.4145775264789617,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -10.386563735751333,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -13.775129876771425,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 5.0,
      "beta": 1.9267202396795267,
      "success": true,
      "log_likelihood": -13.424251232027473,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.20201613795944562,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -14.51121013001637,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.9587241838552599,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -19.806633873563623,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.7229091336089728,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -15.02516070175352,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 5.0,
      "beta": 1.926714154856934,
      "success": true,
      "log_likelihood": -12.824251232154722,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.3678370252662404,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -21.349320221418616,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 3.6878867370439323,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -11.340847885338214,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.263802479494621,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -15.301181385610352,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -10.400129878563996,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.1973843325069241,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -13.101187698391985,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0699240572638773,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -16.483949531947353,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -12.05012987694544,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 5.0,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -6.72764930065751,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 3.9730172617234474,
      "beta": 1.9267163295394476,
      "success": true,
      "log_likelihood": -17.127994263887764,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.399958523843943,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -15.955381447474956,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.30972177760943453,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -15.249755727906976,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.1337516581510596,
      "beta": 2.0,
      "success": true,
      "log_likelihood": -23.239450277511143,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.9198854317786146,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -14.970178836228154,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -9.725129878614155,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 5.0,
      "beta": 2.0,
      "success": true,
      "log_likelihood": -15.97461859720919,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.6261896395958535,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -23.60067106462226,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 5.0,
      "beta": 1.9267228559144653,
      "success": true,
      "log_likelihood": -12.82425123215638,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0543410900644878,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -24.44792671450389,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -12.20012987731324,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 5.0,
      "beta": 2.0,
      "success": true,
      "log_likelihood": -13.124618601825114,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.4529887605719312,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -12.99960063970138,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.7266126586576023,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -26.709280563310845,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 5.0,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -11.227649298228084,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.7667680225885433,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -18.030295987697563,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 3.4559796036340784,
      "beta": 2.0,
      "success": true,
      "log_likelihood": -14.200896300220407,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -9.050129878931928,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.367837145553592,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -15.349320224936829,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.5491377884601619,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -21.24390896116754,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "alpha": {
        "r": 0.9309530318580186,
        "p": 1.1390049768972855e-44
      },
      "beta": {
        "r": 0.15734666611965353,
        "p": 0.11794911493219655
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 35.3671567654643,
  "bic_Control": 31.539662676486127,
  "bic_Cocaine": 38.79595355350725,
  "bic_error": "'ModelOutput' object has no attribute 'metrics'"
}