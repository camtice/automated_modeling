{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the given task. The model should obtain the utility, (not the probability of choosing an action).  Your goal is to eventually explore the entire space of possible explainations and mechanisms by which the observed behavior arises.\n\nYour model should use the given variables appropriately, but does not necessary need to use all or even most of the variables. Do not include the model for the utility of rejecting an offer. \n\nThe model should:\n1. Predict only responder behavior.\n2. Build on relevant psychological principles.\n3. Be considerate of high covariance between learnable parameters as the model\nwill have to pass parameter recovery tests.\n4. Be applicable to the dataset given within the task description (i.e. the model should be able to be run using only the provided dataset structure).\n5. Not include parameters to simulate general stochasticity of behavior, because this will be handled later by a temperature parameter.\n6. Should have no more than two learnable parameters.\n7. This specific model should calculate the utility of an action, which will then be used to determine\nthe probability of choosing that action. Negative values should represent a negative utility, and thus an unlikly action.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Use clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'. DO NOT USE 'lambda' AS A PARAMETER NAME.\n\nYou will be given the complete list of models that you have already created. Analyze the models, and notice the absence of possible explanations of behaviors that should be tested. You should start with simple obvious explanations, and as you notice these being thoroughly explored you should shift to fundamentally different models of behavior. Pay less attention to the names of the variables, and how they are actually interacting with the given behavioral data. Start with variables with no learnable parameters, and then shift to comprehensively explore the place with one learnable paramter, and then two, etc.\n\nYour results will be scored on a combination of BIC with a penalization for number of learned parameters, the ability to recover those learned parameters, and the ability of those parameters to account for the differences in behaviors among varying groups of people.\n\nPrevious Models:\nModel 1:\nSpecification: U = fairness_weight * (split_self / combined_earning) / ((token_self + token_opp)/token_self) + self_interest_sensitivity * split_self\nSummary: A utility model for responder behavior based on a multiplicative interaction between fairness and self-interest. Fairness is assessed as the ratio of the participant's proposed share to their relative contribution compared to the opponent's contribution.  Self-interest is represented by the monetary value of the participant's proposed share. The model uses two learnable parameters: a fairness weight and a self-interest sensitivity.\nModel 2:\nSpecification: U = self_interest_weight * split_self * (split_self / combined_earning) ^ relative_gain_weight\nSummary: A multiplicative utility model for responder behavior based on self-interest and relative gain.  Self-interest is the absolute monetary value of the offer. Relative gain is the ratio of the offer to the maximum possible gain (combined earning).  The model uses two learnable parameters: a weight for self-interest and a weight for the relative gain, which modifies the impact of self-interest based on the relative gain.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the given task. The model should obtain the utility, (not the probability of choosing an action).  Your goal is to eventually explore the entire space of possible explainations and mechanisms by which the observed behavior arises.\n\nYour model should use the given variables appropriately, but does not necessary need to use all or even most of the variables. Do not include the model for the utility of rejecting an offer. \n\nThe model should:\n1. Predict only responder behavior.\n2. Build on relevant psychological principles.\n3. Be considerate of high covariance between learnable parameters as the model\nwill have to pass parameter recovery tests.\n4. Be applicable to the dataset given within the task description (i.e. the model should be able to be run using only the provided dataset structure).\n5. Not include parameters to simulate general stochasticity of behavior, because this will be handled later by a temperature parameter.\n6. Should have no more than two learnable parameters.\n7. This specific model should calculate the utility of an action, which will then be used to determine\nthe probability of choosing that action. Negative values should represent a negative utility, and thus an unlikly action.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Use clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'. DO NOT USE 'lambda' AS A PARAMETER NAME.\n\nYou will be given the complete list of models that you have already created. Analyze the models, and notice the absence of possible explanations of behaviors that should be tested. You should start with simple obvious explanations, and as you notice these being thoroughly explored you should shift to fundamentally different models of behavior. Pay less attention to the names of the variables, and how they are actually interacting with the given behavioral data. Start with variables with no learnable parameters, and then shift to comprehensively explore the place with one learnable paramter, and then two, etc.\n\nYour results will be scored on a combination of BIC with a penalization for number of learned parameters, the ability to recover those learned parameters, and the ability of those parameters to account for the differences in behaviors among varying groups of people.\n\nPrevious Models:\nModel 1:\nSpecification: U = fairness_weight * (split_self / combined_earning) / ((token_self + token_opp)/token_self) + self_interest_sensitivity * split_self\nSummary: A utility model for responder behavior based on a multiplicative interaction between fairness and self-interest. Fairness is assessed as the ratio of the participant's proposed share to their relative contribution compared to the opponent's contribution.  Self-interest is represented by the monetary value of the participant's proposed share. The model uses two learnable parameters: a fairness weight and a self-interest sensitivity.\nModel 2:\nSpecification: U = self_interest_weight * split_self * (split_self / combined_earning) ^ relative_gain_weight\nSummary: A multiplicative utility model for responder behavior based on self-interest and relative gain.  Self-interest is the absolute monetary value of the offer. Relative gain is the ratio of the offer to the maximum possible gain (combined earning).  The model uses two learnable parameters: a weight for self-interest and a weight for the relative gain, which modifies the impact of self-interest based on the relative gain.\n\nPrevious Models:\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "Let me think through this step by step...\n\nWe need a model that predicts responder behavior and focuses on the utility of accepting an offer.  The previous models focused on combinations of fairness and self-interest.  Let's explore a model that emphasizes the *relative* fairness of the offer, considering both the monetary split and the relative token contributions.  This addresses the note that equal `split_self` values don't represent equal fairness across varying `combined_earning` values.\n\nKey Psychological Mechanisms:\n\n1. **Self-Interest:** Responders will naturally prefer offers with higher monetary value.\n2. **Relative Fairness:** Responders consider not just the absolute amount but also the fairness relative to their contribution. A 50/50 split is fairer when contributions are equal, but less fair when one party contributes significantly more.\n\nHow these Mechanisms Interact:\n\nThe utility of accepting an offer will be a function of both self-interest and relative fairness.  We can model this interaction multiplicatively, assuming both factors must be at least somewhat positive for a high utility.\n\nMathematical Form:\n\nWe can capture the relative fairness by comparing the ratio of the proposed share to the combined earnings to the ratio of the participant's token contribution to the total token contribution.  The closer these ratios are to each other, the fairer the offer appears.\n\nParameters:\n\n1. `self_interest_weight`:  How much weight the responder places on self-interest (monetary gain).\n2. `fairness_sensitivity`: How sensitive the responder is to deviations from equal proportions of tokens and money.\n\n\nModel Variables Mapping to Observable Behavior:\n\nHigh `self_interest_weight` leads to acceptance of even slightly unfair offers if the monetary gain is high. High `fairness_sensitivity` leads to rejection of offers where the ratio of proposed share to earning differs substantially from the ratio of self-tokens to total tokens.  A low value for either parameter will imply that one aspect is not as influential in the responder's decision.\n\n<MODEL>\nU = self_interest_weight * split_self * (1 - fairness_sensitivity * abs((split_self / combined_earning) - (token_self / (token_self + token_opp))))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the offer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"self_interest_weight\": {\n      \"description\": \"Weight given to self-interest (monetary gain)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant (in \u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"fairness_sensitivity\": {\n      \"description\": \"Sensitivity to deviations from proportional fairness\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"combined_earning\":{\n      \"description\": \"Total money earned in the trial\",\n      \"range\":{\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<SUMMARY>\nA multiplicative utility model for responder behavior based on self-interest and a measure of relative fairness. Self-interest is the monetary value of the offer. Relative fairness is calculated as one minus a sensitivity parameter times the absolute difference between the ratio of the participant's share to the total earnings and the ratio of the participant's tokens to the total tokens. The model uses two learnable parameters: a self-interest weight and a fairness sensitivity.\n</SUMMARY>\n"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return the utility values for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['self_interest_weight', 'fairness_sensitivity']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                5. Returns a list of utility values for each trial\n\n                Your code will be implemented within the following code block:\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    utility_values = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        utility_values.append(beta + (epsilon * E) + (eta * N))\n    return utility_values\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE UTLITY VALUES.\n                Model Specification:\n                U = self_interest_weight * split_self * (1 - fairness_sensitivity * abs((split_self / combined_earning) - (token_self / (token_self + token_opp))))\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the offer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"self_interest_weight\": {\n      \"description\": \"Weight given to self-interest (monetary gain)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant (in \\u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"fairness_sensitivity\": {\n      \"description\": \"Sensitivity to deviations from proportional fairness\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total money earned in the trial\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "```python\nimport json\nimport math\n\ndef simulate_model(trial_data, self_interest_weight=1, fairness_sensitivity=1):\n    utility_values = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0)\n        combined_earning = trial.get(\"combined_earning\", 1) # Avoid division by zero\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n\n        if combined_earning == 0:  #Handle the case where combined_earning is 0\n          utility = 0\n        else:\n          fairness_term = 1 - fairness_sensitivity * abs((split_self / combined_earning) - (token_self / (token_self + token_opp)))\n          utility = self_interest_weight * split_self * max(0, fairness_term) # Ensure utility is non-negative\n\n        utility_values.append(utility)\n    return utility_values\n\n# Data as list of dictionaries (example - replace with your actual data)\ndata_json = '[{\"split_self\": 5, \"combined_earning\": 10, \"token_self\": 5, \"token_opp\": 5}, {\"split_self\": 6, \"combined_earning\": 10, \"token_self\": 2, \"token_opp\": 8}, {\"split_self\": 0, \"combined_earning\": 10, \"token_self\": 0, \"token_opp\": 10}]'\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data, self_interest_weight=2, fairness_sensitivity=0.5)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n\n```"
    }
  ],
  "learnable_parameters": {
    "self_interest_weight": {
      "description": "Weight given to self-interest (monetary gain)",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "fairness_sensitivity": {
      "description": "Sensitivity to deviations from proportional fairness",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "U = self_interest_weight * split_self * (1 - fairness_sensitivity * abs((split_self / combined_earning) - (token_self / (token_self + token_opp))))",
  "variable_descriptions": {
    "U": {
      "description": "Utility of accepting the offer",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "self_interest_weight": {
      "description": "Weight given to self-interest (monetary gain)",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "split_self": {
      "description": "Proposed share for the participant (in \u00a3)",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "fairness_sensitivity": {
      "description": "Sensitivity to deviations from proportional fairness",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "combined_earning": {
      "description": "Total money earned in the trial",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Number of tokens found by the participant",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    }
  },
  "model_summary": "A multiplicative utility model for responder behavior based on self-interest and a measure of relative fairness. Self-interest is the monetary value of the offer. Relative fairness is calculated as one minus a sensitivity parameter times the absolute difference between the ratio of the participant's share to the total earnings and the ratio of the participant's tokens to the total tokens. The model uses two learnable parameters: a self-interest weight and a fairness sensitivity.",
  "full_reasoning": "Let me think through this step by step...\n\nWe need a model that predicts responder behavior and focuses on the utility of accepting an offer.  The previous models focused on combinations of fairness and self-interest.  Let's explore a model that emphasizes the *relative* fairness of the offer, considering both the monetary split and the relative token contributions.  This addresses the note that equal `split_self` values don't represent equal fairness across varying `combined_earning` values.\n\nKey Psychological Mechanisms:\n\n1. **Self-Interest:** Responders will naturally prefer offers with higher monetary value.\n2. **Relative Fairness:** Responders consider not just the absolute amount but also the fairness relative to their contribution. A 50/50 split is fairer when contributions are equal, but less fair when one party contributes significantly more.\n\nHow these Mechanisms Interact:\n\nThe utility of accepting an offer will be a function of both self-interest and relative fairness.  We can model this interaction multiplicatively, assuming both factors must be at least somewhat positive for a high utility.\n\nMathematical Form:\n\nWe can capture the relative fairness by comparing the ratio of the proposed share to the combined earnings to the ratio of the participant's token contribution to the total token contribution.  The closer these ratios are to each other, the fairer the offer appears.\n\nParameters:\n\n1. `self_interest_weight`:  How much weight the responder places on self-interest (monetary gain).\n2. `fairness_sensitivity`: How sensitive the responder is to deviations from equal proportions of tokens and money.\n\n\nModel Variables Mapping to Observable Behavior:\n\nHigh `self_interest_weight` leads to acceptance of even slightly unfair offers if the monetary gain is high. High `fairness_sensitivity` leads to rejection of offers where the ratio of proposed share to earning differs substantially from the ratio of self-tokens to total tokens.  A low value for either parameter will imply that one aspect is not as influential in the responder's decision.\n\n<MODEL>\nU = self_interest_weight * split_self * (1 - fairness_sensitivity * abs((split_self / combined_earning) - (token_self / (token_self + token_opp))))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the offer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"self_interest_weight\": {\n      \"description\": \"Weight given to self-interest (monetary gain)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant (in \u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"fairness_sensitivity\": {\n      \"description\": \"Sensitivity to deviations from proportional fairness\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"combined_earning\":{\n      \"description\": \"Total money earned in the trial\",\n      \"range\":{\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<SUMMARY>\nA multiplicative utility model for responder behavior based on self-interest and a measure of relative fairness. Self-interest is the monetary value of the offer. Relative fairness is calculated as one minus a sensitivity parameter times the absolute difference between the ratio of the participant's share to the total earnings and the ratio of the participant's tokens to the total tokens. The model uses two learnable parameters: a self-interest weight and a fairness sensitivity.\n</SUMMARY>\n",
  "previous_models": [
    "Specification: U = self_interest_weight * split_self * (1 - fairness_sensitivity * abs((split_self / combined_earning) - (token_self / (token_self + token_opp))))\nSummary: A multiplicative utility model for responder behavior based on self-interest and a measure of relative fairness. Self-interest is the monetary value of the offer. Relative fairness is calculated as one minus a sensitivity parameter times the absolute difference between the ratio of the participant's share to the total earnings and the ratio of the participant's tokens to the total tokens. The model uses two learnable parameters: a self-interest weight and a fairness sensitivity."
  ],
  "simulation_code": "def simulate_model(trial_data, self_interest_weight=1, fairness_sensitivity=1):\n    utility_values = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0)\n        combined_earning = trial.get(\"combined_earning\", 1) # Avoid division by zero\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n\n        if combined_earning == 0:  #Handle the case where combined_earning is 0\n          utility = 0\n        else:\n          fairness_term = 1 - fairness_sensitivity * abs((split_self / combined_earning) - (token_self / (token_self + token_opp)))\n          utility = self_interest_weight * split_self * max(0, fairness_term) # Ensure utility is non-negative\n\n        utility_values.append(utility)\n    return utility_values",
  "fitting_results": [
    {
      "self_interest_weight": 0.0,
      "fairness_sensitivity": 7.305126648546083,
      "success": true,
      "log_likelihood": -24.95329849295801,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 10.0,
      "fairness_sensitivity": 6.666666667938798,
      "success": true,
      "log_likelihood": -17.667242399864207,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 10.0,
      "fairness_sensitivity": 5.000000298165266,
      "success": true,
      "log_likelihood": -13.98158244796581,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.47993614219435,
      "fairness_sensitivity": 7.499961989953441,
      "success": true,
      "log_likelihood": -22.053148075410206,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 4.430617416853304,
      "fairness_sensitivity": 5.208408350243749,
      "success": true,
      "log_likelihood": -17.188266024815345,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 2.2452740804228792,
      "fairness_sensitivity": 3.334352852197002,
      "success": true,
      "log_likelihood": -16.411832001381345,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 10.0,
      "fairness_sensitivity": 0.0,
      "success": true,
      "log_likelihood": -0.006472187475228865,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 10.0,
      "fairness_sensitivity": 4.940340308058466,
      "success": true,
      "log_likelihood": -13.946212958731488,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 10.0,
      "fairness_sensitivity": 0.0,
      "success": true,
      "log_likelihood": -0.0064721874752288674,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 10.0,
      "fairness_sensitivity": 10.0,
      "success": true,
      "log_likelihood": -19.553522585849144,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 6.9742731899355475,
      "fairness_sensitivity": 5.000001251689147,
      "success": true,
      "log_likelihood": -16.327439088089495,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.0,
      "fairness_sensitivity": 10.0,
      "success": true,
      "log_likelihood": -24.95329849295801,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 10.0,
      "fairness_sensitivity": 7.500000003066934,
      "success": true,
      "log_likelihood": -18.08770319116349,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 10.0,
      "fairness_sensitivity": 0.0,
      "success": true,
      "log_likelihood": -0.006472187475228864,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 10.0,
      "fairness_sensitivity": 0.0,
      "success": true,
      "log_likelihood": -0.006472187475228864,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 10.0,
      "fairness_sensitivity": 0.0,
      "success": true,
      "log_likelihood": -0.006472187475228867,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 10.0,
      "fairness_sensitivity": 0.0,
      "success": true,
      "log_likelihood": -0.006472187475228865,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 5.255278623261521,
      "fairness_sensitivity": 2.142856985051847,
      "success": true,
      "log_likelihood": -6.828334743954178,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 10.0,
      "fairness_sensitivity": 2.8571428392270675,
      "success": true,
      "log_likelihood": -6.415878996765552,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 10.0,
      "fairness_sensitivity": 0.0,
      "success": true,
      "log_likelihood": -0.006472187475228866,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 4.569934985776044,
      "fairness_sensitivity": 5.1496720506694755,
      "success": true,
      "log_likelihood": -16.962383014197467,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 10.0,
      "fairness_sensitivity": 2.949965906590321,
      "success": true,
      "log_likelihood": -7.467621524997646,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.21141663703355634,
      "fairness_sensitivity": 10.0,
      "success": true,
      "log_likelihood": -24.77364927048016,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 2.1094749650132623,
      "fairness_sensitivity": 4.9999999744701915,
      "success": true,
      "log_likelihood": -19.766234483417612,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 4.430629796472127,
      "fairness_sensitivity": 5.208489466565053,
      "success": true,
      "log_likelihood": -17.188266026643266,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 6.767860794245436,
      "fairness_sensitivity": 5.000000052136213,
      "success": true,
      "log_likelihood": -14.266320146784516,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 10.0,
      "fairness_sensitivity": 7.50000020088299,
      "success": true,
      "log_likelihood": -18.087703206321503,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 3.84312365730565,
      "fairness_sensitivity": 10.0,
      "success": true,
      "log_likelihood": -20.69494809163622,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 10.0,
      "fairness_sensitivity": 3.169064133753009,
      "success": true,
      "log_likelihood": -7.826276959927767,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 10.0,
      "fairness_sensitivity": 4.842187812084193,
      "success": true,
      "log_likelihood": -13.752733876199487,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 10.0,
      "fairness_sensitivity": 0.0,
      "success": true,
      "log_likelihood": -0.006472187475228866,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.0,
      "fairness_sensitivity": 10.0,
      "success": true,
      "log_likelihood": -24.95329849295801,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.16326207673661636,
      "fairness_sensitivity": 2.499999452385111,
      "success": true,
      "log_likelihood": -24.735791537355208,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.1785559538791839,
      "fairness_sensitivity": 10.0,
      "success": true,
      "log_likelihood": -22.958881269785564,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 10.0,
      "fairness_sensitivity": 0.0,
      "success": true,
      "log_likelihood": -0.006472187475228865,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 3.0640265892259815,
      "fairness_sensitivity": 7.500014960466898,
      "success": true,
      "log_likelihood": -20.20292684616328,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 3.914037733642925,
      "fairness_sensitivity": 3.3134883131058817,
      "success": true,
      "log_likelihood": -12.5816640315891,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 10.0,
      "fairness_sensitivity": 6.666666795268914,
      "success": true,
      "log_likelihood": -17.667242444617166,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 4.570062824823569,
      "fairness_sensitivity": 5.149723643620441,
      "success": true,
      "log_likelihood": -16.96238301585151,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 2.409541025454698,
      "fairness_sensitivity": 1.4048745606324462,
      "success": true,
      "log_likelihood": -9.393492407905322,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 10.0,
      "fairness_sensitivity": 7.500007212325678,
      "success": true,
      "log_likelihood": -18.087703743588147,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.52505674816503,
      "fairness_sensitivity": 10.0,
      "success": true,
      "log_likelihood": -24.138729461326516,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 10.0,
      "fairness_sensitivity": 4.842188032541864,
      "success": true,
      "log_likelihood": -13.752733876199265,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 3.8431629713035798,
      "fairness_sensitivity": 10.0,
      "success": true,
      "log_likelihood": -20.694948091609604,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 10.0,
      "fairness_sensitivity": 7.500000285159589,
      "success": true,
      "log_likelihood": -18.08770321277935,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 10.0,
      "fairness_sensitivity": 9.590707307229241,
      "success": true,
      "log_likelihood": -19.409559466544398,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 3.060946364362292,
      "fairness_sensitivity": 7.500000993430725,
      "success": true,
      "log_likelihood": -20.202925823261776,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.385016294397198,
      "fairness_sensitivity": 10.0,
      "success": true,
      "log_likelihood": -22.671496420044342,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 10.0,
      "fairness_sensitivity": 10.0,
      "success": true,
      "log_likelihood": -19.553522585849144,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.47049903768936463,
      "fairness_sensitivity": 9.088482533828678,
      "success": true,
      "log_likelihood": -24.23031857017552,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 10.0,
      "fairness_sensitivity": 9.59071287769759,
      "success": true,
      "log_likelihood": -19.409559466525227,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.0,
      "fairness_sensitivity": 10.0,
      "success": true,
      "log_likelihood": -24.95329849295801,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.6250130598939276,
      "fairness_sensitivity": 2.7271383129191262,
      "success": true,
      "log_likelihood": -22.702250606925215,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.929736994994192,
      "fairness_sensitivity": 10.0,
      "success": true,
      "log_likelihood": -23.35118384612759,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.178568034913906,
      "fairness_sensitivity": 10.0,
      "success": true,
      "log_likelihood": -22.958881269877168,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 10.0,
      "fairness_sensitivity": 9.590710913538237,
      "success": true,
      "log_likelihood": -19.40955946652647,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.6379030327471725,
      "fairness_sensitivity": 10.0,
      "success": true,
      "log_likelihood": -23.89980632277445,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.0450139522770647,
      "fairness_sensitivity": 7.500031462784977,
      "success": true,
      "log_likelihood": -22.83154498581706,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.0,
      "fairness_sensitivity": 9.149481192088171,
      "success": true,
      "log_likelihood": -24.95329849295801,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 3.7584202340658868,
      "fairness_sensitivity": 4.099953248672299,
      "success": true,
      "log_likelihood": -15.3064076279638,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.8515938152656477,
      "fairness_sensitivity": 4.805691035196315,
      "success": true,
      "log_likelihood": -20.08958107245745,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 10.0,
      "fairness_sensitivity": 7.500000608120756,
      "success": true,
      "log_likelihood": -18.08770323752683,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.0,
      "fairness_sensitivity": 10.0,
      "success": true,
      "log_likelihood": -24.95329849295801,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.3194128283323402,
      "fairness_sensitivity": 2.727246002679765,
      "success": true,
      "log_likelihood": -24.223325595799345,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.41951908953414435,
      "fairness_sensitivity": 10.0,
      "success": true,
      "log_likelihood": -24.368011487198036,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 10.0,
      "fairness_sensitivity": 7.499999936052009,
      "success": true,
      "log_likelihood": -18.087703224397153,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 10.0,
      "fairness_sensitivity": 3.3333333300623464,
      "success": true,
      "log_likelihood": -7.941763508764213,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 2.329227356729612,
      "fairness_sensitivity": 2.000000370587323,
      "success": true,
      "log_likelihood": -11.912407879161622,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.9465296123017152,
      "fairness_sensitivity": 2.500000443380772,
      "success": true,
      "log_likelihood": -20.583296090745527,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.7213226276141587,
      "fairness_sensitivity": 0.9465647620201806,
      "success": true,
      "log_likelihood": -11.408006984855573,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.21140830007459646,
      "fairness_sensitivity": 10.0,
      "success": true,
      "log_likelihood": -24.773649270443244,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.0,
      "fairness_sensitivity": 7.912352221629408,
      "success": true,
      "log_likelihood": -24.95329849295801,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.646425819600304,
      "fairness_sensitivity": 4.908388125797753,
      "success": true,
      "log_likelihood": -20.643738935496497,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.6233892320489949,
      "fairness_sensitivity": 1.9646581762778383,
      "success": true,
      "log_likelihood": -15.221743732369676,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.6914563702579182,
      "fairness_sensitivity": 6.666668790581957,
      "success": true,
      "log_likelihood": -21.47372590974063,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.9183097763287082,
      "fairness_sensitivity": 3.333333664936656,
      "success": true,
      "log_likelihood": -17.499702186058386,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 6.214928499139211,
      "fairness_sensitivity": 2.1428579253849565,
      "success": true,
      "log_likelihood": -6.312268801003867,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.0,
      "fairness_sensitivity": 10.0,
      "success": true,
      "log_likelihood": -24.95329849295801,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 3.7596205365167044,
      "fairness_sensitivity": 9.833879501707273,
      "success": true,
      "log_likelihood": -20.691113382061225,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.0,
      "fairness_sensitivity": 10.0,
      "success": true,
      "log_likelihood": -24.95329849295801,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.6379120497841785,
      "fairness_sensitivity": 10.0,
      "success": true,
      "log_likelihood": -23.89980632272324,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.333892131611878,
      "fairness_sensitivity": 0.0,
      "success": true,
      "log_likelihood": -11.741860654223819,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.0,
      "fairness_sensitivity": 10.0,
      "success": true,
      "log_likelihood": -24.95329849295801,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.3736471766330578,
      "fairness_sensitivity": 3.333333145460776,
      "success": true,
      "log_likelihood": -19.680143683913716,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.1490463837429965,
      "fairness_sensitivity": 6.666667017903236,
      "success": true,
      "log_likelihood": -22.450660474924995,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.0,
      "fairness_sensitivity": 9.67566227081891,
      "success": true,
      "log_likelihood": -24.95329849295801,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 10.0,
      "fairness_sensitivity": 7.500000934905119,
      "success": true,
      "log_likelihood": -18.08770326256729,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.45741590560999695,
      "fairness_sensitivity": 7.573985553782603,
      "success": true,
      "log_likelihood": -24.20379139843693,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 6.516006013911357,
      "fairness_sensitivity": 1.9999999501155865,
      "success": true,
      "log_likelihood": -4.960054838815346,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.8663863724142404,
      "fairness_sensitivity": 2.8563729389356434,
      "success": true,
      "log_likelihood": -21.471350852087138,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.1772524126433068,
      "fairness_sensitivity": 3.2489809585483025,
      "success": true,
      "log_likelihood": -20.36531918941939,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "self_interest_weight": {
        "r": 0.531772403870164,
        "p": 1.2473872552274262e-08
      },
      "fairness_sensitivity": {
        "r": 0.8598431104155149,
        "p": 2.278919466448631e-30
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 41.2147627251932,
  "bic_Control": 34.35992126831353,
  "bic_Cocaine": 47.355558196981235,
  "bic_error": "'ModelOutput' object has no attribute 'metrics'"
}