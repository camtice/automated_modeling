run_number,average_bic,model_specification,model_summary,version,beta_recovery,alpha_recovery
1,,"U_accept = beta * split_self - alpha * max(3 * token_self - split_self, 0)","A fairness-adjusted utility model where acceptance utility depends on both the absolute monetary offer and a penalty for offers below the contribution-based fair share (3 * token_self). The model uses two learnable parameters: beta scales the value of monetary gains, while alpha controls sensitivity to inequity when offers fall short of the fair amount. This captures trade-offs between self-interest and fairness concerns.",v1,0.851562050435148,0.8858068110288662
2,,"U_accept = beta * split_self - alpha * (max(3 * token_self - split_self, 0) / (3 * token_self))","A utility model capturing trade-offs between absolute monetary gain and proportional fairness. The utility of accepting depends linearly on the offered amount (split_self) scaled by beta, minus a penalty term proportional to the deficit relative to the contribution-based fair share (3 * token_self). The penalty is normalized by the fair share amount to account for relative inequity magnitude, with alpha controlling sensitivity to this proportional deficit. This design enables separate estimation of self-interest (beta) and fairness sensitivity (alpha) while handling trial-wise variations in total earnings.",v1,0.8747939956780866,0.5325193833575458
3,,"U_accept = beta * split_self - alpha * max(( (token_self / (token_self + token_opp) ) * 100 - splitperc_self ), 0)","A dual-component utility model where acceptance utility depends on absolute monetary gain and proportional fairness relative to contributions. The utility increases linearly with the offered amount (split_self) scaled by beta, and decreases by a penalty term proportional to the percentage-point deficit between the contribution-based fair share (token_self/(token_self+token_opp)*100) and the proposed percentage (splitperc_self). Alpha controls sensitivity to this proportional inequity, capturing aversion to receiving less than one's contribution share.",v1,0.6871829464682431,0.7451834795531421
4,,"U_accept = beta * split_self - alpha * max( (token_self / token_opp) - (split_self / split_opp), 0 )","A ratio-based inequity aversion model where the utility of accepting depends on the absolute offer and the disparity between the contribution ratio (token_self/token_opp) and the proposed split ratio (split_self/split_opp). Participants derive utility from higher monetary offers (beta) but penalize offers where their share ratio falls below their contribution ratio, with sensitivity controlled by alpha. This captures how individuals weigh both absolute gains and relative fairness based on contribution-to-split proportions.",v1,0.8665308951390992,0.6742103238683431
5,,"U_accept = beta * split_self - alpha * max( (split_opp / token_opp) - (split_self / token_self), 0 )","A dual-component utility model where acceptance utility depends on absolute monetary gain and per-token allocation fairness. The utility increases with higher offers (scaled by beta) but is penalized when the proposer's per-token share (split_opp/token_opp) exceeds the responder's per-token share (split_self/token_self). Alpha controls sensitivity to this per-token inequity, capturing aversion to disproportionate allocation relative to contributions. This model operationalizes fairness comparisons through resource distribution relative to individual contributions.",v1,0.865777550275979,0.8101284017013921
