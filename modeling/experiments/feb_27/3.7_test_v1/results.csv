run_number,average_bic,model_specification,model_summary,version,alpha_recovery,beta_recovery
1,,"fairShare = (token_self / (token_self + token_opp)) * combined_earning
fairnessDeviation = split_self - fairShare
U = split_self + alpha * (fairnessDeviation) * (fairnessDeviation >= 0) + beta * (fairnessDeviation) * (fairnessDeviation < 0)","This model calculates the utility of accepting a proposed offer in the ultimatum game by considering both absolute monetary gain and fairness relative to contributions. The utility function combines the absolute amount offered (split_self) with weighted terms for deviations from a calculated fair share based on relative contributions. The model uses two learnable parameters: alpha weighs advantageous inequality (when offered more than deserved) and beta weighs disadvantageous inequality (when offered less than deserved), allowing for asymmetric responses to different types of unfairness.",v1,0.8140057540007154,0.9162831245725163
2,,"relative_contribution = token_self / (token_self + token_opp)
expected_share = relative_contribution * combined_earning
normalized_deviation = (split_self - expected_share) / combined_earning
U = split_self + alpha * sign(normalized_deviation) * abs(normalized_deviation)^beta","A non-linear inequity aversion model where utility depends on both absolute monetary gain and fairness relative to contributions. The model calculates an expected share based on the proportion of tokens contributed, then evaluates offers against this reference point. The utility combines the absolute offer amount with a non-linear term for normalized fairness deviation. Two parameters control this process: alpha determines the weight of fairness concerns (negative values indicate aversion to receiving more than deserved), while beta controls the shape of sensitivity to deviations (values above 1 indicate increasing sensitivity to larger deviations).",v1,,
