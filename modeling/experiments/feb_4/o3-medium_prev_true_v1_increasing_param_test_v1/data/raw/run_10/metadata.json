{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the given task. The model should obtain the utility, (not the probability of choosing an action).  Your goal is to eventually explore the entire space of possible explainations and mechanisms by which the observed behavior arises.\n\nYour model should use the given variables appropriately, but does not necessary need to use all or even most of the variables. Do not include the model for the utility of rejecting an offer. \n\nThe model should:\n1. Predict only responder behavior.\n2. Build on relevant psychological principles.\n3. Be considerate of high covariance between learnable parameters as the model\nwill have to pass parameter recovery tests.\n4. Be applicable to the dataset given within the task description (i.e. the model should be able to be run using only the provided dataset structure).\n5. Not include parameters to simulate general stochasticity of behavior, because this will be handled later by a temperature parameter.\n6. Should have no more than two learnable parameters.\n7. This specific model should calculate the utility of an action, which will then be used to determine\nthe probability of choosing that action. Negative values should represent a negative utility, and thus an unlikly action.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Use clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'. DO NOT USE 'lambda' AS A PARAMETER NAME.\n\nYou will be given the complete list of models that you have already created. Analyze the models, and notice the absence of possible explanations of behaviors that should be tested. You should start with simple obvious explanations, and as you notice these being thoroughly explored you should shift to fundamentally different models of behavior. Pay less attention to the names of the variables, and how they are actually interacting with the given behavioral data. Start with variables with no learnable parameters, and then shift to comprehensively explore the place with one learnable paramter, and then two, etc.\n\nYour results will be scored on a combination of BIC with a penalization for number of learned parameters, the ability to recover those learned parameters, and the ability of those parameters to account for the differences in behaviors among varying groups of people.\n\nPrevious Models:\nModel 1:\nSpecification: Let fair_share = (token_self / (token_self + token_opp)) \u00d7 combined_earning\nU_accept = split_self - [ alpha \u00d7 max( fair_share - split_self, 0 ) + beta \u00d7 max( split_self - fair_share, 0 ) ]\nSummary: A fairness-based utility model for responder behavior where the utility of accepting an offer equals the offered monetary gain minus a fairness penalty. The penalty is scaled by one parameter (alpha) when the offer falls short of the contribution-based fair share and by a second parameter (beta) when the offer exceeds it.\nModel 2:\nSpecification: Let \n\u2003F = (token_self / (token_self + token_opp)) \u00d7 combined_earning\n\nThen, the utility for accepting an offer is defined as:\n\u2003U_accept = split_self \u2212 { \u03b3 \u00d7 (F \u2212 split_self)\u00b2\u2003if\u2003split_self < F \n\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u03b4 \u00d7 (split_self \u2212 F)\u00b2\u2003otherwise }\n\u2003\u2003(Represented as a piecewise function)\nSummary: A fairness-based utility model for responder behavior that computes a fairness benchmark from token contributions. The model subtracts a quadratic penalty from the monetary offer, with two separate sensitivity parameters for disadvantageous (\u03b3) and advantageous (\u03b4) deviations from fairness. This directly produces the utility of accepting an offer.\nModel 3:\nSpecification: Let F = (token_self / (token_self + token_opp)) \u00d7 combined_earning  \nU_accept = split_self \u2212 phi \u00d7 |split_self \u2212 F|^(omega)\nSummary: A fairness-based utility model for responders where the utility of accepting an offer equals the monetary share (split_self) minus a penalty for deviating from a fairness benchmark computed from token contributions and combined earnings. The penalty is scaled by a learnable sensitivity parameter (phi) and raised to a power (omega) to capture nonlinear (diminishing or enhanced) sensitivity to fairness deviations.\nModel 4:\nSpecification: Let F = (token_self / (token_self + token_opp)) \u00d7 combined_earning  \nU_accept = ln(split_self) \u2212 lambda_param \u00d7 | ln(split_self / F) |\nSummary: This model computes the utility of accepting an offer for responders by combining subjective monetary value (expressed as the natural log of the offered share) with a penalty for deviating from a fairness benchmark calculated from token contributions. A single learnable parameter (lambda_param) scales the penalty, capturing sensitivity to fairness deviations.\nModel 5:\nSpecification: Let F = (token_self / (token_self + token_opp)) \u00d7 combined_earning\nLet d = (split_self / F) \u2212 1\nU_accept = split_self \u00d7 (1 \u2212 kappa \u00d7 |d|^(psi))\nSummary: A normalized discrepancy model for responder behavior. The model computes a fairness benchmark from token contributions and combined earnings and derives a normalized deviation of the offered share from this benchmark. The utility of accepting an offer is given by the offered monetary amount, reduced multiplicatively by a penalty that grows nonlinearly with the normalized deviation. Two learnable parameters (kappa and psi) scale and shape the penalty.\nModel 6:\nSpecification: Let F = (token_self / (token_self + token_opp)) * combined_earning  \nLet d = split_self - F  \nU_accept = ln(split_self) - [ theta * (max(-d, 0) / combined_earning) + delta * (max(d, 0) / combined_earning) ]\nSummary: A fairness-based utility model for responder behavior. The model computes the fairness benchmark (F) from token contributions and combined earnings, and then derives the subjective utility of accepting an offer as the logarithm of the monetary offer (split_self) reduced by normalized fairness penalties. Asymmetric penalties for disadvantageous (\u03b8) versus advantageous (\u03b4) deviations from fairness are applied, capturing potential loss aversion and guilt effects.\nModel 7:\nSpecification: Let F = (token_self / (token_self + token_opp)) * combined_earning  \nU_accept = split_self - kappa * max(F - split_self, 0)\nSummary: The model computes a fairness benchmark from token contributions and total earnings, then assigns the utility of an accepted offer as the offered monetary amount decreased by a penalty for disadvantageous deviations from this fairness benchmark. The penalty is active only when the offer is below the fair share, and its magnitude is scaled by a single learnable parameter (kappa).\nModel 8:\nSpecification: Let F = (token_self / (token_self + token_opp)) \u00d7 combined_earning  \nLet d = ln(split_self / F)  \nU_accept = ln(split_self) - kappa \u00d7 |d|^(phi)\nSummary: This model computes the utility of a responder accepting an offer as the logarithm of the offered monetary share minus a fairness penalty. The fairness benchmark is derived from the participant's token contribution relative to the total and the combined earnings. The penalty is a nonlinear function of the log deviation between split_self and the fairness benchmark, scaled by two learnable parameters: kappa (penalty strength) and phi (nonlinearity).\nModel 9:\nSpecification: Let F = (token_self / (token_self + token_opp)) \u00d7 combined_earning\nLet d = |split_self \u2212 F| / F\nU_accept = ln(split_self) \u2212 kappa \u00d7 ln(1 + d^(phi))\nSummary: Utility of accepting an offer is defined as the log-transformed monetary share minus a fairness penalty. The fairness benchmark is computed from the participant\u2019s relative token contribution and combined earnings; the normalized deviation between the offer and this benchmark is penalized via a logarithmic function scaled by two learnable parameters (kappa and phi).",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "learnable_parameters": {
    "alpha": {
      "description": "Fairness sensitivity parameter that scales the relative deviation before the tanh transformation.",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta": {
      "description": "Magnitude parameter that scales the bonus/penalty applied to the subjective utility based on fairness deviation.",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "Let \n\u2003F = (token_self / (token_self + token_opp)) \u00d7 combined_earning\n\u2003R = (split_self / F) \u2212 1\nThen, the utility of accepting an offer is given by:\n\u2003U_accept = ln(split_self) + beta \u00d7 tanh(alpha \u00d7 R)",
  "variable_descriptions": {
    "U_accept": {
      "description": "Subjective utility of accepting the offer, which combines the logarithmic valuation of the monetary offer and a fairness bonus/penalty.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "token_self": {
      "description": "Number of tokens found by the participant.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "combined_earning": {
      "description": "Total amount of money earned in the trial; each token is worth \u00a33.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "split_self": {
      "description": "Monetary offer proposed to the participant (in \u00a3).",
      "range": {
        "min": 0,
        "max": "combined_earning",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "alpha": {
      "description": "Fairness sensitivity parameter that scales the relative deviation before the tanh transformation.",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta": {
      "description": "Magnitude parameter that scales the bonus/penalty applied to the subjective utility based on fairness deviation.",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_summary": "This model computes the utility of accepting an offer by combining the logarithmic valuation of the monetary share with a fairness bonus/penalty. The fairness benchmark is derived from the participant\u2019s token contribution relative to the total and the combined earnings. The relative deviation between the received offer and the benchmark is transformed via a hyperbolic tangent function scaled by a sensitivity parameter (alpha) and further weighted by a magnitude parameter (beta). Two learnable parameters (alpha and beta) modulate the influence of fairness on utility.",
  "full_reasoning": "Step-by-step reasoning:\n\n1. Key psychological mechanisms:\n\u2003\u2022 Responders typically care not only about their own monetary gain (split_self) but also about whether the split is \u201cfair\u201d given how much each side contributed. In our context a fairness benchmark can be calculated from the token counts and the combined earning.\n\u2003\u2022 Many models weigh monetary gain subject to a penalty (or bonus) based on how much the offer deviates from this fairness benchmark. In particular, people are usually more averse to offers that are lower than what they might view as \u201cfair\u201d than they are pleased about offers that exceed fairness. However, to keep this model simple (and acknowledging that separate penalties for disadvantageous and advantageous deviations have already been explored), here we use a single \u201csensitivity\u201d parameter that scales a signed fairness deviation.\n\n2. Interaction of mechanisms:\n\u2003\u2022 The monetary gain is transformed via a logarithm to capture diminishing marginal sensitivity. In parallel, a fairness term is computed by comparing the actual split (split_self) to the benchmark fair share F, defined as the proportion of tokens found by the participant times the total available money.\n\u2003\u2022 The relative deviation R = (split_self/F \u2212 1) captures whether the offer is below (R < 0) or above (R > 0) fairness. A hyperbolic tangent transformation is then applied to R (scaled by a sensitivity parameter) to ensure that the fairness influence saturates for very large deviations.\n\n3. Mathematical form:\n\u2003\u2022 Define F = (token_self/(token_self+token_opp))\u00d7combined_earning.\n\u2003\u2022 Then set R = (split_self/F) \u2212 1.\n\u2003\u2022 The utility of accepting an offer is given by: U_accept = ln(split_self) + beta\u00d7tanh(alpha\u00d7R)\n\u2003\u2003\u2022 ln(split_self) captures subjective (diminishing) valuation of the monetary share.\n\u2003\u2003\u2022 The term beta\u00d7tanh(alpha\u00d7R) adds a fairness bonus when the offer exceeds the fair benchmark (R > 0) and a fairness penalty when it falls short (R < 0).\n\n4. Learnable parameters:\n\u2003\u2022 alpha (sensitivity of the fairness deviation): Controls how strongly the relative deviation is \u201cstretched\u201d before the tanh transformation.\n\u2003\u2022 beta (magnitude of the fairness influence): Scales the overall bonus/penalty from the fairness check.\n\u2003\u2022 We choose bounds for these parameters that are generous yet finite.\n\n5. Mapping to observable behavior:\n\u2003\u2022 The model uses the observed tokens and combined earnings to determine F, the fairness benchmark.\n\u2003\u2022 The monetary parameter (split_self) enters both directly (via ln) and indirectly through its ratio to fairness (R).\n\u2003\u2022 The two learnable parameters (alpha and beta) modulate the fairness effect. Variations in these parameters across individuals or groups can capture differences in fairness sensitivity and processing.\n\nBelow is the formal specification.\n\n<MODEL>\nLet \n\u2003F = (token_self / (token_self + token_opp)) \u00d7 combined_earning\n\u2003R = (split_self / F) \u2212 1\nThen, the utility of accepting an offer is given by:\n\u2003U_accept = ln(split_self) + beta \u00d7 tanh(alpha \u00d7 R)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_accept\": {\n      \"description\": \"Subjective utility of accepting the offer, which combines the logarithmic valuation of the monetary offer and a fairness bonus/penalty.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total amount of money earned in the trial; each token is worth \u00a33.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_self\": {\n      \"description\": \"Monetary offer proposed to the participant (in \u00a3).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"combined_earning\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"alpha\": {\n      \"description\": \"Fairness sensitivity parameter that scales the relative deviation before the tanh transformation.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta\": {\n      \"description\": \"Magnitude parameter that scales the bonus/penalty applied to the subjective utility based on fairness deviation.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    }\n  }\n}\n</VARIABLES>\n\n<SUMMARY>\nThis model computes the utility of accepting an offer by combining the logarithmic valuation of the monetary share with a fairness bonus/penalty. The fairness benchmark is derived from the participant\u2019s token contribution relative to the total and the combined earnings. The relative deviation between the received offer and the benchmark is transformed via a hyperbolic tangent function scaled by a sensitivity parameter (alpha) and further weighted by a magnitude parameter (beta). Two learnable parameters (alpha and beta) modulate the influence of fairness on utility.\n</SUMMARY>",
  "simulation_code": "def simulate_model(trial_data, alpha=1, beta=1):\n    utility_values = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n        split_self = trial.get(\"split_self\", 0)\n        \n        if token_self + token_opp > 0:\n            F = (token_self / (token_self + token_opp)) * combined_earning\n        else:\n            F = 0\n        \n        # Ensure split_self is positive to avoid domain error in log\n        if split_self > 0 and F > 0:\n            R = (split_self / F) - 1\n            U_accept = math.log(split_self) + (beta * math.tanh(alpha * R))\n            utility_values.append(U_accept)\n        else:\n            # If split_self is 0 or F is 0, we can define utility as negative infinity or 0.\n            # Here, we choose to put None to indicate the lack of utility calculation.\n            utility_values.append(float('-inf'))\n\n    return utility_values",
  "fitting_results": [
    {
      "alpha": 2.5737343034403763,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -9.484442028501608,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.5729065069917826,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -18.81936151700793,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.5693513466617514,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -17.874627840193167,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.7746197986149589,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -16.376796452058294,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.786859374412329,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -16.596481487992804,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.3017870595897593,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -19.881530545557062,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 8.85795795672388,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -16.23601971009974,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.24979996873712682,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -20.093451567013407,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 0.3941873651753935,
      "success": true,
      "log_likelihood": -16.236019710099743,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.952251433835,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -14.982840958121493,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.8380081492995892,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -14.847148519290107,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 2.167003104904108,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -10.083001255816319,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.8976276147627649,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -15.149097926060811,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 2.4547755150556183,
      "success": true,
      "log_likelihood": -16.23601971009974,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -16.236019710099743,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 5.273402236027777,
      "success": true,
      "log_likelihood": -16.236019710099743,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 9.560346627794939,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -16.236019710099747,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 2.4328914802624597,
      "success": true,
      "log_likelihood": -17.11769970727513,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.32502545193147636,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -17.484684294732308,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 5.5092487659463325,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -16.236019710099747,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.47282535969721173,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -19.569584799091167,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.8926428987123332,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -17.890149402755817,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 3.083065533959192,
      "success": true,
      "log_likelihood": -18.690577450010924,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.48064486145204555,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -19.123518208201737,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.5934076399356711,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -19.254704455382555,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.4159015440660058,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -19.08129337947882,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.4848489790627129,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -18.329474624291926,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.6474269438730393,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -9.284670413208199,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.431650235060965,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -17.922418663319853,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 1.5867849573664976,
      "success": true,
      "log_likelihood": -20.073174242358558,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 5.801581216987853,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -16.236019710099743,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 2.573731169858355,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -9.484442028503807,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.6104028564768681,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -19.492279661232367,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.8744995973844807,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -15.883008968299192,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -16.236019710099747,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.26644182444145054,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -19.1048042668063,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.21054119248026698,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -19.397005908598334,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.587897425421026,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -18.82486712033158,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.19369380460234029,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -21.19412343119471,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 3.7816447676314167,
      "success": true,
      "log_likelihood": -17.484684294727582,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.2966325656535451,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -21.477328984808494,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.8433566773552879,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -10.223654356602914,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.3551571411894977,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -17.079219186695507,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.42403901723156673,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -19.469691383799677,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.3465850614297964,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -19.5596307920461,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.06239128476307573,
      "beta": 7.686533249334972,
      "success": true,
      "log_likelihood": -19.907755551901452,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.5048211594975405,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -19.143063306680553,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.4234187921476025,
      "beta": 5.97827177337044,
      "success": true,
      "log_likelihood": -18.129325650591962,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.8253385193997675,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -17.37308493454987,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.3542553086247993,
      "beta": 2.194361185012245,
      "success": true,
      "log_likelihood": -23.2720062505945,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.176827029312171,
      "beta": 5.196108932671062,
      "success": true,
      "log_likelihood": -21.048698700333734,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.6290694418116778,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -13.548084176243943,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.4383218254711128,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -19.597759762353945,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.17841361875541323,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -22.153555186942146,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.5993942369656842,
      "beta": 5.391530007655985,
      "success": true,
      "log_likelihood": -19.50969486080283,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.2671282438044906,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -11.573094289692877,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.3937815268335392,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -11.742375942215553,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -18.51430371168255,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 2.042194257436211,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -10.830105592713803,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 4.509757049629857,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -18.587280667988175,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.24588165294609843,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -21.69114093601089,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.5973073855801563,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -18.737672268970048,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 2.573735421542113,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -9.484442028503242,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.5342025480295118,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -20.265421465860587,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.7320107985672653,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -10.049262840753322,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.4712732053001717,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -18.53329567045813,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 3.6136903972083223,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -17.42579277691817,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 7.390379275455487,
      "success": true,
      "log_likelihood": -18.275203513515148,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.41309189983425837,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -18.951667155260004,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 2.8753711728317493,
      "success": true,
      "log_likelihood": -17.86352714548766,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -1.109219658276279,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.632156438057939,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -13.30033749128484,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.47147684800993844,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -19.83206164787527,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 6.111491769056124,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -19.138813987386687,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.2502391776376285,
      "beta": 3.09064679737438,
      "success": true,
      "log_likelihood": -23.14555297425871,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.16480920288390877,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -20.59750210189528,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 5.670923727842152,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -17.190790962340326,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 5.849979755441789,
      "success": true,
      "log_likelihood": -14.765180417033363,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 3.495003723819199,
      "beta": 1.0818885563982419,
      "success": true,
      "log_likelihood": -22.191293598740526,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 2.57373111829706,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -9.48444202850393,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 1.488982483958535,
      "success": true,
      "log_likelihood": -22.81995216409072,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.8676865496801451,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -18.01357944168378,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.4855081016301415,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -15.664896348421081,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.5851006708911555,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -16.97555937811135,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 4.638813792213871,
      "beta": 0.9026023602880621,
      "success": true,
      "log_likelihood": -23.48212220980247,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 8.292729931672028,
      "success": true,
      "log_likelihood": -5.925902501650882,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.11139280283795609,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -21.402485491841304,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.2758188534828523,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -15.27936956888712,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.409800751369088,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -16.935378150514683,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.5846756394399523,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -17.43141591166673,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 8.905029212245763,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -21.97650548683738,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "alpha": {
        "r": 0.2563767578005124,
        "p": 0.010032112280688251
      },
      "beta": {
        "r": 0.5810457696862029,
        "p": 2.329714947059563e-10
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 41.35779883120655,
  "bic_Control": 40.83123905535029,
  "bic_Cocaine": 41.82950863041112,
  "bic_error": "'ModelOutput' object has no attribute 'metrics'"
}