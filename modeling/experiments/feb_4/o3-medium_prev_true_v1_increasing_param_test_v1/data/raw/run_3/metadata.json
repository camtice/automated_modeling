{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the given task. The model should obtain the utility, (not the probability of choosing an action).  Your goal is to eventually explore the entire space of possible explainations and mechanisms by which the observed behavior arises.\n\nYour model should use the given variables appropriately, but does not necessary need to use all or even most of the variables. Do not include the model for the utility of rejecting an offer. \n\nThe model should:\n1. Predict only responder behavior.\n2. Build on relevant psychological principles.\n3. Be considerate of high covariance between learnable parameters as the model\nwill have to pass parameter recovery tests.\n4. Be applicable to the dataset given within the task description (i.e. the model should be able to be run using only the provided dataset structure).\n5. Not include parameters to simulate general stochasticity of behavior, because this will be handled later by a temperature parameter.\n6. Should have no more than two learnable parameters.\n7. This specific model should calculate the utility of an action, which will then be used to determine\nthe probability of choosing that action. Negative values should represent a negative utility, and thus an unlikly action.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Use clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'. DO NOT USE 'lambda' AS A PARAMETER NAME.\n\nYou will be given the complete list of models that you have already created. Analyze the models, and notice the absence of possible explanations of behaviors that should be tested. You should start with simple obvious explanations, and as you notice these being thoroughly explored you should shift to fundamentally different models of behavior. Pay less attention to the names of the variables, and how they are actually interacting with the given behavioral data. Start with variables with no learnable parameters, and then shift to comprehensively explore the place with one learnable paramter, and then two, etc.\n\nYour results will be scored on a combination of BIC with a penalization for number of learned parameters, the ability to recover those learned parameters, and the ability of those parameters to account for the differences in behaviors among varying groups of people.\n\nPrevious Models:\nModel 1:\nSpecification: Let fair_share = (token_self / (token_self + token_opp)) \u00d7 combined_earning\nU_accept = split_self - [ alpha \u00d7 max( fair_share - split_self, 0 ) + beta \u00d7 max( split_self - fair_share, 0 ) ]\nSummary: A fairness-based utility model for responder behavior where the utility of accepting an offer equals the offered monetary gain minus a fairness penalty. The penalty is scaled by one parameter (alpha) when the offer falls short of the contribution-based fair share and by a second parameter (beta) when the offer exceeds it.\nModel 2:\nSpecification: Let \n\u2003F = (token_self / (token_self + token_opp)) \u00d7 combined_earning\n\nThen, the utility for accepting an offer is defined as:\n\u2003U_accept = split_self \u2212 { \u03b3 \u00d7 (F \u2212 split_self)\u00b2\u2003if\u2003split_self < F \n\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u03b4 \u00d7 (split_self \u2212 F)\u00b2\u2003otherwise }\n\u2003\u2003(Represented as a piecewise function)\nSummary: A fairness-based utility model for responder behavior that computes a fairness benchmark from token contributions. The model subtracts a quadratic penalty from the monetary offer, with two separate sensitivity parameters for disadvantageous (\u03b3) and advantageous (\u03b4) deviations from fairness. This directly produces the utility of accepting an offer.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "learnable_parameters": {
    "phi": {
      "description": "Fairness sensitivity parameter that scales the penalty associated with deviations between the offered split and the fairness benchmark.",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": 0,
          "max": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "omega": {
      "description": "Exponent parameter specifying the nonlinearity in sensitivity to fairness deviations, capturing diminishing (or enhanced) sensitivity.",
      "range": {
        "min": 0.1,
        "max": 5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": 0.1,
          "max": 5
        }
      },
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "Let F = (token_self / (token_self + token_opp)) \u00d7 combined_earning  \nU_accept = split_self \u2212 phi \u00d7 |split_self \u2212 F|^(omega)",
  "variable_descriptions": {
    "F": {
      "description": "Fairness benchmark computed as the proportional share (token_self / (token_self + token_opp)) times combined_earning.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "computed",
        "parameters": {}
      },
      "learnable": false,
      "source": "calculated"
    },
    "U_accept": {
      "description": "Utility of accepting the offer calculated as the offered split minus the fairness penalty.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": {
        "type": "computed",
        "parameters": {}
      },
      "learnable": false,
      "source": "calculated"
    },
    "split_self": {
      "description": "Monetary share offered to the participant (in \u00a3).",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": {
        "type": "data",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Number of tokens found by the participant.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": {
        "type": "data",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": {
        "type": "data",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "combined_earning": {
      "description": "Total combined earning available in the trial (in \u00a3).",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": {
        "type": "data",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "phi": {
      "description": "Fairness sensitivity parameter that scales the penalty associated with deviations between the offered split and the fairness benchmark.",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": 0,
          "max": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "omega": {
      "description": "Exponent parameter specifying the nonlinearity in sensitivity to fairness deviations, capturing diminishing (or enhanced) sensitivity.",
      "range": {
        "min": 0.1,
        "max": 5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": 0.1,
          "max": 5
        }
      },
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_summary": "A fairness-based utility model for responders where the utility of accepting an offer equals the monetary share (split_self) minus a penalty for deviating from a fairness benchmark computed from token contributions and combined earnings. The penalty is scaled by a learnable sensitivity parameter (phi) and raised to a power (omega) to capture nonlinear (diminishing or enhanced) sensitivity to fairness deviations.",
  "full_reasoning": "Step-by-step reasoning:\n\n1. Key psychological mechanisms \u2013 In responder decisions one might weigh the offered monetary gain (split_self) against a fairness benchmark derived from contribution tokens. Responders may experience a subjective \u201cpenalty\u201d when the offer deviates from what they perceive as their fair share.\n\n2. Mechanism interactions \u2013 The fair share is computed as the proportion of tokens a participant found relative to the total tokens (participant + opponent) multiplied by the total pot (combined_earning). The deviation between this fairness benchmark (F) and the actual offered amount (split_self) is then transformed in a nonlinear fashion (using a power/exponent function) to capture possible diminishing sensitivity. The penalty is scaled by a sensitivity parameter.\n\n3. Mathematical form \u2013 We compute a fairness benchmark F and then form the utility for accepting an offer as the net monetary gain minus a fairness penalty that is proportional to the absolute deviation raised to a power. This gives us:  \n\u2003\u2003U_accept = split_self \u2212 phi \u00d7 |split_self \u2212 F|^(omega)\n\n4. Parameters \u2013 The model has two learnable parameters:\n\u2003\u2003\u2022 phi: scales the cognitive \u201ccost\u201d of fairness deviations  \n\u2003\u2003\u2022 omega: an exponent that captures diminishing sensitivity to deviations in fairness (if omega < 1, small deviations are emphasized; if omega > 1, larger deviations are increasingly penalized)\n\n5. Mapping to observed behavior \u2013 Data variables (token_self, token_opp, combined_earning) are used to compute F, providing a personalized fairness benchmark. The offer (split_self) and its deviation from F lead to the computed utility. Negative utilities correspond to large perceived fairness violations making acceptance unlikely, while higher split_self relative to F can result in positive utilities even if the offer \u201covershoots\u201d the fair share because the penalty is symmetric.\n\nThe complete specification follows.\n\n<MODEL>\nLet F = (token_self / (token_self + token_opp)) \u00d7 combined_earning  \nU_accept = split_self \u2212 phi \u00d7 |split_self \u2212 F|^(omega)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"F\": {\n      \"description\": \"Fairness benchmark computed as the proportional share (token_self / (token_self + token_opp)) times combined_earning.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"computed\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"U_accept\": {\n      \"description\": \"Utility of accepting the offer calculated as the offered split minus the fairness penalty.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"computed\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"split_self\": {\n      \"description\": \"Monetary share offered to the participant (in \u00a3).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"data\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"data\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"data\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total combined earning available in the trial (in \u00a3).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"data\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"phi\": {\n      \"description\": \"Fairness sensitivity parameter that scales the penalty associated with deviations between the offered split and the fairness benchmark.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"omega\": {\n      \"description\": \"Exponent parameter specifying the nonlinearity in sensitivity to fairness deviations, capturing diminishing (or enhanced) sensitivity.\",\n      \"range\": {\n        \"min\": 0.1,\n        \"max\": 5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0.1,\n          \"max\": 5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    }\n  }\n}\n</VARIABLES>\n\n<SUMMARY>\nA fairness-based utility model for responders where the utility of accepting an offer equals the monetary share (split_self) minus a penalty for deviating from a fairness benchmark computed from token contributions and combined earnings. The penalty is scaled by a learnable sensitivity parameter (phi) and raised to a power (omega) to capture nonlinear (diminishing or enhanced) sensitivity to fairness deviations.\n</SUMMARY>",
  "simulation_code": "def simulate_model(trial_data, phi=1, omega=1):\n    utility_values = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n        split_self = trial.get(\"split_self\", 0)\n\n        # Calculate F (Fairness benchmark)\n        if token_opp + token_self > 0:\n            F = (token_self / (token_self + token_opp)) * combined_earning\n        else:\n            F = 0  # Handle situation where both token_self and token_opp are zero\n\n        # Calculate utility U_accept\n        utility = split_self - (phi * abs(split_self - F) ** omega)\n        utility_values.append(utility)\n\n    return utility_values",
  "fitting_results": [
    {
      "phi": 8.518846466683877,
      "omega": 0.15074433931896777,
      "success": true,
      "log_likelihood": -9.736884425940055,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.7810738250364835,
      "omega": 0.8747037500273726,
      "success": true,
      "log_likelihood": -16.587095694645544,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5063149325756636,
      "omega": 1.9787591731840712,
      "success": true,
      "log_likelihood": -11.793853618338911,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.7545507534224325,
      "omega": 1.0495838075191584,
      "success": true,
      "log_likelihood": -14.38204122710773,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.4987317470287628,
      "omega": 2.4471308318141745,
      "success": true,
      "log_likelihood": -9.727156625242387,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.046194104022411225,
      "omega": 3.3977997179561106,
      "success": true,
      "log_likelihood": -12.249201212298166,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.0,
      "omega": 0.1,
      "success": true,
      "log_likelihood": -6.9501298794562105,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.0373124044818314,
      "omega": 3.672901756081491,
      "success": true,
      "log_likelihood": -10.549455810731091,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.0,
      "omega": 0.1,
      "success": true,
      "log_likelihood": -6.950129879456211,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 2.1844137112412896,
      "omega": 1.0646927008713802,
      "success": true,
      "log_likelihood": -12.173873923464438,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.29879347914455895,
      "omega": 2.867234455272054,
      "success": true,
      "log_likelihood": -7.640567302960939,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 7.154612263910956,
      "omega": 0.31176972461922425,
      "success": true,
      "log_likelihood": -10.754474207255015,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.1100176712460343,
      "omega": 1.738296879734077,
      "success": true,
      "log_likelihood": -10.01607262959114,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.0,
      "omega": 0.1,
      "success": true,
      "log_likelihood": -6.950129879456208,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.0,
      "omega": 0.1,
      "success": true,
      "log_likelihood": -6.950129879456209,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.0,
      "omega": 0.1,
      "success": true,
      "log_likelihood": -6.95012987945621,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.0,
      "omega": 0.1,
      "success": true,
      "log_likelihood": -6.950129879456209,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.0,
      "omega": 0.1,
      "success": true,
      "log_likelihood": -10.550129878667317,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.0,
      "omega": 0.1,
      "success": true,
      "log_likelihood": -11.075129878322363,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.0,
      "omega": 0.1,
      "success": true,
      "log_likelihood": -6.950129879456208,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.1620589357410678,
      "omega": 1.1778555307843697,
      "success": true,
      "log_likelihood": -15.772950715570907,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.0,
      "omega": 0.1,
      "success": true,
      "log_likelihood": -12.275129878003387,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 4.211655053277175,
      "omega": 0.22937715427997177,
      "success": true,
      "log_likelihood": -17.24481404583709,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.6101264119861303,
      "omega": 0.8257290933739162,
      "success": true,
      "log_likelihood": -17.2381767795934,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5898444515761373,
      "omega": 2.0207362530245243,
      "success": true,
      "log_likelihood": -13.170029127588279,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.261087051209194,
      "omega": 0.9520153050111304,
      "success": true,
      "log_likelihood": -15.82408361011757,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.4613227606370755,
      "omega": 1.8503662523912587,
      "success": true,
      "log_likelihood": -13.424915677244877,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 2.625338021117427,
      "omega": 1.855184296171823,
      "success": true,
      "log_likelihood": -6.437117205768601,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.0,
      "omega": 0.1,
      "success": true,
      "log_likelihood": -11.750129878204175,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.2383906619040709,
      "omega": 1.513420790640808,
      "success": true,
      "log_likelihood": -16.158861269270062,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.0,
      "omega": 0.1,
      "success": true,
      "log_likelihood": -6.950129879456209,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 8.518844216310034,
      "omega": 0.15074198479757397,
      "success": true,
      "log_likelihood": -9.736884426034248,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 3.1433722875067205,
      "omega": 0.3561928171456724,
      "success": true,
      "log_likelihood": -21.063283893379488,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 2.8423930321709916,
      "omega": 0.6838884997405515,
      "success": true,
      "log_likelihood": -15.419136009764937,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.0,
      "omega": 0.1,
      "success": true,
      "log_likelihood": -6.9501298794562105,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.9847539951220226,
      "omega": 0.8602413768326527,
      "success": true,
      "log_likelihood": -15.018129337294356,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.0382747359616349,
      "omega": 3.302511593547262,
      "success": true,
      "log_likelihood": -10.84662746693855,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.6192841012628918,
      "omega": 1.8645338298443466,
      "success": true,
      "log_likelihood": -14.196976572971488,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5309582226223291,
      "omega": 1.3984363863495117,
      "success": true,
      "log_likelihood": -17.747008800260772,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.0,
      "omega": 0.1,
      "success": true,
      "log_likelihood": -10.850129878148211,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.4551672603414193,
      "omega": 1.7210026339947966,
      "success": true,
      "log_likelihood": -17.46467592324759,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 5.271462352627848,
      "omega": 0.449313208583662,
      "success": true,
      "log_likelihood": -12.386021993918398,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.0,
      "omega": 0.1,
      "success": true,
      "log_likelihood": -9.650129877974955,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.1443337652921857,
      "omega": 1.040949315852069,
      "success": true,
      "log_likelihood": -16.670101630323508,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.0046833872318631075,
      "omega": 5.0,
      "success": true,
      "log_likelihood": -14.165706653629723,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.2970558356401264,
      "omega": 1.3555484414048344,
      "success": true,
      "log_likelihood": -16.204985645785335,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.8931162500873667,
      "omega": 1.3883364446104658,
      "success": true,
      "log_likelihood": -15.69006810361273,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 3.5650628044391377,
      "omega": 0.380679293594441,
      "success": true,
      "log_likelihood": -17.70324757055218,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.06662177504994284,
      "omega": 5.0,
      "success": true,
      "log_likelihood": -9.248972219646005,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 3.0744324162725816,
      "omega": 0.1,
      "success": true,
      "log_likelihood": -22.57246446891536,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.0014844592575212606,
      "omega": 4.970024383975259,
      "success": true,
      "log_likelihood": -16.971261496156327,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 6.973343876445819,
      "omega": 0.16667096663628658,
      "success": true,
      "log_likelihood": -14.176901283007176,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.7727711955251575,
      "omega": 0.6518942012738843,
      "success": true,
      "log_likelihood": -18.985772067825238,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 2.5884652719121295,
      "omega": 0.1,
      "success": true,
      "log_likelihood": -20.20459969641684,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 3.054114821452718,
      "omega": 0.5826042101367402,
      "success": true,
      "log_likelihood": -20.302277821580436,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.9067479051980378,
      "omega": 2.887281230754218,
      "success": true,
      "log_likelihood": -6.674906692635855,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 2.857419952792228,
      "omega": 1.1364664767814268,
      "success": true,
      "log_likelihood": -11.280692024093177,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.0,
      "omega": 0.1,
      "success": true,
      "log_likelihood": -13.775129876771425,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 7.377036173154669,
      "omega": 0.22901406499556004,
      "success": true,
      "log_likelihood": -11.434050687836514,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.2899350158686329,
      "omega": 0.748100492347348,
      "success": true,
      "log_likelihood": -14.515951662869668,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.0350460073047694,
      "omega": 0.9344915682226816,
      "success": true,
      "log_likelihood": -19.941743811565882,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.3011274920320115,
      "omega": 1.2250708275076252,
      "success": true,
      "log_likelihood": -15.194005620001631,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 8.518842213099528,
      "omega": 0.15074463485839673,
      "success": true,
      "log_likelihood": -9.7368844259438,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 2.632648137763005,
      "omega": 0.4548065767883362,
      "success": true,
      "log_likelihood": -21.109269397131058,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 5.010088246261497,
      "omega": 0.5009620636335215,
      "success": true,
      "log_likelihood": -11.329265490021694,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.458951990098706,
      "omega": 0.8784971305574906,
      "success": true,
      "log_likelihood": -15.462639333688497,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.0,
      "omega": 0.1,
      "success": true,
      "log_likelihood": -10.400129878563996,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.0,
      "omega": 0.1,
      "success": true,
      "log_likelihood": -13.400129877080907,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.9189688820131634,
      "omega": 0.5497767877403543,
      "success": true,
      "log_likelihood": -16.242837714056932,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.0,
      "omega": 0.1,
      "success": true,
      "log_likelihood": -12.05012987694544,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 8.064265954939822,
      "omega": 0.3499788775216831,
      "success": true,
      "log_likelihood": -6.262682731222799,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 6.967684383615194,
      "omega": 0.16528007588746108,
      "success": true,
      "log_likelihood": -13.882424911077647,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.9449507370380027,
      "omega": 1.3018786177025523,
      "success": true,
      "log_likelihood": -16.066261567785762,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.323630872988101,
      "omega": 0.9541170126066542,
      "success": true,
      "log_likelihood": -15.286766883653712,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 2.700635387413771,
      "omega": 0.3794273757585594,
      "success": true,
      "log_likelihood": -21.802081142417062,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.008496750858491279,
      "omega": 4.5225594545957835,
      "success": true,
      "log_likelihood": -11.400429442493131,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.0,
      "omega": 0.1,
      "success": true,
      "log_likelihood": -9.725129878614155,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 10.0,
      "omega": 0.1,
      "success": true,
      "log_likelihood": -8.873191908638605,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 2.3627414372658,
      "omega": 0.1,
      "success": true,
      "log_likelihood": -21.49646019289231,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 8.518855756553487,
      "omega": 0.15074354600436643,
      "success": true,
      "log_likelihood": -9.736884425952555,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 2.8069853487180247,
      "omega": 0.22278386147581433,
      "success": true,
      "log_likelihood": -23.46071329130046,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.0,
      "omega": 0.1,
      "success": true,
      "log_likelihood": -12.20012987731324,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 6.892283228701647,
      "omega": 0.5013164813095997,
      "success": true,
      "log_likelihood": -10.539785100511393,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.7689444719687261,
      "omega": 1.4950151378909857,
      "success": true,
      "log_likelihood": -13.10672466240622,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 2.0757980143912502,
      "omega": 0.26938854533240225,
      "success": true,
      "log_likelihood": -25.389398960639106,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 7.096820985550182,
      "omega": 0.3423159230074753,
      "success": true,
      "log_likelihood": -11.351265985412521,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.25516328739377137,
      "omega": 1.7593228511291503,
      "success": true,
      "log_likelihood": -17.8745796696239,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 4.482715660439719,
      "omega": 0.6984283658038218,
      "success": true,
      "log_likelihood": -13.087559408057462,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.0,
      "omega": 0.1,
      "success": true,
      "log_likelihood": -9.050129878931928,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 2.6324318043064436,
      "omega": 0.4548358253284658,
      "success": true,
      "log_likelihood": -15.109269441857913,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.9899201026585144,
      "omega": 0.5837996409769659,
      "success": true,
      "log_likelihood": -21.180770044099738,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "phi": {
        "r": 0.7931922148533305,
        "p": 7.830857931903865e-23
      },
      "omega": {
        "r": 0.6545128710622409,
        "p": 1.519437813653137e-13
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 33.88767704500807,
  "bic_Control": 30.583889863740236,
  "bic_Cocaine": 36.84731972822718,
  "bic_error": "'ModelOutput' object has no attribute 'metrics'"
}