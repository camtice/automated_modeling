{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the given task. The model should obtain the utility, (not the probability of choosing an action).  Your goal is to eventually explore the entire space of possible explainations and mechanisms by which the observed behavior arises.\n\nYour model should use the given variables appropriately, but does not necessary need to use all or even most of the variables. Do not include the model for the utility of rejecting an offer. \n\nThe model should:\n1. Predict only responder behavior.\n2. Build on relevant psychological principles.\n3. Be considerate of high covariance between learnable parameters as the model\nwill have to pass parameter recovery tests.\n4. Be applicable to the dataset given within the task description (i.e. the model should be able to be run using only the provided dataset structure).\n5. Not include parameters to simulate general stochasticity of behavior, because this will be handled later by a temperature parameter.\n6. Should have no more than two learnable parameters.\n7. This specific model should calculate the utility of an action, which will then be used to determine\nthe probability of choosing that action. Negative values should represent a negative utility, and thus an unlikly action.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Use clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'. DO NOT USE 'lambda' AS A PARAMETER NAME.\n\nYou will be given the complete list of models that you have already created. Analyze the models, and notice the absence of possible explanations of behaviors that should be tested. You should start with simple obvious explanations, and as you notice these being thoroughly explored you should shift to fundamentally different models of behavior. Pay less attention to the names of the variables, and how they are actually interacting with the given behavioral data. Start with variables with no learnable parameters, and then shift to comprehensively explore the place with one learnable paramter, and then two, etc.\n\nYour results will be scored on a combination of BIC with a penalization for number of learned parameters, the ability to recover those learned parameters, and the ability of those parameters to account for the differences in behaviors among varying groups of people.\n\nPrevious Models:\nModel 1:\nSpecification: Let fair_share = (token_self / (token_self + token_opp)) \u00d7 combined_earning\nU_accept = split_self - [ alpha \u00d7 max( fair_share - split_self, 0 ) + beta \u00d7 max( split_self - fair_share, 0 ) ]\nSummary: A fairness-based utility model for responder behavior where the utility of accepting an offer equals the offered monetary gain minus a fairness penalty. The penalty is scaled by one parameter (alpha) when the offer falls short of the contribution-based fair share and by a second parameter (beta) when the offer exceeds it.\nModel 2:\nSpecification: Let \n\u2003F = (token_self / (token_self + token_opp)) \u00d7 combined_earning\n\nThen, the utility for accepting an offer is defined as:\n\u2003U_accept = split_self \u2212 { \u03b3 \u00d7 (F \u2212 split_self)\u00b2\u2003if\u2003split_self < F \n\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u03b4 \u00d7 (split_self \u2212 F)\u00b2\u2003otherwise }\n\u2003\u2003(Represented as a piecewise function)\nSummary: A fairness-based utility model for responder behavior that computes a fairness benchmark from token contributions. The model subtracts a quadratic penalty from the monetary offer, with two separate sensitivity parameters for disadvantageous (\u03b3) and advantageous (\u03b4) deviations from fairness. This directly produces the utility of accepting an offer.\nModel 3:\nSpecification: Let F = (token_self / (token_self + token_opp)) \u00d7 combined_earning  \nU_accept = split_self \u2212 phi \u00d7 |split_self \u2212 F|^(omega)\nSummary: A fairness-based utility model for responders where the utility of accepting an offer equals the monetary share (split_self) minus a penalty for deviating from a fairness benchmark computed from token contributions and combined earnings. The penalty is scaled by a learnable sensitivity parameter (phi) and raised to a power (omega) to capture nonlinear (diminishing or enhanced) sensitivity to fairness deviations.\nModel 4:\nSpecification: Let F = (token_self / (token_self + token_opp)) \u00d7 combined_earning  \nU_accept = ln(split_self) \u2212 lambda_param \u00d7 | ln(split_self / F) |\nSummary: This model computes the utility of accepting an offer for responders by combining subjective monetary value (expressed as the natural log of the offered share) with a penalty for deviating from a fairness benchmark calculated from token contributions. A single learnable parameter (lambda_param) scales the penalty, capturing sensitivity to fairness deviations.\nModel 5:\nSpecification: Let F = (token_self / (token_self + token_opp)) \u00d7 combined_earning\nLet d = (split_self / F) \u2212 1\nU_accept = split_self \u00d7 (1 \u2212 kappa \u00d7 |d|^(psi))\nSummary: A normalized discrepancy model for responder behavior. The model computes a fairness benchmark from token contributions and combined earnings and derives a normalized deviation of the offered share from this benchmark. The utility of accepting an offer is given by the offered monetary amount, reduced multiplicatively by a penalty that grows nonlinearly with the normalized deviation. Two learnable parameters (kappa and psi) scale and shape the penalty.\nModel 6:\nSpecification: Let F = (token_self / (token_self + token_opp)) * combined_earning  \nLet d = split_self - F  \nU_accept = ln(split_self) - [ theta * (max(-d, 0) / combined_earning) + delta * (max(d, 0) / combined_earning) ]\nSummary: A fairness-based utility model for responder behavior. The model computes the fairness benchmark (F) from token contributions and combined earnings, and then derives the subjective utility of accepting an offer as the logarithm of the monetary offer (split_self) reduced by normalized fairness penalties. Asymmetric penalties for disadvantageous (\u03b8) versus advantageous (\u03b4) deviations from fairness are applied, capturing potential loss aversion and guilt effects.\nModel 7:\nSpecification: Let F = (token_self / (token_self + token_opp)) * combined_earning  \nU_accept = split_self - kappa * max(F - split_self, 0)\nSummary: The model computes a fairness benchmark from token contributions and total earnings, then assigns the utility of an accepted offer as the offered monetary amount decreased by a penalty for disadvantageous deviations from this fairness benchmark. The penalty is active only when the offer is below the fair share, and its magnitude is scaled by a single learnable parameter (kappa).",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "learnable_parameters": {
    "kappa": {
      "description": "Learnable penalty strength parameter reflecting sensitivity to fairness deviations.",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": 0,
          "max": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "phi": {
      "description": "Learnable nonlinearity parameter controlling the curvature of the fairness penalty.",
      "range": {
        "min": 0.1,
        "max": 5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": 0.1,
          "max": 5
        }
      },
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "Let F = (token_self / (token_self + token_opp)) \u00d7 combined_earning  \nLet d = ln(split_self / F)  \nU_accept = ln(split_self) - kappa \u00d7 |d|^(phi)",
  "variable_descriptions": {
    "token_self": {
      "description": "Number of tokens found by the participant, used to compute the fairness benchmark.",
      "range": {
        "min": 0,
        "max": 1000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "discrete uniform",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent, used to compute the fairness benchmark.",
      "range": {
        "min": 0,
        "max": 1000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "discrete uniform",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "combined_earning": {
      "description": "The total money earned in the trial, calculated from tokens (each token is worth \u00a33).",
      "range": {
        "min": 0,
        "max": 10000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "discrete uniform",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "split_self": {
      "description": "The monetary share offered to the participant (in \u00a3).",
      "range": {
        "min": 0.01,
        "max": 10000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "continuous",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "kappa": {
      "description": "Learnable penalty strength parameter reflecting sensitivity to fairness deviations.",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": 0,
          "max": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "phi": {
      "description": "Learnable nonlinearity parameter controlling the curvature of the fairness penalty.",
      "range": {
        "min": 0.1,
        "max": 5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": 0.1,
          "max": 5
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "d": {
      "description": "Logarithmic deviation of the monetary offer from the fairness benchmark.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "F": {
      "description": "Fairness benchmark computed as the participant's proportional share of combined earnings.",
      "range": {
        "min": 0,
        "max": "combined_earning",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "U_accept": {
      "description": "The computed utility for accepting the offer. Negative values indicate an unlikely action.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "This model computes the utility of a responder accepting an offer as the logarithm of the offered monetary share minus a fairness penalty. The fairness benchmark is derived from the participant's token contribution relative to the total and the combined earnings. The penalty is a nonlinear function of the log deviation between split_self and the fairness benchmark, scaled by two learnable parameters: kappa (penalty strength) and phi (nonlinearity).",
  "full_reasoning": "Step-by-step reasoning:\n1. Key psychological mechanisms: We assume responders evaluate offers by comparing the actual monetary gain (split_self) to a fairness benchmark (F) based on their token contribution relative to the total tokens (token_self and token_opp) and the combined earning. In addition, perceptual distortions (e.g., the idea that perceived discrepancies operate on a logarithmic scale) motivate using a logarithmic transformation.\n2. Mechanism interaction: The fairness benchmark F is computed as the contribution\u2010weighted share of the joint earning. The log of the offered share represents the subjective value of the money, while deviations from the fairness benchmark (measured as the log ratio of split_self to F) detract from the overall utility. This captures that even a small multiplicative deviation (i.e. in ratio terms) from what is fair can have a nonlinear unfavorable effect.\n3. Mathematical form: We first compute F = (token_self/(token_self+token_opp))\u00d7combined_earning. Then we form the log-ratio discrepancy d = ln(split_self/F). The utility is given by the subjective monetary benefit ln(split_self) minus a penalty term kappa \u00d7 |d|^(phi); here kappa scales the penalty and phi controls the nonlinearity.\n4. Learnable parameters: There are two learnable parameters, kappa (penalty strength) and phi (nonlinearity exponent). Their bounds are set generously (e.g., kappa \u2265 0 and phi > 0) to allow for a wide range of fitted behaviors.\n5. Mapping to observable behavior: The responder\u2019s decision (accepting or rejecting an offer) is linked to the utility computed from the offered money and the fairness deviation. The model predicts that offers close to the fairness benchmark (making d near zero) yield high utilities (after the log transformation of split_self), whereas departures are penalized according to the fitted values of kappa and phi.\n\nBelow is the formal specification:\n\n<MODEL>\nLet F = (token_self / (token_self + token_opp)) \u00d7 combined_earning  \nLet d = ln(split_self / F)  \nU_accept = ln(split_self) - kappa \u00d7 |d|^(phi)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant, used to compute the fairness benchmark.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"discrete uniform\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent, used to compute the fairness benchmark.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"discrete uniform\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"The total money earned in the trial, calculated from tokens (each token is worth \u00a33).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"discrete uniform\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_self\": {\n      \"description\": \"The monetary share offered to the participant (in \u00a3).\",\n      \"range\": {\n        \"min\": 0.01,\n        \"max\": 10000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"continuous\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"kappa\": {\n      \"description\": \"Learnable penalty strength parameter reflecting sensitivity to fairness deviations.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Learnable nonlinearity parameter controlling the curvature of the fairness penalty.\",\n      \"range\": {\n        \"min\": 0.1,\n        \"max\": 5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0.1,\n          \"max\": 5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"d\": {\n      \"description\": \"Logarithmic deviation of the monetary offer from the fairness benchmark.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"F\": {\n      \"description\": \"Fairness benchmark computed as the participant's proportional share of combined earnings.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"combined_earning\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"U_accept\": {\n      \"description\": \"The computed utility for accepting the offer. Negative values indicate an unlikely action.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<SUMMARY>\nThis model computes the utility of a responder accepting an offer as the logarithm of the offered monetary share minus a fairness penalty. The fairness benchmark is derived from the participant's token contribution relative to the total and the combined earnings. The penalty is a nonlinear function of the log deviation between split_self and the fairness benchmark, scaled by two learnable parameters: kappa (penalty strength) and phi (nonlinearity). \n</SUMMARY>",
  "simulation_code": "def simulate_model(trial_data, kappa=1, phi=1):\n    utility_values = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n        split_self = trial.get(\"split_self\", 0)\n\n        # Calculate F (fairness benchmark)\n        F = (token_self / (token_self + token_opp)) * combined_earning if (token_self + token_opp) > 0 else 0\n        \n        # Calculate d (logarithmic deviation)\n        d = math.log(split_self / F) if F > 0 else float('-inf')  # Avoid log(0) error\n        \n        # Calculate utility U_accept\n        U_accept = math.log(split_self) - kappa * abs(d) ** phi if split_self > 0 else float('-inf')  # Avoid log(0) error\n        \n        utility_values.append(U_accept)\n    \n    return utility_values",
  "fitting_results": [
    {
      "kappa": 8.349097434628677,
      "phi": 0.2456242087525204,
      "success": true,
      "log_likelihood": -8.564893663944837,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 4.505335617889486,
      "phi": 1.7743999969765,
      "success": true,
      "log_likelihood": -18.55348929424525,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 10.0,
      "phi": 3.5416449979509137,
      "success": true,
      "log_likelihood": -14.1225884142745,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 10.0,
      "phi": 2.6199912994836403,
      "success": true,
      "log_likelihood": -14.944226945258514,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 10.0,
      "phi": 2.397536644212128,
      "success": true,
      "log_likelihood": -14.724228229123193,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 3.253714879941958,
      "phi": 3.713482774483935,
      "success": true,
      "log_likelihood": -17.577513669196655,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 0.0,
      "phi": 0.1,
      "success": true,
      "log_likelihood": -16.23601971009974,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 3.828038921992703,
      "phi": 5.0,
      "success": true,
      "log_likelihood": -16.77474011033384,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 0.0,
      "phi": 0.1,
      "success": true,
      "log_likelihood": -16.236019710099743,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 10.0,
      "phi": 2.0006347580618997,
      "success": true,
      "log_likelihood": -13.78662401655969,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 10.0,
      "phi": 2.205254056868791,
      "success": true,
      "log_likelihood": -11.825992364573388,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 10.0,
      "phi": 0.574467588749982,
      "success": true,
      "log_likelihood": -9.71321732615564,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 10.0,
      "phi": 1.9666680913430803,
      "success": true,
      "log_likelihood": -14.21750135207466,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 0.0,
      "phi": 0.1,
      "success": true,
      "log_likelihood": -16.23601971009974,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 0.0,
      "phi": 0.36610996934607226,
      "success": true,
      "log_likelihood": -16.236019710099743,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 0.0,
      "phi": 0.1,
      "success": true,
      "log_likelihood": -16.236019710099743,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 0.0,
      "phi": 0.1,
      "success": true,
      "log_likelihood": -16.236019710099747,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 0.7224911788271403,
      "phi": 5.0,
      "success": true,
      "log_likelihood": -15.194510663506012,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 0.27406764545746837,
      "phi": 5.0,
      "success": true,
      "log_likelihood": -16.69536507168331,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 0.0,
      "phi": 0.1,
      "success": true,
      "log_likelihood": -16.236019710099747,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 4.234372429799047,
      "phi": 2.1512442096192306,
      "success": true,
      "log_likelihood": -18.385000252585463,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 0.42360993439468025,
      "phi": 5.0,
      "success": true,
      "log_likelihood": -16.60559130195466,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 10.0,
      "phi": 2.7669984793579325,
      "success": true,
      "log_likelihood": -15.753695050791967,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 3.9273028955678306,
      "phi": 2.021191482655861,
      "success": true,
      "log_likelihood": -18.392256124580598,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 5.3547364919196205,
      "phi": 2.0195720270740156,
      "success": true,
      "log_likelihood": -18.49695713370064,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 3.9595750242063414,
      "phi": 2.4275530701046675,
      "success": true,
      "log_likelihood": -17.480670708330916,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 7.2886378286940285,
      "phi": 3.8292624072833403,
      "success": true,
      "log_likelihood": -15.853931079547088,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 10.0,
      "phi": 1.2052116906233152,
      "success": true,
      "log_likelihood": -10.549045679960733,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 0.0,
      "phi": 0.1,
      "success": true,
      "log_likelihood": -17.922418663319853,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 0.13881631814133175,
      "phi": 5.0,
      "success": true,
      "log_likelihood": -19.80209396685706,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 0.0,
      "phi": 5.0,
      "success": true,
      "log_likelihood": -16.236019710099743,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 8.349066257300525,
      "phi": 0.24561402353972422,
      "success": true,
      "log_likelihood": -8.564893663826233,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 5.285106141348802,
      "phi": 2.1837095951355887,
      "success": true,
      "log_likelihood": -19.263066778765772,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 10.0,
      "phi": 2.2925564242228407,
      "success": true,
      "log_likelihood": -14.707447480831044,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 0.0,
      "phi": 0.1,
      "success": true,
      "log_likelihood": -16.236019710099747,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 3.8178973478569787,
      "phi": 5.0,
      "success": true,
      "log_likelihood": -15.976671876383232,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 4.237425416931345,
      "phi": 5.0,
      "success": true,
      "log_likelihood": -15.414643422495539,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 5.303970610724728,
      "phi": 2.0449494588090222,
      "success": true,
      "log_likelihood": -18.06965305355147,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 1.0688944334049397,
      "phi": 5.0,
      "success": true,
      "log_likelihood": -19.642967759443902,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 0.0,
      "phi": 5.0,
      "success": true,
      "log_likelihood": -17.484684294727582,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 1.6078278665001233,
      "phi": 5.0,
      "success": true,
      "log_likelihood": -20.4358380921859,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 10.0,
      "phi": 1.0039371060073037,
      "success": true,
      "log_likelihood": -12.690408967981464,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 0.0,
      "phi": 2.2250481187473508,
      "success": true,
      "log_likelihood": -17.079219186695507,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 6.95434548582239,
      "phi": 5.0,
      "success": true,
      "log_likelihood": -16.784065397978313,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 4.9623821863112,
      "phi": 5.0,
      "success": true,
      "log_likelihood": -16.765874641696755,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 0.7079353490043426,
      "phi": 5.0,
      "success": true,
      "log_likelihood": -18.062804263375327,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 4.509214513076974,
      "phi": 2.2960326379135796,
      "success": true,
      "log_likelihood": -18.212065080687594,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 4.303606653304946,
      "phi": 0.8879700415494962,
      "success": true,
      "log_likelihood": -19.461089867484972,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 7.197418611900322,
      "phi": 1.6902719517204516,
      "success": true,
      "log_likelihood": -17.39068621770632,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 1.3601812866493166,
      "phi": 0.3050903311447562,
      "success": true,
      "log_likelihood": -23.308666553935442,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 0.5922709728463126,
      "phi": 2.8020440483482107,
      "success": true,
      "log_likelihood": -20.706903312046695,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 7.135907217968577,
      "phi": 0.38182544950880415,
      "success": true,
      "log_likelihood": -12.87814897679854,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 3.768689419351334,
      "phi": 2.4815784370263807,
      "success": true,
      "log_likelihood": -18.572252260310492,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 0.9776710105280112,
      "phi": 5.0,
      "success": true,
      "log_likelihood": -20.587406479584654,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 3.9826506744407575,
      "phi": 0.7617459080776261,
      "success": true,
      "log_likelihood": -20.950163638367496,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 10.0,
      "phi": 1.5092980103107072,
      "success": true,
      "log_likelihood": -11.250027897617642,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 10.0,
      "phi": 1.3768709481330181,
      "success": true,
      "log_likelihood": -12.44538140396166,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 0.0,
      "phi": 0.1,
      "success": true,
      "log_likelihood": -18.51430371168255,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 9.31916092330714,
      "phi": 0.5129101644165899,
      "success": true,
      "log_likelihood": -10.287884528264021,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 0.005260079077224005,
      "phi": 4.996302506395569,
      "success": true,
      "log_likelihood": -18.5869081424695,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 1.384969311847127,
      "phi": 1.419879665338924,
      "success": true,
      "log_likelihood": -21.888483006016603,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 4.39872345080881,
      "phi": 1.521611527834773,
      "success": true,
      "log_likelihood": -18.74062582000937,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 8.349259247771194,
      "phi": 0.24563960433293486,
      "success": true,
      "log_likelihood": -8.564893665924401,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 3.611970397143213,
      "phi": 1.4198212092340243,
      "success": true,
      "log_likelihood": -20.523911946219403,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 10.0,
      "phi": 1.0851689255501866,
      "success": true,
      "log_likelihood": -11.999874546549096,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 3.997389391902805,
      "phi": 2.0377009415109315,
      "success": true,
      "log_likelihood": -17.57035242572317,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 0.0,
      "phi": 5.0,
      "success": true,
      "log_likelihood": -17.42579277691817,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 0.12619477409340435,
      "phi": 5.0,
      "success": true,
      "log_likelihood": -18.046818480428467,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 5.772512111745254,
      "phi": 5.0,
      "success": true,
      "log_likelihood": -16.685219081594607,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 0.0,
      "phi": 1.0847936386354504,
      "success": true,
      "log_likelihood": -17.86352714548766,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 10.0,
      "phi": 0.41197318171587527,
      "success": true,
      "log_likelihood": -7.359046685733513,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 7.325778488816297,
      "phi": 0.4117930648171354,
      "success": true,
      "log_likelihood": -12.660637438165494,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 3.089648477214365,
      "phi": 1.4027815112992787,
      "success": true,
      "log_likelihood": -20.05129284747712,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 0.22628339189870159,
      "phi": 2.7531898534276835,
      "success": true,
      "log_likelihood": -19.055416255407184,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 2.2587576638271694,
      "phi": 0.6772843250372501,
      "success": true,
      "log_likelihood": -22.658846934190095,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 2.0662495884420875,
      "phi": 5.0,
      "success": true,
      "log_likelihood": -17.80499430428368,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 0.0,
      "phi": 0.1,
      "success": true,
      "log_likelihood": -17.190790962340326,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 8.690075828126318,
      "phi": 0.1,
      "success": true,
      "log_likelihood": -6.85596895123616,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 0.5909243515255701,
      "phi": 0.3838590610621128,
      "success": true,
      "log_likelihood": -22.799772440693282,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 8.349033013337454,
      "phi": 0.24561418347435174,
      "success": true,
      "log_likelihood": -8.564893663623037,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 0.7515460647484324,
      "phi": 5.0,
      "success": true,
      "log_likelihood": -23.00398592498276,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 0.0,
      "phi": 5.0,
      "success": true,
      "log_likelihood": -18.01357944168378,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 10.0,
      "phi": 0.5976618170232179,
      "success": true,
      "log_likelihood": -9.157476479080069,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 10.0,
      "phi": 3.477837962354625,
      "success": true,
      "log_likelihood": -12.837772522669274,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 0.5860397368102817,
      "phi": 0.47091985562350025,
      "success": true,
      "log_likelihood": -23.92691557279813,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 9.978487479507569,
      "phi": 0.5744857801523712,
      "success": true,
      "log_likelihood": -10.209931987473512,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 0.27829352880781283,
      "phi": 5.0,
      "success": true,
      "log_likelihood": -20.881368685088063,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 10.0,
      "phi": 1.0678228475804117,
      "success": true,
      "log_likelihood": -11.92738837297076,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 0.0,
      "phi": 5.0,
      "success": true,
      "log_likelihood": -16.935378150514683,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 10.0,
      "phi": 3.855705523325316,
      "success": true,
      "log_likelihood": -14.236000073130075,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 0.0,
      "phi": 0.39170327840758745,
      "success": true,
      "log_likelihood": -21.97650548683738,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "kappa": {
        "r": 0.7715175459586632,
        "p": 5.8571318458436344e-21
      },
      "phi": {
        "r": 0.6153487943926133,
        "p": 9.606692539036017e-12
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 39.77302287690257,
  "bic_Control": 38.859606390881694,
  "bic_Cocaine": 40.59129181229628,
  "bic_error": "'ModelOutput' object has no attribute 'metrics'"
}