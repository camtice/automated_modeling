{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the given task. The model should obtain the utility, (not the probability of choosing an action).  Your goal is to eventually explore the entire space of possible explainations and mechanisms by which the observed behavior arises.\n\nYour model should use the given variables appropriately, but does not necessary need to use all or even most of the variables. Do not include the model for the utility of rejecting an offer. \n\nThe model should:\n1. Predict only responder behavior.\n2. Build on relevant psychological principles.\n3. Be considerate of high covariance between learnable parameters as the model\nwill have to pass parameter recovery tests.\n4. Be applicable to the dataset given within the task description (i.e. the model should be able to be run using only the provided dataset structure).\n5. Not include parameters to simulate general stochasticity of behavior, because this will be handled later by a temperature parameter.\n6. Should have no more than two learnable parameters.\n7. This specific model should calculate the utility of an action, which will then be used to determine\nthe probability of choosing that action. Negative values should represent a negative utility, and thus an unlikly action.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Use clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'. DO NOT USE 'lambda' AS A PARAMETER NAME.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "\n        Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n        Desired Output Specification: Design a computational model for the given task. The model should obtain the utility, (not the probability of choosing an action).  Your goal is to eventually explore the entire space of possible explainations and mechanisms by which the observed behavior arises.\n\nYour model should use the given variables appropriately, but does not necessary need to use all or even most of the variables. Do not include the model for the utility of rejecting an offer. \n\nThe model should:\n1. Predict only responder behavior.\n2. Build on relevant psychological principles.\n3. Be considerate of high covariance between learnable parameters as the model\nwill have to pass parameter recovery tests.\n4. Be applicable to the dataset given within the task description (i.e. the model should be able to be run using only the provided dataset structure).\n5. Not include parameters to simulate general stochasticity of behavior, because this will be handled later by a temperature parameter.\n6. Should have no more than two learnable parameters.\n7. This specific model should calculate the utility of an action, which will then be used to determine\nthe probability of choosing that action. Negative values should represent a negative utility, and thus an unlikly action.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Use clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'. DO NOT USE 'lambda' AS A PARAMETER NAME.\n\n        Please think through this step by step, then provide your model specification and variable descriptions.\n        ",
      "output": "Step-by-step reasoning:\n\u2022 Key psychological mechanisms: Responders evaluate offers by comparing the proposed share (split_self) with what they consider \"fair\". Fairness is derived from the participant\u2019s contribution (token_self) relative to the total contributions (token_self + token_opp) scaled by the total money available (combined_earning). A deviation from this fairness reference yields a gain (if above the fairness share) or a loss (if below).\n\u2022 Mechanism interaction: The fairness comparison is used to compute a \u201cfair share\u201d reference. The difference between the offered share and that fair share is then weighted by a sensitivity parameter. Additionally, a baseline bias parameter may capture an overall tendency to accept or reject independent of fairness.\n\u2022 Mathematical form: First, compute the fair share F as F = (token_self / (token_self + token_opp)) \u00d7 combined_earning. Then, the utility of accepting the offer (U_accept) is a weighted combination of the deviation from fairness and an intercept (bias): U_accept = bias + fairness_weight \u00d7 (split_self \u2013 F). More positive utility indicates a higher likelihood of acceptance. (Note we do not include a model for the utility of rejecting.)\n\u2022 Parameter calibration: The model has two learnable parameters\u2014bias and fairness_weight. These parameters will be calibrated against the observed choices. Generous but finite bounds ensure parameter recovery without overparameterization.\n\u2022 Correspondence to observable behavior: The observed variables token_self, token_opp, combined_earning, and split_self from the dataset are used to compute the utility. The two learnable parameters (bias and fairness_weight) are the only free parameters and determine how deviations from the fair share influence the accept decision.\n\nBelow is the formal specification:\n\n<MODEL>\nLet F = (token_self / (token_self + token_opp)) * combined_earning\nU_accept = bias + fairness_weight * (split_self - F)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_accept\": {\n      \"description\": \"Calculated utility of accepting an offer, where negative values indicate less likely acceptance.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"bias\": {\n      \"description\": \"Baseline bias parameter capturing an overall acceptance tendency.\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"fairness_weight\": {\n      \"description\": \"Sensitivity to the deviation of the offered share from the fair share.\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens obtained by the participant, indicating their contribution.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens obtained by the opponent, used for fairness reference.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total amount of money available to be split, proportional to tokens found.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_self\": {\n      \"description\": \"The monetary share offered to the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<SUMMARY>\nA two-parameter utility model for responder behavior that computes a fair share reference based on relative contributions and combined earnings. The utility of accepting is given as an intercept (bias) plus a fairness sensitivity (fairness_weight) multiplied by the difference between the offered share and the calculated fair share.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return the utility values for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['bias', 'fairness_weight']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                5. Returns a list of utility values for each trial\n\n                Your code will be implemented within the following code block:\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    utility_values = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        utility_values.append(beta + (epsilon * E) + (eta * N))\n    return utility_values\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE UTLITY VALUES.\n                Model Specification:\n                Let F = (token_self / (token_self + token_opp)) * combined_earning\nU_accept = bias + fairness_weight * (split_self - F)\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"U_accept\": {\n      \"description\": \"Calculated utility of accepting an offer, where negative values indicate less likely acceptance.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"bias\": {\n      \"description\": \"Baseline bias parameter capturing an overall acceptance tendency.\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"fairness_weight\": {\n      \"description\": \"Sensitivity to the deviation of the offered share from the fair share.\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens obtained by the participant, indicating their contribution.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens obtained by the opponent, used for fairness reference.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total amount of money available to be split, proportional to tokens found.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_self\": {\n      \"description\": \"The monetary share offered to the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "Here's the Python code implementing the desired mathematical model based on the specifications provided:\n\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, bias=0, fairness_weight=0):\n    utility_values = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n        split_self = trial.get(\"split_self\", 0)\n        \n        # Calculate fair share F\n        if (token_self + token_opp) > 0:\n            F = (token_self / (token_self + token_opp)) * combined_earning\n        else:\n            F = 0  # If both tokens are zero, F should be zero\n\n        # Calculate the utility of accepting the offer\n        U_accept = bias + fairness_weight * (split_self - F)\n        utility_values.append(U_accept)\n    \n    return utility_values\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n```\n\n### Notes:\n1. **Function Parameters**: The function `simulate_model` takes two optional parameters, `bias` and `fairness_weight`, both defaulting to 0. These can be set as needed when calling the function.\n   \n2. **Fair Share Calculation**: The fair share \\( F \\) is computed as specified. If both `token_self` and `token_opp` are zero, \\( F \\) is set to zero to avoid division by zero.\n\n3. **Utility Calculation**: The utility \\( U_{\\text{accept}} \\) is calculated for each trial based on the provided formula, and the results are collected in a list which is returned after processing all trials.\n\n4. **JSON Handling**: The function assumes that the input data is properly formatted JSON, which is converted to a list of dictionaries using `json.loads()`.\n\nFeel free to adjust the bias and fairness_weight parameters as needed when invoking the function, based on the learning process of your model."
    }
  ],
  "learnable_parameters": {
    "bias": {
      "description": "Baseline bias parameter capturing an overall acceptance tendency.",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "fairness_weight": {
      "description": "Sensitivity to the deviation of the offered share from the fair share.",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "Let F = (token_self / (token_self + token_opp)) * combined_earning\nU_accept = bias + fairness_weight * (split_self - F)",
  "variable_descriptions": {
    "U_accept": {
      "description": "Calculated utility of accepting an offer, where negative values indicate less likely acceptance.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "bias": {
      "description": "Baseline bias parameter capturing an overall acceptance tendency.",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "fairness_weight": {
      "description": "Sensitivity to the deviation of the offered share from the fair share.",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "token_self": {
      "description": "Number of tokens obtained by the participant, indicating their contribution.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens obtained by the opponent, used for fairness reference.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "combined_earning": {
      "description": "Total amount of money available to be split, proportional to tokens found.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "split_self": {
      "description": "The monetary share offered to the participant.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    }
  },
  "model_summary": "A two-parameter utility model for responder behavior that computes a fair share reference based on relative contributions and combined earnings. The utility of accepting is given as an intercept (bias) plus a fairness sensitivity (fairness_weight) multiplied by the difference between the offered share and the calculated fair share.",
  "full_reasoning": "Step-by-step reasoning:\n\u2022 Key psychological mechanisms: Responders evaluate offers by comparing the proposed share (split_self) with what they consider \"fair\". Fairness is derived from the participant\u2019s contribution (token_self) relative to the total contributions (token_self + token_opp) scaled by the total money available (combined_earning). A deviation from this fairness reference yields a gain (if above the fairness share) or a loss (if below).\n\u2022 Mechanism interaction: The fairness comparison is used to compute a \u201cfair share\u201d reference. The difference between the offered share and that fair share is then weighted by a sensitivity parameter. Additionally, a baseline bias parameter may capture an overall tendency to accept or reject independent of fairness.\n\u2022 Mathematical form: First, compute the fair share F as F = (token_self / (token_self + token_opp)) \u00d7 combined_earning. Then, the utility of accepting the offer (U_accept) is a weighted combination of the deviation from fairness and an intercept (bias): U_accept = bias + fairness_weight \u00d7 (split_self \u2013 F). More positive utility indicates a higher likelihood of acceptance. (Note we do not include a model for the utility of rejecting.)\n\u2022 Parameter calibration: The model has two learnable parameters\u2014bias and fairness_weight. These parameters will be calibrated against the observed choices. Generous but finite bounds ensure parameter recovery without overparameterization.\n\u2022 Correspondence to observable behavior: The observed variables token_self, token_opp, combined_earning, and split_self from the dataset are used to compute the utility. The two learnable parameters (bias and fairness_weight) are the only free parameters and determine how deviations from the fair share influence the accept decision.\n\nBelow is the formal specification:\n\n<MODEL>\nLet F = (token_self / (token_self + token_opp)) * combined_earning\nU_accept = bias + fairness_weight * (split_self - F)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_accept\": {\n      \"description\": \"Calculated utility of accepting an offer, where negative values indicate less likely acceptance.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"bias\": {\n      \"description\": \"Baseline bias parameter capturing an overall acceptance tendency.\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"fairness_weight\": {\n      \"description\": \"Sensitivity to the deviation of the offered share from the fair share.\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens obtained by the participant, indicating their contribution.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens obtained by the opponent, used for fairness reference.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total amount of money available to be split, proportional to tokens found.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_self\": {\n      \"description\": \"The monetary share offered to the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<SUMMARY>\nA two-parameter utility model for responder behavior that computes a fair share reference based on relative contributions and combined earnings. The utility of accepting is given as an intercept (bias) plus a fairness sensitivity (fairness_weight) multiplied by the difference between the offered share and the calculated fair share.\n</SUMMARY>",
  "simulation_code": "def simulate_model(trial_data, bias=0, fairness_weight=0):\n    utility_values = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n        split_self = trial.get(\"split_self\", 0)\n        \n        # Calculate fair share F\n        if (token_self + token_opp) > 0:\n            F = (token_self / (token_self + token_opp)) * combined_earning\n        else:\n            F = 0  # If both tokens are zero, F should be zero\n\n        # Calculate the utility of accepting the offer\n        U_accept = bias + fairness_weight * (split_self - F)\n        utility_values.append(U_accept)\n    \n    return utility_values",
  "fitting_results": [
    {
      "bias": -2.1047168357410544,
      "fairness_weight": 2.492681305350143,
      "success": true,
      "log_likelihood": -6.94594686344893,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 4.1003036191756115,
      "fairness_weight": 1.7278246287902892,
      "success": true,
      "log_likelihood": -17.727907817284763,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 6.962101449195695,
      "fairness_weight": 2.739638381933944,
      "success": true,
      "log_likelihood": -13.107441176818252,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 2.9578615324356794,
      "fairness_weight": 1.672976608877468,
      "success": true,
      "log_likelihood": -17.786906214925345,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 7.999133979904044,
      "fairness_weight": 4.004049984672059,
      "success": true,
      "log_likelihood": -9.27763821521329,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 7.652696786752785,
      "fairness_weight": 2.3275228212472734,
      "success": true,
      "log_likelihood": -14.154414917005937,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 10.0,
      "fairness_weight": -1.8489118161126312,
      "success": true,
      "log_likelihood": -0.09310540135941878,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 10.0,
      "fairness_weight": 2.9256684609833363,
      "success": true,
      "log_likelihood": -11.717110932602242,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 10.0,
      "fairness_weight": -1.848948941180612,
      "success": true,
      "log_likelihood": -0.09310540142850213,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 4.598781271809613,
      "fairness_weight": 2.7875410770207556,
      "success": true,
      "log_likelihood": -12.862871173445017,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 7.1396177826853515,
      "fairness_weight": 3.5653487797608574,
      "success": true,
      "log_likelihood": -10.409889013311508,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": -1.3467689818202657,
      "fairness_weight": 2.2743181968475743,
      "success": true,
      "log_likelihood": -8.68889636199183,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 6.595353683637389,
      "fairness_weight": 3.612665113585382,
      "success": true,
      "log_likelihood": -10.345057585892937,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 10.0,
      "fairness_weight": -1.8488795054474043,
      "success": true,
      "log_likelihood": -0.093105401340934,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 10.0,
      "fairness_weight": -1.848879423784958,
      "success": true,
      "log_likelihood": -0.09310540134093723,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 10.0,
      "fairness_weight": -1.8488807070478062,
      "success": true,
      "log_likelihood": -0.09310540134092787,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 10.0,
      "fairness_weight": -1.8488781328314954,
      "success": true,
      "log_likelihood": -0.09310540134100799,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 8.756474083134941,
      "fairness_weight": 1.5412344018479958,
      "success": true,
      "log_likelihood": -10.880230880744083,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 10.0,
      "fairness_weight": 1.776066583547218,
      "success": true,
      "log_likelihood": -6.9013526413356505,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 10.0,
      "fairness_weight": -1.8488829028703473,
      "success": true,
      "log_likelihood": -0.09310540134105523,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 6.583052793108352,
      "fairness_weight": 2.413445728327038,
      "success": true,
      "log_likelihood": -14.350358455320679,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 10.0,
      "fairness_weight": 1.909681620904117,
      "success": true,
      "log_likelihood": -8.583655811020945,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 1.037672882815895,
      "fairness_weight": 1.0064003261378007,
      "success": true,
      "log_likelihood": -20.509982270274733,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 3.360479145048049,
      "fairness_weight": 1.285597879538375,
      "success": true,
      "log_likelihood": -20.017931526730703,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 8.389156388998817,
      "fairness_weight": 3.552670741141556,
      "success": true,
      "log_likelihood": -10.386554197816421,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 4.833955098886658,
      "fairness_weight": 1.6140859191098231,
      "success": true,
      "log_likelihood": -17.907879339996594,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 5.274383044174139,
      "fairness_weight": 1.9145357205889861,
      "success": true,
      "log_likelihood": -16.605839661784756,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 7.907775492686136,
      "fairness_weight": 7.965755796923899,
      "success": true,
      "log_likelihood": -5.650778496054449,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 10.0,
      "fairness_weight": 1.7249020099613437,
      "success": true,
      "log_likelihood": -8.082969191973422,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 7.2695599460924365,
      "fairness_weight": 1.5547155405505795,
      "success": true,
      "log_likelihood": -14.247671341148783,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 10.0,
      "fairness_weight": -1.8488808797478518,
      "success": true,
      "log_likelihood": -0.09310540134093075,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": -2.1047447322117248,
      "fairness_weight": 2.4926986586166526,
      "success": true,
      "log_likelihood": -6.945946863560571,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 0.9932944950372685,
      "fairness_weight": 0.7244133549574207,
      "success": true,
      "log_likelihood": -22.583936653884564,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 2.670368576637208,
      "fairness_weight": 1.7028186004064338,
      "success": true,
      "log_likelihood": -17.422282808761977,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 10.0,
      "fairness_weight": -1.848775102283743,
      "success": true,
      "log_likelihood": -0.09310540154614295,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 3.5593830984522468,
      "fairness_weight": 0.9229421839952077,
      "success": true,
      "log_likelihood": -20.74013254371072,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 8.60846419041693,
      "fairness_weight": 2.344517283129182,
      "success": true,
      "log_likelihood": -13.387091503285221,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 5.982991393056974,
      "fairness_weight": 2.531517405255593,
      "success": true,
      "log_likelihood": -13.96648152282849,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 6.227027012599301,
      "fairness_weight": 1.727611178768858,
      "success": true,
      "log_likelihood": -16.278960552748558,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 8.59684406485802,
      "fairness_weight": 1.1504778863913478,
      "success": true,
      "log_likelihood": -8.688056556908021,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 6.336934987527974,
      "fairness_weight": 2.0237517611390463,
      "success": true,
      "log_likelihood": -15.682962370770902,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 1.0107817523170406,
      "fairness_weight": 2.254575127998482,
      "success": true,
      "log_likelihood": -12.589534382759044,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 8.885702064161752,
      "fairness_weight": 0.5949088844513607,
      "success": true,
      "log_likelihood": -4.39235697407945,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 3.779468873403301,
      "fairness_weight": 1.3334235752824717,
      "success": true,
      "log_likelihood": -19.60868909616307,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 5.55759951607185,
      "fairness_weight": 1.749974813853953,
      "success": true,
      "log_likelihood": -16.953069946546655,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 3.939308584393864,
      "fairness_weight": 0.7485413621793134,
      "success": true,
      "log_likelihood": -19.504296040204967,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 4.702987212641246,
      "fairness_weight": 1.8327623315200159,
      "success": true,
      "log_likelihood": -17.131278362052306,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 1.3900025444030377,
      "fairness_weight": 1.0408525485043105,
      "success": true,
      "log_likelihood": -20.747610246396818,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 8.305796240707394,
      "fairness_weight": 4.585799350979119,
      "success": true,
      "log_likelihood": -8.219775067573941,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 0.8048941521188214,
      "fairness_weight": 0.23921654830968045,
      "success": true,
      "log_likelihood": -24.655360756249618,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 4.4667436157317475,
      "fairness_weight": 1.0312194526615162,
      "success": true,
      "log_likelihood": -19.008627506864677,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": -1.5660343216434847,
      "fairness_weight": 1.2262728879599252,
      "success": true,
      "log_likelihood": -12.388751843312118,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 2.2735207199997682,
      "fairness_weight": 0.8402723683131321,
      "success": true,
      "log_likelihood": -22.38076536907109,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 1.3742189129838702,
      "fairness_weight": 0.2843510115192513,
      "success": true,
      "log_likelihood": -24.11718370181535,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 2.2195558331313836,
      "fairness_weight": 1.4639999293457067,
      "success": true,
      "log_likelihood": -18.607051473742224,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 6.35840507943678,
      "fairness_weight": 4.861928043128626,
      "success": true,
      "log_likelihood": -8.255887478377273,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 2.8872459532917425,
      "fairness_weight": 3.0345680933253307,
      "success": true,
      "log_likelihood": -11.47736133459924,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 2.4595212059875395,
      "fairness_weight": -0.9479204884727976,
      "success": true,
      "log_likelihood": -11.388035783166055,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": -1.5044244736353758,
      "fairness_weight": 2.011820597399562,
      "success": true,
      "log_likelihood": -9.170070994707718,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 4.447279995631091,
      "fairness_weight": 0.5827859330133074,
      "success": true,
      "log_likelihood": -16.830350451519195,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 3.706161434889342,
      "fairness_weight": 1.0809491388201566,
      "success": true,
      "log_likelihood": -20.379403814443915,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 5.775896775140711,
      "fairness_weight": 2.4433505206121384,
      "success": true,
      "log_likelihood": -14.339499017644464,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": -2.1047296112778544,
      "fairness_weight": 2.4926802866816202,
      "success": true,
      "log_likelihood": -6.945946863390906,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 1.3194040267455789,
      "fairness_weight": 0.757517523459243,
      "success": true,
      "log_likelihood": -22.67274768389314,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 1.1406102817511792,
      "fairness_weight": 2.3801965930248774,
      "success": true,
      "log_likelihood": -12.242090361742449,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 4.130106470863405,
      "fairness_weight": 1.470757532532333,
      "success": true,
      "log_likelihood": -18.873257947815144,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 9.572587841510598,
      "fairness_weight": 1.386331916454811,
      "success": true,
      "log_likelihood": -8.118797098794646,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 9.06271179129883,
      "fairness_weight": 1.6194196411047672,
      "success": true,
      "log_likelihood": -10.643255976666298,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 2.678115720613006,
      "fairness_weight": 0.8984810618886405,
      "success": true,
      "log_likelihood": -21.92603630115556,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 6.703859599901336,
      "fairness_weight": 0.6477640473972277,
      "success": true,
      "log_likelihood": -9.754721097779079,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 1.0831637573468553,
      "fairness_weight": 10.0,
      "success": true,
      "log_likelihood": -1.8106256685308717,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": -1.3596830032399652,
      "fairness_weight": 1.4187251793149394,
      "success": true,
      "log_likelihood": -11.89372640024662,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 4.0935088526141845,
      "fairness_weight": 1.584904183624722,
      "success": true,
      "log_likelihood": -18.40991209779963,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 4.252728126387643,
      "fairness_weight": 0.6367113636787624,
      "success": true,
      "log_likelihood": -17.906616287972273,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 1.3127644175699686,
      "fairness_weight": 0.5441226218720187,
      "success": true,
      "log_likelihood": -23.78507432251476,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 9.3712350723804,
      "fairness_weight": 2.57427845343503,
      "success": true,
      "log_likelihood": -12.650427346227294,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 10.0,
      "fairness_weight": 1.2544051677077157,
      "success": true,
      "log_likelihood": -6.304689529531657,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": -3.957560593971088,
      "fairness_weight": 1.0366956041217132,
      "success": true,
      "log_likelihood": -6.9991534943511455,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 1.5096327019620845,
      "fairness_weight": 0.24479387438159583,
      "success": true,
      "log_likelihood": -23.81303955957793,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": -2.1047319497156463,
      "fairness_weight": 2.492681815212788,
      "success": true,
      "log_likelihood": -6.945946863388427,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 1.8410908269349104,
      "fairness_weight": 0.6631474769234509,
      "success": true,
      "log_likelihood": -23.224383688692996,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 4.900107561953851,
      "fairness_weight": 0.04242790877496538,
      "success": true,
      "log_likelihood": -10.323704866224972,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": -2.018619300989187,
      "fairness_weight": 1.3506542194571955,
      "success": true,
      "log_likelihood": -10.53342577316937,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 3.373730860371777,
      "fairness_weight": 1.4172790313285302,
      "success": true,
      "log_likelihood": -19.37249267496631,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 2.0790654350425815,
      "fairness_weight": 0.4676607364543022,
      "success": true,
      "log_likelihood": -23.2012180779867,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": -0.715671513731175,
      "fairness_weight": 3.6701435844381636,
      "success": true,
      "log_likelihood": -6.758751780289466,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 5.547483727403676,
      "fairness_weight": 1.3878831731723396,
      "success": true,
      "log_likelihood": -17.29819835917153,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 0.3386324071905889,
      "fairness_weight": 1.6585787641627832,
      "success": true,
      "log_likelihood": -14.472753563952933,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 10.0,
      "fairness_weight": 1.3226252753588434,
      "success": true,
      "log_likelihood": -5.434637874177506,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 2.0172827307361354,
      "fairness_weight": 0.9524020051866762,
      "success": true,
      "log_likelihood": -21.84209422353798,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 3.2393098970757985,
      "fairness_weight": 0.6073235909409082,
      "success": true,
      "log_likelihood": -20.88820220711355,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "bias": {
        "r": 0.8732235346142531,
        "p": 2.3363358044730366e-32
      },
      "fairness_weight": {
        "r": 0.8929030788078586,
        "p": 9.810251307981482e-36
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 32.90053176058102,
  "bic_Control": 27.663083245834017,
  "bic_Cocaine": 37.59241272170855,
  "bic_error": "'ModelOutput' object has no attribute 'metrics'"
}