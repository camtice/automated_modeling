{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641",
  "output_description": "Design a computational model for the described task.\n\nYour model should use the given variables appropriately, but does not necessary need to use all or even most of the variables. \n\nThe model should:\n1. Predict only responder behavior.\n2. Build on relevant psychological principles.\n3. Be considerate of high covariance between learnable parameters as the model\nwill have to pass parameter recovery tests.\n4. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n5. Should have no more than two learnable parameters.\n6. This specific model should calculate the utility of an action (not the probability). The value returned will then be used to determine the probability of choosing that action. Negative values should represent a negative utility, and thus an unlikly action.\n7. Should not include the utility of rejecting an offer.\n8. BE OUT OF THE BOX - an outsider should say \"Wow, I'm surprised this model works!\"\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Use clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641\n\nDesired Output Specification: Design a computational model for the described task.\n\nYour model should use the given variables appropriately, but does not necessary need to use all or even most of the variables. \n\nThe model should:\n1. Predict only responder behavior.\n2. Build on relevant psychological principles.\n3. Be considerate of high covariance between learnable parameters as the model\nwill have to pass parameter recovery tests.\n4. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n5. Should have no more than two learnable parameters.\n6. This specific model should calculate the utility of an action (not the probability). The value returned will then be used to determine the probability of choosing that action. Negative values should represent a negative utility, and thus an unlikly action.\n7. Should not include the utility of rejecting an offer.\n8. BE OUT OF THE BOX - an outsider should say \"Wow, I'm surprised this model works!\"\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Use clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "Step 1: Key Psychological Mechanisms \n\u2022 Responder behavior is driven by both the amount of money offered (split_self) and a fairness judgment. In this task, fairness is inferred by comparing the monetary offer to an expected fair share, computed using the participant\u2019s relative contribution (token_self) to the joint effort (token_self + token_opp) and the total money available (combined_earning). \n\u2022 The model assumes that responders derive utility not only from the raw monetary gain but also from how closely the offer matches this perceived fair share. Offers below fairness are penalized, while offers above fairness boost the utility.\n\u2022 In line with models of inequity aversion, the discrepancy between the offer and what is perceived as fair is weighted by a sensitivity parameter. Additionally, a baseline bias captures a general tendency either towards acceptance or rejection.\n\nStep 2: Mechanisms Interaction and Mathematical Form \n\u2022 Compute the fair share (F) as: F = (token_self / (token_self + token_opp)) \u00d7 combined_earning.\n\u2022 Incorporate the deviation between the actual offer (split_self) and the fair share. The term (split_self \u2212 F) captures whether the offer is generous or stingy.\n\u2022 To allow asymmetric sensitivity to deviations, we weight the components by a fairness sensitivity parameter. This yields a utility function that increases with split_self and decreases (or increases less) when split_self is below F.\n\u2022 A baseline bias (base_bias) parameter is added to capture any fixed tendency in the decision process.\n\nStep 3: Parameters and Calibration \n\u2022 The fairness sensitivity parameter (fairness_param) is learnable and modulates the degree to which the deviation from fairness affects utility.\n\u2022 A baseline bias parameter (base_bias) is also learnable. \n\u2022 Both parameters are given generous, yet finite bounds.\n\nStep 4: Model Variables Mapping to Behavior \n\u2022 The model uses observable variables: split_self, token_self, token_opp, and combined_earning. These are directly taken from the dataset.\n\u2022 The computed fair share serves as the psychological benchmark against which the offer is evaluated.\n\u2022 The resulting utility U is used (post-transformation via a choice rule in full applications) to derive the probability of accepting the offer.\n\nThe formal model specification is provided below.\n\n<MODEL>\nU = base_bias + (1 + fairness_param)*split_self - fairness_param*((token_self/(token_self+token_opp))*combined_earning)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the proposal\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"base_bias\": {\n      \"description\": \"Baseline bias in utility reflecting a general acceptance tendency\",\n      \"range\": {\n        \"min\": -50,\n        \"max\": 50,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"fairness_param\": {\n      \"description\": \"Fairness sensitivity parameter weighting the deviation of the offer from the fair share\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"The proposed monetary share for the participant (in \u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant, indicating their contribution\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent, indicating their contribution\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total money available to be divided in the trial (in \u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<SUMMARY>\nA responder utility model that compares the offered monetary share with a fair share benchmark derived from the participant's relative token count. The model linearly combines the offer with a fairness-adjusted term, using a baseline bias and fairness sensitivity as the two learnable parameters.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['base_bias', 'fairness_param']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block:\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                U = base_bias + (1 + fairness_param)*split_self - fairness_param*((token_self/(token_self+token_opp))*combined_earning)\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the proposal\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"base_bias\": {\n      \"description\": \"Baseline bias in utility reflecting a general acceptance tendency\",\n      \"range\": {\n        \"min\": -50,\n        \"max\": 50,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"fairness_param\": {\n      \"description\": \"Fairness sensitivity parameter weighting the deviation of the offer from the fair share\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"The proposed monetary share for the participant (in \\u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant, indicating their contribution\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent, indicating their contribution\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total money available to be divided in the trial (in \\u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641\n\n                ",
      "output": "```python\nimport json\nimport math\n\ndef simulate_model(trial_data, base_bias=0, fairness_param=1):\n    model_predictions = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0)\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n\n        if token_self + token_opp ==0: #Handle division by zero\n          fair_share = 0\n        else:\n          fair_share = (token_self / (token_self + token_opp)) * combined_earning\n\n        u = base_bias + (1 + fairness_param) * split_self - fairness_param * fair_share\n        model_predictions.append(u)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '[{\"ID\": 1, \"group\": \"A\", \"trial_number\": 1, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 50, \"token_self\": 50, \"combined_earning\": 1000, \"split_opp\": 500.0, \"split_self\": 500.0, \"splitperc_opp\": 50, \"splitperc_self\": 50, \"accept\": 1.0, \"accepted_amount\": 500.0, \"accepted_perc\": 50.0, \"proposed_perc\": 50.0, \"proposed_amount\": 500.0}, {\"ID\": 2, \"group\": \"A\", \"trial_number\": 2, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 20, \"token_self\": 80, \"combined_earning\": 1000, \"split_opp\": 200.0, \"split_self\": 800.0, \"splitperc_opp\": 20, \"splitperc_self\": 80, \"accept\": 1.0, \"accepted_amount\": 800.0, \"accepted_perc\": 80.0, \"proposed_perc\": 80.0, \"proposed_amount\": 800.0}]'\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n```",
      "timestamp": 1741695624.994636
    }
  ],
  "learnable_parameters": {
    "base_bias": {
      "description": "Baseline bias in utility reflecting a general acceptance tendency",
      "range": {
        "min": -50,
        "max": 50,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "fairness_param": {
      "description": "Fairness sensitivity parameter weighting the deviation of the offer from the fair share",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "U = base_bias + (1 + fairness_param)*split_self - fairness_param*((token_self/(token_self+token_opp))*combined_earning)",
  "variable_descriptions": {
    "U": {
      "description": "Utility of accepting the proposal",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "base_bias": {
      "description": "Baseline bias in utility reflecting a general acceptance tendency",
      "range": {
        "min": -50,
        "max": 50,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "fairness_param": {
      "description": "Fairness sensitivity parameter weighting the deviation of the offer from the fair share",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "split_self": {
      "description": "The proposed monetary share for the participant (in \u00a3)",
      "range": {
        "min": 0,
        "max": 1000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Number of tokens found by the participant, indicating their contribution",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent, indicating their contribution",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "combined_earning": {
      "description": "Total money available to be divided in the trial (in \u00a3)",
      "range": {
        "min": 0,
        "max": 10000,
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    }
  },
  "model_summary": "A responder utility model that compares the offered monetary share with a fair share benchmark derived from the participant's relative token count. The model linearly combines the offer with a fairness-adjusted term, using a baseline bias and fairness sensitivity as the two learnable parameters.",
  "full_reasoning": "Step 1: Key Psychological Mechanisms \n\u2022 Responder behavior is driven by both the amount of money offered (split_self) and a fairness judgment. In this task, fairness is inferred by comparing the monetary offer to an expected fair share, computed using the participant\u2019s relative contribution (token_self) to the joint effort (token_self + token_opp) and the total money available (combined_earning). \n\u2022 The model assumes that responders derive utility not only from the raw monetary gain but also from how closely the offer matches this perceived fair share. Offers below fairness are penalized, while offers above fairness boost the utility.\n\u2022 In line with models of inequity aversion, the discrepancy between the offer and what is perceived as fair is weighted by a sensitivity parameter. Additionally, a baseline bias captures a general tendency either towards acceptance or rejection.\n\nStep 2: Mechanisms Interaction and Mathematical Form \n\u2022 Compute the fair share (F) as: F = (token_self / (token_self + token_opp)) \u00d7 combined_earning.\n\u2022 Incorporate the deviation between the actual offer (split_self) and the fair share. The term (split_self \u2212 F) captures whether the offer is generous or stingy.\n\u2022 To allow asymmetric sensitivity to deviations, we weight the components by a fairness sensitivity parameter. This yields a utility function that increases with split_self and decreases (or increases less) when split_self is below F.\n\u2022 A baseline bias (base_bias) parameter is added to capture any fixed tendency in the decision process.\n\nStep 3: Parameters and Calibration \n\u2022 The fairness sensitivity parameter (fairness_param) is learnable and modulates the degree to which the deviation from fairness affects utility.\n\u2022 A baseline bias parameter (base_bias) is also learnable. \n\u2022 Both parameters are given generous, yet finite bounds.\n\nStep 4: Model Variables Mapping to Behavior \n\u2022 The model uses observable variables: split_self, token_self, token_opp, and combined_earning. These are directly taken from the dataset.\n\u2022 The computed fair share serves as the psychological benchmark against which the offer is evaluated.\n\u2022 The resulting utility U is used (post-transformation via a choice rule in full applications) to derive the probability of accepting the offer.\n\nThe formal model specification is provided below.\n\n<MODEL>\nU = base_bias + (1 + fairness_param)*split_self - fairness_param*((token_self/(token_self+token_opp))*combined_earning)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the proposal\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"base_bias\": {\n      \"description\": \"Baseline bias in utility reflecting a general acceptance tendency\",\n      \"range\": {\n        \"min\": -50,\n        \"max\": 50,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"fairness_param\": {\n      \"description\": \"Fairness sensitivity parameter weighting the deviation of the offer from the fair share\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"The proposed monetary share for the participant (in \u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant, indicating their contribution\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent, indicating their contribution\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total money available to be divided in the trial (in \u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<SUMMARY>\nA responder utility model that compares the offered monetary share with a fair share benchmark derived from the participant's relative token count. The model linearly combines the offer with a fairness-adjusted term, using a baseline bias and fairness sensitivity as the two learnable parameters.\n</SUMMARY>",
  "current_model": "Specification: U = base_bias + (1 + fairness_param)*split_self - fairness_param*((token_self/(token_self+token_opp))*combined_earning)\nSummary: A responder utility model that compares the offered monetary share with a fair share benchmark derived from the participant's relative token count. The model linearly combines the offer with a fairness-adjusted term, using a baseline bias and fairness sensitivity as the two learnable parameters.",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, base_bias=0, fairness_param=1):\n    model_predictions = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0)\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n\n        if token_self + token_opp ==0: #Handle division by zero\n          fair_share = 0\n        else:\n          fair_share = (token_self / (token_self + token_opp)) * combined_earning\n\n        u = base_bias + (1 + fairness_param) * split_self - fairness_param * fair_share\n        model_predictions.append(u)\n    return model_predictions",
  "total_retries": 0,
  "fitting_results": [
    {
      "base_bias": -9.70681756615366,
      "fairness_param": 0.8714972384917714,
      "success": true,
      "log_likelihood": -8.895539697632199,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "base_bias": -5.35227327246964,
      "fairness_param": 0.008201238770089977,
      "success": true,
      "log_likelihood": -35.2043048427182,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "base_bias": -4.908089196398282,
      "fairness_param": 0.17277256510048947,
      "success": true,
      "log_likelihood": -35.28820008912028,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "base_bias": -5.842059631871339,
      "fairness_param": 0.10080303639421749,
      "success": true,
      "log_likelihood": -29.578152715704576,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "base_bias": -5.141740987896455,
      "fairness_param": 0.4759387115805132,
      "success": true,
      "log_likelihood": -33.74211973725444,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "base_bias": -4.416634733254795,
      "fairness_param": 0.0,
      "success": true,
      "log_likelihood": -37.74099716433889,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "base_bias": -1.9599589572485863,
      "fairness_param": 0.0,
      "success": true,
      "log_likelihood": -41.85508417692577,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "base_bias": -4.233787189587722,
      "fairness_param": 0.0,
      "success": true,
      "log_likelihood": -39.153551471455906,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "base_bias": -1.9599903500135014,
      "fairness_param": 0.0,
      "success": true,
      "log_likelihood": -41.855084178111085,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "base_bias": -5.670581575175653,
      "fairness_param": 0.4210504838407828,
      "success": true,
      "log_likelihood": -30.25142245160657,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "base_bias": -5.1893980483779165,
      "fairness_param": 0.4357791337578369,
      "success": true,
      "log_likelihood": -31.17885136380165,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "base_bias": -9.033120817919217,
      "fairness_param": 0.7088127687753866,
      "success": true,
      "log_likelihood": -11.239933242593361,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "base_bias": -5.356142407304554,
      "fairness_param": 0.4900342406843006,
      "success": true,
      "log_likelihood": -31.617045528088926,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "base_bias": -1.9599589074627815,
      "fairness_param": 0.0,
      "success": true,
      "log_likelihood": -41.85508417692575,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "base_bias": -1.9599580557429037,
      "fairness_param": 0.0,
      "success": true,
      "log_likelihood": -41.85508417692604,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "base_bias": -1.959958405154718,
      "fairness_param": 0.0,
      "success": true,
      "log_likelihood": -41.855084176925715,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "base_bias": -1.9599590017649098,
      "fairness_param": 0.0,
      "success": true,
      "log_likelihood": -41.855084176925814,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "base_bias": -2.9519328541601184,
      "fairness_param": 0.0,
      "success": true,
      "log_likelihood": -39.29058062113861,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "base_bias": -2.7621456220878176,
      "fairness_param": 0.0,
      "success": true,
      "log_likelihood": -41.24423116240427,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "base_bias": -1.959958556363395,
      "fairness_param": 0.0,
      "success": true,
      "log_likelihood": -41.85508417692566,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "base_bias": -4.868270973072492,
      "fairness_param": 0.0692329491596283,
      "success": true,
      "log_likelihood": -38.248404458455205,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "base_bias": -2.9519329475404543,
      "fairness_param": 0.0,
      "success": true,
      "log_likelihood": -41.01558062076185,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "base_bias": -6.438480318652876,
      "fairness_param": 0.0,
      "success": true,
      "log_likelihood": -27.014358282722128,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "base_bias": -5.168588919376792,
      "fairness_param": 0.0,
      "success": true,
      "log_likelihood": -34.612824660054756,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "base_bias": -4.898310898191548,
      "fairness_param": 0.3247035555917792,
      "success": true,
      "log_likelihood": -37.7181797800904,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "base_bias": -4.787329974543434,
      "fairness_param": 0.0,
      "success": true,
      "log_likelihood": -36.439693399055486,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "base_bias": -4.976323222763805,
      "fairness_param": 0.0,
      "success": true,
      "log_likelihood": -34.82390229747701,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "base_bias": -6.366859302556915,
      "fairness_param": 0.9169323634276564,
      "success": true,
      "log_likelihood": -23.16677789560788,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "base_bias": -2.7621464120943715,
      "fairness_param": 0.0,
      "success": true,
      "log_likelihood": -41.91923116225218,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "base_bias": -3.506849161919849,
      "fairness_param": 0.0,
      "success": true,
      "log_likelihood": -42.394347502821866,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "base_bias": -1.9599588331371338,
      "fairness_param": 0.0,
      "success": true,
      "log_likelihood": -41.855084176925715,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "base_bias": -9.706844528224245,
      "fairness_param": 0.8715231119424329,
      "success": true,
      "log_likelihood": -8.895539698350344,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "base_bias": -5.986069037409434,
      "fairness_param": 0.0,
      "success": true,
      "log_likelihood": -30.823471776300366,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "base_bias": -6.007310290252981,
      "fairness_param": 0.14458115405116176,
      "success": true,
      "log_likelihood": -29.937733550398672,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "base_bias": -1.9599590095324757,
      "fairness_param": 0.0,
      "success": true,
      "log_likelihood": -41.855084176925835,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "base_bias": -4.4166342345723555,
      "fairness_param": 0.0,
      "success": true,
      "log_likelihood": -34.66599716523769,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "base_bias": -4.051890038561006,
      "fairness_param": 0.0,
      "success": true,
      "log_likelihood": -37.62494120827109,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "base_bias": -5.0820881501553945,
      "fairness_param": 0.19163371939726434,
      "success": true,
      "log_likelihood": -36.22696257392806,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "base_bias": -4.23378460180941,
      "fairness_param": 0.0,
      "success": true,
      "log_likelihood": -41.178551470989774,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "base_bias": -2.568870662933221,
      "fairness_param": 0.0,
      "success": true,
      "log_likelihood": -42.35214596925799,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "base_bias": -4.600964711459258,
      "fairness_param": 0.0,
      "success": true,
      "log_likelihood": -40.58667039263497,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "base_bias": -7.2931046440916445,
      "fairness_param": 0.522043375489416,
      "success": true,
      "log_likelihood": -21.02583964956238,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "base_bias": -2.168707303265309,
      "fairness_param": 0.0,
      "success": true,
      "log_likelihood": -43.52264000254449,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "base_bias": -4.976323756235621,
      "fairness_param": 0.0,
      "success": true,
      "log_likelihood": -35.19890229734238,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "base_bias": -4.600964975004598,
      "fairness_param": 0.0,
      "success": true,
      "log_likelihood": -36.7616703936601,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "base_bias": -3.8704384832514416,
      "fairness_param": 0.0,
      "success": true,
      "log_likelihood": -38.63051524905924,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "base_bias": -5.168589079815989,
      "fairness_param": 0.0,
      "success": true,
      "log_likelihood": -35.737824659635926,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "base_bias": -6.207536117419606,
      "fairness_param": 0.0,
      "success": true,
      "log_likelihood": -29.50043239586635,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "base_bias": -5.272082497986327,
      "fairness_param": 0.5666977037952293,
      "success": true,
      "log_likelihood": -33.814827170334276,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "base_bias": -5.168588739046178,
      "fairness_param": 0.0,
      "success": true,
      "log_likelihood": -36.712824659196244,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "base_bias": -4.051890022259019,
      "fairness_param": 0.0,
      "success": true,
      "log_likelihood": -39.72494120772773,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "base_bias": -8.839177073928887,
      "fairness_param": 0.1541083758032715,
      "success": true,
      "log_likelihood": -15.209837897188654,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "base_bias": -5.168588474196823,
      "fairness_param": 0.0,
      "success": true,
      "log_likelihood": -33.86282466024893,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "base_bias": -4.7873305582009165,
      "fairness_param": 0.0,
      "success": true,
      "log_likelihood": -36.28969339898695,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "base_bias": -6.129209827584528,
      "fairness_param": 0.055049614115437955,
      "success": true,
      "log_likelihood": -33.762345699986874,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "base_bias": -5.899357456046647,
      "fairness_param": 0.7199341342188683,
      "success": true,
      "log_likelihood": -26.143743320494682,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "base_bias": -6.5606926115992845,
      "fairness_param": 0.6221481457290768,
      "success": true,
      "log_likelihood": -23.916618550609638,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "base_bias": -2.7621472388641335,
      "fairness_param": 0.0,
      "success": true,
      "log_likelihood": -43.94423116176101,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "base_bias": -9.075178594694759,
      "fairness_param": 0.5982908178751538,
      "success": true,
      "log_likelihood": -11.61182471209547,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "base_bias": -3.3236908400918934,
      "fairness_param": 0.0,
      "success": true,
      "log_likelihood": -40.42703826061232,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "base_bias": -4.600965600442672,
      "fairness_param": 0.0,
      "success": true,
      "log_likelihood": -39.23667039296011,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "base_bias": -5.104810663776048,
      "fairness_param": 0.17566897123123243,
      "success": true,
      "log_likelihood": -36.40450799885565,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "base_bias": -9.706783290982832,
      "fairness_param": 0.8715259120063515,
      "success": true,
      "log_likelihood": -8.895539698465766,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "base_bias": -5.77259534818105,
      "fairness_param": 0.0,
      "success": true,
      "log_likelihood": -31.662832287406385,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "base_bias": -7.267017077691457,
      "fairness_param": 0.558058841352839,
      "success": true,
      "log_likelihood": -19.294842795280463,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "base_bias": -4.97632491933919,
      "fairness_param": 0.0,
      "success": true,
      "log_likelihood": -34.67390229752688,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "base_bias": -2.5688698532747556,
      "fairness_param": 0.0,
      "success": true,
      "log_likelihood": -41.90214596937776,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "base_bias": -2.9519324362220947,
      "fairness_param": 0.0,
      "success": true,
      "log_likelihood": -42.14058062045624,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "base_bias": -4.976323845721461,
      "fairness_param": 0.0,
      "success": true,
      "log_likelihood": -32.79890229798045,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "base_bias": -2.5688687951075577,
      "fairness_param": 0.0,
      "success": true,
      "log_likelihood": -43.55214596885321,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "base_bias": -9.087587118146573,
      "fairness_param": 1.7147962080812058,
      "success": true,
      "log_likelihood": -9.668868776512909,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "base_bias": -8.735032574162792,
      "fairness_param": 0.2664834289431311,
      "success": true,
      "log_likelihood": -14.756209183249606,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "base_bias": -5.168592286634196,
      "fairness_param": 0.0,
      "success": true,
      "log_likelihood": -34.987824659560715,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "base_bias": -3.506849206729706,
      "fairness_param": 0.0,
      "success": true,
      "log_likelihood": -39.91934750343005,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "base_bias": -5.364837779379462,
      "fairness_param": 0.0,
      "success": true,
      "log_likelihood": -36.47964981544312,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "base_bias": -4.051889932752945,
      "fairness_param": 0.0,
      "success": true,
      "log_likelihood": -40.32494120765902,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "base_bias": -2.3713457370274766,
      "fairness_param": 0.0,
      "success": true,
      "log_likelihood": -42.46239407724608,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "base_bias": -11.027268150358989,
      "fairness_param": 0.07751373910283244,
      "success": true,
      "log_likelihood": -8.096497666411976,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "base_bias": -4.600964864276775,
      "fairness_param": 0.0,
      "success": true,
      "log_likelihood": -38.71167039299289,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "base_bias": -9.706870398910194,
      "fairness_param": 0.8715260497276318,
      "success": true,
      "log_likelihood": -8.89553969915522,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "base_bias": -5.168589149819728,
      "fairness_param": 0.0,
      "success": true,
      "log_likelihood": -37.987824658897694,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "base_bias": -2.5688697202816133,
      "fairness_param": 0.0,
      "success": true,
      "log_likelihood": -43.702145968908695,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "base_bias": -9.292139765991607,
      "fairness_param": 0.2506648245042204,
      "success": true,
      "log_likelihood": -12.78165087131079,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "base_bias": -5.364838159439553,
      "fairness_param": 0.0,
      "success": true,
      "log_likelihood": -30.254649817654023,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "base_bias": -4.60096511517223,
      "fairness_param": 0.0,
      "success": true,
      "log_likelihood": -42.98667039202353,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "base_bias": -8.971212229022191,
      "fairness_param": 1.1021652587214457,
      "success": true,
      "log_likelihood": -11.45974178646119,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "base_bias": -4.051889727857336,
      "fairness_param": 0.0,
      "success": true,
      "log_likelihood": -41.29994120737048,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "base_bias": -7.475661545164317,
      "fairness_param": 0.305865459272047,
      "success": true,
      "log_likelihood": -22.40211330272627,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "base_bias": -2.371344561854917,
      "fairness_param": 0.0,
      "success": true,
      "log_likelihood": -41.78739407739481,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "base_bias": -5.5658611327308956,
      "fairness_param": 0.0,
      "success": true,
      "log_likelihood": -28.497190309536787,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "base_bias": -4.05188989531362,
      "fairness_param": 0.0,
      "success": true,
      "log_likelihood": -42.04994120717447,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "base_bias": {
        "r": 0.6695578463810129,
        "p": 2.6144920405234064e-14
      },
      "fairness_param": {
        "r": 0.5140470729306729,
        "p": 4.495723628476053e-08
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 74.16340629404733,
  "bic_error": "'ModelOutput' object has no attribute 'metrics'",
  "recovery_summary": "Parameter Recovery:\n- base_bias: r = 0.670\n- fairness_param: r = 0.514",
  "previous_models": [
    "Specification: U = base_bias + (1 + fairness_param)*split_self - fairness_param*((token_self/(token_self+token_opp))*combined_earning)\nSummary: A responder utility model that compares the offered monetary share with a fair share benchmark derived from the participant's relative token count. The model linearly combines the offer with a fairness-adjusted term, using a baseline bias and fairness sensitivity as the two learnable parameters.\nBIC: 74.16340629404733\n\nParameter Recovery:\n- base_bias: r = 0.670\n- fairness_param: r = 0.514"
  ]
}