{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641",
  "output_description": "Design a computational model for the described task.\n\nYour model should use the given variables appropriately, but does not necessary need to use all or even most of the variables. \n\nThe model should:\n1. Predict only responder behavior.\n2. Be considerate of high covariance between learnable parameters as the model\nwill have to pass parameter recovery tests.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict the proposed_perc.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641\n\nDesired Output Specification: Design a computational model for the described task.\n\nYour model should use the given variables appropriately, but does not necessary need to use all or even most of the variables. \n\nThe model should:\n1. Predict only responder behavior.\n2. Be considerate of high covariance between learnable parameters as the model\nwill have to pass parameter recovery tests.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict the proposed_perc.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function, and then used to predict binary decisions.\n\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "Step-by-step reasoning:\n\n1. Key psychological mechanisms: Responders compare the fairness of an offer against their own \u201cfairness norm\u201d \u2013 an expectation based on their own token count relative to the opponent\u2019s token count. In addition to the objective norm given by the tokens, individuals may have a bias (or shift) that affects how \u201cfair\u201d an offer must be to be accepted. This same fairness norm (after adjustment by the bias) can also be used to predict what percentage they would later propose if acting as the proposer.\n\n2. How these mechanisms interact: For a responder trial, the fairness norm is computed by taking the ratio of tokens found by the participant (token_self) to the total tokens (token_self + token_opp), which (when multiplied by 100) provides a normative percentage. A learnable bias parameter (delta) shifts this norm. When an offer is made (given by splitperc_self, the share offered to the responder in percent), the responder evaluates the difference between this offered share and their (biased) fairness norm. A sensitivity parameter (alpha) scales the weight the responder gives to this difference, and an intercept (beta) captures any additional base tendency to accept or reject.\n\n3. Mathematical form to capture these interactions: We define a utility U for accepting the offer. This utility is given by the weighted difference between the offered percentage (splitperc_self) and the fairness norm (computed as 100\u00b7(token_self/(token_self+token_opp)) shifted by delta), plus an intercept term. The probability of accepting is given by applying the logistic (sigmoid) function to U. Because the same fairness norm (i.e. 100\u00b7[token_self/(token_self+token_opp)] + delta) reflects the participant\u2019s fairness standard, it can also be seen as their predicted proposed percentage (proposed_perc) when acting as a proposer.\n\n4. Parameters required:\n   - alpha: Sensitivity parameter governing how strongly the difference between the offer and the fairness norm affects utility.\n   - beta: Bias or intercept parameter.\n   - delta: A bias parameter that shifts the fairness norm derived from pretask token counts.\n   \n   These parameters are learnable and have generous finite bounds to reduce potential high covariance.\n\n5. Mapping to observable behavior: \n   - Observed variables token_self and token_opp yield the baseline fairness norm.\n   - splitperc_self is the observed percentage offered to the responder.\n   - The binary target accept is assumed to be generated according to a logistic function applied to the computed utility.\n   - The latent fairness norm (100\u00b7(token_self/(token_self+token_opp)) + delta) is predicted to correspond to the responder\u2019s later behavior when proposing (predicted proposed_perc).\n\nThe formal mathematical model, variable descriptions, and target specification are provided below.\n\n<MODEL>\nU = alpha * (splitperc_self - ( (token_self/(token_self+token_opp))*100 + delta )) + beta\nP(accept) = 1/(1+exp(-U))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant, used to compute baseline fairness norm\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent, used to compute baseline fairness norm\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"splitperc_self\": {\n      \"description\": \"Percentage share offered to the participant in the proposal\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"alpha\": {\n      \"description\": \"Sensitivity parameter governing the impact of fairness discrepancy on utility\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta\": {\n      \"description\": \"Intercept parameter capturing base tendency to accept or reject\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"delta\": {\n      \"description\": \"Bias parameter that shifts the baseline fairness norm derived from tokens\",\n      \"range\": {\n        \"min\": -50,\n        \"max\": 50,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -50,\n          \"high\": 50\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Utility of accepting the proposal, based on the deviation between the observed offer and fairness norm\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"calculated\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"P(accept)\": {\n      \"description\": \"Probability of the responder accepting the proposal, computed using the logistic function\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"calculated\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA binary choice model for responder behavior where the fairness norm is computed from pretask token outcomes and shifted by a learnable bias parameter. The difference between the observed offer (splitperc_self) and the adjusted fairness norm determines the acceptance utility via a sensitivity parameter and an intercept. The utility is converted to an acceptance probability using a logistic function, with the same fairness norm representing the predicted proposed percentage in the proposer context.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['alpha', 'beta', 'delta']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block:\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                U = alpha * (splitperc_self - ( (token_self/(token_self+token_opp))*100 + delta )) + beta\nP(accept) = 1/(1+exp(-U))\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant, used to compute baseline fairness norm\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent, used to compute baseline fairness norm\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"splitperc_self\": {\n      \"description\": \"Percentage share offered to the participant in the proposal\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"alpha\": {\n      \"description\": \"Sensitivity parameter governing the impact of fairness discrepancy on utility\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta\": {\n      \"description\": \"Intercept parameter capturing base tendency to accept or reject\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"delta\": {\n      \"description\": \"Bias parameter that shifts the baseline fairness norm derived from tokens\",\n      \"range\": {\n        \"min\": -50,\n        \"max\": 50,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -50,\n          \"high\": 50\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Utility of accepting the proposal, based on the deviation between the observed offer and fairness norm\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"calculated\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"P(accept)\": {\n      \"description\": \"Probability of the responder accepting the proposal, computed using the logistic function\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"calculated\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641\n\n                ",
      "output": "```python\nimport json\nimport math\n\ndef simulate_model(trial_data, alpha=1, beta=1, delta=1):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        splitperc_self = trial.get(\"splitperc_self\", 0)\n\n        if token_self + token_opp ==0: #Handle division by zero error\n            fairness_norm = 50 #Default to 50% if no tokens were collected\n        else:\n            fairness_norm = (token_self / (token_self + token_opp)) * 100\n\n        U = alpha * (splitperc_self - (fairness_norm + delta)) + beta\n        p_accept = 1 / (1 + math.exp(-U))\n        model_predictions.append(p_accept)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '[{\"token_self\": 100, \"token_opp\": 200, \"splitperc_self\": 30}, {\"token_self\": 500, \"token_opp\": 500, \"splitperc_self\": 50}, {\"token_self\": 0, \"token_opp\": 0, \"splitperc_self\": 60}]' #Example data\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data, alpha=0.5, beta=0.2, delta=-5)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n\n```",
      "timestamp": 1741709272.794343
    }
  ],
  "learnable_parameters": {
    "alpha": {
      "description": "Sensitivity parameter governing the impact of fairness discrepancy on utility",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -10,
          "high": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "beta": {
      "description": "Intercept parameter capturing base tendency to accept or reject",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -10,
          "high": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "delta": {
      "description": "Bias parameter that shifts the baseline fairness norm derived from tokens",
      "range": {
        "min": -50,
        "max": 50,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -50,
          "high": 50
        }
      },
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "U = alpha * (splitperc_self - ( (token_self/(token_self+token_opp))*100 + delta )) + beta\nP(accept) = 1/(1+exp(-U))",
  "variable_descriptions": {
    "token_self": {
      "description": "Number of tokens found by the participant, used to compute baseline fairness norm",
      "range": {
        "min": 0,
        "max": 10000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "data"
      },
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent, used to compute baseline fairness norm",
      "range": {
        "min": 0,
        "max": 10000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "data"
      },
      "learnable": false,
      "source": "data"
    },
    "splitperc_self": {
      "description": "Percentage share offered to the participant in the proposal",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "data"
      },
      "learnable": false,
      "source": "data"
    },
    "alpha": {
      "description": "Sensitivity parameter governing the impact of fairness discrepancy on utility",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -10,
          "high": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "beta": {
      "description": "Intercept parameter capturing base tendency to accept or reject",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -10,
          "high": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "delta": {
      "description": "Bias parameter that shifts the baseline fairness norm derived from tokens",
      "range": {
        "min": -50,
        "max": 50,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -50,
          "high": 50
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "U": {
      "description": "Utility of accepting the proposal, based on the deviation between the observed offer and fairness norm",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": {
        "type": "calculated"
      },
      "learnable": false,
      "source": "calculated"
    },
    "P(accept)": {
      "description": "Probability of the responder accepting the proposal, computed using the logistic function",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "calculated"
      },
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "A binary choice model for responder behavior where the fairness norm is computed from pretask token outcomes and shifted by a learnable bias parameter. The difference between the observed offer (splitperc_self) and the adjusted fairness norm determines the acceptance utility via a sensitivity parameter and an intercept. The utility is converted to an acceptance probability using a logistic function, with the same fairness norm representing the predicted proposed percentage in the proposer context.",
  "target_variable": "accept",
  "full_reasoning": "Step-by-step reasoning:\n\n1. Key psychological mechanisms: Responders compare the fairness of an offer against their own \u201cfairness norm\u201d \u2013 an expectation based on their own token count relative to the opponent\u2019s token count. In addition to the objective norm given by the tokens, individuals may have a bias (or shift) that affects how \u201cfair\u201d an offer must be to be accepted. This same fairness norm (after adjustment by the bias) can also be used to predict what percentage they would later propose if acting as the proposer.\n\n2. How these mechanisms interact: For a responder trial, the fairness norm is computed by taking the ratio of tokens found by the participant (token_self) to the total tokens (token_self + token_opp), which (when multiplied by 100) provides a normative percentage. A learnable bias parameter (delta) shifts this norm. When an offer is made (given by splitperc_self, the share offered to the responder in percent), the responder evaluates the difference between this offered share and their (biased) fairness norm. A sensitivity parameter (alpha) scales the weight the responder gives to this difference, and an intercept (beta) captures any additional base tendency to accept or reject.\n\n3. Mathematical form to capture these interactions: We define a utility U for accepting the offer. This utility is given by the weighted difference between the offered percentage (splitperc_self) and the fairness norm (computed as 100\u00b7(token_self/(token_self+token_opp)) shifted by delta), plus an intercept term. The probability of accepting is given by applying the logistic (sigmoid) function to U. Because the same fairness norm (i.e. 100\u00b7[token_self/(token_self+token_opp)] + delta) reflects the participant\u2019s fairness standard, it can also be seen as their predicted proposed percentage (proposed_perc) when acting as a proposer.\n\n4. Parameters required:\n   - alpha: Sensitivity parameter governing how strongly the difference between the offer and the fairness norm affects utility.\n   - beta: Bias or intercept parameter.\n   - delta: A bias parameter that shifts the fairness norm derived from pretask token counts.\n   \n   These parameters are learnable and have generous finite bounds to reduce potential high covariance.\n\n5. Mapping to observable behavior: \n   - Observed variables token_self and token_opp yield the baseline fairness norm.\n   - splitperc_self is the observed percentage offered to the responder.\n   - The binary target accept is assumed to be generated according to a logistic function applied to the computed utility.\n   - The latent fairness norm (100\u00b7(token_self/(token_self+token_opp)) + delta) is predicted to correspond to the responder\u2019s later behavior when proposing (predicted proposed_perc).\n\nThe formal mathematical model, variable descriptions, and target specification are provided below.\n\n<MODEL>\nU = alpha * (splitperc_self - ( (token_self/(token_self+token_opp))*100 + delta )) + beta\nP(accept) = 1/(1+exp(-U))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant, used to compute baseline fairness norm\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent, used to compute baseline fairness norm\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"splitperc_self\": {\n      \"description\": \"Percentage share offered to the participant in the proposal\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"alpha\": {\n      \"description\": \"Sensitivity parameter governing the impact of fairness discrepancy on utility\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta\": {\n      \"description\": \"Intercept parameter capturing base tendency to accept or reject\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"delta\": {\n      \"description\": \"Bias parameter that shifts the baseline fairness norm derived from tokens\",\n      \"range\": {\n        \"min\": -50,\n        \"max\": 50,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -50,\n          \"high\": 50\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Utility of accepting the proposal, based on the deviation between the observed offer and fairness norm\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"calculated\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"P(accept)\": {\n      \"description\": \"Probability of the responder accepting the proposal, computed using the logistic function\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"calculated\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA binary choice model for responder behavior where the fairness norm is computed from pretask token outcomes and shifted by a learnable bias parameter. The difference between the observed offer (splitperc_self) and the adjusted fairness norm determines the acceptance utility via a sensitivity parameter and an intercept. The utility is converted to an acceptance probability using a logistic function, with the same fairness norm representing the predicted proposed percentage in the proposer context.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: U = alpha * (splitperc_self - ( (token_self/(token_self+token_opp))*100 + delta )) + beta\nP(accept) = 1/(1+exp(-U))\nSummary: A binary choice model for responder behavior where the fairness norm is computed from pretask token outcomes and shifted by a learnable bias parameter. The difference between the observed offer (splitperc_self) and the adjusted fairness norm determines the acceptance utility via a sensitivity parameter and an intercept. The utility is converted to an acceptance probability using a logistic function, with the same fairness norm representing the predicted proposed percentage in the proposer context.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, alpha=1, beta=1, delta=1):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        splitperc_self = trial.get(\"splitperc_self\", 0)\n\n        if token_self + token_opp ==0: #Handle division by zero error\n            fairness_norm = 50 #Default to 50% if no tokens were collected\n        else:\n            fairness_norm = (token_self / (token_self + token_opp)) * 100\n\n        U = alpha * (splitperc_self - (fairness_norm + delta)) + beta\n        p_accept = 1 / (1 + math.exp(-U))\n        model_predictions.append(p_accept)\n    return model_predictions",
  "total_retries": 0,
  "fitting_results": [
    {
      "alpha": -1.082323396730655,
      "beta": -9.625516780714907,
      "delta": -50.0,
      "success": true,
      "log_likelihood": -35.35052315318819,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": -0.047514542208085465,
      "beta": -7.118026558869846,
      "delta": -34.44121424717819,
      "success": true,
      "log_likelihood": -35.352926244231924,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 0.4868350042876114,
      "beta": 9.637065694029259,
      "delta": 5.146053587033875,
      "success": true,
      "log_likelihood": -35.82863682012031,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 0.02540671152508027,
      "beta": -10.0,
      "delta": -6.967453525424781,
      "success": true,
      "log_likelihood": -35.35069666532692,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 1.7928560619174938,
      "beta": -2.4328700839118937,
      "delta": 33.78397698680344,
      "success": true,
      "log_likelihood": -35.350506198357174,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 5.15787086814211,
      "beta": 4.613982407840375,
      "delta": -27.356012253774907,
      "success": true,
      "log_likelihood": -36.087781904935895,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": -6.688601185436467,
      "beta": 10.0,
      "delta": -3.2304529525475583,
      "success": true,
      "log_likelihood": -29.744924371622538,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": -8.104868498785276,
      "beta": 5.398669019747815,
      "delta": 3.503022183377489,
      "success": true,
      "log_likelihood": -36.71141755667832,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": -8.051110008364088,
      "beta": -9.028668525164225,
      "delta": 6.4699198168643,
      "success": true,
      "log_likelihood": -30.711411408103483,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 7.647191664895324,
      "beta": 3.169593015861377,
      "delta": 31.29531670810516,
      "success": true,
      "log_likelihood": -35.35050619835717,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 5.0983449225640705,
      "beta": 7.796348701778438,
      "delta": 26.8277393282506,
      "success": true,
      "log_likelihood": -35.35050619835717,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 2.2675362068242,
      "beta": 8.689325954443628,
      "delta": 33.568563892407184,
      "success": true,
      "log_likelihood": -35.35050619835727,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 7.652349450028094,
      "beta": -9.027869624328531,
      "delta": 33.95410649421376,
      "success": true,
      "log_likelihood": -35.35050619835717,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": -1.2931398496537712,
      "beta": 9.599333409836403,
      "delta": 0.5470110652239117,
      "success": true,
      "log_likelihood": -30.53958554414323,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": -9.334105505347612,
      "beta": 1.0416747684479333,
      "delta": 22.57189467011628,
      "success": true,
      "log_likelihood": -31.67792618342886,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": -0.2373837494477023,
      "beta": -8.697574765490257,
      "delta": 36.533401525202336,
      "success": true,
      "log_likelihood": -30.425237555157302,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": -0.2551536571408484,
      "beta": 10.0,
      "delta": -41.161118413147555,
      "success": true,
      "log_likelihood": -30.400138802746984,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": -7.65923548605206,
      "beta": -4.4888397377177025,
      "delta": -1.2833005902227494,
      "success": true,
      "log_likelihood": -32.24491448314897,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": -8.623130325290884,
      "beta": 0.27886044136502974,
      "delta": 13.143170565337549,
      "success": true,
      "log_likelihood": -32.77327716513097,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": -0.1937410784214447,
      "beta": -8.971325261548026,
      "delta": -47.08666096676792,
      "success": true,
      "log_likelihood": -35.35037588560504,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 4.326799365520626,
      "beta": 6.328792017073763,
      "delta": 21.330327149589944,
      "success": true,
      "log_likelihood": -35.35050692298037,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": -8.054211394534839,
      "beta": -0.05260416235994988,
      "delta": 2.8724132775519595,
      "success": true,
      "log_likelihood": -33.211417557700905,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": -0.0640335342560212,
      "beta": -8.624143055429586,
      "delta": -37.11938391288785,
      "success": true,
      "log_likelihood": -35.35115111255883,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 5.517360021316192,
      "beta": -4.113387670110777,
      "delta": -29.00268905943546,
      "success": true,
      "log_likelihood": -38.087777492315794,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": -7.959952077280407,
      "beta": -10.0,
      "delta": -50.0,
      "success": true,
      "log_likelihood": -35.35051754788874,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 4.976206812377441,
      "beta": 1.541517904107641,
      "delta": 34.493556305250436,
      "success": true,
      "log_likelihood": -35.35050619835717,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 6.274425066075739,
      "beta": -2.0759258557173963,
      "delta": -38.60520420869294,
      "success": true,
      "log_likelihood": -38.27330279413123,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 2.189358766989244,
      "beta": -9.538540302391409,
      "delta": 38.031565845442074,
      "success": true,
      "log_likelihood": -35.35050619835717,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 0.44561472595179386,
      "beta": 10.0,
      "delta": -25.113030840898457,
      "success": true,
      "log_likelihood": -33.55138763926297,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": -6.277672003340511,
      "beta": -9.916004486933723,
      "delta": 16.7631099339555,
      "success": true,
      "log_likelihood": -34.77334500740036,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": -5.46481844838004,
      "beta": -10.0,
      "delta": 9.794783644513887,
      "success": true,
      "log_likelihood": -30.49250755019126,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 0.5281423307522494,
      "beta": -3.284320580404223,
      "delta": 26.73087379544922,
      "success": true,
      "log_likelihood": -35.35064593915354,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": -9.862831649884427,
      "beta": -6.739508254414984,
      "delta": 9.738715197254264,
      "success": true,
      "log_likelihood": -40.99236983970772,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 1.0837883259618022,
      "beta": 0.28551053941208226,
      "delta": 26.362124405809784,
      "success": true,
      "log_likelihood": -35.35053346659123,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": -5.5604367710546745,
      "beta": 8.1755750209184,
      "delta": -3.3734561320682515,
      "success": true,
      "log_likelihood": -29.745060741656285,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 6.723371050205633,
      "beta": 7.696220347490048,
      "delta": -27.025539713356125,
      "success": true,
      "log_likelihood": -36.58770943357664,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 2.4258285068184655,
      "beta": -7.1675945257763924,
      "delta": 41.69107983958443,
      "success": true,
      "log_likelihood": -35.35050619835717,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": -8.484018035121112,
      "beta": 1.76533991684151,
      "delta": -29.196904833702508,
      "success": true,
      "log_likelihood": -37.94055849473737,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 1.9881106753029698,
      "beta": 5.473470775569476,
      "delta": 31.578159693857714,
      "success": true,
      "log_likelihood": -35.35050619838101,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": -6.091775216096306,
      "beta": 5.647832938623433,
      "delta": 46.591212273136776,
      "success": true,
      "log_likelihood": -33.1779261831162,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": -5.690260209867267,
      "beta": -3.815196577757246,
      "delta": -42.89135533126819,
      "success": true,
      "log_likelihood": -35.91236061760358,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": -6.900826274745073,
      "beta": 9.421504622054847,
      "delta": -23.672161383954226,
      "success": true,
      "log_likelihood": -39.3453831709994,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": -6.5932340285080215,
      "beta": -2.7043808262712052,
      "delta": -1.2782197204965902,
      "success": true,
      "log_likelihood": -30.244927269836754,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 1.1774078050126835,
      "beta": 8.475784515530792,
      "delta": 33.14541017461288,
      "success": true,
      "log_likelihood": -35.35051968264271,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 0.01479886449427434,
      "beta": -10.0,
      "delta": -13.464038363878878,
      "success": true,
      "log_likelihood": -35.350583305644925,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": -5.893971772128886,
      "beta": 9.389283026993901,
      "delta": 12.147385782185673,
      "success": true,
      "log_likelihood": -35.773277188671535,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 6.515241538620668,
      "beta": -6.191378991376508,
      "delta": 39.67488279282615,
      "success": true,
      "log_likelihood": -35.35050619835717,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 7.289281348346474,
      "beta": -8.322588270304195,
      "delta": 19.23579789644897,
      "success": true,
      "log_likelihood": -35.35050619835851,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": -4.256861148323148,
      "beta": 3.559367521345861,
      "delta": -44.12824709947514,
      "success": true,
      "log_likelihood": -35.912612967796605,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": -8.31146014841042,
      "beta": -9.256451310136748,
      "delta": -34.657655533481545,
      "success": true,
      "log_likelihood": -36.31735329215452,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": -6.939389014041713,
      "beta": 4.218447761344485,
      "delta": 7.763965700561673,
      "success": true,
      "log_likelihood": -35.99235183001687,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": -9.53752290730039,
      "beta": -7.150260475009741,
      "delta": -38.00845184063503,
      "success": true,
      "log_likelihood": -36.75515074783804,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 6.548178009796153,
      "beta": 2.9741753682953753,
      "delta": 24.32262145665908,
      "success": true,
      "log_likelihood": -35.35050619835717,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 2.8691432989283143,
      "beta": -9.278322177423323,
      "delta": 39.52782017511596,
      "success": true,
      "log_likelihood": -35.35050619835717,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": -4.336298938920432,
      "beta": 5.231627663591023,
      "delta": -23.528616216341383,
      "success": true,
      "log_likelihood": -38.84539748194316,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 4.035899435545833,
      "beta": 0.10285946478736108,
      "delta": 45.08306257005263,
      "success": true,
      "log_likelihood": -35.35050619835717,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 9.452902228543323,
      "beta": -0.4428272999919063,
      "delta": 20.842899580486772,
      "success": true,
      "log_likelihood": -35.35050619835717,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": -8.804394161542335,
      "beta": -3.7168121144090116,
      "delta": -13.819641223999566,
      "success": true,
      "log_likelihood": -31.716708349393308,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 5.52660061153629,
      "beta": 4.647165169212421,
      "delta": 46.99205981965598,
      "success": true,
      "log_likelihood": -35.35050619835717,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 3.9511236775122596,
      "beta": -3.7348025539940637,
      "delta": -39.93740004887093,
      "success": true,
      "log_likelihood": -35.27333028945841,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 0.9254047071715243,
      "beta": -9.441637717234848,
      "delta": 25.105121477834548,
      "success": true,
      "log_likelihood": -35.3505062225396,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": -4.62316194617108,
      "beta": 7.77013873568762,
      "delta": -34.928856746751634,
      "success": true,
      "log_likelihood": -37.097850238160945,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 6.320889466412513,
      "beta": 1.9830907912176077,
      "delta": 24.696544182768847,
      "success": true,
      "log_likelihood": -35.35050619835717,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": -0.02559389723037965,
      "beta": -10.0,
      "delta": -31.558699185555632,
      "success": true,
      "log_likelihood": -35.3506791640635,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 4.644531557871732,
      "beta": 6.625215639299853,
      "delta": 36.89304903576986,
      "success": true,
      "log_likelihood": -35.35050619835717,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": -10.0,
      "beta": 6.021762366693202,
      "delta": 14.399797096359332,
      "success": true,
      "log_likelihood": -38.773277208077396,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": -6.336279692266324,
      "beta": 9.995130987291981,
      "delta": -3.3341478233983866,
      "success": true,
      "log_likelihood": -31.24493723437677,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 3.8366743708925686,
      "beta": 5.707841748974537,
      "delta": -42.638540725707514,
      "success": true,
      "log_likelihood": -33.61609629980954,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 6.766020120822045,
      "beta": 2.9172630884499116,
      "delta": 3.2201059004399784,
      "success": true,
      "log_likelihood": -36.31701482823868,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": -5.443573074418712,
      "beta": -2.003791496127616,
      "delta": 15.167553607919825,
      "success": true,
      "log_likelihood": -32.27330605464183,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 0.2395864290321568,
      "beta": -7.929761267921004,
      "delta": 28.90213153204443,
      "success": true,
      "log_likelihood": -35.35052158145475,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 7.497324345079914,
      "beta": -8.114782976628566,
      "delta": 19.4300795468527,
      "success": true,
      "log_likelihood": -35.350506198357394,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 3.8097989748885386,
      "beta": -5.2988074239736305,
      "delta": 2.3134469429283793,
      "success": true,
      "log_likelihood": -36.3170177490319,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": -5.7947011974277425,
      "beta": 6.553031446199226,
      "delta": 7.290650729282871,
      "success": true,
      "log_likelihood": -34.49238123627885,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 7.122492099311821,
      "beta": 0.7587777108634949,
      "delta": 1.6521884035828405,
      "success": true,
      "log_likelihood": -36.81702723822676,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": -5.31061199453368,
      "beta": 3.5880616836093338,
      "delta": 10.829593186250984,
      "success": true,
      "log_likelihood": -36.27317213841768,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 9.140874240307912,
      "beta": -5.283056007292059,
      "delta": -38.2829428000484,
      "success": true,
      "log_likelihood": -33.2733056744641,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": -7.986013153685228,
      "beta": -10.0,
      "delta": -50.0,
      "success": true,
      "log_likelihood": -35.35051754788874,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": -3.9235944326936374,
      "beta": -1.3757551488716628,
      "delta": -32.25262701682191,
      "success": true,
      "log_likelihood": -35.097969329752715,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": -0.029509036636252695,
      "beta": -10.0,
      "delta": -23.317926112043008,
      "success": true,
      "log_likelihood": -35.350970000543654,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 4.159670263240647,
      "beta": 1.419796876084512,
      "delta": 3.659673669661548,
      "success": true,
      "log_likelihood": -36.31701575141613,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 6.154853017124216,
      "beta": 4.933052500242461,
      "delta": -42.6607228285579,
      "success": true,
      "log_likelihood": -33.61606957034755,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": -0.10416066205495494,
      "beta": -10.0,
      "delta": -38.54267866588843,
      "success": true,
      "log_likelihood": -35.35068393770446,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": -0.20686047307412625,
      "beta": -10.0,
      "delta": -45.98474870765319,
      "success": true,
      "log_likelihood": -35.35056208119463,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": -10.0,
      "beta": -6.535306223590899,
      "delta": -35.20591189074675,
      "success": true,
      "log_likelihood": -35.31717889288638,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 0.1828077931789915,
      "beta": -8.208633426921757,
      "delta": 14.777428059966772,
      "success": true,
      "log_likelihood": -35.35084492585423,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": -9.878694561099238,
      "beta": -7.9047940376823185,
      "delta": -21.3606744042233,
      "success": true,
      "log_likelihood": -35.34538305617996,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 1.2706829215266804,
      "beta": -1.6371722477634958,
      "delta": 24.15622937873521,
      "success": true,
      "log_likelihood": -35.35052409568076,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": -7.966194406114115,
      "beta": 8.624307128675921,
      "delta": -19.615666463999446,
      "success": true,
      "log_likelihood": -31.96910888400349,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": -0.0006188698100074214,
      "beta": -10.0,
      "delta": -13.077179787947799,
      "success": true,
      "log_likelihood": -35.35069992106342,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 7.1890437731033225,
      "beta": 4.6193928311348005,
      "delta": 3.5900372978618758,
      "success": true,
      "log_likelihood": -36.31701482392361,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "alpha": {
        "r": 0.10551002444826386,
        "p": 0.2961364484822318
      },
      "beta": {
        "r": 0.022159898459416134,
        "p": 0.82677484521214
      },
      "delta": {
        "r": 0.06860765816979023,
        "p": 0.49761274339962386
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 81.69806373587785,
  "bic_error": "'ModelOutput' object has no attribute 'metrics'",
  "recovery_summary": "Parameter Recovery:\n- alpha: r = 0.106\n- beta: r = 0.022\n- delta: r = 0.069",
  "previous_models": [
    "Specification: U = alpha * (splitperc_self - ( (token_self/(token_self+token_opp))*100 + delta )) + beta\nP(accept) = 1/(1+exp(-U))\nSummary: A binary choice model for responder behavior where the fairness norm is computed from pretask token outcomes and shifted by a learnable bias parameter. The difference between the observed offer (splitperc_self) and the adjusted fairness norm determines the acceptance utility via a sensitivity parameter and an intercept. The utility is converted to an acceptance probability using a logistic function, with the same fairness norm representing the predicted proposed percentage in the proposer context.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 81.69806373587785\n\nParameter Recovery:\n- alpha: r = 0.106\n- beta: r = 0.022\n- delta: r = 0.069"
  ]
}