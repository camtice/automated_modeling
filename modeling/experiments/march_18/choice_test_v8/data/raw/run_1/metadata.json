{
  "task_description": "Participants played 320 games (in four blocks of 80 games) of our Horizon task (see Figure\n1A). Each game lasted either five or 10 trials and the two game lengths were interleaved and\ncounter-balanced such that there were 160 games of each length.\nIn each game, participants made repeated decisions between two options. Each option paid\nout between 1 and 100 points that was sampled (rounded to the nearest integer) from a\nGaussian distribution with a fixed standard deviation of 8 points. The generative means of\nthe underlying Gaussians were different for the two options and remained stable within a\ngame. In each game, the mean of one option was set to either 40 or 60 points and the mean\nof the other was set relative to the mean of the first, such that the difference between the two\nwas sampled from 4, 8, 12, 20, and 30. Both the identity and the difference in means were\ncounterbalanced over the entire experiment.\nParticipants were instructed in the task with the use of a set of illustrated onscreen\ninstructions. These explicitly conveyed that the means of the two options were constant over\na game and that the variability in the options was constant over the entire experiment.\nParticipants were told to maximize the points they earned and that one option was always\nbetter on average. The full text of the instructions is provided in the Supplementary Material.\nChoice and outcome history in each game remained onscreen inside each of the slot\nmachines (Figure 1A). After a particular option was played, the reward on that trial was\nadded to the slot machine, whereas the corresponding space for the unplayed option was\nfilled with an \u201cXX.\u201d\nThe first four trials of each game were forced-choice trials, in which only one of the options\n(cued by a green square inside the next available space) was available for participants to\nchoose. We used these forced-choice trials to manipulate the information participants had\nabout the two options from experience (Hertwig, Barron, Weber, & Erev, 2004) before their\nfirst free choice, while maintaining their active engagement in the task. The four forcedchoice trials set up two information conditions: \u201cunequal information\u201d (or [1 3]), in which\none option was forced to be played once and the other three times, and \u201cequal information\u201d\n(or [2 2]), in which each option was forced to be played twice.\nCrucially, this manipulation ensured that participants were exposed to a specified amount of\ninformation about each option, regardless of how rewarding it was. Furthermore, the relative\namount of information provided about each option was independent of the relative difference\nin their means. Thus on the first free choice (the fifth trial in each game), the difference in\nthe number of times each option had been sampled (and hence the difference in available\ninformation) had no effect on the difference in mean payout of that option (repeatedmeasures ANOVA,\nF(2, 89) = 0.09,\np = .91) thus removing the reward\u2013information\nconfound on this trial.\nAfter the forced-choice trials, participants made either one or six free choices (Figure 1B).\nAt the beginning of each game, the number of upcoming free-choice trials (i.e., the horizon)\n\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\nparticipant = [Unique identifier for each human subject in the experiment]\ntask = [Identifier for the specific game/round the participant is playing]\ntrial = [Sequential number indicating which decision point this is within a game]\nchoice = [The option (0 or 1) that the participant selected on this trial]\nreward = [The number of points (1-100) received after making a choice]\nRT = [Reaction time measuring how long it took the participant to make their decision]\nexpected_reward0 = [The observed mean reward for option 0 based on previous forced/free plays]\nexpected_reward1 = [The observed mean reward for option 1 based on previous forced/free plays]\nforced_choice = [Boolean indicator of whether this was a forced-choice trial (1) or free-choice trial (0)]\nhorizon = [The number of free choices available in the current game (either 1 or 6)]\n\nDataset:\n\nDataset Structure:\nVariables available:\n- Unnamed: 0 (int64)\n- ID (int64)\n- task (int64)\n- trial (int64)\n- choice (int64)\n- reward (float64)\n- RT (float64)\n- expected_reward0 (int64)\n- expected_reward1 (int64)\n- forced_choice (bool)\n- horizon (int64)\n\nNumber of observations: 144000\n\nDataset:\n\nDataset Structure:\nVariables available:\n- Unnamed: 0 (int64)\n- ID (int64)\n- task (int64)\n- trial (int64)\n- choice (int64)\n- reward (float64)\n- RT (float64)\n- expected_reward0 (int64)\n- expected_reward1 (int64)\n- forced_choice (bool)\n- horizon (int64)\n\nNumber of observations: 144000",
  "output_description": "Design a computational model for the described task.\n\nYour model should use the given variables appropriately, but does not necessary need to use all or even most of the variables. \n\nThe model should:\n1. Predict the 'choice' variable when 'forced_choice' == 'FALSE'\n2. Be VERY considerate of high covariance between learnable parameters as the model\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Have an appropriate number or learnable parameters, with a slight bias for less learnable paramters.\n5. Be as simple as possible.\n6. Predict UTILITY not PROBABILITY since the value will be fed through a logistic function after you are finished.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- Unnamed: 0 (int64)\n- ID (int64)\n- task (int64)\n- trial (int64)\n- choice (int64)\n- reward (float64)\n- RT (float64)\n- expected_reward0 (int64)\n- expected_reward1 (int64)\n- forced_choice (bool)\n- horizon (int64)\n\nNumber of observations: 144000",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: Participants played 320 games (in four blocks of 80 games) of our Horizon task (see Figure\n1A). Each game lasted either five or 10 trials and the two game lengths were interleaved and\ncounter-balanced such that there were 160 games of each length.\nIn each game, participants made repeated decisions between two options. Each option paid\nout between 1 and 100 points that was sampled (rounded to the nearest integer) from a\nGaussian distribution with a fixed standard deviation of 8 points. The generative means of\nthe underlying Gaussians were different for the two options and remained stable within a\ngame. In each game, the mean of one option was set to either 40 or 60 points and the mean\nof the other was set relative to the mean of the first, such that the difference between the two\nwas sampled from 4, 8, 12, 20, and 30. Both the identity and the difference in means were\ncounterbalanced over the entire experiment.\nParticipants were instructed in the task with the use of a set of illustrated onscreen\ninstructions. These explicitly conveyed that the means of the two options were constant over\na game and that the variability in the options was constant over the entire experiment.\nParticipants were told to maximize the points they earned and that one option was always\nbetter on average. The full text of the instructions is provided in the Supplementary Material.\nChoice and outcome history in each game remained onscreen inside each of the slot\nmachines (Figure 1A). After a particular option was played, the reward on that trial was\nadded to the slot machine, whereas the corresponding space for the unplayed option was\nfilled with an \u201cXX.\u201d\nThe first four trials of each game were forced-choice trials, in which only one of the options\n(cued by a green square inside the next available space) was available for participants to\nchoose. We used these forced-choice trials to manipulate the information participants had\nabout the two options from experience (Hertwig, Barron, Weber, & Erev, 2004) before their\nfirst free choice, while maintaining their active engagement in the task. The four forcedchoice trials set up two information conditions: \u201cunequal information\u201d (or [1 3]), in which\none option was forced to be played once and the other three times, and \u201cequal information\u201d\n(or [2 2]), in which each option was forced to be played twice.\nCrucially, this manipulation ensured that participants were exposed to a specified amount of\ninformation about each option, regardless of how rewarding it was. Furthermore, the relative\namount of information provided about each option was independent of the relative difference\nin their means. Thus on the first free choice (the fifth trial in each game), the difference in\nthe number of times each option had been sampled (and hence the difference in available\ninformation) had no effect on the difference in mean payout of that option (repeatedmeasures ANOVA,\nF(2, 89) = 0.09,\np = .91) thus removing the reward\u2013information\nconfound on this trial.\nAfter the forced-choice trials, participants made either one or six free choices (Figure 1B).\nAt the beginning of each game, the number of upcoming free-choice trials (i.e., the horizon)\n\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\nparticipant = [Unique identifier for each human subject in the experiment]\ntask = [Identifier for the specific game/round the participant is playing]\ntrial = [Sequential number indicating which decision point this is within a game]\nchoice = [The option (0 or 1) that the participant selected on this trial]\nreward = [The number of points (1-100) received after making a choice]\nRT = [Reaction time measuring how long it took the participant to make their decision]\nexpected_reward0 = [The observed mean reward for option 0 based on previous forced/free plays]\nexpected_reward1 = [The observed mean reward for option 1 based on previous forced/free plays]\nforced_choice = [Boolean indicator of whether this was a forced-choice trial (1) or free-choice trial (0)]\nhorizon = [The number of free choices available in the current game (either 1 or 6)]\n\nDataset:\n\nDataset Structure:\nVariables available:\n- Unnamed: 0 (int64)\n- ID (int64)\n- task (int64)\n- trial (int64)\n- choice (int64)\n- reward (float64)\n- RT (float64)\n- expected_reward0 (int64)\n- expected_reward1 (int64)\n- forced_choice (bool)\n- horizon (int64)\n\nNumber of observations: 144000\n\nDataset:\n\nDataset Structure:\nVariables available:\n- Unnamed: 0 (int64)\n- ID (int64)\n- task (int64)\n- trial (int64)\n- choice (int64)\n- reward (float64)\n- RT (float64)\n- expected_reward0 (int64)\n- expected_reward1 (int64)\n- forced_choice (bool)\n- horizon (int64)\n\nNumber of observations: 144000\n\nDesired Output Specification: Design a computational model for the described task.\n\nYour model should use the given variables appropriately, but does not necessary need to use all or even most of the variables. \n\nThe model should:\n1. Predict the 'choice' variable when 'forced_choice' == 'FALSE'\n2. Be VERY considerate of high covariance between learnable parameters as the model\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Have an appropriate number or learnable parameters, with a slight bias for less learnable paramters.\n5. Be as simple as possible.\n6. Predict UTILITY not PROBABILITY since the value will be fed through a logistic function after you are finished.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should directly predict a numerical value (not a binary choice). The model's predictions will be compared to actual values using mean squared error.\n\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "Step-by-step reasoning:\n\n\u2022 Key psychological mechanisms: Participants learn about option payoffs from early forced trials (which establish \u201cprior\u201d information) and then integrate this with observed outcomes (captured by expected_reward0 and expected_reward1). Additionally, when many free\u2010choices remain (i.e. a long horizon) participants tend to explore the option that they know less about (i.e. the option with fewer forced observations). \n\n\u2022 How these mechanisms interact: The participant\u2019s decision is assumed to be based on a weighted difference in their learned expected rewards, with an \u201cexploration bonus\u201d added to the option that was sampled less during the forced phase. The bonus is scaled by the horizon (set to zero when there is a single free choice, and \u201cfull\u2010on\u201d when the horizon is long) to capture the idea that exploration is more valuable when there are many choices ahead.\n\n\u2022 Mathematical form: We compute a utility value for each option. For parsimony we \u201cdifference\u201d the utilities. Specifically, if we let f0 and f1 denote, respectively, the number of forced trials for options 0 and 1 in the current game, then the bonus term (f1 \u2013 f0) rewards the option that was sampled less (i.e. if f0 < f1, then (f1 \u2013 f0) > 0 so that option 0 is boosted when we take the difference U0 \u2013 U1). The total utility difference is a sum of a sensitivity-weighted difference in expected rewards (a \u201cgreedy\u201d term) and an exploration bonus scaled by horizon.\n\n\u2022 Learnable parameters: \n\u2003 \u2013 \u201csensitivity\u201d (the effective weight for the reward difference)\n\u2003 \u2013 \u201cexploration_param\u201d (the weight on the information imbalance bonus)\n\u2003 \u2013 \u201cbias\u201d (an overall constant bias term)\nEach parameter is given generous finite numerical bounds. Fewer than 3 learnable parameters keeps the model simple and helps mitigate high covariance.\n\n\u2022 Observable behavior mapping: The model uses the expected rewards (learned through experience) and the forced-choice counts (which yield an index of information imbalance, computed as forced1 \u2013 forced0) along with the horizon value. The utility difference U is then predicted\u2014its sign guiding the choice (positive indicates option 0, negative indicates option 1) after a logistic transformation externally.\n\nBelow is the formal model specification.\n\n--------------------------------------------------\n\n<MODEL>\nU = sensitivity * (expected_reward0 - expected_reward1) + exploration_param * (forced1 - forced0) * ((horizon - 1)/5) + bias\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Predicted utility difference between option 0 and option 1. A positive value favors option 0.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"sensitivity\": {\n      \"description\": \"Weight given to the difference in expected rewards for the two options.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"exploration_param\": {\n      \"description\": \"Weight on the informational imbalance bonus. Positive values favor the option with fewer forced observations.\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"bias\": {\n      \"description\": \"Constant bias term added to the utility difference.\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"expected_reward0\": {\n      \"description\": \"Observed mean reward for option 0 computed from experience (forced and/or free plays).\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"expected_reward1\": {\n      \"description\": \"Observed mean reward for option 1 computed from experience (forced and/or free plays).\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"forced0\": {\n      \"description\": \"Number of forced-choice observations for option 0 in the current game (e.g., typically 1 or 2).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 4,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"forced1\": {\n      \"description\": \"Number of forced-choice observations for option 1 in the current game (e.g., typically 3 or 2).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 4,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"horizon\": {\n      \"description\": \"Number of upcoming free-choice trials in the current game (either 1 or 6).\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": 6,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>choice</target_variable>\n\n<SUMMARY>\nA simple utility difference model that predicts the decision utility as a weighted combination of the difference in experienced rewards and an exploration bonus driven by the information imbalance (determined from forced-choice counts), scaled by the remaining horizon. Three learnable parameters (reward sensitivity, exploration bonus weight, and constant bias) govern the model.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['sensitivity', 'exploration_param', 'bias']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n                5. Only simulate the model when 'forced_choice' == 'FALSE'\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                U = sensitivity * (expected_reward0 - expected_reward1) + exploration_param * (forced1 - forced0) * ((horizon - 1)/5) + bias\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Predicted utility difference between option 0 and option 1. A positive value favors option 0.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"sensitivity\": {\n      \"description\": \"Weight given to the difference in expected rewards for the two options.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"exploration_param\": {\n      \"description\": \"Weight on the informational imbalance bonus. Positive values favor the option with fewer forced observations.\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"bias\": {\n      \"description\": \"Constant bias term added to the utility difference.\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"expected_reward0\": {\n      \"description\": \"Observed mean reward for option 0 computed from experience (forced and/or free plays).\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"expected_reward1\": {\n      \"description\": \"Observed mean reward for option 1 computed from experience (forced and/or free plays).\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"forced0\": {\n      \"description\": \"Number of forced-choice observations for option 0 in the current game (e.g., typically 1 or 2).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 4,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"forced1\": {\n      \"description\": \"Number of forced-choice observations for option 1 in the current game (e.g., typically 3 or 2).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 4,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"horizon\": {\n      \"description\": \"Number of upcoming free-choice trials in the current game (either 1 or 6).\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": 6,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- Unnamed: 0 (int64)\n- ID (int64)\n- task (int64)\n- trial (int64)\n- choice (int64)\n- reward (float64)\n- RT (float64)\n- expected_reward0 (int64)\n- expected_reward1 (int64)\n- forced_choice (bool)\n- horizon (int64)\n\nNumber of observations: 144000\n\n                ",
      "output": "\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, sensitivity=1, exploration_param=1, bias=0):\n    model_predictions = []\n    for trial in trial_data:\n        if trial.get('forced_choice') == False:\n            expected_reward0 = trial.get(\"expected_reward0\", 0)\n            expected_reward1 = trial.get(\"expected_reward1\", 0)\n            forced0 = trial.get(\"forced0\", 0)\n            forced1 = trial.get(\"forced1\", 0)\n            horizon = trial.get(\"horizon\", 1)\n\n            U = sensitivity * (expected_reward0 - expected_reward1) + exploration_param * (forced1 - forced0) * ((horizon - 1)/5) + bias\n            model_predictions.append(U)\n        else:\n            model_predictions.append(None)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '[{\"Unnamed: 0\": 0, \"ID\": 0, \"task\": 0, \"trial\": 0, \"choice\": 0, \"reward\": 0.0, \"RT\": 0.0, \"expected_reward0\": 10, \"expected_reward1\": 20, \"forced_choice\": false, \"horizon\": 6, \"forced0\": 1, \"forced1\": 3}, {\"Unnamed: 0\": 1, \"ID\": 0, \"task\": 0, \"trial\": 1, \"choice\": 1, \"reward\": 1.0, \"RT\": 0.0, \"expected_reward0\": 10, \"expected_reward1\": 21, \"forced_choice\": false, \"horizon\": 6, \"forced0\": 1, \"forced1\": 3}, {\"Unnamed: 0\": 2, \"ID\": 0, \"task\": 0, \"trial\": 2, \"choice\": 0, \"reward\": 0.0, \"RT\": 0.0, \"expected_reward0\": 10, \"expected_reward1\": 21, \"forced_choice\": true, \"horizon\": 6, \"forced0\": 1, \"forced1\": 3}]'\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n",
      "timestamp": 1742310207.2217028
    }
  ],
  "learnable_parameters": {
    "sensitivity": {
      "description": "Weight given to the difference in expected rewards for the two options.",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "exploration_param": {
      "description": "Weight on the informational imbalance bonus. Positive values favor the option with fewer forced observations.",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "bias": {
      "description": "Constant bias term added to the utility difference.",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "U = sensitivity * (expected_reward0 - expected_reward1) + exploration_param * (forced1 - forced0) * ((horizon - 1)/5) + bias",
  "variable_descriptions": {
    "U": {
      "description": "Predicted utility difference between option 0 and option 1. A positive value favors option 0.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "sensitivity": {
      "description": "Weight given to the difference in expected rewards for the two options.",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "exploration_param": {
      "description": "Weight on the informational imbalance bonus. Positive values favor the option with fewer forced observations.",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "bias": {
      "description": "Constant bias term added to the utility difference.",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "expected_reward0": {
      "description": "Observed mean reward for option 0 computed from experience (forced and/or free plays).",
      "range": {
        "min": 1,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "expected_reward1": {
      "description": "Observed mean reward for option 1 computed from experience (forced and/or free plays).",
      "range": {
        "min": 1,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "forced0": {
      "description": "Number of forced-choice observations for option 0 in the current game (e.g., typically 1 or 2).",
      "range": {
        "min": 0,
        "max": 4,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "forced1": {
      "description": "Number of forced-choice observations for option 1 in the current game (e.g., typically 3 or 2).",
      "range": {
        "min": 0,
        "max": 4,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "horizon": {
      "description": "Number of upcoming free-choice trials in the current game (either 1 or 6).",
      "range": {
        "min": 1,
        "max": 6,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    }
  },
  "model_summary": "A simple utility difference model that predicts the decision utility as a weighted combination of the difference in experienced rewards and an exploration bonus driven by the information imbalance (determined from forced-choice counts), scaled by the remaining horizon. Three learnable parameters (reward sensitivity, exploration bonus weight, and constant bias) govern the model.",
  "target_variable": "choice",
  "full_reasoning": "Step-by-step reasoning:\n\n\u2022 Key psychological mechanisms: Participants learn about option payoffs from early forced trials (which establish \u201cprior\u201d information) and then integrate this with observed outcomes (captured by expected_reward0 and expected_reward1). Additionally, when many free\u2010choices remain (i.e. a long horizon) participants tend to explore the option that they know less about (i.e. the option with fewer forced observations). \n\n\u2022 How these mechanisms interact: The participant\u2019s decision is assumed to be based on a weighted difference in their learned expected rewards, with an \u201cexploration bonus\u201d added to the option that was sampled less during the forced phase. The bonus is scaled by the horizon (set to zero when there is a single free choice, and \u201cfull\u2010on\u201d when the horizon is long) to capture the idea that exploration is more valuable when there are many choices ahead.\n\n\u2022 Mathematical form: We compute a utility value for each option. For parsimony we \u201cdifference\u201d the utilities. Specifically, if we let f0 and f1 denote, respectively, the number of forced trials for options 0 and 1 in the current game, then the bonus term (f1 \u2013 f0) rewards the option that was sampled less (i.e. if f0 < f1, then (f1 \u2013 f0) > 0 so that option 0 is boosted when we take the difference U0 \u2013 U1). The total utility difference is a sum of a sensitivity-weighted difference in expected rewards (a \u201cgreedy\u201d term) and an exploration bonus scaled by horizon.\n\n\u2022 Learnable parameters: \n\u2003 \u2013 \u201csensitivity\u201d (the effective weight for the reward difference)\n\u2003 \u2013 \u201cexploration_param\u201d (the weight on the information imbalance bonus)\n\u2003 \u2013 \u201cbias\u201d (an overall constant bias term)\nEach parameter is given generous finite numerical bounds. Fewer than 3 learnable parameters keeps the model simple and helps mitigate high covariance.\n\n\u2022 Observable behavior mapping: The model uses the expected rewards (learned through experience) and the forced-choice counts (which yield an index of information imbalance, computed as forced1 \u2013 forced0) along with the horizon value. The utility difference U is then predicted\u2014its sign guiding the choice (positive indicates option 0, negative indicates option 1) after a logistic transformation externally.\n\nBelow is the formal model specification.\n\n--------------------------------------------------\n\n<MODEL>\nU = sensitivity * (expected_reward0 - expected_reward1) + exploration_param * (forced1 - forced0) * ((horizon - 1)/5) + bias\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Predicted utility difference between option 0 and option 1. A positive value favors option 0.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"sensitivity\": {\n      \"description\": \"Weight given to the difference in expected rewards for the two options.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"exploration_param\": {\n      \"description\": \"Weight on the informational imbalance bonus. Positive values favor the option with fewer forced observations.\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"bias\": {\n      \"description\": \"Constant bias term added to the utility difference.\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"expected_reward0\": {\n      \"description\": \"Observed mean reward for option 0 computed from experience (forced and/or free plays).\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"expected_reward1\": {\n      \"description\": \"Observed mean reward for option 1 computed from experience (forced and/or free plays).\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"forced0\": {\n      \"description\": \"Number of forced-choice observations for option 0 in the current game (e.g., typically 1 or 2).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 4,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"forced1\": {\n      \"description\": \"Number of forced-choice observations for option 1 in the current game (e.g., typically 3 or 2).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 4,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"horizon\": {\n      \"description\": \"Number of upcoming free-choice trials in the current game (either 1 or 6).\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": 6,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>choice</target_variable>\n\n<SUMMARY>\nA simple utility difference model that predicts the decision utility as a weighted combination of the difference in experienced rewards and an exploration bonus driven by the information imbalance (determined from forced-choice counts), scaled by the remaining horizon. Three learnable parameters (reward sensitivity, exploration bonus weight, and constant bias) govern the model.\n</SUMMARY>",
  "prediction_type": "numerical_variable_estimation",
  "current_model": "Specification: U = sensitivity * (expected_reward0 - expected_reward1) + exploration_param * (forced1 - forced0) * ((horizon - 1)/5) + bias\nSummary: A simple utility difference model that predicts the decision utility as a weighted combination of the difference in experienced rewards and an exploration bonus driven by the information imbalance (determined from forced-choice counts), scaled by the remaining horizon. Three learnable parameters (reward sensitivity, exploration bonus weight, and constant bias) govern the model.\nTarget Variable: choice\nPrediction Type: numerical_variable_estimation",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, sensitivity=1, exploration_param=1, bias=0):\n    model_predictions = []\n    for trial in trial_data:\n        if trial.get('forced_choice') == False:\n            expected_reward0 = trial.get(\"expected_reward0\", 0)\n            expected_reward1 = trial.get(\"expected_reward1\", 0)\n            forced0 = trial.get(\"forced0\", 0)\n            forced1 = trial.get(\"forced1\", 0)\n            horizon = trial.get(\"horizon\", 1)\n\n            U = sensitivity * (expected_reward0 - expected_reward1) + exploration_param * (forced1 - forced0) * ((horizon - 1)/5) + bias\n            model_predictions.append(U)\n        else:\n            model_predictions.append(None)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "fitting_results": [
    {
      "sensitivity": 0.0,
      "exploration_param": -3.7046293652534956,
      "bias": 0.5160714829506182,
      "success": true,
      "mse": 0.24974170918368083,
      "participant_accuracy": {},
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "sensitivity": 0.0,
      "exploration_param": -0.058922487501785525,
      "bias": 0.5133925999041117,
      "success": true,
      "mse": 0.24982063137761767,
      "participant_accuracy": {},
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "sensitivity": 0.0,
      "exploration_param": 3.018494881151428,
      "bias": 0.4982141982647427,
      "success": true,
      "mse": 0.2499968112244969,
      "participant_accuracy": {},
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "sensitivity": 0.0,
      "exploration_param": 7.4466094312901525,
      "bias": 0.5187499475846405,
      "success": true,
      "mse": 0.24964843750000162,
      "participant_accuracy": {},
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "sensitivity": 0.0,
      "exploration_param": 6.084900828750985,
      "bias": 0.4339285131623197,
      "success": true,
      "mse": 0.24563456632653313,
      "participant_accuracy": {},
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "sensitivity": 0.0,
      "exploration_param": -1.574276647402721,
      "bias": 0.47767873244009434,
      "success": true,
      "mse": 0.2495017538265512,
      "participant_accuracy": {},
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "sensitivity": 0.0,
      "exploration_param": -5.9444525263439445,
      "bias": 0.49553577185500913,
      "success": true,
      "mse": 0.24998007015306536,
      "participant_accuracy": {},
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "sensitivity": 0.0,
      "exploration_param": 4.4760846752811965,
      "bias": 0.5062500165747309,
      "success": true,
      "mse": 0.24996093750000276,
      "participant_accuracy": {},
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "sensitivity": 0.0,
      "exploration_param": -4.025110585172649,
      "bias": 0.5008928522148998,
      "success": true,
      "mse": 0.2499992028061258,
      "participant_accuracy": {},
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "sensitivity": 0.0,
      "exploration_param": -8.863313074638652,
      "bias": 0.5383926089183855,
      "success": true,
      "mse": 0.24852598852046484,
      "participant_accuracy": {},
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "sensitivity": 0.0,
      "exploration_param": 7.046288711213574,
      "bias": 0.49107143209322796,
      "success": true,
      "mse": 0.2499202806122422,
      "participant_accuracy": {},
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "sensitivity": 0.0,
      "exploration_param": 3.9096243853342134,
      "bias": 0.5017858529776847,
      "success": true,
      "mse": 0.2499968112245088,
      "participant_accuracy": {},
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "sensitivity": 0.0,
      "exploration_param": 1.94024552291018,
      "bias": 0.47857149495941287,
      "success": true,
      "mse": 0.24954081632653394,
      "participant_accuracy": {},
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "sensitivity": 0.0,
      "exploration_param": -6.645298517545026,
      "bias": 0.5241069524988081,
      "success": true,
      "mse": 0.24941884566330016,
      "participant_accuracy": {},
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "sensitivity": 0.0,
      "exploration_param": -2.165908195957682,
      "bias": 0.48928569224344665,
      "success": true,
      "mse": 0.24988520408163498,
      "participant_accuracy": {},
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "sensitivity": 0.0,
      "exploration_param": -0.8626069676065917,
      "bias": 0.4991071889211429,
      "success": true,
      "mse": 0.24999920280612017,
      "participant_accuracy": {},
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "sensitivity": 0.0,
      "exploration_param": 0.8411466978650761,
      "bias": 0.486607350932702,
      "success": true,
      "mse": 0.24982063137759108,
      "participant_accuracy": {},
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "sensitivity": 0.0,
      "exploration_param": -1.5925354977422863,
      "bias": 0.45892848806294945,
      "success": true,
      "mse": 0.24831313775510808,
      "participant_accuracy": {},
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "sensitivity": 0.0,
      "exploration_param": -1.3315621344368544,
      "bias": 0.488392784187158,
      "success": true,
      "mse": 0.24986527423470162,
      "participant_accuracy": {},
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "sensitivity": 0.0,
      "exploration_param": -4.723245507890576,
      "bias": 0.5375000690061005,
      "success": true,
      "mse": 0.24859375000000797,
      "participant_accuracy": {},
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "sensitivity": 0.0,
      "exploration_param": -4.95191025552026,
      "bias": 0.4973213692144589,
      "success": true,
      "mse": 0.2499928252551028,
      "participant_accuracy": {},
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "sensitivity": 0.0,
      "exploration_param": 3.8993857058509462,
      "bias": 0.5107142191296785,
      "success": true,
      "mse": 0.24988520408163858,
      "participant_accuracy": {},
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "sensitivity": 0.0,
      "exploration_param": -6.104633329400324,
      "bias": 0.46964282258213286,
      "success": true,
      "mse": 0.24907844387755196,
      "participant_accuracy": {},
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "sensitivity": 0.0,
      "exploration_param": 4.905324282221137,
      "bias": 0.49017867943380905,
      "success": true,
      "mse": 0.24990353954082833,
      "participant_accuracy": {},
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "sensitivity": 0.0,
      "exploration_param": 1.8251557063133639,
      "bias": 0.5294640335441791,
      "success": true,
      "mse": 0.24913185586741074,
      "participant_accuracy": {},
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "sensitivity": 0.0,
      "exploration_param": -5.6352105215656945,
      "bias": 0.5107143430286449,
      "success": true,
      "mse": 0.24988520408163747,
      "participant_accuracy": {},
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "sensitivity": 0.0,
      "exploration_param": 5.002481696305683,
      "bias": 0.5196428570296385,
      "success": true,
      "mse": 0.24961415816326377,
      "participant_accuracy": {},
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "sensitivity": 0.0,
      "exploration_param": -5.540269541181184,
      "bias": 0.5089285693890453,
      "success": true,
      "mse": 0.24992028061224383,
      "participant_accuracy": {},
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "sensitivity": 0.0,
      "exploration_param": 8.702430837800833,
      "bias": 0.537500002120846,
      "success": true,
      "mse": 0.2485937500000001,
      "participant_accuracy": {},
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "sensitivity": 0.0,
      "exploration_param": -8.343617565415169,
      "bias": 0.4723214196725183,
      "success": true,
      "mse": 0.24923389668367385,
      "participant_accuracy": {},
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "sensitivity": 0.0,
      "exploration_param": 9.028567195816827,
      "bias": 0.497321455757439,
      "success": true,
      "mse": 0.2499928252551039,
      "participant_accuracy": {},
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "sensitivity": 0.0,
      "exploration_param": -3.79695632146984,
      "bias": 0.533035732775932,
      "success": true,
      "mse": 0.248908641581633,
      "participant_accuracy": {},
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "sensitivity": 0.0,
      "exploration_param": -3.538159952754696,
      "bias": 0.5348213950116938,
      "success": true,
      "mse": 0.24878746811224614,
      "participant_accuracy": {},
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "sensitivity": 0.0,
      "exploration_param": -3.1062507970879105,
      "bias": 0.44285722940926137,
      "success": true,
      "mse": 0.24673469387756103,
      "participant_accuracy": {},
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "sensitivity": 0.0,
      "exploration_param": -2.989321241065486,
      "bias": 0.4625000067477388,
      "success": true,
      "mse": 0.24859375000000264,
      "participant_accuracy": {},
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "sensitivity": 0.0,
      "exploration_param": 8.871531211054194,
      "bias": 0.4705356446446578,
      "success": true,
      "mse": 0.24913185586735348,
      "participant_accuracy": {},
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "sensitivity": 0.0,
      "exploration_param": -7.828174776389956,
      "bias": 0.5223213838057984,
      "success": true,
      "mse": 0.2495017538265333,
      "participant_accuracy": {},
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "sensitivity": 0.0,
      "exploration_param": -1.3372198620296878,
      "bias": 0.5276784361804471,
      "success": true,
      "mse": 0.24923389668369067,
      "participant_accuracy": {},
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "sensitivity": 0.0,
      "exploration_param": -4.9184584120260695,
      "bias": 0.5053569326245846,
      "success": true,
      "mse": 0.2499713010204539,
      "participant_accuracy": {},
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "sensitivity": 0.0,
      "exploration_param": 3.7850878870893645,
      "bias": 0.44910702998252816,
      "success": true,
      "mse": 0.2474099170918535,
      "participant_accuracy": {},
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "sensitivity": 0.0,
      "exploration_param": -5.235269639727244,
      "bias": 0.48392857157288294,
      "success": true,
      "mse": 0.24974170918367244,
      "participant_accuracy": {},
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "sensitivity": 0.0,
      "exploration_param": -3.5326294085033405,
      "bias": 0.4624999646457428,
      "success": true,
      "mse": 0.24859374999999817,
      "participant_accuracy": {},
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "sensitivity": 0.0,
      "exploration_param": -4.043535972100074,
      "bias": 0.46160724711515216,
      "success": true,
      "mse": 0.24852598852041785,
      "participant_accuracy": {},
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "sensitivity": 0.0,
      "exploration_param": -2.158260191078263,
      "bias": 0.5383928191481601,
      "success": true,
      "mse": 0.24852598852040667,
      "participant_accuracy": {},
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "sensitivity": 0.0,
      "exploration_param": 0.8630835499544425,
      "bias": 0.5571429187195475,
      "success": true,
      "mse": 0.24673469387755428,
      "participant_accuracy": {},
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "sensitivity": 0.0,
      "exploration_param": 6.292123050603497,
      "bias": 0.4991071027065032,
      "success": true,
      "mse": 0.24999920280612103,
      "participant_accuracy": {},
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "sensitivity": 0.0,
      "exploration_param": 1.2689684425046295,
      "bias": 0.457142748155307,
      "success": true,
      "mse": 0.24816326530613791,
      "participant_accuracy": {},
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "sensitivity": 0.0,
      "exploration_param": -0.4947765499489236,
      "bias": 0.47857153184688994,
      "success": true,
      "mse": 0.2495408163265398,
      "participant_accuracy": {},
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "sensitivity": 0.0,
      "exploration_param": 1.1585994307550713,
      "bias": 0.5357142243964251,
      "success": true,
      "mse": 0.24872448979592326,
      "participant_accuracy": {},
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "sensitivity": 0.0,
      "exploration_param": -3.2838764540901995,
      "bias": 0.5946428695583065,
      "success": true,
      "mse": 0.24104272959183243,
      "participant_accuracy": {},
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "sensitivity": 0.020665855845289415,
      "exploration_param": 4.312335519928114,
      "bias": 0.46662904765096863,
      "success": true,
      "mse": 0.11962933803226883,
      "participant_accuracy": {},
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "sensitivity": 0.0,
      "exploration_param": -7.9860021322755586,
      "bias": 0.46428570780751943,
      "success": true,
      "mse": 0.24872448979592154,
      "participant_accuracy": {},
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "sensitivity": 0.0,
      "exploration_param": 1.2838035453823196,
      "bias": 0.49285699541717914,
      "success": true,
      "mse": 0.24994897959185802,
      "participant_accuracy": {},
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "sensitivity": 0.0,
      "exploration_param": -3.4706779147459415,
      "bias": 0.45267867492431846,
      "success": true,
      "mse": 0.24776068239796964,
      "participant_accuracy": {},
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "sensitivity": 0.0,
      "exploration_param": 7.014804259342913,
      "bias": 0.46160724452943147,
      "success": true,
      "mse": 0.2485259885204214,
      "participant_accuracy": {},
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "sensitivity": 0.0,
      "exploration_param": -3.8259726897024615,
      "bias": 0.5758928212984269,
      "success": true,
      "mse": 0.2442402742346913,
      "participant_accuracy": {},
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "sensitivity": 0.0,
      "exploration_param": -7.236872584314731,
      "bias": 0.5160714615755645,
      "success": true,
      "mse": 0.24974170918367353,
      "participant_accuracy": {},
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "sensitivity": 0.0,
      "exploration_param": 5.1053220280955465,
      "bias": 0.48928569227085017,
      "success": true,
      "mse": 0.2498852040816354,
      "participant_accuracy": {},
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "sensitivity": 0.0,
      "exploration_param": 6.427586671123283,
      "bias": 0.4830357422218278,
      "success": true,
      "mse": 0.24971221301020416,
      "participant_accuracy": {},
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "sensitivity": 0.0,
      "exploration_param": -3.93907878225904,
      "bias": 0.5705357610397556,
      "success": true,
      "mse": 0.24502471301020531,
      "participant_accuracy": {},
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 2400
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "sensitivity": {
        "r": 0.9999999999185739,
        "p": 0.0
      },
      "exploration_param": {
        "r": -0.1023861890053917,
        "p": 0.31074681898005485
      },
      "bias": {
        "r": 0.9999999999044898,
        "p": 0.0
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 3467.1649060649684,
  "bic_error": "'ModelOutput' object has no attribute 'metrics'",
  "recovery_summary": "Parameter Recovery:\n- sensitivity: r = 1.000\n- exploration_param: r = -0.102\n- bias: r = 1.000",
  "previous_models": [
    "Specification: U = sensitivity * (expected_reward0 - expected_reward1) + exploration_param * (forced1 - forced0) * ((horizon - 1)/5) + bias\nSummary: A simple utility difference model that predicts the decision utility as a weighted combination of the difference in experienced rewards and an exploration bonus driven by the information imbalance (determined from forced-choice counts), scaled by the remaining horizon. Three learnable parameters (reward sensitivity, exploration bonus weight, and constant bias) govern the model.\nTarget Variable: choice\nPrediction Type: numerical_variable_estimation\nBIC: 3467.1649060649684\n\nParameter Recovery:\n- sensitivity: r = 1.000\n- exploration_param: r = -0.102\n- bias: r = 1.000"
  ]
}