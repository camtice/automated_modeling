{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641",
  "output_description": "Design a computational model for the described task.\n\nYour model should use the given variables appropriately, but does not necessary need to use all or even most of the variables. \n\nThe model should:\n1. Predict only proposer behavior (specifically, it should predict `proposed_perc`).\n2. Be considerate of high covariance between learnable parameters as the model\nwill have to pass parameter recovery tests.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641\n\nDesired Output Specification: Design a computational model for the described task.\n\nYour model should use the given variables appropriately, but does not necessary need to use all or even most of the variables. \n\nThe model should:\n1. Predict only proposer behavior (specifically, it should predict `proposed_perc`).\n2. Be considerate of high covariance between learnable parameters as the model\nwill have to pass parameter recovery tests.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function, and then used to predict binary decisions.\n\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "Step-by-step reasoning:\n1. Key psychological mechanisms:\n\u2003\u2022 Proposers weigh fairness norms \u2013 here defined as what would be \u201cfair\u201d given both their own and their opponent\u2019s found tokens \u2013 against self\u2010interest. The fairness norm is derived from the relative token contributions.\n\u2003\u2022 They are assumed to choose between two candidate offers: a \u201cfair offer\u201d (what would be fairly allocated based on token proportions) versus a \u201cselfish offer\u201d (a baseline offer that favors the proposer).\n\u2003\u2022 The proposer\u2019s decision can be described as a binary choice between these two options, with their preference governed by the difference between the fairness norm and the baseline (selfish) offer.\n\u2003\u2022 This difference is transformed into a decision utility that, via a logistic function (with an adjustable sensitivity factor), yields the probability of choosing the fair option.\n\u2003\u2022 The final predicted proposed percentage is then a binary mixture: if the fair option is chosen the offer equals the fairness norm percentage, and if not, it equals the selfish baseline. \n\n2. Interaction of mechanisms:\n\u2003\u2022 The fairness norm (p_fair) is computed from tokens: p_fair = (token_opp/(token_self+token_opp))\u00d7100.\n\u2003\u2022 A decision utility U is computed as a linear function of the difference between p_fair and the selfish baseline parameter (ps), plus an intercept.\n\u2003\u2022 An inverse temperature parameter (tau) scales the utility before applying the logistic function. A higher tau makes the choice \u201charder\u201d (i.e. more deterministic).\n\u2003\u2022 The predicted percentage is then a convex combination: with probability (given by the logistic) the proposer will offer p_fair, and with complementary probability, they will offer ps.\n\n3. Mathematical form:\n\u2003\u2022 For each trial i, first compute p_fair_i.\n\u2003\u2022 Then utility: U_i = beta0 + beta1 \u00b7 (p_fair_i \u2013 ps).\n\u2003\u2022 Convert utility to a probability via logistic scaled by tau.\n\u2003\u2022 The predicted offer is the weighted average of p_fair_i and ps.\n\n4. Required parameters:\n\u2003\u2022 beta0: intercept (real, but bounded for estimation purposes)\n\u2003\u2022 beta1: slope (sensitivity to the difference between fairness norm and baseline)\n\u2003\u2022 ps: selfish baseline offer, which must lie between 0 and 100 (generous bounds)\n\u2003\u2022 tau: inverse temperature parameter (sensitive to discrimination in utility; positive)\n\n5. Mapping:\n\u2003\u2022 Input variables token_self and token_opp produce p_fair.\n\u2003\u2022 The parameters beta0, beta1, ps, and tau are learnable.\n\u2003\u2022 The final choice is predicted through the logistic-transformed utility, generating the proposed_perc.\n\nBelow is the formal specification:\n\n\u2003\n<MODEL>\np_fair_i = (token_opp_i/(token_self_i+token_opp_i))*100\nU_i = beta0 + beta1*(p_fair_i - ps)\nP_fair_i = 1/(1+exp(-tau*U_i))\nproposed_perc_i = P_fair_i*p_fair_i + (1-P_fair_i)*ps\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"token_self_i\": {\n      \"description\": \"Number of tokens found by the participant in trial i\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp_i\": {\n      \"description\": \"Number of tokens found by the opponent in trial i\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"p_fair_i\": {\n      \"description\": \"Fair offer percentage computed from tokens as token_opp/(token_self+token_opp)*100\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta0\": {\n      \"description\": \"Intercept (baseline tendency) in the decision utility function\",\n      \"range\": {\n        \"min\": -1000,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": -1000,\n          \"upper\": 1000\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta1\": {\n      \"description\": \"Sensitivity parameter for the difference between fairness norm and baseline offer\",\n      \"range\": {\n        \"min\": -1000,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": -1000,\n          \"upper\": 1000\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"ps\": {\n      \"description\": \"Selfish baseline offer percentage that the proposer tends toward if not following the fairness norm\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": 0,\n          \"upper\": 100\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"tau\": {\n      \"description\": \"Inverse temperature parameter controlling the steepness of the logistic function\",\n      \"range\": {\n        \"min\": 0.001,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": 0.001,\n          \"upper\": 100\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U_i\": {\n      \"description\": \"Decision utility for trial i comparing the fair offer to the selfish baseline\",\n      \"range\": {\n        \"min\": -10000,\n        \"max\": 10000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"P_fair_i\": {\n      \"description\": \"Probability of choosing the fair offer in trial i as determined by the logistic function\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"proposed_perc_i\": {\n      \"description\": \"Predicted proposed percentage to the opponent in trial i, computed as a mixture of the fair offer and the selfish baseline\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>proposed_perc</target_variable>\n\n<SUMMARY>\nA binary mixture model for proposer behavior that calculates a fairness norm from token information and contrasts it with a selfish baseline offer. A linear decision utility is formed and scaled by an inverse temperature, then passed through a logistic function to yield the probability of choosing the fair offer. The final predicted proposed percentage is a weighted average of the fairness norm and the selfish baseline.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['beta0', 'beta1', 'ps', 'tau']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block:\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                p_fair_i = (token_opp_i/(token_self_i+token_opp_i))*100\nU_i = beta0 + beta1*(p_fair_i - ps)\nP_fair_i = 1/(1+exp(-tau*U_i))\nproposed_perc_i = P_fair_i*p_fair_i + (1-P_fair_i)*ps\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"token_self_i\": {\n      \"description\": \"Number of tokens found by the participant in trial i\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp_i\": {\n      \"description\": \"Number of tokens found by the opponent in trial i\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"p_fair_i\": {\n      \"description\": \"Fair offer percentage computed from tokens as token_opp/(token_self+token_opp)*100\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta0\": {\n      \"description\": \"Intercept (baseline tendency) in the decision utility function\",\n      \"range\": {\n        \"min\": -1000,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": -1000,\n          \"upper\": 1000\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta1\": {\n      \"description\": \"Sensitivity parameter for the difference between fairness norm and baseline offer\",\n      \"range\": {\n        \"min\": -1000,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": -1000,\n          \"upper\": 1000\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"ps\": {\n      \"description\": \"Selfish baseline offer percentage that the proposer tends toward if not following the fairness norm\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": 0,\n          \"upper\": 100\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"tau\": {\n      \"description\": \"Inverse temperature parameter controlling the steepness of the logistic function\",\n      \"range\": {\n        \"min\": 0.001,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": 0.001,\n          \"upper\": 100\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U_i\": {\n      \"description\": \"Decision utility for trial i comparing the fair offer to the selfish baseline\",\n      \"range\": {\n        \"min\": -10000,\n        \"max\": 10000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"P_fair_i\": {\n      \"description\": \"Probability of choosing the fair offer in trial i as determined by the logistic function\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"proposed_perc_i\": {\n      \"description\": \"Predicted proposed percentage to the opponent in trial i, computed as a mixture of the fair offer and the selfish baseline\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641\n\n                ",
      "output": "```python\nimport json\nimport math\n\ndef simulate_model(trial_data, beta0=0, beta1=1, ps=50, tau=1):\n    model_predictions = []\n    for trial in trial_data:\n        token_self_i = trial.get(\"token_self\", 0)\n        token_opp_i = trial.get(\"token_opp\", 0)\n        if token_self_i + token_opp_i == 0: #Handle division by zero\n          p_fair_i = 50 # Default to 50% if no tokens are present.\n        else:\n          p_fair_i = (token_opp_i / (token_self_i + token_opp_i)) * 100\n        U_i = beta0 + beta1 * (p_fair_i - ps)\n        try:\n            P_fair_i = 1 / (1 + math.exp(-tau * U_i))\n        except OverflowError: #Handle potential OverflowError in exp function.\n            P_fair_i = 1.0 if U_i > 0 else 0.0\n        proposed_perc_i = P_fair_i * p_fair_i + (1 - P_fair_i) * ps\n        model_predictions.append(proposed_perc_i)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '[{\"token_self\": 100, \"token_opp\": 200}, {\"token_self\": 50, \"token_opp\": 50}, {\"token_self\": 0, \"token_opp\": 0}]' # Example data\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n\n```",
      "timestamp": 1742293024.471551
    }
  ],
  "learnable_parameters": {
    "beta0": {
      "description": "Intercept (baseline tendency) in the decision utility function",
      "range": {
        "min": -1000,
        "max": 1000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "lower": -1000,
          "upper": 1000
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "beta1": {
      "description": "Sensitivity parameter for the difference between fairness norm and baseline offer",
      "range": {
        "min": -1000,
        "max": 1000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "lower": -1000,
          "upper": 1000
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "ps": {
      "description": "Selfish baseline offer percentage that the proposer tends toward if not following the fairness norm",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "lower": 0,
          "upper": 100
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "tau": {
      "description": "Inverse temperature parameter controlling the steepness of the logistic function",
      "range": {
        "min": 0.001,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "lower": 0.001,
          "upper": 100
        }
      },
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "p_fair_i = (token_opp_i/(token_self_i+token_opp_i))*100\nU_i = beta0 + beta1*(p_fair_i - ps)\nP_fair_i = 1/(1+exp(-tau*U_i))\nproposed_perc_i = P_fair_i*p_fair_i + (1-P_fair_i)*ps",
  "variable_descriptions": {
    "token_self_i": {
      "description": "Number of tokens found by the participant in trial i",
      "range": {
        "min": 0,
        "max": 1000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "empirical"
      },
      "learnable": false,
      "source": "data"
    },
    "token_opp_i": {
      "description": "Number of tokens found by the opponent in trial i",
      "range": {
        "min": 0,
        "max": 1000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "empirical"
      },
      "learnable": false,
      "source": "data"
    },
    "p_fair_i": {
      "description": "Fair offer percentage computed from tokens as token_opp/(token_self+token_opp)*100",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "beta0": {
      "description": "Intercept (baseline tendency) in the decision utility function",
      "range": {
        "min": -1000,
        "max": 1000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "lower": -1000,
          "upper": 1000
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "beta1": {
      "description": "Sensitivity parameter for the difference between fairness norm and baseline offer",
      "range": {
        "min": -1000,
        "max": 1000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "lower": -1000,
          "upper": 1000
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "ps": {
      "description": "Selfish baseline offer percentage that the proposer tends toward if not following the fairness norm",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "lower": 0,
          "upper": 100
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "tau": {
      "description": "Inverse temperature parameter controlling the steepness of the logistic function",
      "range": {
        "min": 0.001,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "lower": 0.001,
          "upper": 100
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "U_i": {
      "description": "Decision utility for trial i comparing the fair offer to the selfish baseline",
      "range": {
        "min": -10000,
        "max": 10000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "P_fair_i": {
      "description": "Probability of choosing the fair offer in trial i as determined by the logistic function",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "proposed_perc_i": {
      "description": "Predicted proposed percentage to the opponent in trial i, computed as a mixture of the fair offer and the selfish baseline",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "A binary mixture model for proposer behavior that calculates a fairness norm from token information and contrasts it with a selfish baseline offer. A linear decision utility is formed and scaled by an inverse temperature, then passed through a logistic function to yield the probability of choosing the fair offer. The final predicted proposed percentage is a weighted average of the fairness norm and the selfish baseline.",
  "target_variable": "proposed_perc",
  "full_reasoning": "Step-by-step reasoning:\n1. Key psychological mechanisms:\n\u2003\u2022 Proposers weigh fairness norms \u2013 here defined as what would be \u201cfair\u201d given both their own and their opponent\u2019s found tokens \u2013 against self\u2010interest. The fairness norm is derived from the relative token contributions.\n\u2003\u2022 They are assumed to choose between two candidate offers: a \u201cfair offer\u201d (what would be fairly allocated based on token proportions) versus a \u201cselfish offer\u201d (a baseline offer that favors the proposer).\n\u2003\u2022 The proposer\u2019s decision can be described as a binary choice between these two options, with their preference governed by the difference between the fairness norm and the baseline (selfish) offer.\n\u2003\u2022 This difference is transformed into a decision utility that, via a logistic function (with an adjustable sensitivity factor), yields the probability of choosing the fair option.\n\u2003\u2022 The final predicted proposed percentage is then a binary mixture: if the fair option is chosen the offer equals the fairness norm percentage, and if not, it equals the selfish baseline. \n\n2. Interaction of mechanisms:\n\u2003\u2022 The fairness norm (p_fair) is computed from tokens: p_fair = (token_opp/(token_self+token_opp))\u00d7100.\n\u2003\u2022 A decision utility U is computed as a linear function of the difference between p_fair and the selfish baseline parameter (ps), plus an intercept.\n\u2003\u2022 An inverse temperature parameter (tau) scales the utility before applying the logistic function. A higher tau makes the choice \u201charder\u201d (i.e. more deterministic).\n\u2003\u2022 The predicted percentage is then a convex combination: with probability (given by the logistic) the proposer will offer p_fair, and with complementary probability, they will offer ps.\n\n3. Mathematical form:\n\u2003\u2022 For each trial i, first compute p_fair_i.\n\u2003\u2022 Then utility: U_i = beta0 + beta1 \u00b7 (p_fair_i \u2013 ps).\n\u2003\u2022 Convert utility to a probability via logistic scaled by tau.\n\u2003\u2022 The predicted offer is the weighted average of p_fair_i and ps.\n\n4. Required parameters:\n\u2003\u2022 beta0: intercept (real, but bounded for estimation purposes)\n\u2003\u2022 beta1: slope (sensitivity to the difference between fairness norm and baseline)\n\u2003\u2022 ps: selfish baseline offer, which must lie between 0 and 100 (generous bounds)\n\u2003\u2022 tau: inverse temperature parameter (sensitive to discrimination in utility; positive)\n\n5. Mapping:\n\u2003\u2022 Input variables token_self and token_opp produce p_fair.\n\u2003\u2022 The parameters beta0, beta1, ps, and tau are learnable.\n\u2003\u2022 The final choice is predicted through the logistic-transformed utility, generating the proposed_perc.\n\nBelow is the formal specification:\n\n\u2003\n<MODEL>\np_fair_i = (token_opp_i/(token_self_i+token_opp_i))*100\nU_i = beta0 + beta1*(p_fair_i - ps)\nP_fair_i = 1/(1+exp(-tau*U_i))\nproposed_perc_i = P_fair_i*p_fair_i + (1-P_fair_i)*ps\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"token_self_i\": {\n      \"description\": \"Number of tokens found by the participant in trial i\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp_i\": {\n      \"description\": \"Number of tokens found by the opponent in trial i\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"p_fair_i\": {\n      \"description\": \"Fair offer percentage computed from tokens as token_opp/(token_self+token_opp)*100\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta0\": {\n      \"description\": \"Intercept (baseline tendency) in the decision utility function\",\n      \"range\": {\n        \"min\": -1000,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": -1000,\n          \"upper\": 1000\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta1\": {\n      \"description\": \"Sensitivity parameter for the difference between fairness norm and baseline offer\",\n      \"range\": {\n        \"min\": -1000,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": -1000,\n          \"upper\": 1000\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"ps\": {\n      \"description\": \"Selfish baseline offer percentage that the proposer tends toward if not following the fairness norm\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": 0,\n          \"upper\": 100\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"tau\": {\n      \"description\": \"Inverse temperature parameter controlling the steepness of the logistic function\",\n      \"range\": {\n        \"min\": 0.001,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": 0.001,\n          \"upper\": 100\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U_i\": {\n      \"description\": \"Decision utility for trial i comparing the fair offer to the selfish baseline\",\n      \"range\": {\n        \"min\": -10000,\n        \"max\": 10000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"P_fair_i\": {\n      \"description\": \"Probability of choosing the fair offer in trial i as determined by the logistic function\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"proposed_perc_i\": {\n      \"description\": \"Predicted proposed percentage to the opponent in trial i, computed as a mixture of the fair offer and the selfish baseline\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>proposed_perc</target_variable>\n\n<SUMMARY>\nA binary mixture model for proposer behavior that calculates a fairness norm from token information and contrasts it with a selfish baseline offer. A linear decision utility is formed and scaled by an inverse temperature, then passed through a logistic function to yield the probability of choosing the fair offer. The final predicted proposed percentage is a weighted average of the fairness norm and the selfish baseline.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: p_fair_i = (token_opp_i/(token_self_i+token_opp_i))*100\nU_i = beta0 + beta1*(p_fair_i - ps)\nP_fair_i = 1/(1+exp(-tau*U_i))\nproposed_perc_i = P_fair_i*p_fair_i + (1-P_fair_i)*ps\nSummary: A binary mixture model for proposer behavior that calculates a fairness norm from token information and contrasts it with a selfish baseline offer. A linear decision utility is formed and scaled by an inverse temperature, then passed through a logistic function to yield the probability of choosing the fair offer. The final predicted proposed percentage is a weighted average of the fairness norm and the selfish baseline.\nTarget Variable: proposed_perc\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, beta0=0, beta1=1, ps=50, tau=1):\n    model_predictions = []\n    for trial in trial_data:\n        token_self_i = trial.get(\"token_self\", 0)\n        token_opp_i = trial.get(\"token_opp\", 0)\n        if token_self_i + token_opp_i == 0: #Handle division by zero\n          p_fair_i = 50 # Default to 50% if no tokens are present.\n        else:\n          p_fair_i = (token_opp_i / (token_self_i + token_opp_i)) * 100\n        U_i = beta0 + beta1 * (p_fair_i - ps)\n        try:\n            P_fair_i = 1 / (1 + math.exp(-tau * U_i))\n        except OverflowError: #Handle potential OverflowError in exp function.\n            P_fair_i = 1.0 if U_i > 0 else 0.0\n        proposed_perc_i = P_fair_i * p_fair_i + (1 - P_fair_i) * ps\n        model_predictions.append(proposed_perc_i)\n    return model_predictions",
  "total_retries": 0,
  "fitting_results": [
    {
      "beta0": -164.9766815467109,
      "beta1": 15.179671070306313,
      "ps": 38.97699462159265,
      "tau": 36.64518158800604,
      "success": true,
      "log_likelihood": -1111.4782646970202,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": -131.97938775608668,
      "beta1": -26.896970817930992,
      "ps": 0.0,
      "tau": 98.27378558108595,
      "success": true,
      "log_likelihood": -35.35050619835717,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": -123.29234618304645,
      "beta1": -778.7619688498987,
      "ps": 60.61123878636197,
      "tau": 56.882090692671014,
      "success": true,
      "log_likelihood": -1086.9724791334736,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": -718.4430935907588,
      "beta1": -216.3794379570072,
      "ps": 57.63465819308083,
      "tau": 4.006284186867353,
      "success": true,
      "log_likelihood": -1086.934076891601,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 563.61219162717,
      "beta1": -608.0740895778322,
      "ps": 76.64376985750562,
      "tau": 42.71148318983711,
      "success": true,
      "log_likelihood": -1086.979027086904,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": -203.76151224923956,
      "beta1": 374.41700255316823,
      "ps": 11.293675341089916,
      "tau": 2.8208359117611437,
      "success": true,
      "log_likelihood": -1086.9790270869044,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": -152.13883951968103,
      "beta1": -830.0722100500699,
      "ps": 0.0,
      "tau": 84.16015820984029,
      "success": true,
      "log_likelihood": -35.35050619835717,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 215.68846704202065,
      "beta1": -343.98564924192226,
      "ps": 35.78390336459223,
      "tau": 97.59391308128534,
      "success": true,
      "log_likelihood": -899.9784687375994,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": -503.70752958077026,
      "beta1": 352.2293000528384,
      "ps": 12.393557665068478,
      "tau": 3.318206961325036,
      "success": true,
      "log_likelihood": -1086.9790270869041,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 430.131410065733,
      "beta1": -99.8350618979731,
      "ps": 39.23617501031779,
      "tau": 19.239488949613314,
      "success": true,
      "log_likelihood": -972.2250403492824,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": -39.41798258195229,
      "beta1": -179.88553869415648,
      "ps": 0.0,
      "tau": 66.85316779791793,
      "success": true,
      "log_likelihood": -35.35050619835717,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": -758.3719261728601,
      "beta1": -799.0929296647357,
      "ps": 0.0,
      "tau": 71.30553297540513,
      "success": true,
      "log_likelihood": -35.35050619835717,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": -343.32962331518854,
      "beta1": -782.6544188634991,
      "ps": 91.1001573817057,
      "tau": 14.178468931687352,
      "success": true,
      "log_likelihood": -1086.9790270869041,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": -180.14858064668715,
      "beta1": -713.5580924149842,
      "ps": 0.0,
      "tau": 53.8586978807532,
      "success": true,
      "log_likelihood": -35.35050619835717,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": -845.6629573938648,
      "beta1": -354.19573474448373,
      "ps": 40.681566002236146,
      "tau": 16.35397425660102,
      "success": true,
      "log_likelihood": -997.9158700567721,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": -435.92128001455933,
      "beta1": -230.21258477345157,
      "ps": 72.51905391090592,
      "tau": 41.224925322044164,
      "success": true,
      "log_likelihood": -1086.9790270869041,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": -947.9717368709693,
      "beta1": -597.2327691207922,
      "ps": 0.0,
      "tau": 67.05627863568697,
      "success": true,
      "log_likelihood": -35.35050619835717,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": -20.169194969496402,
      "beta1": -253.5294682291667,
      "ps": 0.0,
      "tau": 66.76381499313293,
      "success": true,
      "log_likelihood": -35.35050619835717,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": -791.763495052964,
      "beta1": 83.96622302240786,
      "ps": 23.905184212103368,
      "tau": 97.87513404082395,
      "success": true,
      "log_likelihood": -1039.855963906193,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 968.1721450864732,
      "beta1": -220.5320474283492,
      "ps": 0.0,
      "tau": 98.80593664894607,
      "success": true,
      "log_likelihood": -35.35050619835717,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": -894.4813251254955,
      "beta1": -957.2159449876332,
      "ps": 0.0,
      "tau": 4.667561853063516,
      "success": true,
      "log_likelihood": -35.35050619835717,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": -675.9268890715659,
      "beta1": -245.02175162141998,
      "ps": 0.0,
      "tau": 16.537982817779305,
      "success": true,
      "log_likelihood": -35.35050619835717,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 510.89257608175103,
      "beta1": -605.2780715668138,
      "ps": 50.364597543720244,
      "tau": 87.15184598024787,
      "success": true,
      "log_likelihood": -1085.1241533253765,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 377.15442981614433,
      "beta1": -391.0971677277995,
      "ps": 0.0,
      "tau": 89.7271148723253,
      "success": true,
      "log_likelihood": -35.35050619835717,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": -418.52111864330993,
      "beta1": -503.4571233045588,
      "ps": 88.50152206566958,
      "tau": 32.49411988781799,
      "success": true,
      "log_likelihood": -1086.9790270869041,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": -253.5522228097642,
      "beta1": -476.29313879963524,
      "ps": 45.726636546678066,
      "tau": 56.78793921333262,
      "success": true,
      "log_likelihood": -1062.7544473752512,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": -404.81314093877916,
      "beta1": -402.92521317307626,
      "ps": 0.0,
      "tau": 50.0378240804664,
      "success": true,
      "log_likelihood": -35.35050619835717,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 21.16955516679809,
      "beta1": -944.4312645029673,
      "ps": 37.37784729715274,
      "tau": 5.2332885146487005,
      "success": true,
      "log_likelihood": -932.3625776418006,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 836.6150585969667,
      "beta1": -309.74374787482793,
      "ps": 63.29997193864091,
      "tau": 83.59475528412524,
      "success": true,
      "log_likelihood": -1086.9775617486866,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": -806.7004174550079,
      "beta1": -567.5717417049419,
      "ps": 52.87430855795422,
      "tau": 69.52992699103214,
      "success": true,
      "log_likelihood": -1086.4339906256068,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": -178.65925142851836,
      "beta1": -275.69464672063407,
      "ps": 78.6614171754378,
      "tau": 16.21734583944844,
      "success": true,
      "log_likelihood": -1086.979027086904,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": -105.06427388783004,
      "beta1": -247.49136337060577,
      "ps": 0.0,
      "tau": 3.7515600547673666,
      "success": true,
      "log_likelihood": -35.35050619835717,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": -442.361903331471,
      "beta1": -416.14669709599593,
      "ps": 0.0,
      "tau": 78.51344187256677,
      "success": true,
      "log_likelihood": -35.35050619835717,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": -488.7513787746063,
      "beta1": -843.2509101104073,
      "ps": 0.0,
      "tau": 91.19040037627254,
      "success": true,
      "log_likelihood": -35.35050619835717,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": -833.5883419528025,
      "beta1": -256.2110051874773,
      "ps": 0.0,
      "tau": 97.80859852774911,
      "success": true,
      "log_likelihood": -35.35050619835717,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": -902.9672976225347,
      "beta1": -785.9208933179525,
      "ps": 0.0,
      "tau": 51.96629360400919,
      "success": true,
      "log_likelihood": -35.35050619835717,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 443.16501115823166,
      "beta1": -56.57896837854696,
      "ps": 0.0,
      "tau": 3.5568558393983665,
      "success": true,
      "log_likelihood": -35.35050619835717,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": -327.4970322596158,
      "beta1": 601.243664651782,
      "ps": 24.285961885765385,
      "tau": 26.902800883917074,
      "success": true,
      "log_likelihood": -1086.9790270869041,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 846.9865508988319,
      "beta1": -675.3325922616069,
      "ps": 0.0,
      "tau": 96.06385154755536,
      "success": true,
      "log_likelihood": -35.35050619835717,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": -449.9962803157414,
      "beta1": 903.7942282010258,
      "ps": 11.207130942314725,
      "tau": 90.8505590284603,
      "success": true,
      "log_likelihood": -1086.979027086904,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 924.5293750312796,
      "beta1": -688.3511328054249,
      "ps": 0.0,
      "tau": 40.435839312171595,
      "success": true,
      "log_likelihood": -35.35050619835717,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": -402.5301925337201,
      "beta1": -814.7760927348451,
      "ps": 0.0,
      "tau": 90.62163321783605,
      "success": true,
      "log_likelihood": -35.35050619835717,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": -6.376321202438135,
      "beta1": -446.2384292956307,
      "ps": 0.0,
      "tau": 6.43068465766253,
      "success": true,
      "log_likelihood": -35.35050619835717,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": -679.7158345722999,
      "beta1": -6.617090809233105,
      "ps": 0.0,
      "tau": 75.76499431872142,
      "success": true,
      "log_likelihood": -35.35050619835717,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 785.2863666575727,
      "beta1": 269.5438048171013,
      "ps": 42.34159429318094,
      "tau": 41.08311164901962,
      "success": true,
      "log_likelihood": -1130.5841212000523,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": -736.4887563254031,
      "beta1": 9.254336371430732,
      "ps": 0.0,
      "tau": 84.6667964720399,
      "success": true,
      "log_likelihood": -35.35050619835717,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": -637.9948913086632,
      "beta1": -870.558663115311,
      "ps": 0.0,
      "tau": 24.36568163035116,
      "success": true,
      "log_likelihood": -35.35050619835717,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 429.14911676437214,
      "beta1": 864.6485723858182,
      "ps": 29.496454498747703,
      "tau": 33.264402820341815,
      "success": true,
      "log_likelihood": -1086.9790270869041,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 855.7922254298151,
      "beta1": -857.5477674299534,
      "ps": 66.51596989067254,
      "tau": 89.8001987362576,
      "success": true,
      "log_likelihood": -1086.9790270869041,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": -312.38317371127675,
      "beta1": -487.703387527397,
      "ps": 0.0,
      "tau": 98.80765808719018,
      "success": true,
      "log_likelihood": -35.35050619835717,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 25.145303473922013,
      "beta1": 516.6437199063048,
      "ps": 39.64475770249179,
      "tau": 25.180145064039184,
      "success": true,
      "log_likelihood": -1118.1552656373456,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 988.6992294864942,
      "beta1": -403.54991153037736,
      "ps": 0.0,
      "tau": 71.60083206194192,
      "success": true,
      "log_likelihood": -35.35050619835717,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 97.16456939861814,
      "beta1": -494.36600951288347,
      "ps": 36.72294598066327,
      "tau": 90.74775805581594,
      "success": true,
      "log_likelihood": -919.085147537638,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 855.3523208238018,
      "beta1": -581.6958334842732,
      "ps": 73.31711735766909,
      "tau": 28.932841102948778,
      "success": true,
      "log_likelihood": -1086.979027086904,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": -877.2862830777457,
      "beta1": -773.2671108344036,
      "ps": 0.0,
      "tau": 91.38303125303491,
      "success": true,
      "log_likelihood": -35.35050619835717,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": -690.2829724114695,
      "beta1": -931.2789105786659,
      "ps": 0.0,
      "tau": 62.70957298653426,
      "success": true,
      "log_likelihood": -35.35050619835717,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 843.1975396067453,
      "beta1": -226.24036953504458,
      "ps": 0.0,
      "tau": 7.403141399098265,
      "success": true,
      "log_likelihood": -35.35050619835717,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": -236.13563252319977,
      "beta1": 391.6033859956867,
      "ps": 4.205738995435371,
      "tau": 45.62263240498524,
      "success": true,
      "log_likelihood": -1086.979027086904,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 413.4178585480329,
      "beta1": -224.56312055754472,
      "ps": 49.90323674657162,
      "tau": 68.3650072592491,
      "success": true,
      "log_likelihood": -1084.6726913506395,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 919.1128436272832,
      "beta1": -630.7357372830247,
      "ps": 62.41991664699991,
      "tau": 68.63304329010685,
      "success": true,
      "log_likelihood": -1086.9765627775437,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": -808.6594057045658,
      "beta1": 235.39483296182516,
      "ps": 7.256291343775423,
      "tau": 43.30943500290808,
      "success": true,
      "log_likelihood": -1086.9790270869044,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": -729.4285712499453,
      "beta1": 140.90824843238056,
      "ps": 15.415949562809628,
      "tau": 16.5313415783166,
      "success": true,
      "log_likelihood": -1086.9790270869041,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": -790.8149154631814,
      "beta1": -904.8543261225943,
      "ps": 0.0,
      "tau": 53.70842288999188,
      "success": true,
      "log_likelihood": -35.35050619835717,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 476.20659161314506,
      "beta1": -615.5844437349039,
      "ps": 64.69163715339299,
      "tau": 2.613559134172335,
      "success": true,
      "log_likelihood": -1086.9784720092855,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 926.9415858679477,
      "beta1": 960.2109753573018,
      "ps": 21.63411243507992,
      "tau": 42.5545958967111,
      "success": true,
      "log_likelihood": -1086.9790270869041,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": -722.8693077565194,
      "beta1": 171.54202999190102,
      "ps": 11.662438656566298,
      "tau": 65.31849216037917,
      "success": true,
      "log_likelihood": -1086.9790270869041,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": -582.9548333962025,
      "beta1": -363.41183663910965,
      "ps": 37.594939715345724,
      "tau": 5.648035077492772,
      "success": true,
      "log_likelihood": -936.7523372715516,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 185.20151723049662,
      "beta1": -625.9429865598962,
      "ps": 0.0,
      "tau": 74.84176436703898,
      "success": true,
      "log_likelihood": -35.35050619835717,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 452.3925103171257,
      "beta1": -899.0845694875385,
      "ps": 0.0,
      "tau": 41.0890264694873,
      "success": true,
      "log_likelihood": -35.35050619835717,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": -968.7947520400097,
      "beta1": -906.3377463104065,
      "ps": 0.0,
      "tau": 24.920987577947315,
      "success": true,
      "log_likelihood": -35.35050619835717,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": -906.0613069624925,
      "beta1": -20.957267279468397,
      "ps": 86.61118153863768,
      "tau": 97.42638129072101,
      "success": true,
      "log_likelihood": -1089.1966715205097,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 472.4973361670809,
      "beta1": -55.93232762195032,
      "ps": 0.0,
      "tau": 36.516520237350676,
      "success": true,
      "log_likelihood": -35.35050619835717,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 640.7844665355105,
      "beta1": -433.58087262461663,
      "ps": 0.0,
      "tau": 17.550982168786117,
      "success": true,
      "log_likelihood": -35.35050619835717,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 136.44739469385058,
      "beta1": -979.9922159997783,
      "ps": 46.71599577892128,
      "tau": 75.61918095814998,
      "success": true,
      "log_likelihood": -1070.8094419696702,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 979.9273091968794,
      "beta1": -35.32317126765179,
      "ps": 93.22805339885039,
      "tau": 73.74317370229065,
      "success": true,
      "log_likelihood": -1086.979027086904,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": -638.2579148649068,
      "beta1": -887.6086916202693,
      "ps": 60.73620502242707,
      "tau": 28.8835977441812,
      "success": true,
      "log_likelihood": -1086.9728785468126,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 512.8721309831685,
      "beta1": -578.1701880233408,
      "ps": 0.0,
      "tau": 69.9086630589797,
      "success": true,
      "log_likelihood": -35.35050619835717,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": -574.6059392987253,
      "beta1": -191.22395688054542,
      "ps": 0.0,
      "tau": 19.412210183815947,
      "success": true,
      "log_likelihood": -35.35050619835717,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 286.83683898743334,
      "beta1": 142.33419032693746,
      "ps": 3.8787624044002156,
      "tau": 22.00902328013079,
      "success": true,
      "log_likelihood": -1086.9790270869041,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 620.7856061662765,
      "beta1": 546.7705762119645,
      "ps": 25.79763767525084,
      "tau": 20.09956904337029,
      "success": true,
      "log_likelihood": -1086.9790270869041,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": -493.76950584654344,
      "beta1": -626.7466442012,
      "ps": 0.0,
      "tau": 53.925089369037565,
      "success": true,
      "log_likelihood": -35.35050619835717,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": -711.9834004306535,
      "beta1": -282.72108855962983,
      "ps": 0.0,
      "tau": 58.33399228527237,
      "success": true,
      "log_likelihood": -35.35050619835717,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 356.39089600634406,
      "beta1": -82.19286866155403,
      "ps": 62.251558120872104,
      "tau": 20.936375509698852,
      "success": true,
      "log_likelihood": -1086.9763185997747,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 429.39260728529393,
      "beta1": -279.06768241595796,
      "ps": 0.0,
      "tau": 77.79545341172437,
      "success": true,
      "log_likelihood": -35.35050619835717,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": -921.6568271748112,
      "beta1": -24.1654651522025,
      "ps": 0.0,
      "tau": 39.55562917853396,
      "success": true,
      "log_likelihood": -35.35050619835717,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 862.1833728147324,
      "beta1": -748.1917366011833,
      "ps": 0.0,
      "tau": 89.37931618612083,
      "success": true,
      "log_likelihood": -35.35050619835717,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": -338.3050027282479,
      "beta1": -91.03345903112768,
      "ps": 35.08086724728561,
      "tau": 48.02099991400615,
      "success": true,
      "log_likelihood": -894.3510663225184,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 899.6498194323513,
      "beta1": -324.1158195139899,
      "ps": 0.0,
      "tau": 10.666200100879838,
      "success": true,
      "log_likelihood": -35.35050619835717,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 523.2845738040749,
      "beta1": -855.0130581898136,
      "ps": 48.49876227317292,
      "tau": 83.46727554877894,
      "success": true,
      "log_likelihood": -1080.4286041323824,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": -874.8814850602398,
      "beta1": -954.0740330443098,
      "ps": 80.59230353196361,
      "tau": 26.696488583521226,
      "success": true,
      "log_likelihood": -1086.979027086904,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": -315.2189202337456,
      "beta1": -34.51332652336191,
      "ps": 82.00818405149232,
      "tau": 4.33796940730354,
      "success": true,
      "log_likelihood": -1086.979027086904,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "participant_id": null,
      "n_trials": 51
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "beta0": {
        "r": 0.09415948585354207,
        "p": 0.35142486578482107
      },
      "beta1": {
        "r": -0.021000851412128138,
        "p": 0.8357044757027224
      },
      "ps": {
        "r": 0.1631416111476276,
        "p": 0.10484826501719319
      },
      "tau": {
        "r": 0.06009947691468541,
        "p": 0.5525281221813082
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 1149.5715518057102,
  "bic_error": "'ModelOutput' object has no attribute 'metrics'",
  "recovery_summary": "Parameter Recovery:\n- beta0: r = 0.094\n- beta1: r = -0.021\n- ps: r = 0.163\n- tau: r = 0.060",
  "previous_models": [
    "Specification: p_fair_i = (token_opp_i/(token_self_i+token_opp_i))*100\nU_i = beta0 + beta1*(p_fair_i - ps)\nP_fair_i = 1/(1+exp(-tau*U_i))\nproposed_perc_i = P_fair_i*p_fair_i + (1-P_fair_i)*ps\nSummary: A binary mixture model for proposer behavior that calculates a fairness norm from token information and contrasts it with a selfish baseline offer. A linear decision utility is formed and scaled by an inverse temperature, then passed through a logistic function to yield the probability of choosing the fair offer. The final predicted proposed percentage is a weighted average of the fairness norm and the selfish baseline.\nTarget Variable: proposed_perc\nPrediction Type: utility\nBIC: 1149.5715518057102\n\nParameter Recovery:\n- beta0: r = 0.094\n- beta1: r = -0.021\n- ps: r = 0.163\n- tau: r = 0.060"
  ]
}