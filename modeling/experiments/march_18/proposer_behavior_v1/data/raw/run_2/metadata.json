{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641",
  "output_description": "Design a computational model for the described task.\n\nYour model should use the given variables appropriately, but does not necessary need to use all or even most of the variables. \n\nThe model should:\n1. Predict only proposer behavior (specifically, it should predict `proposed_perc`).\n2. Be VERY considerate of high covariance between learnable parameters as the model\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Have an appropriate number or learnable parameters, with a slight bias for less learnable paramters.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641\n\nDesired Output Specification: Design a computational model for the described task.\n\nYour model should use the given variables appropriately, but does not necessary need to use all or even most of the variables. \n\nThe model should:\n1. Predict only proposer behavior (specifically, it should predict `proposed_perc`).\n2. Be VERY considerate of high covariance between learnable parameters as the model\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Have an appropriate number or learnable parameters, with a slight bias for less learnable paramters.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function, and then used to predict binary decisions.\n\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "Step 1: Reasoning\n\n\u2022 Key psychological mechanisms: In proposer trials, participants appear to face a binary tension between adhering to a fairness norm (e.g. offering an even split) and deviating toward a more self\u2010oriented, or selfish, proposal. Their decision may be influenced by how much they versus their opponent contributed (as measured by token_self and token_opp). A participant who is \u201cunder\u2010contributing\u201d relative to the opponent might feel a stronger pull toward fairness, whereas a participant who \u201cover\u2010contributes\u201d may lean toward a more selfish proposal. \n\n\u2022 How these mechanisms interact: We assume that the proposer\u2019s decision is the outcome of a binary evaluation \u2013 to be \u201cfair\u201d (offer a pre\u2010specified fair proportion, taken here as 50%) or to be \u201cselfish\u201d (offer a lower proportion, here a learnable parameter). The difference in utilities (reflecting a baseline bias plus an effect of relative token difference) will determine a probability via the logistic function. \n\n\u2022 Mathematical form capturing these interactions: Define a latent utility function U = \u03bb + \u03b4_token\u00b7(token_opp \u2212 token_self) that captures the net tendency toward a fair offer. The probability of choosing the fairness option is given by a logistic function, p = 1/(1 + exp(\u2212U)). Then, the predicted offered percentage (proposed_perc) is a weighted average between a fixed fair offer (50%) and a selfish offer (s), where s is a learnable parameter.\n\n\u2022 Parameters needed to calibrate the model: \n\u2003\u2003\u2022 \u03bb: a baseline fairness bias parameter (learnable, bounded, e.g., from \u221210 to 10)\n\u2003\u2003\u2022 \u03b4_token: sensitivity to the difference between the opponent\u2019s and one\u2019s own token values (learnable, bounded, e.g., from \u221210 to 10)\n\u2003\u2003\u2022 selfish_offer: the proposed percentage when \u201cselfish\u201d choice is made (learnable, bounded, from 0 to 100)\n\n\u2022 Mapping to observable behavior: The observed proposed_perc is predicted as the mixture of the fair option (50%) and the selfish option (s), weighted by the probability of choosing fairness computed from the logistic transformation of the latent utility.\n\nBelow is the formal mathematical model and variable descriptions.\n\n<MODEL>\np = 1/(1 + exp(-(lambda + delta_token*(token_opp - token_self))))\nproposed_perc = p*50 + (1 - p)*selfish_offer\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"lambda\": {\n      \"description\": \"Baseline fairness bias parameter; higher values increase the likelihood of a fair offer\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": -10,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"delta_token\": {\n      \"description\": \"Sensitivity parameter for the difference between opponent and self tokens; positive values make fairness more likely when token_opp > token_self\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": -10,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"selfish_offer\": {\n      \"description\": \"Offer percentage when the participant opts for the selfish option\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0,\n          \"max\": 100\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent; used to compute relative contribution\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant; used to compute relative contribution\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>proposed_perc</target_variable>\n\n<SUMMARY>\nA binary choice model for proposer behavior that computes a latent utility based on a baseline bias and the difference between opponent and self tokens. The logistic transformation of this utility determines the probability of choosing a fair offer (fixed at 50%), while the complementary probability yields a selfish offer (a learnable parameter). The final proposed percentage is a weighted average of these two options.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['lambda', 'delta_token', 'selfish_offer']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block:\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                p = 1/(1 + exp(-(lambda + delta_token*(token_opp - token_self))))\nproposed_perc = p*50 + (1 - p)*selfish_offer\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"lambda\": {\n      \"description\": \"Baseline fairness bias parameter; higher values increase the likelihood of a fair offer\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": -10,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"delta_token\": {\n      \"description\": \"Sensitivity parameter for the difference between opponent and self tokens; positive values make fairness more likely when token_opp > token_self\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": -10,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"selfish_offer\": {\n      \"description\": \"Offer percentage when the participant opts for the selfish option\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0,\n          \"max\": 100\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent; used to compute relative contribution\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant; used to compute relative contribution\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641\n\n                ",
      "output": "Step 2: Code Implementation\n\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, lambd=0, delta_token=0, selfish_offer=0):\n    model_predictions = []\n    for trial in trial_data:\n        token_opp = trial.get(\"token_opp\", 0)\n        token_self = trial.get(\"token_self\", 0)\n\n        try:\n            p = 1 / (1 + math.exp(-(lambd + delta_token * (token_opp - token_self))))\n            proposed_perc = p * 50 + (1 - p) * selfish_offer\n            model_predictions.append(proposed_perc)\n        except OverflowError: #Handle potential overflow errors in exp function.\n            if lambd + delta_token * (token_opp - token_self) > 0:\n                model_predictions.append(50)\n            else:\n                model_predictions.append(selfish_offer)\n\n    return model_predictions\n\n# Example usage (replace with your actual data loading)\ndata_json = '[{\"token_opp\": 100, \"token_self\": 50}, {\"token_opp\": 50, \"token_self\": 100}]'\ndata = json.loads(data_json)\n\n#Get results for the data, setting parameters for testing\nresults = simulate_model(data, lambd=1, delta_token=0.5, selfish_offer=25)\nprint(json.dumps({\"results\": results}))\n```",
      "timestamp": 1742293596.169485
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['lambda', 'delta_token', 'selfish_offer']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block:\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                p = 1/(1 + exp(-(lambda + delta_token*(token_opp - token_self))))\nproposed_perc = p*50 + (1 - p)*selfish_offer\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"lambda\": {\n      \"description\": \"Baseline fairness bias parameter; higher values increase the likelihood of a fair offer\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": -10,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"delta_token\": {\n      \"description\": \"Sensitivity parameter for the difference between opponent and self tokens; positive values make fairness more likely when token_opp > token_self\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": -10,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"selfish_offer\": {\n      \"description\": \"Offer percentage when the participant opts for the selfish option\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0,\n          \"max\": 100\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent; used to compute relative contribution\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant; used to compute relative contribution\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641\n\n                ",
      "output": "```python\nimport json\nimport math\n\ndef simulate_model(trial_data, lambd=0, delta_token=0, selfish_offer=50): #Renamed lambda to lambd to avoid keyword conflict\n    model_predictions = []\n    for trial in trial_data:\n        token_opp = trial.get(\"token_opp\", 0)\n        token_self = trial.get(\"token_self\", 0)\n        try:\n            p = 1 / (1 + math.exp(-(lambd + delta_token * (token_opp - token_self))))\n            proposed_perc = p * 50 + (1 - p) * selfish_offer\n            model_predictions.append(proposed_perc)\n        except OverflowError: #Handle potential overflow errors in exp function\n            print(f\"Overflow error encountered for trial: {trial}\")\n            model_predictions.append(None) # Or handle appropriately for your needs.\n\n    return model_predictions\n\n# Example usage (replace with your actual data loading)\ndata_json = '[{\"token_opp\": 10, \"token_self\": 5}, {\"token_opp\": 20, \"token_self\": 30}]'\ndata = json.loads(data_json)\n\n# Get results for the data.  Setting learnable parameters to example values.\nresults = simulate_model(data, lambd=0.5, delta_token=0.5, selfish_offer=25)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n```",
      "timestamp": 1742293598.7389948
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['lambda', 'delta_token', 'selfish_offer']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block:\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                p = 1/(1 + exp(-(lambda + delta_token*(token_opp - token_self))))\nproposed_perc = p*50 + (1 - p)*selfish_offer\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"lambda\": {\n      \"description\": \"Baseline fairness bias parameter; higher values increase the likelihood of a fair offer\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": -10,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"delta_token\": {\n      \"description\": \"Sensitivity parameter for the difference between opponent and self tokens; positive values make fairness more likely when token_opp > token_self\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": -10,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"selfish_offer\": {\n      \"description\": \"Offer percentage when the participant opts for the selfish option\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0,\n          \"max\": 100\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent; used to compute relative contribution\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant; used to compute relative contribution\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641\n\n                ",
      "output": "```python\nimport json\nimport math\n\ndef simulate_model(trial_data, lambd, delta_token, selfish_offer):\n    model_predictions = []\n    for trial in trial_data:\n        token_opp = trial.get(\"token_opp\", 0)\n        token_self = trial.get(\"token_self\", 0)\n\n        try:\n            p = 1 / (1 + math.exp(-(lambd + delta_token * (token_opp - token_self))))\n            proposed_perc = p * 50 + (1 - p) * selfish_offer\n            model_predictions.append(proposed_perc)\n        except OverflowError:\n            #Handle potential OverflowError from exp function.  Could be due to very large or small values of lambd + delta_token * (token_opp - token_self)\n            #Choose a reasonable default, or  a more sophisticated error handling depending on needs.\n            model_predictions.append(50) # Default to 50% if overflow occurs.\n\n    return model_predictions\n\ndata_json = \"\"\"\n[\n  {\"token_opp\": 10, \"token_self\": 5},\n  {\"token_opp\": 20, \"token_self\": 30},\n  {\"token_opp\": 15, \"token_self\": 15}\n]\n\"\"\"\ndata = json.loads(data_json)\n\n#Example usage, replace with actual parameter values.  Error handling added for potential issues with exp function.\nresults = simulate_model(data, lambd=0.5, delta_token=0.5, selfish_offer=25)\nprint(json.dumps({\"results\": results}))\n\n```",
      "timestamp": 1742293601.903778
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['lambda', 'delta_token', 'selfish_offer']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block:\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                p = 1/(1 + exp(-(lambda + delta_token*(token_opp - token_self))))\nproposed_perc = p*50 + (1 - p)*selfish_offer\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"lambda\": {\n      \"description\": \"Baseline fairness bias parameter; higher values increase the likelihood of a fair offer\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": -10,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"delta_token\": {\n      \"description\": \"Sensitivity parameter for the difference between opponent and self tokens; positive values make fairness more likely when token_opp > token_self\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": -10,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"selfish_offer\": {\n      \"description\": \"Offer percentage when the participant opts for the selfish option\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0,\n          \"max\": 100\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent; used to compute relative contribution\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant; used to compute relative contribution\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641\n\n                ",
      "output": "",
      "timestamp": 1742293604.554035
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['lambda', 'delta_token', 'selfish_offer']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block:\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                p = 1/(1 + exp(-(lambda + delta_token*(token_opp - token_self))))\nproposed_perc = p*50 + (1 - p)*selfish_offer\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"lambda\": {\n      \"description\": \"Baseline fairness bias parameter; higher values increase the likelihood of a fair offer\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": -10,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"delta_token\": {\n      \"description\": \"Sensitivity parameter for the difference between opponent and self tokens; positive values make fairness more likely when token_opp > token_self\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": -10,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"selfish_offer\": {\n      \"description\": \"Offer percentage when the participant opts for the selfish option\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0,\n          \"max\": 100\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent; used to compute relative contribution\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant; used to compute relative contribution\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641\n\n                ",
      "output": "",
      "timestamp": 1742293604.97442
    }
  ],
  "learnable_parameters": {
    "lambda": {
      "description": "Baseline fairness bias parameter; higher values increase the likelihood of a fair offer",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": -10,
          "max": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "delta_token": {
      "description": "Sensitivity parameter for the difference between opponent and self tokens; positive values make fairness more likely when token_opp > token_self",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": -10,
          "max": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "selfish_offer": {
      "description": "Offer percentage when the participant opts for the selfish option",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": 0,
          "max": 100
        }
      },
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "p = 1/(1 + exp(-(lambda + delta_token*(token_opp - token_self))))\nproposed_perc = p*50 + (1 - p)*selfish_offer",
  "variable_descriptions": {
    "lambda": {
      "description": "Baseline fairness bias parameter; higher values increase the likelihood of a fair offer",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": -10,
          "max": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "delta_token": {
      "description": "Sensitivity parameter for the difference between opponent and self tokens; positive values make fairness more likely when token_opp > token_self",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": -10,
          "max": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "selfish_offer": {
      "description": "Offer percentage when the participant opts for the selfish option",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": 0,
          "max": 100
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent; used to compute relative contribution",
      "range": {
        "min": 0,
        "max": 1000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Number of tokens found by the participant; used to compute relative contribution",
      "range": {
        "min": 0,
        "max": 1000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    }
  },
  "model_summary": "A binary choice model for proposer behavior that computes a latent utility based on a baseline bias and the difference between opponent and self tokens. The logistic transformation of this utility determines the probability of choosing a fair offer (fixed at 50%), while the complementary probability yields a selfish offer (a learnable parameter). The final proposed percentage is a weighted average of these two options.",
  "target_variable": "proposed_perc",
  "full_reasoning": "Step 1: Reasoning\n\n\u2022 Key psychological mechanisms: In proposer trials, participants appear to face a binary tension between adhering to a fairness norm (e.g. offering an even split) and deviating toward a more self\u2010oriented, or selfish, proposal. Their decision may be influenced by how much they versus their opponent contributed (as measured by token_self and token_opp). A participant who is \u201cunder\u2010contributing\u201d relative to the opponent might feel a stronger pull toward fairness, whereas a participant who \u201cover\u2010contributes\u201d may lean toward a more selfish proposal. \n\n\u2022 How these mechanisms interact: We assume that the proposer\u2019s decision is the outcome of a binary evaluation \u2013 to be \u201cfair\u201d (offer a pre\u2010specified fair proportion, taken here as 50%) or to be \u201cselfish\u201d (offer a lower proportion, here a learnable parameter). The difference in utilities (reflecting a baseline bias plus an effect of relative token difference) will determine a probability via the logistic function. \n\n\u2022 Mathematical form capturing these interactions: Define a latent utility function U = \u03bb + \u03b4_token\u00b7(token_opp \u2212 token_self) that captures the net tendency toward a fair offer. The probability of choosing the fairness option is given by a logistic function, p = 1/(1 + exp(\u2212U)). Then, the predicted offered percentage (proposed_perc) is a weighted average between a fixed fair offer (50%) and a selfish offer (s), where s is a learnable parameter.\n\n\u2022 Parameters needed to calibrate the model: \n\u2003\u2003\u2022 \u03bb: a baseline fairness bias parameter (learnable, bounded, e.g., from \u221210 to 10)\n\u2003\u2003\u2022 \u03b4_token: sensitivity to the difference between the opponent\u2019s and one\u2019s own token values (learnable, bounded, e.g., from \u221210 to 10)\n\u2003\u2003\u2022 selfish_offer: the proposed percentage when \u201cselfish\u201d choice is made (learnable, bounded, from 0 to 100)\n\n\u2022 Mapping to observable behavior: The observed proposed_perc is predicted as the mixture of the fair option (50%) and the selfish option (s), weighted by the probability of choosing fairness computed from the logistic transformation of the latent utility.\n\nBelow is the formal mathematical model and variable descriptions.\n\n<MODEL>\np = 1/(1 + exp(-(lambda + delta_token*(token_opp - token_self))))\nproposed_perc = p*50 + (1 - p)*selfish_offer\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"lambda\": {\n      \"description\": \"Baseline fairness bias parameter; higher values increase the likelihood of a fair offer\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": -10,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"delta_token\": {\n      \"description\": \"Sensitivity parameter for the difference between opponent and self tokens; positive values make fairness more likely when token_opp > token_self\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": -10,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"selfish_offer\": {\n      \"description\": \"Offer percentage when the participant opts for the selfish option\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0,\n          \"max\": 100\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent; used to compute relative contribution\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant; used to compute relative contribution\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>proposed_perc</target_variable>\n\n<SUMMARY>\nA binary choice model for proposer behavior that computes a latent utility based on a baseline bias and the difference between opponent and self tokens. The logistic transformation of this utility determines the probability of choosing a fair offer (fixed at 50%), while the complementary probability yields a selfish offer (a learnable parameter). The final proposed percentage is a weighted average of these two options.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: p = 1/(1 + exp(-(lambda + delta_token*(token_opp - token_self))))\nproposed_perc = p*50 + (1 - p)*selfish_offer\nSummary: A binary choice model for proposer behavior that computes a latent utility based on a baseline bias and the difference between opponent and self tokens. The logistic transformation of this utility determines the probability of choosing a fair offer (fixed at 50%), while the complementary probability yields a selfish offer (a learnable parameter). The final proposed percentage is a weighted average of these two options.\nTarget Variable: proposed_perc\nPrediction Type: utility",
  "simulation_errors": [
    {
      "retry_number": 0,
      "error": "  File \"<string>\", line 28\n    results = simulate_model(data, lambda=0.5, delta_token=0.5, selfish_offer=0.5)\n                                         ^\nSyntaxError: invalid syntax\n",
      "timestamp": 1742293596.219303
    },
    {
      "retry_number": 1,
      "error": "  File \"<string>\", line 25\n    results = simulate_model(data, lambda=0.5, delta_token=0.5, selfish_offer=0.5)\n                                         ^\nSyntaxError: invalid syntax\n",
      "timestamp": 1742293598.786282
    },
    {
      "retry_number": 2,
      "error": "  File \"<string>\", line 27\n    results = simulate_model(data, lambda=0.5, delta_token=0.5, selfish_offer=0.5)\n                                         ^\nSyntaxError: invalid syntax\n",
      "timestamp": 1742293601.947365
    },
    {
      "retry_number": 3,
      "error": "Could not extract simulate_model function from generated code",
      "timestamp": 1742293604.554055
    },
    {
      "retry_number": 4,
      "error": "Could not extract simulate_model function from generated code",
      "timestamp": 1742293604.9744399
    }
  ],
  "current_retry": 4,
  "simulation_error": "Failed after maximum retries",
  "simulation_code": "def simulate_model(trial_data, lambd, delta_token, selfish_offer):\n    model_predictions = []\n    for trial in trial_data:\n        token_opp = trial.get(\"token_opp\", 0)\n        token_self = trial.get(\"token_self\", 0)\n\n        try:\n            p = 1 / (1 + math.exp(-(lambd + delta_token * (token_opp - token_self))))\n            proposed_perc = p * 50 + (1 - p) * selfish_offer\n            model_predictions.append(proposed_perc)\n        except OverflowError:\n            #Handle potential OverflowError from exp function.  Could be due to very large or small values of lambd + delta_token * (token_opp - token_self)\n            #Choose a reasonable default, or  a more sophisticated error handling depending on needs.\n            model_predictions.append(50) # Default to 50% if overflow occurs.\n\n    return model_predictions",
  "total_retries": 5,
  "fitting_warnings": [
    "Error fitting participant 1001: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -0.25206356852210554, 'delta_token': 2.5952041813826696, 'selfish_offer': 56.72151575769947}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -6.873143082830273, 'delta_token': -0.3947242459286908, 'selfish_offer': 11.684950560062768}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 8.637050971909954, 'delta_token': -5.032744917051348, 'selfish_offer': 14.62483709748682}\"]",
    "Error fitting participant 1002: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -2.1739928006423987, 'delta_token': -5.201629828154184, 'selfish_offer': 88.86630535200268}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 9.859245128022426, 'delta_token': -0.7790330533405605, 'selfish_offer': 69.78297128204258}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -6.920849829969196, 'delta_token': 3.8259538587318573, 'selfish_offer': 56.00452069209737}\"]",
    "Error fitting participant 1003: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 0.7862053686489219, 'delta_token': 9.802894083313745, 'selfish_offer': 34.12731275581717}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 9.485494196409071, 'delta_token': -3.6744089990823863, 'selfish_offer': 43.96813620453403}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -4.6744666277736275, 'delta_token': -3.31899036066255, 'selfish_offer': 51.37042079418326}\"]",
    "Error fitting participant 1004: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 5.500089378172639, 'delta_token': 5.438528685228585, 'selfish_offer': 69.26903760996524}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 4.492314822029076, 'delta_token': -1.3692907944295403, 'selfish_offer': 48.27169278704305}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 8.179734262256279, 'delta_token': -2.1874249809931907, 'selfish_offer': 2.6598922579990636}\"]",
    "Error fitting participant 1005: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 2.203289185386792, 'delta_token': -1.3968104083565098, 'selfish_offer': 85.4474153919767}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -3.370687457250412, 'delta_token': -5.414539210694709, 'selfish_offer': 41.764881032055015}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 7.761318007982535, 'delta_token': 4.713368143578444, 'selfish_offer': 92.61745157986763}\"]",
    "Error fitting participant 1006: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 0.7015015602685146, 'delta_token': -0.956817614086356, 'selfish_offer': 7.86117454969486}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 3.838867352659003, 'delta_token': -7.357090649605011, 'selfish_offer': 18.431669756513493}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 9.777919171390778, 'delta_token': -9.650881710098478, 'selfish_offer': 2.9998564511941828}\"]",
    "Error fitting participant 1007: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 2.561890205517903, 'delta_token': 2.5141817289157267, 'selfish_offer': 88.10634544800125}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 7.918787771868182, 'delta_token': 7.226790389532024, 'selfish_offer': 81.52707989516593}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 8.05006705742603, 'delta_token': 2.9328708338319274, 'selfish_offer': 55.603281836735455}\"]",
    "Error fitting participant 1008: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -7.001761616403391, 'delta_token': -2.9274439453705536, 'selfish_offer': 36.81941864176236}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 9.755544111572757, 'delta_token': 7.973048681908384, 'selfish_offer': 20.90481853997218}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -5.138700438918353, 'delta_token': 3.0698874936903806, 'selfish_offer': 95.47482821484826}\"]",
    "Error fitting participant 1009: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 1.1932166036179837, 'delta_token': 5.85654792152863, 'selfish_offer': 75.61547594440978}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -6.557887905790758, 'delta_token': 7.052572249240249, 'selfish_offer': 75.4584599291543}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -0.7680187789678214, 'delta_token': -6.201050513986155, 'selfish_offer': 67.67901940233804}\"]",
    "Error fitting participant 1010: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -4.967654611192341, 'delta_token': -8.4731817217422, 'selfish_offer': 24.950921249589676}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 8.821662875936344, 'delta_token': 3.9037896986310976, 'selfish_offer': 4.120110229235651}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 0.2354928636185285, 'delta_token': -3.8672891028788587, 'selfish_offer': 65.00548750377052}\"]",
    "Error fitting participant 1011: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 4.04969509138704, 'delta_token': -8.901107164528364, 'selfish_offer': 71.81179667657088}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 1.1576768049729615, 'delta_token': 5.321015559997065, 'selfish_offer': 51.7309343164296}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -0.3102449415593753, 'delta_token': -2.9565372122092377, 'selfish_offer': 66.26676714704263}\"]",
    "Error fitting participant 1012: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -1.4751557502778816, 'delta_token': 0.9095076685104768, 'selfish_offer': 95.48448824513697}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 9.432122286691968, 'delta_token': 5.842632354704925, 'selfish_offer': 28.438946159708912}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -7.729850529322313, 'delta_token': 8.412480631902874, 'selfish_offer': 98.51161159033774}\"]",
    "Error fitting participant 1013: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -9.050986762037251, 'delta_token': 9.90320227242761, 'selfish_offer': 58.59189243098092}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 5.455009539316887, 'delta_token': 0.31599895732952454, 'selfish_offer': 24.166072607486942}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 4.389818565479187, 'delta_token': 0.6635376188547397, 'selfish_offer': 26.807268257351204}\"]",
    "Error fitting participant 1015: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -6.538329200678743, 'delta_token': -2.297453592838872, 'selfish_offer': 53.07827586755577}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 3.4541112812227617, 'delta_token': -9.780641474708657, 'selfish_offer': 20.75401989949328}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -1.25944759495842, 'delta_token': -1.2890682327547367, 'selfish_offer': 44.94839630134173}\"]",
    "Error fitting participant 1016: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 2.459626160211986, 'delta_token': -9.977867961467533, 'selfish_offer': 55.03586222285831}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 6.565224314430715, 'delta_token': -2.802089222599637, 'selfish_offer': 95.60746418617889}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -4.670942194540137, 'delta_token': -5.763200583929969, 'selfish_offer': 89.82093546368193}\"]",
    "Error fitting participant 1017: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -4.974500422414847, 'delta_token': 0.4755935314029749, 'selfish_offer': 55.779360580229174}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 9.279793147075615, 'delta_token': -9.787294828992943, 'selfish_offer': 53.107285680050175}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 9.467550474430695, 'delta_token': -2.4685615466841178, 'selfish_offer': 88.26146332552463}\"]",
    "Error fitting participant 1018: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 3.819051105703501, 'delta_token': -2.4631588362377066, 'selfish_offer': 75.57315052058199}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -9.38707277597417, 'delta_token': 8.863003695135564, 'selfish_offer': 2.825919049575931}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 4.776141616736901, 'delta_token': -4.563307922312434, 'selfish_offer': 16.708538559919607}\"]",
    "Error fitting participant 1019: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 8.339724578111003, 'delta_token': 8.152346113750003, 'selfish_offer': 51.801408084736}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 7.639924439596303, 'delta_token': 0.9560324058993608, 'selfish_offer': 82.99420580775957}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 1.6342063846437114, 'delta_token': -9.659605440685521, 'selfish_offer': 1.5976692424350958}\"]",
    "Error fitting participant 1020: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 5.547795958529022, 'delta_token': -9.020387168889592, 'selfish_offer': 12.673499066345407}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 0.6217674276743583, 'delta_token': -3.0691968792143376, 'selfish_offer': 78.68490571995308}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -4.523223042465094, 'delta_token': -0.4621216682222986, 'selfish_offer': 37.08732865399897}\"]",
    "Error fitting participant 1021: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 7.819466658486892, 'delta_token': -4.768212709553494, 'selfish_offer': 20.376513575761013}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -4.541796277606222, 'delta_token': 8.417065812123955, 'selfish_offer': 54.56448797773545}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 1.2776249638343344, 'delta_token': -3.533156630820482, 'selfish_offer': 13.765883057752959}\"]",
    "Error fitting participant 1022: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 2.643994415443821, 'delta_token': 5.806065467943631, 'selfish_offer': 83.68631336906786}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -0.24975466611689434, 'delta_token': 6.444602811061262, 'selfish_offer': 8.740669773024145}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 3.33841615617375, 'delta_token': -2.7242552803634172, 'selfish_offer': 76.08913663062694}\"]",
    "Error fitting participant 1023: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 3.367324031967481, 'delta_token': 2.7195174260870214, 'selfish_offer': 32.0128541252919}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -0.06886062538010407, 'delta_token': -4.863871776033117, 'selfish_offer': 9.257745345241364}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -1.0013170636084983, 'delta_token': 3.298178237123121, 'selfish_offer': 54.361051840951646}\"]",
    "Error fitting participant 1024: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -5.171210584383714, 'delta_token': -5.13445770560967, 'selfish_offer': 69.59001811836838}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 0.13750090842413343, 'delta_token': -6.277229854943565, 'selfish_offer': 24.924738364450118}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 7.194907680329472, 'delta_token': -2.86820307557133, 'selfish_offer': 91.37998890128016}\"]",
    "Error fitting participant 1025: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 0.6484862112675742, 'delta_token': -0.816660208181684, 'selfish_offer': 68.10333652182732}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -3.9541971696992917, 'delta_token': 2.0747500241320473, 'selfish_offer': 74.03417995552965}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -9.433207037396619, 'delta_token': 0.2895033031200729, 'selfish_offer': 87.21553428352689}\"]",
    "Error fitting participant 1026: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 2.4037097229817945, 'delta_token': 1.930431824910828, 'selfish_offer': 6.197113291467138}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -2.1495983352606878, 'delta_token': -5.406196364517736, 'selfish_offer': 54.66098886855808}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -3.4869745733672257, 'delta_token': 4.606945777391498, 'selfish_offer': 62.89561079407366}\"]",
    "Error fitting participant 1027: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -3.0535731230668954, 'delta_token': -1.6116893764233815, 'selfish_offer': 93.14495377691865}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -8.521850765456422, 'delta_token': 3.5038428569400164, 'selfish_offer': 52.925536512333885}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -5.517689901511917, 'delta_token': -6.878912557045089, 'selfish_offer': 90.75517180919852}\"]",
    "Error fitting participant 1028: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -7.549094074813354, 'delta_token': -0.5301867630353829, 'selfish_offer': 28.543731865997735}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -4.77798931047714, 'delta_token': 0.8393483998628266, 'selfish_offer': 28.319216829959426}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -7.95400539524072, 'delta_token': -9.987356824206515, 'selfish_offer': 70.04930837023365}\"]",
    "Error fitting participant 1029: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -9.72638851671115, 'delta_token': 7.060328115564275, 'selfish_offer': 97.86000244793453}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -2.125049124228619, 'delta_token': 7.007814516375483, 'selfish_offer': 56.0650440128811}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -8.09796963883562, 'delta_token': -8.353160818889355, 'selfish_offer': 8.20129037357905}\"]",
    "Error fitting participant 1030: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 9.889374121891915, 'delta_token': 4.748136989260612, 'selfish_offer': 33.75312883009352}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -6.876287449664737, 'delta_token': 6.794153497775039, 'selfish_offer': 45.26697198206555}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 9.648074571187188, 'delta_token': -7.623005410504877, 'selfish_offer': 43.858500182444416}\"]",
    "Error fitting participant 1031: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 7.463394626874976, 'delta_token': 0.5462854477383203, 'selfish_offer': 45.689104323666484}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 8.246551939321762, 'delta_token': -3.640008535972452, 'selfish_offer': 36.177131986452615}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 2.4572161017177603, 'delta_token': 8.588676843104757, 'selfish_offer': 50.49766027186126}\"]",
    "Error fitting participant 1032: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 7.3999692600818, 'delta_token': -4.862566953810825, 'selfish_offer': 72.55504643950616}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -9.325927470043522, 'delta_token': -0.48116014126988205, 'selfish_offer': 21.107750735303988}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 8.581528530826603, 'delta_token': -9.62096183032765, 'selfish_offer': 29.53815311986323}\"]",
    "Error fitting participant 1033: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -7.614822619246128, 'delta_token': 2.9426479940038774, 'selfish_offer': 5.444706788936681}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -4.840068634448325, 'delta_token': 5.835650190093473, 'selfish_offer': 22.815818654982543}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -2.2853348659813104, 'delta_token': -9.43153091700487, 'selfish_offer': 10.877768877903971}\"]",
    "Error fitting participant 1034: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 5.639051192975042, 'delta_token': 5.802041318094213, 'selfish_offer': 65.70536475338535}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -5.2642616810897085, 'delta_token': -7.12096416876538, 'selfish_offer': 46.663988053757954}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 2.408297413534333, 'delta_token': -0.3211803418736725, 'selfish_offer': 88.63455787995223}\"]",
    "Error fitting participant 1035: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 8.542859681462232, 'delta_token': 8.691913286730177, 'selfish_offer': 6.359529380323792}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -7.912215909660256, 'delta_token': -3.4619387777872017, 'selfish_offer': 9.459303925694707}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -1.8963357227875548, 'delta_token': 7.045473177268313, 'selfish_offer': 10.801856713541646}\"]",
    "Error fitting participant 1036: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -5.676748089398071, 'delta_token': -2.312691869933891, 'selfish_offer': 75.67006000845979}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -9.036615796913175, 'delta_token': 9.28254806997402, 'selfish_offer': 25.37305500479813}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -1.697356427612707, 'delta_token': 3.70697321747366, 'selfish_offer': 34.4959040244246}\"]",
    "Error fitting participant 1037: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -6.966522745282897, 'delta_token': -8.039932095253501, 'selfish_offer': 35.2230508632089}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 7.720356733609677, 'delta_token': -4.129892712496151, 'selfish_offer': 20.100310543005207}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 9.83908732762561, 'delta_token': -4.31920781875241, 'selfish_offer': 83.62633151263043}\"]",
    "Error fitting participant 1038: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -9.479212826406663, 'delta_token': -1.959047114507591, 'selfish_offer': 57.86423971636797}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 9.433929689157694, 'delta_token': -1.891832005767002, 'selfish_offer': 83.59550567508386}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -4.24226211327184, 'delta_token': -6.040200834357082, 'selfish_offer': 47.904999123460314}\"]",
    "Error fitting participant 1039: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 8.304748800024207, 'delta_token': -2.911150016715604, 'selfish_offer': 52.6338487903828}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 6.756120502209104, 'delta_token': -7.831366513570613, 'selfish_offer': 70.47712917422689}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 8.319948445489622, 'delta_token': 6.2845968714381435, 'selfish_offer': 86.57107542125668}\"]",
    "Error fitting participant 1040: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -2.307902581983024, 'delta_token': -1.4564307103255647, 'selfish_offer': 78.96861948266583}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 8.999449144670638, 'delta_token': -3.8416678445465324, 'selfish_offer': 15.147500981683349}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 0.5316385544158475, 'delta_token': -2.503220998263167, 'selfish_offer': 50.05326659456528}\"]",
    "Error fitting participant 1041: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -7.682968171007037, 'delta_token': -4.878642456024497, 'selfish_offer': 88.69550333247307}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 3.9487324371867096, 'delta_token': -2.741071553838303, 'selfish_offer': 94.94686561046008}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 4.392719309526974, 'delta_token': 3.8936427187531564, 'selfish_offer': 67.19370268919336}\"]",
    "Error fitting participant 1042: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 9.33290684340033, 'delta_token': -5.764839406788949, 'selfish_offer': 63.62605136635492}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -6.139810575135809, 'delta_token': -2.4826790058105797, 'selfish_offer': 33.55943787421113}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -5.832592258219414, 'delta_token': 2.5573825171675537, 'selfish_offer': 35.86618944739624}\"]",
    "Error fitting participant 1043: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 2.409690432431299, 'delta_token': 1.3676623441714248, 'selfish_offer': 25.49423152292998}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 5.56782991145033, 'delta_token': 0.007193389693181729, 'selfish_offer': 37.11248688004003}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -1.104362819113625, 'delta_token': -4.909480819442393, 'selfish_offer': 98.44096191866615}\"]",
    "Error fitting participant 1044: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 6.348872241633895, 'delta_token': -4.099219709025088, 'selfish_offer': 18.280045113658517}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -7.569376462394164, 'delta_token': -7.3463363362440255, 'selfish_offer': 72.58622817943593}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 0.31018870603957893, 'delta_token': 6.2602629511510735, 'selfish_offer': 27.658000495354674}\"]",
    "Error fitting participant 2001: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -6.713593826761352, 'delta_token': 9.876402257312144, 'selfish_offer': 66.96161454808292}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -9.644804034388649, 'delta_token': -4.8347227997553865, 'selfish_offer': 22.60656553062018}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 0.6147695414553507, 'delta_token': 0.7865783091484815, 'selfish_offer': 49.15271704307087}\"]",
    "Error fitting participant 2002: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 2.8902089397609547, 'delta_token': 8.141236696064748, 'selfish_offer': 83.46737583344922}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -5.770338076798492, 'delta_token': -3.9056718572530214, 'selfish_offer': 90.93443334563631}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 0.8704035838622808, 'delta_token': -7.205875228630068, 'selfish_offer': 17.69349574147494}\"]",
    "Error fitting participant 2003: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 5.055790714052446, 'delta_token': 1.4981316393302215, 'selfish_offer': 63.47254781559173}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 3.4878329705582765, 'delta_token': 7.052902483213185, 'selfish_offer': 36.54468101208336}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 9.417818761524885, 'delta_token': 6.197642009181521, 'selfish_offer': 40.72031485792874}\"]",
    "Error fitting participant 2004: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -6.86087204321203, 'delta_token': 0.6086297795870408, 'selfish_offer': 26.413493590420345}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -3.280740383609695, 'delta_token': 5.080008349999082, 'selfish_offer': 82.30930296257135}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 3.5655594402329314, 'delta_token': 9.569901095960322, 'selfish_offer': 33.01304984605316}\"]",
    "Error fitting participant 2005: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -4.664382352901459, 'delta_token': 1.4828816790116424, 'selfish_offer': 15.720313159071342}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 1.3841639723513115, 'delta_token': 3.6525540696066106, 'selfish_offer': 35.27599365434746}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -7.279221854976729, 'delta_token': 3.9997915177583447, 'selfish_offer': 49.96606236658828}\"]",
    "Error fitting participant 2006: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 2.43185564155106, 'delta_token': 7.479913382045993, 'selfish_offer': 68.50171332660588}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -0.08283083647228295, 'delta_token': -6.7395929421393275, 'selfish_offer': 9.749238295314633}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -9.715590399672339, 'delta_token': -8.075964722922697, 'selfish_offer': 29.586180646272087}\"]",
    "Error fitting participant 2007: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 6.679609310829122, 'delta_token': -2.194233296172663, 'selfish_offer': 17.515061673009626}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -7.497206285969371, 'delta_token': 0.7237134821657776, 'selfish_offer': 44.85625683631456}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -9.522558101020655, 'delta_token': -3.2970504717723736, 'selfish_offer': 95.01759310901167}\"]",
    "Error fitting participant 2008: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -0.6554095722883968, 'delta_token': 9.126101127756947, 'selfish_offer': 95.80328380195996}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 2.141952255640497, 'delta_token': 8.715707133493765, 'selfish_offer': 60.67787950834883}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -6.3302968932927595, 'delta_token': -9.077086459671824, 'selfish_offer': 80.54550462649144}\"]",
    "Error fitting participant 2009: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 8.146196530072476, 'delta_token': 4.2297624683021375, 'selfish_offer': 81.87168955614729}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 3.2573471898880264, 'delta_token': 9.89530937532065, 'selfish_offer': 22.257155022059894}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 0.9913871995928218, 'delta_token': -8.259846614301962, 'selfish_offer': 32.90455356627847}\"]",
    "Error fitting participant 2010: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 6.592310998681221, 'delta_token': -1.9547630072548792, 'selfish_offer': 9.407235217934396}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -3.0911349775376458, 'delta_token': 3.6220783016159466, 'selfish_offer': 73.27830719506282}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 7.480943958622181, 'delta_token': 1.7589804739488297, 'selfish_offer': 55.999390776369495}\"]",
    "Error fitting participant 2011: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -2.171029899898431, 'delta_token': 3.124408488856405, 'selfish_offer': 29.492128265191987}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 3.7987185652190227, 'delta_token': -7.864208326553839, 'selfish_offer': 21.067861217261175}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 8.686524763847572, 'delta_token': -2.4041816871133843, 'selfish_offer': 94.32813499554638}\"]",
    "Error fitting participant 2012: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -4.945216843018718, 'delta_token': -1.0305014718721939, 'selfish_offer': 23.205680181158815}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -2.0711413815855018, 'delta_token': 8.557011343475526, 'selfish_offer': 54.21580106807815}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 3.5710964492635426, 'delta_token': 7.777561654310681, 'selfish_offer': 86.86785623471025}\"]",
    "Error fitting participant 2013: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -1.8359212043961541, 'delta_token': 3.164897545857823, 'selfish_offer': 83.2062351176639}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 0.48106163325888396, 'delta_token': 4.033692644042784, 'selfish_offer': 99.35455708324449}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 9.900186597437, 'delta_token': -6.679315125760725, 'selfish_offer': 92.25435320725053}\"]",
    "Error fitting participant 2014: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 9.80574302152386, 'delta_token': -0.8150436004420225, 'selfish_offer': 71.68323078224329}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 1.2893816560946085, 'delta_token': 0.8177054737368152, 'selfish_offer': 20.45518058720701}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 2.896288652018889, 'delta_token': -9.345462600458207, 'selfish_offer': 76.6830180653469}\"]",
    "Error fitting participant 2015: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -0.9810837800630718, 'delta_token': -8.538725270942145, 'selfish_offer': 88.90384426108872}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -1.1258186790140439, 'delta_token': 0.4968636342510315, 'selfish_offer': 82.34902548749766}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -7.214726639267353, 'delta_token': -3.364863032858336, 'selfish_offer': 48.36573027813772}\"]",
    "Error fitting participant 2016: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 0.999053348711028, 'delta_token': -9.463378478538244, 'selfish_offer': 51.415958663853864}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 4.998155228342567, 'delta_token': -3.0631289313035097, 'selfish_offer': 79.3708602514536}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 6.925420757529103, 'delta_token': -3.82960712633124, 'selfish_offer': 11.927813759373606}\"]",
    "Error fitting participant 2017: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 3.2659562716680473, 'delta_token': 9.077857226723992, 'selfish_offer': 73.52051446185895}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -5.977276500062343, 'delta_token': -3.3166144571121237, 'selfish_offer': 72.87526495127094}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 8.43753540504736, 'delta_token': 1.1542212703454275, 'selfish_offer': 35.5242982194926}\"]",
    "Error fitting participant 2018: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 2.4796133249548653, 'delta_token': 5.021518894777399, 'selfish_offer': 66.58216410382404}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 6.21528286580082, 'delta_token': -9.864231514786292, 'selfish_offer': 8.796140620252114}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -4.328007255083168, 'delta_token': 7.503284202246231, 'selfish_offer': 79.00882680664981}\"]",
    "Error fitting participant 2019: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -0.03751249991340799, 'delta_token': 6.202299368655968, 'selfish_offer': 23.11081114799032}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 1.7541850736976379, 'delta_token': -1.3578690114400356, 'selfish_offer': 71.94935861284199}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -9.179507098755144, 'delta_token': -1.823229782653522, 'selfish_offer': 61.72162230558924}\"]",
    "Error fitting participant 2020: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 8.784158929756781, 'delta_token': 9.75636473025974, 'selfish_offer': 37.94947232854875}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -0.7771653353545194, 'delta_token': 5.622523670446032, 'selfish_offer': 2.812271931327348}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -8.024504311479117, 'delta_token': 4.253754362063226, 'selfish_offer': 37.32795227576976}\"]",
    "Error fitting participant 2021: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 1.1043246156194293, 'delta_token': 7.402261731598845, 'selfish_offer': 92.07023825987163}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -2.8254127181759863, 'delta_token': -2.0553091982983585, 'selfish_offer': 63.751259125891224}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -8.835969091792064, 'delta_token': 2.393871693141543, 'selfish_offer': 48.79178968886024}\"]",
    "Error fitting participant 2022: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -0.13798298186974733, 'delta_token': -9.450765582999033, 'selfish_offer': 79.89328167420945}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -6.307948718383365, 'delta_token': -9.999213851013003, 'selfish_offer': 46.12772337940139}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -5.831607233219436, 'delta_token': 0.6075703236479448, 'selfish_offer': 81.75950844334706}\"]",
    "Error fitting participant 2023: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 0.2900910137640764, 'delta_token': -7.778041699747115, 'selfish_offer': 1.3747233837450468}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 6.146236867745504, 'delta_token': 5.687943964739418, 'selfish_offer': 77.88667107823672}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 4.932185182246327, 'delta_token': -7.457162772181087, 'selfish_offer': 53.48034369089278}\"]",
    "Error fitting participant 2024: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 8.747903141019655, 'delta_token': 4.502206637737496, 'selfish_offer': 95.67023378422718}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 3.189964357625289, 'delta_token': 5.614680756636034, 'selfish_offer': 19.902857244147064}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -5.69266631653869, 'delta_token': -4.742126866511511, 'selfish_offer': 54.71643155727433}\"]",
    "Error fitting participant 2025: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 9.856483866098745, 'delta_token': 6.6766682156451225, 'selfish_offer': 46.15130854655766}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -1.446762883482414, 'delta_token': 4.53061844704485, 'selfish_offer': 26.81631661686039}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -0.00284871234873485, 'delta_token': -8.139841235439068, 'selfish_offer': 66.52765166373848}\"]",
    "Error fitting participant 2026: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 3.550264530170118, 'delta_token': -0.04523549507431923, 'selfish_offer': 13.244099365981066}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 4.435632595007137, 'delta_token': -4.535368473056383, 'selfish_offer': 55.73621243798988}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -2.5858037175275435, 'delta_token': -4.387562169812083, 'selfish_offer': 81.69010828644876}\"]",
    "Error fitting participant 2027: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 1.901628314236019, 'delta_token': 4.744439736352259, 'selfish_offer': 54.68133247273451}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -9.457253153479812, 'delta_token': 2.7186229421258226, 'selfish_offer': 99.72516587348711}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 7.708346548477465, 'delta_token': 6.905135493487386, 'selfish_offer': 65.53355429121243}\"]",
    "Error fitting participant 2028: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -0.9224996440215598, 'delta_token': 7.2948551462375235, 'selfish_offer': 73.22971947145172}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 4.373966962409106, 'delta_token': 0.24713221412674713, 'selfish_offer': 40.196109920306846}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 9.754070032628384, 'delta_token': -5.033465355876256, 'selfish_offer': 56.0393114688408}\"]",
    "Error fitting participant 2029: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 9.590643174821174, 'delta_token': 8.248472515389324, 'selfish_offer': 54.983116686120546}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -7.178976361402835, 'delta_token': 1.8788915765825074, 'selfish_offer': 5.5277042571715835}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 4.84966237924273, 'delta_token': -7.647352169753536, 'selfish_offer': 54.788742571838235}\"]",
    "Error fitting participant 2030: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 2.420107153391891, 'delta_token': -1.72136620048202, 'selfish_offer': 23.222655184071183}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -0.6016429635678264, 'delta_token': 6.6575226440231745, 'selfish_offer': 52.83311170815872}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -4.607382770481372, 'delta_token': -4.859777468808502, 'selfish_offer': 80.95214131897019}\"]",
    "Error fitting participant 2031: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 0.9565160898317888, 'delta_token': 4.750430544591641, 'selfish_offer': 21.666304170942208}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -0.17137941114641464, 'delta_token': -9.422908543431895, 'selfish_offer': 83.11135761620234}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -5.249292191241491, 'delta_token': -5.9399227411830395, 'selfish_offer': 30.328960544053885}\"]",
    "Error fitting participant 2032: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -2.5224837078421984, 'delta_token': 8.705393358951156, 'selfish_offer': 90.57467309475827}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -3.399467718459128, 'delta_token': -3.6806440426390825, 'selfish_offer': 71.89716389216223}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -8.618226010028135, 'delta_token': -8.374892532263846, 'selfish_offer': 97.45522010294232}\"]",
    "Error fitting participant 2033: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -6.970134242912895, 'delta_token': 3.421880642090432, 'selfish_offer': 11.564523941183625}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 0.2966212381399771, 'delta_token': -2.8389680884366175, 'selfish_offer': 31.039197711139277}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 5.162664406235276, 'delta_token': 6.495568679963274, 'selfish_offer': 19.90121108015881}\"]",
    "Error fitting participant 2034: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 3.1245648686916745, 'delta_token': 1.7396856191328602, 'selfish_offer': 8.647861484761176}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 8.087955960307582, 'delta_token': 8.45766941072198, 'selfish_offer': 55.686970522753256}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -9.480127036463513, 'delta_token': -5.53337653464151, 'selfish_offer': 91.75552990044497}\"]",
    "Error fitting participant 2035: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 6.343859808035731, 'delta_token': -8.81291321497489, 'selfish_offer': 1.8793563979947359}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 3.2246110123940586, 'delta_token': 5.596788192138797, 'selfish_offer': 58.37303849824882}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 3.9480247761203806, 'delta_token': 1.9385963527151784, 'selfish_offer': 58.50870148122019}\"]",
    "Error fitting participant 2036: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 3.1590397400724193, 'delta_token': 5.9379951165842435, 'selfish_offer': 26.402307673555324}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -9.580556240920588, 'delta_token': -9.101014873821516, 'selfish_offer': 93.8496523223882}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 2.0133510613967847, 'delta_token': -3.4631808895095446, 'selfish_offer': 81.2597408168381}\"]",
    "Error fitting participant 2037: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 2.6630881160566275, 'delta_token': 5.9457695871147145, 'selfish_offer': 73.12040290298593}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -4.605037419515705, 'delta_token': 4.910909700200158, 'selfish_offer': 48.801185497496746}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 1.1927539164913483, 'delta_token': 9.945234389440817, 'selfish_offer': 76.95243469169054}\"]",
    "Error fitting participant 2038: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -6.6735434285537565, 'delta_token': -7.679153695632839, 'selfish_offer': 24.055214965611917}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -4.312112415805536, 'delta_token': 8.874183543855047, 'selfish_offer': 69.6049192818029}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -2.4013776689706052, 'delta_token': -6.19671658996274, 'selfish_offer': 55.252877072296805}\"]",
    "Error fitting participant 2039: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -6.4867503306321055, 'delta_token': -6.8565264759357625, 'selfish_offer': 61.71876777452472}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -4.5575015768946585, 'delta_token': 6.557235283997947, 'selfish_offer': 51.32062645238603}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -6.280277992408855, 'delta_token': -1.2930701137343519, 'selfish_offer': 8.222264521264188}\"]",
    "Error fitting participant 2040: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -4.688705485076139, 'delta_token': 0.4635486764651642, 'selfish_offer': 86.0642106577444}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -2.923589180186312, 'delta_token': -3.813861925945572, 'selfish_offer': 76.66939575256255}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 6.432258719120622, 'delta_token': -0.17854402732787733, 'selfish_offer': 81.02145481768032}\"]",
    "Error fitting participant 2041: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 3.0922961086241063, 'delta_token': 8.625415085831854, 'selfish_offer': 80.86706995635237}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -6.876127760406958, 'delta_token': 5.280516650790357, 'selfish_offer': 37.70556458355091}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -3.8465213737439026, 'delta_token': 1.7668034373402115, 'selfish_offer': 51.11531445199717}\"]",
    "Error fitting participant 2042: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 4.157352703349931, 'delta_token': 9.287607864848002, 'selfish_offer': 55.51957971896854}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 0.2912209118045226, 'delta_token': 0.720391875356226, 'selfish_offer': 23.873393882017467}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 0.11024583558716472, 'delta_token': 8.122255986868442, 'selfish_offer': 99.79900045318945}\"]",
    "Error fitting participant 2043: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -5.012103992959236, 'delta_token': 3.0822947215773056, 'selfish_offer': 41.66268675738248}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 5.831662490077299, 'delta_token': 9.239236947042027, 'selfish_offer': 75.53425424030044}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 9.359926189074145, 'delta_token': 0.8958322207029745, 'selfish_offer': 4.409760253762407}\"]",
    "Error fitting participant 2044: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 7.552772762136797, 'delta_token': -8.212653080956386, 'selfish_offer': 43.728455277089026}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -6.005508061854677, 'delta_token': -3.5857799923470672, 'selfish_offer': 9.348393550687051}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 0.7988222980849908, 'delta_token': -7.339601650539114, 'selfish_offer': 18.941844096096116}\"]",
    "Error fitting participant 2045: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 9.116617596442119, 'delta_token': 8.166804503064743, 'selfish_offer': 7.9257968373743}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 9.804931400105858, 'delta_token': -4.023394861901446, 'selfish_offer': 93.30993642183579}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 3.044294848757481, 'delta_token': -0.3579817989432108, 'selfish_offer': 69.12649358842783}\"]",
    "Error fitting participant 2046: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 5.767006852801424, 'delta_token': 0.8501293837323853, 'selfish_offer': 58.365266488508624}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -2.719453022126892, 'delta_token': -2.493917179606113, 'selfish_offer': 45.324532745164824}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': 4.024997550559327, 'delta_token': -4.386097433331974, 'selfish_offer': 86.78185461793242}\"]",
    "Error fitting participant 2047: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -7.5165154316759715, 'delta_token': 6.072673959543732, 'selfish_offer': 67.29059314526448}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -2.5692972279884536, 'delta_token': 6.601165477143269, 'selfish_offer': 1.629201942964198}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -0.868229765721134, 'delta_token': 1.7631279737982126, 'selfish_offer': 10.496895415515983}\"]",
    "Error fitting participant 2048: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -8.71947092669746, 'delta_token': -0.7106178732594319, 'selfish_offer': 3.0879522841693263}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -1.8339689275627347, 'delta_token': 7.59069508215612, 'selfish_offer': 79.92841136921321}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambd'?\\nParams: {'lambda': -2.3278300787821493, 'delta_token': 0.8771559891403591, 'selfish_offer': 48.42189769675136}\"]"
  ],
  "fitting_error": "No successful parameter fits obtained",
  "recovery_error": "No fitting results found",
  "previous_models": [
    "Specification: p = 1/(1 + exp(-(lambda + delta_token*(token_opp - token_self))))\nproposed_perc = p*50 + (1 - p)*selfish_offer\nSummary: A binary choice model for proposer behavior that computes a latent utility based on a baseline bias and the difference between opponent and self tokens. The logistic transformation of this utility determines the probability of choosing a fair offer (fixed at 50%), while the complementary probability yields a selfish offer (a learnable parameter). The final proposed percentage is a weighted average of these two options.\nTarget Variable: proposed_perc\nPrediction Type: utility"
  ]
}