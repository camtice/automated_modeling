{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641",
  "output_description": "Design a computational model for the described task.\n\nYour model should use the given variables appropriately, but does not necessary need to use all or even most of the variables. \n\nThe model should:\n1. Predict only proposer behavior (specifically, it should predict `proposed_perc`).\n2. Be VERY considerate of high covariance between learnable parameters as the model\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Have an appropriate number or learnable parameters, with a slight bias for less learnable paramters.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641\n\nDesired Output Specification: Design a computational model for the described task.\n\nYour model should use the given variables appropriately, but does not necessary need to use all or even most of the variables. \n\nThe model should:\n1. Predict only proposer behavior (specifically, it should predict `proposed_perc`).\n2. Be VERY considerate of high covariance between learnable parameters as the model\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Have an appropriate number or learnable parameters, with a slight bias for less learnable paramters.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should directly predict a numerical value (not a binary choice). The model's predictions will be compared to actual values using mean squared error.\n\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "Step-by-step reasoning:\n1. The key psychological mechanism here is fairness sensitivity: proposers tend to adjust their offers based on the relative contributions of themselves versus their opponent. That is, the proposer\u2019s notion of what is \u201cfair\u201d is influenced by the ratio of tokens they found versus those found by their opponent.\n2. The model should capture that if the opponent\u2019s token contribution is higher relative to the total tokens available (token_opp/(token_self + token_opp)), then the proposer is expected to allocate a higher percentage of the offer to the opponent. Conversely, if the proposer found more tokens, this ratio will be lower and the percentage offered to the opponent should decrease.\n3. A simple linear mapping can capture these interactions. Concretely, by defining a variable r (the ratio of opponent\u2019s tokens to the total tokens) we can modulate proposed_perc using an intercept and a slope parameter.\n4. The parameters needed are:\n\u2003\u2003\u2022 An intercept (beta0) representing the baseline level of proposed percentage when the relative token ratio is zero.\n\u2003\u2003\u2022 A slope (beta1) that scales how changes in the token ratio affect the proposed percentage.\n5. Mapping model variables:\n\u2003\u2003\u2022 token_opp and token_self (from the dataset) are combined into the ratio r.\n\u2003\u2003\u2022 The linear function beta0 + beta1\u00b7r predicts proposed_perc, which is the target variable.\nThis minimal model uses only two learnable parameters, reducing the risk of high covariance while ensuring accurate mapping of the fairness mechanism.\n\n<MODEL>\nproposed_perc = beta0 + beta1*(token_opp/(token_self+token_opp))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"beta0\": {\n      \"description\": \"Baseline intercept for the percentage proposed to the opponent\",\n      \"range\": {\n        \"min\": -100,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta1\": {\n      \"description\": \"Slope parameter that scales the impact of the opponent's token ratio on the proposed percentage\",\n      \"range\": {\n        \"min\": -100,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"proposed_perc\": {\n      \"description\": \"Percentage proposed to the opponent in the proposal\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data/target\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>proposed_perc</target_variable>\n\n<SUMMARY>\nA minimal linear fairness model where the proposed percentage offered to the opponent is determined by a linear function of the relative token contribution (opponent tokens divided by total tokens). Two learnable parameters\u2014a baseline intercept and a slope coefficient\u2014map this fairness ratio to the offer, facilitating both parameter recovery and accurate prediction.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['beta0', 'beta1']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                proposed_perc = beta0 + beta1*(token_opp/(token_self+token_opp))\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"beta0\": {\n      \"description\": \"Baseline intercept for the percentage proposed to the opponent\",\n      \"range\": {\n        \"min\": -100,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta1\": {\n      \"description\": \"Slope parameter that scales the impact of the opponent's token ratio on the proposed percentage\",\n      \"range\": {\n        \"min\": -100,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"proposed_perc\": {\n      \"description\": \"Percentage proposed to the opponent in the proposal\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data/target\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641\n\n                ",
      "output": "\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, beta0=0, beta1=0):\n    model_predictions = []\n    for trial in trial_data:\n        token_opp = trial.get(\"token_opp\", 0)\n        token_self = trial.get(\"token_self\", 0)\n        \n        if (token_self + token_opp) == 0:\n            token_ratio = 0  # Avoid division by zero if both are zero\n        else:\n            token_ratio = token_opp / (token_self + token_opp)\n        \n        proposed_perc = beta0 + beta1 * token_ratio\n        model_predictions.append(proposed_perc)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '[{\"ID\": 0, \"group\": \"group_1\", \"trial_number\": 1, \"trial_type\": 2, \"trial_role\": 1, \"token_opp\": 5, \"token_self\": 5, \"combined_earning\": 6, \"split_opp\": 3.0, \"split_self\": 3.0, \"splitperc_opp\": 50, \"splitperc_self\": 50, \"accept\": 1.0, \"accepted_amount\": 3.0, \"accepted_perc\": 50.0, \"proposed_perc\": 50.0, \"proposed_amount\": 3.0}, {\"ID\": 1, \"group\": \"group_1\", \"trial_number\": 2, \"trial_type\": 2, \"trial_role\": 1, \"token_opp\": 4, \"token_self\": 6, \"combined_earning\": 5, \"split_opp\": 2.0, \"split_self\": 3.0, \"splitperc_opp\": 40, \"splitperc_self\": 60, \"accept\": 0.0, \"accepted_amount\": 0.0, \"accepted_perc\": 0.0, \"proposed_perc\": 40.0, \"proposed_amount\": 2.0}]'\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n",
      "timestamp": 1742296641.336374
    }
  ],
  "learnable_parameters": {
    "beta0": {
      "description": "Baseline intercept for the percentage proposed to the opponent",
      "range": {
        "min": -100,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta1": {
      "description": "Slope parameter that scales the impact of the opponent's token ratio on the proposed percentage",
      "range": {
        "min": -100,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "proposed_perc = beta0 + beta1*(token_opp/(token_self+token_opp))",
  "variable_descriptions": {
    "beta0": {
      "description": "Baseline intercept for the percentage proposed to the opponent",
      "range": {
        "min": -100,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta1": {
      "description": "Slope parameter that scales the impact of the opponent's token ratio on the proposed percentage",
      "range": {
        "min": -100,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "token_self": {
      "description": "Number of tokens found by the participant",
      "range": {
        "min": 0,
        "max": 1000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent",
      "range": {
        "min": 0,
        "max": 1000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "proposed_perc": {
      "description": "Percentage proposed to the opponent in the proposal",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data/target"
    }
  },
  "model_summary": "A minimal linear fairness model where the proposed percentage offered to the opponent is determined by a linear function of the relative token contribution (opponent tokens divided by total tokens). Two learnable parameters\u2014a baseline intercept and a slope coefficient\u2014map this fairness ratio to the offer, facilitating both parameter recovery and accurate prediction.",
  "target_variable": "proposed_perc",
  "full_reasoning": "Step-by-step reasoning:\n1. The key psychological mechanism here is fairness sensitivity: proposers tend to adjust their offers based on the relative contributions of themselves versus their opponent. That is, the proposer\u2019s notion of what is \u201cfair\u201d is influenced by the ratio of tokens they found versus those found by their opponent.\n2. The model should capture that if the opponent\u2019s token contribution is higher relative to the total tokens available (token_opp/(token_self + token_opp)), then the proposer is expected to allocate a higher percentage of the offer to the opponent. Conversely, if the proposer found more tokens, this ratio will be lower and the percentage offered to the opponent should decrease.\n3. A simple linear mapping can capture these interactions. Concretely, by defining a variable r (the ratio of opponent\u2019s tokens to the total tokens) we can modulate proposed_perc using an intercept and a slope parameter.\n4. The parameters needed are:\n\u2003\u2003\u2022 An intercept (beta0) representing the baseline level of proposed percentage when the relative token ratio is zero.\n\u2003\u2003\u2022 A slope (beta1) that scales how changes in the token ratio affect the proposed percentage.\n5. Mapping model variables:\n\u2003\u2003\u2022 token_opp and token_self (from the dataset) are combined into the ratio r.\n\u2003\u2003\u2022 The linear function beta0 + beta1\u00b7r predicts proposed_perc, which is the target variable.\nThis minimal model uses only two learnable parameters, reducing the risk of high covariance while ensuring accurate mapping of the fairness mechanism.\n\n<MODEL>\nproposed_perc = beta0 + beta1*(token_opp/(token_self+token_opp))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"beta0\": {\n      \"description\": \"Baseline intercept for the percentage proposed to the opponent\",\n      \"range\": {\n        \"min\": -100,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta1\": {\n      \"description\": \"Slope parameter that scales the impact of the opponent's token ratio on the proposed percentage\",\n      \"range\": {\n        \"min\": -100,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"proposed_perc\": {\n      \"description\": \"Percentage proposed to the opponent in the proposal\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data/target\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>proposed_perc</target_variable>\n\n<SUMMARY>\nA minimal linear fairness model where the proposed percentage offered to the opponent is determined by a linear function of the relative token contribution (opponent tokens divided by total tokens). Two learnable parameters\u2014a baseline intercept and a slope coefficient\u2014map this fairness ratio to the offer, facilitating both parameter recovery and accurate prediction.\n</SUMMARY>",
  "prediction_type": "numerical_variable_estimation",
  "current_model": "Specification: proposed_perc = beta0 + beta1*(token_opp/(token_self+token_opp))\nSummary: A minimal linear fairness model where the proposed percentage offered to the opponent is determined by a linear function of the relative token contribution (opponent tokens divided by total tokens). Two learnable parameters\u2014a baseline intercept and a slope coefficient\u2014map this fairness ratio to the offer, facilitating both parameter recovery and accurate prediction.\nTarget Variable: proposed_perc\nPrediction Type: numerical_variable_estimation",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, beta0=0, beta1=0):\n    model_predictions = []\n    for trial in trial_data:\n        token_opp = trial.get(\"token_opp\", 0)\n        token_self = trial.get(\"token_self\", 0)\n        \n        if (token_self + token_opp) == 0:\n            token_ratio = 0  # Avoid division by zero if both are zero\n        else:\n            token_ratio = token_opp / (token_self + token_opp)\n        \n        proposed_perc = beta0 + beta1 * token_ratio\n        model_predictions.append(proposed_perc)\n    return model_predictions",
  "total_retries": 0,
  "fitting_results": [
    {
      "beta0": 49.99999995889963,
      "beta1": 7.220562767924006e-08,
      "success": true,
      "mse": 1.0916643002497855e-16,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 17.853209119433725,
      "beta1": 52.29358399036068,
      "success": true,
      "mse": 19.84097859327399,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 0.1987744402106582,
      "beta1": 72.93578482283783,
      "success": true,
      "mse": 16.320081549439788,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 49.99999995943365,
      "beta1": 7.109274855908367e-08,
      "success": true,
      "mse": 1.068158101631274e-16,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 14.412863439264296,
      "beta1": 59.174272971031755,
      "success": true,
      "mse": 20.78899082571262,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 2.972481863245566,
      "beta1": 66.05504164599003,
      "success": true,
      "mse": 46.87461773701058,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 49.99999995872299,
      "beta1": 7.258289225697215e-08,
      "success": true,
      "mse": 1.09928735778753e-16,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 32.28135394467316,
      "beta1": 24.7706227250503,
      "success": true,
      "mse": 68.31396534149624,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 49.999999995232024,
      "beta1": 4.605888906983927e-09,
      "success": true,
      "mse": 6.418948399599338e-18,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 34.28134462905282,
      "beta1": 24.77064452029168,
      "success": true,
      "mse": 12.313965341488416,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 34.948006432205204,
      "beta1": 24.77065400573925,
      "success": true,
      "mse": 9.647298674823876,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 50.00000055712719,
      "beta1": -9.991479033629597e-07,
      "success": true,
      "mse": 1.9433015209891037e-14,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 16.56268909100463,
      "beta1": 49.541288201052325,
      "success": true,
      "mse": 11.922528032620031,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 40.4526132598111,
      "beta1": 13.761440812274829,
      "success": true,
      "mse": 29.830784913365672,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 49.99999996140531,
      "beta1": 7.553115395912187e-08,
      "success": true,
      "mse": 9.281189667357614e-17,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 32.90519865872541,
      "beta1": 27.522936650306967,
      "success": true,
      "mse": 9.989806320081659,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 49.99999995891708,
      "beta1": 7.215561842715667e-08,
      "success": true,
      "mse": 1.0912540119017315e-16,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 37.16208258085299,
      "beta1": 11.009168344562896,
      "success": true,
      "mse": 30.93170234454696,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 37.119277627003115,
      "beta1": 13.761445360756058,
      "success": true,
      "mse": 60.94189602447312,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 49.99999995908367,
      "beta1": 7.182278740345584e-08,
      "success": true,
      "mse": 1.0834986666176345e-16,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 24.452599993502474,
      "beta1": 13.761466676047506,
      "success": true,
      "mse": 21.830784913353735,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 16.73395346189568,
      "beta1": 38.5320924840191,
      "success": true,
      "mse": 66.69113149847604,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 16.948013718154293,
      "beta1": 24.770639841069677,
      "success": true,
      "mse": 62.980632008155126,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 37.785915489712266,
      "beta1": 13.761501718828619,
      "success": true,
      "mse": 21.830784913372305,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 18.5198743114509,
      "beta1": 52.293584961482914,
      "success": true,
      "mse": 20.72986748216185,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 30.840979198001595,
      "beta1": 31.65137353387057,
      "success": true,
      "mse": 6.04485219164177,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 19.99999995877932,
      "beta1": 7.23992856166639e-08,
      "success": true,
      "mse": 1.0985387329434372e-16,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 22.626915221978074,
      "beta1": 45.41283907389282,
      "success": true,
      "mse": 18.25280326198002,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 22.776749954425707,
      "beta1": 35.77983154083622,
      "success": true,
      "mse": 132.21610601427565,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 19.11927236079557,
      "beta1": 13.761457699654903,
      "success": true,
      "mse": 114.27522935780128,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 17.18653192590895,
      "beta1": 52.29359812371455,
      "success": true,
      "mse": 31.39653414883976,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 50.0000008357252,
      "beta1": -1.675527236733032e-06,
      "success": true,
      "mse": 4.533832933710012e-14,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 38.92359213323536,
      "beta1": -16.513850507694393,
      "success": true,
      "mse": 148.48521916424633,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 22.131502186981788,
      "beta1": 34.40366536705198,
      "success": true,
      "mse": 133.77573904179678,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 19.892985445296627,
      "beta1": 6.880694893486051,
      "success": true,
      "mse": 74.79102956169658,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 33.44036704670229,
      "beta1": -6.880734218720688,
      "success": true,
      "mse": 12.568807339449544,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 24.06727973623583,
      "beta1": 38.53210810755789,
      "success": true,
      "mse": 24.91335372069343,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 36.34557979036044,
      "beta1": 20.642173939667853,
      "success": true,
      "mse": 15.34148827728067,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 16.73396379810629,
      "beta1": 38.53206762757975,
      "success": true,
      "mse": 66.69113149850578,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 20.776760907100016,
      "beta1": 35.77981250833459,
      "success": true,
      "mse": 17.54943934760499,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 21.119265799063385,
      "beta1": 13.761465991791358,
      "success": true,
      "mse": 132.94189602446633,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 15.165147408396727,
      "beta1": 53.66970491993461,
      "success": true,
      "mse": 76.15290519878315,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 49.99999995887701,
      "beta1": 7.222689193204981e-08,
      "success": true,
      "mse": 1.0933592401259752e-16,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 20.000000348318057,
      "beta1": -7.216342481370513e-07,
      "success": true,
      "mse": 8.565471373239347e-15,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 49.440372015036004,
      "beta1": -6.88074212569203,
      "success": true,
      "mse": 63.2354740061182,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 22.000013813074148,
      "beta1": -2.551420980929876e-05,
      "success": true,
      "mse": 56.000000000011624,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 26.388381133342385,
      "beta1": 17.88990503292014,
      "success": true,
      "mse": 46.38735983690139,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 19.999999958884,
      "beta1": 7.22281320280206e-08,
      "success": true,
      "mse": 1.0926265851424621e-16,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 37.67878422127412,
      "beta1": 20.642423579977454,
      "success": true,
      "mse": 9.119266055855796,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 48.21406884379976,
      "beta1": -13.76147511921595,
      "success": true,
      "mse": 168.49745158002546,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 25.828754462008973,
      "beta1": 11.009160448370558,
      "success": true,
      "mse": 116.26503567788465,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 22.66665958980819,
      "beta1": 1.2439925923888174e-05,
      "success": true,
      "mse": 32.88888888889212,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 39.914376622385625,
      "beta1": 5.504580980118351,
      "success": true,
      "mse": 152.39959225280413,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 17.119247853913603,
      "beta1": 13.761502948007747,
      "success": true,
      "mse": 74.27522935781847,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 34.947963833527176,
      "beta1": 24.770741614821148,
      "success": true,
      "mse": 9.647298674982911,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 35.0550423446772,
      "beta1": 17.889915068034455,
      "success": true,
      "mse": 32.165137614679665,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 8.562690132434762,
      "beta1": 49.54128973060809,
      "success": true,
      "mse": 115.92252803262299,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 29.850146523603648,
      "beta1": 9.633044662966208,
      "success": true,
      "mse": 50.057084607552845,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 48.66670725578251,
      "beta1": -7.420407767355641e-05,
      "success": true,
      "mse": 24.88888888898996,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 22.712540427966726,
      "beta1": 39.9082638222533,
      "success": true,
      "mse": 47.17023445467105,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 42.235459791912085,
      "beta1": -15.137585847537824,
      "success": true,
      "mse": 141.18858307850482,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 28.174365049662374,
      "beta1": 31.651268572526718,
      "success": true,
      "mse": 74.48929663627291,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 40.12844840308351,
      "beta1": -8.256900219765907,
      "success": true,
      "mse": 222.8990825688164,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 40.42814130146485,
      "beta1": -27.52294983140616,
      "success": true,
      "mse": 129.9898063200848,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 41.39756773095214,
      "beta1": -4.128469618047604,
      "success": true,
      "mse": 72.61365953110472,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 47.26911068121067,
      "beta1": 4.128445587481986,
      "success": true,
      "mse": 5.946992864424522,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 37.67891486027102,
      "beta1": 20.642170912584312,
      "success": true,
      "mse": 49.1192660550614,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 48.666657875920585,
      "beta1": 1.7394762992272678e-05,
      "success": true,
      "mse": 24.888888888893785,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 9.357775264348241,
      "beta1": 41.28444614854872,
      "success": true,
      "mse": 172.47706422021537,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 5.400611359141796,
      "beta1": 38.53210985620387,
      "success": true,
      "mse": 40.91335372069332,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 16.969421794865205,
      "beta1": 23.394486589741064,
      "success": true,
      "mse": 96.050968399596,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 25.678898606432796,
      "beta1": 20.642201772926526,
      "success": true,
      "mse": 217.11926605504615,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 13.357777105739151,
      "beta1": 41.28444563813586,
      "success": true,
      "mse": 89.81039755354526,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 52.773694850096405,
      "beta1": -6.880723129933191,
      "success": true,
      "mse": 5.457696228340321,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 19.22632106499826,
      "beta1": 6.880689829790368,
      "success": true,
      "mse": 58.79102956170366,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 27.226335946479445,
      "beta1": 6.880665131711261,
      "success": true,
      "mse": 32.124362895084964,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 30.21407965245618,
      "beta1": -13.761491728399635,
      "success": true,
      "mse": 72.49745158002978,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 28.77371920352937,
      "beta1": -6.880772575731078,
      "success": true,
      "mse": 117.45769622836269,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 48.66666152355384,
      "beta1": 7.155668690472794e-06,
      "success": true,
      "mse": 24.88888888889217,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 52.816509732757815,
      "beta1": -9.63302007801317,
      "success": true,
      "mse": 14.501529051988756,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 27.721712472833662,
      "beta1": 17.88991297345958,
      "success": true,
      "mse": 150.38735983690674,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 21.999966048301683,
      "beta1": 5.2435167852391595e-05,
      "success": true,
      "mse": 56.0000000001042,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 37.67889574947603,
      "beta1": 20.64220926317771,
      "success": true,
      "mse": 22.452599388380246,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 45.89296661015871,
      "beta1": 6.880733815083522,
      "success": true,
      "mse": 5.457696228338467,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 58.7064174449372,
      "beta1": -45.41283675041044,
      "success": true,
      "mse": 124.03058103975708,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 49.999999958903366,
      "beta1": 7.220721810898651e-08,
      "success": true,
      "mse": 1.0912484464004164e-16,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 41.84715209097631,
      "beta1": -33.02763634706559,
      "success": true,
      "mse": 87.27420999001438,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 30.86237944575407,
      "beta1": 30.27524124143225,
      "success": true,
      "mse": 35.865443425078745,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 19.999999959015337,
      "beta1": 7.259267055564497e-08,
      "success": true,
      "mse": 1.0707624436243987e-16,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 21.743136505734157,
      "beta1": 16.51372918939207,
      "success": true,
      "mse": 128.92966360858068,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 52.9877573130009,
      "beta1": -20.64218501439122,
      "success": true,
      "mse": 132.67482161060946,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "beta0": {
        "r": 0.9999999999998802,
        "p": 0.0
      },
      "beta1": {
        "r": 0.999999999999876,
        "p": 0.0
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 11.348374600581778,
  "bic_error": "'ModelOutput' object has no attribute 'metrics'",
  "recovery_summary": "Parameter Recovery:\n- beta0: r = 1.000\n- beta1: r = 1.000",
  "previous_models": [
    "Specification: proposed_perc = beta0 + beta1*(token_opp/(token_self+token_opp))\nSummary: A minimal linear fairness model where the proposed percentage offered to the opponent is determined by a linear function of the relative token contribution (opponent tokens divided by total tokens). Two learnable parameters\u2014a baseline intercept and a slope coefficient\u2014map this fairness ratio to the offer, facilitating both parameter recovery and accurate prediction.\nTarget Variable: proposed_perc\nPrediction Type: numerical_variable_estimation\nBIC: 11.348374600581778\n\nParameter Recovery:\n- beta0: r = 1.000\n- beta1: r = 1.000"
  ]
}