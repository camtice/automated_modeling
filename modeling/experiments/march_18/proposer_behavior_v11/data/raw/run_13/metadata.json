{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641",
  "output_description": "Design a computational model for the described task.\n\nYour model should use the given variables appropriately, but does not necessary need to use all or even most of the variables. \n\nThe model should:\n1. Predict only proposer behavior (specifically, it should predict `proposed_perc`).\n2. Be VERY considerate of high covariance between learnable parameters as the model\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Have an appropriate number or learnable parameters, with a slight bias for less learnable paramters.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641\n\nDesired Output Specification: Design a computational model for the described task.\n\nYour model should use the given variables appropriately, but does not necessary need to use all or even most of the variables. \n\nThe model should:\n1. Predict only proposer behavior (specifically, it should predict `proposed_perc`).\n2. Be VERY considerate of high covariance between learnable parameters as the model\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Have an appropriate number or learnable parameters, with a slight bias for less learnable paramters.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should directly predict a numerical value (not a binary choice). The model's predictions will be compared to actual values using mean squared error.\n\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "Step 1: Key Psychological Mechanisms  \n\u2022 Fairness Norm: Proposers may choose a split based on what they perceive as a \u201cfair share\u201d for the opponent relative to the opponent\u2019s and their own contributions (i.e. token counts).  \n\u2022 Comparison Process: The relative contribution, expressed via the proportion token_opp/(token_self+token_opp), forms a normative benchmark that influences offers.  \n\u2022 Contextual Adjustment: The trial type (equal, opponent more, participant more) may lead to shifts in the proposers\u2019 baseline expectations or corrections relative to the fairness norm.  \n\nStep 2: Interaction of Mechanisms  \n\u2022 The fairness benchmark sets a starting estimate for the proposed percentage to the opponent.  \n\u2022 Depending on contextual cues (trial_type), the proposer may adjust this benchmark upward or downward.  \n\u2022 The final decision is modeled as the sum of a baseline level, a weighted fairness measure, and additive adjustments capturing the effect of trial context.  \n\nStep 3: Mathematical Form  \n\u2022 We define a fairness measure as F = (token_opp/(token_self+token_opp)) scaled to percentages (i.e. multiplied by 100).  \n\u2022 Two indicator functions capture trial context for trial_type 2 and 3.  \n\u2022 A linear additive model with an intercept, a weight on the fairness measure, and adjustments for trial type accounts for the observed proposer behavior.  \n\nStep 4: Parameters Needed  \n\u2022 Intercept (alpha) \u2014 a baseline proposal percentage.  \n\u2022 Sensitivity (betaF) \u2014 scaling parameter on the fairness measure.  \n\u2022 Contextual adjustments (delta2, delta3) \u2014 additive shifts when trial_type equals 2 or 3 respectively.  \n\u2022 All parameters are learnable with generous finite bounds, and fewer parameters help mitigate covariance concerns.  \n\nStep 5: Mapping to Observable Behavior  \n\u2022 Observed token_self and token_opp produce the fairness ratio.  \n\u2022 The trial_type (1,2,3) sets the context (with indicators for 2 and 3) that affects the splitting decision.  \n\u2022 The computed predicted proposed_perc is the model\u2019s numerical output which is then compared to the observed proposed_perc in the dataset.\n\n<MODEL>\nproposed_perc = alpha + betaF*(100*token_opp/(token_self+token_opp)) + delta2*I(trial_type=2) + delta3*I(trial_type=3)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"proposed_perc\": {\n      \"description\": \"Predicted percentage proposed to the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"alpha\": {\n      \"description\": \"Baseline proposal percentage intercept\",\n      \"range\": {\n        \"min\": -50,\n        \"max\": 150,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"betaF\": {\n      \"description\": \"Sensitivity parameter scaling the fairness ratio (percentage basis)\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"delta2\": {\n      \"description\": \"Adjustment parameter for trials where trial_type equals 2 (Opponent More)\",\n      \"range\": {\n        \"min\": -50,\n        \"max\": 50,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"delta3\": {\n      \"description\": \"Adjustment parameter for trials where trial_type equals 3 (Participant More)\",\n      \"range\": {\n        \"min\": -50,\n        \"max\": 50,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent (used to compute fairness share)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant (used to compute fairness share)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"trial_type\": {\n      \"description\": \"Indicator for the contribution condition: 1 = equal, 2 = opponent more, 3 = participant more\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": 3,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"I(trial_type=2)\": {\n      \"description\": \"Indicator function equal to 1 if trial_type equals 2, else 0\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"I(trial_type=3)\": {\n      \"description\": \"Indicator function equal to 1 if trial_type equals 3, else 0\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>proposed_perc</target_variable>\n\n<SUMMARY>\nA linear model predicting the percentage proposed to the opponent. The model computes a fairness ratio from the opponent\u2019s token count relative to total tokens and scales it by a sensitivity parameter, adds a baseline intercept, and includes trial-type specific adjustments for conditions where contributions are unequal.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['alpha', 'betaF', 'delta2', 'delta3']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                proposed_perc = alpha + betaF*(100*token_opp/(token_self+token_opp)) + delta2*I(trial_type=2) + delta3*I(trial_type=3)\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"proposed_perc\": {\n      \"description\": \"Predicted percentage proposed to the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"alpha\": {\n      \"description\": \"Baseline proposal percentage intercept\",\n      \"range\": {\n        \"min\": -50,\n        \"max\": 150,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"betaF\": {\n      \"description\": \"Sensitivity parameter scaling the fairness ratio (percentage basis)\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"delta2\": {\n      \"description\": \"Adjustment parameter for trials where trial_type equals 2 (Opponent More)\",\n      \"range\": {\n        \"min\": -50,\n        \"max\": 50,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"delta3\": {\n      \"description\": \"Adjustment parameter for trials where trial_type equals 3 (Participant More)\",\n      \"range\": {\n        \"min\": -50,\n        \"max\": 50,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent (used to compute fairness share)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant (used to compute fairness share)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"trial_type\": {\n      \"description\": \"Indicator for the contribution condition: 1 = equal, 2 = opponent more, 3 = participant more\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": 3,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"I(trial_type=2)\": {\n      \"description\": \"Indicator function equal to 1 if trial_type equals 2, else 0\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"I(trial_type=3)\": {\n      \"description\": \"Indicator function equal to 1 if trial_type equals 3, else 0\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641\n\n                ",
      "output": "\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, alpha=0, betaF=0, delta2=0, delta3=0):\n    model_predictions = []\n    for trial in trial_data:\n        token_opp = trial.get(\"token_opp\", 0)\n        token_self = trial.get(\"token_self\", 0)\n        trial_type = trial.get(\"trial_type\", 1)\n\n        # Calculate fairness ratio\n        total_tokens = token_self + token_opp\n        if total_tokens == 0:\n            fairness_ratio = 0  # Avoid division by zero\n        else:\n            fairness_ratio = 100 * token_opp / total_tokens\n\n        # Indicator functions for trial types\n        indicator_2 = 1 if trial_type == 2 else 0\n        indicator_3 = 1 if trial_type == 3 else 0\n\n        # Calculate proposed percentage\n        proposed_perc = alpha + betaF * fairness_ratio + delta2 * indicator_2 + delta3 * indicator_3\n\n        model_predictions.append(proposed_perc)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n",
      "timestamp": 1742297325.196003
    }
  ],
  "learnable_parameters": {
    "alpha": {
      "description": "Baseline proposal percentage intercept",
      "range": {
        "min": -50,
        "max": 150,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "betaF": {
      "description": "Sensitivity parameter scaling the fairness ratio (percentage basis)",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "delta2": {
      "description": "Adjustment parameter for trials where trial_type equals 2 (Opponent More)",
      "range": {
        "min": -50,
        "max": 50,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "delta3": {
      "description": "Adjustment parameter for trials where trial_type equals 3 (Participant More)",
      "range": {
        "min": -50,
        "max": 50,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "proposed_perc = alpha + betaF*(100*token_opp/(token_self+token_opp)) + delta2*I(trial_type=2) + delta3*I(trial_type=3)",
  "variable_descriptions": {
    "proposed_perc": {
      "description": "Predicted percentage proposed to the opponent",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "alpha": {
      "description": "Baseline proposal percentage intercept",
      "range": {
        "min": -50,
        "max": 150,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "betaF": {
      "description": "Sensitivity parameter scaling the fairness ratio (percentage basis)",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "delta2": {
      "description": "Adjustment parameter for trials where trial_type equals 2 (Opponent More)",
      "range": {
        "min": -50,
        "max": 50,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "delta3": {
      "description": "Adjustment parameter for trials where trial_type equals 3 (Participant More)",
      "range": {
        "min": -50,
        "max": 50,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent (used to compute fairness share)",
      "range": {
        "min": 0,
        "max": 1000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Number of tokens found by the participant (used to compute fairness share)",
      "range": {
        "min": 0,
        "max": 1000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "trial_type": {
      "description": "Indicator for the contribution condition: 1 = equal, 2 = opponent more, 3 = participant more",
      "range": {
        "min": 1,
        "max": 3,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "I(trial_type=2)": {
      "description": "Indicator function equal to 1 if trial_type equals 2, else 0",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "I(trial_type=3)": {
      "description": "Indicator function equal to 1 if trial_type equals 3, else 0",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "A linear model predicting the percentage proposed to the opponent. The model computes a fairness ratio from the opponent\u2019s token count relative to total tokens and scales it by a sensitivity parameter, adds a baseline intercept, and includes trial-type specific adjustments for conditions where contributions are unequal.",
  "target_variable": "proposed_perc",
  "full_reasoning": "Step 1: Key Psychological Mechanisms  \n\u2022 Fairness Norm: Proposers may choose a split based on what they perceive as a \u201cfair share\u201d for the opponent relative to the opponent\u2019s and their own contributions (i.e. token counts).  \n\u2022 Comparison Process: The relative contribution, expressed via the proportion token_opp/(token_self+token_opp), forms a normative benchmark that influences offers.  \n\u2022 Contextual Adjustment: The trial type (equal, opponent more, participant more) may lead to shifts in the proposers\u2019 baseline expectations or corrections relative to the fairness norm.  \n\nStep 2: Interaction of Mechanisms  \n\u2022 The fairness benchmark sets a starting estimate for the proposed percentage to the opponent.  \n\u2022 Depending on contextual cues (trial_type), the proposer may adjust this benchmark upward or downward.  \n\u2022 The final decision is modeled as the sum of a baseline level, a weighted fairness measure, and additive adjustments capturing the effect of trial context.  \n\nStep 3: Mathematical Form  \n\u2022 We define a fairness measure as F = (token_opp/(token_self+token_opp)) scaled to percentages (i.e. multiplied by 100).  \n\u2022 Two indicator functions capture trial context for trial_type 2 and 3.  \n\u2022 A linear additive model with an intercept, a weight on the fairness measure, and adjustments for trial type accounts for the observed proposer behavior.  \n\nStep 4: Parameters Needed  \n\u2022 Intercept (alpha) \u2014 a baseline proposal percentage.  \n\u2022 Sensitivity (betaF) \u2014 scaling parameter on the fairness measure.  \n\u2022 Contextual adjustments (delta2, delta3) \u2014 additive shifts when trial_type equals 2 or 3 respectively.  \n\u2022 All parameters are learnable with generous finite bounds, and fewer parameters help mitigate covariance concerns.  \n\nStep 5: Mapping to Observable Behavior  \n\u2022 Observed token_self and token_opp produce the fairness ratio.  \n\u2022 The trial_type (1,2,3) sets the context (with indicators for 2 and 3) that affects the splitting decision.  \n\u2022 The computed predicted proposed_perc is the model\u2019s numerical output which is then compared to the observed proposed_perc in the dataset.\n\n<MODEL>\nproposed_perc = alpha + betaF*(100*token_opp/(token_self+token_opp)) + delta2*I(trial_type=2) + delta3*I(trial_type=3)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"proposed_perc\": {\n      \"description\": \"Predicted percentage proposed to the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"alpha\": {\n      \"description\": \"Baseline proposal percentage intercept\",\n      \"range\": {\n        \"min\": -50,\n        \"max\": 150,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"betaF\": {\n      \"description\": \"Sensitivity parameter scaling the fairness ratio (percentage basis)\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"delta2\": {\n      \"description\": \"Adjustment parameter for trials where trial_type equals 2 (Opponent More)\",\n      \"range\": {\n        \"min\": -50,\n        \"max\": 50,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"delta3\": {\n      \"description\": \"Adjustment parameter for trials where trial_type equals 3 (Participant More)\",\n      \"range\": {\n        \"min\": -50,\n        \"max\": 50,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent (used to compute fairness share)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant (used to compute fairness share)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"trial_type\": {\n      \"description\": \"Indicator for the contribution condition: 1 = equal, 2 = opponent more, 3 = participant more\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": 3,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"I(trial_type=2)\": {\n      \"description\": \"Indicator function equal to 1 if trial_type equals 2, else 0\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"I(trial_type=3)\": {\n      \"description\": \"Indicator function equal to 1 if trial_type equals 3, else 0\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>proposed_perc</target_variable>\n\n<SUMMARY>\nA linear model predicting the percentage proposed to the opponent. The model computes a fairness ratio from the opponent\u2019s token count relative to total tokens and scales it by a sensitivity parameter, adds a baseline intercept, and includes trial-type specific adjustments for conditions where contributions are unequal.\n</SUMMARY>",
  "prediction_type": "numerical_variable_estimation",
  "current_model": "Specification: proposed_perc = alpha + betaF*(100*token_opp/(token_self+token_opp)) + delta2*I(trial_type=2) + delta3*I(trial_type=3)\nSummary: A linear model predicting the percentage proposed to the opponent. The model computes a fairness ratio from the opponent\u2019s token count relative to total tokens and scales it by a sensitivity parameter, adds a baseline intercept, and includes trial-type specific adjustments for conditions where contributions are unequal.\nTarget Variable: proposed_perc\nPrediction Type: numerical_variable_estimation",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, alpha=0, betaF=0, delta2=0, delta3=0):\n    model_predictions = []\n    for trial in trial_data:\n        token_opp = trial.get(\"token_opp\", 0)\n        token_self = trial.get(\"token_self\", 0)\n        trial_type = trial.get(\"trial_type\", 1)\n\n        # Calculate fairness ratio\n        total_tokens = token_self + token_opp\n        if total_tokens == 0:\n            fairness_ratio = 0  # Avoid division by zero\n        else:\n            fairness_ratio = 100 * token_opp / total_tokens\n\n        # Indicator functions for trial types\n        indicator_2 = 1 if trial_type == 2 else 0\n        indicator_3 = 1 if trial_type == 3 else 0\n\n        # Calculate proposed percentage\n        proposed_perc = alpha + betaF * fairness_ratio + delta2 * indicator_2 + delta3 * indicator_3\n\n        model_predictions.append(proposed_perc)\n    return model_predictions",
  "total_retries": 0,
  "fitting_results": [
    {
      "alpha": 50.00011420062474,
      "betaF": -2.6876644890510667e-06,
      "delta2": -7.497901886776388e-06,
      "delta3": 6.735377767103285e-05,
      "success": true,
      "mse": 2.42889349583781e-10,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 19.875510908703962,
      "betaF": 0.5624898198536185,
      "delta2": -5.375155420425265,
      "delta3": -6.624835875752139,
      "success": true,
      "mse": 11.833333333860928,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": -16.250177725487838,
      "betaF": 1.1250038018349187,
      "delta2": 1.250036374230847,
      "delta3": -11.250074835710056,
      "success": true,
      "mse": 10.000000000155735,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 50.00003975750271,
      "betaF": -7.466283081703858e-07,
      "delta2": -1.0480332166889617e-05,
      "delta3": 9.872571359671e-06,
      "success": true,
      "mse": 8.685618566285744e-12,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 12.499595734085108,
      "betaF": 0.7500074926808649,
      "delta2": -6.499859272797384,
      "delta3": -11.500062765264486,
      "success": true,
      "mse": 2.6666666673988972,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": -6.874829209587693,
      "betaF": 0.9374961518071419,
      "delta2": -1.6249817091434386,
      "delta3": -10.374935166085486,
      "success": true,
      "mse": 38.500000001342435,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 50.000165838633876,
      "betaF": -3.3291970505728885e-06,
      "delta2": -5.281047826535693e-05,
      "delta3": 5.358677560706544e-05,
      "success": true,
      "mse": 5.5793461797437385e-11,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 59.37086840900171,
      "betaF": -0.18741497701083804,
      "delta2": -14.873643389706043,
      "delta3": -1.1265722707096304,
      "success": true,
      "mse": 53.166666723021535,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 50.00023629453151,
      "betaF": -4.476596367168853e-06,
      "delta2": -8.51272505676356e-06,
      "delta3": 5.954323681004164e-06,
      "success": true,
      "mse": 2.7441347156146863e-09,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 57.37513563239275,
      "betaF": -0.18750271791303405,
      "delta2": -8.875041316087499,
      "delta3": 4.875042276096295,
      "success": true,
      "mse": 10.500000000035083,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 59.374537404004556,
      "betaF": -0.18751202652983737,
      "delta2": -10.874533757916373,
      "delta3": 2.8773295482683885,
      "success": true,
      "mse": 5.166667491272572,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 50.00010954379693,
      "betaF": -2.195091357210149e-06,
      "delta2": -3.298745264967198e-05,
      "delta3": 3.363548667123281e-05,
      "success": true,
      "mse": 2.2946353380726124e-11,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 58.751027851664645,
      "betaF": -0.3750215269068406,
      "delta2": -11.750447547634861,
      "delta3": 15.750432750456149,
      "success": true,
      "mse": 7.333333346473648,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 27.243719941904764,
      "betaF": 0.37512422837729625,
      "delta2": 5.751921282112768,
      "delta3": -1.751776661139839,
      "success": true,
      "mse": 28.66666674348897,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 50.00007805279721,
      "betaF": -1.4029275933202811e-06,
      "delta2": -5.842685532441881e-05,
      "delta3": 1.9229737151623327e-05,
      "success": true,
      "mse": 3.2121833405463077e-10,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 10.498808435515551,
      "betaF": 0.7500203274343267,
      "delta2": 5.500583107758566,
      "delta3": -9.500026682659392,
      "success": true,
      "mse": 8.000000019295873,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 50.00013872328475,
      "betaF": -2.8392613204815445e-06,
      "delta2": -3.955824933664687e-05,
      "delta3": 4.895427671097665e-05,
      "success": true,
      "mse": 4.3479872213824526e-11,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 68.12478120100684,
      "betaF": -0.5624956954982161,
      "delta2": -6.6249274216541,
      "delta3": 14.624937165428188,
      "success": true,
      "mse": 25.166666666761827,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 29.250145025585585,
      "betaF": 0.37499713649380406,
      "delta2": -2.250046389741373,
      "delta3": -9.749959063936911,
      "success": true,
      "mse": 52.66666666670723,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 50.00016513402674,
      "betaF": -3.2755352171696747e-06,
      "delta2": -5.202960878601936e-05,
      "delta3": 4.8204846905986897e-05,
      "success": true,
      "mse": 5.1691245319647255e-11,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 11.249891755683878,
      "betaF": 0.3750021386807418,
      "delta2": 5.750035911986505,
      "delta3": -1.7500326871878,
      "success": true,
      "mse": 20.666666666690492,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 30.636020670598835,
      "betaF": 0.18728332299899386,
      "delta2": -9.129113161486732,
      "delta3": -2.871469573252389,
      "success": true,
      "mse": 58.50000040776921,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 40.94742476694733,
      "betaF": -0.17918190153237012,
      "delta2": -10.742760180316052,
      "delta3": 2.778850511251937,
      "success": true,
      "mse": 58.50051931319527,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 27.248128479119153,
      "betaF": 0.3750374662813871,
      "delta2": 1.7505922062656047,
      "delta3": -5.750711518315614,
      "success": true,
      "mse": 20.666666679546196,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 21.874214440672237,
      "betaF": 0.5625142148662803,
      "delta2": -7.374786002375432,
      "delta3": -8.62538755806676,
      "success": true,
      "mse": 6.500000024805025,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 49.99979444595046,
      "betaF": 4.587442095199359e-06,
      "delta2": -9.99986961842389,
      "delta3": -0.0001686672221362553,
      "success": true,
      "mse": 4.48346937887957e-09,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 19.999779838961693,
      "betaF": 4.55953038232488e-06,
      "delta2": 7.860666711792335e-05,
      "delta3": -9.42093964453551e-05,
      "success": true,
      "mse": 3.0031260849067824e-10,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 31.25018634436613,
      "betaF": 0.3749962807708728,
      "delta2": -8.25005727088952,
      "delta3": -5.749943517186565,
      "success": true,
      "mse": 7.333333333398974,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 87.49965725231448,
      "betaF": -0.7500002781562323,
      "delta2": -31.50013538823706,
      "delta3": 3.5008659814825522,
      "success": true,
      "mse": 82.66666687340627,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 7.249297628162722,
      "betaF": 0.375018179650675,
      "delta2": 3.7501628799458766,
      "delta3": -3.750223476144724,
      "success": true,
      "mse": 114.00000004140246,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 21.874261257738354,
      "betaF": 0.5625145006204814,
      "delta2": -9.374707028954141,
      "delta3": -10.625203937042459,
      "success": true,
      "mse": 9.166666668813358,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 50.0001218957783,
      "betaF": -3.351925427722825e-06,
      "delta2": -2.580676254450504e-05,
      "delta3": 0.0001444565995437513,
      "success": true,
      "mse": 1.6319147148406391e-09,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 97.62543545513708,
      "betaF": -1.3125194632120538,
      "delta2": -20.12524044596127,
      "delta3": 16.12653305502264,
      "success": true,
      "mse": 141.16666700344342,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": -2.8735202370447492,
      "betaF": 0.9374703068867188,
      "delta2": 2.374530077989847,
      "delta3": -16.374515540537644,
      "success": true,
      "mse": 121.16666667117786,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 10.624119057428311,
      "betaF": 0.18751644430761835,
      "delta2": 6.875296996980276,
      "delta3": 3.1248546534775548,
      "success": true,
      "mse": 69.16666666993277,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 41.37379112032781,
      "betaF": -0.18746183119373402,
      "delta2": -4.87521791188038,
      "delta3": -1.1267749551377588,
      "success": true,
      "mse": 10.500000253691931,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 36.61679515112132,
      "betaF": 0.18766455603721494,
      "delta2": -7.122435031602376,
      "delta3": -0.8775700721266739,
      "success": true,
      "mse": 21.166666796802765,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 21.87443071009569,
      "betaF": 0.5625088705207282,
      "delta2": 0.6251859713877169,
      "delta3": -10.624871542238683,
      "success": true,
      "mse": 9.1666666806408,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 34.62628050449241,
      "betaF": 0.18747457954081967,
      "delta2": -15.125398863844504,
      "delta3": -8.874650646894205,
      "success": true,
      "mse": 34.500000003412694,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 77.50006495714014,
      "betaF": -0.750001192152018,
      "delta2": -19.500029789783678,
      "delta3": 15.500012317372367,
      "success": true,
      "mse": 10.66666666669572,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 5.248602658600031,
      "betaF": 0.37502469404995625,
      "delta2": 9.75072794690844,
      "delta3": 2.249591225412823,
      "success": true,
      "mse": 124.66666670237633,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 100.25012195539252,
      "betaF": -1.125000232074435,
      "delta2": -29.2501668445967,
      "delta3": 23.24984071466183,
      "success": true,
      "mse": 60.666666672578586,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 50.0011530751508,
      "betaF": -2.3128623664844377e-05,
      "delta2": -0.00030796268089880956,
      "delta3": 0.00034063679337648686,
      "success": true,
      "mse": 3.265715121509154e-09,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 19.999281952640338,
      "betaF": 1.4447390556718533e-05,
      "delta2": 0.00024308417868779272,
      "delta3": -0.0002595948187540727,
      "success": true,
      "mse": 1.5985982984334396e-09,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 57.375087215539054,
      "betaF": -0.18750189583094534,
      "delta2": -4.875061765014309,
      "delta3": -1.1249613612013762,
      "success": true,
      "mse": 61.16666666724477,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 26.002914940565443,
      "betaF": -5.8907611778188733e-05,
      "delta2": -6.001143757363995,
      "delta3": -5.999087424264072,
      "success": true,
      "mse": 48.00000004137916,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 54.750184169724754,
      "betaF": -0.37500293189215655,
      "delta2": -9.750110257246847,
      "delta3": 7.750003728933542,
      "success": true,
      "mse": 44.66666666743875,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 19.9997180564088,
      "betaF": 5.203356786122155e-06,
      "delta2": 3.500526917278786e-05,
      "delta3": -7.04468241745201e-05,
      "success": true,
      "mse": 1.8145177654651833e-09,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 21.87512357445575,
      "betaF": 0.5624974839535418,
      "delta2": 2.624964206428033,
      "delta3": -8.624959719953171,
      "success": true,
      "mse": 6.500000000031864,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 50.750323672335185,
      "betaF": -0.37500666320270054,
      "delta2": 10.249956978887559,
      "delta3": 17.75009332542782,
      "success": true,
      "mse": 124.66666666784121,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 62.109354570056695,
      "betaF": -0.5621866769525274,
      "delta2": -14.62022002597836,
      "delta3": 6.620105564355401,
      "success": true,
      "mse": 110.50000046715897,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 27.999806020262486,
      "betaF": 3.50111275080033e-06,
      "delta2": -7.999940287602577,
      "delta3": -8.000014174960633,
      "success": true,
      "mse": 18.666666667040825,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 150.0,
      "betaF": -2.1217960923003187,
      "delta2": -36.44440538458596,
      "delta3": 32.62401599449156,
      "success": true,
      "mse": 121.64185964293733,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 5.244857298452169,
      "betaF": 0.3751059674271486,
      "delta2": 3.752269708085437,
      "delta3": -3.752500239824697,
      "success": true,
      "mse": 74.00000044760888,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 59.3760821755676,
      "betaF": -0.1875166309562386,
      "delta2": -10.874322610440572,
      "delta3": 2.8735770980228237,
      "success": true,
      "mse": 5.16666783447713,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 64.75130092378721,
      "betaF": -0.3750278417184577,
      "delta2": -11.750470712449633,
      "delta3": 5.750653587807495,
      "success": true,
      "mse": 28.666666685305646,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 54.753483676901546,
      "betaF": -0.3750673075600424,
      "delta2": -17.75106684757225,
      "delta3": 9.750786839475255,
      "success": true,
      "mse": 108.66666670050147,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": -18.251617493404975,
      "betaF": 1.1250505540983813,
      "delta2": 11.249862133532483,
      "delta3": -21.251423021394555,
      "success": true,
      "mse": 39.33333364455666,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 46.00160673244693,
      "betaF": -3.183940396760457e-05,
      "delta2": 3.999464480689093,
      "delta3": 4.000491482885174,
      "success": true,
      "mse": 21.33333333867362,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 120.99875892058286,
      "betaF": -1.499976407725039,
      "delta2": -34.99970568685258,
      "delta3": 24.999787358324134,
      "success": true,
      "mse": 24.000000011996796,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": -19.62744710570432,
      "betaF": 1.3125488345081895,
      "delta2": 6.125722080661916,
      "delta3": -40.12572115984845,
      "success": true,
      "mse": 66.50000001182391,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 50.00175093393456,
      "betaF": -3.3882286885666914e-05,
      "delta2": -14.000573407674267,
      "delta3": -3.9995761468338227,
      "success": true,
      "mse": 56.00000000702471,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 150.0,
      "betaF": -2.1239160891548936,
      "delta2": -44.37085665811869,
      "delta3": 20.762394572659254,
      "success": true,
      "mse": 156.76059160457456,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 69.50049730330207,
      "betaF": -0.7500091064761748,
      "delta2": -15.500167038974118,
      "delta3": -0.49995192622937057,
      "success": true,
      "mse": 114.6666666685374,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 10.501748033839567,
      "betaF": 0.7499645634729112,
      "delta2": -0.5004227288678706,
      "delta3": -25.499454825115045,
      "success": true,
      "mse": 32.00000000942879,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 87.50029195039792,
      "betaF": -0.7500063024825382,
      "delta2": -13.500030402775916,
      "delta3": 11.500122318756933,
      "success": true,
      "mse": 2.666666667654176,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 21.875202072735306,
      "betaF": 0.5624959294452777,
      "delta2": 2.6249401384014504,
      "delta3": -8.624936119800008,
      "success": true,
      "mse": 46.50000000007968,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 45.999638198369254,
      "betaF": 7.4410155406342215e-06,
      "delta2": 4.000078732690568,
      "delta3": 3.9998657488564078,
      "success": true,
      "mse": 21.33333333387378,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": -30.248894180123237,
      "betaF": 1.1249813235993529,
      "delta2": 17.24969931710032,
      "delta3": -5.249615165346742,
      "success": true,
      "mse": 162.00000004418695,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 12.625412940352923,
      "betaF": 0.1874874280332452,
      "delta2": 0.8752196397896463,
      "delta3": 7.12544023787918,
      "success": true,
      "mse": 37.16666669615981,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": -42.996384213700196,
      "betaF": 1.4999298317114118,
      "delta2": 14.99859924170645,
      "delta3": -24.99887768455823,
      "success": true,
      "mse": 82.66666671749793,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 9.882385225438687,
      "betaF": 0.562332480663843,
      "delta2": 2.6236464304061355,
      "delta3": -8.620908029071515,
      "success": true,
      "mse": 214.50000057155475,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": -22.249561558729365,
      "betaF": 1.1249909886602163,
      "delta2": 11.249881107377785,
      "delta3": -11.249843159619516,
      "success": true,
      "mse": 87.33333333379863,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 59.375203416003295,
      "betaF": -0.1875040587167887,
      "delta2": -2.875063026841208,
      "delta3": 0.8750617498426597,
      "success": true,
      "mse": 5.166666666744869,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 16.623965399066883,
      "betaF": 0.18752326548743337,
      "delta2": -3.125256042751001,
      "delta3": -6.875277609867189,
      "success": true,
      "mse": 53.16666676726526,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 16.627611448167343,
      "betaF": 0.1874469887802137,
      "delta2": 8.87415304863128,
      "delta3": 5.1259037386054835,
      "success": true,
      "mse": 21.166666683180274,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 44.75485022981528,
      "betaF": -0.37515282554436213,
      "delta2": -7.747514189761405,
      "delta3": -0.24388932279797224,
      "success": true,
      "mse": 68.66667107636263,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 35.37163263125618,
      "betaF": -0.1870556590283899,
      "delta2": -2.8771036097604505,
      "delta3": 0.8294963126234938,
      "success": true,
      "mse": 117.1669501454402,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 45.99981509737053,
      "betaF": 3.740191943225572e-06,
      "delta2": 4.000056060384358,
      "delta3": 3.999936941727395,
      "success": true,
      "mse": 21.333333333405683,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 106.25009199610558,
      "betaF": -1.1250018862393645,
      "delta2": -19.250018950786647,
      "delta3": 13.250028452698137,
      "success": true,
      "mse": 7.333333333374111,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 62.749737161304154,
      "betaF": -0.37499473931006194,
      "delta2": -19.74991578178618,
      "delta3": -2.250085046726242,
      "success": true,
      "mse": 122.00000000014174,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 25.992060098284696,
      "betaF": 0.0001631295153278718,
      "delta2": -5.997386462529612,
      "delta3": -6.003350387271649,
      "success": true,
      "mse": 48.00000031117608,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 21.87504337533003,
      "betaF": 0.5624991122681167,
      "delta2": 2.6249901243540354,
      "delta3": -8.624986411879512,
      "success": true,
      "mse": 19.833333333340246,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 40.625476605500076,
      "betaF": 0.1874911600400089,
      "delta2": 0.8748343322007778,
      "delta3": -2.874923713402717,
      "success": true,
      "mse": 5.166666667645637,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 56.750489684244876,
      "betaF": -0.3750098643816114,
      "delta2": -1.7501431582022133,
      "delta3": -4.249843390850453,
      "success": true,
      "mse": 122.00000000047349,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 50.00054906135579,
      "betaF": -1.1170283812161994e-05,
      "delta2": -0.0001802871458697463,
      "delta3": 0.0002012598967000771,
      "success": true,
      "mse": 8.754163171303512e-10,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": -50.0,
      "betaF": 1.4811744614435156,
      "delta2": 30.652615457546883,
      "delta3": -26.77009976623333,
      "success": true,
      "mse": 66.70296388037406,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": -34.37504675146773,
      "betaF": 1.6875008568855179,
      "delta2": 15.875014619137986,
      "delta3": -27.875005390365427,
      "success": true,
      "mse": 18.500000000015454,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 20.000137636419893,
      "betaF": -2.753306811794302e-06,
      "delta2": -4.2191426834812507e-05,
      "delta3": 4.2258059809396226e-05,
      "success": true,
      "mse": 3.5938453659886474e-11,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": -39.62527932131496,
      "betaF": 1.3125097444156593,
      "delta2": 24.125251221066552,
      "delta3": -12.12601631695403,
      "success": true,
      "mse": 114.50000019159187,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 74.12531662692247,
      "betaF": -0.5625065487665604,
      "delta2": -10.62513831128716,
      "delta3": 0.6251528732969095,
      "success": true,
      "mse": 126.5000000016113,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "alpha": {
        "r": 0.9999999999885435,
        "p": 0.0
      },
      "betaF": {
        "r": 0.9999999999860687,
        "p": 0.0
      },
      "delta2": {
        "r": 0.9999999999941264,
        "p": 0.0
      },
      "delta3": {
        "r": 0.999999999989805,
        "p": 0.0
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 110.84520195373555,
  "bic_error": "'ModelOutput' object has no attribute 'metrics'",
  "recovery_summary": "Parameter Recovery:\n- alpha: r = 1.000\n- betaF: r = 1.000\n- delta2: r = 1.000\n- delta3: r = 1.000",
  "previous_models": [
    "Specification: proposed_perc = alpha + betaF*(100*token_opp/(token_self+token_opp)) + delta2*I(trial_type=2) + delta3*I(trial_type=3)\nSummary: A linear model predicting the percentage proposed to the opponent. The model computes a fairness ratio from the opponent\u2019s token count relative to total tokens and scales it by a sensitivity parameter, adds a baseline intercept, and includes trial-type specific adjustments for conditions where contributions are unequal.\nTarget Variable: proposed_perc\nPrediction Type: numerical_variable_estimation\nBIC: 110.84520195373555\n\nParameter Recovery:\n- alpha: r = 1.000\n- betaF: r = 1.000\n- delta2: r = 1.000\n- delta3: r = 1.000"
  ]
}