{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641",
  "output_description": "Design a computational model for the described task.\n\nYour model should use the given variables appropriately, but does not necessary need to use all or even most of the variables. \n\nThe model should:\n1. Predict only proposer behavior (specifically, it should predict `proposed_perc`).\n2. Be VERY considerate of high covariance between learnable parameters as the model\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Have an appropriate number or learnable parameters, with a slight bias for less learnable paramters.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641\n\nDesired Output Specification: Design a computational model for the described task.\n\nYour model should use the given variables appropriately, but does not necessary need to use all or even most of the variables. \n\nThe model should:\n1. Predict only proposer behavior (specifically, it should predict `proposed_perc`).\n2. Be VERY considerate of high covariance between learnable parameters as the model\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Have an appropriate number or learnable parameters, with a slight bias for less learnable paramters.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should directly predict a numerical value (not a binary choice). The model's predictions will be compared to actual values using mean squared error.\n\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "Step-by-step reasoning:\n\n1. Key psychological mechanisms include fairness\u2010norms and self\u2013other comparisons. In proposer behavior the idea is that a participant\u2019s offer to the opponent is influenced by the relative contributions that both have made in the earlier token\u2013finding task. In this context, fairness may be computed as a ratio or a logarithmic comparison of the opponent\u2019s tokens relative to one\u2019s own tokens.\n\n2. These mechanisms interact by comparing one\u2019s own contribution (token_self) with that of the opponent (token_opp) in order to determine an ideal \u201cfair\u201d split. When the opponent\u2019s token count is higher, a proposer may feel inclined to offer a higher percentage to the opponent; conversely, if the participant\u2019s token count is relatively higher, the offer to the opponent may be lower. A logarithmic transformation allows for a symmetric treatment of proportional differences and reduces potential skewness.\n\n3. A simple mathematical form to capture these interactions is a linear model where the predicted proposed percentage is a linear function of the logarithm of the ratio of tokens. We add an additive noise term to capture unexplained variance. That is, if we denote the predicted proposed percentage as proposed_perc, then we have: \n\n\u2003\u2003proposed_perc = a + b * log((token_opp+1)/(token_self+1)) + noise \n\nThe +1 inside the logarithm guards against division by zero.\n\n4. The parameters needed to calibrate the model are:\n\u2003\u2022 a \u2013 an intercept parameter representing the baseline proposed percentage when contributions are equal.\n\u2003\u2022 b \u2013 a sensitivity parameter capturing how changes in the relative token contributions affect the offer.\n\u2003\u2022 sigma \u2013 a noise scale parameter (standard deviation) governing the residual variance.\n\nThese parameters are learnable and are given generous but finite numerical bounds.\n\n5. Observable data are token_self and token_opp from the dataset, and the target variable is proposed_perc (the percentage proposed to the opponent when the participant is the proposer). The model thus maps the relative token contributions into an offer percentage in a direct manner.\n\nThe formal model specification is provided below.\n\n<MODEL>\nproposed_perc = a + b * log((token_opp + 1)/(token_self + 1)) + epsilon,  where epsilon ~ Normal(0, sigma)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"a\": {\n      \"description\": \"Intercept parameter representing the baseline proposed percentage when tokens contributions are equal\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": 0,\n          \"upper\": 100\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"b\": {\n      \"description\": \"Sensitivity parameter capturing the effect of the log ratio of opponent to self tokens on the proposed percentage\",\n      \"range\": {\n        \"min\": -100,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": -100,\n          \"upper\": 100\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"sigma\": {\n      \"description\": \"Noise standard deviation capturing the residual variability in the proposed percentage\",\n      \"range\": {\n        \"min\": 0.001,\n        \"max\": 100,\n        \"inclusive_min\": false,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": 0.001,\n          \"upper\": 100\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"epsilon\": {\n      \"description\": \"Stochastic noise term drawn from a normal distribution with mean 0 and standard deviation sigma\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"parameters\": {\n          \"mean\": 0,\n          \"std\": \"sigma\"\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>proposed_perc</target_variable>\n\n<SUMMARY>\nA linear model that predicts the offer percentage based on the logarithm of the relative token contributions. The model includes two learnable parameters (an intercept and a sensitivity parameter) and a noise term. The formulation ensures low parameter covariance by using a parsimonious structure while directly linking the observed tokens to the proposed percentage.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['a', 'b', 'sigma']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                proposed_perc = a + b * log((token_opp + 1)/(token_self + 1)) + epsilon,  where epsilon ~ Normal(0, sigma)\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"a\": {\n      \"description\": \"Intercept parameter representing the baseline proposed percentage when tokens contributions are equal\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": 0,\n          \"upper\": 100\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"b\": {\n      \"description\": \"Sensitivity parameter capturing the effect of the log ratio of opponent to self tokens on the proposed percentage\",\n      \"range\": {\n        \"min\": -100,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": -100,\n          \"upper\": 100\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"sigma\": {\n      \"description\": \"Noise standard deviation capturing the residual variability in the proposed percentage\",\n      \"range\": {\n        \"min\": 0.001,\n        \"max\": 100,\n        \"inclusive_min\": false,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": 0.001,\n          \"upper\": 100\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"epsilon\": {\n      \"description\": \"Stochastic noise term drawn from a normal distribution with mean 0 and standard deviation sigma\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"parameters\": {\n          \"mean\": 0,\n          \"std\": \"sigma\"\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641\n\n                ",
      "output": "\n</REASONING>\n```python\nimport json\nimport math\nimport random\n\ndef simulate_model(trial_data, a=50, b=0, sigma=1):\n    model_predictions = []\n    for trial in trial_data:\n        token_opp = trial.get(\"token_opp\", 0)\n        token_self = trial.get(\"token_self\", 0)\n\n        # Calculate the log ratio\n        log_ratio = math.log((token_opp + 1) / (token_self + 1))\n\n        # Generate noise from a normal distribution\n        u1, u2 = random.random(), random.random()\n        z = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)  # Box-Muller transform\n        epsilon = z * sigma\n\n        # Calculate the proposed percentage\n        proposed_perc = a + b * log_ratio + epsilon\n\n        model_predictions.append(proposed_perc)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '[{\"ID\": 1, \"group\": \"treatment\", \"trial_number\": 1, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 5, \"token_self\": 5, \"combined_earning\": 20, \"split_opp\": 10.0, \"split_self\": 10.0, \"splitperc_opp\": 50, \"splitperc_self\": 50, \"accept\": 1.0, \"accepted_amount\": 10.0, \"accepted_perc\": 50.0, \"proposed_perc\": 50.0, \"proposed_amount\": 10.0}, {\"ID\": 2, \"group\": \"treatment\", \"trial_number\": 2, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 3, \"token_self\": 7, \"combined_earning\": 20, \"split_opp\": 8.0, \"split_self\": 12.0, \"splitperc_opp\": 40, \"splitperc_self\": 60, \"accept\": 1.0, \"accepted_amount\": 8.0, \"accepted_perc\": 40.0, \"proposed_perc\": 40.0, \"proposed_amount\": 8.0}]'\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n```",
      "timestamp": 1742297004.582237
    }
  ],
  "learnable_parameters": {
    "a": {
      "description": "Intercept parameter representing the baseline proposed percentage when tokens contributions are equal",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "lower": 0,
          "upper": 100
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "b": {
      "description": "Sensitivity parameter capturing the effect of the log ratio of opponent to self tokens on the proposed percentage",
      "range": {
        "min": -100,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "lower": -100,
          "upper": 100
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "sigma": {
      "description": "Noise standard deviation capturing the residual variability in the proposed percentage",
      "range": {
        "min": 0.001,
        "max": 100,
        "inclusive_min": false,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "lower": 0.001,
          "upper": 100
        }
      },
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "proposed_perc = a + b * log((token_opp + 1)/(token_self + 1)) + epsilon,  where epsilon ~ Normal(0, sigma)",
  "variable_descriptions": {
    "a": {
      "description": "Intercept parameter representing the baseline proposed percentage when tokens contributions are equal",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "lower": 0,
          "upper": 100
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "b": {
      "description": "Sensitivity parameter capturing the effect of the log ratio of opponent to self tokens on the proposed percentage",
      "range": {
        "min": -100,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "lower": -100,
          "upper": 100
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "sigma": {
      "description": "Noise standard deviation capturing the residual variability in the proposed percentage",
      "range": {
        "min": 0.001,
        "max": 100,
        "inclusive_min": false,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "lower": 0.001,
          "upper": 100
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Number of tokens found by the participant",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "epsilon": {
      "description": "Stochastic noise term drawn from a normal distribution with mean 0 and standard deviation sigma",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "normal",
        "parameters": {
          "mean": 0,
          "std": "sigma"
        }
      },
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "A linear model that predicts the offer percentage based on the logarithm of the relative token contributions. The model includes two learnable parameters (an intercept and a sensitivity parameter) and a noise term. The formulation ensures low parameter covariance by using a parsimonious structure while directly linking the observed tokens to the proposed percentage.",
  "target_variable": "proposed_perc",
  "full_reasoning": "Step-by-step reasoning:\n\n1. Key psychological mechanisms include fairness\u2010norms and self\u2013other comparisons. In proposer behavior the idea is that a participant\u2019s offer to the opponent is influenced by the relative contributions that both have made in the earlier token\u2013finding task. In this context, fairness may be computed as a ratio or a logarithmic comparison of the opponent\u2019s tokens relative to one\u2019s own tokens.\n\n2. These mechanisms interact by comparing one\u2019s own contribution (token_self) with that of the opponent (token_opp) in order to determine an ideal \u201cfair\u201d split. When the opponent\u2019s token count is higher, a proposer may feel inclined to offer a higher percentage to the opponent; conversely, if the participant\u2019s token count is relatively higher, the offer to the opponent may be lower. A logarithmic transformation allows for a symmetric treatment of proportional differences and reduces potential skewness.\n\n3. A simple mathematical form to capture these interactions is a linear model where the predicted proposed percentage is a linear function of the logarithm of the ratio of tokens. We add an additive noise term to capture unexplained variance. That is, if we denote the predicted proposed percentage as proposed_perc, then we have: \n\n\u2003\u2003proposed_perc = a + b * log((token_opp+1)/(token_self+1)) + noise \n\nThe +1 inside the logarithm guards against division by zero.\n\n4. The parameters needed to calibrate the model are:\n\u2003\u2022 a \u2013 an intercept parameter representing the baseline proposed percentage when contributions are equal.\n\u2003\u2022 b \u2013 a sensitivity parameter capturing how changes in the relative token contributions affect the offer.\n\u2003\u2022 sigma \u2013 a noise scale parameter (standard deviation) governing the residual variance.\n\nThese parameters are learnable and are given generous but finite numerical bounds.\n\n5. Observable data are token_self and token_opp from the dataset, and the target variable is proposed_perc (the percentage proposed to the opponent when the participant is the proposer). The model thus maps the relative token contributions into an offer percentage in a direct manner.\n\nThe formal model specification is provided below.\n\n<MODEL>\nproposed_perc = a + b * log((token_opp + 1)/(token_self + 1)) + epsilon,  where epsilon ~ Normal(0, sigma)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"a\": {\n      \"description\": \"Intercept parameter representing the baseline proposed percentage when tokens contributions are equal\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": 0,\n          \"upper\": 100\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"b\": {\n      \"description\": \"Sensitivity parameter capturing the effect of the log ratio of opponent to self tokens on the proposed percentage\",\n      \"range\": {\n        \"min\": -100,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": -100,\n          \"upper\": 100\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"sigma\": {\n      \"description\": \"Noise standard deviation capturing the residual variability in the proposed percentage\",\n      \"range\": {\n        \"min\": 0.001,\n        \"max\": 100,\n        \"inclusive_min\": false,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": 0.001,\n          \"upper\": 100\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"epsilon\": {\n      \"description\": \"Stochastic noise term drawn from a normal distribution with mean 0 and standard deviation sigma\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"parameters\": {\n          \"mean\": 0,\n          \"std\": \"sigma\"\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>proposed_perc</target_variable>\n\n<SUMMARY>\nA linear model that predicts the offer percentage based on the logarithm of the relative token contributions. The model includes two learnable parameters (an intercept and a sensitivity parameter) and a noise term. The formulation ensures low parameter covariance by using a parsimonious structure while directly linking the observed tokens to the proposed percentage.\n</SUMMARY>",
  "prediction_type": "numerical_variable_estimation",
  "current_model": "Specification: proposed_perc = a + b * log((token_opp + 1)/(token_self + 1)) + epsilon,  where epsilon ~ Normal(0, sigma)\nSummary: A linear model that predicts the offer percentage based on the logarithm of the relative token contributions. The model includes two learnable parameters (an intercept and a sensitivity parameter) and a noise term. The formulation ensures low parameter covariance by using a parsimonious structure while directly linking the observed tokens to the proposed percentage.\nTarget Variable: proposed_perc\nPrediction Type: numerical_variable_estimation",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, a=50, b=0, sigma=1):\n    model_predictions = []\n    for trial in trial_data:\n        token_opp = trial.get(\"token_opp\", 0)\n        token_self = trial.get(\"token_self\", 0)\n\n        # Calculate the log ratio\n        log_ratio = math.log((token_opp + 1) / (token_self + 1))\n\n        # Generate noise from a normal distribution\n        u1, u2 = random.random(), random.random()\n        z = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)  # Box-Muller transform\n        epsilon = z * sigma\n\n        # Calculate the proposed percentage\n        proposed_perc = a + b * log_ratio + epsilon\n\n        model_predictions.append(proposed_perc)\n    return model_predictions",
  "total_retries": 0,
  "fitting_warnings": [
    "Error fitting participant 2018: Error in parameter fitting: All optimization attempts failed. Errors: []",
    "Error fitting participant 2034: Error in parameter fitting: All optimization attempts failed. Errors: []",
    "Error fitting participant 2037: Error in parameter fitting: All optimization attempts failed. Errors: []"
  ],
  "fitting_results": [
    {
      "a": 61.3644366615065,
      "b": -23.08368556222196,
      "sigma": 16.721774022819673,
      "success": true,
      "mse": 415.1236911133008,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "a": 66.07320756812295,
      "b": -0.7053862120198814,
      "sigma": 31.250083060623876,
      "success": true,
      "mse": 1328.753843878683,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "a": 57.89374359599646,
      "b": -5.772083418608178,
      "sigma": 0.20934953068965964,
      "success": true,
      "mse": 590.7421369577698,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "a": 30.515846973072012,
      "b": -72.5811398242448,
      "sigma": 34.73550846168373,
      "success": true,
      "mse": 2214.1432934471595,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "a": 1.5692102029241697,
      "b": -90.47617228194805,
      "sigma": 6.669455119719015,
      "success": true,
      "mse": 2948.368729953792,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "a": 1.6436897018320444,
      "b": -73.84364642085991,
      "sigma": 79.4162485188988,
      "success": true,
      "mse": 7478.328699620723,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "a": 91.51754715020687,
      "b": -74.37659315844961,
      "sigma": 93.5377072608742,
      "success": true,
      "mse": 11163.483589977533,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "a": 58.08896151610858,
      "b": 31.253111171057004,
      "sigma": 96.5911677235309,
      "success": true,
      "mse": 14023.620250880142,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "a": 27.82290555988651,
      "b": 67.1323594528183,
      "sigma": 46.360991143655504,
      "success": true,
      "mse": 2351.7459559511594,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "a": 0.6318452625265871,
      "b": 93.21590781751603,
      "sigma": 11.844811187896607,
      "success": true,
      "mse": 2507.1658363373595,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "a": 1.4795645945868858,
      "b": 86.50300240887778,
      "sigma": 7.214892221678999,
      "success": true,
      "mse": 2527.3957804748384,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "a": 63.81715834976507,
      "b": 4.747530101041833,
      "sigma": 52.706062145184276,
      "success": true,
      "mse": 2620.202319342978,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "a": 40.61065924901463,
      "b": -54.879814472394166,
      "sigma": 13.389261088325414,
      "success": true,
      "mse": 715.8792072595662,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "a": 76.56733938646268,
      "b": 2.196665680371078,
      "sigma": 20.86773497307293,
      "success": true,
      "mse": 1428.5207050373817,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "a": 12.76128466859303,
      "b": 56.217169497028934,
      "sigma": 64.56356957382417,
      "success": true,
      "mse": 4871.3773632873435,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "a": 10.719281133969858,
      "b": -35.144689597465295,
      "sigma": 7.300898461016723,
      "success": true,
      "mse": 1886.9514961721836,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "a": 81.27453001413062,
      "b": 46.95772300469896,
      "sigma": 25.420726392576483,
      "success": true,
      "mse": 2245.619401169835,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "a": 66.91587343149754,
      "b": -99.86553878498034,
      "sigma": 16.487075930337287,
      "success": true,
      "mse": 2152.194903572594,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "a": 38.77462920982493,
      "b": 43.31705650273323,
      "sigma": 23.193988887715353,
      "success": true,
      "mse": 583.84046166437,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "a": 24.75115914646533,
      "b": -65.8839309386904,
      "sigma": 12.527112130634041,
      "success": true,
      "mse": 1215.0491242362432,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "a": 12.99933729201994,
      "b": 51.47767323800972,
      "sigma": 34.01254000421872,
      "success": true,
      "mse": 3420.4146002025395,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "a": 23.52583314461253,
      "b": 98.49002072130308,
      "sigma": 82.08356166315502,
      "success": true,
      "mse": 6935.371817130985,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "a": 46.6100019244341,
      "b": -51.558445960466656,
      "sigma": 66.8873273479,
      "success": true,
      "mse": 6300.970684515517,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "a": 55.2245312947151,
      "b": 86.44553728205389,
      "sigma": 44.90248656934347,
      "success": true,
      "mse": 3013.8044306328657,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "a": 50.43164345831337,
      "b": -53.728828371713675,
      "sigma": 97.83894780869547,
      "success": true,
      "mse": 11807.664364302573,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "a": 67.01472834098844,
      "b": -22.891252028337107,
      "sigma": 3.5720683460988214,
      "success": true,
      "mse": 585.714982650564,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "a": 38.66576596498574,
      "b": 22.08373993893296,
      "sigma": 11.474900957448305,
      "success": true,
      "mse": 493.45929443048806,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "a": 1.9599047625747965,
      "b": -74.19011716668763,
      "sigma": 90.04747672767691,
      "success": true,
      "mse": 9895.78091495033,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "a": 34.852035299008186,
      "b": -32.066319801755455,
      "sigma": 41.695655807670775,
      "success": true,
      "mse": 2480.357735847002,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "a": 82.94573661982095,
      "b": 76.52155688265577,
      "sigma": 92.7867926627065,
      "success": true,
      "mse": 8956.89178838216,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "a": 20.74091258509994,
      "b": -21.18355355437818,
      "sigma": 18.617087503367934,
      "success": true,
      "mse": 1131.6036216621328,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "a": 82.2692271288001,
      "b": -81.49668762555386,
      "sigma": 2.4740170188871535,
      "success": true,
      "mse": 1663.9388821111825,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "a": 79.26280433387161,
      "b": 20.360376979519938,
      "sigma": 23.7060714424771,
      "success": true,
      "mse": 3893.4554151789216,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "a": 61.597356229094416,
      "b": -41.70840306104089,
      "sigma": 48.616361159467246,
      "success": true,
      "mse": 3821.055991657488,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "a": 71.95662657990636,
      "b": 34.01135085017909,
      "sigma": 35.521146114891756,
      "success": true,
      "mse": 4078.284566354763,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "a": 56.017368984560264,
      "b": -73.97203730297502,
      "sigma": 8.15898593554277,
      "success": true,
      "mse": 1494.6451702576246,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "a": 75.14926926170737,
      "b": -43.208855923498476,
      "sigma": 26.851048932073954,
      "success": true,
      "mse": 1587.3154453159061,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "a": 23.72110464064894,
      "b": -48.973539259760116,
      "sigma": 62.310256771973584,
      "success": true,
      "mse": 8803.800229297894,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "a": 27.037452690879118,
      "b": -71.56725946692045,
      "sigma": 70.25057331579846,
      "success": true,
      "mse": 5308.100613236898,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "a": 50.81921449099872,
      "b": 31.21089497938166,
      "sigma": 23.525342041017005,
      "success": true,
      "mse": 683.7621776895363,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "a": 61.36908615033843,
      "b": -20.243321002200144,
      "sigma": 90.7450279227875,
      "success": true,
      "mse": 13913.811798886714,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "a": 20.698119946696682,
      "b": -9.258702526232492,
      "sigma": 8.350863353714383,
      "success": true,
      "mse": 745.0691915935606,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "a": 37.662336910523166,
      "b": -42.93039367185643,
      "sigma": 9.123869560765682,
      "success": true,
      "mse": 540.0905529955513,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "a": 8.763716926830321,
      "b": 55.080147031449776,
      "sigma": 94.79085375605295,
      "success": true,
      "mse": 7699.303520402519,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "a": 88.49772384517313,
      "b": 74.30904041457548,
      "sigma": 58.77252502873783,
      "success": true,
      "mse": 4649.642653247766,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "a": 33.86583222551807,
      "b": 66.38123389852753,
      "sigma": 72.60053451210408,
      "success": true,
      "mse": 13305.834227495745,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "a": 13.66679102182573,
      "b": -3.2865576216573316,
      "sigma": 32.41185567558506,
      "success": true,
      "mse": 1354.9718735400097,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "a": 7.4099964110754275,
      "b": -57.511506792883424,
      "sigma": 45.18667510628576,
      "success": true,
      "mse": 2340.625192861687,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "a": 26.073347843776286,
      "b": -74.14229659679698,
      "sigma": 18.197414434982132,
      "success": true,
      "mse": 1523.401597510491,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "a": 15.121946891451243,
      "b": 87.40018719129522,
      "sigma": 27.03531515472382,
      "success": true,
      "mse": 1888.9105265529533,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "a": 82.80110597482104,
      "b": -29.26192489992217,
      "sigma": 43.04340844823272,
      "success": true,
      "mse": 3668.1046207615377,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "a": 49.49083844553952,
      "b": -93.79459428618817,
      "sigma": 91.11888615520314,
      "success": true,
      "mse": 11719.570973397842,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "a": 91.99691594890915,
      "b": 7.298656389413288,
      "sigma": 20.27609950731717,
      "success": true,
      "mse": 2948.4541987660405,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "a": 47.3432408637557,
      "b": 16.552342539120634,
      "sigma": 33.832100179239184,
      "success": true,
      "mse": 2184.2827097314716,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "a": 40.081577172274216,
      "b": 36.22040845619138,
      "sigma": 69.08561630535165,
      "success": true,
      "mse": 5829.149133106867,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "a": 69.30904385563383,
      "b": 41.15783169230358,
      "sigma": 78.23718244631164,
      "success": true,
      "mse": 6449.290620866652,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "a": 58.930325292398415,
      "b": 8.939765214207954,
      "sigma": 31.689600483901238,
      "success": true,
      "mse": 1779.8066856817888,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "a": 64.76757802236148,
      "b": -55.50697152808208,
      "sigma": 31.145166961412507,
      "success": true,
      "mse": 2894.303273201104,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "a": 14.78386362668834,
      "b": 87.09347252879851,
      "sigma": 90.03967853061225,
      "success": true,
      "mse": 8501.584185262853,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "a": 61.742718807081225,
      "b": 86.04805880776978,
      "sigma": 18.193073181619166,
      "success": true,
      "mse": 1667.9499708866836,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "a": 5.964199617728037,
      "b": 37.91517052421186,
      "sigma": 9.709276033606958,
      "success": true,
      "mse": 1931.8134216751612,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "a": 85.48870328255232,
      "b": 96.73911705366683,
      "sigma": 67.82332413138633,
      "success": true,
      "mse": 6240.472264819442,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "a": 61.627238673253,
      "b": 85.86748492102687,
      "sigma": 22.66236929278426,
      "success": true,
      "mse": 3012.1939294410813,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "a": 69.49232893783018,
      "b": -63.002541755813425,
      "sigma": 27.01426564092935,
      "success": true,
      "mse": 1297.2021780092098,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "a": 59.630282556990885,
      "b": -48.72024072714367,
      "sigma": 84.38133272400914,
      "success": true,
      "mse": 8276.512845131558,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "a": 39.188639066105424,
      "b": -82.20527887958791,
      "sigma": 53.76936819243783,
      "success": true,
      "mse": 3416.4711796171177,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "a": 44.04479738568675,
      "b": -29.202998489094178,
      "sigma": 17.911486957586426,
      "success": true,
      "mse": 768.204401497296,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "a": 40.83744282321353,
      "b": -98.18719360790737,
      "sigma": 47.37484226664145,
      "success": true,
      "mse": 4556.850498679237,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "a": 72.80082958935346,
      "b": 83.21626157723004,
      "sigma": 88.19824018635701,
      "success": true,
      "mse": 12493.067353221095,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "a": 22.621495476493045,
      "b": 41.41955994323794,
      "sigma": 23.498430846879316,
      "success": true,
      "mse": 980.3340773162738,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "a": 68.9344417924313,
      "b": -49.53711915891939,
      "sigma": 88.62586309448912,
      "success": true,
      "mse": 4211.194148051088,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "a": 28.763380846575746,
      "b": 37.426502721609516,
      "sigma": 38.600567118224525,
      "success": true,
      "mse": 1393.0729515945545,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "a": 24.485036229690408,
      "b": 14.54414318633473,
      "sigma": 36.52463788169784,
      "success": true,
      "mse": 2948.181025596152,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "a": 32.51865774870038,
      "b": -96.39629477133289,
      "sigma": 41.08006103578733,
      "success": true,
      "mse": 3756.0661933501246,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "a": 5.966485243354255,
      "b": -8.43600588473996,
      "sigma": 68.1482088957275,
      "success": true,
      "mse": 7039.9286278409945,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "a": 36.5245707475235,
      "b": -22.012600294702985,
      "sigma": 72.13315372405249,
      "success": true,
      "mse": 9071.38702701614,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "a": 29.1463805883385,
      "b": 72.56580792177128,
      "sigma": 46.87558542912616,
      "success": true,
      "mse": 3534.733866020375,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "a": 88.89076669090355,
      "b": -15.394996501051127,
      "sigma": 66.8146478686842,
      "success": true,
      "mse": 7629.583171984701,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "a": 68.81624984614366,
      "b": 40.807457450687195,
      "sigma": 22.37143972734753,
      "success": true,
      "mse": 4033.6725325142875,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "a": 58.212245845729875,
      "b": -83.48490073725392,
      "sigma": 98.29184274948939,
      "success": true,
      "mse": 8499.857749087108,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "a": 73.34471357971348,
      "b": -97.4541232429051,
      "sigma": 82.25818296107927,
      "success": true,
      "mse": 6147.015441088739,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "a": 11.11181208483379,
      "b": 42.144082952591596,
      "sigma": 58.65960654590151,
      "success": true,
      "mse": 3810.1848937321656,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "a": 16.296610323204316,
      "b": 42.84109227657275,
      "sigma": 17.734392493877888,
      "success": true,
      "mse": 1361.420519370082,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "a": 55.96965453744001,
      "b": 55.996665548992155,
      "sigma": 10.158526225697242,
      "success": true,
      "mse": 1235.1397676733282,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "a": 43.68049180980474,
      "b": 88.70151768104694,
      "sigma": 15.50250556146212,
      "success": true,
      "mse": 1047.7486105780388,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "a": 59.19115382063513,
      "b": -7.713912993047364,
      "sigma": 22.201027698660187,
      "success": true,
      "mse": 1767.9282754583248,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "a": 21.600345115016804,
      "b": -72.96817000832083,
      "sigma": 31.59383747063575,
      "success": true,
      "mse": 1901.2310444426369,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "a": 22.21318880627726,
      "b": 2.3905397158916135,
      "sigma": 9.977555694360952,
      "success": true,
      "mse": 745.2659038416285,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    }
  ],
  "recovery_warnings": [
    "Error in iteration 16: Error in parameter fitting: All optimization attempts failed. Errors: []"
  ],
  "parameter_recovery": {
    "correlations": {
      "a": {
        "r": 0.39129382889621683,
        "p": 6.207517832995319e-05
      },
      "b": {
        "r": -0.04945721856433049,
        "p": 0.6268671333518643
      },
      "sigma": {
        "r": -0.0445720565727085,
        "p": 0.6613342271609448
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 561.6467280800227,
  "bic_error": "'ModelOutput' object has no attribute 'metrics'",
  "recovery_summary": "Parameter Recovery:\n- a: r = 0.391\n- b: r = -0.049\n- sigma: r = -0.045",
  "previous_models": [
    "Specification: proposed_perc = a + b * log((token_opp + 1)/(token_self + 1)) + epsilon,  where epsilon ~ Normal(0, sigma)\nSummary: A linear model that predicts the offer percentage based on the logarithm of the relative token contributions. The model includes two learnable parameters (an intercept and a sensitivity parameter) and a noise term. The formulation ensures low parameter covariance by using a parsimonious structure while directly linking the observed tokens to the proposed percentage.\nTarget Variable: proposed_perc\nPrediction Type: numerical_variable_estimation\nBIC: 561.6467280800227\n\nParameter Recovery:\n- a: r = 0.391\n- b: r = -0.049\n- sigma: r = -0.045"
  ]
}