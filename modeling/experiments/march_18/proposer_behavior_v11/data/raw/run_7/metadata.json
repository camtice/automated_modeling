{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641",
  "output_description": "Design a computational model for the described task.\n\nYour model should use the given variables appropriately, but does not necessary need to use all or even most of the variables. \n\nThe model should:\n1. Predict only proposer behavior (specifically, it should predict `proposed_perc`).\n2. Be VERY considerate of high covariance between learnable parameters as the model\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Have an appropriate number or learnable parameters, with a slight bias for less learnable paramters.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641\n\nDesired Output Specification: Design a computational model for the described task.\n\nYour model should use the given variables appropriately, but does not necessary need to use all or even most of the variables. \n\nThe model should:\n1. Predict only proposer behavior (specifically, it should predict `proposed_perc`).\n2. Be VERY considerate of high covariance between learnable parameters as the model\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Have an appropriate number or learnable parameters, with a slight bias for less learnable paramters.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should directly predict a numerical value (not a binary choice). The model's predictions will be compared to actual values using mean squared error.\n\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "Step 1: Key Psychological Mechanisms and Their Interactions\n\u2022 Participants likely form fairness judgments based on the tokens obtained by themselves and their opponent. The fair share is naturally taken as the fraction of tokens the opponent earned relative to the total tokens.\n\u2022 Participants may then adjust this fair share based on a self\u2010interest bias \u2013 amplifying or attenuating the fairness signal when the token imbalance (difference) is large.\n\u2022 The model assumes that the proposer\u2019s offer (proposed percentage for the opponent) is a combination of a baseline fairness (token ratio) and an adjustment to capture deviation from strict fairness. This adjustment is proportional to the difference between the opponent\u2019s and own tokens.\n\u2022 The key learnable parameters include an intercept (mu) that can shift the fair offer upward or downward, and a sensitivity parameter (beta) that scales the influence of token imbalance.\n\u2022 The model maps observable behavior (the percentage offer proposed, proposed_perc) as a function of token_self and token_opp using the above reasoning.\n\nStep 2: Mathematical Form and Learnable Parameters\n\u2022 Compute the overall tokens (token_total) = token_self + token_opp.\n\u2022 The fair share is token_opp/token_total (times 100 to scale to percentage).\n\u2022 The imbalance term is (token_opp \u2013 token_self)/token_total (times 100).\n\u2022 The final prediction then takes the form:\n\u2003 proposed_perc = mu + 100 * [(token_opp + beta*(token_opp \u2013 token_self))/(token_total)]\nwhere mu and beta are learnable parameters.\n\nStep 3: Mapping to Observables\n\u2022 Proposed_perc is directly observed in the dataset.\n\u2022 token_self and token_opp are observed token counts.\n\u2022 The model parameters (mu, beta) are estimated from data. With mu capturing a baseline bias (with conservative bounds) and beta capturing sensitivity to token imbalance (with generous finite bounds) while minimizing covariance by maintaining a simple structure.\n\nBelow is the formal mathematical model and variable descriptions.\n\n<MODEL>\nproposed_perc = mu + 100*(token_opp + beta*(token_opp - token_self))/(token_self + token_opp)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"mu\": {\n      \"description\": \"Intercept parameter that shifts the overall proposed percentage offer\",\n      \"range\": {\n        \"min\": -50,\n        \"max\": 50,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": -50,\n          \"upper\": 50\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta\": {\n      \"description\": \"Sensitivity parameter for the imbalance between opponent and self tokens\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": -10,\n          \"upper\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"proposed_perc\": {\n      \"description\": \"Percentage of the combined earning proposed for allocation to the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>proposed_perc</target_variable>\n\n<SUMMARY>\nA parsimonious linear model that predicts the proposer\u2019s percentage offer based on fairness cues from the observed token counts, incorporating a baseline bias (mu) and a sensitivity parameter (beta) to capture deviations driven by token imbalance.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['mu', 'beta']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                proposed_perc = mu + 100*(token_opp + beta*(token_opp - token_self))/(token_self + token_opp)\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"mu\": {\n      \"description\": \"Intercept parameter that shifts the overall proposed percentage offer\",\n      \"range\": {\n        \"min\": -50,\n        \"max\": 50,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": -50,\n          \"upper\": 50\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta\": {\n      \"description\": \"Sensitivity parameter for the imbalance between opponent and self tokens\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": -10,\n          \"upper\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"proposed_perc\": {\n      \"description\": \"Percentage of the combined earning proposed for allocation to the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641\n\n                ",
      "output": "\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, mu=0, beta=0):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n\n        # Handle the case where both are zero to avoid division by zero.\n        if token_self + token_opp == 0:\n            proposed_perc = mu  # Or some other default value, like 50.\n        else:\n            proposed_perc = mu + 100 * (token_opp + beta * (token_opp - token_self)) / (token_self + token_opp)\n        \n        model_predictions.append(proposed_perc)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n",
      "timestamp": 1742297128.692567
    }
  ],
  "learnable_parameters": {
    "mu": {
      "description": "Intercept parameter that shifts the overall proposed percentage offer",
      "range": {
        "min": -50,
        "max": 50,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "lower": -50,
          "upper": 50
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "beta": {
      "description": "Sensitivity parameter for the imbalance between opponent and self tokens",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "lower": -10,
          "upper": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "proposed_perc = mu + 100*(token_opp + beta*(token_opp - token_self))/(token_self + token_opp)",
  "variable_descriptions": {
    "mu": {
      "description": "Intercept parameter that shifts the overall proposed percentage offer",
      "range": {
        "min": -50,
        "max": 50,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "lower": -50,
          "upper": 50
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "beta": {
      "description": "Sensitivity parameter for the imbalance between opponent and self tokens",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "lower": -10,
          "upper": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "token_self": {
      "description": "Number of tokens found by the participant",
      "range": {
        "min": 0,
        "max": 1000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "empirical",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent",
      "range": {
        "min": 0,
        "max": 1000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "empirical",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "proposed_perc": {
      "description": "Percentage of the combined earning proposed for allocation to the opponent",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "empirical",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    }
  },
  "model_summary": "A parsimonious linear model that predicts the proposer\u2019s percentage offer based on fairness cues from the observed token counts, incorporating a baseline bias (mu) and a sensitivity parameter (beta) to capture deviations driven by token imbalance.",
  "target_variable": "proposed_perc",
  "full_reasoning": "Step 1: Key Psychological Mechanisms and Their Interactions\n\u2022 Participants likely form fairness judgments based on the tokens obtained by themselves and their opponent. The fair share is naturally taken as the fraction of tokens the opponent earned relative to the total tokens.\n\u2022 Participants may then adjust this fair share based on a self\u2010interest bias \u2013 amplifying or attenuating the fairness signal when the token imbalance (difference) is large.\n\u2022 The model assumes that the proposer\u2019s offer (proposed percentage for the opponent) is a combination of a baseline fairness (token ratio) and an adjustment to capture deviation from strict fairness. This adjustment is proportional to the difference between the opponent\u2019s and own tokens.\n\u2022 The key learnable parameters include an intercept (mu) that can shift the fair offer upward or downward, and a sensitivity parameter (beta) that scales the influence of token imbalance.\n\u2022 The model maps observable behavior (the percentage offer proposed, proposed_perc) as a function of token_self and token_opp using the above reasoning.\n\nStep 2: Mathematical Form and Learnable Parameters\n\u2022 Compute the overall tokens (token_total) = token_self + token_opp.\n\u2022 The fair share is token_opp/token_total (times 100 to scale to percentage).\n\u2022 The imbalance term is (token_opp \u2013 token_self)/token_total (times 100).\n\u2022 The final prediction then takes the form:\n\u2003 proposed_perc = mu + 100 * [(token_opp + beta*(token_opp \u2013 token_self))/(token_total)]\nwhere mu and beta are learnable parameters.\n\nStep 3: Mapping to Observables\n\u2022 Proposed_perc is directly observed in the dataset.\n\u2022 token_self and token_opp are observed token counts.\n\u2022 The model parameters (mu, beta) are estimated from data. With mu capturing a baseline bias (with conservative bounds) and beta capturing sensitivity to token imbalance (with generous finite bounds) while minimizing covariance by maintaining a simple structure.\n\nBelow is the formal mathematical model and variable descriptions.\n\n<MODEL>\nproposed_perc = mu + 100*(token_opp + beta*(token_opp - token_self))/(token_self + token_opp)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"mu\": {\n      \"description\": \"Intercept parameter that shifts the overall proposed percentage offer\",\n      \"range\": {\n        \"min\": -50,\n        \"max\": 50,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": -50,\n          \"upper\": 50\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta\": {\n      \"description\": \"Sensitivity parameter for the imbalance between opponent and self tokens\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": -10,\n          \"upper\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"proposed_perc\": {\n      \"description\": \"Percentage of the combined earning proposed for allocation to the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>proposed_perc</target_variable>\n\n<SUMMARY>\nA parsimonious linear model that predicts the proposer\u2019s percentage offer based on fairness cues from the observed token counts, incorporating a baseline bias (mu) and a sensitivity parameter (beta) to capture deviations driven by token imbalance.\n</SUMMARY>",
  "prediction_type": "numerical_variable_estimation",
  "current_model": "Specification: proposed_perc = mu + 100*(token_opp + beta*(token_opp - token_self))/(token_self + token_opp)\nSummary: A parsimonious linear model that predicts the proposer\u2019s percentage offer based on fairness cues from the observed token counts, incorporating a baseline bias (mu) and a sensitivity parameter (beta) to capture deviations driven by token imbalance.\nTarget Variable: proposed_perc\nPrediction Type: numerical_variable_estimation",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, mu=0, beta=0):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n\n        # Handle the case where both are zero to avoid division by zero.\n        if token_self + token_opp == 0:\n            proposed_perc = mu  # Or some other default value, like 50.\n        else:\n            proposed_perc = mu + 100 * (token_opp + beta * (token_opp - token_self)) / (token_self + token_opp)\n        \n        model_predictions.append(proposed_perc)\n    return model_predictions",
  "total_retries": 0,
  "fitting_results": [
    {
      "mu": -5.000885510159989e-09,
      "beta": -0.5000000049999715,
      "success": true,
      "mse": 1.6172973794073017e-14,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "mu": -5.999999795705361,
      "beta": -0.23853211527128315,
      "success": true,
      "mse": 19.840978593272226,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "mu": -13.333333470782339,
      "beta": -0.13532110682306664,
      "success": true,
      "mse": 16.320081549439376,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "mu": -5.015023949055445e-09,
      "beta": -0.5000000050001745,
      "success": true,
      "mse": 1.6174426182282446e-14,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "mu": -6.000000236640813,
      "beta": -0.20412844547965114,
      "success": true,
      "mse": 20.78899082568813,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "mu": -13.999999854696016,
      "beta": -0.16972477432965083,
      "success": true,
      "mse": 46.874617737003106,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "mu": -4.990210852023468e-09,
      "beta": -0.5000000049998964,
      "success": true,
      "mse": 1.6172382550221917e-14,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "mu": -5.333333387841379,
      "beta": -0.37614679481670565,
      "success": true,
      "mse": 68.31396534148831,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "mu": -5.0000895430671905e-09,
      "beta": -0.5000000050000006,
      "success": true,
      "mse": 1.6173152975866415e-14,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "mu": -3.333333360733084,
      "beta": -0.376146794017509,
      "success": true,
      "mse": 12.313965341488291,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "mu": -2.6666665806819947,
      "beta": -0.37614679371836596,
      "success": true,
      "mse": 9.647298674821634,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "mu": -5.0014863761305346e-09,
      "beta": -0.5000000050000025,
      "success": true,
      "mse": 1.617317948132356e-14,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "mu": -8.666666720064917,
      "beta": -0.2522935828551741,
      "success": true,
      "mse": 11.922528032619804,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "mu": -2.666666700718797,
      "beta": -0.431192665591078,
      "success": true,
      "mse": 29.83078491335374,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "mu": -4.9993976925309495e-09,
      "beta": -0.5000000049999646,
      "success": true,
      "mse": 1.6172912205683312e-14,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "mu": -3.333333290799497,
      "beta": -0.36238532618089125,
      "success": true,
      "mse": 9.989806320081573,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "mu": -5.000543430091265e-09,
      "beta": -0.5000000049999522,
      "success": true,
      "mse": 1.6172845202093022e-14,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "mu": -7.333333289070788,
      "beta": -0.44495413367740955,
      "success": true,
      "mse": 30.9317023445464,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "mu": -5.999999975930649,
      "beta": -0.43119266523435273,
      "success": true,
      "mse": 60.94189602446486,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "mu": -4.993937524499194e-09,
      "beta": -0.500000004999951,
      "success": true,
      "mse": 1.6172772084316248e-14,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "mu": -18.66666677120445,
      "beta": -0.43119266498662145,
      "success": true,
      "mse": 21.83078491335375,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "mu": -13.999998836896015,
      "beta": -0.30733945166844795,
      "success": true,
      "mse": 66.6911314984723,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "mu": -20.666666636278897,
      "beta": -0.3761467949840569,
      "success": true,
      "mse": 62.98063200815499,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "mu": -5.333333787462411,
      "beta": -0.4311926588534028,
      "success": true,
      "mse": 21.830784913353924,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "mu": -5.333333693130699,
      "beta": -0.23853211266518776,
      "success": true,
      "mse": 20.729867482161204,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "mu": -3.333333365911924,
      "beta": -0.3417431346234295,
      "success": true,
      "mse": 6.044852191641336,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "mu": -30.00000000108252,
      "beta": -0.5000000016758862,
      "success": true,
      "mse": 1.815315662082193e-15,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "mu": -4.666666707491935,
      "beta": -0.27293578585347156,
      "success": true,
      "mse": 18.252803261977597,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "mu": -9.333333601772372,
      "beta": -0.32110092012669733,
      "success": true,
      "mse": 132.21610601427122,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "mu": -23.999998698119082,
      "beta": -0.4311926654829617,
      "success": true,
      "mse": 114.27522935779984,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "mu": -6.666665787591716,
      "beta": -0.23853211239189862,
      "success": true,
      "mse": 31.396534148828483,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "mu": -4.994490667403599e-09,
      "beta": -0.5000000049999983,
      "success": true,
      "mse": 1.617308198352461e-14,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "mu": -19.33333283110057,
      "beta": -0.5825688089143427,
      "success": true,
      "mse": 148.48521916411846,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "mu": -10.66666632790865,
      "beta": -0.3279816566655531,
      "success": true,
      "mse": 133.77573904179422,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "mu": -26.666666596676716,
      "beta": -0.46559633742798934,
      "success": true,
      "mse": 74.79102956167179,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "mu": -19.999999864241815,
      "beta": -0.534403674491579,
      "success": true,
      "mse": 12.56880733944957,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "mu": -6.666666495006148,
      "beta": -0.30733945268853163,
      "success": true,
      "mse": 24.913353720693216,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "mu": -3.3333334383379545,
      "beta": -0.39678899558211295,
      "success": true,
      "mse": 15.341488277268121,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "mu": -14.00000012900518,
      "beta": -0.30733945335329516,
      "success": true,
      "mse": 66.69113149847097,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "mu": -11.333333234594207,
      "beta": -0.32110092161092324,
      "success": true,
      "mse": 17.5494393476045,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "mu": -21.999999730740964,
      "beta": -0.43119266415640545,
      "success": true,
      "mse": 132.9418960244649,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "mu": -8.000001173614043,
      "beta": -0.23165137861736523,
      "success": true,
      "mse": 76.15290519877814,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "mu": -5.000116744867171e-09,
      "beta": -0.5000000050000142,
      "success": true,
      "mse": 1.6173241493838607e-14,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "mu": -30.000000005002548,
      "beta": -0.50000000500002,
      "success": true,
      "mse": 1.6173301675512695e-14,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "mu": -4.000000123651066,
      "beta": -0.5344036704862813,
      "success": true,
      "mse": 63.23547400611621,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "mu": -27.999999889383226,
      "beta": -0.5000000032291622,
      "success": true,
      "mse": 56.00000000000003,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "mu": -14.666666625905451,
      "beta": -0.4105504642880662,
      "success": true,
      "mse": 46.387359836901155,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "mu": -29.99999996763778,
      "beta": -0.5000000048302821,
      "success": true,
      "mse": 1.611781473521945e-14,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "mu": -2.000000504787007,
      "beta": -0.39678899719860194,
      "success": true,
      "mse": 9.119266055046165,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "mu": -8.666667123747537,
      "beta": -0.5688073481083931,
      "success": true,
      "mse": 168.49745158002062,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "mu": -18.66666721354025,
      "beta": -0.444954133976503,
      "success": true,
      "mse": 116.26503567788001,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "mu": -27.333332932099385,
      "beta": -0.500000004151756,
      "success": true,
      "mse": 32.88888888888906,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "mu": -7.333333373213047,
      "beta": -0.472477071577775,
      "success": true,
      "mse": 152.3995922528033,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "mu": -25.99999917026479,
      "beta": -0.43119266426904135,
      "success": true,
      "mse": 74.27522935779886,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "mu": -2.666666598537598,
      "beta": -0.37614679377901145,
      "success": true,
      "mse": 9.647298674821625,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "mu": -5.999999978146959,
      "beta": -0.41055046349336827,
      "success": true,
      "mse": 32.16513761467891,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "mu": -16.66666746125121,
      "beta": -0.2522935825779187,
      "success": true,
      "mse": 115.92252803262043,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "mu": -15.333333404627961,
      "beta": -0.4518348668799527,
      "success": true,
      "mse": 50.05708460754336,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "mu": -1.3333333453736786,
      "beta": -0.5000000078567509,
      "success": true,
      "mse": 24.88888888888893,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "mu": -7.333333229149484,
      "beta": -0.30045871954791703,
      "success": true,
      "mse": 47.17023445463814,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "mu": -15.333333686956962,
      "beta": -0.5756880796266652,
      "success": true,
      "mse": 141.18858307849146,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "mu": -5.999999206277723,
      "beta": -0.34174312312605987,
      "success": true,
      "mse": 74.48929663608628,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "mu": -13.999999976739101,
      "beta": -0.5412844079700654,
      "success": true,
      "mse": 222.89908256880742,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "mu": -23.33333356009101,
      "beta": -0.6376146853753085,
      "success": true,
      "mse": 129.98980632008164,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "mu": -10.66666713792729,
      "beta": -0.5206422076212818,
      "success": true,
      "mse": 72.61365953109099,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "mu": -0.6666668164231419,
      "beta": -0.4793578036178128,
      "success": true,
      "mse": 5.946992864424101,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "mu": -2.0000006385639417,
      "beta": -0.396788995307369,
      "success": true,
      "mse": 49.119266055046275,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "mu": -1.3333334805409733,
      "beta": -0.5000000049898963,
      "success": true,
      "mse": 24.888888888888925,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "mu": -20.000000822867154,
      "beta": -0.29357798421907066,
      "success": true,
      "mse": 172.47706422018416,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "mu": -25.33333332142343,
      "beta": -0.30733945438421356,
      "success": true,
      "mse": 40.91335372069318,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "mu": -21.333333222197147,
      "beta": -0.38302752985409055,
      "success": true,
      "mse": 96.05096839959229,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "mu": -14.000001050230285,
      "beta": -0.3967889991880684,
      "success": true,
      "mse": 217.119266055047,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "mu": -16.000000508677306,
      "beta": -0.29357798338788776,
      "success": true,
      "mse": 89.81039755351708,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "mu": -0.6666665178593654,
      "beta": -0.5344036769098596,
      "success": true,
      "mse": 5.45769622833849,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "mu": -27.333333314302994,
      "beta": -0.46559633535130573,
      "success": true,
      "mse": 58.791029561671806,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "mu": -19.333333259565983,
      "beta": -0.4655963348816262,
      "success": true,
      "mse": 32.12436289500512,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "mu": -26.666666377262864,
      "beta": -0.568807344071289,
      "success": true,
      "mse": 72.49745158002047,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "mu": -24.666666900043037,
      "beta": -0.5344036734424505,
      "success": true,
      "mse": 117.4576962283385,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "mu": -1.333333674130748,
      "beta": -0.5000000054607032,
      "success": true,
      "mse": 24.888888888889024,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "mu": -1.9999998292797414,
      "beta": -0.5481651414746435,
      "success": true,
      "mse": 14.501529051987808,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "mu": -13.333333436183798,
      "beta": -0.4105504407897316,
      "success": true,
      "mse": 150.3873598369013,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "mu": -28.000000018829894,
      "beta": -0.49999999046814003,
      "success": true,
      "mse": 56.000000000000064,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "mu": -2.000000186291904,
      "beta": -0.39678899548460855,
      "success": true,
      "mse": 22.45259938837926,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "mu": -0.6666666807927937,
      "beta": -0.4655963352196061,
      "success": true,
      "mse": 5.457696228338445,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "mu": -13.999999840349195,
      "beta": -0.7270642242836689,
      "success": true,
      "mse": 124.03058103975539,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "mu": -4.995238465590972e-09,
      "beta": -0.5000000049999662,
      "success": true,
      "mse": 1.6172881643022755e-14,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "mu": -24.666666697942023,
      "beta": -0.6651376194998333,
      "success": true,
      "mse": 87.27420998980634,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "mu": -4.000000041684536,
      "beta": -0.34862385851695765,
      "success": true,
      "mse": 35.865443425076464,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "mu": -30.000000005001223,
      "beta": -0.5000000050000355,
      "success": true,
      "mse": 1.6173390232337713e-14,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "mu": -20.000000430693493,
      "beta": -0.4174311877728401,
      "success": true,
      "mse": 128.9296636085629,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "mu": -7.333333268003994,
      "beta": -0.6032110145339811,
      "success": true,
      "mse": 132.67482161060144,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "mu": {
        "r": 0.9999999999999996,
        "p": 0.0
      },
      "beta": {
        "r": 1.0,
        "p": 0.0
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 45.108732810203065,
  "bic_error": "'ModelOutput' object has no attribute 'metrics'",
  "recovery_summary": "Parameter Recovery:\n- mu: r = 1.000\n- beta: r = 1.000",
  "previous_models": [
    "Specification: proposed_perc = mu + 100*(token_opp + beta*(token_opp - token_self))/(token_self + token_opp)\nSummary: A parsimonious linear model that predicts the proposer\u2019s percentage offer based on fairness cues from the observed token counts, incorporating a baseline bias (mu) and a sensitivity parameter (beta) to capture deviations driven by token imbalance.\nTarget Variable: proposed_perc\nPrediction Type: numerical_variable_estimation\nBIC: 45.108732810203065\n\nParameter Recovery:\n- mu: r = 1.000\n- beta: r = 1.000"
  ]
}