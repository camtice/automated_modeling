{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641",
  "output_description": "Design a computational model for the described task.\n\nYour model should use the given variables appropriately, but does not necessary need to use all or even most of the variables. \n\nThe model should:\n1. Predict only proposer behavior (specifically, it should predict `proposed_perc`).\n2. Be VERY considerate of high covariance between learnable parameters as the model\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Have an appropriate number or learnable parameters, with a slight bias for less learnable paramters.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641\n\nDesired Output Specification: Design a computational model for the described task.\n\nYour model should use the given variables appropriately, but does not necessary need to use all or even most of the variables. \n\nThe model should:\n1. Predict only proposer behavior (specifically, it should predict `proposed_perc`).\n2. Be VERY considerate of high covariance between learnable parameters as the model\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Have an appropriate number or learnable parameters, with a slight bias for less learnable paramters.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should directly predict a numerical value (not a binary choice). The model's predictions will be compared to actual values using mean squared error.\n\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "Step-by-step reasoning:\n1. Key psychological mechanisms include fairness considerations and inequity aversion: a proposer considers how much the opponent contributed (token_opp) relative to their own contribution (token_self) and uses this difference as a fairness cue. When the opponent\u2019s tokens are higher relative to total tokens, the proposer is more inclined to offer a higher percentage.\n2. These mechanisms interact in a linear fashion: the proposer starts from a baseline fairness preference (roughly corresponding to a 50% offer when contributions are balanced) and adjusts that baseline by the deviation of the opponent\u2019s contribution share from 50%.\n3. The mathematical form is a simple linear model where the predicted percentage for the opponent, proposed_perc, is given as an intercept plus a sensitivity parameter multiplied by the centered fairness measure. The fairness measure is computed as the ratio token_opp divided by (token_self + token_opp) with 0.5 subtracted so that a \u201cfair\u201d division (equal contributions) corresponds to 0.\n4. The learnable parameters include:\n   \u2022 beta0: the baseline proposed percentage when fairness measure is neutral.\n   \u2022 beta1: the sensitivity to fairness deviations (how much an imbalance in tokens affects the proposed percentage).\n   \u2022 sigma_error: the standard deviation of additive noise.\n5. The model variables are mapped to observed behavior as follows:\n   \u2022 token_opp and token_self are directly taken from the dataset.\n   \u2022 The computed fairness measure (token_opp/(token_self+token_opp) - 0.5) scales the influence of tokens.\n   \u2022 The predicted value is compared to the observed proposed_perc.\n6. Because the model is designed to predict proposer behavior (specifically, proposed_perc), only variables related to tokens are used for the prediction. This helps manage covariance between parameters while keeping the number of learnable parameters low.\n\nThe formal specification follows.\n\n<MODEL>\npredicted_proposed_perc = beta0 + beta1 * ((token_opp/(token_self+token_opp)) - 0.5) + noise\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"predicted_proposed_perc\": {\n      \"description\": \"Model prediction of the proposed percentage offered to the opponent, as a percentage.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta0\": {\n      \"description\": \"Baseline proposed percentage when the token ratio is balanced (i.e. fairness measure equals 0).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta1\": {\n      \"description\": \"Sensitivity parameter that scales the effect of the centered token ratio (fairness cue) on the proposed percentage.\",\n      \"range\": {\n        \"min\": -100,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent, representing the opponent's contribution.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant, representing the participant's contribution.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"noise\": {\n      \"description\": \"Stochastic noise component, assumed to be drawn from a normal distribution with mean 0 and standard deviation sigma_error.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"sigma_error\": {\n      \"description\": \"Standard deviation of the additive noise, capturing unexplained variability in proposed percentage.\",\n      \"range\": {\n        \"min\": 0.1,\n        \"max\": 50,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>proposed_perc</target_variable>\n\n<SUMMARY>\nA linear fairness-based computational model predicting the proposed percentage for the opponent. The model uses the ratio of the opponent's tokens to total tokens (centered around 0.5) to adjust a baseline offer (beta0) by a sensitivity factor (beta1) with additive normally distributed noise (sigma_error). This approach minimizes the number of learnable parameters to enhance parameter recovery while accurately capturing proposer behavior.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['beta0', 'beta1', 'sigma_error']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                predicted_proposed_perc = beta0 + beta1 * ((token_opp/(token_self+token_opp)) - 0.5) + noise\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"predicted_proposed_perc\": {\n      \"description\": \"Model prediction of the proposed percentage offered to the opponent, as a percentage.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta0\": {\n      \"description\": \"Baseline proposed percentage when the token ratio is balanced (i.e. fairness measure equals 0).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta1\": {\n      \"description\": \"Sensitivity parameter that scales the effect of the centered token ratio (fairness cue) on the proposed percentage.\",\n      \"range\": {\n        \"min\": -100,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent, representing the opponent's contribution.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant, representing the participant's contribution.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"noise\": {\n      \"description\": \"Stochastic noise component, assumed to be drawn from a normal distribution with mean 0 and standard deviation sigma_error.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"sigma_error\": {\n      \"description\": \"Standard deviation of the additive noise, capturing unexplained variability in proposed percentage.\",\n      \"range\": {\n        \"min\": 0.1,\n        \"max\": 50,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641\n\n                ",
      "output": "\n```python\nimport json\nimport math\nimport random\n\ndef simulate_model(trial_data, beta0=50, beta1=0, sigma_error=5):\n    model_predictions = []\n    for trial in trial_data:\n        token_opp = trial.get(\"token_opp\", 0)\n        token_self = trial.get(\"token_self\", 0)\n\n        # Avoid division by zero\n        if token_self + token_opp == 0:\n            fairness_measure = 0  # Or any other reasonable default\n        else:\n            fairness_measure = (token_opp / (token_self + token_opp)) - 0.5\n\n        # Generate noise from a normal distribution\n        u1 = random.random()\n        u2 = random.random()\n        noise = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2) * sigma_error\n\n        predicted_proposed_perc = beta0 + beta1 * fairness_measure + noise\n        model_predictions.append(predicted_proposed_perc)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '[{\"ID\": 1, \"group\": \"Treatment\", \"trial_number\": 1, \"trial_type\": 1, \"trial_role\": 0, \"token_opp\": 50, \"token_self\": 50, \"combined_earning\": 200, \"split_opp\": 100.0, \"split_self\": 100.0, \"splitperc_opp\": 50, \"splitperc_self\": 50, \"accept\": 1.0, \"accepted_amount\": 100.0, \"accepted_perc\": 50.0, \"proposed_perc\": 50.0, \"proposed_amount\": 100.0}, {\"ID\": 2, \"group\": \"Treatment\", \"trial_number\": 2, \"trial_type\": 1, \"trial_role\": 0, \"token_opp\": 75, \"token_self\": 25, \"combined_earning\": 200, \"split_opp\": 120.0, \"split_self\": 80.0, \"splitperc_opp\": 60, \"splitperc_self\": 40, \"accept\": 1.0, \"accepted_amount\": 120.0, \"accepted_perc\": 60.0, \"proposed_perc\": 60.0, \"proposed_amount\": 120.0}]'\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n",
      "timestamp": 1742297189.8262668
    }
  ],
  "learnable_parameters": {
    "beta0": {
      "description": "Baseline proposed percentage when the token ratio is balanced (i.e. fairness measure equals 0).",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta1": {
      "description": "Sensitivity parameter that scales the effect of the centered token ratio (fairness cue) on the proposed percentage.",
      "range": {
        "min": -100,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "sigma_error": {
      "description": "Standard deviation of the additive noise, capturing unexplained variability in proposed percentage.",
      "range": {
        "min": 0.1,
        "max": 50,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "predicted_proposed_perc = beta0 + beta1 * ((token_opp/(token_self+token_opp)) - 0.5) + noise",
  "variable_descriptions": {
    "predicted_proposed_perc": {
      "description": "Model prediction of the proposed percentage offered to the opponent, as a percentage.",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "beta0": {
      "description": "Baseline proposed percentage when the token ratio is balanced (i.e. fairness measure equals 0).",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta1": {
      "description": "Sensitivity parameter that scales the effect of the centered token ratio (fairness cue) on the proposed percentage.",
      "range": {
        "min": -100,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent, representing the opponent's contribution.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Number of tokens found by the participant, representing the participant's contribution.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "noise": {
      "description": "Stochastic noise component, assumed to be drawn from a normal distribution with mean 0 and standard deviation sigma_error.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "sigma_error": {
      "description": "Standard deviation of the additive noise, capturing unexplained variability in proposed percentage.",
      "range": {
        "min": 0.1,
        "max": 50,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_summary": "A linear fairness-based computational model predicting the proposed percentage for the opponent. The model uses the ratio of the opponent's tokens to total tokens (centered around 0.5) to adjust a baseline offer (beta0) by a sensitivity factor (beta1) with additive normally distributed noise (sigma_error). This approach minimizes the number of learnable parameters to enhance parameter recovery while accurately capturing proposer behavior.",
  "target_variable": "proposed_perc",
  "full_reasoning": "Step-by-step reasoning:\n1. Key psychological mechanisms include fairness considerations and inequity aversion: a proposer considers how much the opponent contributed (token_opp) relative to their own contribution (token_self) and uses this difference as a fairness cue. When the opponent\u2019s tokens are higher relative to total tokens, the proposer is more inclined to offer a higher percentage.\n2. These mechanisms interact in a linear fashion: the proposer starts from a baseline fairness preference (roughly corresponding to a 50% offer when contributions are balanced) and adjusts that baseline by the deviation of the opponent\u2019s contribution share from 50%.\n3. The mathematical form is a simple linear model where the predicted percentage for the opponent, proposed_perc, is given as an intercept plus a sensitivity parameter multiplied by the centered fairness measure. The fairness measure is computed as the ratio token_opp divided by (token_self + token_opp) with 0.5 subtracted so that a \u201cfair\u201d division (equal contributions) corresponds to 0.\n4. The learnable parameters include:\n   \u2022 beta0: the baseline proposed percentage when fairness measure is neutral.\n   \u2022 beta1: the sensitivity to fairness deviations (how much an imbalance in tokens affects the proposed percentage).\n   \u2022 sigma_error: the standard deviation of additive noise.\n5. The model variables are mapped to observed behavior as follows:\n   \u2022 token_opp and token_self are directly taken from the dataset.\n   \u2022 The computed fairness measure (token_opp/(token_self+token_opp) - 0.5) scales the influence of tokens.\n   \u2022 The predicted value is compared to the observed proposed_perc.\n6. Because the model is designed to predict proposer behavior (specifically, proposed_perc), only variables related to tokens are used for the prediction. This helps manage covariance between parameters while keeping the number of learnable parameters low.\n\nThe formal specification follows.\n\n<MODEL>\npredicted_proposed_perc = beta0 + beta1 * ((token_opp/(token_self+token_opp)) - 0.5) + noise\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"predicted_proposed_perc\": {\n      \"description\": \"Model prediction of the proposed percentage offered to the opponent, as a percentage.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta0\": {\n      \"description\": \"Baseline proposed percentage when the token ratio is balanced (i.e. fairness measure equals 0).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta1\": {\n      \"description\": \"Sensitivity parameter that scales the effect of the centered token ratio (fairness cue) on the proposed percentage.\",\n      \"range\": {\n        \"min\": -100,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent, representing the opponent's contribution.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant, representing the participant's contribution.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"noise\": {\n      \"description\": \"Stochastic noise component, assumed to be drawn from a normal distribution with mean 0 and standard deviation sigma_error.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"sigma_error\": {\n      \"description\": \"Standard deviation of the additive noise, capturing unexplained variability in proposed percentage.\",\n      \"range\": {\n        \"min\": 0.1,\n        \"max\": 50,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>proposed_perc</target_variable>\n\n<SUMMARY>\nA linear fairness-based computational model predicting the proposed percentage for the opponent. The model uses the ratio of the opponent's tokens to total tokens (centered around 0.5) to adjust a baseline offer (beta0) by a sensitivity factor (beta1) with additive normally distributed noise (sigma_error). This approach minimizes the number of learnable parameters to enhance parameter recovery while accurately capturing proposer behavior.\n</SUMMARY>",
  "prediction_type": "numerical_variable_estimation",
  "current_model": "Specification: predicted_proposed_perc = beta0 + beta1 * ((token_opp/(token_self+token_opp)) - 0.5) + noise\nSummary: A linear fairness-based computational model predicting the proposed percentage for the opponent. The model uses the ratio of the opponent's tokens to total tokens (centered around 0.5) to adjust a baseline offer (beta0) by a sensitivity factor (beta1) with additive normally distributed noise (sigma_error). This approach minimizes the number of learnable parameters to enhance parameter recovery while accurately capturing proposer behavior.\nTarget Variable: proposed_perc\nPrediction Type: numerical_variable_estimation",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, beta0=50, beta1=0, sigma_error=5):\n    model_predictions = []\n    for trial in trial_data:\n        token_opp = trial.get(\"token_opp\", 0)\n        token_self = trial.get(\"token_self\", 0)\n\n        # Avoid division by zero\n        if token_self + token_opp == 0:\n            fairness_measure = 0  # Or any other reasonable default\n        else:\n            fairness_measure = (token_opp / (token_self + token_opp)) - 0.5\n\n        # Generate noise from a normal distribution\n        u1 = random.random()\n        u2 = random.random()\n        noise = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2) * sigma_error\n\n        predicted_proposed_perc = beta0 + beta1 * fairness_measure + noise\n        model_predictions.append(predicted_proposed_perc)\n    return model_predictions",
  "total_retries": 0,
  "fitting_warnings": [
    "Error fitting participant 1006: Error in parameter fitting: All optimization attempts failed. Errors: []",
    "Error fitting participant 1009: Error in parameter fitting: All optimization attempts failed. Errors: []",
    "Error fitting participant 1021: Error in parameter fitting: All optimization attempts failed. Errors: []",
    "Error fitting participant 1036: Error in parameter fitting: All optimization attempts failed. Errors: []"
  ],
  "fitting_results": [
    {
      "beta0": 83.60759497865415,
      "beta1": -36.013232498589865,
      "sigma_error": 24.532052033701248,
      "success": true,
      "mse": 1766.4241343728183,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 98.26179612537419,
      "beta1": 3.040441841901854,
      "sigma_error": 18.707645426178036,
      "success": true,
      "mse": 3398.673755482199,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 37.12488189327207,
      "beta1": 7.008047811203294,
      "sigma_error": 2.4246382533846433,
      "success": true,
      "mse": 101.87971458201322,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 27.22162841148935,
      "beta1": -1.6972608535586824,
      "sigma_error": 40.95584246272812,
      "success": true,
      "mse": 2098.1272231075227,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 84.57288913728735,
      "beta1": -25.824800556855944,
      "sigma_error": 3.310965305799286,
      "success": true,
      "mse": 1974.4356330118985,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 45.69308469501813,
      "beta1": 40.49511705836326,
      "sigma_error": 0.8916708371923334,
      "success": true,
      "mse": 47.18238363588607,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 59.42685221487156,
      "beta1": 37.76763957047288,
      "sigma_error": 0.7519421183158708,
      "success": true,
      "mse": 289.18448394527434,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 21.37489573230555,
      "beta1": 57.086565212624,
      "sigma_error": 47.9942739924366,
      "success": true,
      "mse": 2583.04150481437,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 64.82325126255354,
      "beta1": 5.364896320903024,
      "sigma_error": 22.328919360948756,
      "success": true,
      "mse": 780.4873437132599,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 61.15925067729234,
      "beta1": -15.509975496848009,
      "sigma_error": 18.329080118832476,
      "success": true,
      "mse": 535.7890080791465,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 87.76121631382469,
      "beta1": -88.53950920521399,
      "sigma_error": 41.98751499031824,
      "success": true,
      "mse": 3201.4974682409866,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 37.495422986556655,
      "beta1": 97.29545735328966,
      "sigma_error": 47.780031704009225,
      "success": true,
      "mse": 1946.614053597054,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 33.71983131931857,
      "beta1": 39.45506303261692,
      "sigma_error": 13.615078227428805,
      "success": true,
      "mse": 363.68199328374817,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 27.423316090661885,
      "beta1": -88.05369780158597,
      "sigma_error": 11.340015610492593,
      "success": true,
      "mse": 1032.1594344240955,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 53.34808936932861,
      "beta1": 4.561780157841886,
      "sigma_error": 10.9348128582207,
      "success": true,
      "mse": 121.03383012920973,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 25.89309359383782,
      "beta1": 17.313285594470955,
      "sigma_error": 1.9868976593217844,
      "success": true,
      "mse": 337.9586203513885,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 69.10627603969067,
      "beta1": -40.481989583512316,
      "sigma_error": 20.186675183344562,
      "success": true,
      "mse": 1203.0559208725258,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 4.170106097012135,
      "beta1": 36.846327538980546,
      "sigma_error": 8.027915752985876,
      "success": true,
      "mse": 901.9300573804369,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 7.211179281336247,
      "beta1": 26.506775842126153,
      "sigma_error": 24.86388924921899,
      "success": true,
      "mse": 1685.6757819466804,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 53.454374992872395,
      "beta1": -36.36877957832199,
      "sigma_error": 9.77089203098966,
      "success": true,
      "mse": 830.2105560673158,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 55.148822824684856,
      "beta1": -98.3357865633844,
      "sigma_error": 21.4618253905795,
      "success": true,
      "mse": 862.2670350114394,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 10.861322338832013,
      "beta1": -74.40162058425706,
      "sigma_error": 8.11319694348451,
      "success": true,
      "mse": 1551.0516450073728,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 23.58151782688834,
      "beta1": 13.715948000308936,
      "sigma_error": 3.635257502333148,
      "success": true,
      "mse": 557.3222833326191,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 76.13028028732283,
      "beta1": 22.607937535520257,
      "sigma_error": 41.04201136814924,
      "success": true,
      "mse": 8017.789591848576,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 77.47360025496818,
      "beta1": -46.660877632482425,
      "sigma_error": 2.833936938311995,
      "success": true,
      "mse": 1163.3504058155465,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 67.04586404208467,
      "beta1": 13.708458788589017,
      "sigma_error": 9.57276404513142,
      "success": true,
      "mse": 1082.1560653671156,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 3.6386015620849093,
      "beta1": 23.161213219744628,
      "sigma_error": 46.283737765303805,
      "success": true,
      "mse": 3126.588321392721,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 30.887195520412433,
      "beta1": -3.1422745812495454,
      "sigma_error": 23.98826816556017,
      "success": true,
      "mse": 752.4898983341131,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 31.263830525454892,
      "beta1": -32.53567735984178,
      "sigma_error": 38.004795993465905,
      "success": true,
      "mse": 2267.290358168122,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 3.39395672608063,
      "beta1": 41.322400952204916,
      "sigma_error": 21.29342732983833,
      "success": true,
      "mse": 1416.0009690552972,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 66.69534214981506,
      "beta1": 85.28324100066258,
      "sigma_error": 14.933806945054906,
      "success": true,
      "mse": 1482.0605740079636,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 50.699298408885575,
      "beta1": -25.89628681569818,
      "sigma_error": 12.52390516582394,
      "success": true,
      "mse": 438.6135404208275,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 7.965751485939612,
      "beta1": 53.64954227785543,
      "sigma_error": 33.04001107893548,
      "success": true,
      "mse": 2709.9926631925755,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 67.94501179081212,
      "beta1": 35.35672869534908,
      "sigma_error": 13.946346900600876,
      "success": true,
      "mse": 568.523851553025,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 16.100911848168504,
      "beta1": -40.11192539700915,
      "sigma_error": 30.62686196746305,
      "success": true,
      "mse": 2088.6042571474813,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 44.74765123123149,
      "beta1": 21.65914568680107,
      "sigma_error": 1.5881551219964276,
      "success": true,
      "mse": 62.181281563862605,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 65.85542003161929,
      "beta1": 79.60598380342155,
      "sigma_error": 7.388868632163159,
      "success": true,
      "mse": 1823.8606013510337,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 74.71960661540622,
      "beta1": 30.599320759833166,
      "sigma_error": 11.433415412221505,
      "success": true,
      "mse": 1473.8499313135094,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 27.150908121662003,
      "beta1": 8.480126411447305,
      "sigma_error": 6.0941944562305945,
      "success": true,
      "mse": 488.1488710187139,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 51.11650634717292,
      "beta1": -15.130979011998901,
      "sigma_error": 15.583812259087537,
      "success": true,
      "mse": 1048.577334345832,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 42.937780690945345,
      "beta1": -63.427407535498304,
      "sigma_error": 3.5464813254905767,
      "success": true,
      "mse": 161.83985414442068,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 28.729886102826864,
      "beta1": -69.5609136691271,
      "sigma_error": 8.028994143930175,
      "success": true,
      "mse": 278.1541406317789,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 46.15965692168142,
      "beta1": 61.85721726988897,
      "sigma_error": 24.008790286914497,
      "success": true,
      "mse": 864.6577070084244,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 78.82343185877237,
      "beta1": -62.066344638703924,
      "sigma_error": 49.29277524679689,
      "success": true,
      "mse": 7569.234046595857,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 32.58753192370737,
      "beta1": -61.0045980281306,
      "sigma_error": 36.44016616330477,
      "success": true,
      "mse": 2442.4103759633426,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 19.71146030999558,
      "beta1": -99.80921684659045,
      "sigma_error": 23.831909805682155,
      "success": true,
      "mse": 709.5187917517646,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 61.2868036730471,
      "beta1": 97.98149377795414,
      "sigma_error": 5.910203247932185,
      "success": true,
      "mse": 1125.0886786183996,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 42.722282103176646,
      "beta1": 64.23969028381131,
      "sigma_error": 26.59672774279679,
      "success": true,
      "mse": 1546.7473297731344,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 74.72552049300212,
      "beta1": -22.51846577624091,
      "sigma_error": 31.922084147747743,
      "success": true,
      "mse": 1624.0300568824325,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 77.64521586565814,
      "beta1": -66.21005176774817,
      "sigma_error": 12.326504714529637,
      "success": true,
      "mse": 2950.14340624574,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 54.97623718127182,
      "beta1": -87.20262076517618,
      "sigma_error": 28.846316829923943,
      "success": true,
      "mse": 1132.9827343974139,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 54.271126991198365,
      "beta1": -74.0115387176598,
      "sigma_error": 2.734765101595938,
      "success": true,
      "mse": 291.45605896658986,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 66.98067094715064,
      "beta1": -75.17798964643148,
      "sigma_error": 22.945892231749934,
      "success": true,
      "mse": 2694.7155236691437,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 15.318890511794601,
      "beta1": 61.54062408411552,
      "sigma_error": 4.070772124803128,
      "success": true,
      "mse": 487.1708889503852,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 33.175991031276034,
      "beta1": -57.884951880407854,
      "sigma_error": 20.54144460991999,
      "success": true,
      "mse": 624.2159676183323,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 34.61775629373859,
      "beta1": -13.228985336153826,
      "sigma_error": 13.277084669693982,
      "success": true,
      "mse": 270.5415009389396,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 10.447775546803335,
      "beta1": -71.67079277000684,
      "sigma_error": 1.185362307750495,
      "success": true,
      "mse": 803.6012584899186,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 18.78061024091666,
      "beta1": -94.28164397997797,
      "sigma_error": 18.35674364396743,
      "success": true,
      "mse": 1553.5896081041608,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 69.8679826661761,
      "beta1": -14.291452538660154,
      "sigma_error": 9.41534102163675,
      "success": true,
      "mse": 1471.2745387819787,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 35.30375763488655,
      "beta1": -18.32655325011347,
      "sigma_error": 10.315438018493051,
      "success": true,
      "mse": 461.5124546288034,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 41.05666153101861,
      "beta1": -96.57518610219051,
      "sigma_error": 18.163031268061,
      "success": true,
      "mse": 374.65109910717644,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 59.021013128329024,
      "beta1": -75.97233087879596,
      "sigma_error": 35.119007267968954,
      "success": true,
      "mse": 1034.3544728801478,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 68.17255705068492,
      "beta1": -65.05347167158314,
      "sigma_error": 10.537835887515168,
      "success": true,
      "mse": 766.7190767488299,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 46.004306381705774,
      "beta1": -29.483998245039697,
      "sigma_error": 18.12380009816983,
      "success": true,
      "mse": 469.51664524353197,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 97.80492077798029,
      "beta1": 7.973498345615629,
      "sigma_error": 20.947802437949388,
      "success": true,
      "mse": 4682.57126933914,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 17.789739768290975,
      "beta1": -93.56590444449746,
      "sigma_error": 18.856241958966976,
      "success": true,
      "mse": 727.1540056760997,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 54.6153100530143,
      "beta1": 18.18319591829898,
      "sigma_error": 32.14583213139648,
      "success": true,
      "mse": 1160.8360700600524,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 63.22966062929169,
      "beta1": 90.3237574598152,
      "sigma_error": 6.344139856937267,
      "success": true,
      "mse": 1139.9718587195928,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 52.77426020143596,
      "beta1": 75.87988628125439,
      "sigma_error": 32.356882769971754,
      "success": true,
      "mse": 1146.3126461687773,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 99.0625486080111,
      "beta1": 84.2114086351937,
      "sigma_error": 0.6800568408873556,
      "success": true,
      "mse": 2628.9307300677933,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 24.369151654333425,
      "beta1": -95.61609268141078,
      "sigma_error": 6.569288814820335,
      "success": true,
      "mse": 216.57340136793437,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 26.567316088259833,
      "beta1": 66.58549040241986,
      "sigma_error": 4.657849289726831,
      "success": true,
      "mse": 183.0861634224983,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 48.890131264935135,
      "beta1": 97.45804233628998,
      "sigma_error": 8.7943743682901,
      "success": true,
      "mse": 1019.2852782057263,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 29.23830682357241,
      "beta1": -10.517162426238738,
      "sigma_error": 22.641853316827778,
      "success": true,
      "mse": 921.9857871084845,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 39.31124547602886,
      "beta1": -70.42107415214484,
      "sigma_error": 6.836280304273287,
      "success": true,
      "mse": 250.80573239630934,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 7.5025218959764866,
      "beta1": 87.43424759799551,
      "sigma_error": 26.11615293037086,
      "success": true,
      "mse": 2110.951494702423,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 59.28246420733914,
      "beta1": 34.36449360947109,
      "sigma_error": 37.5936991732315,
      "success": true,
      "mse": 1584.2427287849491,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 34.191308512719544,
      "beta1": -0.4606689885485879,
      "sigma_error": 0.8471455675146665,
      "success": true,
      "mse": 206.69864642222703,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 32.63761116101875,
      "beta1": -28.60760317855887,
      "sigma_error": 9.15804362622644,
      "success": true,
      "mse": 471.5806430924129,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 56.04928735406146,
      "beta1": 95.5981401030587,
      "sigma_error": 3.2966028984487177,
      "success": true,
      "mse": 179.66170361552136,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 30.238300064535064,
      "beta1": -43.26387710800342,
      "sigma_error": 7.143760061768358,
      "success": true,
      "mse": 289.4986640652946,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 29.544055392862923,
      "beta1": 79.78304598600742,
      "sigma_error": 18.72196204952997,
      "success": true,
      "mse": 910.7693296571398,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 64.86612143011774,
      "beta1": 69.68940671375155,
      "sigma_error": 2.5515595940862155,
      "success": true,
      "mse": 1844.3602176301822,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 69.63844397354949,
      "beta1": 56.78465010662107,
      "sigma_error": 29.45236872708681,
      "success": true,
      "mse": 1280.593071937615,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 61.021406488528896,
      "beta1": 54.65487188636926,
      "sigma_error": 45.20063627642667,
      "success": true,
      "mse": 3580.612605171588,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 3.5102534809409622,
      "beta1": -22.659986591907238,
      "sigma_error": 31.999159800995983,
      "success": true,
      "mse": 1396.1640718534986,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "beta0": 54.131119642331214,
      "beta1": -68.79729807785036,
      "sigma_error": 24.041039947946995,
      "success": true,
      "mse": 627.5957961011513,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    }
  ],
  "recovery_warnings": [
    "Error in iteration 4: Error in parameter fitting: All optimization attempts failed. Errors: []",
    "Error in iteration 7: Error in parameter fitting: All optimization attempts failed. Errors: []",
    "Error in iteration 23: Error in parameter fitting: All optimization attempts failed. Errors: []",
    "Error in iteration 33: Error in parameter fitting: All optimization attempts failed. Errors: []",
    "Error in iteration 63: Error in parameter fitting: All optimization attempts failed. Errors: []",
    "Error in iteration 82: Error in parameter fitting: All optimization attempts failed. Errors: []",
    "Error in iteration 88: Error in parameter fitting: All optimization attempts failed. Errors: []",
    "Error in iteration 99: Error in parameter fitting: All optimization attempts failed. Errors: []"
  ],
  "parameter_recovery": {
    "correlations": {
      "beta0": {
        "r": 0.18077959300940233,
        "p": 0.08461612857874155
      },
      "beta1": {
        "r": 0.18038719156932992,
        "p": 0.08530485861499476
      },
      "sigma_error": {
        "r": -0.09632988884586809,
        "p": 0.36100199593097004
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 502.7086536037833,
  "bic_error": "'ModelOutput' object has no attribute 'metrics'",
  "recovery_summary": "Parameter Recovery:\n- beta0: r = 0.181\n- beta1: r = 0.180\n- sigma_error: r = -0.096",
  "previous_models": [
    "Specification: predicted_proposed_perc = beta0 + beta1 * ((token_opp/(token_self+token_opp)) - 0.5) + noise\nSummary: A linear fairness-based computational model predicting the proposed percentage for the opponent. The model uses the ratio of the opponent's tokens to total tokens (centered around 0.5) to adjust a baseline offer (beta0) by a sensitivity factor (beta1) with additive normally distributed noise (sigma_error). This approach minimizes the number of learnable parameters to enhance parameter recovery while accurately capturing proposer behavior.\nTarget Variable: proposed_perc\nPrediction Type: numerical_variable_estimation\nBIC: 502.7086536037833\n\nParameter Recovery:\n- beta0: r = 0.181\n- beta1: r = 0.180\n- sigma_error: r = -0.096"
  ]
}