run_number,average_bic,bic_control,bic_cocaine,model_specification,model_summary,version,omega_recovery,k_recovery,b0_recovery,b1_recovery,a_recovery,b_recovery,sigma_recovery,b_bias_recovery,b_fair_recovery,lambda_param_recovery,mu_recovery,beta_recovery,p0_recovery,p1_recovery,beta0_recovery,beta1_recovery,sigma_error_recovery,delta_recovery,gamma_recovery,alpha_recovery,betaF_recovery,delta2_recovery,delta3_recovery,intercept_recovery,beta_param_recovery,theta0_recovery,theta1_recovery
19,5.823945001688559,,,proposed_perc = intercept + beta_param * ((token_opp - token_self) / (token_opp + token_self)),A linear fairness model where the predicted offer percentage is computed as a baseline intercept plus a weighted normalized token difference. The normalized difference between opponent and participant tokens adjusts the baseline (assumed to be fair when contributions are equal) to capture inequity aversion.,v11,,,,,,,,,,,,,,,,,,,,,,,,0.999999999999989,0.9999999999999737,,
6,14.059301594364829,,,proposed_perc = (1 - lambda_param)*b0 + lambda_param*100*(token_opp/(token_self+token_opp)),A weighted-average model that predicts the proposed percentage offer to the opponent based on a fairness ratio (token_opp divided by total tokens) and a baseline offer. Two learnable parameters—a baseline offer (b0) and a fairness weight (lambda_param)—yield a convex combination of the baseline and the fairness ideal.,v11,,,0.9668023163784651,,,,,,,0.999979154427409,,,,,,,,,,,,,,,,,
15,16.14392325989773,,,proposed_perc_pred = alpha + beta*(token_opp/(token_self+token_opp)),"A linear regression model predicting the proposer’s percentage offer based on the fairness ratio computed from the token contributions. It uses two learnable parameters: a baseline intercept (alpha) and a fairness sensitivity parameter (beta), with generous finite bounds to enable robust parameter recovery.",v11,,,,,,,,,,,,0.9999999999999231,,,,,,,,0.9999999999999287,,,,,,,
2,18.874417559969107,,,proposed_perc_hat = b0 + b1 * ((token_opp - token_self) / (token_opp + token_self)),A linear fairness model predicting proposed percentage allocations based on the normalized difference between opponent and self token contributions. It incorporates a baseline fairness level and an imbalance sensitivity parameter with generous finite numerical bounds while using only essential task variables.,v11,,,0.9999999999999948,0.9999999999999915,,,,,,,,,,,,,,,,,,,,,,,
4,20.207204636359744,,,proposed_perc_pred = b + a * ( token_opp / (token_self + token_opp) ),A linear model predicting the proposer's offer percentage based on the opponent’s proportional token contribution. The model uses two learnable parameters—an intercept and a slope—to map the fairness ratio (token_opp divided by the sum of token_self and token_opp) to the proposed percentage offer.,v11,,,,,0.9999999999999786,0.9999999999999736,,,,,,,,,,,,,,,,,,,,,
12,29.12293791451187,,,proposed_perc = 50 + delta + 100 * gamma * ((token_opp) / (token_self + token_opp) - 0.5),"A linear fairness model predicting the proposer’s percentage offer. Centered on a baseline of 50%, the model adjusts the offered percentage using an additive bias (delta) and a multiplicative fairness sensitivity (gamma) applied to the centered ratio of the opponent's tokens versus the total tokens.",v11,,,,,,,,,,,,,,,,,,0.9999999999999895,0.9999999999999929,,,,,,,,
14,33.94747138579317,,,proposed_perc = delta + lambda_param*(token_opp/(token_self+token_opp)-0.5)*100,"A simple fairness-based linear model that predicts the percentage proposed to an opponent. The model uses the ratio of opponent tokens to total tokens to compute a deviation from a baseline fairness offer (delta). This deviation is scaled by a sensitivity parameter (lambda_param) and added to the baseline, yielding a prediction for the proposed percentage.",v11,,,,,,,,,,1.0,,,,,,,,1.0,,,,,,,,,
8,35.96121168887481,,,proposed_perc = p0 + p1*((token_opp/(token_self+token_opp))-0.5),A parsimonious linear model predicting the proposer’s percentage offer as a base value (p0) adjusted by a sensitivity (p1) to the deviation of the opponent's contribution proportion (token_opp divided by total tokens) from an equal split.,v11,,,,,,,,,,,,,0.9999999999999963,0.9999999999998047,,,,,,,,,,,,,
7,45.108732810203065,,,proposed_perc = mu + 100*(token_opp + beta*(token_opp - token_self))/(token_self + token_opp),"A parsimonious linear model that predicts the proposer’s percentage offer based on fairness cues from the observed token counts, incorporating a baseline bias (mu) and a sensitivity parameter (beta) to capture deviations driven by token imbalance.",v11,,,,,,,,,,,0.9999999999999996,1.0,,,,,,,,,,,,,,,
13,110.84520195373555,,,proposed_perc = alpha + betaF*(100*token_opp/(token_self+token_opp)) + delta2*I(trial_type=2) + delta3*I(trial_type=3),"A linear model predicting the percentage proposed to the opponent. The model computes a fairness ratio from the opponent’s token count relative to total tokens and scales it by a sensitivity parameter, adds a baseline intercept, and includes trial-type specific adjustments for conditions where contributions are unequal.",v11,,,,,,,,,,,,,,,,,,,,0.9999999999885435,0.9999999999860687,0.9999999999941264,0.999999999989805,,,,
10,150.31398673261077,,,proposed_perc = 50 + beta * ((token_opp - token_self)/(token_opp + token_self)),A minimal linear fairness model where the proposed percentage is given by a fixed fair split (50%) adjusted by a sensitivity parameter multiplied by the normalized token difference.,v11,,,,,,,,,,,,0.9999999999999988,,,,,,,,,,,,,,,
17,271.29758371399663,,,"u = alpha - beta * ((token_self - token_opp)/(token_self + token_opp)) + log(token_opp/token_self)
proposed_perc = 100/(1 + exp(-u))",A logit-based fairness model that predicts the percentage offered to the opponent by combining the fairness norm—computed as the opponent’s token share—and a self-serving bias scaled by the token imbalance. Two learnable parameters (alpha and beta) allow for a baseline bias and sensitivity to imbalance.,v11,,,,,,,,,,,,0.9999999999999419,,,,,,,,0.9999999999999871,,,,,,,
20,439.67446755724404,,,proposed_perc = 100/(1+exp(-(theta0 + theta1*((token_opp-token_self)/(token_self+token_opp)))),A logistic fairness model in which the predicted percentage offered to the opponent is determined by a baseline preference (theta0) and a sensitivity (theta1) to the normalized difference in token contributions (token_opp versus token_self). This model uses a logistic transformation to ensure predictions are bounded between 0 and 100 and employs only two learnable parameters to minimize covariance while maintaining predictive accuracy.,v11,,,,,,,,,,,,,,,,,,,,,,,,,,0.8244818222610695,-0.0919391430859996
5,455.39845094817804,,,proposed_perc = 50 + b_bias + b_fair*(50*((token_opp - token_self)/(token_self + token_opp))) + epsilon,"A parsimonious linear model predicting the percentage offered to the opponent. It computes a centered fairness component from the relative token contributions, then adjusts this component with a bias parameter and scales it by a fairness sensitivity parameter, with additive Gaussian noise capturing unexplained variability.",v11,,,,,,,-0.17456945371387578,0.5672828405588736,0.08566436237635307,,,,,,,,,,,,,,,,,,
9,502.7086536037833,,,predicted_proposed_perc = beta0 + beta1 * ((token_opp/(token_self+token_opp)) - 0.5) + noise,A linear fairness-based computational model predicting the proposed percentage for the opponent. The model uses the ratio of the opponent's tokens to total tokens (centered around 0.5) to adjust a baseline offer (beta0) by a sensitivity factor (beta1) with additive normally distributed noise (sigma_error). This approach minimizes the number of learnable parameters to enhance parameter recovery while accurately capturing proposer behavior.,v11,,,,,,,,,,,,,,,0.18077959300940233,0.18038719156932992,-0.09632988884586809,,,,,,,,,,
16,520.5563634377351,,,"proposed_perc = a + b*((token_opp - token_self)/(token_opp + token_self)) + epsilon,  epsilon ~ Normal(0,sigma)","A linear regression model that predicts the proposed percentage share for the opponent based on a normalized difference between opponent and participant tokens. The intercept (a) sets the baseline (fair split) and the slope (b) adjusts proposals based on fairness considerations, with a normally distributed noise (epsilon) governed by sigma.",v11,,,,,0.4072242270498732,0.09178942900521497,0.09388087418490655,,,,,,,,,,,,,,,,,,,,
18,545.9399634716052,,,"proposed_perc = intercept + gamma*((token_opp/(token_self+token_opp))-0.5) + epsilon; epsilon ~ Normal(0, sigma)",A linear fairness model where the predicted proposed percentage is determined by a baseline intercept plus a sensitivity parameter times a centered fairness index computed as the opponent’s token proportion minus 0.5. Decision noise is incorporated as normally distributed error.,v11,,,,,,,-0.04590698232770611,,,,,,,,,,,,-0.09971464942888292,,,,,0.31361631986694305,,,
3,561.6467280800227,,,"proposed_perc = a + b * log((token_opp + 1)/(token_self + 1)) + epsilon,  where epsilon ~ Normal(0, sigma)",A linear model that predicts the offer percentage based on the logarithm of the relative token contributions. The model includes two learnable parameters (an intercept and a sensitivity parameter) and a noise term. The formulation ensures low parameter covariance by using a parsimonious structure while directly linking the observed tokens to the proposed percentage.,v11,,,,,0.39129382889621683,-0.04945721856433049,-0.0445720565727085,,,,,,,,,,,,,,,,,,,,
1,,,,proposed_perc = 50 + omega * (100 * (token_opp^k / (token_opp^k + token_self^k)) - 50),"A fairness-based model predicting the proposed percentage share to the opponent by combining a normative baseline (50%) with a fairness-adjusted share derived from the relative token contributions. The model uses two learnable parameters: omega, which weights the influence of fairness, and k, which determines the non-linear sensitivity to token contributions.",v11,0.9891904115747482,0.9994413641584879,,,,,,,,,,,,,,,,,,,,,,,,,
11,,,,"proposed_perc = alpha + lambda*(token_opp/(token_self+token_opp)) + beta2*I_trial_type2 + beta3*I_trial_type3 + epsilon
epsilon ~ Normal(0, sigma^2)
I_trial_type2 = 1 if trial_type==2 else 0
I_trial_type3 = 1 if trial_type==3 else 0","A linear model for proposer behavior where the predicted percentage proposed to the opponent is determined by a baseline intercept, a weighted fairness ratio (derived from the relative token contributions), and additive shifts for conditions where the trial type indicates unequal contributions. Stochastic noise is also incorporated to capture variability.",v11,,,,,,,,,,,,,,,,,,,,,,,,,,,
