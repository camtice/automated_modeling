{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641",
  "output_description": "Design a computational model for the described task.\n\nYour model should use the given variables appropriately, but does not necessary need to use all or even most of the variables. \n\nThe model should:\n1. Predict only responder behavior\n2. Be VERY considerate of high covariance between learnable parameters as the model\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Have an appropriate number or learnable parameters, with a slight bias for less learnable paramters.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641\n\nDesired Output Specification: Design a computational model for the described task.\n\nYour model should use the given variables appropriately, but does not necessary need to use all or even most of the variables. \n\nThe model should:\n1. Predict only responder behavior\n2. Be VERY considerate of high covariance between learnable parameters as the model\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Have an appropriate number or learnable parameters, with a slight bias for less learnable paramters.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should directly predict a numerical value (not a binary choice). The model's predictions will be compared to actual values using mean squared error.\n\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "Step-by-step reasoning:\n\u2022 Responders are expected to accept or reject an offer based on how fair the offer is compared to an expected fair share computed from their pretask token earnings relative to the opponent\u2019s tokens.\n\u2022 The expected fair share (in money) is computed as the fraction of tokens the participant found multiplied by the combined earnings.\n\u2022 The psychological mechanism posits that responders compute a fairness difference between the actual offer (split_self) and the expected fair share.\n\u2022 A logistic function is then used to express the probability of accepting the offer; this probability is higher when the offer exceeds the expected value and lower when it does not.\n\u2022 The model predicts the accepted amount continuously by multiplying the offered amount (split_self) by the acceptance probability.\n\u2022 This formulation uses two learnable parameters: an intercept (b0) to shift the fairness threshold and a sensitivity parameter (kappa) that scales the impact of the fairness difference.\n\u2022 Finite and generous bounds are provided for the learnable parameters to reduce issues with high covariance and aid in parameter recovery.\n\u2022 The model directly maps observable variables from the dataset (split_self, combined_earning, token_self, token_opp) to generate a prediction for accepted_amount.\n\n<MODEL>\nA_pred = split_self * (1/(1 + exp(-(b0 + kappa*(split_self - combined_earning*(token_self/(token_self+token_opp))))))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"A_pred\": {\n      \"description\": \"Predicted accepted amount (in \u00a3) for a responder trial\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"combined_earning\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant (in \u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"combined_earning\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total combined earning (in \u00a3) for the trial\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens obtained by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens obtained by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"b0\": {\n      \"description\": \"Intercept parameter reflecting baseline acceptance tendency\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"kappa\": {\n      \"description\": \"Sensitivity parameter scaling the impact of the fairness difference\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 20,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accepted_amount</target_variable>\n\n<SUMMARY>\nA fairness-based logistic decision model for responders that computes the expected fair share from token contributions and combined earnings. The model uses two learnable parameters (b0 and kappa) to modulate the acceptance probability of an offer, and predicts the accepted amount as the offer scaled by this probability.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['b0', 'kappa']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                A_pred = split_self * (1/(1 + exp(-(b0 + kappa*(split_self - combined_earning*(token_self/(token_self+token_opp))))))\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"A_pred\": {\n      \"description\": \"Predicted accepted amount (in \\u00a3) for a responder trial\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"combined_earning\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant (in \\u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"combined_earning\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total combined earning (in \\u00a3) for the trial\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens obtained by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens obtained by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"b0\": {\n      \"description\": \"Intercept parameter reflecting baseline acceptance tendency\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"kappa\": {\n      \"description\": \"Sensitivity parameter scaling the impact of the fairness difference\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 20,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641\n\n                ",
      "output": "\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, b0=0, kappa=1):\n    model_predictions = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n\n        if (token_self + token_opp) == 0:\n            fairness_term = 0  # Avoid division by zero\n        else:\n            fairness_term = combined_earning * (token_self / (token_self + token_opp))\n        \n        exponent = -(b0 + kappa * (split_self - fairness_term))\n        \n        try:\n          acceptance_probability = 1 / (1 + math.exp(exponent))\n        except OverflowError:\n          # Handle potential overflow errors in math.exp\n          if exponent < 0:\n              acceptance_probability = 1.0  # Probability close to 1 if exponent is very negative\n          else:\n              acceptance_probability = 0.0  # Probability close to 0 if exponent is very positive\n\n        A_pred = split_self * acceptance_probability\n        model_predictions.append(A_pred)\n    return model_predictions\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n```",
      "timestamp": 1742298115.0225
    }
  ],
  "learnable_parameters": {
    "b0": {
      "description": "Intercept parameter reflecting baseline acceptance tendency",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "kappa": {
      "description": "Sensitivity parameter scaling the impact of the fairness difference",
      "range": {
        "min": 0,
        "max": 20,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "A_pred = split_self * (1/(1 + exp(-(b0 + kappa*(split_self - combined_earning*(token_self/(token_self+token_opp))))))",
  "variable_descriptions": {
    "A_pred": {
      "description": "Predicted accepted amount (in \u00a3) for a responder trial",
      "range": {
        "min": 0,
        "max": "combined_earning",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "split_self": {
      "description": "Proposed share for the participant (in \u00a3)",
      "range": {
        "min": 0,
        "max": "combined_earning",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "combined_earning": {
      "description": "Total combined earning (in \u00a3) for the trial",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Number of tokens obtained by the participant",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens obtained by the opponent",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "b0": {
      "description": "Intercept parameter reflecting baseline acceptance tendency",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "kappa": {
      "description": "Sensitivity parameter scaling the impact of the fairness difference",
      "range": {
        "min": 0,
        "max": 20,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_summary": "A fairness-based logistic decision model for responders that computes the expected fair share from token contributions and combined earnings. The model uses two learnable parameters (b0 and kappa) to modulate the acceptance probability of an offer, and predicts the accepted amount as the offer scaled by this probability.",
  "target_variable": "accepted_amount",
  "full_reasoning": "Step-by-step reasoning:\n\u2022 Responders are expected to accept or reject an offer based on how fair the offer is compared to an expected fair share computed from their pretask token earnings relative to the opponent\u2019s tokens.\n\u2022 The expected fair share (in money) is computed as the fraction of tokens the participant found multiplied by the combined earnings.\n\u2022 The psychological mechanism posits that responders compute a fairness difference between the actual offer (split_self) and the expected fair share.\n\u2022 A logistic function is then used to express the probability of accepting the offer; this probability is higher when the offer exceeds the expected value and lower when it does not.\n\u2022 The model predicts the accepted amount continuously by multiplying the offered amount (split_self) by the acceptance probability.\n\u2022 This formulation uses two learnable parameters: an intercept (b0) to shift the fairness threshold and a sensitivity parameter (kappa) that scales the impact of the fairness difference.\n\u2022 Finite and generous bounds are provided for the learnable parameters to reduce issues with high covariance and aid in parameter recovery.\n\u2022 The model directly maps observable variables from the dataset (split_self, combined_earning, token_self, token_opp) to generate a prediction for accepted_amount.\n\n<MODEL>\nA_pred = split_self * (1/(1 + exp(-(b0 + kappa*(split_self - combined_earning*(token_self/(token_self+token_opp))))))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"A_pred\": {\n      \"description\": \"Predicted accepted amount (in \u00a3) for a responder trial\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"combined_earning\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant (in \u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"combined_earning\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total combined earning (in \u00a3) for the trial\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens obtained by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens obtained by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"b0\": {\n      \"description\": \"Intercept parameter reflecting baseline acceptance tendency\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"kappa\": {\n      \"description\": \"Sensitivity parameter scaling the impact of the fairness difference\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 20,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accepted_amount</target_variable>\n\n<SUMMARY>\nA fairness-based logistic decision model for responders that computes the expected fair share from token contributions and combined earnings. The model uses two learnable parameters (b0 and kappa) to modulate the acceptance probability of an offer, and predicts the accepted amount as the offer scaled by this probability.\n</SUMMARY>",
  "prediction_type": "numerical_variable_estimation",
  "current_model": "Specification: A_pred = split_self * (1/(1 + exp(-(b0 + kappa*(split_self - combined_earning*(token_self/(token_self+token_opp))))))\nSummary: A fairness-based logistic decision model for responders that computes the expected fair share from token contributions and combined earnings. The model uses two learnable parameters (b0 and kappa) to modulate the acceptance probability of an offer, and predicts the accepted amount as the offer scaled by this probability.\nTarget Variable: accepted_amount\nPrediction Type: numerical_variable_estimation",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, b0=0, kappa=1):\n    model_predictions = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n\n        if (token_self + token_opp) == 0:\n            fairness_term = 0  # Avoid division by zero\n        else:\n            fairness_term = combined_earning * (token_self / (token_self + token_opp))\n        \n        exponent = -(b0 + kappa * (split_self - fairness_term))\n        \n        try:\n          acceptance_probability = 1 / (1 + math.exp(exponent))\n        except OverflowError:\n          # Handle potential overflow errors in math.exp\n          if exponent < 0:\n              acceptance_probability = 1.0  # Probability close to 1 if exponent is very negative\n          else:\n              acceptance_probability = 0.0  # Probability close to 0 if exponent is very positive\n\n        A_pred = split_self * acceptance_probability\n        model_predictions.append(A_pred)\n    return model_predictions",
  "total_retries": 0,
  "fitting_results": [
    {
      "b0": 0.8108396484107534,
      "kappa": 20.0,
      "success": true,
      "mse": 1.6148181831909096,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "b0": 2.332631683461769,
      "kappa": 0.8233692280489424,
      "success": true,
      "mse": 2.2898290821864427,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "b0": 3.427762170728957,
      "kappa": 1.1404842348401827,
      "success": true,
      "mse": 1.665545919315399,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "b0": 2.756738184945978,
      "kappa": 0.9578059210058969,
      "success": true,
      "mse": 2.105614297753465,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "b0": 4.88856794914406,
      "kappa": 2.2778850620157725,
      "success": true,
      "mse": 0.7847146552446302,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "b0": 10.0,
      "kappa": 2.4165051314509127,
      "success": true,
      "mse": 1.3584288965334408,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "b0": 10.0,
      "kappa": 0.021959070015681093,
      "success": true,
      "mse": 3.491302311343319e-08,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "b0": 8.536430235117704,
      "kappa": 2.2284363024508367,
      "success": true,
      "mse": 1.0919442523384477,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "b0": 10.0,
      "kappa": 2.440500943814444e-16,
      "success": true,
      "mse": 3.2084095719746664e-08,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "b0": 4.000054276341068,
      "kappa": 3.041573078001464,
      "success": true,
      "mse": 2.326913044102827,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "b0": 7.658819506512162,
      "kappa": 2.65025797646371,
      "success": true,
      "mse": 0.9229893472505856,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "b0": 0.3319410678030701,
      "kappa": 1.0897193254023978,
      "success": true,
      "mse": 1.9362026266762413,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "b0": 10.0,
      "kappa": 4.885975678969149,
      "success": true,
      "mse": 0.49116254597668285,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "b0": 10.0,
      "kappa": 0.0,
      "success": true,
      "mse": 3.2084095719746664e-08,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "b0": 10.0,
      "kappa": 1.648090681796212e-16,
      "success": true,
      "mse": 3.208409571974668e-08,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "b0": 10.0,
      "kappa": 0.0,
      "success": true,
      "mse": 3.208409571974668e-08,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "b0": 10.0,
      "kappa": 0.0,
      "success": true,
      "mse": 3.208409571974667e-08,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "b0": 10.0,
      "kappa": 1.4231347838087278,
      "success": true,
      "mse": 0.24161186038851967,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "b0": 7.626913707506531,
      "kappa": 1.377161122149442,
      "success": true,
      "mse": 0.37536241307597185,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "b0": 10.0,
      "kappa": 2.3468704677018377e-16,
      "success": true,
      "mse": 3.208409571974668e-08,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "b0": 4.6074501016121845,
      "kappa": 1.7499830769991838,
      "success": true,
      "mse": 1.4411061723597822,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "b0": 6.785252321896135,
      "kappa": 1.2124218176309132,
      "success": true,
      "mse": 0.5309786611146807,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "b0": 1.1471574829129965,
      "kappa": 0.402895534131973,
      "success": true,
      "mse": 3.280107529881152,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "b0": 3.060527849029397,
      "kappa": 0.9703999314248206,
      "success": true,
      "mse": 2.098050034140158,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "b0": 5.015702623037382,
      "kappa": 2.2960823098114633,
      "success": true,
      "mse": 0.8458596126200459,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "b0": 2.6012699737996483,
      "kappa": 0.7224357968380204,
      "success": true,
      "mse": 2.118016855653155,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "b0": 4.114817179005862,
      "kappa": 1.1125450262358285,
      "success": true,
      "mse": 1.6773515967264694,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "b0": 10.0,
      "kappa": 10.433728007763566,
      "success": true,
      "mse": 0.692530238094843,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "b0": 10.0,
      "kappa": 1.7378926429201813,
      "success": true,
      "mse": 0.4323652303389422,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "b0": 3.129918695913799,
      "kappa": 0.6203342011772266,
      "success": true,
      "mse": 1.552303231957873,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "b0": 10.0,
      "kappa": 0.0,
      "success": true,
      "mse": 3.208409571974667e-08,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "b0": 0.8108313366198732,
      "kappa": 20.0,
      "success": true,
      "mse": 1.614818183200885,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "b0": 0.9103508251871503,
      "kappa": 0.24377026838386834,
      "success": true,
      "mse": 3.5318115112641335,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "b0": 1.3094600733009296,
      "kappa": 0.5243178118814746,
      "success": true,
      "mse": 3.00842950183309,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "b0": 10.0,
      "kappa": 0.43663041444964157,
      "success": true,
      "mse": 5.853713306073197e-07,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "b0": 3.505039481774024,
      "kappa": 0.5529493523953625,
      "success": true,
      "mse": 1.443063844669853,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "b0": 7.977665193788125,
      "kappa": 1.698069203021767,
      "success": true,
      "mse": 0.9679324373155319,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "b0": 10.0,
      "kappa": 3.1958767257080853,
      "success": true,
      "mse": 1.591728419302425,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "b0": 3.2306588507578997,
      "kappa": 0.921831444914663,
      "success": true,
      "mse": 1.9111660488445286,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "b0": 4.130904940994254,
      "kappa": 0.5267259803201578,
      "success": true,
      "mse": 0.6173713147899458,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "b0": 3.371356927817231,
      "kappa": 1.1124597299261187,
      "success": true,
      "mse": 1.7915147181338793,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "b0": 9.242061836874548,
      "kappa": 20.0,
      "success": true,
      "mse": 1.2567836763426559,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "b0": 3.4534752225262144,
      "kappa": 0.29563868365584756,
      "success": true,
      "mse": 0.7427563713326655,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "b0": 2.363760290898038,
      "kappa": 0.551460680061659,
      "success": true,
      "mse": 2.350060531631602,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "b0": 10.0,
      "kappa": 2.3972335346821847,
      "success": true,
      "mse": 1.6983618061656847,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "b0": 3.12570133299682,
      "kappa": 0.44975583421040694,
      "success": true,
      "mse": 1.4320807726863412,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "b0": 2.880742829634587,
      "kappa": 0.955686724908944,
      "success": true,
      "mse": 1.941547095541332,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "b0": 10.0,
      "kappa": 10.437090863371814,
      "success": true,
      "mse": 3.760222575523052,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "b0": 3.31753973595264,
      "kappa": 1.817853820112478,
      "success": true,
      "mse": 1.0109282027064865,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "b0": 1.6254715644528346,
      "kappa": 0.42035022408983214,
      "success": true,
      "mse": 3.0336509109985537,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "b0": 9.415042970587422,
      "kappa": 1.9470158032687732,
      "success": true,
      "mse": 1.7164372081207655,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "b0": 0.20335220711773375,
      "kappa": 1.840948549718528,
      "success": true,
      "mse": 2.4868321507269435,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "b0": 1.585440526669685,
      "kappa": 0.2757349680986663,
      "success": true,
      "mse": 2.884528144468809,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "b0": 1.4984409474814984,
      "kappa": 0.1394633152068931,
      "success": true,
      "mse": 2.6929613883214323,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "b0": 1.3799202373736612,
      "kappa": 0.9845560282540706,
      "success": true,
      "mse": 2.4454818932243136,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "b0": 10.0,
      "kappa": 5.566592580481363,
      "success": true,
      "mse": 0.6000227307222354,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "b0": 1.8251346095458298,
      "kappa": 1.291351033915612,
      "success": true,
      "mse": 1.6080398369682023,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "b0": 2.2342637413132014,
      "kappa": 0.0,
      "success": true,
      "mse": 1.3600071011346813,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "b0": 0.8124601883644387,
      "kappa": 19.610054708640455,
      "success": true,
      "mse": 2.254821325023178,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "b0": 3.013205879079289,
      "kappa": 0.33339845921916916,
      "success": true,
      "mse": 1.1567956902397205,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "b0": 3.1056708100698294,
      "kappa": 0.8960252791689345,
      "success": true,
      "mse": 2.0532519869873824,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "b0": 9.024686708586115,
      "kappa": 3.9041727969874422,
      "success": true,
      "mse": 1.038051375020154,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "b0": 0.8108642719787021,
      "kappa": 20.0,
      "success": true,
      "mse": 1.6148181832809887,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "b0": 1.2697298941111979,
      "kappa": 0.3073779958202866,
      "success": true,
      "mse": 3.345673434052899,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "b0": 1.3458765664154235,
      "kappa": 1.3317642862362256,
      "success": true,
      "mse": 2.179793325611807,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "b0": 3.3097388368515626,
      "kappa": 0.9006143187064236,
      "success": true,
      "mse": 1.9203496838705643,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "b0": 10.0,
      "kappa": 1.7351452646246808,
      "success": true,
      "mse": 0.342027580668305,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "b0": 9.99997161033214,
      "kappa": 1.4509900339718769,
      "success": true,
      "mse": 1.1626331247296908,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "b0": 2.2335196111929294,
      "kappa": 0.3382166714188175,
      "success": true,
      "mse": 2.1455115377930287,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "b0": 2.867128324385681,
      "kappa": 0.2325954327513592,
      "success": true,
      "mse": 1.118284191245271,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "b0": 3.5624689347609513,
      "kappa": 20.0,
      "success": true,
      "mse": 0.005088303760074191,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "b0": 0.8108431960024262,
      "kappa": 20.0,
      "success": true,
      "mse": 2.614818183084144,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "b0": 3.3836716417800674,
      "kappa": 0.9731574667218785,
      "success": true,
      "mse": 1.9252305702072836,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "b0": 3.597653556512416,
      "kappa": 0.4998971927584123,
      "success": true,
      "mse": 1.155372230274942,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "b0": 10.0,
      "kappa": 5.551717781251965,
      "success": true,
      "mse": 3.7557957876584913,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "b0": 8.80882599801908,
      "kappa": 2.2550494705302255,
      "success": true,
      "mse": 1.1242356148047883,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "b0": 5.491285794725623,
      "kappa": 0.8163168008770176,
      "success": true,
      "mse": 0.39551366497166646,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "b0": 0.8108465922282716,
      "kappa": 20.0,
      "success": true,
      "mse": 1.6548181831983928,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "b0": 2.164647211935728,
      "kappa": 0.4791663285566147,
      "success": true,
      "mse": 2.421590155795075,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "b0": 0.8109317418973181,
      "kappa": 20.0,
      "success": true,
      "mse": 1.6148181844443457,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "b0": 1.3265096576420445,
      "kappa": 0.4015215066234098,
      "success": true,
      "mse": 3.1638615267205314,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "b0": 2.995878699708051,
      "kappa": 0.2485370300397443,
      "success": true,
      "mse": 1.057346046868461,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "b0": -0.1144709757622107,
      "kappa": 0.6348098527321571,
      "success": true,
      "mse": 2.3044728273377157,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "b0": 6.264774870316174,
      "kappa": 1.546816786997641,
      "success": true,
      "mse": 1.707615051014977,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "b0": 1.2347007548160993,
      "kappa": 0.353649034208453,
      "success": true,
      "mse": 3.2166044253620525,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "b0": 0.8108488313660225,
      "kappa": 20.0,
      "success": true,
      "mse": 1.254820149506192,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "b0": 2.9746205063211915,
      "kappa": 0.6574301937709254,
      "success": true,
      "mse": 1.8919626849099604,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "b0": 10.0,
      "kappa": 10.253837096684656,
      "success": true,
      "mse": 2.5018270184306686,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "b0": 10.0,
      "kappa": 1.3976990136829284,
      "success": true,
      "mse": 0.21893603413712592,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "b0": 2.6390823963518235,
      "kappa": 0.540316918246041,
      "success": true,
      "mse": 2.20846425132879,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "b0": 4.610286016403889,
      "kappa": 1.1545280905415933,
      "success": true,
      "mse": 1.8256870039620585,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "n_trials": 51
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "b0": {
        "r": 0.9999955980654686,
        "p": 1.563793309675408e-249
      },
      "kappa": {
        "r": 0.995037021187876,
        "p": 4.969493443590455e-100
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 81.76023153814,
  "bic_error": "'ModelOutput' object has no attribute 'metrics'",
  "recovery_summary": "Parameter Recovery:\n- b0: r = 1.000\n- kappa: r = 0.995",
  "previous_models": [
    "Specification: A_pred = split_self * (1/(1 + exp(-(b0 + kappa*(split_self - combined_earning*(token_self/(token_self+token_opp))))))\nSummary: A fairness-based logistic decision model for responders that computes the expected fair share from token contributions and combined earnings. The model uses two learnable parameters (b0 and kappa) to modulate the acceptance probability of an offer, and predicts the accepted amount as the offer scaled by this probability.\nTarget Variable: accepted_amount\nPrediction Type: numerical_variable_estimation\nBIC: 81.76023153814\n\nParameter Recovery:\n- b0: r = 1.000\n- kappa: r = 0.995"
  ]
}