{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task.\n\nYour model should use the given variables appropriately, but does not necessary need to use all or even most of the variables. \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. Be VERY considerate of high covariance between learnable parameters as the model\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Have an appropriate number or learnable parameters, with a slight bias for less learnable paramters.\n5. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task.\n\nYour model should use the given variables appropriately, but does not necessary need to use all or even most of the variables. \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. Be VERY considerate of high covariance between learnable parameters as the model\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Have an appropriate number or learnable parameters, with a slight bias for less learnable paramters.\n5. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function, and then used to predict binary decisions.\n\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "Step-by-step reasoning:\n\n1. Key psychological mechanisms:\n\u2003\u2022 Responders compare the proposed share (split_self) with an expected \u201cfair\u201d share derived from their contribution (token_self) relative to the opponent\u2019s (token_opp).\n\u2003\u2022 The fairness norm is formed by computing the expected proportion of the combined earnings based on token contributions.\n\u2003\u2022 Deviations of the proposal from this fairness norm affect the utility valuation of accepting the offer.\n\u2003\u2022 A baseline bias (intercept) and a sensitivity to fairness deviations modulate the decision.\n\u2003\u2003\n2. How these mechanisms interact:\n\u2003\u2022 The responder calculates a fairness norm as (token_self/(token_self + token_opp))\u00d7combined_earning.\n\u2003\u2022 The fairness discrepancy is determined as the difference between the actual allocation (split_self) and the computed fairness norm.\n\u2003\u2022 A fairness sensitivity parameter scales this discrepancy, and the intercept adjusts the overall tendency to accept or reject.\n\u2003\u2022 The resulting utility is then transformed via a logistic function to yield a probability of accepting.\n\u2003\u2003\n3. Mathematical form to capture the interactions:\n\u2003\u2022 Define the fairness norm F = kappa \u00d7 (token_self/(token_self+token_opp))\u00d7combined_earning, where kappa is a learnable fairness multiplier.\n\u2003\u2022 Define the discrepancy \u03b4 = split_self \u2212 F.\n\u2003\u2022 Compute utility as U = a + beta\u00d7\u03b4.\n\u2003\u2022 Pass U through a logistic function to yield the acceptance probability.\n\u2003\u2003\n4. Required parameters:\n\u2003\u2022 a: baseline intercept (learnable, bounded).\n\u2003\u2022 beta: sensitivity to fairness discrepancy (learnable, bounded).\n\u2003\u2022 kappa: fairness multiplier (learnable, bounded).\n\u2003\u2003\n5. Mapping to observable behavior:\n\u2003\u2022 split_self, token_self, token_opp, and combined_earning come directly from the dataset.\n\u2003\u2022 The model predicts the probability of \u201caccept\u201d using the computed utility (U) with a logistic transformation.\n\u2003\u2003\nBelow is the formal mathematical model, variable descriptions, and target specification.\n\n<MODEL>\nU = a + beta * (split_self - kappa * (token_self/(token_self+token_opp)) * combined_earning)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the proposal computed from baseline and fairness discrepancy\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"calculated\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a\": {\n      \"description\": \"Baseline intercept representing inherent acceptance tendency\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta\": {\n      \"description\": \"Fairness sensitivity parameter governing how much the discrepancy affects utility\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"kappa\": {\n      \"description\": \"Fairness multiplier scaling the expected fair share derived from token contributions\",\n      \"range\": {\n        \"min\": 0.1,\n        \"max\": 2.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0.1,\n          \"high\": 2.0\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant (in \u00a3) offered in the trial\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"combined_earning\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant indicating their contribution\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"data\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent indicating their contribution\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"data\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total monetary amount available to be divided in the trial\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"data\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA fairness-based utility model where the probability of accepting a proposal is determined by comparing the offered share (split_self) with an expected fair share determined by pretask token contributions. The utility is computed as a weighted unfairness (difference between offered and fair shares) plus a baseline intercept, and acceptance probability is given by a logistic function applied to this utility.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['a', 'beta', 'kappa']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                U = a + beta * (split_self - kappa * (token_self/(token_self+token_opp)) * combined_earning)\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the proposal computed from baseline and fairness discrepancy\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"calculated\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a\": {\n      \"description\": \"Baseline intercept representing inherent acceptance tendency\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta\": {\n      \"description\": \"Fairness sensitivity parameter governing how much the discrepancy affects utility\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"kappa\": {\n      \"description\": \"Fairness multiplier scaling the expected fair share derived from token contributions\",\n      \"range\": {\n        \"min\": 0.1,\n        \"max\": 2.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0.1,\n          \"high\": 2.0\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant (in \\u00a3) offered in the trial\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"combined_earning\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant indicating their contribution\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"data\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent indicating their contribution\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"data\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total monetary amount available to be divided in the trial\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"data\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, a=0, beta=0, kappa=1):\n    model_predictions = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0)\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n\n        # Compute the fairness norm\n        if (token_self + token_opp) == 0:\n          fairness_norm = 0\n        else:\n          fairness_norm = kappa * (token_self / (token_self + token_opp)) * combined_earning\n\n        # Compute the discrepancy\n        discrepancy = split_self - fairness_norm\n\n        # Compute utility\n        U = a + beta * discrepancy\n\n        model_predictions.append(U)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n",
      "timestamp": 1742917550.064848
    }
  ],
  "learnable_parameters": {
    "a": {
      "description": "Baseline intercept representing inherent acceptance tendency",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -10,
          "high": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "beta": {
      "description": "Fairness sensitivity parameter governing how much the discrepancy affects utility",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -10,
          "high": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "kappa": {
      "description": "Fairness multiplier scaling the expected fair share derived from token contributions",
      "range": {
        "min": 0.1,
        "max": 2.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0.1,
          "high": 2.0
        }
      },
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "U = a + beta * (split_self - kappa * (token_self/(token_self+token_opp)) * combined_earning)",
  "variable_descriptions": {
    "U": {
      "description": "Utility of accepting the proposal computed from baseline and fairness discrepancy",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": {
        "type": "calculated",
        "parameters": {}
      },
      "learnable": false,
      "source": "calculated"
    },
    "a": {
      "description": "Baseline intercept representing inherent acceptance tendency",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -10,
          "high": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "beta": {
      "description": "Fairness sensitivity parameter governing how much the discrepancy affects utility",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -10,
          "high": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "kappa": {
      "description": "Fairness multiplier scaling the expected fair share derived from token contributions",
      "range": {
        "min": 0.1,
        "max": 2.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0.1,
          "high": 2.0
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "split_self": {
      "description": "Proposed share for the participant (in \u00a3) offered in the trial",
      "range": {
        "min": 0,
        "max": "combined_earning",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "data",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Number of tokens found by the participant indicating their contribution",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": {
        "type": "data",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent indicating their contribution",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": {
        "type": "data",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "combined_earning": {
      "description": "Total monetary amount available to be divided in the trial",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": {
        "type": "data",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    }
  },
  "model_summary": "A fairness-based utility model where the probability of accepting a proposal is determined by comparing the offered share (split_self) with an expected fair share determined by pretask token contributions. The utility is computed as a weighted unfairness (difference between offered and fair shares) plus a baseline intercept, and acceptance probability is given by a logistic function applied to this utility.",
  "target_variable": "accept",
  "full_reasoning": "Step-by-step reasoning:\n\n1. Key psychological mechanisms:\n\u2003\u2022 Responders compare the proposed share (split_self) with an expected \u201cfair\u201d share derived from their contribution (token_self) relative to the opponent\u2019s (token_opp).\n\u2003\u2022 The fairness norm is formed by computing the expected proportion of the combined earnings based on token contributions.\n\u2003\u2022 Deviations of the proposal from this fairness norm affect the utility valuation of accepting the offer.\n\u2003\u2022 A baseline bias (intercept) and a sensitivity to fairness deviations modulate the decision.\n\u2003\u2003\n2. How these mechanisms interact:\n\u2003\u2022 The responder calculates a fairness norm as (token_self/(token_self + token_opp))\u00d7combined_earning.\n\u2003\u2022 The fairness discrepancy is determined as the difference between the actual allocation (split_self) and the computed fairness norm.\n\u2003\u2022 A fairness sensitivity parameter scales this discrepancy, and the intercept adjusts the overall tendency to accept or reject.\n\u2003\u2022 The resulting utility is then transformed via a logistic function to yield a probability of accepting.\n\u2003\u2003\n3. Mathematical form to capture the interactions:\n\u2003\u2022 Define the fairness norm F = kappa \u00d7 (token_self/(token_self+token_opp))\u00d7combined_earning, where kappa is a learnable fairness multiplier.\n\u2003\u2022 Define the discrepancy \u03b4 = split_self \u2212 F.\n\u2003\u2022 Compute utility as U = a + beta\u00d7\u03b4.\n\u2003\u2022 Pass U through a logistic function to yield the acceptance probability.\n\u2003\u2003\n4. Required parameters:\n\u2003\u2022 a: baseline intercept (learnable, bounded).\n\u2003\u2022 beta: sensitivity to fairness discrepancy (learnable, bounded).\n\u2003\u2022 kappa: fairness multiplier (learnable, bounded).\n\u2003\u2003\n5. Mapping to observable behavior:\n\u2003\u2022 split_self, token_self, token_opp, and combined_earning come directly from the dataset.\n\u2003\u2022 The model predicts the probability of \u201caccept\u201d using the computed utility (U) with a logistic transformation.\n\u2003\u2003\nBelow is the formal mathematical model, variable descriptions, and target specification.\n\n<MODEL>\nU = a + beta * (split_self - kappa * (token_self/(token_self+token_opp)) * combined_earning)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the proposal computed from baseline and fairness discrepancy\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"calculated\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a\": {\n      \"description\": \"Baseline intercept representing inherent acceptance tendency\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta\": {\n      \"description\": \"Fairness sensitivity parameter governing how much the discrepancy affects utility\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"kappa\": {\n      \"description\": \"Fairness multiplier scaling the expected fair share derived from token contributions\",\n      \"range\": {\n        \"min\": 0.1,\n        \"max\": 2.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0.1,\n          \"high\": 2.0\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant (in \u00a3) offered in the trial\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"combined_earning\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant indicating their contribution\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"data\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent indicating their contribution\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"data\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total monetary amount available to be divided in the trial\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"data\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA fairness-based utility model where the probability of accepting a proposal is determined by comparing the offered share (split_self) with an expected fair share determined by pretask token contributions. The utility is computed as a weighted unfairness (difference between offered and fair shares) plus a baseline intercept, and acceptance probability is given by a logistic function applied to this utility.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: U = a + beta * (split_self - kappa * (token_self/(token_self+token_opp)) * combined_earning)\nSummary: A fairness-based utility model where the probability of accepting a proposal is determined by comparing the offered share (split_self) with an expected fair share determined by pretask token contributions. The utility is computed as a weighted unfairness (difference between offered and fair shares) plus a baseline intercept, and acceptance probability is given by a logistic function applied to this utility.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, a=0, beta=0, kappa=1):\n    model_predictions = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0)\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n\n        # Compute the fairness norm\n        if (token_self + token_opp) == 0:\n          fairness_norm = 0\n        else:\n          fairness_norm = kappa * (token_self / (token_self + token_opp)) * combined_earning\n\n        # Compute the discrepancy\n        discrepancy = split_self - fairness_norm\n\n        # Compute utility\n        U = a + beta * discrepancy\n\n        model_predictions.append(U)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.7951770451770452,
  "fitting_results": [
    {
      "a": -7.479886487715805,
      "beta": 0.6864400879600798,
      "kappa": 0.6939275975510265,
      "success": true,
      "log_likelihood": -69.07755278652132,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "a": 0.022697108740472764,
      "beta": 0.14223673513149848,
      "kappa": 0.6251460542006076,
      "success": true,
      "log_likelihood": -16.169406187020595,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "a": 0.08644382858239488,
      "beta": 0.2955094561293614,
      "kappa": 0.632088876223524,
      "success": true,
      "log_likelihood": -9.884972875965639,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "a": -10.0,
      "beta": -10.0,
      "kappa": 0.1,
      "success": true,
      "log_likelihood": -345.38776394700693,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "a": 0.2575384669809721,
      "beta": 0.2728148459058348,
      "kappa": 0.80775580906014,
      "success": true,
      "log_likelihood": -8.635340437325228,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "a": 9.9999878825669,
      "beta": 9.958023836319086,
      "kappa": 0.6673690108440196,
      "success": true,
      "log_likelihood": -70.463847149299,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "a": 10.0,
      "beta": 10.0,
      "kappa": 0.1,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "a": 8.183678294032706,
      "beta": -0.02664272425936258,
      "kappa": 1.3780114011924893,
      "success": true,
      "log_likelihood": -276.31021115688566,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "a": 10.0,
      "beta": 6.283858044695109,
      "kappa": 0.1,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "a": 0.0049753050961787795,
      "beta": 0.23456678296203923,
      "kappa": 0.6847276414503038,
      "success": true,
      "log_likelihood": -11.098420452686417,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "a": -0.886472498971894,
      "beta": 10.0,
      "kappa": 0.5988447732922152,
      "success": true,
      "log_likelihood": -0.002163621905887948,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "a": -0.49222699473409104,
      "beta": 0.18938498488411906,
      "kappa": 0.5126057840258833,
      "success": true,
      "log_likelihood": -6.434409923327814,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "a": 0.15164536730413936,
      "beta": 10.0,
      "kappa": 0.6824032703838092,
      "success": true,
      "log_likelihood": -23.02586555205706,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "a": 10.0,
      "beta": 10.0,
      "kappa": 0.1,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "a": 9.20207565760823,
      "beta": -9.154039375119323,
      "kappa": 1.738787295242351,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "a": 10.0,
      "beta": 1.3151458733870227,
      "kappa": 0.1,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "a": 7.235130137563917,
      "beta": -7.68519468743489,
      "kappa": 1.5536921769614827,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "a": 10.0,
      "beta": -10.0,
      "kappa": 2.0,
      "success": true,
      "log_likelihood": -115.12925464660226,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "a": -0.5696279953552829,
      "beta": -9.571569330839544,
      "kappa": 2.0,
      "success": true,
      "log_likelihood": -92.10340371656177,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "a": 10.0,
      "beta": -8.124030758242249,
      "kappa": 2.0,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "a": 2.2023521093944796,
      "beta": -1.359371587319308,
      "kappa": 1.9347284713261437,
      "success": true,
      "log_likelihood": -368.4136148770475,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "a": -3.8375804394551256,
      "beta": 9.548100022272225,
      "kappa": 0.20156727043681216,
      "success": true,
      "log_likelihood": -46.05172607559896,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "a": -0.3303590315984178,
      "beta": 0.14870411547118959,
      "kappa": 0.3258745679263158,
      "success": true,
      "log_likelihood": -15.222858227786993,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "a": 7.539499756115906,
      "beta": 0.0687169937568889,
      "kappa": 0.7617942978136998,
      "success": true,
      "log_likelihood": -391.43946580708797,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "a": 0.4508440421717961,
      "beta": 0.16991238967885308,
      "kappa": 1.0492867715531329,
      "success": true,
      "log_likelihood": -10.366336422695984,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "a": -9.800458718824181,
      "beta": 0.18420545885759587,
      "kappa": 0.48831380009708514,
      "success": true,
      "log_likelihood": -483.5428695272499,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "a": 5.029253222567299,
      "beta": 1.5388565173127338,
      "kappa": 0.1,
      "success": true,
      "log_likelihood": -368.4136148770475,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "a": 0.04139112036466165,
      "beta": 0.6549593469867615,
      "kappa": 0.7887626686533603,
      "success": true,
      "log_likelihood": -3.920029700892869,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "a": 10.0,
      "beta": -10.0,
      "kappa": 2.0,
      "success": true,
      "log_likelihood": -92.10340371656179,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "a": -0.34642418161322885,
      "beta": 7.486490227189253,
      "kappa": 0.3126357688275294,
      "success": true,
      "log_likelihood": -138.15524099582686,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "a": 3.0762552806223518,
      "beta": -10.0,
      "kappa": 2.0,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "a": -0.4702419177716023,
      "beta": 0.18282180513448273,
      "kappa": 0.5835196388778566,
      "success": true,
      "log_likelihood": -5.290766357181286,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "a": -6.263050407253018,
      "beta": 8.039982278059188,
      "kappa": 0.5705458527967359,
      "success": true,
      "log_likelihood": -186.69509011842757,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "a": 0.8876745176218303,
      "beta": 8.22204184601463,
      "kappa": 0.7440884936667268,
      "success": true,
      "log_likelihood": -138.15514852522114,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "a": -0.9103764931897231,
      "beta": 8.70326876868064,
      "kappa": 0.11682638792296891,
      "success": true,
      "log_likelihood": 3.5998992673901077e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "a": -0.7372017796996779,
      "beta": -8.072275158634438,
      "kappa": 1.8580256872344043,
      "success": true,
      "log_likelihood": -299.3360620869261,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "a": 10.0,
      "beta": -10.0,
      "kappa": 2.0,
      "success": true,
      "log_likelihood": -253.2843602268452,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "a": 0.13340256683599222,
      "beta": 5.034866952437039,
      "kappa": 0.6050684231439487,
      "success": true,
      "log_likelihood": -94.68797730929356,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "a": 0.24557810531656546,
      "beta": 0.10088623541267248,
      "kappa": 0.8314323421424014,
      "success": true,
      "log_likelihood": -16.119960101903786,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "a": -8.030759294497638,
      "beta": 2.5660034563273513,
      "kappa": 1.1028678696195708,
      "success": true,
      "log_likelihood": -759.8530806877328,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.08333333333333333,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "a": 1.7794137478312133,
      "beta": 7.1589477228365395,
      "kappa": 0.6828590412158427,
      "success": true,
      "log_likelihood": -139.5428953270447,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "a": 4.996813311161883,
      "beta": 9.605432023667378,
      "kappa": 1.0099868939269903,
      "success": true,
      "log_likelihood": -46.05172827494255,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "a": 10.0,
      "beta": 10.0,
      "kappa": 0.1,
      "success": true,
      "log_likelihood": -23.02585092644049,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "a": -0.09742914233624823,
      "beta": 0.15633708683076544,
      "kappa": 0.4478464189141205,
      "success": true,
      "log_likelihood": -15.798544497763055,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "a": 7.997820471391435,
      "beta": 3.284327104415354,
      "kappa": 0.1850346741767278,
      "success": true,
      "log_likelihood": -322.3619130169666,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "a": 9.447481312425515,
      "beta": -2.7315868432941524,
      "kappa": 0.9505469082050362,
      "success": true,
      "log_likelihood": -230.2585092968047,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "a": 0.028924084043281034,
      "beta": 0.16117390976082638,
      "kappa": 0.6074572870442989,
      "success": true,
      "log_likelihood": -15.149795818762444,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "a": -0.20288387002138777,
      "beta": 0.11923301223873703,
      "kappa": 0.4010765883157705,
      "success": true,
      "log_likelihood": -17.49471273451655,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "a": -2.4040879713897656,
      "beta": 8.160370684972676,
      "kappa": 1.5889281843220706,
      "success": true,
      "log_likelihood": -345.38776394687994,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "a": 8.977174314267323,
      "beta": -7.77885672991677,
      "kappa": 1.941878064829777,
      "success": true,
      "log_likelihood": -391.43946580708797,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "a": -10.0,
      "beta": 9.998533155095792,
      "kappa": 0.266616959969326,
      "success": true,
      "log_likelihood": -185.5931782824694,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "a": -4.403819008408136,
      "beta": 2.5835622233380073,
      "kappa": 0.7712417037677662,
      "success": true,
      "log_likelihood": -69.0778711716332,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "a": -0.21105406405613264,
      "beta": 0.12556618464019367,
      "kappa": 0.28328570584973894,
      "success": true,
      "log_likelihood": -17.587055977913522,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "a": -0.1972238815339451,
      "beta": 0.08321297207521282,
      "kappa": 0.1,
      "success": true,
      "log_likelihood": -19.893975208186014,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "a": 0.0893893260737655,
      "beta": 0.0773621891062478,
      "kappa": 0.931609818456691,
      "success": true,
      "log_likelihood": -18.584529263216762,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "a": -10.0,
      "beta": -1.6658521206768664,
      "kappa": 0.1,
      "success": true,
      "log_likelihood": -276.31021115688554,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "a": -5.01782244002134,
      "beta": -2.2697985130825167,
      "kappa": 0.24218465051017873,
      "success": true,
      "log_likelihood": -230.25850929680462,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "a": 10.0,
      "beta": 0.045432357484302924,
      "kappa": 0.1,
      "success": true,
      "log_likelihood": -92.1034037165618,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "a": -9.30641472733073,
      "beta": -2.664945060048945,
      "kappa": 0.24084211531975075,
      "success": true,
      "log_likelihood": -92.10340371656181,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "a": 5.2103553138705525,
      "beta": -1.5340945803185722,
      "kappa": 0.8806523723513593,
      "success": true,
      "log_likelihood": -161.18095650673962,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "a": 0.05585950160858517,
      "beta": 0.08332902904682327,
      "kappa": 0.5908265791073214,
      "success": true,
      "log_likelihood": -19.564280370053027,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "a": 0.17853440691538236,
      "beta": 0.15755891332477964,
      "kappa": 0.7917297755720172,
      "success": true,
      "log_likelihood": -13.858097626407762,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "a": 0.9034842162637602,
      "beta": 5.290305234437913,
      "kappa": 1.492906579844924,
      "success": true,
      "log_likelihood": -46.051740518524426,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "a": 3.8685890360572044,
      "beta": 7.351185707053495,
      "kappa": 0.6121434358792645,
      "success": true,
      "log_likelihood": -184.20714844593232,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "a": -8.316099146692853,
      "beta": 5.530549599295155,
      "kappa": 0.6243881221672388,
      "success": true,
      "log_likelihood": -70.46385152164542,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "a": -0.1255122286737664,
      "beta": 0.19226466761661545,
      "kappa": 0.4460058258008986,
      "success": true,
      "log_likelihood": -13.980136936154972,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "a": 0.17858631179092654,
      "beta": -4.835514186147352,
      "kappa": 1.8631849423522922,
      "success": true,
      "log_likelihood": -69.07755278652131,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "a": 4.962363906616771,
      "beta": 0.44351489118687465,
      "kappa": 0.8076301359733314,
      "success": true,
      "log_likelihood": -114.81942778768482,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "a": -4.528362238915585,
      "beta": 2.909430347516235,
      "kappa": 0.24342563657119864,
      "success": true,
      "log_likelihood": -68.43793180753242,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "a": 6.942377260569372,
      "beta": 4.711832321768105,
      "kappa": 0.2579392435719109,
      "success": true,
      "log_likelihood": -69.07755278652141,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "a": -7.233246583566468,
      "beta": 9.664012906820762,
      "kappa": 0.8208021118481147,
      "success": true,
      "log_likelihood": 3.5999809798047114e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "a": -10.0,
      "beta": -10.0,
      "kappa": 0.1,
      "success": true,
      "log_likelihood": -115.12925464660226,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "a": 9.04488669921506,
      "beta": -2.1305633940641737,
      "kappa": 0.838969264424182,
      "success": true,
      "log_likelihood": -391.439465807088,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "a": 9.09126685180903,
      "beta": 10.0,
      "kappa": 0.5390203896710624,
      "success": true,
      "log_likelihood": -115.13036051421848,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "a": -10.0,
      "beta": 10.0,
      "kappa": 0.10090960425344399,
      "success": true,
      "log_likelihood": -368.4136757232968,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "a": 0.30556206147803117,
      "beta": 0.17512392866269694,
      "kappa": 0.7303613839698246,
      "success": true,
      "log_likelihood": -11.823598358095307,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "a": 0.47571561519267874,
      "beta": 0.06880243891080073,
      "kappa": 0.897108692465494,
      "success": true,
      "log_likelihood": -6.297198991262288,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "a": -4.748726520079594,
      "beta": 0.40598375989574514,
      "kappa": 0.8205524309204971,
      "success": true,
      "log_likelihood": -46.05170183972734,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "a": 10.0,
      "beta": -5.34442200396798,
      "kappa": 2.0,
      "success": true,
      "log_likelihood": -322.36191301696664,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "a": 1.0349336243293044,
      "beta": -10.0,
      "kappa": 0.1,
      "success": true,
      "log_likelihood": -69.07755278652135,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "a": 10.0,
      "beta": 6.414755254747611,
      "kappa": 0.1,
      "success": true,
      "log_likelihood": -391.439465807088,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "a": 9.439701816453606,
      "beta": -8.796272982479408,
      "kappa": 1.9532723460727086,
      "success": true,
      "log_likelihood": -69.07755278652131,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "a": -0.33302983073864145,
      "beta": 0.10435424204293986,
      "kappa": 0.5175997636831497,
      "success": true,
      "log_likelihood": -9.360812186341597,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "a": 3.7619871216469103,
      "beta": 9.298526356186983,
      "kappa": 0.5924012998868285,
      "success": true,
      "log_likelihood": -92.10340560372363,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "a": 10.0,
      "beta": -10.0,
      "kappa": 2.0,
      "success": true,
      "log_likelihood": -322.36191301696664,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "a": 5.253844810990878,
      "beta": 6.6952765624168995,
      "kappa": 1.408899516047164,
      "success": true,
      "log_likelihood": -46.051727294649325,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "a": 2.390805307819598,
      "beta": 10.0,
      "kappa": 0.1,
      "success": true,
      "log_likelihood": -253.28436022684514,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "a": -9.305489676402493,
      "beta": -1.8741231349658403,
      "kappa": 0.1,
      "success": true,
      "log_likelihood": -184.20680743672372,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "a": 9.069394478416733,
      "beta": 0.19297053136234757,
      "kappa": 0.43136500238365827,
      "success": true,
      "log_likelihood": -46.05170185648088,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "a": -0.9863698585021574,
      "beta": 0.45890086969826854,
      "kappa": 0.2336646149027364,
      "success": true,
      "log_likelihood": -5.66631528789409,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "a": 7.193828677143606,
      "beta": 0.08823353773321159,
      "kappa": 1.0231051886952747,
      "success": true,
      "log_likelihood": -253.28436022684528,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "a": {
        "r": 0.5816207408958685,
        "p": 2.2151789950162968e-10
      },
      "beta": {
        "r": 0.3378603843403945,
        "p": 0.0005864594181785669
      },
      "kappa": {
        "r": 0.14702547655643666,
        "p": 0.14436831259364546
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 257.1709822220389,
  "bic_results": {
    "average_bic": 257.1709822220389,
    "individual_bics": [
      148.90566238841097,
      43.089369189409524,
      30.52050256729961,
      701.5260847093822,
      28.021237690018786,
      151.67825111396633,
      10.75055680816833,
      563.3709791291396,
      10.75055680816833,
      32.947397720741165,
      10.754884059180107,
      23.61937666202396,
      56.80228791948245,
      10.75055680816833,
      10.75055680816833,
      10.75055680816833,
      10.75055680816833,
      241.00906610857285,
      194.95736424849187,
      10.75055680816833,
      747.5777865694633,
      102.85400896656624,
      41.196273270942314,
      793.6294884295443,
      31.483229660760298,
      977.8362958698681,
      747.5777865694633,
      18.590616217154068,
      194.9573642484919,
      287.06103880702204,
      10.75055680816833,
      21.3320895297309,
      384.14073705222347,
      287.0608538658106,
      10.750556808168533,
      609.4226809892206,
      517.3192772690587,
      200.12651143395544,
      42.9904770191759,
      1530.456718190834,
      289.83634746945773,
      102.85401336525342,
      56.80225866824931,
      42.34764581089444,
      655.4743828493015,
      471.26757540897773,
      41.05014845289322,
      45.739982284401435,
      701.5260847091282,
      793.6294884295443,
      381.93691338030715,
      148.90629915863474,
      45.92466877119537,
      50.538507231740354,
      47.91961534180186,
      563.3709791291394,
      471.26757540897756,
      194.95736424849193,
      194.95736424849196,
      333.11246982884757,
      49.87911755547438,
      38.46675206818385,
      102.85403785241718,
      379.16485370723296,
      151.67825985865917,
      38.710830687678275,
      148.90566238841095,
      240.38941239073796,
      147.62642043043317,
      148.90566238841114,
      10.75055680816837,
      241.00906610857285,
      793.6294884295444,
      241.0112778438053,
      747.577908261962,
      34.39775353155895,
      23.344954797892907,
      102.85396049482301,
      655.4743828493016,
      148.90566238841103,
      793.6294884295444,
      148.90566238841095,
      29.472181188051525,
      194.9573680228156,
      655.4743828493016,
      102.85401140466698,
      517.3192772690586,
      379.16417168881577,
      102.85396052833009,
      22.08318739115651,
      517.319277269059
    ],
    "group_enabled": false,
    "group_bics": null,
    "num_parameters": 3,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- a: r = 0.582\n- beta: r = 0.338\n- kappa: r = 0.147",
  "previous_models": [
    "Specification: U = a + beta * (split_self - kappa * (token_self/(token_self+token_opp)) * combined_earning)\nSummary: A fairness-based utility model where the probability of accepting a proposal is determined by comparing the offered share (split_self) with an expected fair share determined by pretask token contributions. The utility is computed as a weighted unfairness (difference between offered and fair shares) plus a baseline intercept, and acceptance probability is given by a logistic function applied to this utility.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 257.1709822220389\nOverall Accuracy: 0.7952\n\nParameter Recovery:\n- a: r = 0.582\n- beta: r = 0.338\n- kappa: r = 0.147"
  ]
}