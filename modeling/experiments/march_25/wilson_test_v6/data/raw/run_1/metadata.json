{
  "task_description": "Participants played 320 games (in four blocks of 80 games) of our Horizon task (see Figure\n1A). Each game lasted either five or 10 trials and the two game lengths were interleaved and\ncounter-balanced such that there were 160 games of each length.\nIn each game, participants made repeated decisions between two options. Each option paid\nout between 1 and 100 points that was sampled (rounded to the nearest integer) from a\nGaussian distribution with a fixed standard deviation of 8 points. The generative means of\nthe underlying Gaussians were different for the two options and remained stable within a\ngame. In each game, the mean of one option was set to either 40 or 60 points and the mean\nof the other was set relative to the mean of the first, such that the difference between the two\nwas sampled from 4, 8, 12, 20, and 30. Both the identity and the difference in means were\ncounterbalanced over the entire experiment.\nParticipants were instructed in the task with the use of a set of illustrated onscreen\ninstructions. These explicitly conveyed that the means of the two options were constant over\na game and that the variability in the options was constant over the entire experiment.\nParticipants were told to maximize the points they earned and that one option was always\nbetter on average. The full text of the instructions is provided in the Supplementary Material.\nChoice and outcome history in each game remained onscreen inside each of the slot\nmachines (Figure 1A). After a particular option was played, the reward on that trial was\nadded to the slot machine, whereas the corresponding space for the unplayed option was\nfilled with an \u201cXX.\u201d\nThe first four trials of each game were forced-choice trials, in which only one of the options\n(cued by a green square inside the next available space) was available for participants to\nchoose. We used these forced-choice trials to manipulate the information participants had\nabout the two options from experience (Hertwig, Barron, Weber, & Erev, 2004) before their\nfirst free choice, while maintaining their active engagement in the task. The four forcedchoice trials set up two information conditions: \u201cunequal information\u201d (or [1 3]), in which\none option was forced to be played once and the other three times, and \u201cequal information\u201d\n(or [2 2]), in which each option was forced to be played twice.\nCrucially, this manipulation ensured that participants were exposed to a specified amount of\ninformation about each option, regardless of how rewarding it was. Furthermore, the relative\namount of information provided about each option was independent of the relative difference\nin their means. Thus on the first free choice (the fifth trial in each game), the difference in\nthe number of times each option had been sampled (and hence the difference in available\ninformation) had no effect on the difference in mean payout of that option (repeatedmeasures ANOVA,\nF(2, 89) = 0.09,\np = .91) thus removing the reward\u2013information\nconfound on this trial.\nAfter the forced-choice trials, participants made either one or six free choices (Figure 1B).\nAt the beginning of each game, the number of upcoming free-choice trials (i.e., the horizon)\n\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\nparticipant = [Unique identifier for each human subject in the experiment]\ntask = [Identifier for the specific game/round the participant is playing]\ntrial = [Sequential number indicating which decision point this is within a game]\nchoice = [The option (0 or 1) that the participant selected on this trial]\nreward = [The number of points (1-100) received after making a choice]\nRT = [Reaction time measuring how long it took the participant to make their decision]\nexpected_reward0 = [The observed mean reward for option 0 based on previous forced/free plays]\nexpected_reward1 = [The observed mean reward for option 1 based on previous forced/free plays]\nforced_choice = [Boolean indicator of whether this was a forced-choice trial (1) or free-choice trial (0)]\nhorizon = [The number of free choices available in the current game (either 1 or 6)]\n\nDataset:\n\nDataset Structure:\nVariables available:\n- Unnamed: 0 (int64)\n- ID (int64)\n- task (int64)\n- trial (int64)\n- choice (int64)\n- reward (float64)\n- RT (float64)\n- expected_reward0 (int64)\n- expected_reward1 (int64)\n- forced_choice (bool)\n- horizon (int64)\n\nNumber of observations: 144000\n\nDataset:\n\nDataset Structure:\nVariables available:\n- Unnamed: 0 (int64)\n- ID (int64)\n- task (int64)\n- trial (int64)\n- choice (int64)\n- reward (float64)\n- RT (float64)\n- expected_reward0 (int64)\n- expected_reward1 (int64)\n- forced_choice (bool)\n- horizon (int64)\n\nNumber of observations: 144000",
  "output_description": "Design a computational model for the described task.\n\nYour model should use the given variables appropriately, but does not necessary need to use all or even most of the variables. \n\nThe model should:\n1. Predict the 'choice' variable when 'forced_choice' = 'FALSE'\n2. Be VERY considerate of high covariance between learnable parameters as the model\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Have an appropriate number or learnable parameters, with a slight bias for less learnable paramters.\n5. Only output Utility, not probaility, since the output of this function will be fed into a logistic function (i.e the proability will be derived from the output of this function.)\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- Unnamed: 0 (int64)\n- ID (int64)\n- task (int64)\n- trial (int64)\n- choice (int64)\n- reward (float64)\n- RT (float64)\n- expected_reward0 (int64)\n- expected_reward1 (int64)\n- forced_choice (bool)\n- horizon (int64)\n\nNumber of observations: 144000",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: Participants played 320 games (in four blocks of 80 games) of our Horizon task (see Figure\n1A). Each game lasted either five or 10 trials and the two game lengths were interleaved and\ncounter-balanced such that there were 160 games of each length.\nIn each game, participants made repeated decisions between two options. Each option paid\nout between 1 and 100 points that was sampled (rounded to the nearest integer) from a\nGaussian distribution with a fixed standard deviation of 8 points. The generative means of\nthe underlying Gaussians were different for the two options and remained stable within a\ngame. In each game, the mean of one option was set to either 40 or 60 points and the mean\nof the other was set relative to the mean of the first, such that the difference between the two\nwas sampled from 4, 8, 12, 20, and 30. Both the identity and the difference in means were\ncounterbalanced over the entire experiment.\nParticipants were instructed in the task with the use of a set of illustrated onscreen\ninstructions. These explicitly conveyed that the means of the two options were constant over\na game and that the variability in the options was constant over the entire experiment.\nParticipants were told to maximize the points they earned and that one option was always\nbetter on average. The full text of the instructions is provided in the Supplementary Material.\nChoice and outcome history in each game remained onscreen inside each of the slot\nmachines (Figure 1A). After a particular option was played, the reward on that trial was\nadded to the slot machine, whereas the corresponding space for the unplayed option was\nfilled with an \u201cXX.\u201d\nThe first four trials of each game were forced-choice trials, in which only one of the options\n(cued by a green square inside the next available space) was available for participants to\nchoose. We used these forced-choice trials to manipulate the information participants had\nabout the two options from experience (Hertwig, Barron, Weber, & Erev, 2004) before their\nfirst free choice, while maintaining their active engagement in the task. The four forcedchoice trials set up two information conditions: \u201cunequal information\u201d (or [1 3]), in which\none option was forced to be played once and the other three times, and \u201cequal information\u201d\n(or [2 2]), in which each option was forced to be played twice.\nCrucially, this manipulation ensured that participants were exposed to a specified amount of\ninformation about each option, regardless of how rewarding it was. Furthermore, the relative\namount of information provided about each option was independent of the relative difference\nin their means. Thus on the first free choice (the fifth trial in each game), the difference in\nthe number of times each option had been sampled (and hence the difference in available\ninformation) had no effect on the difference in mean payout of that option (repeatedmeasures ANOVA,\nF(2, 89) = 0.09,\np = .91) thus removing the reward\u2013information\nconfound on this trial.\nAfter the forced-choice trials, participants made either one or six free choices (Figure 1B).\nAt the beginning of each game, the number of upcoming free-choice trials (i.e., the horizon)\n\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\nparticipant = [Unique identifier for each human subject in the experiment]\ntask = [Identifier for the specific game/round the participant is playing]\ntrial = [Sequential number indicating which decision point this is within a game]\nchoice = [The option (0 or 1) that the participant selected on this trial]\nreward = [The number of points (1-100) received after making a choice]\nRT = [Reaction time measuring how long it took the participant to make their decision]\nexpected_reward0 = [The observed mean reward for option 0 based on previous forced/free plays]\nexpected_reward1 = [The observed mean reward for option 1 based on previous forced/free plays]\nforced_choice = [Boolean indicator of whether this was a forced-choice trial (1) or free-choice trial (0)]\nhorizon = [The number of free choices available in the current game (either 1 or 6)]\n\nDataset:\n\nDataset Structure:\nVariables available:\n- Unnamed: 0 (int64)\n- ID (int64)\n- task (int64)\n- trial (int64)\n- choice (int64)\n- reward (float64)\n- RT (float64)\n- expected_reward0 (int64)\n- expected_reward1 (int64)\n- forced_choice (bool)\n- horizon (int64)\n\nNumber of observations: 144000\n\nDataset:\n\nDataset Structure:\nVariables available:\n- Unnamed: 0 (int64)\n- ID (int64)\n- task (int64)\n- trial (int64)\n- choice (int64)\n- reward (float64)\n- RT (float64)\n- expected_reward0 (int64)\n- expected_reward1 (int64)\n- forced_choice (bool)\n- horizon (int64)\n\nNumber of observations: 144000\n\nDesired Output Specification: Design a computational model for the described task.\n\nYour model should use the given variables appropriately, but does not necessary need to use all or even most of the variables. \n\nThe model should:\n1. Predict the 'choice' variable when 'forced_choice' = 'FALSE'\n2. Be VERY considerate of high covariance between learnable parameters as the model\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Have an appropriate number or learnable parameters, with a slight bias for less learnable paramters.\n5. Only output Utility, not probaility, since the output of this function will be fed into a logistic function (i.e the proability will be derived from the output of this function.)\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function, and then used to predict binary decisions.\n\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "Step 1. Key Psychological Mechanisms\n\n\u2022 Exploitation: Participants are assumed to be driven by the difference in their estimated average payoffs (expected_reward) for the two options.\n\u2022 Exploration: In addition to exploitation, participants may be drawn to sample the option that is less known. Since the forced\u2010choice procedure provided unequal amounts of information in some games (i.e. [1 3] vs. [2 2]), one option will be less sampled (and hence more uncertain) than the other. Because the \u201chorizon\u201d (number of free\u2010choice trials) moderates the benefit of exploration, an exploration bonus scaled by horizon is added.\n\u2022 Interaction: The overall utility for a given option is a weighted sum of the exploitation component (expected reward) and an exploration bonus derived from uncertainty (approximated as the inverse square\u2010root of the sample size of that option). The utility difference (i.e. option1 minus option0) is then passed to a logistic function when predicting binary choice.\n\u2022 Mathematical Form: The model computes the utility difference as:\n\u2003\u2003U = bias + beta_reward*(expected_reward1 \u2013 expected_reward0) + beta_info * horizon * [ (1/\u221a(n1)) \u2013 (1/\u221a(n0)) ]\n\u2003where n0 and n1 are the number of samples (observations) available for each option (computed from the trial history within the game).\n\u2022 Learnable Parameters: There are three learnable parameters:\n\u2003\u2003\u2022 beta_reward: weight on the exploitation (reward difference) term.\n\u2003\u2003\u2022 beta_info: weight on the exploration (information/uncertainty) term.\n\u2003\u2003\u2022 bias: a constant baseline tendency.\n\u2022 Mapping to Observable Behavior: The available expected_reward variables provide the exploitation signal, while the computed number of prior choices (n0 and n1) serve as proxies for uncertainty about each option. The horizon indicates the number of future choices available (i.e. the benefit of exploration). Our model predicts the untransformed utility difference that will then be converted using a logistic function to yield binary choices (predicted \u2018choice\u2019 variable when forced_choice = FALSE).\n\nStep 2. Model Specification\n\n<MODEL>\nU = bias + beta_reward*(expected_reward1 - expected_reward0) + beta_info * horizon * ((1/sqrt(n1)) - (1/sqrt(n0)))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Computed utility difference (option1 relative to option0) that will be transformed via a logistic function to yield probability of choosing option1.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"bias\": {\n      \"description\": \"Baseline bias parameter representing an overall tendency, independent of rewards or uncertainty.\",\n      \"range\": {\n        \"min\": -100,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_reward\": {\n      \"description\": \"Weight on the difference in expected rewards between options, capturing exploitation.\",\n      \"range\": {\n        \"min\": -100,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_info\": {\n      \"description\": \"Weight on the information bonus term (uncertainty) scaled by horizon, capturing exploration tendencies.\",\n      \"range\": {\n        \"min\": -100,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"expected_reward0\": {\n      \"description\": \"Observed mean reward for option 0 computed from previous choices.\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"expected_reward1\": {\n      \"description\": \"Observed mean reward for option 1 computed from previous choices.\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"horizon\": {\n      \"description\": \"The number of free-choice trials remaining in the current game, indicating the benefit of exploration (values: 1 or 6).\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": 6,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"n0\": {\n      \"description\": \"Number of observed samples (plays) for option 0 in the current game, computed from previous forced and free choices.\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": 320,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"n1\": {\n      \"description\": \"Number of observed samples (plays) for option 1 in the current game, computed from previous forced and free choices.\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": 320,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>choice</target_variable>\n\n<SUMMARY>\nA dual-component linear utility model that integrates exploitation through expected reward differences and exploration via an uncertainty bonus term based on the inverse square-root of sample counts, scaled by the available horizon, plus a bias term. The resulting utility is used to predict binary choices in free-choice trials.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['bias', 'beta_reward', 'beta_info']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                U = bias + beta_reward*(expected_reward1 - expected_reward0) + beta_info * horizon * ((1/sqrt(n1)) - (1/sqrt(n0)))\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Computed utility difference (option1 relative to option0) that will be transformed via a logistic function to yield probability of choosing option1.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"bias\": {\n      \"description\": \"Baseline bias parameter representing an overall tendency, independent of rewards or uncertainty.\",\n      \"range\": {\n        \"min\": -100,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_reward\": {\n      \"description\": \"Weight on the difference in expected rewards between options, capturing exploitation.\",\n      \"range\": {\n        \"min\": -100,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_info\": {\n      \"description\": \"Weight on the information bonus term (uncertainty) scaled by horizon, capturing exploration tendencies.\",\n      \"range\": {\n        \"min\": -100,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"expected_reward0\": {\n      \"description\": \"Observed mean reward for option 0 computed from previous choices.\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"expected_reward1\": {\n      \"description\": \"Observed mean reward for option 1 computed from previous choices.\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"horizon\": {\n      \"description\": \"The number of free-choice trials remaining in the current game, indicating the benefit of exploration (values: 1 or 6).\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": 6,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"n0\": {\n      \"description\": \"Number of observed samples (plays) for option 0 in the current game, computed from previous forced and free choices.\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": 320,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"n1\": {\n      \"description\": \"Number of observed samples (plays) for option 1 in the current game, computed from previous forced and free choices.\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": 320,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- Unnamed: 0 (int64)\n- ID (int64)\n- task (int64)\n- trial (int64)\n- choice (int64)\n- reward (float64)\n- RT (float64)\n- expected_reward0 (int64)\n- expected_reward1 (int64)\n- forced_choice (bool)\n- horizon (int64)\n\nNumber of observations: 144000\n\n                ",
      "output": "\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, bias=0, beta_reward=1, beta_info=1):\n    model_predictions = []\n    for trial in trial_data:\n        expected_reward0 = trial.get(\"expected_reward0\", 0)\n        expected_reward1 = trial.get(\"expected_reward1\", 0)\n        horizon = trial.get(\"horizon\", 1)\n\n        # Ensure n0 and n1 are at least 1 to avoid division by zero or domain errors in sqrt\n        n0 = max(trial.get(\"n0\", 1), 1)\n        n1 = max(trial.get(\"n1\", 1), 1)\n\n        # Compute utility difference\n        U = bias + beta_reward * (expected_reward1 - expected_reward0) + beta_info * horizon * ((1 / math.sqrt(n1)) - (1 / math.sqrt(n0)))\n        model_predictions.append(U)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '[{\"expected_reward0\": 50, \"expected_reward1\": 60, \"horizon\": 6, \"n0\": 10, \"n1\": 15}, {\"expected_reward0\": 40, \"expected_reward1\": 40, \"horizon\": 1, \"n0\": 5, \"n1\": 5}]'\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n```",
      "timestamp": 1742911897.750693
    }
  ],
  "learnable_parameters": {
    "bias": {
      "description": "Baseline bias parameter representing an overall tendency, independent of rewards or uncertainty.",
      "range": {
        "min": -100,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta_reward": {
      "description": "Weight on the difference in expected rewards between options, capturing exploitation.",
      "range": {
        "min": -100,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta_info": {
      "description": "Weight on the information bonus term (uncertainty) scaled by horizon, capturing exploration tendencies.",
      "range": {
        "min": -100,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "U = bias + beta_reward*(expected_reward1 - expected_reward0) + beta_info * horizon * ((1/sqrt(n1)) - (1/sqrt(n0)))",
  "variable_descriptions": {
    "U": {
      "description": "Computed utility difference (option1 relative to option0) that will be transformed via a logistic function to yield probability of choosing option1.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "bias": {
      "description": "Baseline bias parameter representing an overall tendency, independent of rewards or uncertainty.",
      "range": {
        "min": -100,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta_reward": {
      "description": "Weight on the difference in expected rewards between options, capturing exploitation.",
      "range": {
        "min": -100,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta_info": {
      "description": "Weight on the information bonus term (uncertainty) scaled by horizon, capturing exploration tendencies.",
      "range": {
        "min": -100,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "expected_reward0": {
      "description": "Observed mean reward for option 0 computed from previous choices.",
      "range": {
        "min": 1,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "expected_reward1": {
      "description": "Observed mean reward for option 1 computed from previous choices.",
      "range": {
        "min": 1,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "horizon": {
      "description": "The number of free-choice trials remaining in the current game, indicating the benefit of exploration (values: 1 or 6).",
      "range": {
        "min": 1,
        "max": 6,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "n0": {
      "description": "Number of observed samples (plays) for option 0 in the current game, computed from previous forced and free choices.",
      "range": {
        "min": 1,
        "max": 320,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "n1": {
      "description": "Number of observed samples (plays) for option 1 in the current game, computed from previous forced and free choices.",
      "range": {
        "min": 1,
        "max": 320,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "A dual-component linear utility model that integrates exploitation through expected reward differences and exploration via an uncertainty bonus term based on the inverse square-root of sample counts, scaled by the available horizon, plus a bias term. The resulting utility is used to predict binary choices in free-choice trials.",
  "target_variable": "choice",
  "full_reasoning": "Step 1. Key Psychological Mechanisms\n\n\u2022 Exploitation: Participants are assumed to be driven by the difference in their estimated average payoffs (expected_reward) for the two options.\n\u2022 Exploration: In addition to exploitation, participants may be drawn to sample the option that is less known. Since the forced\u2010choice procedure provided unequal amounts of information in some games (i.e. [1 3] vs. [2 2]), one option will be less sampled (and hence more uncertain) than the other. Because the \u201chorizon\u201d (number of free\u2010choice trials) moderates the benefit of exploration, an exploration bonus scaled by horizon is added.\n\u2022 Interaction: The overall utility for a given option is a weighted sum of the exploitation component (expected reward) and an exploration bonus derived from uncertainty (approximated as the inverse square\u2010root of the sample size of that option). The utility difference (i.e. option1 minus option0) is then passed to a logistic function when predicting binary choice.\n\u2022 Mathematical Form: The model computes the utility difference as:\n\u2003\u2003U = bias + beta_reward*(expected_reward1 \u2013 expected_reward0) + beta_info * horizon * [ (1/\u221a(n1)) \u2013 (1/\u221a(n0)) ]\n\u2003where n0 and n1 are the number of samples (observations) available for each option (computed from the trial history within the game).\n\u2022 Learnable Parameters: There are three learnable parameters:\n\u2003\u2003\u2022 beta_reward: weight on the exploitation (reward difference) term.\n\u2003\u2003\u2022 beta_info: weight on the exploration (information/uncertainty) term.\n\u2003\u2003\u2022 bias: a constant baseline tendency.\n\u2022 Mapping to Observable Behavior: The available expected_reward variables provide the exploitation signal, while the computed number of prior choices (n0 and n1) serve as proxies for uncertainty about each option. The horizon indicates the number of future choices available (i.e. the benefit of exploration). Our model predicts the untransformed utility difference that will then be converted using a logistic function to yield binary choices (predicted \u2018choice\u2019 variable when forced_choice = FALSE).\n\nStep 2. Model Specification\n\n<MODEL>\nU = bias + beta_reward*(expected_reward1 - expected_reward0) + beta_info * horizon * ((1/sqrt(n1)) - (1/sqrt(n0)))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Computed utility difference (option1 relative to option0) that will be transformed via a logistic function to yield probability of choosing option1.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"bias\": {\n      \"description\": \"Baseline bias parameter representing an overall tendency, independent of rewards or uncertainty.\",\n      \"range\": {\n        \"min\": -100,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_reward\": {\n      \"description\": \"Weight on the difference in expected rewards between options, capturing exploitation.\",\n      \"range\": {\n        \"min\": -100,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_info\": {\n      \"description\": \"Weight on the information bonus term (uncertainty) scaled by horizon, capturing exploration tendencies.\",\n      \"range\": {\n        \"min\": -100,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"expected_reward0\": {\n      \"description\": \"Observed mean reward for option 0 computed from previous choices.\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"expected_reward1\": {\n      \"description\": \"Observed mean reward for option 1 computed from previous choices.\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"horizon\": {\n      \"description\": \"The number of free-choice trials remaining in the current game, indicating the benefit of exploration (values: 1 or 6).\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": 6,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"n0\": {\n      \"description\": \"Number of observed samples (plays) for option 0 in the current game, computed from previous forced and free choices.\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": 320,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"n1\": {\n      \"description\": \"Number of observed samples (plays) for option 1 in the current game, computed from previous forced and free choices.\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": 320,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>choice</target_variable>\n\n<SUMMARY>\nA dual-component linear utility model that integrates exploitation through expected reward differences and exploration via an uncertainty bonus term based on the inverse square-root of sample counts, scaled by the available horizon, plus a bias term. The resulting utility is used to predict binary choices in free-choice trials.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: U = bias + beta_reward*(expected_reward1 - expected_reward0) + beta_info * horizon * ((1/sqrt(n1)) - (1/sqrt(n0)))\nSummary: A dual-component linear utility model that integrates exploitation through expected reward differences and exploration via an uncertainty bonus term based on the inverse square-root of sample counts, scaled by the available horizon, plus a bias term. The resulting utility is used to predict binary choices in free-choice trials.\nTarget Variable: choice\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, bias=0, beta_reward=1, beta_info=1):\n    model_predictions = []\n    for trial in trial_data:\n        expected_reward0 = trial.get(\"expected_reward0\", 0)\n        expected_reward1 = trial.get(\"expected_reward1\", 0)\n        horizon = trial.get(\"horizon\", 1)\n\n        # Ensure n0 and n1 are at least 1 to avoid division by zero or domain errors in sqrt\n        n0 = max(trial.get(\"n0\", 1), 1)\n        n1 = max(trial.get(\"n1\", 1), 1)\n\n        # Compute utility difference\n        U = bias + beta_reward * (expected_reward1 - expected_reward0) + beta_info * horizon * ((1 / math.sqrt(n1)) - (1 / math.sqrt(n0)))\n        model_predictions.append(U)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.5880694444444444,
  "fitting_results": [
    {
      "bias": -32.22971421982632,
      "beta_reward": 100.0,
      "beta_info": -84.73704357591691,
      "success": true,
      "log_likelihood": -22795.592420500972,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5875,
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "bias": 0.054365769992401905,
      "beta_reward": 0.06719912900672208,
      "beta_info": -74.20539251026923,
      "success": true,
      "log_likelihood": -1568.9111214396,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5204166666666666,
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "bias": 100.0,
      "beta_reward": 100.0,
      "beta_info": -56.44638893446432,
      "success": true,
      "log_likelihood": -18743.042656813228,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6608333333333334,
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "bias": 42.68773734682304,
      "beta_reward": 35.064310786901785,
      "beta_info": 22.698129425824504,
      "success": true,
      "log_likelihood": -19502.895737504226,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6470833333333333,
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "bias": -0.26247525096539276,
      "beta_reward": 0.058769679401317464,
      "beta_info": -72.87972128490026,
      "success": true,
      "log_likelihood": -1585.5437459404418,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5179166666666667,
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "bias": -17.11576327442954,
      "beta_reward": 36.49776048428669,
      "beta_info": 3.1567492482779613,
      "success": true,
      "log_likelihood": -25351.46187373577,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.54125,
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "bias": 7.891161489098607,
      "beta_reward": 22.76419152116442,
      "beta_info": 77.24558984506504,
      "success": true,
      "log_likelihood": -19042.378717961346,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6554166666666666,
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "bias": -84.80127954595196,
      "beta_reward": 31.323361698778143,
      "beta_info": -24.295852519555055,
      "success": true,
      "log_likelihood": -19659.535845863214,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.63875,
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "bias": 0.0036762560099041653,
      "beta_reward": 0.07699031832710293,
      "beta_info": -15.62704753964907,
      "success": true,
      "log_likelihood": -1542.5360602940548,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5529166666666666,
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "bias": -74.17442165879072,
      "beta_reward": 49.35847418966006,
      "beta_info": -92.54506684324248,
      "success": true,
      "log_likelihood": -20147.619563545988,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6354166666666666,
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "bias": -50.36467682640418,
      "beta_reward": 45.995465649950404,
      "beta_info": 91.12652916511627,
      "success": true,
      "log_likelihood": -19618.024992155024,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.645,
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "bias": 95.44301003326686,
      "beta_reward": -52.721317571355456,
      "beta_info": -60.88038423812574,
      "success": true,
      "log_likelihood": -37071.619997126065,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.32916666666666666,
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "bias": -0.08569237020595467,
      "beta_reward": 0.06167281113181955,
      "beta_info": 91.01329594819398,
      "success": true,
      "log_likelihood": -1582.3782698510083,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.53875,
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "bias": 91.2265717203399,
      "beta_reward": -3.043861465971539,
      "beta_info": 72.55609183464534,
      "success": true,
      "log_likelihood": -24944.726263300163,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.48125,
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "bias": 77.5104247506543,
      "beta_reward": 67.2028329679136,
      "beta_info": -61.16621767571419,
      "success": true,
      "log_likelihood": -17822.008619611443,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6775,
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "bias": -0.00352306251036056,
      "beta_reward": 0.05426219200506458,
      "beta_info": 46.33404308421507,
      "success": true,
      "log_likelihood": -1600.0397358950559,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5158333333333334,
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "bias": 98.42381422909277,
      "beta_reward": 100.0,
      "beta_info": 49.07649059378102,
      "success": true,
      "log_likelihood": -18812.120209603374,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6595833333333333,
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "bias": -76.66943608706029,
      "beta_reward": 74.23846740246341,
      "beta_info": -77.09360527696627,
      "success": true,
      "log_likelihood": -19341.71478099426,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.65,
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "bias": 6.578843013425242,
      "beta_reward": 57.76366774689404,
      "beta_info": -35.374631516724804,
      "success": true,
      "log_likelihood": -19318.688930064276,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6504166666666666,
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "bias": 37.85578853321786,
      "beta_reward": -36.42534788363356,
      "beta_info": -16.11051177304799,
      "success": true,
      "log_likelihood": -35966.37915248437,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3491666666666667,
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "bias": -0.010500791616375052,
      "beta_reward": 0.052450725753309876,
      "beta_info": -19.155882655239125,
      "success": true,
      "log_likelihood": -1603.9810523227875,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5125,
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "bias": -85.84815663476934,
      "beta_reward": 21.621758204301685,
      "beta_info": -63.604812563065764,
      "success": true,
      "log_likelihood": -16350.507496459928,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6629166666666667,
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "bias": 100.0,
      "beta_reward": 100.0,
      "beta_info": 9.618515158521063,
      "success": true,
      "log_likelihood": -18420.68074379259,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "bias": -47.644064960861535,
      "beta_reward": 11.605353032245725,
      "beta_info": -23.01630636243928,
      "success": true,
      "log_likelihood": -19882.358648607616,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5954166666666667,
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "bias": 36.635213433319706,
      "beta_reward": 58.9774069158793,
      "beta_info": -98.2418982012809,
      "success": true,
      "log_likelihood": -26364.59931465761,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5229166666666667,
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "bias": 75.44066970518486,
      "beta_reward": 92.89954753156655,
      "beta_info": -99.35572974996536,
      "success": true,
      "log_likelihood": -18098.318830772023,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6725,
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "bias": 70.84563820749183,
      "beta_reward": 7.546759575589671,
      "beta_info": 81.84967947423439,
      "success": true,
      "log_likelihood": -18676.91905196711,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.58875,
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "bias": 86.73389640279926,
      "beta_reward": 100.0,
      "beta_info": 54.181682976949276,
      "success": true,
      "log_likelihood": -19664.07669401505,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6441666666666667,
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "bias": -58.565178991197975,
      "beta_reward": 53.67639339946362,
      "beta_info": 35.57830297745949,
      "success": true,
      "log_likelihood": -19341.714780994345,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.65,
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "bias": 70.27852237107669,
      "beta_reward": 63.93431634489443,
      "beta_info": 57.26429607159221,
      "success": true,
      "log_likelihood": -18950.27531518365,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6570833333333334,
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "bias": -0.011862881723541972,
      "beta_reward": 0.0733422621400848,
      "beta_info": -40.2674191714816,
      "success": true,
      "log_likelihood": -1552.601178190387,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5358333333333334,
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "bias": -88.10818457285588,
      "beta_reward": -96.89150355298881,
      "beta_info": -25.575393259437078,
      "success": true,
      "log_likelihood": -36818.33563689564,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.33375,
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "bias": 89.53316269990216,
      "beta_reward": 22.66184882078654,
      "beta_info": 5.271648435363119,
      "success": true,
      "log_likelihood": -17387.257766557083,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6375,
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "bias": -0.07653507132024064,
      "beta_reward": 0.06252303252077204,
      "beta_info": 72.64332651920355,
      "success": true,
      "log_likelihood": -1578.8714614613493,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5258333333333334,
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "bias": 0.005992776296743499,
      "beta_reward": 0.07553222548799333,
      "beta_info": 59.28422160930941,
      "success": true,
      "log_likelihood": -1546.727681916063,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.55,
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "bias": -91.50431626686783,
      "beta_reward": 23.044293629241324,
      "beta_info": 4.338848213898601,
      "success": true,
      "log_likelihood": -15815.284910162407,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6583333333333333,
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "bias": -17.491851149426523,
      "beta_reward": 66.06819611649186,
      "beta_info": 54.701708665266835,
      "success": true,
      "log_likelihood": -21621.274023068687,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.60875,
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "bias": 54.95416551344863,
      "beta_reward": 100.0,
      "beta_info": -62.801900422600724,
      "success": true,
      "log_likelihood": -18812.120209603374,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6595833333333333,
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "bias": 52.99692576377933,
      "beta_reward": 64.87963133951814,
      "beta_info": 67.20962017437725,
      "success": true,
      "log_likelihood": -19710.128395875,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6433333333333333,
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "bias": 92.0528616194838,
      "beta_reward": 23.37249698647805,
      "beta_info": -36.252748560780915,
      "success": true,
      "log_likelihood": -18442.4442099116,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6333333333333333,
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "bias": -86.71114572911239,
      "beta_reward": 61.06570308616702,
      "beta_info": -73.86909526166608,
      "success": true,
      "log_likelihood": -20585.1107312168,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6275,
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "bias": -100.0,
      "beta_reward": 100.0,
      "beta_info": 50.04092678804821,
      "success": true,
      "log_likelihood": -21552.196470278584,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.61,
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "bias": -0.09800367274087421,
      "beta_reward": 0.07424247430820702,
      "beta_info": -63.356208829392216,
      "success": true,
      "log_likelihood": -1549.0001829558114,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5354166666666667,
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "bias": 0.03980970502611156,
      "beta_reward": 0.07205251600458447,
      "beta_info": 67.11061014703608,
      "success": true,
      "log_likelihood": -1555.4875602473198,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5479166666666667,
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "bias": 98.78345113975746,
      "beta_reward": 49.86984551179245,
      "beta_info": 81.55995302472832,
      "success": true,
      "log_likelihood": -18604.887551232707,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6633333333333333,
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "bias": -99.91723979354516,
      "beta_reward": 57.62073142256787,
      "beta_info": 94.36229701325365,
      "success": true,
      "log_likelihood": -20516.03317842666,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.62875,
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "bias": -94.16127956274893,
      "beta_reward": 79.45865174229672,
      "beta_info": -37.67725465518505,
      "success": true,
      "log_likelihood": -18466.732445652655,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6658333333333334,
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "bias": -60.565227542103926,
      "beta_reward": 15.336395322651969,
      "beta_info": -17.476304745324597,
      "success": true,
      "log_likelihood": -17750.802753570406,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6258333333333334,
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "bias": -85.01375579057824,
      "beta_reward": 44.04085086210742,
      "beta_info": 92.80706800628411,
      "success": true,
      "log_likelihood": -17453.59500473068,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6841666666666667,
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "bias": -43.542932396945574,
      "beta_reward": -81.42330544940867,
      "beta_info": -58.390309362064464,
      "success": true,
      "log_likelihood": -37578.188717586876,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.32,
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "bias": 68.61055649330993,
      "beta_reward": -39.94550826079,
      "beta_info": -39.43139520019461,
      "success": true,
      "log_likelihood": -18466.732445637455,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6658333333333334,
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "bias": -0.0838216991189433,
      "beta_reward": 0.08266823475152625,
      "beta_info": 15.875103535939644,
      "success": true,
      "log_likelihood": -1525.2866400850585,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5333333333333333,
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "bias": 8.6037432181198,
      "beta_reward": 100.0,
      "beta_info": 67.03480742791243,
      "success": true,
      "log_likelihood": -20400.90392377643,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6308333333333334,
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "bias": -69.50911589524992,
      "beta_reward": -83.00872585685912,
      "beta_info": -79.17820868494752,
      "success": true,
      "log_likelihood": -32028.95864344795,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.42041666666666666,
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "bias": -0.09564419893203749,
      "beta_reward": 0.08118060347152,
      "beta_info": 28.24209913084394,
      "success": true,
      "log_likelihood": -1529.5761471432922,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5479166666666667,
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "bias": -100.0,
      "beta_reward": 100.0,
      "beta_info": 8.315471764900593,
      "success": true,
      "log_likelihood": -18213.448085422187,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6704166666666667,
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "bias": 22.248080547758477,
      "beta_reward": 22.08195370906819,
      "beta_info": 91.68602227343968,
      "success": true,
      "log_likelihood": -19065.39969022733,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.655,
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "bias": -96.37446554071684,
      "beta_reward": 81.36436412220147,
      "beta_info": -43.5660753990474,
      "success": true,
      "log_likelihood": -21091.679451677825,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6183333333333333,
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "bias": 60.12865864683971,
      "beta_reward": 84.82691048522375,
      "beta_info": -60.6528272351307,
      "success": true,
      "log_likelihood": -18996.327017043663,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.65625,
      "participant_id": null,
      "n_trials": 2400
    },
    {
      "bias": -0.038694618513104094,
      "beta_reward": 0.08491498109753712,
      "beta_info": -60.53987513834927,
      "success": true,
      "log_likelihood": -1520.9785937604152,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.56375,
      "participant_id": null,
      "n_trials": 2400
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "bias": {
        "r": -0.06513904837024423,
        "p": 0.5196498515619
      },
      "beta_reward": {
        "r": 0.8025305184416248,
        "p": 1.0378557281437756e-23
      },
      "beta_info": {
        "r": 0.12090721067069742,
        "p": 0.23081086107166504
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 33526.91704975628,
  "bic_results": {
    "average_bic": 33526.91704975628,
    "individual_bics": [
      45614.53451305095,
      3161.171914928208,
      37509.43498567546,
      39029.14114705746,
      3194.4371639298915,
      50726.27341952055,
      38108.1071079717,
      39342.42136377544,
      3108.4217926371175,
      40318.58879914098,
      39259.399656359055,
      74166.58966630114,
      3188.1062117510246,
      49912.80219864933,
      35667.36691127189,
      3223.4291438391197,
      37647.590091255755,
      38706.77923403753,
      38660.72753217756,
      71956.10797701775,
      3231.311776694583,
      32724.364664968864,
      36864.711159634186,
      39788.06696926424,
      52752.54830136423,
      36219.98733359305,
      37377.18777598323,
      39351.50306007911,
      38706.7792340377,
      37923.90030241631,
      3128.552028429782,
      73660.02094584028,
      34797.86520516317,
      3181.0925949717066,
      3116.805035881134,
      31653.91949237382,
      43265.89771818638,
      37647.590091255755,
      39443.606463799006,
      36908.238091872205,
      41193.571134482605,
      43127.74261260618,
      3121.3500379606307,
      3134.3247925436476,
      37233.12477451442,
      41055.41602890233,
      36956.81456335432,
      35524.95517918982,
      34930.53968151037,
      75179.72710722276,
      36956.81456332392,
      3073.922952219125,
      40825.15751960187,
      64081.26695894491,
      3082.5019663355924,
      36450.24584289338,
      38154.149052503664,
      42206.70857540466,
      38016.00370613633,
      3065.3068595698383
    ],
    "group_enabled": false,
    "group_bics": null,
    "num_parameters": 3,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- bias: r = -0.065\n- beta_reward: r = 0.803\n- beta_info: r = 0.121",
  "previous_models": [
    "Specification: U = bias + beta_reward*(expected_reward1 - expected_reward0) + beta_info * horizon * ((1/sqrt(n1)) - (1/sqrt(n0)))\nSummary: A dual-component linear utility model that integrates exploitation through expected reward differences and exploration via an uncertainty bonus term based on the inverse square-root of sample counts, scaled by the available horizon, plus a bias term. The resulting utility is used to predict binary choices in free-choice trials.\nTarget Variable: choice\nPrediction Type: utility\nBIC: 33526.91704975628\nOverall Accuracy: 0.5881\n\nParameter Recovery:\n- bias: r = -0.065\n- beta_reward: r = 0.803\n- beta_info: r = 0.121"
  ]
}