{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the given task. The model should obtain the utility, (not the probability of choosing an action).  Your goal is to eventually explore the entire space of possible explainations and mechanisms by which the observed behavior arises.\n\nYour model should use the given variables appropriately, but does not necessary need to use all or even most of the variables. Do not include the model for the utility of rejecting an offer. \n\nThe model should:\n1. Predict only responder behavior.\n2. Build on relevant psychological principles.\n3. Be considerate of high covariance between learnable parameters as the model will have to pass parameter recovery tests.\n4. Be applicable to the dataset given within the task description (i.e. the model should be able to be run using only the provided dataset structure).\n5. Not include parameters to simulate general stochasticity of behavior, because this will be handled later by a temperature parameter.\n6. Should have no more than two learnable parameters.\n7. This specific model should calculate the utility of an action, which will then be used to determine the probability of choosing that action. Negative values should represent a negative utility, and thus an unlikely action.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Use clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'. DO NOT USE 'lambda' AS A PARAMETER NAME.\n\nYou will be given the complete list of models that you have already created. Analyze the models, and notice the absence of possible explanations of behaviors that should be tested. You should start with simple obvious explanations, and as you notice these being thoroughly explored you should shift to fundamentally different models of behavior. Pay less attention to the names of the variables, and how they are actually interacting with the given behavioral data. If there are no previous models, start with one learnable parameter, then ensure the space of possible models is thoroughly explored with one parameter before moving to two parameters, etc.\n\nYour results will be scored on a combination of BIC with a penalization for number of learned parameters, the ability to recover those learned parameters, and the ability of those parameters to account for the differences in behaviors among varying groups of people.\n\nPrevious Models:\nModel 1:\nSpecification: U_accept = split_self - alpha * max(0, ( (token_self / (token_self + token_opp)) * combined_earning - split_self ))\nSummary: The model computes the utility for a responder\u2019s acceptance decision by comparing the actual monetary offer to a fair share calculated from the participant's proportional contribution. If the offer falls short of this fair share, a penalty\u2014scaled by the inequity aversion parameter alpha\u2014is applied. The formulation captures a psychological sensitivity to disadvantageous inequity in a single-parameter specification.\nBIC: 34.61021336553505\nParameter Recovery:\n- alpha: r = 0.922\nModel 2:\nSpecification: U_accept = split_self - alpha * max(0, (tau * (token_self / (token_self + token_opp)) * combined_earning) - split_self)\nSummary: A two-parameter utility model for responder behavior where utility is derived from the actual offer (split_self) reduced by a penalty applied when the offer falls short of a scaled fairness reference. The fairness reference is computed from the participant\u2019s token share of the total tokens multiplied by the combined earning, and is modulated by the fairness scaling parameter tau. The inequity aversion parameter alpha determines the sensitivity to deviations below the (tau-scaled) reference.\nBIC: 35.25002573222929\nParameter Recovery:\n- alpha: r = 0.501\n- tau: r = 0.863\nModel 3:\nSpecification: U_accept = (1 - alpha) * split_self + alpha * (tau * ((token_self) / (token_self + token_opp)) * combined_earning)\nSummary: This model posits that responders compute the utility of accepting an offer by balancing the actual monetary offer with an expected fair share derived from their token contribution. The model uses a convex combination of split_self and a scaled fairness reference, where alpha (0 to 1) determines the weighting of fairness relative to pure self-interest, and tau (0 to 10) scales the fairness reference.\nBIC: 45.67592971143451\nParameter Recovery:\n- alpha: r = 0.456\n- tau: r = 0.592\nModel 4:\nSpecification: Let fair_share = (token_self / (token_self + token_opp)) * combined_earning\n\nThen:\n\u2003\u2003U_accept = { split_self\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003if split_self \u2265 fair_share\n\u2003\u2003\u2003\u2003\u2003\u2003   split_self \u2013 alpha \u00b7 (fair_share \u2013 split_self)\u00b2\u2003if split_self < fair_share }\nSummary: A piecewise utility model for responder behavior where the utility of accepting an offer equals the monetary amount offered, except when the offer falls below a fairness reference computed from the participant\u2019s token share of the total earning. In such cases, a quadratic penalty\u2014scaled by the learnable inequity sensitivity parameter alpha\u2014is applied, capturing an escalating aversion to receiving an unfair split.\nBIC: 33.91799996790353\nParameter Recovery:\n- alpha: r = 0.875\nModel 5:\nSpecification: Let fair_share = (token_self / (token_self + token_opp)) * combined_earning.\nThen, the utility for accepting an offer is defined as:\n\u2003\u2003U_accept = split_self + tau * log((split_self + epsilon) / fair_share)\nSummary: A model of responder behavior where the utility for accepting an offer integrates the direct monetary benefit with a logarithmic fairness adjustment. The fairness reference is derived from the participant's token share of the combined earnings, and a single learnable parameter, tau, scales the impact of deviations from this fairness standard.\nBIC: 33.930812889198855\nParameter Recovery:\n- tau: r = 0.951\nModel 6:\nSpecification: U_accept = split_self - beta * ( max(0, (token_self/(token_self + token_opp))*combined_earning - split_self) )^(gamma)\nSummary: A utility model for responder behavior that computes a fairness reference based on token contributions and total earnings, then applies a non-linear penalty to offers falling short of this reference. The utility is the actual monetary offer (split_self) reduced by beta times the fairness shortfall raised to the power of gamma.\nModel 7:\nSpecification: U_accept = log(1 + split_self) - alpha * log(1 + max(0, ((token_self / (token_self + token_opp)) * combined_earning) - split_self))\nSummary: A reference-dependent utility model that applies logarithmic (diminishing) sensitivity to both the offered monetary amount and any shortfall relative to a fairness benchmark computed from token contributions. The single learnable parameter, alpha, scales the penalty for offers below the fairness reference.\nBIC: 37.49636326995195\nParameter Recovery:\n- alpha: r = 0.916\nModel 8:\nSpecification: Let fair_share = (token_self/(token_self + token_opp)) * combined_earning  \nLet d = max(0, fair_share - split_self)  \nU_accept = split_self - alpha * d - tau * (d)^2\nSummary: A two-parameter utility model for responder decisions where the utility of accepting an offer is the proposed monetary share reduced by a penalty applied when the offer falls short of a fairness benchmark (derived from the participant\u2019s token contribution). The penalty is composed of a linear term and an additional quadratic term, capturing both the immediate sensitivity and the escalating aversion to unfair splits.\nBIC: 34.81986374486485\nParameter Recovery:\n- alpha: r = 0.508\n- tau: r = 0.364\nModel 9:\nSpecification: Let fair_share = (token_self / (token_self + token_opp)) * combined_earning.\nThen:\n\u2003\u2003U_accept = split_self - tau * (split_self - fair_share)^2.\nSummary: The model calculates a fairness reference based on the token ratio multiplied by the combined earnings. It then derives the utility for accepting an offer by subtracting a quadratic penalty\u2014scaled by a single learnable parameter tau\u2014from the offered monetary amount. This symmetric penalty for any deviation from the fairness benchmark captures the responder's sensitivity to unfair splits.\nBIC: 34.25802432850235\nParameter Recovery:\n- tau: r = 0.770",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the given task. The model should obtain the utility, (not the probability of choosing an action).  Your goal is to eventually explore the entire space of possible explainations and mechanisms by which the observed behavior arises.\n\nYour model should use the given variables appropriately, but does not necessary need to use all or even most of the variables. Do not include the model for the utility of rejecting an offer. \n\nThe model should:\n1. Predict only responder behavior.\n2. Build on relevant psychological principles.\n3. Be considerate of high covariance between learnable parameters as the model will have to pass parameter recovery tests.\n4. Be applicable to the dataset given within the task description (i.e. the model should be able to be run using only the provided dataset structure).\n5. Not include parameters to simulate general stochasticity of behavior, because this will be handled later by a temperature parameter.\n6. Should have no more than two learnable parameters.\n7. This specific model should calculate the utility of an action, which will then be used to determine the probability of choosing that action. Negative values should represent a negative utility, and thus an unlikely action.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Use clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'. DO NOT USE 'lambda' AS A PARAMETER NAME.\n\nYou will be given the complete list of models that you have already created. Analyze the models, and notice the absence of possible explanations of behaviors that should be tested. You should start with simple obvious explanations, and as you notice these being thoroughly explored you should shift to fundamentally different models of behavior. Pay less attention to the names of the variables, and how they are actually interacting with the given behavioral data. If there are no previous models, start with one learnable parameter, then ensure the space of possible models is thoroughly explored with one parameter before moving to two parameters, etc.\n\nYour results will be scored on a combination of BIC with a penalization for number of learned parameters, the ability to recover those learned parameters, and the ability of those parameters to account for the differences in behaviors among varying groups of people.\n\nPrevious Models:\nModel 1:\nSpecification: U_accept = split_self - alpha * max(0, ( (token_self / (token_self + token_opp)) * combined_earning - split_self ))\nSummary: The model computes the utility for a responder\u2019s acceptance decision by comparing the actual monetary offer to a fair share calculated from the participant's proportional contribution. If the offer falls short of this fair share, a penalty\u2014scaled by the inequity aversion parameter alpha\u2014is applied. The formulation captures a psychological sensitivity to disadvantageous inequity in a single-parameter specification.\nBIC: 34.61021336553505\nParameter Recovery:\n- alpha: r = 0.922\nModel 2:\nSpecification: U_accept = split_self - alpha * max(0, (tau * (token_self / (token_self + token_opp)) * combined_earning) - split_self)\nSummary: A two-parameter utility model for responder behavior where utility is derived from the actual offer (split_self) reduced by a penalty applied when the offer falls short of a scaled fairness reference. The fairness reference is computed from the participant\u2019s token share of the total tokens multiplied by the combined earning, and is modulated by the fairness scaling parameter tau. The inequity aversion parameter alpha determines the sensitivity to deviations below the (tau-scaled) reference.\nBIC: 35.25002573222929\nParameter Recovery:\n- alpha: r = 0.501\n- tau: r = 0.863\nModel 3:\nSpecification: U_accept = (1 - alpha) * split_self + alpha * (tau * ((token_self) / (token_self + token_opp)) * combined_earning)\nSummary: This model posits that responders compute the utility of accepting an offer by balancing the actual monetary offer with an expected fair share derived from their token contribution. The model uses a convex combination of split_self and a scaled fairness reference, where alpha (0 to 1) determines the weighting of fairness relative to pure self-interest, and tau (0 to 10) scales the fairness reference.\nBIC: 45.67592971143451\nParameter Recovery:\n- alpha: r = 0.456\n- tau: r = 0.592\nModel 4:\nSpecification: Let fair_share = (token_self / (token_self + token_opp)) * combined_earning\n\nThen:\n\u2003\u2003U_accept = { split_self\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003if split_self \u2265 fair_share\n\u2003\u2003\u2003\u2003\u2003\u2003   split_self \u2013 alpha \u00b7 (fair_share \u2013 split_self)\u00b2\u2003if split_self < fair_share }\nSummary: A piecewise utility model for responder behavior where the utility of accepting an offer equals the monetary amount offered, except when the offer falls below a fairness reference computed from the participant\u2019s token share of the total earning. In such cases, a quadratic penalty\u2014scaled by the learnable inequity sensitivity parameter alpha\u2014is applied, capturing an escalating aversion to receiving an unfair split.\nBIC: 33.91799996790353\nParameter Recovery:\n- alpha: r = 0.875\nModel 5:\nSpecification: Let fair_share = (token_self / (token_self + token_opp)) * combined_earning.\nThen, the utility for accepting an offer is defined as:\n\u2003\u2003U_accept = split_self + tau * log((split_self + epsilon) / fair_share)\nSummary: A model of responder behavior where the utility for accepting an offer integrates the direct monetary benefit with a logarithmic fairness adjustment. The fairness reference is derived from the participant's token share of the combined earnings, and a single learnable parameter, tau, scales the impact of deviations from this fairness standard.\nBIC: 33.930812889198855\nParameter Recovery:\n- tau: r = 0.951\nModel 6:\nSpecification: U_accept = split_self - beta * ( max(0, (token_self/(token_self + token_opp))*combined_earning - split_self) )^(gamma)\nSummary: A utility model for responder behavior that computes a fairness reference based on token contributions and total earnings, then applies a non-linear penalty to offers falling short of this reference. The utility is the actual monetary offer (split_self) reduced by beta times the fairness shortfall raised to the power of gamma.\nModel 7:\nSpecification: U_accept = log(1 + split_self) - alpha * log(1 + max(0, ((token_self / (token_self + token_opp)) * combined_earning) - split_self))\nSummary: A reference-dependent utility model that applies logarithmic (diminishing) sensitivity to both the offered monetary amount and any shortfall relative to a fairness benchmark computed from token contributions. The single learnable parameter, alpha, scales the penalty for offers below the fairness reference.\nBIC: 37.49636326995195\nParameter Recovery:\n- alpha: r = 0.916\nModel 8:\nSpecification: Let fair_share = (token_self/(token_self + token_opp)) * combined_earning  \nLet d = max(0, fair_share - split_self)  \nU_accept = split_self - alpha * d - tau * (d)^2\nSummary: A two-parameter utility model for responder decisions where the utility of accepting an offer is the proposed monetary share reduced by a penalty applied when the offer falls short of a fairness benchmark (derived from the participant\u2019s token contribution). The penalty is composed of a linear term and an additional quadratic term, capturing both the immediate sensitivity and the escalating aversion to unfair splits.\nBIC: 34.81986374486485\nParameter Recovery:\n- alpha: r = 0.508\n- tau: r = 0.364\nModel 9:\nSpecification: Let fair_share = (token_self / (token_self + token_opp)) * combined_earning.\nThen:\n\u2003\u2003U_accept = split_self - tau * (split_self - fair_share)^2.\nSummary: The model calculates a fairness reference based on the token ratio multiplied by the combined earnings. It then derives the utility for accepting an offer by subtracting a quadratic penalty\u2014scaled by a single learnable parameter tau\u2014from the offered monetary amount. This symmetric penalty for any deviation from the fairness benchmark captures the responder's sensitivity to unfair splits.\nBIC: 34.25802432850235\nParameter Recovery:\n- tau: r = 0.770\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "Step-by-step reasoning:\n\n1. Key psychological mechanisms:\n\u2003\u2022 Responders may care both about the absolute monetary gain (split_self) and a fairness reference based on their token contribution (fair_share). \n\u2003\u2022 In many social decision\u2010making tasks, individuals trade off pure monetary self\u2010interest against fairness concerns. \n\u2003\u2022 Rather than linearly subtracting a penalty for inequity, responders may combine these two aspects in a more integrated (aggregative) manner.\n\n2. Mechanism interaction:\n\u2003\u2022 The fairness reference is computed as the share of total earnings that the participant \"deserves\" based on their token contribution:\n\u2003\u2003fair_share = (token_self/(token_self + token_opp)) \u00d7 combined_earning.\n\u2003\u2022 The actual offered money (split_self) and this fairness reference are then combined using a constant elasticity of substitution (CES) aggregator. \n\u2003\u2022 The CES formulation allows us to vary both the weight placed on the fairness concern and the curvature (i.e. the substitutability) between the two components.\n\n3. Mathematical form:\n\u2003\u2022 Define two learnable parameters:\n\u2003\u2003\u2013 tau_param (\u03c4) \u2208 [0, 1] captures the weight placed on the fairness reference. A tau_param of 0 implies pure self-interest (utility equals split_self) while a tau_param of 1 implies complete reliance on the fairness share.\n\u2003\u2003\u2013 rho_param (\u03c1) \u2208 [\u201310, 10] captures the curvature of the aggregation. When \u03c1 \u2192 0 the aggregation becomes the geometric mean, and when \u03c1 is very negative the CES function approaches a \u201cmin\u201d function (i.e. a strong sensitivity to the lower of the two values).\n\u2003\u2022 The combined utility (U_accept) is then modeled as a CES function of split_self and fair_share:\n\u2003\u2003U_accept = [ (1 \u2013 \u03c4)\u00b7(split_self)^\u03c1 + \u03c4\u00b7(fair_share)^\u03c1 ]^(1/\u03c1)\n\n4. Parameters needed:\n\u2003\u2022 tau_param (\u03c4): Weight parameter (bounded between 0 and 1).\n\u2003\u2022 rho_param (\u03c1): Curvature parameter (bounded between \u201310 and 10).\n\u2003\u2022 All other variables come directly from the data.\n\n5. Mapping to observable behavior:\n\u2003\u2022 When split_self equals fair_share (i.e. the offer is \u201cfair\u201d), U_accept equals split_self.\n\u2003\u2022 If the offer is lower than the fairness reference, and if \u03c4 is high, then utility declines nonlinearly based on the curvature \u03c1.\n\u2003\u2022 Conversely, offers exceeding fair_share are integrated with the monetary benefit based on the same CES aggregator.\n\u2003\u2022 This model is entirely specified using observed variables split_self, token_self, token_opp, and combined_earning, with the learnable parameters calibrating individual sensitivity to fairness and the substitution between self-interest and fairness.\n\nBelow is the formal mathematical specification, variable descriptions, and short summary.\n\n<MODEL>\nLet fair_share = (token_self/(token_self + token_opp)) * combined_earning\n\nU_accept = [ (1 - tau_param) * (split_self)^(rho_param) + tau_param * (fair_share)^(rho_param) ]^(1/rho_param)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_accept\": {\n      \"description\": \"Utility for accepting an offer, computed as a CES aggregation of the actual monetary offer and the fairness reference\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"tau_param\": {\n      \"description\": \"Learnable weight parameter that determines the emphasis on fairness reference in the utility aggregation, with 0 indicating pure self-interest and 1 indicating full reliance on the fairness reference\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"rho_param\": {\n      \"description\": \"Learnable curvature parameter governing the substitutability between the monetary offer and fairness reference. Values near 0 yield a geometric mean, while very negative values approach a min function.\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Monetary share proposed to the participant (in \u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total earned amount (in \u00a3), where each token is worth \u00a33\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<SUMMARY>\nThis model computes the utility for a responder\u2019s acceptance decision as a constant elasticity of substitution (CES) aggregator between the actual offered amount (split_self) and a fairness reference derived from token contributions (fair_share). Two learnable parameters govern the integration: tau_param sets the relative weight of fairness and rho_param controls the curvature of substitution between self-interest and fairness.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return the utility values for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['tau_param', 'rho_param']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of utility values for each trial\n\n                Your code will be implemented within the following code block:\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    utility_values = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        utility_values.append(beta + (epsilon * E) + (eta * N))\n    return utility_values\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE UTLITY VALUES.\n                Model Specification:\n                Let fair_share = (token_self/(token_self + token_opp)) * combined_earning\n\nU_accept = [ (1 - tau_param) * (split_self)^(rho_param) + tau_param * (fair_share)^(rho_param) ]^(1/rho_param)\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"U_accept\": {\n      \"description\": \"Utility for accepting an offer, computed as a CES aggregation of the actual monetary offer and the fairness reference\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"tau_param\": {\n      \"description\": \"Learnable weight parameter that determines the emphasis on fairness reference in the utility aggregation, with 0 indicating pure self-interest and 1 indicating full reliance on the fairness reference\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"rho_param\": {\n      \"description\": \"Learnable curvature parameter governing the substitutability between the monetary offer and fairness reference. Values near 0 yield a geometric mean, while very negative values approach a min function.\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Monetary share proposed to the participant (in \\u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total earned amount (in \\u00a3), where each token is worth \\u00a33\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "```python\nimport json\nimport math\n\ndef simulate_model(trial_data, tau_param=0.5, rho_param=0.5):\n    utility_values = []\n    for trial in trial_data:\n        try:\n            token_self = trial['token_self']\n            token_opp = trial['token_opp']\n            combined_earning = trial['combined_earning']\n            split_self = trial['split_self']\n\n            fair_share = (token_self / (token_self + token_opp)) * combined_earning\n\n            if rho_param == 0:  # Handle the case where rho_param is 0 to avoid ZeroDivisionError\n                U_accept = split_self**(1-tau_param) * fair_share**tau_param\n            else:\n                U_accept = ((1 - tau_param) * (split_self)**rho_param + tau_param * (fair_share)**rho_param)**(1/rho_param)\n\n            utility_values.append(U_accept)\n\n        except (KeyError, ZeroDivisionError, ValueError) as e:\n            print(f\"Error processing trial {trial}: {e}\")\n            utility_values.append(float('nan')) # Handle errors gracefully\n\n    return utility_values\n\n# Example Usage (replace with your actual data)\ndata_json = '[{\"token_self\": 10, \"token_opp\": 5, \"combined_earning\": 45, \"split_self\": 20}, {\"token_self\": 5, \"token_opp\": 10, \"combined_earning\": 45, \"split_self\": 15}]'\ndata = json.loads(data_json)\nresults = simulate_model(data, tau_param=0.3, rho_param=-1)\nprint(json.dumps({\"results\": results}))\n```"
    }
  ],
  "learnable_parameters": {
    "tau_param": {
      "description": "Learnable weight parameter that determines the emphasis on fairness reference in the utility aggregation, with 0 indicating pure self-interest and 1 indicating full reliance on the fairness reference",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "rho_param": {
      "description": "Learnable curvature parameter governing the substitutability between the monetary offer and fairness reference. Values near 0 yield a geometric mean, while very negative values approach a min function.",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "Let fair_share = (token_self/(token_self + token_opp)) * combined_earning\n\nU_accept = [ (1 - tau_param) * (split_self)^(rho_param) + tau_param * (fair_share)^(rho_param) ]^(1/rho_param)",
  "variable_descriptions": {
    "U_accept": {
      "description": "Utility for accepting an offer, computed as a CES aggregation of the actual monetary offer and the fairness reference",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "tau_param": {
      "description": "Learnable weight parameter that determines the emphasis on fairness reference in the utility aggregation, with 0 indicating pure self-interest and 1 indicating full reliance on the fairness reference",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "rho_param": {
      "description": "Learnable curvature parameter governing the substitutability between the monetary offer and fairness reference. Values near 0 yield a geometric mean, while very negative values approach a min function.",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "split_self": {
      "description": "Monetary share proposed to the participant (in \u00a3)",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Number of tokens found by the participant",
      "range": {
        "min": 1,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent",
      "range": {
        "min": 1,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "combined_earning": {
      "description": "Total earned amount (in \u00a3), where each token is worth \u00a33",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    }
  },
  "model_summary": "This model computes the utility for a responder\u2019s acceptance decision as a constant elasticity of substitution (CES) aggregator between the actual offered amount (split_self) and a fairness reference derived from token contributions (fair_share). Two learnable parameters govern the integration: tau_param sets the relative weight of fairness and rho_param controls the curvature of substitution between self-interest and fairness.",
  "full_reasoning": "Step-by-step reasoning:\n\n1. Key psychological mechanisms:\n\u2003\u2022 Responders may care both about the absolute monetary gain (split_self) and a fairness reference based on their token contribution (fair_share). \n\u2003\u2022 In many social decision\u2010making tasks, individuals trade off pure monetary self\u2010interest against fairness concerns. \n\u2003\u2022 Rather than linearly subtracting a penalty for inequity, responders may combine these two aspects in a more integrated (aggregative) manner.\n\n2. Mechanism interaction:\n\u2003\u2022 The fairness reference is computed as the share of total earnings that the participant \"deserves\" based on their token contribution:\n\u2003\u2003fair_share = (token_self/(token_self + token_opp)) \u00d7 combined_earning.\n\u2003\u2022 The actual offered money (split_self) and this fairness reference are then combined using a constant elasticity of substitution (CES) aggregator. \n\u2003\u2022 The CES formulation allows us to vary both the weight placed on the fairness concern and the curvature (i.e. the substitutability) between the two components.\n\n3. Mathematical form:\n\u2003\u2022 Define two learnable parameters:\n\u2003\u2003\u2013 tau_param (\u03c4) \u2208 [0, 1] captures the weight placed on the fairness reference. A tau_param of 0 implies pure self-interest (utility equals split_self) while a tau_param of 1 implies complete reliance on the fairness share.\n\u2003\u2003\u2013 rho_param (\u03c1) \u2208 [\u201310, 10] captures the curvature of the aggregation. When \u03c1 \u2192 0 the aggregation becomes the geometric mean, and when \u03c1 is very negative the CES function approaches a \u201cmin\u201d function (i.e. a strong sensitivity to the lower of the two values).\n\u2003\u2022 The combined utility (U_accept) is then modeled as a CES function of split_self and fair_share:\n\u2003\u2003U_accept = [ (1 \u2013 \u03c4)\u00b7(split_self)^\u03c1 + \u03c4\u00b7(fair_share)^\u03c1 ]^(1/\u03c1)\n\n4. Parameters needed:\n\u2003\u2022 tau_param (\u03c4): Weight parameter (bounded between 0 and 1).\n\u2003\u2022 rho_param (\u03c1): Curvature parameter (bounded between \u201310 and 10).\n\u2003\u2022 All other variables come directly from the data.\n\n5. Mapping to observable behavior:\n\u2003\u2022 When split_self equals fair_share (i.e. the offer is \u201cfair\u201d), U_accept equals split_self.\n\u2003\u2022 If the offer is lower than the fairness reference, and if \u03c4 is high, then utility declines nonlinearly based on the curvature \u03c1.\n\u2003\u2022 Conversely, offers exceeding fair_share are integrated with the monetary benefit based on the same CES aggregator.\n\u2003\u2022 This model is entirely specified using observed variables split_self, token_self, token_opp, and combined_earning, with the learnable parameters calibrating individual sensitivity to fairness and the substitution between self-interest and fairness.\n\nBelow is the formal mathematical specification, variable descriptions, and short summary.\n\n<MODEL>\nLet fair_share = (token_self/(token_self + token_opp)) * combined_earning\n\nU_accept = [ (1 - tau_param) * (split_self)^(rho_param) + tau_param * (fair_share)^(rho_param) ]^(1/rho_param)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_accept\": {\n      \"description\": \"Utility for accepting an offer, computed as a CES aggregation of the actual monetary offer and the fairness reference\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"tau_param\": {\n      \"description\": \"Learnable weight parameter that determines the emphasis on fairness reference in the utility aggregation, with 0 indicating pure self-interest and 1 indicating full reliance on the fairness reference\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"rho_param\": {\n      \"description\": \"Learnable curvature parameter governing the substitutability between the monetary offer and fairness reference. Values near 0 yield a geometric mean, while very negative values approach a min function.\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Monetary share proposed to the participant (in \u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total earned amount (in \u00a3), where each token is worth \u00a33\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<SUMMARY>\nThis model computes the utility for a responder\u2019s acceptance decision as a constant elasticity of substitution (CES) aggregator between the actual offered amount (split_self) and a fairness reference derived from token contributions (fair_share). Two learnable parameters govern the integration: tau_param sets the relative weight of fairness and rho_param controls the curvature of substitution between self-interest and fairness.\n</SUMMARY>",
  "current_model": "Specification: Let fair_share = (token_self/(token_self + token_opp)) * combined_earning\n\nU_accept = [ (1 - tau_param) * (split_self)^(rho_param) + tau_param * (fair_share)^(rho_param) ]^(1/rho_param)\nSummary: This model computes the utility for a responder\u2019s acceptance decision as a constant elasticity of substitution (CES) aggregator between the actual offered amount (split_self) and a fairness reference derived from token contributions (fair_share). Two learnable parameters govern the integration: tau_param sets the relative weight of fairness and rho_param controls the curvature of substitution between self-interest and fairness.",
  "simulation_code": "def simulate_model(trial_data, tau_param=0.5, rho_param=0.5):\n    utility_values = []\n    for trial in trial_data:\n        try:\n            token_self = trial['token_self']\n            token_opp = trial['token_opp']\n            combined_earning = trial['combined_earning']\n            split_self = trial['split_self']\n\n            fair_share = (token_self / (token_self + token_opp)) * combined_earning\n\n            if rho_param == 0:  # Handle the case where rho_param is 0 to avoid ZeroDivisionError\n                U_accept = split_self**(1-tau_param) * fair_share**tau_param\n            else:\n                U_accept = ((1 - tau_param) * (split_self)**rho_param + tau_param * (fair_share)**rho_param)**(1/rho_param)\n\n            utility_values.append(U_accept)\n\n        except (KeyError, ZeroDivisionError, ValueError) as e:\n            print(f\"Error processing trial {trial}: {e}\")\n            utility_values.append(float('nan')) # Handle errors gracefully\n\n    return utility_values",
  "fitting_results": [
    {
      "tau_param": 0.0,
      "rho_param": 8.453870437544223,
      "success": true,
      "log_likelihood": -62.30012985731314,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "tau_param": 0.0,
      "rho_param": -9.116580894797695,
      "success": true,
      "log_likelihood": -33.425129870232766,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "tau_param": 0.0,
      "rho_param": -7.430259476993434,
      "success": true,
      "log_likelihood": -31.025129870773007,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "tau_param": 0.0,
      "rho_param": 3.800661360319534,
      "success": true,
      "log_likelihood": -36.35012986957564,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "tau_param": 0.0,
      "rho_param": -3.788333201397611,
      "success": true,
      "log_likelihood": -38.45012986711419,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "tau_param": 0.0,
      "rho_param": -3.480929003698876,
      "success": true,
      "log_likelihood": -23.75012987450438,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "tau_param": 0.9444748911312552,
      "rho_param": 10.0,
      "success": true,
      "log_likelihood": -2.766797392236479,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "tau_param": 0.0,
      "rho_param": 8.85417492466122,
      "success": true,
      "log_likelihood": -23.000129874103948,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "tau_param": 0.9444919395255262,
      "rho_param": 10.0,
      "success": true,
      "log_likelihood": -2.7667973924907776,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "tau_param": 0.0,
      "rho_param": -5.250520870440557,
      "success": true,
      "log_likelihood": -40.70012986753074,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "tau_param": 0.0,
      "rho_param": -2.109267528465994,
      "success": true,
      "log_likelihood": -35.75012986929096,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "tau_param": 0.0,
      "rho_param": -1.0798077871409282,
      "success": true,
      "log_likelihood": -59.67512985868634,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "tau_param": 0.0,
      "rho_param": 7.7690118275491695,
      "success": true,
      "log_likelihood": -39.27512986701045,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "tau_param": 1.0,
      "rho_param": 0.972645779856924,
      "success": true,
      "log_likelihood": -2.7867215299090393,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "tau_param": 0.9444842899284904,
      "rho_param": 10.0,
      "success": true,
      "log_likelihood": -2.7667973921581814,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "tau_param": 0.9445088211713207,
      "rho_param": 10.0,
      "success": true,
      "log_likelihood": -2.766797394483627,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "tau_param": 0.9893699682749617,
      "rho_param": 6.841118600190415,
      "success": true,
      "log_likelihood": -2.7862372723860083,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "tau_param": 0.960366076971406,
      "rho_param": -10.0,
      "success": true,
      "log_likelihood": -10.0813744407288,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "tau_param": 0.9302638712902782,
      "rho_param": -10.0,
      "success": true,
      "log_likelihood": -10.78548275574291,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "tau_param": 0.9444861903630878,
      "rho_param": 10.0,
      "success": true,
      "log_likelihood": -2.766797392207603,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "tau_param": 0.0,
      "rho_param": -6.556325892208017,
      "success": true,
      "log_likelihood": -31.325129869982646,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "tau_param": 0.7665549210949348,
      "rho_param": -10.0,
      "success": true,
      "log_likelihood": -12.25981684870338,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "tau_param": 0.0,
      "rho_param": -9.896788599577832,
      "success": true,
      "log_likelihood": -39.95012986772514,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "tau_param": 0.0,
      "rho_param": -9.109986340958546,
      "success": true,
      "log_likelihood": -30.20012987104811,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "tau_param": 0.0,
      "rho_param": -1.4400461233459323,
      "success": true,
      "log_likelihood": -36.42512986759503,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "tau_param": 0.0,
      "rho_param": -2.5665365792765744,
      "success": true,
      "log_likelihood": -27.05012987219164,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "tau_param": 0.0,
      "rho_param": -6.506043693730342,
      "success": true,
      "log_likelihood": -27.87512987270872,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "tau_param": 0.0,
      "rho_param": -1.7359456704293088,
      "success": true,
      "log_likelihood": -48.35012986367309,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "tau_param": 0.8619142194794325,
      "rho_param": -10.0,
      "success": true,
      "log_likelihood": -11.636391187599616,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "tau_param": 0.0,
      "rho_param": -3.8535300914175585,
      "success": true,
      "log_likelihood": -18.500129875357,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "tau_param": 1.0,
      "rho_param": 6.024444971493059,
      "success": true,
      "log_likelihood": -2.7867215299090384,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "tau_param": 0.0,
      "rho_param": -3.092302182453152,
      "success": true,
      "log_likelihood": -62.300129857313145,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "tau_param": 0.0,
      "rho_param": -0.8143203016496807,
      "success": true,
      "log_likelihood": -37.550129868169094,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "tau_param": 0.0,
      "rho_param": -5.404137172569596,
      "success": true,
      "log_likelihood": -39.800129867913874,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "tau_param": 1.0,
      "rho_param": -7.792124277967123,
      "success": true,
      "log_likelihood": -2.7867215299090375,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "tau_param": 0.0,
      "rho_param": 6.772666743955038,
      "success": true,
      "log_likelihood": -20.675129875915243,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "tau_param": 0.0,
      "rho_param": -0.5921096695862276,
      "success": true,
      "log_likelihood": -19.400129876163614,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "tau_param": 0.0,
      "rho_param": -5.978060915109552,
      "success": true,
      "log_likelihood": -34.62512986917737,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "tau_param": 0.0,
      "rho_param": -0.9932853249749047,
      "success": true,
      "log_likelihood": -25.02512987233912,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "tau_param": 0.9473781483642125,
      "rho_param": -10.0,
      "success": true,
      "log_likelihood": -10.483877182775744,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "tau_param": 0.0,
      "rho_param": -0.14752416085076217,
      "success": true,
      "log_likelihood": -28.850129871222176,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "tau_param": 0.0,
      "rho_param": 3.169339772498971,
      "success": true,
      "log_likelihood": -52.32512986186411,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "tau_param": 0.5013387963020087,
      "rho_param": 10.0,
      "success": true,
      "log_likelihood": -7.177821743214598,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "tau_param": 0.0,
      "rho_param": 5.496393818249008,
      "success": true,
      "log_likelihood": -28.250129872483445,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "tau_param": 0.0,
      "rho_param": -2.39462591245434,
      "success": true,
      "log_likelihood": -25.02512987395883,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "tau_param": 0.0,
      "rho_param": -3.0055477090070952,
      "success": true,
      "log_likelihood": -18.425129876147352,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "tau_param": 0.0,
      "rho_param": -7.035949173796381,
      "success": true,
      "log_likelihood": -31.325129870550626,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "tau_param": 0.0,
      "rho_param": -6.211942519850198,
      "success": true,
      "log_likelihood": -39.2751298687245,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "tau_param": 0.0,
      "rho_param": 0.876217999487495,
      "success": true,
      "log_likelihood": -41.7501298657224,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "tau_param": 1.13505691880864e-06,
      "rho_param": 8.391133221224122,
      "success": true,
      "log_likelihood": -32.28343827009582,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "tau_param": 0.0,
      "rho_param": 2.0713702548985737,
      "success": true,
      "log_likelihood": -21.500129875183312,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "tau_param": 0.0,
      "rho_param": -6.466246512334216,
      "success": true,
      "log_likelihood": -58.47512985898823,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "tau_param": 0.0,
      "rho_param": -9.464221907437407,
      "success": true,
      "log_likelihood": -29.450129871560478,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "tau_param": 0.0,
      "rho_param": 5.8695861370027265,
      "success": true,
      "log_likelihood": -26.900129872995794,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "tau_param": 0.0,
      "rho_param": -5.912249246185518,
      "success": true,
      "log_likelihood": -43.550129864945255,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "tau_param": 0.0,
      "rho_param": 2.334571973797129,
      "success": true,
      "log_likelihood": -43.92512986554439,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "tau_param": 0.0,
      "rho_param": 7.0979899934193496,
      "success": true,
      "log_likelihood": -48.12512986354881,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "tau_param": 1.0,
      "rho_param": -5.135339757080876,
      "success": true,
      "log_likelihood": -11.786721525050178,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "tau_param": 0.0,
      "rho_param": -9.090284836792728,
      "success": true,
      "log_likelihood": -59.90012985840638,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "tau_param": 9.616066829664169e-06,
      "rho_param": 5.435035306361667,
      "success": true,
      "log_likelihood": -14.824792311145947,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "tau_param": 0.0,
      "rho_param": -3.4089290672249293,
      "success": true,
      "log_likelihood": -27.500129872162688,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "tau_param": 0.0,
      "rho_param": 6.745044898414177,
      "success": true,
      "log_likelihood": -34.77512986858791,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "tau_param": 0.0,
      "rho_param": -5.965799233050153,
      "success": true,
      "log_likelihood": -62.30012985731315,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "tau_param": 0.0,
      "rho_param": 8.415594598644166,
      "success": true,
      "log_likelihood": -35.45012986953837,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "tau_param": 0.0,
      "rho_param": -0.5176763030066318,
      "success": true,
      "log_likelihood": -50.67512986358381,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "tau_param": 0.0,
      "rho_param": -8.64324099053995,
      "success": true,
      "log_likelihood": -27.72512987277475,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "tau_param": 0.9667418314715545,
      "rho_param": -10.0,
      "success": true,
      "log_likelihood": -9.872099965681695,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "tau_param": 0.0,
      "rho_param": 0.05186836199037381,
      "success": true,
      "log_likelihood": -13.400129877080902,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "tau_param": 0.0,
      "rho_param": -0.4031229135802233,
      "success": true,
      "log_likelihood": -25.85012987424094,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "tau_param": 0.07408674434609315,
      "rho_param": 3.6347599656451135,
      "success": true,
      "log_likelihood": -11.577083687432404,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "tau_param": 0.0,
      "rho_param": -6.935925512142335,
      "success": true,
      "log_likelihood": -59.75012985896691,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "tau_param": 0.0,
      "rho_param": -3.85351143444863,
      "success": true,
      "log_likelihood": -58.1001298589948,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "tau_param": 0.0,
      "rho_param": -3.407019100395438,
      "success": true,
      "log_likelihood": -30.575129871921042,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "tau_param": 3.4677021712934353e-06,
      "rho_param": 6.920292226329795,
      "success": true,
      "log_likelihood": -16.02099333531772,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "tau_param": 0.06606872634213476,
      "rho_param": -10.0,
      "success": true,
      "log_likelihood": -34.54065686264881,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "tau_param": 0.0,
      "rho_param": -7.695554554779695,
      "success": true,
      "log_likelihood": -22.10012987430925,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "tau_param": 0.9816862223334231,
      "rho_param": -9.351894026995774,
      "success": true,
      "log_likelihood": -8.89037823571658,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "tau_param": 0.0298510357944477,
      "rho_param": -10.0,
      "success": true,
      "log_likelihood": -66.11520077604062,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "tau_param": 0.0,
      "rho_param": -7.628097123816427,
      "success": true,
      "log_likelihood": -26.9751298728098,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "tau_param": 0.0,
      "rho_param": 0.1663513918409666,
      "success": true,
      "log_likelihood": -62.30012985731314,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "tau_param": 0.0,
      "rho_param": -6.532719003688434,
      "success": true,
      "log_likelihood": -33.57512986904865,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "tau_param": 0.024411949711982166,
      "rho_param": 9.367027679202874,
      "success": true,
      "log_likelihood": -10.946976898959722,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "tau_param": 0.015745091063551483,
      "rho_param": -7.852033856458453,
      "success": true,
      "log_likelihood": -60.71059662582436,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "tau_param": 0.0,
      "rho_param": -4.203852195208794,
      "success": true,
      "log_likelihood": -28.4751298734717,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "tau_param": 0.00011986905719011849,
      "rho_param": 5.653361752815354,
      "success": true,
      "log_likelihood": -31.218725305934303,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "tau_param": 0.0,
      "rho_param": -10.0,
      "success": true,
      "log_likelihood": -60.50012985790157,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "tau_param": 0.0,
      "rho_param": 0.2580226028814147,
      "success": true,
      "log_likelihood": -23.075129874039536,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "tau_param": 0.028071616518608913,
      "rho_param": -9.290643505700938,
      "success": true,
      "log_likelihood": -53.24187895606516,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "tau_param": 0.9951269223508485,
      "rho_param": -9.79699539442796,
      "success": true,
      "log_likelihood": -7.788106548174908,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "tau_param": 0.0,
      "rho_param": 1.1387690843925002,
      "success": true,
      "log_likelihood": -29.450129873413363,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "tau_param": 0.0,
      "rho_param": 0.47656428256511674,
      "success": true,
      "log_likelihood": -23.825129873641615,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "tau_param": {
        "r": 0.34081355345089737,
        "p": 0.0005208933382408386
      },
      "rho_param": {
        "r": 0.3357979620562248,
        "p": 0.0006366449423157796
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 66.80233137460259,
  "bic_error": "'ModelOutput' object has no attribute 'metrics'",
  "recovery_summary": "Parameter Recovery:\n- tau_param: r = 0.341\n- rho_param: r = 0.336",
  "previous_models": [
    "Specification: Let fair_share = (token_self/(token_self + token_opp)) * combined_earning\n\nU_accept = [ (1 - tau_param) * (split_self)^(rho_param) + tau_param * (fair_share)^(rho_param) ]^(1/rho_param)\nSummary: This model computes the utility for a responder\u2019s acceptance decision as a constant elasticity of substitution (CES) aggregator between the actual offered amount (split_self) and a fairness reference derived from token contributions (fair_share). Two learnable parameters govern the integration: tau_param sets the relative weight of fairness and rho_param controls the curvature of substitution between self-interest and fairness.\nBIC: 66.80233137460259\n\nParameter Recovery:\n- tau_param: r = 0.341\n- rho_param: r = 0.336"
  ]
}