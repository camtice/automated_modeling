{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the given task. The model should obtain the utility, (not the probability of choosing an action).  Your goal is to eventually explore the entire space of possible explainations and mechanisms by which the observed behavior arises.\n\nYour model should use the given variables appropriately, but does not necessary need to use all or even most of the variables. Do not include the model for the utility of rejecting an offer. \n\nThe model should:\n1. Predict only responder behavior.\n2. Build on relevant psychological principles.\n3. Be considerate of high covariance between learnable parameters as the model will have to pass parameter recovery tests.\n4. Be applicable to the dataset given within the task description (i.e. the model should be able to be run using only the provided dataset structure).\n5. Not include parameters to simulate general stochasticity of behavior, because this will be handled later by a temperature parameter.\n6. Should have no more than two learnable parameters.\n7. This specific model should calculate the utility of an action, which will then be used to determine the probability of choosing that action. Negative values should represent a negative utility, and thus an unlikely action.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Use clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'. DO NOT USE 'lambda' AS A PARAMETER NAME.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the given task. The model should obtain the utility, (not the probability of choosing an action).  Your goal is to eventually explore the entire space of possible explainations and mechanisms by which the observed behavior arises.\n\nYour model should use the given variables appropriately, but does not necessary need to use all or even most of the variables. Do not include the model for the utility of rejecting an offer. \n\nThe model should:\n1. Predict only responder behavior.\n2. Build on relevant psychological principles.\n3. Be considerate of high covariance between learnable parameters as the model will have to pass parameter recovery tests.\n4. Be applicable to the dataset given within the task description (i.e. the model should be able to be run using only the provided dataset structure).\n5. Not include parameters to simulate general stochasticity of behavior, because this will be handled later by a temperature parameter.\n6. Should have no more than two learnable parameters.\n7. This specific model should calculate the utility of an action, which will then be used to determine the probability of choosing that action. Negative values should represent a negative utility, and thus an unlikely action.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Use clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'. DO NOT USE 'lambda' AS A PARAMETER NAME.\n\nPrevious Models:\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "Step 1: Reasoning\n\n\u2022 Key Psychological Mechanisms:  \n\u2003\u2013 Inequity Aversion: Responders compare the monetary offer (split_self) against what they believe is fair. This fairness benchmark is derived from their own token count relative to the sum of tokens (token_self/(token_self + token_opp)) scaled by the combined_earning.  \n\u2003\u2013 Response to Unfair Offers: When the offer is below the fair share (i.e. disadvantageous inequity), the responder experiences a penalty that reduces utility. Conversely, when the offer is above the fair share (advantageous inequity), a mild penalty (or lower sensitivity) may also be experienced because extreme deviation might evoke discomfort or guilt.  \n\n\u2022 Mechanism Interaction:  \n\u2003The fairness reference (f) is computed on each trial from token_self, token_opp, and combined_earning. The offered split (split_self) is then compared to this expectation. A penalty is imposed that is proportional to the discrepancy. We employ a piecewise linear penalty with two learnable parameters: one (theta_d) for disadvantageous inequity (when f > split_self) and another (theta_a) for advantageous inequity (when split_self > f).  \n\n\u2022 Mathematical Form:  \n\u2003The utility of accepting an offer (recall that this model is applied only to responder behavior) is given by the received amount minus the penalty. The penalty is the product of the inequity aversion parameter (theta_d or theta_a) and the magnitude of the deviation from the fair share. Formally, define:  \n\u2003\u2003f = (token_self / (token_self + token_opp)) \u00d7 combined_earning  \n\u2003Then, the utility of an accepted offer, U, is:  \n\u2003\u2003U = split_self \u2013 theta_d \u00d7 max(f \u2013 split_self, 0) \u2013 theta_a \u00d7 max(split_self \u2013 f, 0)  \nThis formulation naturally reflects that if the offer equals f then U = split_self. If the offer is below f, the penalty reduces U; if it is above f, a different penalty is applied.\n\n\u2022 Calibration Parameters:  \n\u2003Two learnable parameters are used:  \n\u2003\u2003theta_d controls the sensitivity to disadvantageous inequity (f > split_self), and  \n\u2003\u2003theta_a controls the sensitivity to advantageous inequity (split_self > f).  \nBoth parameters will have generous finite bounds (e.g., from 0 to 10), ensuring that their estimates remain within plausible ranges and accommodating potential high covariance during recovery.\n\n\u2022 Mapping to Observable Behavior:  \n\u2003For each trial when the participant is a responder (trial_role = 1), we compute f based on the observed tokens and combined earnings, then calculate U as above using the offer split (split_self). Negative U values indicate that the offer is subjectively poor relative to fairness expectations, and high positive U values indicate acceptable offers. This computed U will be later transformed (with a temperature parameter outside this model) into acceptance probabilities.\n\nBelow is the formal model specification.\n\n<MODEL>\nLet f = (token_self / (token_self + token_opp)) \u00d7 combined_earning  \nU = split_self \u2212 theta_d \u00d7 max(f \u2212 split_self, 0) \u2212 theta_a \u00d7 max(split_self \u2212 f, 0)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the offer, combining monetary gain and fairness deviation penalty.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant, in monetary terms (\u00a3).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant, reflecting their contribution.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent, representing the opponent's contribution.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total amount of money earned in that trial (\u00a3), where each token is worth \u00a33.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"theta_d\": {\n      \"description\": \"Learnable disadvantageous inequity aversion parameter, governing the penalty for receiving less than the fair share.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"theta_a\": {\n      \"description\": \"Learnable advantageous inequity parameter, governing the penalty (if any) for receiving more than the fair share.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"f\": {\n      \"description\": \"Fair share calculated as the proportion of participant tokens to total tokens multiplied by the combined earning.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<SUMMARY>\nA utility model for responder behavior that computes the subjective value of an accepted offer by comparing the observed monetary gain (split_self) to a fairness benchmark (f) derived from token contributions and combined earnings. The model imposes distinct linear penalties for disadvantageous and advantageous inequity using two learnable parameters (theta_d and theta_a) with finite bounds, capturing aversion to deviations from fair shares.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return the utility values for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['theta_d', 'theta_a']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of utility values for each trial\n\n                Your code will be implemented within the following code block:\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    utility_values = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        utility_values.append(beta + (epsilon * E) + (eta * N))\n    return utility_values\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE UTLITY VALUES.\n                Model Specification:\n                Let f = (token_self / (token_self + token_opp)) \u00d7 combined_earning  \nU = split_self \u2212 theta_d \u00d7 max(f \u2212 split_self, 0) \u2212 theta_a \u00d7 max(split_self \u2212 f, 0)\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the offer, combining monetary gain and fairness deviation penalty.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant, in monetary terms (\\u00a3).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant, reflecting their contribution.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent, representing the opponent's contribution.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total amount of money earned in that trial (\\u00a3), where each token is worth \\u00a33.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"theta_d\": {\n      \"description\": \"Learnable disadvantageous inequity aversion parameter, governing the penalty for receiving less than the fair share.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"theta_a\": {\n      \"description\": \"Learnable advantageous inequity parameter, governing the penalty (if any) for receiving more than the fair share.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"f\": {\n      \"description\": \"Fair share calculated as the proportion of participant tokens to total tokens multiplied by the combined earning.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "```python\nimport json\nimport math\n\ndef simulate_model(trial_data, theta_d=1, theta_a=1):\n    utility_values = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n        split_self = trial.get(\"split_self\", 0)\n\n        if token_self + token_opp ==0: #Handle division by zero\n            f = 0\n        else:\n            f = (token_self / (token_self + token_opp)) * combined_earning\n\n        U = split_self - theta_d * max(f - split_self, 0) - theta_a * max(split_self - f, 0)\n        utility_values.append(U)\n    return utility_values\n\n# Data as list of dictionaries\ndata_json = \"\"\"\n[\n  {\"token_self\": 5, \"token_opp\": 5, \"combined_earning\": 30, \"split_self\": 15},\n  {\"token_self\": 10, \"token_opp\": 2, \"combined_earning\": 36, \"split_self\": 20},\n  {\"token_self\": 2, \"token_opp\": 10, \"combined_earning\": 36, \"split_self\": 10}\n]\n\"\"\"\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n\n```"
    }
  ],
  "learnable_parameters": {
    "theta_d": {
      "description": "Learnable disadvantageous inequity aversion parameter, governing the penalty for receiving less than the fair share.",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "theta_a": {
      "description": "Learnable advantageous inequity parameter, governing the penalty (if any) for receiving more than the fair share.",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "Let f = (token_self / (token_self + token_opp)) \u00d7 combined_earning  \nU = split_self \u2212 theta_d \u00d7 max(f \u2212 split_self, 0) \u2212 theta_a \u00d7 max(split_self \u2212 f, 0)",
  "variable_descriptions": {
    "U": {
      "description": "Utility of accepting the offer, combining monetary gain and fairness deviation penalty.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "split_self": {
      "description": "Proposed share for the participant, in monetary terms (\u00a3).",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Number of tokens found by the participant, reflecting their contribution.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent, representing the opponent's contribution.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "combined_earning": {
      "description": "Total amount of money earned in that trial (\u00a3), where each token is worth \u00a33.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "theta_d": {
      "description": "Learnable disadvantageous inequity aversion parameter, governing the penalty for receiving less than the fair share.",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "theta_a": {
      "description": "Learnable advantageous inequity parameter, governing the penalty (if any) for receiving more than the fair share.",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "f": {
      "description": "Fair share calculated as the proportion of participant tokens to total tokens multiplied by the combined earning.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "A utility model for responder behavior that computes the subjective value of an accepted offer by comparing the observed monetary gain (split_self) to a fairness benchmark (f) derived from token contributions and combined earnings. The model imposes distinct linear penalties for disadvantageous and advantageous inequity using two learnable parameters (theta_d and theta_a) with finite bounds, capturing aversion to deviations from fair shares.",
  "full_reasoning": "Step 1: Reasoning\n\n\u2022 Key Psychological Mechanisms:  \n\u2003\u2013 Inequity Aversion: Responders compare the monetary offer (split_self) against what they believe is fair. This fairness benchmark is derived from their own token count relative to the sum of tokens (token_self/(token_self + token_opp)) scaled by the combined_earning.  \n\u2003\u2013 Response to Unfair Offers: When the offer is below the fair share (i.e. disadvantageous inequity), the responder experiences a penalty that reduces utility. Conversely, when the offer is above the fair share (advantageous inequity), a mild penalty (or lower sensitivity) may also be experienced because extreme deviation might evoke discomfort or guilt.  \n\n\u2022 Mechanism Interaction:  \n\u2003The fairness reference (f) is computed on each trial from token_self, token_opp, and combined_earning. The offered split (split_self) is then compared to this expectation. A penalty is imposed that is proportional to the discrepancy. We employ a piecewise linear penalty with two learnable parameters: one (theta_d) for disadvantageous inequity (when f > split_self) and another (theta_a) for advantageous inequity (when split_self > f).  \n\n\u2022 Mathematical Form:  \n\u2003The utility of accepting an offer (recall that this model is applied only to responder behavior) is given by the received amount minus the penalty. The penalty is the product of the inequity aversion parameter (theta_d or theta_a) and the magnitude of the deviation from the fair share. Formally, define:  \n\u2003\u2003f = (token_self / (token_self + token_opp)) \u00d7 combined_earning  \n\u2003Then, the utility of an accepted offer, U, is:  \n\u2003\u2003U = split_self \u2013 theta_d \u00d7 max(f \u2013 split_self, 0) \u2013 theta_a \u00d7 max(split_self \u2013 f, 0)  \nThis formulation naturally reflects that if the offer equals f then U = split_self. If the offer is below f, the penalty reduces U; if it is above f, a different penalty is applied.\n\n\u2022 Calibration Parameters:  \n\u2003Two learnable parameters are used:  \n\u2003\u2003theta_d controls the sensitivity to disadvantageous inequity (f > split_self), and  \n\u2003\u2003theta_a controls the sensitivity to advantageous inequity (split_self > f).  \nBoth parameters will have generous finite bounds (e.g., from 0 to 10), ensuring that their estimates remain within plausible ranges and accommodating potential high covariance during recovery.\n\n\u2022 Mapping to Observable Behavior:  \n\u2003For each trial when the participant is a responder (trial_role = 1), we compute f based on the observed tokens and combined earnings, then calculate U as above using the offer split (split_self). Negative U values indicate that the offer is subjectively poor relative to fairness expectations, and high positive U values indicate acceptable offers. This computed U will be later transformed (with a temperature parameter outside this model) into acceptance probabilities.\n\nBelow is the formal model specification.\n\n<MODEL>\nLet f = (token_self / (token_self + token_opp)) \u00d7 combined_earning  \nU = split_self \u2212 theta_d \u00d7 max(f \u2212 split_self, 0) \u2212 theta_a \u00d7 max(split_self \u2212 f, 0)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the offer, combining monetary gain and fairness deviation penalty.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant, in monetary terms (\u00a3).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant, reflecting their contribution.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent, representing the opponent's contribution.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total amount of money earned in that trial (\u00a3), where each token is worth \u00a33.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"theta_d\": {\n      \"description\": \"Learnable disadvantageous inequity aversion parameter, governing the penalty for receiving less than the fair share.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"theta_a\": {\n      \"description\": \"Learnable advantageous inequity parameter, governing the penalty (if any) for receiving more than the fair share.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"f\": {\n      \"description\": \"Fair share calculated as the proportion of participant tokens to total tokens multiplied by the combined earning.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<SUMMARY>\nA utility model for responder behavior that computes the subjective value of an accepted offer by comparing the observed monetary gain (split_self) to a fairness benchmark (f) derived from token contributions and combined earnings. The model imposes distinct linear penalties for disadvantageous and advantageous inequity using two learnable parameters (theta_d and theta_a) with finite bounds, capturing aversion to deviations from fair shares.\n</SUMMARY>",
  "current_model": "Specification: Let f = (token_self / (token_self + token_opp)) \u00d7 combined_earning  \nU = split_self \u2212 theta_d \u00d7 max(f \u2212 split_self, 0) \u2212 theta_a \u00d7 max(split_self \u2212 f, 0)\nSummary: A utility model for responder behavior that computes the subjective value of an accepted offer by comparing the observed monetary gain (split_self) to a fairness benchmark (f) derived from token contributions and combined earnings. The model imposes distinct linear penalties for disadvantageous and advantageous inequity using two learnable parameters (theta_d and theta_a) with finite bounds, capturing aversion to deviations from fair shares.",
  "simulation_code": "def simulate_model(trial_data, theta_d=1, theta_a=1):\n    utility_values = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n        split_self = trial.get(\"split_self\", 0)\n\n        if token_self + token_opp ==0: #Handle division by zero\n            f = 0\n        else:\n            f = (token_self / (token_self + token_opp)) * combined_earning\n\n        U = split_self - theta_d * max(f - split_self, 0) - theta_a * max(split_self - f, 0)\n        utility_values.append(U)\n    return utility_values",
  "fitting_results": [
    {
      "theta_d": 7.68424759701101,
      "theta_a": 1.926746742727573,
      "success": true,
      "log_likelihood": -11.809149638917381,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_d": 1.551226531586127,
      "theta_a": 0.0,
      "success": true,
      "log_likelihood": -16.373035153409482,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_d": 1.6418952335505086,
      "theta_a": 0.0,
      "success": true,
      "log_likelihood": -12.536623085406175,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_d": 1.894078404004106,
      "theta_a": 0.0,
      "success": true,
      "log_likelihood": -14.02606175235914,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_d": 2.26000671435958,
      "theta_a": 0.0,
      "success": true,
      "log_likelihood": -11.165990478075967,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_d": 1.112198585335755,
      "theta_a": 0.0,
      "success": true,
      "log_likelihood": -13.729366392629558,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_d": 0.0,
      "theta_a": 0.0,
      "success": true,
      "log_likelihood": -6.9501298794562105,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_d": 1.0595197558658749,
      "theta_a": 0.0,
      "success": true,
      "log_likelihood": -13.793657024744217,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_d": 0.0,
      "theta_a": 0.0,
      "success": true,
      "log_likelihood": -6.950129879456211,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_d": 2.406379682591458,
      "theta_a": 0.0,
      "success": true,
      "log_likelihood": -11.66739194121266,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_d": 2.2067893179807325,
      "theta_a": 0.0,
      "success": true,
      "log_likelihood": -9.13594209757361,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_d": 6.225928009939014,
      "theta_a": 1.9267296573905999,
      "success": true,
      "log_likelihood": -11.768043501237077,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_d": 2.390771057651447,
      "theta_a": 0.0,
      "success": true,
      "log_likelihood": -10.422283600536616,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_d": 0.0,
      "theta_a": 0.0,
      "success": true,
      "log_likelihood": -6.950129879456208,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_d": 0.0,
      "theta_a": 0.0,
      "success": true,
      "log_likelihood": -6.950129879456209,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_d": 0.0,
      "theta_a": 0.0,
      "success": true,
      "log_likelihood": -6.95012987945621,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_d": 0.0,
      "theta_a": 0.0,
      "success": true,
      "log_likelihood": -6.950129879456209,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_d": 0.18807435398980413,
      "theta_a": 0.0,
      "success": true,
      "log_likelihood": -10.280097766720264,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_d": 0.15499619818448349,
      "theta_a": 0.0,
      "success": true,
      "log_likelihood": -10.895189135932391,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_d": 0.0,
      "theta_a": 0.0,
      "success": true,
      "log_likelihood": -6.950129879456208,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_d": 1.4665795963090082,
      "theta_a": 0.0,
      "success": true,
      "log_likelihood": -15.630634720834758,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_d": 0.26555205018297107,
      "theta_a": 0.0,
      "success": true,
      "log_likelihood": -11.715535548952984,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_d": 1.8188947300998568,
      "theta_a": 0.0,
      "success": true,
      "log_likelihood": -18.7397062131948,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_d": 1.3057243248731887,
      "theta_a": 0.0,
      "success": true,
      "log_likelihood": -17.101735091824864,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_d": 1.884404083357571,
      "theta_a": 0.0,
      "success": true,
      "log_likelihood": -14.24275433471563,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_d": 1.2002228651658493,
      "theta_a": 0.0,
      "success": true,
      "log_likelihood": -15.642404018955531,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_d": 1.3742025972559933,
      "theta_a": 0.0,
      "success": true,
      "log_likelihood": -13.671493923465768,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_d": 4.419228575560045,
      "theta_a": 0.0,
      "success": true,
      "log_likelihood": -5.698332469571375,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_d": 0.11115048744004848,
      "theta_a": 0.0,
      "success": true,
      "log_likelihood": -11.660104839713673,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_d": 0.510886480344048,
      "theta_a": 0.0,
      "success": true,
      "log_likelihood": -16.276660921007522,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_d": 0.0,
      "theta_a": 0.0,
      "success": true,
      "log_likelihood": -6.950129879456209,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_d": 7.684131814489728,
      "theta_a": 1.9266024631403371,
      "success": true,
      "log_likelihood": -11.809149642572056,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_d": 1.4462449258692784,
      "theta_a": 0.0,
      "success": true,
      "log_likelihood": -22.18332168727024,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_d": 2.0391823700443132,
      "theta_a": 0.0,
      "success": true,
      "log_likelihood": -15.412768893686739,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_d": 0.0,
      "theta_a": 0.0,
      "success": true,
      "log_likelihood": -6.9501298794562105,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_d": 0.8212819400954897,
      "theta_a": 0.0,
      "success": true,
      "log_likelihood": -14.915760549691484,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_d": 0.9007509124680572,
      "theta_a": 0.0,
      "success": true,
      "log_likelihood": -12.543270001979213,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_d": 1.7397879476031455,
      "theta_a": 0.0,
      "success": true,
      "log_likelihood": -14.615461339622387,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_d": 0.9246997468720274,
      "theta_a": 0.0,
      "success": true,
      "log_likelihood": -17.826006856804028,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_d": 0.0,
      "theta_a": 0.0,
      "success": true,
      "log_likelihood": -10.850129878148211,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_d": 1.1777480834165555,
      "theta_a": 0.0,
      "success": true,
      "log_likelihood": -17.799091766763535,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_d": 3.5897082462098697,
      "theta_a": 0.0,
      "success": true,
      "log_likelihood": -13.536569215702778,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_d": 0.0,
      "theta_a": 0.0,
      "success": true,
      "log_likelihood": -9.650129877974955,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_d": 1.223030566739581,
      "theta_a": 0.0,
      "success": true,
      "log_likelihood": -16.47892458771176,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_d": 1.128336353338792,
      "theta_a": 0.0,
      "success": true,
      "log_likelihood": -14.75230916727079,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_d": 0.5151317182322711,
      "theta_a": 0.0,
      "success": true,
      "log_likelihood": -16.16318525040472,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_d": 1.4665799228098122,
      "theta_a": 0.0,
      "success": true,
      "log_likelihood": -15.630634721864459,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_d": 1.7229092806026316,
      "theta_a": 0.0,
      "success": true,
      "log_likelihood": -19.525160698607415,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_d": 2.5053775141185204,
      "theta_a": 0.0,
      "success": true,
      "log_likelihood": -11.61260529214451,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_d": 0.8630247665745413,
      "theta_a": 1.9260989929808574,
      "success": true,
      "log_likelihood": -25.768962016314887,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_d": 0.6826039053250964,
      "theta_a": 0.0,
      "success": true,
      "log_likelihood": -17.487698787335198,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_d": 3.6878811617659166,
      "theta_a": 1.926737529393939,
      "success": true,
      "log_likelihood": -18.93744981095044,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_d": 1.133751263665614,
      "theta_a": 0.0,
      "success": true,
      "log_likelihood": -19.092480975762843,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_d": 0.7354854356615537,
      "theta_a": 1.9267246679981371,
      "success": true,
      "log_likelihood": -22.046225499520446,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_d": 1.9336316635904107,
      "theta_a": 0.0,
      "success": true,
      "log_likelihood": -20.65194006028145,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_d": 3.2624840649648124,
      "theta_a": 0.0,
      "success": true,
      "log_likelihood": -7.187614453800659,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_d": 3.4145777759016447,
      "theta_a": 0.0,
      "success": true,
      "log_likelihood": -10.386563735750737,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_d": 0.0,
      "theta_a": 0.0,
      "success": true,
      "log_likelihood": -13.775129876771425,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_d": 5.63861916001682,
      "theta_a": 1.9267692190187156,
      "success": true,
      "log_likelihood": -13.32490064018274,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_d": 0.20201607826335893,
      "theta_a": 0.0,
      "success": true,
      "log_likelihood": -14.511210130016355,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_d": 0.9587239539692733,
      "theta_a": 0.0,
      "success": true,
      "log_likelihood": -19.80663387356459,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_d": 1.7229091081712615,
      "theta_a": 0.0,
      "success": true,
      "log_likelihood": -15.025160701753544,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_d": 7.684344876246774,
      "theta_a": 1.9268369215620489,
      "success": true,
      "log_likelihood": -11.809149639503932,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_d": 1.3678371300758603,
      "theta_a": 0.0,
      "success": true,
      "log_likelihood": -21.349320221418502,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_d": 3.6878868321947826,
      "theta_a": 0.0,
      "success": true,
      "log_likelihood": -11.340847885338224,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_d": 1.2637963131602532,
      "theta_a": 0.0,
      "success": true,
      "log_likelihood": -15.301181385370096,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_d": 0.0,
      "theta_a": 0.0,
      "success": true,
      "log_likelihood": -10.400129878563996,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_d": 0.19738342313046425,
      "theta_a": 0.0,
      "success": true,
      "log_likelihood": -13.101187698384338,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_d": 1.0699260134687052,
      "theta_a": 0.0,
      "success": true,
      "log_likelihood": -16.483949531974602,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_d": 0.0,
      "theta_a": 0.0,
      "success": true,
      "log_likelihood": -12.05012987694544,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_d": 10.0,
      "theta_a": 0.0,
      "success": true,
      "log_likelihood": -2.3866661013818056,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_d": 3.9730238636859943,
      "theta_a": 1.9266830846857423,
      "success": true,
      "log_likelihood": -17.127994263957763,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_d": 1.399961101510338,
      "theta_a": 0.0,
      "success": true,
      "log_likelihood": -15.955381447435926,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_d": 0.30972156136541024,
      "theta_a": 0.0,
      "success": true,
      "log_likelihood": -15.249755727904864,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_d": 1.133751287675839,
      "theta_a": 5.087847888590729,
      "success": true,
      "log_likelihood": -22.594665571483354,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_d": 0.9198870623191816,
      "theta_a": 0.0,
      "success": true,
      "log_likelihood": -14.970178836193785,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_d": 0.0,
      "theta_a": 0.0,
      "success": true,
      "log_likelihood": -9.725129878614155,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_d": 7.005554387885896,
      "theta_a": 10.0,
      "success": true,
      "log_likelihood": -12.977666491853693,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_d": 0.6261898026943498,
      "theta_a": 0.0,
      "success": true,
      "log_likelihood": -23.60067106462202,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_d": 7.68431783608597,
      "theta_a": 1.9267197240793754,
      "success": true,
      "log_likelihood": -11.809149638433306,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_d": 1.0543447028389767,
      "theta_a": 0.0,
      "success": true,
      "log_likelihood": -24.447926714586718,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_d": 0.0,
      "theta_a": 0.0,
      "success": true,
      "log_likelihood": -12.20012987731324,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_d": 5.473770608324218,
      "theta_a": 10.0,
      "success": true,
      "log_likelihood": -10.735262420504133,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_d": 1.4529887500465295,
      "theta_a": 0.0,
      "success": true,
      "log_likelihood": -12.999600639701384,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_d": 0.7266108826696183,
      "theta_a": 0.0,
      "success": true,
      "log_likelihood": -26.709280563282228,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_d": 7.684313106634421,
      "theta_a": 0.0,
      "success": true,
      "log_likelihood": -10.212547704504889,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_d": 0.7667713046578521,
      "theta_a": 0.0,
      "success": true,
      "log_likelihood": -18.03029598759119,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_d": 3.4559807380023724,
      "theta_a": 5.087836982100353,
      "success": true,
      "log_likelihood": -13.556111594188515,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_d": 0.0,
      "theta_a": 0.0,
      "success": true,
      "log_likelihood": -9.050129878931928,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_d": 1.3678371481401994,
      "theta_a": 0.0,
      "success": true,
      "log_likelihood": -15.34932022493683,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_d": 0.5491377657611086,
      "theta_a": 0.0,
      "success": true,
      "log_likelihood": -21.243908961167527,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "theta_d": {
        "r": 0.8859292803733276,
        "p": 1.8151696594664773e-34
      },
      "theta_a": {
        "r": 0.6752483702703177,
        "p": 1.3080170055022342e-14
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 35.004564959602554,
  "bic_error": "'ModelOutput' object has no attribute 'metrics'",
  "recovery_summary": "Parameter Recovery:\n- theta_d: r = 0.886\n- theta_a: r = 0.675",
  "previous_models": [
    "Specification: Let f = (token_self / (token_self + token_opp)) \u00d7 combined_earning  \nU = split_self \u2212 theta_d \u00d7 max(f \u2212 split_self, 0) \u2212 theta_a \u00d7 max(split_self \u2212 f, 0)\nSummary: A utility model for responder behavior that computes the subjective value of an accepted offer by comparing the observed monetary gain (split_self) to a fairness benchmark (f) derived from token contributions and combined earnings. The model imposes distinct linear penalties for disadvantageous and advantageous inequity using two learnable parameters (theta_d and theta_a) with finite bounds, capturing aversion to deviations from fair shares.\nBIC: 35.004564959602554\n\nParameter Recovery:\n- theta_d: r = 0.886\n- theta_a: r = 0.675"
  ]
}