{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the given task. The model should obtain the utility, (not the probability of choosing an action).  Your goal is to eventually explore the entire space of possible explainations and mechanisms by which the observed behavior arises.\n\nYour model should use the given variables appropriately, but does not necessary need to use all or even most of the variables. Do not include the model for the utility of rejecting an offer. \n\nThe model should:\n1. Predict only responder behavior.\n2. Build on relevant psychological principles.\n3. Be considerate of high covariance between learnable parameters as the model will have to pass parameter recovery tests.\n4. Be applicable to the dataset given within the task description (i.e. the model should be able to be run using only the provided dataset structure).\n5. Not include parameters to simulate general stochasticity of behavior, because this will be handled later by a temperature parameter.\n6. Should have no more than two learnable parameters.\n7. This specific model should calculate the utility of an action, which will then be used to determine the probability of choosing that action. Negative values should represent a negative utility, and thus an unlikely action.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Use clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'. DO NOT USE 'lambda' AS A PARAMETER NAME.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the given task. The model should obtain the utility, (not the probability of choosing an action).  Your goal is to eventually explore the entire space of possible explainations and mechanisms by which the observed behavior arises.\n\nYour model should use the given variables appropriately, but does not necessary need to use all or even most of the variables. Do not include the model for the utility of rejecting an offer. \n\nThe model should:\n1. Predict only responder behavior.\n2. Build on relevant psychological principles.\n3. Be considerate of high covariance between learnable parameters as the model will have to pass parameter recovery tests.\n4. Be applicable to the dataset given within the task description (i.e. the model should be able to be run using only the provided dataset structure).\n5. Not include parameters to simulate general stochasticity of behavior, because this will be handled later by a temperature parameter.\n6. Should have no more than two learnable parameters.\n7. This specific model should calculate the utility of an action, which will then be used to determine the probability of choosing that action. Negative values should represent a negative utility, and thus an unlikely action.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Use clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'. DO NOT USE 'lambda' AS A PARAMETER NAME.\n\nPrevious Models:\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "Step-by-step reasoning:\n\n1. Key Psychological Mechanisms:\n\u2003\u2022 Responder decisions are strongly influenced by fairness considerations. In particular, responders compare the monetary share they receive (split_self) to what they believe is a fair share. The fair share is defined by the relative contributions of the participant (token_self) compared to the opponent (token_opp) on a given trial, scaled by the combined total earnings.\n\u2003\u2022 When the offer is below fair expectations, responders experience an amplified negative evaluation (inequity aversion). In contrast, when the received share meets or exceeds the fair share, the deviation is experienced without extra penalty.\n\u2003\u2022 A baseline acceptance bias (or intercept) may also exist that shifts the utility upward or downward irrespective of fairness.\n\n2. Interaction of Mechanisms:\n\u2003\u2022 First, the model computes a fairness reference value as: \n\u2003\u2003fair_share = (token_self / (token_self + token_opp)) \u00d7 combined_earning.\n\u2003\u2022 The deviation between the offered amount and this reference (d = split_self \u2212 fair_share) is then assessed.\n\u2003\u2022 If d is positive (i.e. the offer is fair or generous), the utility gets a straightforward boost. If d is negative (i.e. the offer is lower than expected), a fairness sensitivity parameter (\u03b3) multiplies the deviation to capture the heightened aversion to unequal offers.\n\u2003\u2022 A bias parameter (\u03b2) introduces a constant baseline utility that adjusts the overall tendency to accept.\n\n3. Mathematical Form:\n\u2003\u2022 We use a piecewise linear utility function:\n\u2003\u2003\u2013 U = \u03b2 + d\u2003\u2003\u2003\u2003if d \u2265 0 \n\u2003\u2003\u2013 U = \u03b2 + (1 + \u03b3)\u00b7d\u2003if d < 0\n\u2003\u2003where d = split_self \u2212 fair_share.\n\u2003\u2022 This formulation uses two learnable parameters: \u03b2 (a baseline bias) and \u03b3 (sensitivity to disadvantageous inequality).\n\n4. Parameter Calibration:\n\u2003\u2022 \u03b2 is unconstrained in its influence on utility and is assumed to lie within a generous bound (e.g., between \u201350 and 50).\n\u2003\u2022 \u03b3 captures the extra penalty on negative deviations and is restricted to positive values (e.g., between 0 and 10) to ensure that negatively biased offers receive additional penalty.\n\n5. Mapping to Observable Behavior:\n\u2003\u2022 The computed utility U determines the attractiveness of accepting an offer.\n\u2003\u2022 All observable variables (such as token_self, token_opp, combined_earning, and split_self) are directly used in the model calculation.\n\u2003\u2022 Only responder behavior (trial_role = responder) is modeled, and only the utility of accepting an offer is computed (utility for rejection is omitted, as specified).\n\nBelow is the formal model specification:\n\n<MODEL>\nLet fair_share = (token_self / (token_self + token_opp)) \u00d7 combined_earning.\nDefine d = split_self \u2212 fair_share.\nThen, the utility of accepting an offer is given by:\n\u2003\u2003U = \u03b2 + d\u2003\u2003\u2003\u2003\u2003\u2003if d \u2265 0,\n\u2003\u2003U = \u03b2 + (1 + \u03b3) \u00b7 d\u2003if d < 0.\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the offer; higher values indicate a more attractive offer.\",\n      \"range\": {\n        \"min\": \"-infinity\",\n        \"max\": \"infinity\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {},\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Baseline acceptance bias parameter adjusting the utility independent of the fairness deviation.\",\n      \"range\": {\n        \"min\": -50,\n        \"max\": 50,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": -50,\n          \"upper\": 50\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Fairness sensitivity parameter that amplifies negative deviations (offers below fair share).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": 0,\n          \"upper\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"d\": {\n      \"description\": \"Difference between the offered share and the fair share.\",\n      \"range\": {\n        \"min\": \"-infinity\",\n        \"max\": \"infinity\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {},\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fair_share\": {\n      \"description\": \"The fair monetary share computed based on the participant's tokens relative to total tokens and the combined earning.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"combined_earning\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {},\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"split_self\": {\n      \"description\": \"The proposed monetary share to the participant (in \u00a3).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"combined_earning\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {},\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens the participant found, representing their contribution.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"infinity\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {},\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent, representing the opponent's contribution.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"infinity\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {},\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total amount of money earned from tokens, where each token is valued at \u00a33.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"infinity\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {},\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<SUMMARY>\nA piecewise linear utility model for responder behavior that computes the utility of accepting an offer. The model first calculates a fairness reference based on the ratio of the participant\u2019s tokens to total tokens, scaled by the combined earning. It then assesses the deviation (d) between the offered amount (split_self) and this fair share. Offers meeting or exceeding the fair share add d linearly to a bias parameter (beta); offers below the fair share incur an amplified penalty proportional to a fairness sensitivity parameter (gamma). The model uses two learnable parameters: beta and gamma, with generous bounds.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return the utility values for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['beta', 'gamma']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of utility values for each trial\n\n                Your code will be implemented within the following code block:\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    utility_values = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        utility_values.append(beta + (epsilon * E) + (eta * N))\n    return utility_values\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE UTLITY VALUES.\n                Model Specification:\n                Let fair_share = (token_self / (token_self + token_opp)) \u00d7 combined_earning.\nDefine d = split_self \u2212 fair_share.\nThen, the utility of accepting an offer is given by:\n\u2003\u2003U = \u03b2 + d\u2003\u2003\u2003\u2003\u2003\u2003if d \u2265 0,\n\u2003\u2003U = \u03b2 + (1 + \u03b3) \u00b7 d\u2003if d < 0.\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the offer; higher values indicate a more attractive offer.\",\n      \"range\": {\n        \"min\": \"-infinity\",\n        \"max\": \"infinity\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {},\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Baseline acceptance bias parameter adjusting the utility independent of the fairness deviation.\",\n      \"range\": {\n        \"min\": -50,\n        \"max\": 50,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": -50,\n          \"upper\": 50\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Fairness sensitivity parameter that amplifies negative deviations (offers below fair share).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": 0,\n          \"upper\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"d\": {\n      \"description\": \"Difference between the offered share and the fair share.\",\n      \"range\": {\n        \"min\": \"-infinity\",\n        \"max\": \"infinity\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {},\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fair_share\": {\n      \"description\": \"The fair monetary share computed based on the participant's tokens relative to total tokens and the combined earning.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"combined_earning\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {},\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"split_self\": {\n      \"description\": \"The proposed monetary share to the participant (in \\u00a3).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"combined_earning\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {},\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens the participant found, representing their contribution.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"infinity\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {},\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent, representing the opponent's contribution.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"infinity\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {},\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total amount of money earned from tokens, where each token is valued at \\u00a33.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"infinity\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {},\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "```python\nimport json\nimport math\n\ndef simulate_model(trial_data, beta=0, gamma=0):\n    utility_values = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n        split_self = trial.get(\"split_self\", 0)\n\n        if token_self + token_opp ==0:\n            fair_share = 0\n        else:\n            fair_share = (token_self / (token_self + token_opp)) * combined_earning\n        d = split_self - fair_share\n\n        if d >= 0:\n            utility = beta + d\n        else:\n            utility = beta + (1 + gamma) * d\n        utility_values.append(utility)\n    return utility_values\n\n# Example usage with dummy data (replace with your actual data loading)\n\ndata_json = '[{\"token_self\": 5, \"token_opp\": 5, \"combined_earning\": 30, \"split_self\": 15}, {\"token_self\": 2, \"token_opp\": 8, \"combined_earning\": 30, \"split_self\": 10}]'\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data, beta=1, gamma=2)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n\n```"
    }
  ],
  "learnable_parameters": {
    "beta": {
      "description": "Baseline acceptance bias parameter adjusting the utility independent of the fairness deviation.",
      "range": {
        "min": -50,
        "max": 50,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "lower": -50,
          "upper": 50
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Fairness sensitivity parameter that amplifies negative deviations (offers below fair share).",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "lower": 0,
          "upper": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "Let fair_share = (token_self / (token_self + token_opp)) \u00d7 combined_earning.\nDefine d = split_self \u2212 fair_share.\nThen, the utility of accepting an offer is given by:\n\u2003\u2003U = \u03b2 + d\u2003\u2003\u2003\u2003\u2003\u2003if d \u2265 0,\n\u2003\u2003U = \u03b2 + (1 + \u03b3) \u00b7 d\u2003if d < 0.",
  "variable_descriptions": {
    "U": {
      "description": "Utility of accepting the offer; higher values indicate a more attractive offer.",
      "range": {
        "min": "-infinity",
        "max": "infinity",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": {},
      "learnable": false,
      "source": "calculated"
    },
    "beta": {
      "description": "Baseline acceptance bias parameter adjusting the utility independent of the fairness deviation.",
      "range": {
        "min": -50,
        "max": 50,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "lower": -50,
          "upper": 50
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Fairness sensitivity parameter that amplifies negative deviations (offers below fair share).",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "lower": 0,
          "upper": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "d": {
      "description": "Difference between the offered share and the fair share.",
      "range": {
        "min": "-infinity",
        "max": "infinity",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": {},
      "learnable": false,
      "source": "calculated"
    },
    "fair_share": {
      "description": "The fair monetary share computed based on the participant's tokens relative to total tokens and the combined earning.",
      "range": {
        "min": 0,
        "max": "combined_earning",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {},
      "learnable": false,
      "source": "calculated"
    },
    "split_self": {
      "description": "The proposed monetary share to the participant (in \u00a3).",
      "range": {
        "min": 0,
        "max": "combined_earning",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {},
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Number of tokens the participant found, representing their contribution.",
      "range": {
        "min": 0,
        "max": "infinity",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": {},
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent, representing the opponent's contribution.",
      "range": {
        "min": 0,
        "max": "infinity",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": {},
      "learnable": false,
      "source": "data"
    },
    "combined_earning": {
      "description": "Total amount of money earned from tokens, where each token is valued at \u00a33.",
      "range": {
        "min": 0,
        "max": "infinity",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": {},
      "learnable": false,
      "source": "data"
    }
  },
  "model_summary": "A piecewise linear utility model for responder behavior that computes the utility of accepting an offer. The model first calculates a fairness reference based on the ratio of the participant\u2019s tokens to total tokens, scaled by the combined earning. It then assesses the deviation (d) between the offered amount (split_self) and this fair share. Offers meeting or exceeding the fair share add d linearly to a bias parameter (beta); offers below the fair share incur an amplified penalty proportional to a fairness sensitivity parameter (gamma). The model uses two learnable parameters: beta and gamma, with generous bounds.",
  "full_reasoning": "Step-by-step reasoning:\n\n1. Key Psychological Mechanisms:\n\u2003\u2022 Responder decisions are strongly influenced by fairness considerations. In particular, responders compare the monetary share they receive (split_self) to what they believe is a fair share. The fair share is defined by the relative contributions of the participant (token_self) compared to the opponent (token_opp) on a given trial, scaled by the combined total earnings.\n\u2003\u2022 When the offer is below fair expectations, responders experience an amplified negative evaluation (inequity aversion). In contrast, when the received share meets or exceeds the fair share, the deviation is experienced without extra penalty.\n\u2003\u2022 A baseline acceptance bias (or intercept) may also exist that shifts the utility upward or downward irrespective of fairness.\n\n2. Interaction of Mechanisms:\n\u2003\u2022 First, the model computes a fairness reference value as: \n\u2003\u2003fair_share = (token_self / (token_self + token_opp)) \u00d7 combined_earning.\n\u2003\u2022 The deviation between the offered amount and this reference (d = split_self \u2212 fair_share) is then assessed.\n\u2003\u2022 If d is positive (i.e. the offer is fair or generous), the utility gets a straightforward boost. If d is negative (i.e. the offer is lower than expected), a fairness sensitivity parameter (\u03b3) multiplies the deviation to capture the heightened aversion to unequal offers.\n\u2003\u2022 A bias parameter (\u03b2) introduces a constant baseline utility that adjusts the overall tendency to accept.\n\n3. Mathematical Form:\n\u2003\u2022 We use a piecewise linear utility function:\n\u2003\u2003\u2013 U = \u03b2 + d\u2003\u2003\u2003\u2003if d \u2265 0 \n\u2003\u2003\u2013 U = \u03b2 + (1 + \u03b3)\u00b7d\u2003if d < 0\n\u2003\u2003where d = split_self \u2212 fair_share.\n\u2003\u2022 This formulation uses two learnable parameters: \u03b2 (a baseline bias) and \u03b3 (sensitivity to disadvantageous inequality).\n\n4. Parameter Calibration:\n\u2003\u2022 \u03b2 is unconstrained in its influence on utility and is assumed to lie within a generous bound (e.g., between \u201350 and 50).\n\u2003\u2022 \u03b3 captures the extra penalty on negative deviations and is restricted to positive values (e.g., between 0 and 10) to ensure that negatively biased offers receive additional penalty.\n\n5. Mapping to Observable Behavior:\n\u2003\u2022 The computed utility U determines the attractiveness of accepting an offer.\n\u2003\u2022 All observable variables (such as token_self, token_opp, combined_earning, and split_self) are directly used in the model calculation.\n\u2003\u2022 Only responder behavior (trial_role = responder) is modeled, and only the utility of accepting an offer is computed (utility for rejection is omitted, as specified).\n\nBelow is the formal model specification:\n\n<MODEL>\nLet fair_share = (token_self / (token_self + token_opp)) \u00d7 combined_earning.\nDefine d = split_self \u2212 fair_share.\nThen, the utility of accepting an offer is given by:\n\u2003\u2003U = \u03b2 + d\u2003\u2003\u2003\u2003\u2003\u2003if d \u2265 0,\n\u2003\u2003U = \u03b2 + (1 + \u03b3) \u00b7 d\u2003if d < 0.\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the offer; higher values indicate a more attractive offer.\",\n      \"range\": {\n        \"min\": \"-infinity\",\n        \"max\": \"infinity\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {},\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Baseline acceptance bias parameter adjusting the utility independent of the fairness deviation.\",\n      \"range\": {\n        \"min\": -50,\n        \"max\": 50,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": -50,\n          \"upper\": 50\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Fairness sensitivity parameter that amplifies negative deviations (offers below fair share).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": 0,\n          \"upper\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"d\": {\n      \"description\": \"Difference between the offered share and the fair share.\",\n      \"range\": {\n        \"min\": \"-infinity\",\n        \"max\": \"infinity\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {},\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fair_share\": {\n      \"description\": \"The fair monetary share computed based on the participant's tokens relative to total tokens and the combined earning.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"combined_earning\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {},\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"split_self\": {\n      \"description\": \"The proposed monetary share to the participant (in \u00a3).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"combined_earning\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {},\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens the participant found, representing their contribution.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"infinity\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {},\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent, representing the opponent's contribution.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"infinity\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {},\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total amount of money earned from tokens, where each token is valued at \u00a33.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"infinity\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {},\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<SUMMARY>\nA piecewise linear utility model for responder behavior that computes the utility of accepting an offer. The model first calculates a fairness reference based on the ratio of the participant\u2019s tokens to total tokens, scaled by the combined earning. It then assesses the deviation (d) between the offered amount (split_self) and this fair share. Offers meeting or exceeding the fair share add d linearly to a bias parameter (beta); offers below the fair share incur an amplified penalty proportional to a fairness sensitivity parameter (gamma). The model uses two learnable parameters: beta and gamma, with generous bounds.\n</SUMMARY>",
  "current_model": "Specification: Let fair_share = (token_self / (token_self + token_opp)) \u00d7 combined_earning.\nDefine d = split_self \u2212 fair_share.\nThen, the utility of accepting an offer is given by:\n\u2003\u2003U = \u03b2 + d\u2003\u2003\u2003\u2003\u2003\u2003if d \u2265 0,\n\u2003\u2003U = \u03b2 + (1 + \u03b3) \u00b7 d\u2003if d < 0.\nSummary: A piecewise linear utility model for responder behavior that computes the utility of accepting an offer. The model first calculates a fairness reference based on the ratio of the participant\u2019s tokens to total tokens, scaled by the combined earning. It then assesses the deviation (d) between the offered amount (split_self) and this fair share. Offers meeting or exceeding the fair share add d linearly to a bias parameter (beta); offers below the fair share incur an amplified penalty proportional to a fairness sensitivity parameter (gamma). The model uses two learnable parameters: beta and gamma, with generous bounds.",
  "simulation_code": "def simulate_model(trial_data, beta=0, gamma=0):\n    utility_values = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n        split_self = trial.get(\"split_self\", 0)\n\n        if token_self + token_opp ==0:\n            fair_share = 0\n        else:\n            fair_share = (token_self / (token_self + token_opp)) * combined_earning\n        d = split_self - fair_share\n\n        if d >= 0:\n            utility = beta + d\n        else:\n            utility = beta + (1 + gamma) * d\n        utility_values.append(utility)\n    return utility_values",
  "fitting_results": [
    {
      "beta": -1.7429187208070773,
      "gamma": 1.518810587253246,
      "success": true,
      "log_likelihood": -7.2366486836371795,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 4.1128647018378635,
      "gamma": 0.7274802887842026,
      "success": true,
      "log_likelihood": -17.769406283603157,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 7.002770542015528,
      "gamma": 1.7520581445459902,
      "success": true,
      "log_likelihood": -13.126889339507436,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.961883266492846,
      "gamma": 0.6650487079369116,
      "success": true,
      "log_likelihood": -17.85255868092881,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 8.052256549718425,
      "gamma": 3.0255028379891327,
      "success": true,
      "log_likelihood": -9.293153300128857,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 7.679563666778326,
      "gamma": 1.3346950713303551,
      "success": true,
      "log_likelihood": -14.166034828835306,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 32.93467071340284,
      "gamma": 0.0,
      "success": true,
      "log_likelihood": -1.4292057989745762e-05,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.322881673659213,
      "gamma": 2.0161476797960067,
      "success": true,
      "log_likelihood": -11.7176576805464,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 33.22282396732134,
      "gamma": 0.0,
      "success": true,
      "log_likelihood": -1.2373887528899085e-05,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 4.669148890455024,
      "gamma": 1.811517631237102,
      "success": true,
      "log_likelihood": -12.925174721998305,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 7.196478809435849,
      "gamma": 2.5871854148379603,
      "success": true,
      "log_likelihood": -10.431928075470086,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.0253097971434366,
      "gamma": 1.405038133968869,
      "success": true,
      "log_likelihood": -8.843721116432256,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 6.662488010406364,
      "gamma": 2.6401676686774427,
      "success": true,
      "log_likelihood": -10.374091920596015,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 33.31999226772309,
      "gamma": 0.0,
      "success": true,
      "log_likelihood": -1.1786912387130491e-05,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 39.98565683441634,
      "gamma": 0.0,
      "success": true,
      "log_likelihood": -4.172256450114139e-07,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 49.99999999999999,
      "gamma": 0.0,
      "success": true,
      "log_likelihood": 7.847611447538201e-10,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 44.79143772853001,
      "gamma": 1.2920813424130708,
      "success": true,
      "log_likelihood": -1.5196138972285824e-06,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 8.76090756514498,
      "gamma": 0.5418488106439572,
      "success": true,
      "log_likelihood": -10.883577860983527,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 16.06241169947037,
      "gamma": 2.089853651010111,
      "success": true,
      "log_likelihood": -6.2682935647873315,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 33.44112064188316,
      "gamma": 0.0,
      "success": true,
      "log_likelihood": -1.1094023791369502e-05,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 6.618131459348135,
      "gamma": 1.4233296803393323,
      "success": true,
      "log_likelihood": -14.370889178938413,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 12.772342361599755,
      "gamma": 1.5351008139932703,
      "success": true,
      "log_likelihood": -8.381656674665274,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.0252321410210181,
      "gamma": 0.0,
      "success": true,
      "log_likelihood": -20.510079557094265,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 3.3340755997640876,
      "gamma": 0.2720657171804961,
      "success": true,
      "log_likelihood": -20.0432504076897,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 8.430075275684517,
      "gamma": 2.5668568523884217,
      "success": true,
      "log_likelihood": -10.398423831923171,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 4.84032062353823,
      "gamma": 0.6133938321743777,
      "success": true,
      "log_likelihood": -17.933344083718676,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 5.296568156715396,
      "gamma": 0.9191683236784735,
      "success": true,
      "log_likelihood": -16.63426003770382,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 8.051568812869961,
      "gamma": 7.089609066867757,
      "success": true,
      "log_likelihood": -5.671379150804645,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 11.85047535179033,
      "gamma": 1.1207734968445577,
      "success": true,
      "log_likelihood": -7.982178719636617,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 7.274464797360785,
      "gamma": 0.5552341583213526,
      "success": true,
      "log_likelihood": -14.254808678724206,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 50.0,
      "gamma": 0.0,
      "success": true,
      "log_likelihood": 7.8476114475382e-10,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.7428337959844096,
      "gamma": 1.5188955574772438,
      "success": true,
      "log_likelihood": -7.2366486852432805,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.5837088631453133,
      "gamma": 0.0,
      "success": true,
      "log_likelihood": -22.80365289015397,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.675247131115874,
      "gamma": 0.6927653874475115,
      "success": true,
      "log_likelihood": -17.49958218843905,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 44.37259425774013,
      "gamma": 0.0,
      "success": true,
      "log_likelihood": -4.333435474017527e-08,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 3.773204448222228,
      "gamma": 0.0,
      "success": true,
      "log_likelihood": -20.75575169852065,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 8.630343629108372,
      "gamma": 1.3501424698572286,
      "success": true,
      "log_likelihood": -13.394394035493294,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 6.02609040911049,
      "gamma": 1.5443742497921094,
      "success": true,
      "log_likelihood": -13.995502632052961,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 6.239160975516954,
      "gamma": 0.7297791301530251,
      "success": true,
      "log_likelihood": -16.29389044118564,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 8.588112499954168,
      "gamma": 0.14809002953983033,
      "success": true,
      "log_likelihood": -8.68917148338029,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 6.360137680390319,
      "gamma": 1.0293480461706797,
      "success": true,
      "log_likelihood": -15.701417936824493,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.0662941174459284,
      "gamma": 1.2200616891159868,
      "success": true,
      "log_likelihood": -12.83144996286153,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.474538174910418,
      "gamma": 0.0,
      "success": true,
      "log_likelihood": -4.474171991877773,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 3.761191812045816,
      "gamma": 0.3236070514331107,
      "success": true,
      "log_likelihood": -19.632943163256947,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 5.571367104871261,
      "gamma": 0.7522381397976944,
      "success": true,
      "log_likelihood": -16.974266043750205,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 4.694681171013302,
      "gamma": 0.0,
      "success": true,
      "log_likelihood": -19.669408758005922,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 4.72203843792733,
      "gamma": 0.8356723476765162,
      "success": true,
      "log_likelihood": -17.16604048818143,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.3074022307870683,
      "gamma": 0.0,
      "success": true,
      "log_likelihood": -20.751636581959417,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 8.365059324156762,
      "gamma": 3.6134476400735607,
      "success": true,
      "log_likelihood": -8.234091127740772,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.6632501023645965,
      "gamma": 0.0,
      "success": true,
      "log_likelihood": -26.803868478697357,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 4.430884303561856,
      "gamma": 0.019038303756459207,
      "success": true,
      "log_likelihood": -19.010096409476283,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.6818534436362413,
      "gamma": 0.1142439132488757,
      "success": true,
      "log_likelihood": -12.43353738363224,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.663249079794899,
      "gamma": 0.0,
      "success": true,
      "log_likelihood": -22.453868480308266,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 3.208248186152371,
      "gamma": 0.0,
      "success": true,
      "log_likelihood": -25.96922660948242,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.194599317665635,
      "gamma": 0.4417927398891306,
      "success": true,
      "log_likelihood": -18.672230464844414,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 6.477430786690601,
      "gamma": 3.9332297090810013,
      "success": true,
      "log_likelihood": -8.293995872301032,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 3.011984277514498,
      "gamma": 2.0799916267854175,
      "success": true,
      "log_likelihood": -11.626230262444865,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 7.29274381179123,
      "gamma": 0.0,
      "success": true,
      "log_likelihood": -16.953439364883558,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.321528782464028,
      "gamma": 1.016808490646213,
      "success": true,
      "log_likelihood": -9.33889018326273,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 5.790278396505266,
      "gamma": 0.0,
      "success": true,
      "log_likelihood": -17.23645873555513,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 3.6659230281877924,
      "gamma": 0.06555764321355237,
      "success": true,
      "log_likelihood": -20.3854215667815,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 5.816922509979974,
      "gamma": 1.4551102821837727,
      "success": true,
      "log_likelihood": -14.370392887367624,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.742953365943357,
      "gamma": 1.5187700364989796,
      "success": true,
      "log_likelihood": -7.236648683907299,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.855910533449462,
      "gamma": 0.0,
      "success": true,
      "log_likelihood": -22.843611122511174,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.2153394492738425,
      "gamma": 1.357344002047501,
      "success": true,
      "log_likelihood": -12.488327025137629,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 4.124758432744492,
      "gamma": 0.4653924095232243,
      "success": true,
      "log_likelihood": -18.901481391645515,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 9.573145764776596,
      "gamma": 0.3861059948432132,
      "success": true,
      "log_likelihood": -8.120456919325935,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 9.06879811055797,
      "gamma": 0.6204599072852408,
      "success": true,
      "log_likelihood": -10.646478063754605,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.934089262033539,
      "gamma": 0.0,
      "success": true,
      "log_likelihood": -21.95464017242424,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 7.999915104559211,
      "gamma": 0.0,
      "success": true,
      "log_likelihood": -9.912296874025921,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.9771734868283963,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -2.104530478660149,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.3911899210405896,
      "gamma": 0.34244628225704205,
      "success": true,
      "log_likelihood": -11.974246561127332,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 4.096060796138307,
      "gamma": 0.581677170711138,
      "success": true,
      "log_likelihood": -18.444594746385025,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 5.39656935577057,
      "gamma": 0.0,
      "success": true,
      "log_likelihood": -18.23169771941226,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.3942299633244475,
      "gamma": 0.0,
      "success": true,
      "log_likelihood": -24.46819246466593,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 9.393716853898328,
      "gamma": 1.5801724011595721,
      "success": true,
      "log_likelihood": -12.655973512794578,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.137067148924007,
      "gamma": 0.2805462152072308,
      "success": true,
      "log_likelihood": -6.305007076144884,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -3.60192735200925,
      "gamma": 0.360183194533041,
      "success": true,
      "log_likelihood": -6.956481752196771,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 3.487349719420068,
      "gamma": 0.0,
      "success": true,
      "log_likelihood": -25.87056905506156,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.74294283260922,
      "gamma": 1.5188337033292203,
      "success": true,
      "log_likelihood": -7.236648684153387,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.663249330995456,
      "gamma": 0.0,
      "success": true,
      "log_likelihood": -23.57886848008318,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 7.999932596433597,
      "gamma": 0.0,
      "success": true,
      "log_likelihood": -11.56229687023301,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.4107956718857524,
      "gamma": 0.9108066337978915,
      "success": true,
      "log_likelihood": -10.23611720088606,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 3.358788712281735,
      "gamma": 0.4066555714518349,
      "success": true,
      "log_likelihood": -19.40833725838917,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 3.487350119157171,
      "gamma": 0.0,
      "success": true,
      "log_likelihood": -24.145569055537354,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.3680997536584371,
      "gamma": 2.5013993369148193,
      "success": true,
      "log_likelihood": -7.461736559667841,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 5.542452067799269,
      "gamma": 0.38489310247005676,
      "success": true,
      "log_likelihood": -17.31029520704579,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.8607239603493652,
      "gamma": 1.0383042262775002,
      "success": true,
      "log_likelihood": -14.060029962522375,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 12.748578589102197,
      "gamma": 0.8443965546369215,
      "success": true,
      "log_likelihood": -5.262840095826545,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.1255927782394006,
      "gamma": 0.0,
      "success": true,
      "log_likelihood": -21.84816153859532,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 4.374060449592794,
      "gamma": 0.0,
      "success": true,
      "log_likelihood": -21.335914994865824,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "beta": {
        "r": 0.8636359722982074,
        "p": 6.537401334097723e-31
      },
      "gamma": {
        "r": 0.8079668199247795,
        "p": 3.0430907355487073e-24
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 33.30512983820434,
  "bic_error": "'ModelOutput' object has no attribute 'metrics'",
  "recovery_summary": "Parameter Recovery:\n- beta: r = 0.864\n- gamma: r = 0.808",
  "previous_models": [
    "Specification: Let fair_share = (token_self / (token_self + token_opp)) \u00d7 combined_earning.\nDefine d = split_self \u2212 fair_share.\nThen, the utility of accepting an offer is given by:\n\u2003\u2003U = \u03b2 + d\u2003\u2003\u2003\u2003\u2003\u2003if d \u2265 0,\n\u2003\u2003U = \u03b2 + (1 + \u03b3) \u00b7 d\u2003if d < 0.\nSummary: A piecewise linear utility model for responder behavior that computes the utility of accepting an offer. The model first calculates a fairness reference based on the ratio of the participant\u2019s tokens to total tokens, scaled by the combined earning. It then assesses the deviation (d) between the offered amount (split_self) and this fair share. Offers meeting or exceeding the fair share add d linearly to a bias parameter (beta); offers below the fair share incur an amplified penalty proportional to a fairness sensitivity parameter (gamma). The model uses two learnable parameters: beta and gamma, with generous bounds.\nBIC: 33.30512983820434\n\nParameter Recovery:\n- beta: r = 0.864\n- gamma: r = 0.808"
  ]
}