{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the given task. The model should obtain the utility, (not the probability of choosing an action).  Your goal is to eventually explore the entire space of possible explainations and mechanisms by which the observed behavior arises.\n\nYour model should use the given variables appropriately, but does not necessary need to use all or even most of the variables. Do not include the model for the utility of rejecting an offer. \n\nThe model should:\n1. Predict only responder behavior.\n2. Build on relevant psychological principles.\n3. Be considerate of high covariance between learnable parameters as the model will have to pass parameter recovery tests.\n4. Be applicable to the dataset given within the task description (i.e. the model should be able to be run using only the provided dataset structure).\n5. Not include parameters to simulate general stochasticity of behavior, because this will be handled later by a temperature parameter.\n6. Should have no more than two learnable parameters.\n7. This specific model should calculate the utility of an action, which will then be used to determine the probability of choosing that action. Negative values should represent a negative utility, and thus an unlikely action.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Use clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'. DO NOT USE 'lambda' AS A PARAMETER NAME.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the given task. The model should obtain the utility, (not the probability of choosing an action).  Your goal is to eventually explore the entire space of possible explainations and mechanisms by which the observed behavior arises.\n\nYour model should use the given variables appropriately, but does not necessary need to use all or even most of the variables. Do not include the model for the utility of rejecting an offer. \n\nThe model should:\n1. Predict only responder behavior.\n2. Build on relevant psychological principles.\n3. Be considerate of high covariance between learnable parameters as the model will have to pass parameter recovery tests.\n4. Be applicable to the dataset given within the task description (i.e. the model should be able to be run using only the provided dataset structure).\n5. Not include parameters to simulate general stochasticity of behavior, because this will be handled later by a temperature parameter.\n6. Should have no more than two learnable parameters.\n7. This specific model should calculate the utility of an action, which will then be used to determine the probability of choosing that action. Negative values should represent a negative utility, and thus an unlikely action.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Use clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'. DO NOT USE 'lambda' AS A PARAMETER NAME.\n\nPrevious Models:\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "Step-by-step reasoning:\n1. Psychological mechanisms:\n\u2003\u2022 Responder choices are guided not only by monetary payoff (the money they get from the proposal) but also by social fairness considerations.\n\u2003\u2022 Participants have a norm for what constitutes a fair split, derived from their pre-experiment contribution (\u201ctoken_self\u201d) relative to the total tokens found (token_self + token_opp). This expected fair share is computed by multiplying that ratio by the combined earning.\n\u2003\u2022 Deviations from this fairness norm (whether the offer is lower or higher than the expected share) inflict psychological disutility.\n\u2003\u2022 Finally, a baseline bias or constant may also shift the overall incentive to accept an offer.\n\n2. Interaction of mechanisms:\n\u2003\u2022 The utility of accepting an offer is modeled as the offered monetary gain (split_self), adjusted by a penalty that increases with the absolute difference between the received amount and the fair share expectation.\n\u2003\u2022 A baseline offset parameter adds or subtracts from this utility.\n\u2003\u2022 In this way, higher offers that align with the fairness expectation yield high utility, whereas offers that deviate (in either direction) produce lower utility.\n\n3. Mathematical form:\n\u2003\u2022 First, determine the expected fair share:\n\u2003\u2003F* = (token_self / (token_self + token_opp)) \u00d7 combined_earning\n\u2003\u2022 Then, define the utility of accepting an offer as:\n\u2003\u2003U_accept = split_self \u2013 \u03c6 \u00d7 |split_self \u2013 F*| + \u03b2\n\u2003\u2003Here, \u03c6 (phi_param) captures fairness sensitivity and \u03b2 (beta_param) is a baseline bias.\n\n4. Necessary parameters:\n\u2003\u2022 \u03c6 (phi_param) is learnable in a finite range [0, 10] (a generous bound) and governs the penalization of deviations from the fairness norm.\n\u2003\u2022 \u03b2 (beta_param) is learnable within the range [-20, 20] and represents any baseline shift in utility.\n\u2003\u2022 The other variables (split_self, token_self, token_opp, combined_earning) are directly observed.\n\n5. Mapping to observable behavior:\n\u2003\u2022 The model uses observed tokens and money splits to compute expected fairness.\n\u2003\u2022 The computed utility U_accept (which can be positive or negative) will later be mapped to a choice via a softmax or similar function (with stochasticity handled separately).\n\u2003\u2022 Only responder trials are considered, as splitting proposals by the responder are modeled.\n\nFollowing this reasoning, here is the formal model specification:\n\n<MODEL>\nU_accept = split_self - phi_param * |split_self - ((token_self / (token_self + token_opp)) * combined_earning)| + beta_param\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_accept\": {\n      \"description\": \"Utility of accepting the proposed split, combining monetary gain and penalty for deviation from fairness.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed monetary share for the participant (in \u00a3) on the current trial.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"combined_earning\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens the participant found, representing their contribution.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent, representing the opponent's contribution.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total amount of money available (in \u00a3), derived from the tokens found.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"phi_param\": {\n      \"description\": \"Fairness sensitivity parameter that scales the penalty for deviating from the fair share.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_param\": {\n      \"description\": \"Baseline utility bias parameter that adds an intercept to the utility function.\",\n      \"range\": {\n        \"min\": -20,\n        \"max\": 20,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    }\n  }\n}\n</VARIABLES>\n\n<SUMMARY>\nThis model computes the utility of accepting an offer by taking the monetary gain (split_self) and subtracting a penalty proportional to the absolute deviation from a fairness benchmark (the expected fair share derived from token contributions and combined earnings). A baseline bias parameter is added to capture any constant shift in preference. Two learnable parameters (phi_param and beta_param) govern fairness sensitivity and baseline bias, ensuring the model captures key fairness considerations in responder behavior.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return the utility values for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['phi_param', 'beta_param']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of utility values for each trial\n\n                Your code will be implemented within the following code block:\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    utility_values = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        utility_values.append(beta + (epsilon * E) + (eta * N))\n    return utility_values\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE UTLITY VALUES.\n                Model Specification:\n                U_accept = split_self - phi_param * |split_self - ((token_self / (token_self + token_opp)) * combined_earning)| + beta_param\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"U_accept\": {\n      \"description\": \"Utility of accepting the proposed split, combining monetary gain and penalty for deviation from fairness.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed monetary share for the participant (in \\u00a3) on the current trial.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"combined_earning\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens the participant found, representing their contribution.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent, representing the opponent's contribution.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total amount of money available (in \\u00a3), derived from the tokens found.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"phi_param\": {\n      \"description\": \"Fairness sensitivity parameter that scales the penalty for deviating from the fair share.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_param\": {\n      \"description\": \"Baseline utility bias parameter that adds an intercept to the utility function.\",\n      \"range\": {\n        \"min\": -20,\n        \"max\": 20,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "```python\nimport json\nimport math\n\ndef simulate_model(trial_data, phi_param=1, beta_param=0):\n    utility_values = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0)\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n\n        if token_self + token_opp ==0: #Handle division by zero\n            fair_share = 0\n        else:\n            fair_share = (token_self / (token_self + token_opp)) * combined_earning\n\n        utility = split_self - phi_param * abs(split_self - fair_share) + beta_param\n        utility_values.append(utility)\n    return utility_values\n\n# Example usage (replace with your actual data)\ndata_json = '[{\"split_self\": 10, \"token_self\": 5, \"token_opp\": 5, \"combined_earning\": 20}, {\"split_self\": 15, \"token_self\": 10, \"token_opp\": 0, \"combined_earning\": 15}]'\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data, phi_param=2, beta_param=1)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n\n```"
    }
  ],
  "learnable_parameters": {
    "phi_param": {
      "description": "Fairness sensitivity parameter that scales the penalty for deviating from the fair share.",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta_param": {
      "description": "Baseline utility bias parameter that adds an intercept to the utility function.",
      "range": {
        "min": -20,
        "max": 20,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "U_accept = split_self - phi_param * |split_self - ((token_self / (token_self + token_opp)) * combined_earning)| + beta_param",
  "variable_descriptions": {
    "U_accept": {
      "description": "Utility of accepting the proposed split, combining monetary gain and penalty for deviation from fairness.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "split_self": {
      "description": "Proposed monetary share for the participant (in \u00a3) on the current trial.",
      "range": {
        "min": 0,
        "max": "combined_earning",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Number of tokens the participant found, representing their contribution.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent, representing the opponent's contribution.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "combined_earning": {
      "description": "Total amount of money available (in \u00a3), derived from the tokens found.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "phi_param": {
      "description": "Fairness sensitivity parameter that scales the penalty for deviating from the fair share.",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta_param": {
      "description": "Baseline utility bias parameter that adds an intercept to the utility function.",
      "range": {
        "min": -20,
        "max": 20,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_summary": "This model computes the utility of accepting an offer by taking the monetary gain (split_self) and subtracting a penalty proportional to the absolute deviation from a fairness benchmark (the expected fair share derived from token contributions and combined earnings). A baseline bias parameter is added to capture any constant shift in preference. Two learnable parameters (phi_param and beta_param) govern fairness sensitivity and baseline bias, ensuring the model captures key fairness considerations in responder behavior.",
  "full_reasoning": "Step-by-step reasoning:\n1. Psychological mechanisms:\n\u2003\u2022 Responder choices are guided not only by monetary payoff (the money they get from the proposal) but also by social fairness considerations.\n\u2003\u2022 Participants have a norm for what constitutes a fair split, derived from their pre-experiment contribution (\u201ctoken_self\u201d) relative to the total tokens found (token_self + token_opp). This expected fair share is computed by multiplying that ratio by the combined earning.\n\u2003\u2022 Deviations from this fairness norm (whether the offer is lower or higher than the expected share) inflict psychological disutility.\n\u2003\u2022 Finally, a baseline bias or constant may also shift the overall incentive to accept an offer.\n\n2. Interaction of mechanisms:\n\u2003\u2022 The utility of accepting an offer is modeled as the offered monetary gain (split_self), adjusted by a penalty that increases with the absolute difference between the received amount and the fair share expectation.\n\u2003\u2022 A baseline offset parameter adds or subtracts from this utility.\n\u2003\u2022 In this way, higher offers that align with the fairness expectation yield high utility, whereas offers that deviate (in either direction) produce lower utility.\n\n3. Mathematical form:\n\u2003\u2022 First, determine the expected fair share:\n\u2003\u2003F* = (token_self / (token_self + token_opp)) \u00d7 combined_earning\n\u2003\u2022 Then, define the utility of accepting an offer as:\n\u2003\u2003U_accept = split_self \u2013 \u03c6 \u00d7 |split_self \u2013 F*| + \u03b2\n\u2003\u2003Here, \u03c6 (phi_param) captures fairness sensitivity and \u03b2 (beta_param) is a baseline bias.\n\n4. Necessary parameters:\n\u2003\u2022 \u03c6 (phi_param) is learnable in a finite range [0, 10] (a generous bound) and governs the penalization of deviations from the fairness norm.\n\u2003\u2022 \u03b2 (beta_param) is learnable within the range [-20, 20] and represents any baseline shift in utility.\n\u2003\u2022 The other variables (split_self, token_self, token_opp, combined_earning) are directly observed.\n\n5. Mapping to observable behavior:\n\u2003\u2022 The model uses observed tokens and money splits to compute expected fairness.\n\u2003\u2022 The computed utility U_accept (which can be positive or negative) will later be mapped to a choice via a softmax or similar function (with stochasticity handled separately).\n\u2003\u2022 Only responder trials are considered, as splitting proposals by the responder are modeled.\n\nFollowing this reasoning, here is the formal model specification:\n\n<MODEL>\nU_accept = split_self - phi_param * |split_self - ((token_self / (token_self + token_opp)) * combined_earning)| + beta_param\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_accept\": {\n      \"description\": \"Utility of accepting the proposed split, combining monetary gain and penalty for deviation from fairness.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed monetary share for the participant (in \u00a3) on the current trial.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"combined_earning\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens the participant found, representing their contribution.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent, representing the opponent's contribution.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total amount of money available (in \u00a3), derived from the tokens found.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"phi_param\": {\n      \"description\": \"Fairness sensitivity parameter that scales the penalty for deviating from the fair share.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_param\": {\n      \"description\": \"Baseline utility bias parameter that adds an intercept to the utility function.\",\n      \"range\": {\n        \"min\": -20,\n        \"max\": 20,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    }\n  }\n}\n</VARIABLES>\n\n<SUMMARY>\nThis model computes the utility of accepting an offer by taking the monetary gain (split_self) and subtracting a penalty proportional to the absolute deviation from a fairness benchmark (the expected fair share derived from token contributions and combined earnings). A baseline bias parameter is added to capture any constant shift in preference. Two learnable parameters (phi_param and beta_param) govern fairness sensitivity and baseline bias, ensuring the model captures key fairness considerations in responder behavior.\n</SUMMARY>",
  "current_model": "Specification: U_accept = split_self - phi_param * |split_self - ((token_self / (token_self + token_opp)) * combined_earning)| + beta_param\nSummary: This model computes the utility of accepting an offer by taking the monetary gain (split_self) and subtracting a penalty proportional to the absolute deviation from a fairness benchmark (the expected fair share derived from token contributions and combined earnings). A baseline bias parameter is added to capture any constant shift in preference. Two learnable parameters (phi_param and beta_param) govern fairness sensitivity and baseline bias, ensuring the model captures key fairness considerations in responder behavior.",
  "simulation_code": "def simulate_model(trial_data, phi_param=1, beta_param=0):\n    utility_values = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0)\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n\n        if token_self + token_opp ==0: #Handle division by zero\n            fair_share = 0\n        else:\n            fair_share = (token_self / (token_self + token_opp)) * combined_earning\n\n        utility = split_self - phi_param * abs(split_self - fair_share) + beta_param\n        utility_values.append(utility)\n    return utility_values",
  "fitting_results": [
    {
      "phi_param": 1.1453234055167945,
      "beta_param": -7.057864086000617,
      "success": true,
      "log_likelihood": -7.07615316662938,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi_param": 1.8052613494690415,
      "beta_param": 0.8582767859464651,
      "success": true,
      "log_likelihood": -16.511902241759696,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi_param": 3.0220695395455275,
      "beta_param": 4.201880095603257,
      "success": true,
      "log_likelihood": -10.841965306711527,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi_param": 1.7120752934263814,
      "beta_param": -0.41584131718513623,
      "success": true,
      "log_likelihood": -14.351887288147116,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi_param": 4.488600894478149,
      "beta_param": 5.62732131654821,
      "success": true,
      "log_likelihood": -8.849852971321495,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi_param": 2.4288079194255823,
      "beta_param": 4.549121097139811,
      "success": true,
      "log_likelihood": -11.658436669009069,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi_param": 0.0,
      "beta_param": 20.0,
      "success": true,
      "log_likelihood": -0.0003621441951177343,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi_param": 3.1234360208186502,
      "beta_param": 7.200554027632341,
      "success": true,
      "log_likelihood": -10.096038453300297,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi_param": 0.0,
      "beta_param": 20.0,
      "success": true,
      "log_likelihood": -0.00036214419511773437,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi_param": 3.0379607957071264,
      "beta_param": 1.719243883672409,
      "success": true,
      "log_likelihood": -11.770982052872025,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi_param": 3.9900185874517895,
      "beta_param": 4.640109595689551,
      "success": true,
      "log_likelihood": -7.41815761325701,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi_param": 1.4621303286296428,
      "beta_param": -5.809538238807907,
      "success": true,
      "log_likelihood": -8.148808390544447,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi_param": 4.018480634658596,
      "beta_param": 4.051811478147091,
      "success": true,
      "log_likelihood": -9.212053794539505,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi_param": 0.0,
      "beta_param": 20.0,
      "success": true,
      "log_likelihood": -0.0003621441951177343,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi_param": 0.0,
      "beta_param": 20.0,
      "success": true,
      "log_likelihood": -0.0003621441951177343,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi_param": 0.0,
      "beta_param": 20.0,
      "success": true,
      "log_likelihood": -0.0003621441951177344,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi_param": 0.0,
      "beta_param": 20.0,
      "success": true,
      "log_likelihood": -0.0003621441951177344,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi_param": 1.364368755355874,
      "beta_param": 5.142191618313776,
      "success": true,
      "log_likelihood": -7.830983138863047,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi_param": 2.9314458976183455,
      "beta_param": 12.546719917858542,
      "success": true,
      "log_likelihood": -5.4597700791072565,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi_param": 0.0,
      "beta_param": 20.0,
      "success": true,
      "log_likelihood": -0.0003621441951177344,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi_param": 2.6185932931078657,
      "beta_param": 3.66818611116809,
      "success": true,
      "log_likelihood": -14.241709449346676,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi_param": 2.3566534043804475,
      "beta_param": 9.104301254450027,
      "success": true,
      "log_likelihood": -7.276276222091293,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi_param": 0.7930384828138678,
      "beta_param": -2.9956914828535934,
      "success": true,
      "log_likelihood": -16.919072098540134,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi_param": 1.244847643440394,
      "beta_param": -0.1420921199746309,
      "success": true,
      "log_likelihood": -17.30858997121429,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi_param": 3.976394877945786,
      "beta_param": 5.92281371376857,
      "success": true,
      "log_likelihood": -11.477313898189003,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi_param": 1.6419547230779128,
      "beta_param": 1.536613622143836,
      "success": true,
      "log_likelihood": -15.438692071329864,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi_param": 2.020768060262103,
      "beta_param": 2.136692521265879,
      "success": true,
      "log_likelihood": -13.208754727621532,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi_param": 6.770197571658617,
      "beta_param": 4.145813423856185,
      "success": true,
      "log_likelihood": -6.01166100561247,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi_param": 1.932029730917537,
      "beta_param": 8.195673897585692,
      "success": true,
      "log_likelihood": -7.729179921551882,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi_param": 1.4412425549607202,
      "beta_param": 3.7680100933257297,
      "success": true,
      "log_likelihood": -14.622832709332702,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi_param": 0.0,
      "beta_param": 20.0,
      "success": true,
      "log_likelihood": -0.00036214419511773437,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi_param": 1.145331443291399,
      "beta_param": -7.0579075882995586,
      "success": true,
      "log_likelihood": -7.076153166064356,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi_param": 0.4663823587558287,
      "beta_param": -3.1558019146000116,
      "success": true,
      "log_likelihood": -19.83679204884519,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi_param": 1.7276722840183374,
      "beta_param": -0.7409111495861551,
      "success": true,
      "log_likelihood": -15.70722081972528,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi_param": 0.0,
      "beta_param": 20.0,
      "success": true,
      "log_likelihood": -0.0003621441951177344,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi_param": 0.781353413782881,
      "beta_param": -0.10895106588145453,
      "success": true,
      "log_likelihood": -15.029224664021717,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi_param": 2.364800613885261,
      "beta_param": 5.335256827789766,
      "success": true,
      "log_likelihood": -9.919012404069445,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi_param": 2.7876852136188734,
      "beta_param": 3.1450336508021297,
      "success": true,
      "log_likelihood": -13.658964651196973,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi_param": 1.7210540406137464,
      "beta_param": 2.906337073442957,
      "success": true,
      "log_likelihood": -16.7890984270072,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi_param": 0.9265656263530418,
      "beta_param": 4.9067227130725755,
      "success": true,
      "log_likelihood": -8.625340176036241,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi_param": 2.11159950596367,
      "beta_param": 3.1938950219622058,
      "success": true,
      "log_likelihood": -16.640868582083183,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi_param": 1.9080198030808913,
      "beta_param": -2.8610517464580685,
      "success": true,
      "log_likelihood": -13.100088105514503,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi_param": 0.35689178295497054,
      "beta_param": 5.219175881415532,
      "success": true,
      "log_likelihood": -5.693255889361973,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi_param": 1.3032653778227115,
      "beta_param": 0.323738861735158,
      "success": true,
      "log_likelihood": -16.651697488427292,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi_param": 1.7895654614561063,
      "beta_param": 2.306737362588368,
      "success": true,
      "log_likelihood": -14.128684503759818,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi_param": 0.5618053694234268,
      "beta_param": 0.2194091388897769,
      "success": true,
      "log_likelihood": -16.22008273670699,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi_param": 1.9313963829239362,
      "beta_param": 1.5285502712549581,
      "success": true,
      "log_likelihood": -15.498625712769194,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi_param": 0.8666992652678137,
      "beta_param": -2.5320238166327322,
      "success": true,
      "log_likelihood": -18.310620744112285,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi_param": 5.107057934926008,
      "beta_param": 6.0084070225291635,
      "success": true,
      "log_likelihood": -9.32051692916161,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi_param": 0.0,
      "beta_param": -3.267943708072097,
      "success": true,
      "log_likelihood": -22.68741015179295,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi_param": 0.9006006901542,
      "beta_param": 0.8726888828314371,
      "success": true,
      "log_likelihood": -17.437243876108802,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi_param": 0.6595659354271979,
      "beta_param": -6.36919774009276,
      "success": true,
      "log_likelihood": -11.80732976731742,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi_param": 0.6710118611616241,
      "beta_param": -1.5577794342012858,
      "success": true,
      "log_likelihood": -18.679024284669843,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi_param": 0.06447868978921836,
      "beta_param": -2.585168194161498,
      "success": true,
      "log_likelihood": -20.28676185400248,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi_param": 1.4222083214179773,
      "beta_param": -1.356456967098804,
      "success": true,
      "log_likelihood": -20.63526459461574,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi_param": 5.073142790271171,
      "beta_param": 3.658996491299719,
      "success": true,
      "log_likelihood": -6.878403005582089,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi_param": 2.982675104199112,
      "beta_param": -0.37695130501827434,
      "success": true,
      "log_likelihood": -11.286937156415396,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi_param": 0.0,
      "beta_param": 1.0428619377698316,
      "success": true,
      "log_likelihood": -13.25387457384184,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi_param": 1.220696495177069,
      "beta_param": -6.128621578916383,
      "success": true,
      "log_likelihood": -8.674810071215557,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi_param": 0.36302102688437893,
      "beta_param": 0.7033243907841635,
      "success": true,
      "log_likelihood": -14.444302159504778,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi_param": 0.9797341127005685,
      "beta_param": 0.11892600131941346,
      "success": true,
      "log_likelihood": -19.94441554150781,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi_param": 2.68179532871826,
      "beta_param": 2.898459770161316,
      "success": true,
      "log_likelihood": -14.21909775081892,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi_param": 1.1453274581519606,
      "beta_param": -7.057906555218233,
      "success": true,
      "log_likelihood": -7.076153166045805,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi_param": 0.5287326230710072,
      "beta_param": -2.731913903613672,
      "success": true,
      "log_likelihood": -19.656568801192044,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi_param": 2.031939936606947,
      "beta_param": -2.68353940144308,
      "success": true,
      "log_likelihood": -11.154715926148414,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi_param": 1.4749541861781927,
      "beta_param": 0.7565145709009017,
      "success": true,
      "log_likelihood": -15.398201378797348,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi_param": 1.1621099294076314,
      "beta_param": 5.8630367428232,
      "success": true,
      "log_likelihood": -7.706916810091541,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi_param": 1.4444502204414673,
      "beta_param": 5.449366055696883,
      "success": true,
      "log_likelihood": -10.470392240808051,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi_param": 0.7509481601736343,
      "beta_param": -1.0738014661096633,
      "success": true,
      "log_likelihood": -16.377481980879846,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi_param": 0.41928748065935384,
      "beta_param": 3.02308201277378,
      "success": true,
      "log_likelihood": -10.622035986014502,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi_param": 3.201909219311016,
      "beta_param": -4.064350709978558,
      "success": true,
      "log_likelihood": -6.449592583655347,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi_param": 0.8788085931964181,
      "beta_param": -5.992403985646438,
      "success": true,
      "log_likelihood": -11.14486001630257,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi_param": 1.6232061473040122,
      "beta_param": 0.7794840114302158,
      "success": true,
      "log_likelihood": -16.07813296441148,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi_param": 0.42637213028474286,
      "beta_param": 0.5129816935043543,
      "success": true,
      "log_likelihood": -15.236806610592943,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi_param": 0.5660379002586854,
      "beta_param": -2.0942297362704063,
      "success": true,
      "log_likelihood": -22.551435772714893,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi_param": 2.6065929765943006,
      "beta_param": 6.109595391863829,
      "success": true,
      "log_likelihood": -11.874412489875505,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi_param": 1.0361254426076834,
      "beta_param": 6.38965215934558,
      "success": true,
      "log_likelihood": -6.535901723487349,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi_param": 1.1292847643839479,
      "beta_param": -8.187291579530866,
      "success": true,
      "log_likelihood": -6.4985115671802305,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi_param": 0.0,
      "beta_param": -2.493233313024165,
      "success": true,
      "log_likelihood": -21.68673535221884,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi_param": 1.1453290695764402,
      "beta_param": -7.057902311966082,
      "success": true,
      "log_likelihood": -7.076153166045607,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi_param": 0.4402162348517367,
      "beta_param": -2.138382358594918,
      "success": true,
      "log_likelihood": -23.426498401558966,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi_param": 0.0,
      "beta_param": 1.7057869681964235,
      "success": true,
      "log_likelihood": -10.998506324687666,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi_param": 2.1399619818824083,
      "beta_param": -5.035850574809126,
      "success": true,
      "log_likelihood": -8.401444618018477,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi_param": 1.4120440391182327,
      "beta_param": -0.06267014226301774,
      "success": true,
      "log_likelihood": -13.243326217551393,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi_param": 0.21060225022254023,
      "beta_param": -1.9338835114089166,
      "success": true,
      "log_likelihood": -25.829664409599054,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi_param": 1.5534618825709336,
      "beta_param": -5.695524864220922,
      "success": true,
      "log_likelihood": -8.860764255918447,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi_param": 1.3146040443552907,
      "beta_param": 2.0937229148467114,
      "success": true,
      "log_likelihood": -17.44776913592995,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi_param": 2.394383891592812,
      "beta_param": -2.1900596107489636,
      "success": true,
      "log_likelihood": -12.952461897520394,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi_param": 1.5883412754109665,
      "beta_param": 8.907764319976998,
      "success": true,
      "log_likelihood": -4.988505876469012,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi_param": 0.8009532999475338,
      "beta_param": -1.8053527952227957,
      "success": true,
      "log_likelihood": -14.794105987031898,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi_param": 0.39448726556901414,
      "beta_param": -0.5770471687416998,
      "success": true,
      "log_likelihood": -21.240050402307165,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "phi_param": {
        "r": 0.7702257270599007,
        "p": 7.461809004731985e-21
      },
      "beta_param": {
        "r": 0.8912757959228335,
        "p": 1.9727127091189836e-35
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 30.720522721702537,
  "bic_error": "'ModelOutput' object has no attribute 'metrics'",
  "recovery_summary": "Parameter Recovery:\n- phi_param: r = 0.770\n- beta_param: r = 0.891",
  "previous_models": [
    "Specification: U_accept = split_self - phi_param * |split_self - ((token_self / (token_self + token_opp)) * combined_earning)| + beta_param\nSummary: This model computes the utility of accepting an offer by taking the monetary gain (split_self) and subtracting a penalty proportional to the absolute deviation from a fairness benchmark (the expected fair share derived from token contributions and combined earnings). A baseline bias parameter is added to capture any constant shift in preference. Two learnable parameters (phi_param and beta_param) govern fairness sensitivity and baseline bias, ensuring the model captures key fairness considerations in responder behavior.\nBIC: 30.720522721702537\n\nParameter Recovery:\n- phi_param: r = 0.770\n- beta_param: r = 0.891"
  ]
}