{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the given task. The model should obtain the utility, (not the probability of choosing an action).  Your goal is to eventually explore the entire space of possible explainations and mechanisms by which the observed behavior arises.\n\nYour model should use the given variables appropriately, but does not necessary need to use all or even most of the variables. Do not include the model for the utility of rejecting an offer. \n\nThe model should:\n1. Predict only responder behavior.\n2. Build on relevant psychological principles.\n3. Be considerate of high covariance between learnable parameters as the model will have to pass parameter recovery tests.\n4. Be applicable to the dataset given within the task description (i.e. the model should be able to be run using only the provided dataset structure).\n5. Not include parameters to simulate general stochasticity of behavior, because this will be handled later by a temperature parameter.\n6. Should have no more than two learnable parameters.\n7. This specific model should calculate the utility of an action, which will then be used to determine the probability of choosing that action. Negative values should represent a negative utility, and thus an unlikely action.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Use clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'. DO NOT USE 'lambda' AS A PARAMETER NAME.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the given task. The model should obtain the utility, (not the probability of choosing an action).  Your goal is to eventually explore the entire space of possible explainations and mechanisms by which the observed behavior arises.\n\nYour model should use the given variables appropriately, but does not necessary need to use all or even most of the variables. Do not include the model for the utility of rejecting an offer. \n\nThe model should:\n1. Predict only responder behavior.\n2. Build on relevant psychological principles.\n3. Be considerate of high covariance between learnable parameters as the model will have to pass parameter recovery tests.\n4. Be applicable to the dataset given within the task description (i.e. the model should be able to be run using only the provided dataset structure).\n5. Not include parameters to simulate general stochasticity of behavior, because this will be handled later by a temperature parameter.\n6. Should have no more than two learnable parameters.\n7. This specific model should calculate the utility of an action, which will then be used to determine the probability of choosing that action. Negative values should represent a negative utility, and thus an unlikely action.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Use clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'. DO NOT USE 'lambda' AS A PARAMETER NAME.\n\nPrevious Models:\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "Step-by-step reasoning:\n1. Key psychological mechanisms: In responder decisions, fairness or inequity aversion is critical. Responders compare the money they are offered (split_self) against an expected \u201cfair share\u201d computed based on their contributions (token_self) relative to the total contributions (token_self + token_opp). If the offer is below this fair share, it is likely to be perceived as unfair, reducing the utility of accepting it.\n2. Interaction of mechanisms: The responder computes a fair share as a ratio of their contribution to the total combined contribution multiplied by the total available earnings (combined_earning). If the actual offer (split_self) is less than the fair share, a penalty (inequity aversion cost) is incurred. A baseline bias (or offset) can also shift overall utility.\n3. Mathematical form: We use a piecewise linear formulation for the utility of accepting an offer:\n\u2003\u2003U = split_self \u2212 fairness_sensitivity \u00d7 (fair_share*combined_earning \u2212 split_self)_+ + acceptance_bias,\nwhere (x)_+ denotes max(x, 0). In this expression the fair share is computed as token_self/(token_self+token_opp). If the offer is above or equal to the fair share, no penalty is applied.\n4. Parameters: There are two learnable parameters:\n\u2003\u2003\u2022 fairness_sensitivity (\u03b1): a weight on the magnitude of the fairness violation when the offer is less than the fair share.\n\u2003\u2003\u2022 acceptance_bias (\u03b4): a baseline preference that shifts the utility.\nBoth parameters are given finite bounds.\n5. Mapping to the dataset: Variables token_self, token_opp, and combined_earning are used to calculate the fair share expectation, and split_self is the critical dependent variable which, after fairness adjustment, yields the utility of accepting an offer. Only responder trials (trial_role = 1) are modeled.\n\nBelow is the formal specification:\n\n<MODEL>\nU = split_self - fairness_sensitivity * max((token_self / (token_self + token_opp)) * combined_earning - split_self, 0) + acceptance_bias\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the offer; computed as the offered share adjusted by fairness penalty and baseline bias.\",\n      \"range\": {\n        \"min\": \"-infinity\",\n        \"max\": \"infinity\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fairness_sensitivity\": {\n      \"description\": \"Learnable parameter (alpha) quantifying the sensitivity to receiving less than the fair share. Higher values denote greater disutility from offers below the fair share.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 10.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"acceptance_bias\": {\n      \"description\": \"Learnable parameter (delta) representing an overall bias or baseline preference for task acceptance decisions.\",\n      \"range\": {\n        \"min\": -10.0,\n        \"max\": 10.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant, indicating the participant's contribution.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"infinity\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent, representing the opponent's contribution to the shared pot.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"infinity\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total amount of money available, determined by the combined tokens found (each token worth \u00a33).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"infinity\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_self\": {\n      \"description\": \"The monetary share offered to the participant in the proposal (in \u00a3).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"infinity\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<SUMMARY>\nThis model computes the utility for accepting an offer by comparing the offered amount (split_self) to a fair share based on relative contributions (token_self and token_opp) and the total communal earnings (combined_earning). If the offer falls short of the fair share, a penalty scaled by the fairness_sensitivity parameter is applied, with an additional acceptance_bias offset. Only responder behavior is modeled, with two learnable parameters subject to finite bounds.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return the utility values for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['fairness_sensitivity', 'acceptance_bias']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of utility values for each trial\n\n                Your code will be implemented within the following code block:\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    utility_values = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        utility_values.append(beta + (epsilon * E) + (eta * N))\n    return utility_values\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE UTLITY VALUES.\n                Model Specification:\n                U = split_self - fairness_sensitivity * max((token_self / (token_self + token_opp)) * combined_earning - split_self, 0) + acceptance_bias\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the offer; computed as the offered share adjusted by fairness penalty and baseline bias.\",\n      \"range\": {\n        \"min\": \"-infinity\",\n        \"max\": \"infinity\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fairness_sensitivity\": {\n      \"description\": \"Learnable parameter (alpha) quantifying the sensitivity to receiving less than the fair share. Higher values denote greater disutility from offers below the fair share.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 10.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"acceptance_bias\": {\n      \"description\": \"Learnable parameter (delta) representing an overall bias or baseline preference for task acceptance decisions.\",\n      \"range\": {\n        \"min\": -10.0,\n        \"max\": 10.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant, indicating the participant's contribution.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"infinity\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent, representing the opponent's contribution to the shared pot.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"infinity\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total amount of money available, determined by the combined tokens found (each token worth \\u00a33).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"infinity\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_self\": {\n      \"description\": \"The monetary share offered to the participant in the proposal (in \\u00a3).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"infinity\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "```python\nimport json\nimport math\n\ndef simulate_model(trial_data, fairness_sensitivity=1.0, acceptance_bias=0.0):\n    utility_values = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n        split_self = trial.get(\"split_self\", 0)\n\n        if token_self + token_opp == 0: #Handle division by zero\n            fair_share_earning = 0\n        else:\n            fair_share_earning = (token_self / (token_self + token_opp)) * combined_earning\n\n        fairness_penalty = max(fair_share_earning - split_self, 0)\n        utility = split_self - fairness_sensitivity * fairness_penalty + acceptance_bias\n        utility_values.append(utility)\n    return utility_values\n\n# Data as list of dictionaries\ndata_json = '[{\"ID\":1,\"group\":\"A\",\"trial_number\":1,\"trial_type\":1,\"trial_role\":1,\"token_opp\":5,\"token_self\":10,\"combined_earning\":45,\"split_opp\":15,\"split_self\":30,\"splitperc_opp\":33,\"splitperc_self\":67,\"accept\":1,\"accepted_amount\":30,\"accepted_perc\":67,\"proposed_perc\":67,\"proposed_amount\":30},{\"ID\":2,\"group\":\"A\",\"trial_number\":2,\"trial_type\":1,\"trial_role\":1,\"token_opp\":10,\"token_self\":5,\"combined_earning\":45,\"split_opp\":30,\"split_self\":15,\"splitperc_opp\":67,\"splitperc_self\":33,\"accept\":0,\"accepted_amount\":0,\"accepted_perc\":0,\"proposed_perc\":33,\"proposed_amount\":15}]'\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n\n```"
    }
  ],
  "learnable_parameters": {
    "fairness_sensitivity": {
      "description": "Learnable parameter (alpha) quantifying the sensitivity to receiving less than the fair share. Higher values denote greater disutility from offers below the fair share.",
      "range": {
        "min": 0.0,
        "max": 10.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "acceptance_bias": {
      "description": "Learnable parameter (delta) representing an overall bias or baseline preference for task acceptance decisions.",
      "range": {
        "min": -10.0,
        "max": 10.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "U = split_self - fairness_sensitivity * max((token_self / (token_self + token_opp)) * combined_earning - split_self, 0) + acceptance_bias",
  "variable_descriptions": {
    "U": {
      "description": "Utility of accepting the offer; computed as the offered share adjusted by fairness penalty and baseline bias.",
      "range": {
        "min": "-infinity",
        "max": "infinity",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "fairness_sensitivity": {
      "description": "Learnable parameter (alpha) quantifying the sensitivity to receiving less than the fair share. Higher values denote greater disutility from offers below the fair share.",
      "range": {
        "min": 0.0,
        "max": 10.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "acceptance_bias": {
      "description": "Learnable parameter (delta) representing an overall bias or baseline preference for task acceptance decisions.",
      "range": {
        "min": -10.0,
        "max": 10.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "token_self": {
      "description": "Number of tokens found by the participant, indicating the participant's contribution.",
      "range": {
        "min": 0,
        "max": "infinity",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent, representing the opponent's contribution to the shared pot.",
      "range": {
        "min": 0,
        "max": "infinity",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "combined_earning": {
      "description": "Total amount of money available, determined by the combined tokens found (each token worth \u00a33).",
      "range": {
        "min": 0,
        "max": "infinity",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "split_self": {
      "description": "The monetary share offered to the participant in the proposal (in \u00a3).",
      "range": {
        "min": 0,
        "max": "infinity",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    }
  },
  "model_summary": "This model computes the utility for accepting an offer by comparing the offered amount (split_self) to a fair share based on relative contributions (token_self and token_opp) and the total communal earnings (combined_earning). If the offer falls short of the fair share, a penalty scaled by the fairness_sensitivity parameter is applied, with an additional acceptance_bias offset. Only responder behavior is modeled, with two learnable parameters subject to finite bounds.",
  "full_reasoning": "Step-by-step reasoning:\n1. Key psychological mechanisms: In responder decisions, fairness or inequity aversion is critical. Responders compare the money they are offered (split_self) against an expected \u201cfair share\u201d computed based on their contributions (token_self) relative to the total contributions (token_self + token_opp). If the offer is below this fair share, it is likely to be perceived as unfair, reducing the utility of accepting it.\n2. Interaction of mechanisms: The responder computes a fair share as a ratio of their contribution to the total combined contribution multiplied by the total available earnings (combined_earning). If the actual offer (split_self) is less than the fair share, a penalty (inequity aversion cost) is incurred. A baseline bias (or offset) can also shift overall utility.\n3. Mathematical form: We use a piecewise linear formulation for the utility of accepting an offer:\n\u2003\u2003U = split_self \u2212 fairness_sensitivity \u00d7 (fair_share*combined_earning \u2212 split_self)_+ + acceptance_bias,\nwhere (x)_+ denotes max(x, 0). In this expression the fair share is computed as token_self/(token_self+token_opp). If the offer is above or equal to the fair share, no penalty is applied.\n4. Parameters: There are two learnable parameters:\n\u2003\u2003\u2022 fairness_sensitivity (\u03b1): a weight on the magnitude of the fairness violation when the offer is less than the fair share.\n\u2003\u2003\u2022 acceptance_bias (\u03b4): a baseline preference that shifts the utility.\nBoth parameters are given finite bounds.\n5. Mapping to the dataset: Variables token_self, token_opp, and combined_earning are used to calculate the fair share expectation, and split_self is the critical dependent variable which, after fairness adjustment, yields the utility of accepting an offer. Only responder trials (trial_role = 1) are modeled.\n\nBelow is the formal specification:\n\n<MODEL>\nU = split_self - fairness_sensitivity * max((token_self / (token_self + token_opp)) * combined_earning - split_self, 0) + acceptance_bias\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the offer; computed as the offered share adjusted by fairness penalty and baseline bias.\",\n      \"range\": {\n        \"min\": \"-infinity\",\n        \"max\": \"infinity\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fairness_sensitivity\": {\n      \"description\": \"Learnable parameter (alpha) quantifying the sensitivity to receiving less than the fair share. Higher values denote greater disutility from offers below the fair share.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 10.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"acceptance_bias\": {\n      \"description\": \"Learnable parameter (delta) representing an overall bias or baseline preference for task acceptance decisions.\",\n      \"range\": {\n        \"min\": -10.0,\n        \"max\": 10.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant, indicating the participant's contribution.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"infinity\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent, representing the opponent's contribution to the shared pot.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"infinity\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total amount of money available, determined by the combined tokens found (each token worth \u00a33).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"infinity\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_self\": {\n      \"description\": \"The monetary share offered to the participant in the proposal (in \u00a3).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"infinity\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<SUMMARY>\nThis model computes the utility for accepting an offer by comparing the offered amount (split_self) to a fair share based on relative contributions (token_self and token_opp) and the total communal earnings (combined_earning). If the offer falls short of the fair share, a penalty scaled by the fairness_sensitivity parameter is applied, with an additional acceptance_bias offset. Only responder behavior is modeled, with two learnable parameters subject to finite bounds.\n</SUMMARY>",
  "current_model": "Specification: U = split_self - fairness_sensitivity * max((token_self / (token_self + token_opp)) * combined_earning - split_self, 0) + acceptance_bias\nSummary: This model computes the utility for accepting an offer by comparing the offered amount (split_self) to a fair share based on relative contributions (token_self and token_opp) and the total communal earnings (combined_earning). If the offer falls short of the fair share, a penalty scaled by the fairness_sensitivity parameter is applied, with an additional acceptance_bias offset. Only responder behavior is modeled, with two learnable parameters subject to finite bounds.",
  "simulation_code": "def simulate_model(trial_data, fairness_sensitivity=1.0, acceptance_bias=0.0):\n    utility_values = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n        split_self = trial.get(\"split_self\", 0)\n\n        if token_self + token_opp == 0: #Handle division by zero\n            fair_share_earning = 0\n        else:\n            fair_share_earning = (token_self / (token_self + token_opp)) * combined_earning\n\n        fairness_penalty = max(fair_share_earning - split_self, 0)\n        utility = split_self - fairness_sensitivity * fairness_penalty + acceptance_bias\n        utility_values.append(utility)\n    return utility_values",
  "fitting_results": [
    {
      "fairness_sensitivity": 2.0465991486206048,
      "acceptance_bias": -6.3830213382152605,
      "success": true,
      "log_likelihood": -6.173579779317258,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_sensitivity": 1.791547553616488,
      "acceptance_bias": 0.7504328308838273,
      "success": true,
      "log_likelihood": -16.27097785999689,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_sensitivity": 2.9722836501888827,
      "acceptance_bias": 4.011672219134839,
      "success": true,
      "log_likelihood": -10.705124856515532,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_sensitivity": 1.7204417352216403,
      "acceptance_bias": -0.5043160678475749,
      "success": true,
      "log_likelihood": -13.974376520634552,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_sensitivity": 4.399329872628754,
      "acceptance_bias": 5.316063636086983,
      "success": true,
      "log_likelihood": -8.652341680920117,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_sensitivity": 2.397799339610545,
      "acceptance_bias": 4.424159254162115,
      "success": true,
      "log_likelihood": -11.585308268263205,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_sensitivity": 0.0,
      "acceptance_bias": 10.0,
      "success": true,
      "log_likelihood": -0.05368990312462738,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_sensitivity": 3.090123906417601,
      "acceptance_bias": 7.075002914066823,
      "success": true,
      "log_likelihood": -10.06181260678903,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_sensitivity": 0.0,
      "acceptance_bias": 10.0,
      "success": true,
      "log_likelihood": -0.05368990312462738,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_sensitivity": 3.0089869728201135,
      "acceptance_bias": 1.4868174160709198,
      "success": true,
      "log_likelihood": -11.344160537249406,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_sensitivity": 3.913447206583948,
      "acceptance_bias": 4.354085760642831,
      "success": true,
      "log_likelihood": -7.195897899401386,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_sensitivity": 2.0723895024463044,
      "acceptance_bias": -5.433387826475767,
      "success": true,
      "log_likelihood": -7.266370666371455,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_sensitivity": 3.947017925102251,
      "acceptance_bias": 3.7493922145970386,
      "success": true,
      "log_likelihood": -8.91527382096384,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_sensitivity": 0.0,
      "acceptance_bias": 10.0,
      "success": true,
      "log_likelihood": -0.05368990312462738,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_sensitivity": 0.0,
      "acceptance_bias": 10.0,
      "success": true,
      "log_likelihood": -0.053689903124627375,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_sensitivity": 0.0,
      "acceptance_bias": 10.0,
      "success": true,
      "log_likelihood": -0.05368990312462739,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_sensitivity": 0.0,
      "acceptance_bias": 10.0,
      "success": true,
      "log_likelihood": -0.05368990312462736,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_sensitivity": 1.3559222639932804,
      "acceptance_bias": 5.096738552967217,
      "success": true,
      "log_likelihood": -7.8104088662251225,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_sensitivity": 2.3843083526323223,
      "acceptance_bias": 10.0,
      "success": true,
      "log_likelihood": -5.535674496555349,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_sensitivity": 0.0,
      "acceptance_bias": 10.0,
      "success": true,
      "log_likelihood": -0.05368990312462737,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_sensitivity": 2.578802050639774,
      "acceptance_bias": 3.5080820740261704,
      "success": true,
      "log_likelihood": -14.111937509122619,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_sensitivity": 2.3454962433256736,
      "acceptance_bias": 9.052099515893662,
      "success": true,
      "log_likelihood": -7.269052712866005,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_sensitivity": 0.8671356740838609,
      "acceptance_bias": -2.9035527981244775,
      "success": true,
      "log_likelihood": -16.56614862924628,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_sensitivity": 1.2493797262194797,
      "acceptance_bias": -0.1878104319640751,
      "success": true,
      "log_likelihood": -17.09428089006603,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_sensitivity": 3.9068754400834997,
      "acceptance_bias": 5.683250993589541,
      "success": true,
      "log_likelihood": -11.357401388486622,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_sensitivity": 1.6274286513570773,
      "acceptance_bias": 1.4479317988749405,
      "success": true,
      "log_likelihood": -15.285214365649319,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_sensitivity": 1.9959177971704158,
      "acceptance_bias": 2.01425824553832,
      "success": true,
      "log_likelihood": -13.045078510298573,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_sensitivity": 8.233937827513461,
      "acceptance_bias": 4.76537896885847,
      "success": true,
      "log_likelihood": -4.502011539355557,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_sensitivity": 1.9227230417109966,
      "acceptance_bias": 8.149300053861884,
      "success": true,
      "log_likelihood": -7.721295035573804,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_sensitivity": 1.4301100177926165,
      "acceptance_bias": 3.710084885474697,
      "success": true,
      "log_likelihood": -14.579062506009048,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_sensitivity": 0.0,
      "acceptance_bias": 10.0,
      "success": true,
      "log_likelihood": -0.05368990312462736,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_sensitivity": 2.046599933773988,
      "acceptance_bias": -6.383018538692018,
      "success": true,
      "log_likelihood": -6.1735797793179055,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_sensitivity": 0.532386007004294,
      "acceptance_bias": -3.037451060339346,
      "success": true,
      "log_likelihood": -19.628153076372534,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_sensitivity": 1.7464519097711013,
      "acceptance_bias": -0.8234419929845952,
      "success": true,
      "log_likelihood": -15.272874130875195,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_sensitivity": 0.0,
      "acceptance_bias": 10.0,
      "success": true,
      "log_likelihood": -0.05368990312462737,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_sensitivity": 0.7912572438572366,
      "acceptance_bias": -0.11257558596658719,
      "success": true,
      "log_likelihood": -14.91296360386342,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_sensitivity": 2.339121026299414,
      "acceptance_bias": 5.229950742674583,
      "success": true,
      "log_likelihood": -9.871733052152393,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_sensitivity": 2.7423475674355458,
      "acceptance_bias": 2.9562522632996564,
      "success": true,
      "log_likelihood": -13.47023522636444,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_sensitivity": 1.7035115230628648,
      "acceptance_bias": 2.820788832592139,
      "success": true,
      "log_likelihood": -16.701738393868943,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_sensitivity": 0.9230418227087718,
      "acceptance_bias": 4.881225278802182,
      "success": true,
      "log_likelihood": -8.6118323506289,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_sensitivity": 2.084709891911479,
      "acceptance_bias": 3.075947734673841,
      "success": true,
      "log_likelihood": -16.53302774465146,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_sensitivity": 2.175803064601324,
      "acceptance_bias": -2.7640225724142837,
      "success": true,
      "log_likelihood": -12.07412877451097,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_sensitivity": 0.36172082363319885,
      "acceptance_bias": 5.228459603361987,
      "success": true,
      "log_likelihood": -5.689521157856934,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_sensitivity": 1.3021852983223965,
      "acceptance_bias": 0.2683750499124099,
      "success": true,
      "log_likelihood": -16.46445310747509,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_sensitivity": 1.7702092481496545,
      "acceptance_bias": 2.209148247793502,
      "success": true,
      "log_likelihood": -14.005244949994022,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_sensitivity": 0.57261763655325,
      "acceptance_bias": 0.23082553859614482,
      "success": true,
      "log_likelihood": -16.151863221228506,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_sensitivity": 1.9105886214798435,
      "acceptance_bias": 1.4100507330294,
      "success": true,
      "log_likelihood": -15.298730423156336,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_sensitivity": 0.9246531829281506,
      "acceptance_bias": -2.4728093945155587,
      "success": true,
      "log_likelihood": -17.97437003123981,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_sensitivity": 5.0052010921010845,
      "acceptance_bias": 5.640353942772617,
      "success": true,
      "log_likelihood": -9.068765254255315,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_sensitivity": 0.0,
      "acceptance_bias": -3.267943911200797,
      "success": true,
      "log_likelihood": -22.68741015179294,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_sensitivity": 0.9026795789972882,
      "acceptance_bias": 0.8509468066332521,
      "success": true,
      "log_likelihood": -17.347443599342434,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_sensitivity": 0.9038101446715722,
      "acceptance_bias": -6.051906943298961,
      "success": true,
      "log_likelihood": -11.409727872655429,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_sensitivity": 0.6997667791974349,
      "acceptance_bias": -1.523743764008739,
      "success": true,
      "log_likelihood": -18.503211033916962,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_sensitivity": 0.06616190657641582,
      "acceptance_bias": -2.5845588903585974,
      "success": true,
      "log_likelihood": -20.285118909611704,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_sensitivity": 1.454488827468776,
      "acceptance_bias": -1.392941865776788,
      "success": true,
      "log_likelihood": -20.22016428668216,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_sensitivity": 5.162691587508295,
      "acceptance_bias": 3.3669664995072934,
      "success": true,
      "log_likelihood": -6.189517304960949,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_sensitivity": 3.1471077094126496,
      "acceptance_bias": -0.5051191767115926,
      "success": true,
      "log_likelihood": -10.3472244096806,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_sensitivity": 0.0,
      "acceptance_bias": 1.0428627112746172,
      "success": true,
      "log_likelihood": -13.253874573842909,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_sensitivity": 1.7240926637318543,
      "acceptance_bias": -5.74300260767815,
      "success": true,
      "log_likelihood": -7.916641277937543,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_sensitivity": 0.3749761736507663,
      "acceptance_bias": 0.7273265270755681,
      "success": true,
      "log_likelihood": -14.410592901960758,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_sensitivity": 0.9850770206260097,
      "acceptance_bias": 0.09545997272669149,
      "success": true,
      "log_likelihood": -19.804703708635028,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_sensitivity": 2.6392968465086413,
      "acceptance_bias": 2.716420350391713,
      "success": true,
      "log_likelihood": -14.023778633417395,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_sensitivity": 2.0465651002042966,
      "acceptance_bias": -6.3830615969179805,
      "success": true,
      "log_likelihood": -6.173579779629369,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_sensitivity": 0.5831578381035838,
      "acceptance_bias": -2.640885191547405,
      "success": true,
      "log_likelihood": -19.44979791707581,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_sensitivity": 2.315245465561072,
      "acceptance_bias": -2.5984443442253924,
      "success": true,
      "log_likelihood": -10.087469877915632,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_sensitivity": 1.4676877390931515,
      "acceptance_bias": 0.6828119187339687,
      "success": true,
      "log_likelihood": -15.21311856438437,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_sensitivity": 1.1565770336778347,
      "acceptance_bias": 5.829670757227445,
      "success": true,
      "log_likelihood": -7.695481950352543,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_sensitivity": 1.435362588211769,
      "acceptance_bias": 5.401707875014762,
      "success": true,
      "log_likelihood": -10.451133984914534,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_sensitivity": 0.7717333110260166,
      "acceptance_bias": -1.0589014312668017,
      "success": true,
      "log_likelihood": -16.211738235984225,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_sensitivity": 0.4243942559822408,
      "acceptance_bias": 3.0306046494557233,
      "success": true,
      "log_likelihood": -10.60890577349731,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_sensitivity": 10.0,
      "acceptance_bias": -2.194903933333899,
      "success": true,
      "log_likelihood": -1.6526045746690832,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_sensitivity": 1.139938493550805,
      "acceptance_bias": -5.717053295043204,
      "success": true,
      "log_likelihood": -10.65272744246466,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_sensitivity": 1.6131488846394912,
      "acceptance_bias": 0.6906631794170492,
      "success": true,
      "log_likelihood": -15.866735313522348,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_sensitivity": 0.437923590060859,
      "acceptance_bias": 0.5330538358976231,
      "success": true,
      "log_likelihood": -15.192972651267516,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_sensitivity": 0.46053226665597735,
      "acceptance_bias": -2.383311572715923,
      "success": true,
      "log_likelihood": -22.77264982485186,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_sensitivity": 2.579051788784522,
      "acceptance_bias": 5.999910517924386,
      "success": true,
      "log_likelihood": -11.835130092520867,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_sensitivity": 1.0318036139173095,
      "acceptance_bias": 6.36158290580948,
      "success": true,
      "log_likelihood": -6.5283805144909355,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_sensitivity": 0.9443841942448387,
      "acceptance_bias": -8.50676954119448,
      "success": true,
      "log_likelihood": -6.592360166227565,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_sensitivity": 0.0,
      "acceptance_bias": -2.493233073780841,
      "success": true,
      "log_likelihood": -21.686735352218914,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_sensitivity": 2.046602109810254,
      "acceptance_bias": -6.383019897105951,
      "success": true,
      "log_likelihood": -6.173579779318029,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_sensitivity": 0.4793523081235357,
      "acceptance_bias": -2.066649173343684,
      "success": true,
      "log_likelihood": -23.28895050465947,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_sensitivity": 0.0,
      "acceptance_bias": 1.7057883659242539,
      "success": true,
      "log_likelihood": -10.998506324686874,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_sensitivity": 1.626830067916753,
      "acceptance_bias": -5.837922184088657,
      "success": true,
      "log_likelihood": -8.867253734893417,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_sensitivity": 1.413836723554362,
      "acceptance_bias": -0.12589559408657774,
      "success": true,
      "log_likelihood": -12.996341725296404,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_sensitivity": 0.24705451129854322,
      "acceptance_bias": -1.8497865555967177,
      "success": true,
      "log_likelihood": -25.76943637495311,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_sensitivity": 3.0203080176566264,
      "acceptance_bias": -4.767739752757494,
      "success": true,
      "log_likelihood": -7.157681751094213,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_sensitivity": 1.305812290547906,
      "acceptance_bias": 2.037057813422587,
      "success": true,
      "log_likelihood": -17.36265649914229,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_sensitivity": 1.9892432857711166,
      "acceptance_bias": -2.9946920254724048,
      "success": true,
      "log_likelihood": -13.517243682540224,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_sensitivity": 1.5826701007427957,
      "acceptance_bias": 8.87500388028621,
      "success": true,
      "log_likelihood": -4.984511684290646,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_sensitivity": 0.8353611165283734,
      "acceptance_bias": -1.7739917437533759,
      "success": true,
      "log_likelihood": -14.55690524365016,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_sensitivity": 0.4135224283288976,
      "acceptance_bias": -0.5405677604147954,
      "success": true,
      "log_likelihood": -21.174812159586118,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "fairness_sensitivity": {
        "r": 0.7172202875912398,
        "p": 4.7097307412712585e-17
      },
      "acceptance_bias": {
        "r": 0.8724082025309003,
        "p": 3.13391864526256e-32
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 30.185236217491255,
  "bic_error": "'ModelOutput' object has no attribute 'metrics'",
  "recovery_summary": "Parameter Recovery:\n- fairness_sensitivity: r = 0.717\n- acceptance_bias: r = 0.872",
  "previous_models": [
    "Specification: U = split_self - fairness_sensitivity * max((token_self / (token_self + token_opp)) * combined_earning - split_self, 0) + acceptance_bias\nSummary: This model computes the utility for accepting an offer by comparing the offered amount (split_self) to a fair share based on relative contributions (token_self and token_opp) and the total communal earnings (combined_earning). If the offer falls short of the fair share, a penalty scaled by the fairness_sensitivity parameter is applied, with an additional acceptance_bias offset. Only responder behavior is modeled, with two learnable parameters subject to finite bounds.\nBIC: 30.185236217491255\n\nParameter Recovery:\n- fairness_sensitivity: r = 0.717\n- acceptance_bias: r = 0.872"
  ]
}