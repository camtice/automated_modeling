{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the given task. The model should obtain the utility, (not the probability of choosing an action).  Your goal is to eventually explore the entire space of possible explainations and mechanisms by which the observed behavior arises.\n\nYour model should use the given variables appropriately, but does not necessary need to use all or even most of the variables. Do not include the model for the utility of rejecting an offer. \n\nThe model should:\n1. Predict only responder behavior.\n2. Build on relevant psychological principles.\n3. Be considerate of high covariance between learnable parameters as the model will have to pass parameter recovery tests.\n4. Be applicable to the dataset given within the task description (i.e. the model should be able to be run using only the provided dataset structure).\n5. Not include parameters to simulate general stochasticity of behavior, because this will be handled later by a temperature parameter.\n6. Should have no more than two learnable parameters.\n7. This specific model should calculate the utility of an action, which will then be used to determine the probability of choosing that action. Negative values should represent a negative utility, and thus an unlikely action.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Use clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'. DO NOT USE 'lambda' AS A PARAMETER NAME.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the given task. The model should obtain the utility, (not the probability of choosing an action).  Your goal is to eventually explore the entire space of possible explainations and mechanisms by which the observed behavior arises.\n\nYour model should use the given variables appropriately, but does not necessary need to use all or even most of the variables. Do not include the model for the utility of rejecting an offer. \n\nThe model should:\n1. Predict only responder behavior.\n2. Build on relevant psychological principles.\n3. Be considerate of high covariance between learnable parameters as the model will have to pass parameter recovery tests.\n4. Be applicable to the dataset given within the task description (i.e. the model should be able to be run using only the provided dataset structure).\n5. Not include parameters to simulate general stochasticity of behavior, because this will be handled later by a temperature parameter.\n6. Should have no more than two learnable parameters.\n7. This specific model should calculate the utility of an action, which will then be used to determine the probability of choosing that action. Negative values should represent a negative utility, and thus an unlikely action.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Use clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'. DO NOT USE 'lambda' AS A PARAMETER NAME.\n\nPrevious Models:\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "Step-by-step reasoning:\n\n1. Key psychological mechanisms:  \n\u2003\u2013 Responders care about their monetary gain (split_self) but also have expectations of fairness based on their relative contribution.  \n\u2003\u2013 The fair share expectation derives from their own token count relative to the total tokens (token_self and token_opp) and the overall available money (combined_earning).  \n\u2003\u2013 When offers fall below this expected fair share, a disutility (loss) is incurred driven by fairness sensitivity.\n\n2. How these mechanisms interact:  \n\u2003\u2013 The responder\u2019s utility increases with the monetary offer split_self.  \n\u2003\u2013 If split_self does not reach the expected fair share (computed as token_self/(token_self+token_opp) times combined_earning), the discrepancy is penalized proportionally by a fairness sensitivity parameter.  \n\u2003\u2013 An additional baseline bias parameter captures systematic tendencies to accept or reject offers independently of the fairness gap.\n\n3. Mathematical form to capture these interactions:  \n\u2003\u2013 Define expected_fair_share = (token_self/(token_self+token_opp)) * combined_earning.  \n\u2003\u2013 Use a piecewise function that penalizes only when the offer is lower than the expected fair share.  \n\u2003\u2013 The utility signal U for accepting is then a sum of the monetary offer (split_self), an additive bias, minus the fairness penalty when applicable.\n\n4. Parameters needed to calibrate the model:  \n\u2003\u2013 fairness_weight (\u03b1): a positive sensitivity parameter, penalizing deviations below the fair share.  \n\u2003\u2013 bias (\u03b2): an overall shift parameter adjusting the baseline utility level.\n\n5. Mapping to observable behavior:  \n\u2003\u2013 For each trial, the model computes the expected fair share from token_self, token_opp, and combined_earning.  \n\u2003\u2013 The utility for accepting an offer is computed using the offer value (split_self), the fairness discrepancy (if any), and the two learnable parameters.  \n\u2003\u2013 Negative computed utility indicates a low likelihood for accepting under the later applied softmax function with a temperature parameter.\n\nBelow is the formal specification:\n\n<MODEL>\nU = split_self + bias - fairness_weight * max( (token_self / (token_self + token_opp)) * combined_earning - split_self , 0 )\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the offer on a given trial.\",\n      \"range\": {\n        \"min\": \"-infinity\",\n        \"max\": \"infinity\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"split_self\": {\n      \"description\": \"The monetary share proposed for the participant (in \u00a3).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"infinity\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"The number of tokens found by the participant, representing their contribution.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"infinity\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"The number of tokens found by the opponent, representing the opponent's contribution.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"infinity\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total monetary amount earned together by tokens (each token is \u00a33).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"infinity\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"fairness_weight\": {\n      \"description\": \"Learnable sensitivity parameter that penalizes deviations below the expected fair share. Higher values indicate greater punishment for unfair offers.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"bias\": {\n      \"description\": \"Learnable additive parameter capturing baseline utility of accepting an offer regardless of fairness discrepancy.\",\n      \"range\": {\n        \"min\": -50,\n        \"max\": 50,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    }\n  }\n}\n</VARIABLES>\n\n<SUMMARY>\nA utility model for responder behavior that computes the accept-action utility as the offered share adjusted by a baseline bias and penalized when the offer is lower than the fair share, determined from the participant\u2019s relative token contribution to the combined earnings. The model contains two learnable parameters: fairness_weight and bias.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return the utility values for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['fairness_weight', 'bias']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of utility values for each trial\n\n                Your code will be implemented within the following code block:\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    utility_values = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        utility_values.append(beta + (epsilon * E) + (eta * N))\n    return utility_values\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE UTLITY VALUES.\n                Model Specification:\n                U = split_self + bias - fairness_weight * max( (token_self / (token_self + token_opp)) * combined_earning - split_self , 0 )\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the offer on a given trial.\",\n      \"range\": {\n        \"min\": \"-infinity\",\n        \"max\": \"infinity\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"split_self\": {\n      \"description\": \"The monetary share proposed for the participant (in \\u00a3).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"infinity\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"The number of tokens found by the participant, representing their contribution.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"infinity\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"The number of tokens found by the opponent, representing the opponent's contribution.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"infinity\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total monetary amount earned together by tokens (each token is \\u00a33).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"infinity\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"fairness_weight\": {\n      \"description\": \"Learnable sensitivity parameter that penalizes deviations below the expected fair share. Higher values indicate greater punishment for unfair offers.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"bias\": {\n      \"description\": \"Learnable additive parameter capturing baseline utility of accepting an offer regardless of fairness discrepancy.\",\n      \"range\": {\n        \"min\": -50,\n        \"max\": 50,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "```python\nimport json\nimport math\n\ndef simulate_model(trial_data, fairness_weight=1, bias=0):\n    utility_values = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0)\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n\n        if token_self + token_opp ==0:\n            expected_fair_share = 0\n        else:\n            expected_fair_share = (token_self / (token_self + token_opp)) * combined_earning\n\n        fairness_penalty = max(expected_fair_share - split_self, 0)\n        utility = split_self + bias - fairness_weight * fairness_penalty\n        utility_values.append(utility)\n    return utility_values\n\n# Data as list of dictionaries\ndata_json = '[{\"ID\":1,\"group\":\"A\",\"trial_number\":1,\"trial_type\":1,\"trial_role\":2,\"token_opp\":10,\"token_self\":20,\"combined_earning\":90,\"split_opp\":30,\"split_self\":60,\"splitperc_opp\":33,\"splitperc_self\":67,\"accept\":1.0,\"accepted_amount\":60.0,\"accepted_perc\":67.0,\"proposed_perc\":67.0,\"proposed_amount\":60.0},{\"ID\":2,\"group\":\"A\",\"trial_number\":2,\"trial_type\":1,\"trial_role\":2,\"token_opp\":10,\"token_self\":10,\"combined_earning\":60,\"split_opp\":30,\"split_self\":30,\"splitperc_opp\":50,\"splitperc_self\":50,\"accept\":1.0,\"accepted_amount\":30.0,\"accepted_perc\":50.0,\"proposed_perc\":50.0,\"proposed_amount\":30.0},{\"ID\":3,\"group\":\"A\",\"trial_number\":3,\"trial_type\":1,\"trial_role\":2,\"token_opp\":20,\"token_self\":10,\"combined_earning\":90,\"split_opp\":60,\"split_self\":30,\"splitperc_opp\":67,\"splitperc_self\":33,\"accept\":0.0,\"accepted_amount\":0.0,\"accepted_perc\":0.0,\"proposed_perc\":33.0,\"proposed_amount\":30.0}]'\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n```"
    }
  ],
  "learnable_parameters": {
    "fairness_weight": {
      "description": "Learnable sensitivity parameter that penalizes deviations below the expected fair share. Higher values indicate greater punishment for unfair offers.",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "bias": {
      "description": "Learnable additive parameter capturing baseline utility of accepting an offer regardless of fairness discrepancy.",
      "range": {
        "min": -50,
        "max": 50,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "U = split_self + bias - fairness_weight * max( (token_self / (token_self + token_opp)) * combined_earning - split_self , 0 )",
  "variable_descriptions": {
    "U": {
      "description": "Utility of accepting the offer on a given trial.",
      "range": {
        "min": "-infinity",
        "max": "infinity",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "split_self": {
      "description": "The monetary share proposed for the participant (in \u00a3).",
      "range": {
        "min": 0,
        "max": "infinity",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "The number of tokens found by the participant, representing their contribution.",
      "range": {
        "min": 0,
        "max": "infinity",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "The number of tokens found by the opponent, representing the opponent's contribution.",
      "range": {
        "min": 0,
        "max": "infinity",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "combined_earning": {
      "description": "Total monetary amount earned together by tokens (each token is \u00a33).",
      "range": {
        "min": 0,
        "max": "infinity",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "fairness_weight": {
      "description": "Learnable sensitivity parameter that penalizes deviations below the expected fair share. Higher values indicate greater punishment for unfair offers.",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "bias": {
      "description": "Learnable additive parameter capturing baseline utility of accepting an offer regardless of fairness discrepancy.",
      "range": {
        "min": -50,
        "max": 50,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_summary": "A utility model for responder behavior that computes the accept-action utility as the offered share adjusted by a baseline bias and penalized when the offer is lower than the fair share, determined from the participant\u2019s relative token contribution to the combined earnings. The model contains two learnable parameters: fairness_weight and bias.",
  "full_reasoning": "Step-by-step reasoning:\n\n1. Key psychological mechanisms:  \n\u2003\u2013 Responders care about their monetary gain (split_self) but also have expectations of fairness based on their relative contribution.  \n\u2003\u2013 The fair share expectation derives from their own token count relative to the total tokens (token_self and token_opp) and the overall available money (combined_earning).  \n\u2003\u2013 When offers fall below this expected fair share, a disutility (loss) is incurred driven by fairness sensitivity.\n\n2. How these mechanisms interact:  \n\u2003\u2013 The responder\u2019s utility increases with the monetary offer split_self.  \n\u2003\u2013 If split_self does not reach the expected fair share (computed as token_self/(token_self+token_opp) times combined_earning), the discrepancy is penalized proportionally by a fairness sensitivity parameter.  \n\u2003\u2013 An additional baseline bias parameter captures systematic tendencies to accept or reject offers independently of the fairness gap.\n\n3. Mathematical form to capture these interactions:  \n\u2003\u2013 Define expected_fair_share = (token_self/(token_self+token_opp)) * combined_earning.  \n\u2003\u2013 Use a piecewise function that penalizes only when the offer is lower than the expected fair share.  \n\u2003\u2013 The utility signal U for accepting is then a sum of the monetary offer (split_self), an additive bias, minus the fairness penalty when applicable.\n\n4. Parameters needed to calibrate the model:  \n\u2003\u2013 fairness_weight (\u03b1): a positive sensitivity parameter, penalizing deviations below the fair share.  \n\u2003\u2013 bias (\u03b2): an overall shift parameter adjusting the baseline utility level.\n\n5. Mapping to observable behavior:  \n\u2003\u2013 For each trial, the model computes the expected fair share from token_self, token_opp, and combined_earning.  \n\u2003\u2013 The utility for accepting an offer is computed using the offer value (split_self), the fairness discrepancy (if any), and the two learnable parameters.  \n\u2003\u2013 Negative computed utility indicates a low likelihood for accepting under the later applied softmax function with a temperature parameter.\n\nBelow is the formal specification:\n\n<MODEL>\nU = split_self + bias - fairness_weight * max( (token_self / (token_self + token_opp)) * combined_earning - split_self , 0 )\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the offer on a given trial.\",\n      \"range\": {\n        \"min\": \"-infinity\",\n        \"max\": \"infinity\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"split_self\": {\n      \"description\": \"The monetary share proposed for the participant (in \u00a3).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"infinity\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"The number of tokens found by the participant, representing their contribution.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"infinity\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"The number of tokens found by the opponent, representing the opponent's contribution.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"infinity\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total monetary amount earned together by tokens (each token is \u00a33).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"infinity\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"fairness_weight\": {\n      \"description\": \"Learnable sensitivity parameter that penalizes deviations below the expected fair share. Higher values indicate greater punishment for unfair offers.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"bias\": {\n      \"description\": \"Learnable additive parameter capturing baseline utility of accepting an offer regardless of fairness discrepancy.\",\n      \"range\": {\n        \"min\": -50,\n        \"max\": 50,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    }\n  }\n}\n</VARIABLES>\n\n<SUMMARY>\nA utility model for responder behavior that computes the accept-action utility as the offered share adjusted by a baseline bias and penalized when the offer is lower than the fair share, determined from the participant\u2019s relative token contribution to the combined earnings. The model contains two learnable parameters: fairness_weight and bias.\n</SUMMARY>",
  "current_model": "Specification: U = split_self + bias - fairness_weight * max( (token_self / (token_self + token_opp)) * combined_earning - split_self , 0 )\nSummary: A utility model for responder behavior that computes the accept-action utility as the offered share adjusted by a baseline bias and penalized when the offer is lower than the fair share, determined from the participant\u2019s relative token contribution to the combined earnings. The model contains two learnable parameters: fairness_weight and bias.",
  "simulation_code": "def simulate_model(trial_data, fairness_weight=1, bias=0):\n    utility_values = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0)\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n\n        if token_self + token_opp ==0:\n            expected_fair_share = 0\n        else:\n            expected_fair_share = (token_self / (token_self + token_opp)) * combined_earning\n\n        fairness_penalty = max(expected_fair_share - split_self, 0)\n        utility = split_self + bias - fairness_weight * fairness_penalty\n        utility_values.append(utility)\n    return utility_values",
  "fitting_results": [
    {
      "fairness_weight": 2.0465820313778775,
      "bias": -6.383021857578357,
      "success": true,
      "log_likelihood": -6.173579779415694,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 1.7915434486887676,
      "bias": 0.7503830068727825,
      "success": true,
      "log_likelihood": -16.27097786110185,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 2.9722915523724796,
      "bias": 4.011771621126046,
      "success": true,
      "log_likelihood": -10.705124853403714,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 1.720438729817824,
      "bias": -0.5044116550435597,
      "success": true,
      "log_likelihood": -13.974376526575064,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 4.399332718102505,
      "bias": 5.316078096645641,
      "success": true,
      "log_likelihood": -8.652341680926291,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 2.397800543197296,
      "bias": 4.42414921098025,
      "success": true,
      "log_likelihood": -11.585308268361029,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.0,
      "bias": 26.993905478058643,
      "success": true,
      "log_likelihood": -1.0965768693825616e-05,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 3.0901005077265893,
      "bias": 7.0751026036203415,
      "success": true,
      "log_likelihood": -10.061812594222193,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.0,
      "bias": 50.0,
      "success": true,
      "log_likelihood": 3.4892175813623653e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 3.008989654900764,
      "bias": 1.4868426920645137,
      "success": true,
      "log_likelihood": -11.344160537027644,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 3.913464355490003,
      "bias": 4.354126307235001,
      "success": true,
      "log_likelihood": -7.195897899511961,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 2.0723855679419274,
      "bias": -5.433310237832739,
      "success": true,
      "log_likelihood": -7.266370668354806,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 3.94667372779069,
      "bias": 3.7486007721847776,
      "success": true,
      "log_likelihood": -8.915273772963564,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 2.1978308119147676,
      "bias": 41.932233948564395,
      "success": true,
      "log_likelihood": -1.8259837015389548e-06,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.0,
      "bias": 39.490936196959446,
      "success": true,
      "log_likelihood": -1.760732915733982e-08,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.0,
      "bias": 27.110569828616672,
      "success": true,
      "log_likelihood": -1.0344206464246163e-05,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 2.809923145105324,
      "bias": 48.49565500755347,
      "success": true,
      "log_likelihood": -5.93689920834167e-07,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 1.3559182065558542,
      "bias": 5.096725376475357,
      "success": true,
      "log_likelihood": -7.810408866244807,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 2.924639940097374,
      "bias": 12.514160996054276,
      "success": true,
      "log_likelihood": -5.457728654668892,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.0,
      "bias": 26.521981192911134,
      "success": true,
      "log_likelihood": -1.3885006227567852e-05,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 2.578746710208743,
      "bias": 3.507958139306954,
      "success": true,
      "log_likelihood": -14.111937506591204,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 2.3455447550069395,
      "bias": 9.05232506376035,
      "success": true,
      "log_likelihood": -7.26905271179296,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.8671358726488464,
      "bias": -2.903571185937532,
      "success": true,
      "log_likelihood": -16.566148628947925,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 1.249382991036799,
      "bias": -0.18781220939625984,
      "success": true,
      "log_likelihood": -17.094280890166864,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 3.906839956220093,
      "bias": 5.683116400617942,
      "success": true,
      "log_likelihood": -11.357401387977497,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 1.6274080971740157,
      "bias": 1.4478686212553817,
      "success": true,
      "log_likelihood": -15.285214366351484,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 1.9959293867030485,
      "bias": 2.014269873538253,
      "success": true,
      "log_likelihood": -13.045078510569567,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 8.233924118200903,
      "bias": 4.765411409408219,
      "success": true,
      "log_likelihood": -4.5020115388571815,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 1.9226046479032877,
      "bias": 8.148767980857775,
      "success": true,
      "log_likelihood": -7.721295028191573,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 1.4301118763168028,
      "bias": 3.7100979355297476,
      "success": true,
      "log_likelihood": -14.579062506025348,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.0,
      "bias": 49.99999999999999,
      "success": true,
      "log_likelihood": 3.489217581362365e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 2.0466196217441976,
      "bias": -6.383062969020909,
      "success": true,
      "log_likelihood": -6.173579780162093,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.5323867454583752,
      "bias": -3.0374437967886236,
      "success": true,
      "log_likelihood": -19.628153076343196,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 1.746453404454446,
      "bias": -0.8234857014578892,
      "success": true,
      "log_likelihood": -15.272874131905102,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.47596282972057163,
      "bias": 31.263003278239708,
      "success": true,
      "log_likelihood": -2.9046899534207316e-06,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.7912576538146139,
      "bias": -0.11257527596609694,
      "success": true,
      "log_likelihood": -14.912963603864146,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 2.339120428174766,
      "bias": 5.22995169923827,
      "success": true,
      "log_likelihood": -9.871733052148294,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 2.7423526681141217,
      "bias": 2.9562374447320288,
      "success": true,
      "log_likelihood": -13.470235227475586,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 1.7034665339372497,
      "bias": 2.8205520565816666,
      "success": true,
      "log_likelihood": -16.70173838639267,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.9230336939480855,
      "bias": 4.881207186944855,
      "success": true,
      "log_likelihood": -8.611832350499643,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 2.0846861132394463,
      "bias": 3.0760079857344613,
      "success": true,
      "log_likelihood": -16.533027755526376,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 2.175814939321332,
      "bias": -2.7640140403306255,
      "success": true,
      "log_likelihood": -12.074128774431303,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.3615181345856049,
      "bias": 5.2275916870082275,
      "success": true,
      "log_likelihood": -5.689521186235933,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 1.302212623534891,
      "bias": 0.26846156691948064,
      "success": true,
      "log_likelihood": -16.46445310906247,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 1.7702125063769223,
      "bias": 2.2091575633751117,
      "success": true,
      "log_likelihood": -14.005244949991656,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.5726176851232366,
      "bias": 0.23082607548125492,
      "success": true,
      "log_likelihood": -16.15186322122875,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 1.9105962305694473,
      "bias": 1.4100736215795646,
      "success": true,
      "log_likelihood": -15.298730423245221,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.9246044681888996,
      "bias": -2.4728863221633817,
      "success": true,
      "log_likelihood": -17.974370036243947,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 5.004165970446486,
      "bias": 5.638425172555821,
      "success": true,
      "log_likelihood": -9.068765055753277,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.0,
      "bias": -3.2679437796454387,
      "success": true,
      "log_likelihood": -22.68741015179294,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.9026880637384175,
      "bias": 0.8509983867659981,
      "success": true,
      "log_likelihood": -17.347443598654603,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.903805083516231,
      "bias": -6.051887490180435,
      "success": true,
      "log_likelihood": -11.409727872977156,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.6998292112524861,
      "bias": -1.5235195283904457,
      "success": true,
      "log_likelihood": -18.50321104370209,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.06616245112129719,
      "bias": -2.5845645595042357,
      "success": true,
      "log_likelihood": -20.285118909560747,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 1.454512803186787,
      "bias": -1.3929115307550068,
      "success": true,
      "log_likelihood": -20.22016428733892,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 5.162632597218785,
      "bias": 3.366814753490752,
      "success": true,
      "log_likelihood": -6.189517304894701,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 3.147084229453539,
      "bias": -0.505158958121238,
      "success": true,
      "log_likelihood": -10.347224409879365,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.0,
      "bias": 1.0428613434094949,
      "success": true,
      "log_likelihood": -13.253874573841365,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 1.7241025385650453,
      "bias": -5.742971494624506,
      "success": true,
      "log_likelihood": -7.91664127781821,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.3749747730707779,
      "bias": 0.7273175918985618,
      "success": true,
      "log_likelihood": -14.410592901981035,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.9850411007926995,
      "bias": 0.09532956644119554,
      "success": true,
      "log_likelihood": -19.8047037121953,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 2.639297515012402,
      "bias": 2.7164209335594776,
      "success": true,
      "log_likelihood": -14.023778633417178,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 2.046601887204678,
      "bias": -6.383018131029608,
      "success": true,
      "log_likelihood": -6.1735797793178175,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.5831540697337907,
      "bias": -2.6408900093747407,
      "success": true,
      "log_likelihood": -19.44979791709166,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 2.3152427822430885,
      "bias": -2.5984487918464123,
      "success": true,
      "log_likelihood": -10.08746987791663,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 1.467683158362469,
      "bias": 0.6823588568387988,
      "success": true,
      "log_likelihood": -15.21311869791347,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 1.156573032619434,
      "bias": 5.829679232422681,
      "success": true,
      "log_likelihood": -7.695481950532295,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 1.4352557142942697,
      "bias": 5.401249323211289,
      "success": true,
      "log_likelihood": -10.451133996609702,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.7717330441919343,
      "bias": -1.0588994078770193,
      "success": true,
      "log_likelihood": -16.211738235973076,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.4243868694368426,
      "bias": 3.030605902210008,
      "success": true,
      "log_likelihood": -10.608905773256131,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 10.0,
      "bias": -2.194904297694047,
      "success": true,
      "log_likelihood": -1.6526045746690607,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 1.1399188795319644,
      "bias": -5.71716179401625,
      "success": true,
      "log_likelihood": -10.65272743937463,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 1.6131514194977257,
      "bias": 0.6906691372628372,
      "success": true,
      "log_likelihood": -15.866735313527835,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.43792142784855825,
      "bias": 0.5330488316924008,
      "success": true,
      "log_likelihood": -15.192972651254102,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.46052488138785475,
      "bias": -2.383332509329427,
      "success": true,
      "log_likelihood": -22.77264982498892,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 2.5790955797686412,
      "bias": 5.999976333091103,
      "success": true,
      "log_likelihood": -11.835130096038105,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 1.0317885297483216,
      "bias": 6.361393646487924,
      "success": true,
      "log_likelihood": -6.528380518663331,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.9443852053510249,
      "bias": -8.506782081486277,
      "success": true,
      "log_likelihood": -6.59236016620015,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.0,
      "bias": -2.4932331718842957,
      "success": true,
      "log_likelihood": -21.68673535221887,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 2.0466114810638425,
      "bias": -6.383008704989026,
      "success": true,
      "log_likelihood": -6.173579779345889,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.47935273498685826,
      "bias": -2.0666444896667153,
      "success": true,
      "log_likelihood": -23.288950504671593,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.0,
      "bias": 1.7057879802422593,
      "success": true,
      "log_likelihood": -10.998506324686952,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 1.6268195341041174,
      "bias": -5.837911546088023,
      "success": true,
      "log_likelihood": -8.867253735066912,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 1.4138616438012404,
      "bias": -0.12584340903151264,
      "success": true,
      "log_likelihood": -12.996341724297082,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.24704273810916713,
      "bias": -1.849806429266869,
      "success": true,
      "log_likelihood": -25.769436374435763,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 3.0203122972788257,
      "bias": -4.7677383076481386,
      "success": true,
      "log_likelihood": -7.1576817511018165,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 1.3058139246654994,
      "bias": 2.0370635793591925,
      "success": true,
      "log_likelihood": -17.362656499134015,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 1.9892377590315427,
      "bias": -2.99470850833808,
      "success": true,
      "log_likelihood": -13.517243682574755,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 1.5826757197539751,
      "bias": 8.875040002989524,
      "success": true,
      "log_likelihood": -4.984511684279771,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.8353619707460112,
      "bias": -1.773990829158296,
      "success": true,
      "log_likelihood": -14.556905243650009,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.41353604943726363,
      "bias": -0.5405176520942295,
      "success": true,
      "log_likelihood": -21.174812160300394,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "fairness_weight": {
        "r": 0.7698439762052295,
        "p": 8.012888341477419e-21
      },
      "bias": {
        "r": 0.8112253436632485,
        "p": 1.4313364597760835e-24
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 30.17290403066776,
  "bic_error": "'ModelOutput' object has no attribute 'metrics'",
  "recovery_summary": "Parameter Recovery:\n- fairness_weight: r = 0.770\n- bias: r = 0.811",
  "previous_models": [
    "Specification: U = split_self + bias - fairness_weight * max( (token_self / (token_self + token_opp)) * combined_earning - split_self , 0 )\nSummary: A utility model for responder behavior that computes the accept-action utility as the offered share adjusted by a baseline bias and penalized when the offer is lower than the fair share, determined from the participant\u2019s relative token contribution to the combined earnings. The model contains two learnable parameters: fairness_weight and bias.\nBIC: 30.17290403066776\n\nParameter Recovery:\n- fairness_weight: r = 0.770\n- bias: r = 0.811"
  ]
}