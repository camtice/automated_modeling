{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the given task. The model should obtain the utility, (not the probability of choosing an action).  Your goal is to eventually explore the entire space of possible explainations and mechanisms by which the observed behavior arises.\n\nYour model should use the given variables appropriately, but does not necessary need to use all or even most of the variables. Do not include the model for the utility of rejecting an offer. \n\nThe model should:\n1. Predict only responder behavior.\n2. Build on relevant psychological principles.\n3. Be considerate of high covariance between learnable parameters as the model will have to pass parameter recovery tests.\n4. Be applicable to the dataset given within the task description (i.e. the model should be able to be run using only the provided dataset structure).\n5. Not include parameters to simulate general stochasticity of behavior, because this will be handled later by a temperature parameter.\n6. Should have no more than two learnable parameters.\n7. This specific model should calculate the utility of an action, which will then be used to determine the probability of choosing that action. Negative values should represent a negative utility, and thus an unlikely action.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Use clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'. DO NOT USE 'lambda' AS A PARAMETER NAME.\n\nYou will be given the complete list of models that you have already created. Analyze the models, and notice the absence of possible explanations of behaviors that should be tested. You should start with simple obvious explanations, and as you notice these being thoroughly explored you should shift to fundamentally different models of behavior. Pay less attention to the names of the variables, and how they are actually interacting with the given behavioral data. If there are no previous models, start with one learnable parameter, then ensure the space of possible models is thoroughly explored with one parameter before moving to two parameters, etc.\n\nYour results will be scored on a combination of BIC with a penalization for number of learned parameters, the ability to recover those learned parameters, and the ability of those parameters to account for the differences in behaviors among varying groups of people.\n\nPrevious Models:\nModel 1:\nSpecification: U_accept = alpha * split_self + beta * (splitperc_self - (token_self / (token_self + token_opp)) * 100)\nSummary: Utility of accepting an offer combines linear monetary value and proportional fairness. The fairness term quantifies how much the proposed percentage deviates from the contribution-based equitable percentage (tokens_self / total_tokens). Two parameters control sensitivity to absolute monetary gains (alpha) and fairness violations (beta).\nBIC: 35.35895699690902\nParameter Recovery:\n- alpha: r = 0.625\n- beta: r = 0.856\nModel 2:\nSpecification: U_accept = alpha * split_self + beta * (split_self - 3 * token_self)\nSummary: A linear utility model combining absolute monetary gain and contribution-based fairness. The utility of accepting an offer depends on the proposed amount (split_self) and its deviation from the participant's equitable contribution (3 * token_self). Two parameters control sensitivity to money (alpha) and fairness violations (beta), where beta < 0 indicates aversion to offers below one's contribution. The model directly anchors fairness expectations to pretask performance.\nBIC: 30.777436411868965\nParameter Recovery:\n- alpha: r = 0.836\n- beta: r = 0.903",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the given task. The model should obtain the utility, (not the probability of choosing an action).  Your goal is to eventually explore the entire space of possible explainations and mechanisms by which the observed behavior arises.\n\nYour model should use the given variables appropriately, but does not necessary need to use all or even most of the variables. Do not include the model for the utility of rejecting an offer. \n\nThe model should:\n1. Predict only responder behavior.\n2. Build on relevant psychological principles.\n3. Be considerate of high covariance between learnable parameters as the model will have to pass parameter recovery tests.\n4. Be applicable to the dataset given within the task description (i.e. the model should be able to be run using only the provided dataset structure).\n5. Not include parameters to simulate general stochasticity of behavior, because this will be handled later by a temperature parameter.\n6. Should have no more than two learnable parameters.\n7. This specific model should calculate the utility of an action, which will then be used to determine the probability of choosing that action. Negative values should represent a negative utility, and thus an unlikely action.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Use clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'. DO NOT USE 'lambda' AS A PARAMETER NAME.\n\nYou will be given the complete list of models that you have already created. Analyze the models, and notice the absence of possible explanations of behaviors that should be tested. You should start with simple obvious explanations, and as you notice these being thoroughly explored you should shift to fundamentally different models of behavior. Pay less attention to the names of the variables, and how they are actually interacting with the given behavioral data. If there are no previous models, start with one learnable parameter, then ensure the space of possible models is thoroughly explored with one parameter before moving to two parameters, etc.\n\nYour results will be scored on a combination of BIC with a penalization for number of learned parameters, the ability to recover those learned parameters, and the ability of those parameters to account for the differences in behaviors among varying groups of people.\n\nPrevious Models:\nModel 1:\nSpecification: U_accept = alpha * split_self + beta * (splitperc_self - (token_self / (token_self + token_opp)) * 100)\nSummary: Utility of accepting an offer combines linear monetary value and proportional fairness. The fairness term quantifies how much the proposed percentage deviates from the contribution-based equitable percentage (tokens_self / total_tokens). Two parameters control sensitivity to absolute monetary gains (alpha) and fairness violations (beta).\nBIC: 35.35895699690902\nParameter Recovery:\n- alpha: r = 0.625\n- beta: r = 0.856\nModel 2:\nSpecification: U_accept = alpha * split_self + beta * (split_self - 3 * token_self)\nSummary: A linear utility model combining absolute monetary gain and contribution-based fairness. The utility of accepting an offer depends on the proposed amount (split_self) and its deviation from the participant's equitable contribution (3 * token_self). Two parameters control sensitivity to money (alpha) and fairness violations (beta), where beta < 0 indicates aversion to offers below one's contribution. The model directly anchors fairness expectations to pretask performance.\nBIC: 30.777436411868965\nParameter Recovery:\n- alpha: r = 0.836\n- beta: r = 0.903\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<think>\nOkay, let's tackle this problem. The goal is to design a computational model that predicts the utility of accepting an offer for the responder in the given experiment. The model needs to be based on psychological principles, use the dataset variables appropriately, and have no more than two learnable parameters. Also, parameter recovery is important, so high covariance between parameters should be avoided.\n\nFirst, looking at the previous models. Model 1 uses split_self and a fairness term based on the percentage deviation from the token contribution. Model 2 uses split_self and the difference between the split and 3*token_self (since each token is \u00a33). Both models combine monetary gain with some fairness component. The second model has better BIC and parameter recovery, suggesting that anchoring to the actual contribution (3*token_self) might be more effective.\n\nNow, thinking about psychological principles. Fairness is a key factor here. People might compare the proposed split to what they think is fair based on their contribution. Inequity aversion is another concept\u2014people dislike unequal outcomes. Alternatively, they might have reference points, like expecting a certain percentage based on their contribution.\n\nThe dataset includes variables like token_self, token_opp, split_self, splitperc_self, etc. The combined_earning is (token_self + token_opp)*3. So, the fair split based on contribution would be (token_self/(token_self + token_opp)) * combined_earning. But in Model 1, they used splitperc_self minus that percentage. However, Model 2 used split_self minus 3*token_self, which is the actual contribution in pounds. That might be a more direct measure of fairness\u2014if the split_self is less than their contribution, they might feel it's unfair.\n\nBut maybe there's another angle. The participant's contribution (token_self) is found in the pretask. So, they might feel entitled to at least their contribution back. So, if split_self is less than 3*token_self, that's a loss compared to their contribution, leading to negative utility. Alternatively, if split_self is more than that, it's a gain. This is similar to a reference point model where the reference is their own contribution.\n\nAnother idea is to consider the ratio of the split to their contribution. For example, split_self/(3*token_self) could represent how much they're getting relative to their contribution. If this ratio is below 1, it's unfair. But using a ratio might introduce nonlinearities. However, the model needs to be linear in parameters to keep it simple and avoid covariance issues.\n\nWait, the problem states that the model should not include parameters for stochasticity, as that's handled by a temperature parameter later. So the utility function should be deterministic except for the parameters.\n\nLooking at the previous models, Model 2 uses split_self and (split_self - 3*token_self). But maybe the fairness term should be relative to the combined_earning. For example, the fair split would be (token_self / (token_self + token_opp)) * combined_earning. Then, the difference between split_self and that fair value could be a term. Let's call that fair_split = (token_self / (token_self + token_opp)) * combined_earning. Then, the fairness term is split_self - fair_split. If split_self is less than fair_split, that's a negative term, which would reduce utility. But combined_earning is (token_self + token_opp)*3, so fair_split is 3*token_self. Wait, because combined_earning is (token_self + token_opp)*3, and fair_split would be (token_self/(token_self + token_opp)) * (token_self + token_opp)*3 = 3*token_self. So the fair_split is exactly 3*token_self. Therefore, split_self - fair_split is split_self - 3*token_self, which is exactly the term in Model 2. So Model 2's fairness term is equivalent to the difference from the fair split based on contribution. That makes sense.\n\nBut maybe participants don't just care about their own contribution but also compare to the opponent's split. For example, if the opponent is getting more than their contribution, that might be seen as unfair. But the responder's decision is about their own split. Alternatively, the model could include a term that compares the split to the opponent's contribution. But given the constraints of two parameters, perhaps combining the monetary gain and the fairness term relative to their own contribution is sufficient.\n\nAlternatively, the model could use the split percentage. For example, splitperc_self compared to their contribution percentage. The contribution percentage is (token_self/(token_self + token_opp))*100. So splitperc_self - contribution_percentage would be a term. That's what Model 1 does. But Model 2's approach might be more direct because it's in absolute terms (pounds) rather than percentages. Since the combined_earning varies, the same percentage could mean different absolute amounts. So maybe absolute terms are better.\n\nBut the problem states that two equal split_self variables don't represent the same fairness because combined_earning varies. Wait, no. split_self is the proposed amount in pounds. If combined_earning is different, then split_self could be the same but splitperc_self would be different. For example, if combined_earning is \u00a330 and split_self is \u00a315, that's 50%. If combined_earning is \u00a360 and split_self is \u00a315, that's 25%. So split_self alone doesn't capture fairness; it's the split relative to the total. But in Model 2, the fairness term is split_self - 3*token_self. That term is in absolute terms. For example, if the participant contributed 5 tokens (so \u00a315), then split_self - 15. If split_self is \u00a310, that's -5. If split_self is \u00a320, that's +5. So this term captures how much the split deviates from their own contribution. But the total combined earning is (token_self + token_opp)*3. So the opponent's contribution is 3*token_opp. The fair split based on contributions would be 3*token_self for self and 3*token_opp for opponent, but the combined earning is 3*(token_self + token_opp). So if the split is exactly 3*token_self for self, that's fair. But in reality, the proposer is offering some split. So the term split_self - 3*token_self represents how much more or less than their contribution they're getting. That seems like a reasonable fairness term.\n\nBut maybe participants also care about the opponent's share. For example, if the opponent is getting more than their contribution, even if the participant is getting their own contribution, they might feel it's unfair. But since the model is for the responder's utility, perhaps they only care about their own split relative to their own contribution. Alternatively, they might compare their split to the opponent's split. But given the two-parameter limit, perhaps the model should focus on the two most critical factors.\n\nAnother angle is the ratio of split_self to their contribution. For example, split_self/(3*token_self). If this is less than 1, it's a loss. But using a ratio could lead to different scaling. However, using a linear term (split_self - 3*token_self) is straightforward and linear in parameters.\n\nSo the utility function could be U_accept = \u03b1 * split_self + \u03b2 * (split_self - 3*token_self). Wait, but that's combining split_self twice. Because split_self is part of both terms. That would lead to multicollinearity between the parameters \u03b1 and \u03b2. For example, U = (\u03b1 + \u03b2) * split_self - \u03b2 * 3*token_self. So this is equivalent to a model where the coefficient for split_self is (\u03b1 + \u03b2) and the coefficient for token_self is -3\u03b2. But since the model is supposed to have two parameters, perhaps this is acceptable. However, in Model 2, the specification is U_accept = alpha * split_self + beta * (split_self - 3*token_self). So that's the same as (alpha + beta) * split_self - 3 beta token_self. But maybe this is redundant. Alternatively, maybe the model should separate the two terms: one for the monetary gain and one for the fairness term. But in that case, the two terms are split_self and (split_self - 3*token_self). However, this could lead to high covariance between alpha and beta because split_self is in both terms. That's a problem for parameter recovery. So perhaps a better approach is to have one term for the monetary value and another term for the fairness component that's orthogonal.\n\nWait, in Model 2, the parameters are alpha and beta. The utility is alpha * split_self + beta * (split_self - 3*token_self). Let's see: this can be rewritten as (alpha + beta) * split_self - 3 beta token_self. So if split_self and token_self are correlated, then the parameters alpha and beta might be hard to recover. For example, if split_self is positively correlated with token_self (since higher token_self leads to higher combined_earning, perhaps leading to higher split_self?), then the two terms could be collinear. This might explain why in Model 2, the parameter recovery for alpha is 0.836 and beta is 0.903. But maybe there's a better way to structure the model to avoid this.\n\nAlternatively, perhaps the fairness term should be split_self - fair_split, where fair_split is 3*token_self. Then, the model is U = alpha * split_self + beta * (split_self - 3*token_self). But this is the same as Model 2. So maybe that's already covered.\n\nAnother approach: the utility could be based on the difference between the proposed split and the equitable split (3*token_self), but scaled by some parameter. For example, U = alpha * split_self + beta * max(0, 3*token_self - split_self). This would capture loss aversion, where only offers below the equitable split are penalized. But this introduces a non-linearity (max function), which might complicate things but could better capture behavior. However, the problem states that the model should not include parameters for stochasticity, but non-linear terms are allowed as long as they are part of the utility function.\n\nBut the problem also mentions that the model should have no more than two learnable parameters. So if we use a linear model with two parameters, that's acceptable. The max function would make the model piecewise linear. However, parameter recovery might be more challenging. But perhaps this captures a different psychological mechanism: participants are only sensitive to offers below their contribution. This is similar to models of inequity aversion where disadvantageous inequality is penalized more than advantageous.\n\nAlternatively, the model could use a term that is the difference between split_self and the equitable split, but only when split_self is less than the equitable split. So U = alpha * split_self + beta * (split_self < 3*token_self) * (3*token_self - split_self). This way, beta only applies when the offer is below the equitable split. This could model loss aversion or disadvantageous inequity aversion. However, this introduces a discontinuity, which might make parameter estimation harder. But it's a possible direction.\n\nBut given that previous models used linear terms, perhaps a non-linear term could be a better approach. However, the problem states that the model should be applicable to the dataset and not require variables beyond those provided. The variables needed for this model are split_self and token_self, which are available.\n\nAnother consideration is the absolute vs. relative terms. For example, if the participant contributed 5 tokens (\u00a315), an offer of \u00a310 is a \u00a35 loss, but if they contributed 10 tokens (\u00a330), an offer of \u00a325 is a \u00a35 loss. The absolute loss is the same, but the relative loss is different. Maybe participants are more sensitive to relative losses. So the term could be (split_self - 3*token_self)/ (3*token_self), which is the relative deviation. But this introduces division by token_self, which could be zero, but in the dataset, token_self is the number of tokens found by the participant, which should be at least 1. So that's safe. Then the model would be U = alpha * split_self + beta * (split_self - 3*token_self)/(3*token_self). This term represents the proportional deviation from the equitable split. However, this introduces a non-linear term (due to division by token_self), but the parameters are still linear. However, this might better capture the idea that a \u00a35 loss is more significant when the contribution is smaller.\n\nBut this model would have two parameters, alpha and beta. The question is whether this would perform better in terms of BIC and parameter recovery compared to Model 2. The previous Model 2 has a BIC of 30.77, which is better than Model 1's 35.35. So perhaps a model that uses a relative fairness term could improve upon that.\n\nAlternatively, maybe combining both absolute and relative terms. But that would require more parameters. However, the constraint is two parameters. So perhaps the best approach is to think of a different psychological mechanism not yet captured by the previous models.\n\nAnother angle: participants might evaluate the offer based on both their own contribution and the opponent's contribution. For example, if the opponent contributed less but is getting a higher split, that's unfair. But how to capture that with the available variables. The split_opp is the opponent's proposed share. But in the responder role, the participant is responding to the proposer's offer. So when the participant is the responder, the proposer is the opponent. So in trial_role=1 (responder), the split_self is what the proposer (opponent) is offering to the participant. So the participant's utility could depend on the difference between their own split and the opponent's split, relative to their contributions. For example, the fair split would be based on contributions, so split_self / split_opp should be equal to token_self / token_opp. But this introduces a ratio, which might be complex. Alternatively, the difference between the split_self and split_opp compared to the difference in contributions. But this might require more parameters.\n\nBut given the two-parameter limit, perhaps the model should focus on the participant's own split relative to their contribution and the overall fairness of the split percentage. Wait, but splitperc_self is available. However, the problem states that two equal split_self variables don't represent the same fairness because combined_earning varies. So splitperc_self is the percentage of the combined_earning offered to the participant. The fair percentage would be (token_self / (token_self + token_opp)) * 100. So the difference between splitperc_self and the fair percentage could be a term. That's what Model 1 does. But Model 2's approach in absolute terms (split_self - 3*token_self) might be better because it's in pounds and directly compares to their contribution.\n\nBut perhaps combining both monetary value and proportional fairness. For example, U = alpha * split_self + beta * (splitperc_self - fair_percentage). But this would use splitperc_self and the fair percentage. However, splitperc_self is (split_self / combined_earning) * 100. The fair percentage is (token_self / (token_self + token_opp)) * 100. So the term is (split_self / combined_earning * 100) - (token_self / (token_self + token_opp) * 100). But combined_earning is 3*(token_self + token_opp), so split_self = (splitperc_self / 100) * 3*(token_self + token_opp). Therefore, the term becomes splitperc_self - (token_self / (token_self + token_opp) * 100). This is the same as Model 1's fairness term. But Model 1's BIC is worse than Model 2's. So maybe the absolute term (split_self - 3*token_self) is a better predictor.\n\nAlternatively, participants might care about both the absolute amount they receive and whether it's proportional to their contribution. For example, getting \u00a320 when they contributed \u00a315 (so \u00a35 more) might be good, but if the total is \u00a3100, their fair share would be 15/ (15 + opponent's tokens)*100. Wait, but opponent's tokens are token_opp. So the fair share is 3*token_self, and the split_self is what's offered. So the difference is split_self - 3*token_self. That's the term in Model 2.\n\nBut maybe participants also consider the total amount. For example, getting \u00a35 more in a \u00a330 total is different from \u00a35 more in a \u00a3100 total. But in Model 2, the term is absolute. So perhaps a better model would be to have the fairness term as (split_self - 3*token_self) / combined_earning. This would make it a relative term. For example, if combined_earning is large, the same absolute difference is less significant. But this introduces division by combined_earning, which varies. However, combined_earning is 3*(token_self + token_opp), which is known. So the term would be (split_self - 3*token_self) / (3*(token_self + token_opp)). This represents the deviation from the fair split as a proportion of the total. This could capture the idea that participants are more sensitive to unfairness when the total is smaller. But this adds complexity.\n\nAlternatively, the utility could be U = alpha * split_self + beta * (split_self - fair_split) / fair_split. Where fair_split is 3*token_self. So this term is (split_self - 3*token_self)/(3*token_self), which is the relative deviation from the fair split. This would make the fairness term a percentage change. For example, if split_self is 10 and fair_split is 15, the term is -5/15 = -0.333. If split_self is 20 and fair_split is 30, the term is -10/30 = -0.333. So the same relative deviation is treated the same. This might better capture proportional thinking. But this requires token_self to be non-zero, which it is.\n\nBut this model would have two parameters: alpha (sensitivity to monetary gain) and beta (sensitivity to proportional fairness). The utility function would be:\n\nU_accept = alpha * split_self + beta * ((split_self - 3*token_self) / (3*token_self))\n\nThis way, beta captures how much participants care about deviations from their fair share proportionally. For example, a negative beta would mean that offers below the fair split reduce utility. This model is different from the previous ones and might capture a different psychological mechanism\u2014proportional fairness rather than absolute fairness.\n\nBut would this model have better parameter recovery? It depends on the data. If participants are indeed sensitive to proportional deviations, this model might fit better. However, the parameters alpha and beta would be in different units (alpha is per \u00a3, beta is per unit proportional change). This might reduce covariance between them compared to Model 2, where both terms are in \u00a3.\n\nAnother consideration is the scaling of variables. If split_self is in pounds and the proportional term is unitless, the parameters alpha and beta would be on different scales, which could help in parameter recovery as they're less likely to covary. This might make the model's parameters more recoverable.\n\nAlternatively, the model could use both the absolute monetary term and the proportional fairness term. That's what this model does. So the utility is a combination of the direct monetary gain and the proportional fairness.\n\nComparing to previous models:\n\nModel 1: split_self and splitperc_self minus fair percentage.\n\nModel 2: split_self and split_self - 3*token_self.\n\nProposed model: split_self and (split_self - 3*token_self)/(3*token_self).\n\nThis model introduces a non-linear term (due to division by token_self), but the parameters are still linear. The question is whether this captures a different psychological principle not covered by the previous models.\n\nThe summary would need to explain that the utility combines absolute monetary gain with proportional deviation from the contribution-based fair share. The parameters alpha and beta control sensitivity to money and proportional fairness, respectively.\n\nNow, checking the dataset variables. The variables needed are split_self and token_self. Both are present in the dataset. The term 3*token_self is calculated from token_self. So this model is feasible.\n\nRegarding parameter bounds, alpha could be any real number, but likely positive since higher split_self should increase utility. Beta could be negative, as offers below the fair split (negative proportional term) would reduce utility if beta is negative. Wait, if the proportional term is (split_self - fair)/fair, then when split_self < fair, the term is negative. If beta is negative, then a negative term (split_self < fair) would lead to a positive contribution to utility, which doesn't make sense. Wait, no: the utility is alpha*split_self + beta*((split_self - fair)/fair). If split_self is less than fair, then (split_self - fair)/fair is negative. If beta is negative, then beta multiplied by a negative term becomes positive, increasing utility. That's not desired. We want offers below fair to decrease utility. So beta should be positive. Because if split_self < fair, then (split_self - fair)/fair is negative. If beta is positive, then the term beta * (negative) would decrease utility. So beta should be positive to penalize offers below fair.\n\nSo the parameters would be:\n\nalpha: sensitivity to monetary gain (expected to be positive).\n\nbeta: sensitivity to proportional fairness (expected to be positive, as higher beta means more penalty for below-fair offers).\n\nThe ranges for alpha could be from, say, -inf to inf, but realistically, alpha should be positive. However, to allow the model to learn, we can set a generous range, like -10 to 10. Similarly for beta, but since beta is expected to be positive, but we can't constrain it in the model, the bounds should be from -inf to inf, but perhaps in practice, we can set a reasonable range like -10 to 10.\n\nBut the problem states that the bounds should be generous but finite. So for alpha and beta, perhaps set min to -10 and max to 10, inclusive. This allows the parameters to be learned without restricting too much, but prevents them from being infinity.\n\nSo the variable descriptions would be:\n\nalpha: learnable, range [-10, 10], description: sensitivity to absolute monetary gain from the proposed split.\n\nbeta: learnable, range [-10, 10], description: sensitivity to proportional deviation of the proposed split from the participant's equitable contribution.\n\nThe utility U_accept is calculated as alpha * split_self + beta * ((split_self - 3*token_self) / (3*token_self)).\n\nThis model uses two learnable parameters, alpha and beta, and the variables split_self and token_self from the dataset. The term (split_self - 3*token_self)/(3*token_self) represents the proportional deviation from the fair split based on the participant's contribution.\n\nThis model introduces a new fairness component compared to the previous models by considering the proportional deviation rather than the absolute difference. This could capture scenarios where participants are more sensitive to relative unfairness. For example, losing 10% of their fair share might be more impactful than losing a fixed amount. This model would allow testing whether proportional fairness is a better explanation than absolute fairness.\n\nNow, checking for covariance between parameters. Since alpha is multiplied by split_self (in \u00a3) and beta is multiplied by a unitless term, the two parameters are on different scales, which might reduce covariance. This could improve parameter recovery compared to Model 2, where both terms are in \u00a3.\n\nIn summary, the proposed model combines absolute monetary gain with proportional fairness, using two parameters to capture sensitivity to each. This approach is different from the previous models and explores a new psychological mechanism of proportional fairness evaluation.\n</think>\n\n<MODEL>\nU_accept = alpha * split_self + beta * ((split_self - 3 * token_self) / (3 * token_self))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_accept\": {\n      \"description\": \"Utility of accepting the proposed split\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"alpha\": {\n      \"description\": \"Sensitivity to absolute monetary gain from the proposed split\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta\": {\n      \"description\": \"Sensitivity to proportional deviation from contribution-based fairness\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed monetary amount for the participant (in \u00a3)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant in the pretask\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<SUMMARY>\nA utility model combining absolute monetary gain and proportional fairness evaluation. The utility of accepting an offer depends linearly on the proposed amount (split_self) and the proportional deviation of this amount from the participant's equitable contribution (3 * token_self). The proportional term captures sensitivity to relative fairness violations, where offers below one's contribution are penalized according to their percentage shortfall. Two parameters control sensitivity to money (alpha) and proportional fairness (beta).\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return the utility values for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['alpha', 'beta']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of utility values for each trial\n\n                Your code will be implemented within the following code block:\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    utility_values = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        utility_values.append(beta + (epsilon * E) + (eta * N))\n    return utility_values\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE UTLITY VALUES.\n                Model Specification:\n                U_accept = alpha * split_self + beta * ((split_self - 3 * token_self) / (3 * token_self))\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"U_accept\": {\n      \"description\": \"Utility of accepting the proposed split\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"alpha\": {\n      \"description\": \"Sensitivity to absolute monetary gain from the proposed split\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta\": {\n      \"description\": \"Sensitivity to proportional deviation from contribution-based fairness\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed monetary amount for the participant (in \\u00a3)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant in the pretask\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "```python\nimport json\nimport math\n\ndef simulate_model(trial_data, alpha=1, beta=1):\n    utility_values = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0)\n        token_self = trial.get(\"token_self\", 1) #Handle potential zero division error.\n\n        if token_self ==0:\n            utility = alpha * split_self #Avoid division by zero\n        else:\n            utility = alpha * split_self + beta * ((split_self - 3 * token_self) / (3 * token_self))\n        utility_values.append(utility)\n    return utility_values\n\ndata_json = \"\"\"\n[\n  {\"split_self\": 10, \"token_self\": 2},\n  {\"split_self\": 20, \"token_self\": 5},\n  {\"split_self\": 15, \"token_self\": 0},\n  {\"split_self\": 5, \"token_self\": 3}\n]\n\"\"\"\ndata = json.loads(data_json)\n\nresults = simulate_model(data, alpha=0.5, beta=2)\nprint(json.dumps({\"results\": results}))\n```"
    }
  ],
  "learnable_parameters": {
    "alpha": {
      "description": "Sensitivity to absolute monetary gain from the proposed split",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform"
      },
      "learnable": true,
      "source": "learnable"
    },
    "beta": {
      "description": "Sensitivity to proportional deviation from contribution-based fairness",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform"
      },
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "U_accept = alpha * split_self + beta * ((split_self - 3 * token_self) / (3 * token_self))",
  "variable_descriptions": {
    "U_accept": {
      "description": "Utility of accepting the proposed split",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "alpha": {
      "description": "Sensitivity to absolute monetary gain from the proposed split",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform"
      },
      "learnable": true,
      "source": "learnable"
    },
    "beta": {
      "description": "Sensitivity to proportional deviation from contribution-based fairness",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform"
      },
      "learnable": true,
      "source": "learnable"
    },
    "split_self": {
      "description": "Proposed monetary amount for the participant (in \u00a3)",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Number of tokens found by the participant in the pretask",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    }
  },
  "model_summary": "A utility model combining absolute monetary gain and proportional fairness evaluation. The utility of accepting an offer depends linearly on the proposed amount (split_self) and the proportional deviation of this amount from the participant's equitable contribution (3 * token_self). The proportional term captures sensitivity to relative fairness violations, where offers below one's contribution are penalized according to their percentage shortfall. Two parameters control sensitivity to money (alpha) and proportional fairness (beta).",
  "full_reasoning": "<think>\nOkay, let's tackle this problem. The goal is to design a computational model that predicts the utility of accepting an offer for the responder in the given experiment. The model needs to be based on psychological principles, use the dataset variables appropriately, and have no more than two learnable parameters. Also, parameter recovery is important, so high covariance between parameters should be avoided.\n\nFirst, looking at the previous models. Model 1 uses split_self and a fairness term based on the percentage deviation from the token contribution. Model 2 uses split_self and the difference between the split and 3*token_self (since each token is \u00a33). Both models combine monetary gain with some fairness component. The second model has better BIC and parameter recovery, suggesting that anchoring to the actual contribution (3*token_self) might be more effective.\n\nNow, thinking about psychological principles. Fairness is a key factor here. People might compare the proposed split to what they think is fair based on their contribution. Inequity aversion is another concept\u2014people dislike unequal outcomes. Alternatively, they might have reference points, like expecting a certain percentage based on their contribution.\n\nThe dataset includes variables like token_self, token_opp, split_self, splitperc_self, etc. The combined_earning is (token_self + token_opp)*3. So, the fair split based on contribution would be (token_self/(token_self + token_opp)) * combined_earning. But in Model 1, they used splitperc_self minus that percentage. However, Model 2 used split_self minus 3*token_self, which is the actual contribution in pounds. That might be a more direct measure of fairness\u2014if the split_self is less than their contribution, they might feel it's unfair.\n\nBut maybe there's another angle. The participant's contribution (token_self) is found in the pretask. So, they might feel entitled to at least their contribution back. So, if split_self is less than 3*token_self, that's a loss compared to their contribution, leading to negative utility. Alternatively, if split_self is more than that, it's a gain. This is similar to a reference point model where the reference is their own contribution.\n\nAnother idea is to consider the ratio of the split to their contribution. For example, split_self/(3*token_self) could represent how much they're getting relative to their contribution. If this ratio is below 1, it's unfair. But using a ratio might introduce nonlinearities. However, the model needs to be linear in parameters to keep it simple and avoid covariance issues.\n\nWait, the problem states that the model should not include parameters for stochasticity, as that's handled by a temperature parameter later. So the utility function should be deterministic except for the parameters.\n\nLooking at the previous models, Model 2 uses split_self and (split_self - 3*token_self). But maybe the fairness term should be relative to the combined_earning. For example, the fair split would be (token_self / (token_self + token_opp)) * combined_earning. Then, the difference between split_self and that fair value could be a term. Let's call that fair_split = (token_self / (token_self + token_opp)) * combined_earning. Then, the fairness term is split_self - fair_split. If split_self is less than fair_split, that's a negative term, which would reduce utility. But combined_earning is (token_self + token_opp)*3, so fair_split is 3*token_self. Wait, because combined_earning is (token_self + token_opp)*3, and fair_split would be (token_self/(token_self + token_opp)) * (token_self + token_opp)*3 = 3*token_self. So the fair_split is exactly 3*token_self. Therefore, split_self - fair_split is split_self - 3*token_self, which is exactly the term in Model 2. So Model 2's fairness term is equivalent to the difference from the fair split based on contribution. That makes sense.\n\nBut maybe participants don't just care about their own contribution but also compare to the opponent's split. For example, if the opponent is getting more than their contribution, that might be seen as unfair. But the responder's decision is about their own split. Alternatively, the model could include a term that compares the split to the opponent's contribution. But given the constraints of two parameters, perhaps combining the monetary gain and the fairness term relative to their own contribution is sufficient.\n\nAlternatively, the model could use the split percentage. For example, splitperc_self compared to their contribution percentage. The contribution percentage is (token_self/(token_self + token_opp))*100. So splitperc_self - contribution_percentage would be a term. That's what Model 1 does. But Model 2's approach might be more direct because it's in absolute terms (pounds) rather than percentages. Since the combined_earning varies, the same percentage could mean different absolute amounts. So maybe absolute terms are better.\n\nBut the problem states that two equal split_self variables don't represent the same fairness because combined_earning varies. Wait, no. split_self is the proposed amount in pounds. If combined_earning is different, then split_self could be the same but splitperc_self would be different. For example, if combined_earning is \u00a330 and split_self is \u00a315, that's 50%. If combined_earning is \u00a360 and split_self is \u00a315, that's 25%. So split_self alone doesn't capture fairness; it's the split relative to the total. But in Model 2, the fairness term is split_self - 3*token_self. That term is in absolute terms. For example, if the participant contributed 5 tokens (so \u00a315), then split_self - 15. If split_self is \u00a310, that's -5. If split_self is \u00a320, that's +5. So this term captures how much the split deviates from their own contribution. But the total combined earning is (token_self + token_opp)*3. So the opponent's contribution is 3*token_opp. The fair split based on contributions would be 3*token_self for self and 3*token_opp for opponent, but the combined earning is 3*(token_self + token_opp). So if the split is exactly 3*token_self for self, that's fair. But in reality, the proposer is offering some split. So the term split_self - 3*token_self represents how much more or less than their contribution they're getting. That seems like a reasonable fairness term.\n\nBut maybe participants also care about the opponent's share. For example, if the opponent is getting more than their contribution, even if the participant is getting their own contribution, they might feel it's unfair. But since the model is for the responder's utility, perhaps they only care about their own split relative to their own contribution. Alternatively, they might compare their split to the opponent's split. But given the two-parameter limit, perhaps the model should focus on the two most critical factors.\n\nAnother angle is the ratio of split_self to their contribution. For example, split_self/(3*token_self). If this is less than 1, it's a loss. But using a ratio could lead to different scaling. However, using a linear term (split_self - 3*token_self) is straightforward and linear in parameters.\n\nSo the utility function could be U_accept = \u03b1 * split_self + \u03b2 * (split_self - 3*token_self). Wait, but that's combining split_self twice. Because split_self is part of both terms. That would lead to multicollinearity between the parameters \u03b1 and \u03b2. For example, U = (\u03b1 + \u03b2) * split_self - \u03b2 * 3*token_self. So this is equivalent to a model where the coefficient for split_self is (\u03b1 + \u03b2) and the coefficient for token_self is -3\u03b2. But since the model is supposed to have two parameters, perhaps this is acceptable. However, in Model 2, the specification is U_accept = alpha * split_self + beta * (split_self - 3*token_self). So that's the same as (alpha + beta) * split_self - 3 beta token_self. But maybe this is redundant. Alternatively, maybe the model should separate the two terms: one for the monetary gain and one for the fairness term. But in that case, the two terms are split_self and (split_self - 3*token_self). However, this could lead to high covariance between alpha and beta because split_self is in both terms. That's a problem for parameter recovery. So perhaps a better approach is to have one term for the monetary value and another term for the fairness component that's orthogonal.\n\nWait, in Model 2, the parameters are alpha and beta. The utility is alpha * split_self + beta * (split_self - 3*token_self). Let's see: this can be rewritten as (alpha + beta) * split_self - 3 beta token_self. So if split_self and token_self are correlated, then the parameters alpha and beta might be hard to recover. For example, if split_self is positively correlated with token_self (since higher token_self leads to higher combined_earning, perhaps leading to higher split_self?), then the two terms could be collinear. This might explain why in Model 2, the parameter recovery for alpha is 0.836 and beta is 0.903. But maybe there's a better way to structure the model to avoid this.\n\nAlternatively, perhaps the fairness term should be split_self - fair_split, where fair_split is 3*token_self. Then, the model is U = alpha * split_self + beta * (split_self - 3*token_self). But this is the same as Model 2. So maybe that's already covered.\n\nAnother approach: the utility could be based on the difference between the proposed split and the equitable split (3*token_self), but scaled by some parameter. For example, U = alpha * split_self + beta * max(0, 3*token_self - split_self). This would capture loss aversion, where only offers below the equitable split are penalized. But this introduces a non-linearity (max function), which might complicate things but could better capture behavior. However, the problem states that the model should not include parameters for stochasticity, but non-linear terms are allowed as long as they are part of the utility function.\n\nBut the problem also mentions that the model should have no more than two learnable parameters. So if we use a linear model with two parameters, that's acceptable. The max function would make the model piecewise linear. However, parameter recovery might be more challenging. But perhaps this captures a different psychological mechanism: participants are only sensitive to offers below their contribution. This is similar to models of inequity aversion where disadvantageous inequality is penalized more than advantageous.\n\nAlternatively, the model could use a term that is the difference between split_self and the equitable split, but only when split_self is less than the equitable split. So U = alpha * split_self + beta * (split_self < 3*token_self) * (3*token_self - split_self). This way, beta only applies when the offer is below the equitable split. This could model loss aversion or disadvantageous inequity aversion. However, this introduces a discontinuity, which might make parameter estimation harder. But it's a possible direction.\n\nBut given that previous models used linear terms, perhaps a non-linear term could be a better approach. However, the problem states that the model should be applicable to the dataset and not require variables beyond those provided. The variables needed for this model are split_self and token_self, which are available.\n\nAnother consideration is the absolute vs. relative terms. For example, if the participant contributed 5 tokens (\u00a315), an offer of \u00a310 is a \u00a35 loss, but if they contributed 10 tokens (\u00a330), an offer of \u00a325 is a \u00a35 loss. The absolute loss is the same, but the relative loss is different. Maybe participants are more sensitive to relative losses. So the term could be (split_self - 3*token_self)/ (3*token_self), which is the relative deviation. But this introduces division by token_self, which could be zero, but in the dataset, token_self is the number of tokens found by the participant, which should be at least 1. So that's safe. Then the model would be U = alpha * split_self + beta * (split_self - 3*token_self)/(3*token_self). This term represents the proportional deviation from the equitable split. However, this introduces a non-linear term (due to division by token_self), but the parameters are still linear. However, this might better capture the idea that a \u00a35 loss is more significant when the contribution is smaller.\n\nBut this model would have two parameters, alpha and beta. The question is whether this would perform better in terms of BIC and parameter recovery compared to Model 2. The previous Model 2 has a BIC of 30.77, which is better than Model 1's 35.35. So perhaps a model that uses a relative fairness term could improve upon that.\n\nAlternatively, maybe combining both absolute and relative terms. But that would require more parameters. However, the constraint is two parameters. So perhaps the best approach is to think of a different psychological mechanism not yet captured by the previous models.\n\nAnother angle: participants might evaluate the offer based on both their own contribution and the opponent's contribution. For example, if the opponent contributed less but is getting a higher split, that's unfair. But how to capture that with the available variables. The split_opp is the opponent's proposed share. But in the responder role, the participant is responding to the proposer's offer. So when the participant is the responder, the proposer is the opponent. So in trial_role=1 (responder), the split_self is what the proposer (opponent) is offering to the participant. So the participant's utility could depend on the difference between their own split and the opponent's split, relative to their contributions. For example, the fair split would be based on contributions, so split_self / split_opp should be equal to token_self / token_opp. But this introduces a ratio, which might be complex. Alternatively, the difference between the split_self and split_opp compared to the difference in contributions. But this might require more parameters.\n\nBut given the two-parameter limit, perhaps the model should focus on the participant's own split relative to their contribution and the overall fairness of the split percentage. Wait, but splitperc_self is available. However, the problem states that two equal split_self variables don't represent the same fairness because combined_earning varies. So splitperc_self is the percentage of the combined_earning offered to the participant. The fair percentage would be (token_self / (token_self + token_opp)) * 100. So the difference between splitperc_self and the fair percentage could be a term. That's what Model 1 does. But Model 2's approach in absolute terms (split_self - 3*token_self) might be better because it's in pounds and directly compares to their contribution.\n\nBut perhaps combining both monetary value and proportional fairness. For example, U = alpha * split_self + beta * (splitperc_self - fair_percentage). But this would use splitperc_self and the fair percentage. However, splitperc_self is (split_self / combined_earning) * 100. The fair percentage is (token_self / (token_self + token_opp)) * 100. So the term is (split_self / combined_earning * 100) - (token_self / (token_self + token_opp) * 100). But combined_earning is 3*(token_self + token_opp), so split_self = (splitperc_self / 100) * 3*(token_self + token_opp). Therefore, the term becomes splitperc_self - (token_self / (token_self + token_opp) * 100). This is the same as Model 1's fairness term. But Model 1's BIC is worse than Model 2's. So maybe the absolute term (split_self - 3*token_self) is a better predictor.\n\nAlternatively, participants might care about both the absolute amount they receive and whether it's proportional to their contribution. For example, getting \u00a320 when they contributed \u00a315 (so \u00a35 more) might be good, but if the total is \u00a3100, their fair share would be 15/ (15 + opponent's tokens)*100. Wait, but opponent's tokens are token_opp. So the fair share is 3*token_self, and the split_self is what's offered. So the difference is split_self - 3*token_self. That's the term in Model 2.\n\nBut maybe participants also consider the total amount. For example, getting \u00a35 more in a \u00a330 total is different from \u00a35 more in a \u00a3100 total. But in Model 2, the term is absolute. So perhaps a better model would be to have the fairness term as (split_self - 3*token_self) / combined_earning. This would make it a relative term. For example, if combined_earning is large, the same absolute difference is less significant. But this introduces division by combined_earning, which varies. However, combined_earning is 3*(token_self + token_opp), which is known. So the term would be (split_self - 3*token_self) / (3*(token_self + token_opp)). This represents the deviation from the fair split as a proportion of the total. This could capture the idea that participants are more sensitive to unfairness when the total is smaller. But this adds complexity.\n\nAlternatively, the utility could be U = alpha * split_self + beta * (split_self - fair_split) / fair_split. Where fair_split is 3*token_self. So this term is (split_self - 3*token_self)/(3*token_self), which is the relative deviation from the fair split. This would make the fairness term a percentage change. For example, if split_self is 10 and fair_split is 15, the term is -5/15 = -0.333. If split_self is 20 and fair_split is 30, the term is -10/30 = -0.333. So the same relative deviation is treated the same. This might better capture proportional thinking. But this requires token_self to be non-zero, which it is.\n\nBut this model would have two parameters: alpha (sensitivity to monetary gain) and beta (sensitivity to proportional fairness). The utility function would be:\n\nU_accept = alpha * split_self + beta * ((split_self - 3*token_self) / (3*token_self))\n\nThis way, beta captures how much participants care about deviations from their fair share proportionally. For example, a negative beta would mean that offers below the fair split reduce utility. This model is different from the previous ones and might capture a different psychological mechanism\u2014proportional fairness rather than absolute fairness.\n\nBut would this model have better parameter recovery? It depends on the data. If participants are indeed sensitive to proportional deviations, this model might fit better. However, the parameters alpha and beta would be in different units (alpha is per \u00a3, beta is per unit proportional change). This might reduce covariance between them compared to Model 2, where both terms are in \u00a3.\n\nAnother consideration is the scaling of variables. If split_self is in pounds and the proportional term is unitless, the parameters alpha and beta would be on different scales, which could help in parameter recovery as they're less likely to covary. This might make the model's parameters more recoverable.\n\nAlternatively, the model could use both the absolute monetary term and the proportional fairness term. That's what this model does. So the utility is a combination of the direct monetary gain and the proportional fairness.\n\nComparing to previous models:\n\nModel 1: split_self and splitperc_self minus fair percentage.\n\nModel 2: split_self and split_self - 3*token_self.\n\nProposed model: split_self and (split_self - 3*token_self)/(3*token_self).\n\nThis model introduces a non-linear term (due to division by token_self), but the parameters are still linear. The question is whether this captures a different psychological principle not covered by the previous models.\n\nThe summary would need to explain that the utility combines absolute monetary gain with proportional deviation from the contribution-based fair share. The parameters alpha and beta control sensitivity to money and proportional fairness, respectively.\n\nNow, checking the dataset variables. The variables needed are split_self and token_self. Both are present in the dataset. The term 3*token_self is calculated from token_self. So this model is feasible.\n\nRegarding parameter bounds, alpha could be any real number, but likely positive since higher split_self should increase utility. Beta could be negative, as offers below the fair split (negative proportional term) would reduce utility if beta is negative. Wait, if the proportional term is (split_self - fair)/fair, then when split_self < fair, the term is negative. If beta is negative, then a negative term (split_self < fair) would lead to a positive contribution to utility, which doesn't make sense. Wait, no: the utility is alpha*split_self + beta*((split_self - fair)/fair). If split_self is less than fair, then (split_self - fair)/fair is negative. If beta is negative, then beta multiplied by a negative term becomes positive, increasing utility. That's not desired. We want offers below fair to decrease utility. So beta should be positive. Because if split_self < fair, then (split_self - fair)/fair is negative. If beta is positive, then the term beta * (negative) would decrease utility. So beta should be positive to penalize offers below fair.\n\nSo the parameters would be:\n\nalpha: sensitivity to monetary gain (expected to be positive).\n\nbeta: sensitivity to proportional fairness (expected to be positive, as higher beta means more penalty for below-fair offers).\n\nThe ranges for alpha could be from, say, -inf to inf, but realistically, alpha should be positive. However, to allow the model to learn, we can set a generous range, like -10 to 10. Similarly for beta, but since beta is expected to be positive, but we can't constrain it in the model, the bounds should be from -inf to inf, but perhaps in practice, we can set a reasonable range like -10 to 10.\n\nBut the problem states that the bounds should be generous but finite. So for alpha and beta, perhaps set min to -10 and max to 10, inclusive. This allows the parameters to be learned without restricting too much, but prevents them from being infinity.\n\nSo the variable descriptions would be:\n\nalpha: learnable, range [-10, 10], description: sensitivity to absolute monetary gain from the proposed split.\n\nbeta: learnable, range [-10, 10], description: sensitivity to proportional deviation of the proposed split from the participant's equitable contribution.\n\nThe utility U_accept is calculated as alpha * split_self + beta * ((split_self - 3*token_self) / (3*token_self)).\n\nThis model uses two learnable parameters, alpha and beta, and the variables split_self and token_self from the dataset. The term (split_self - 3*token_self)/(3*token_self) represents the proportional deviation from the fair split based on the participant's contribution.\n\nThis model introduces a new fairness component compared to the previous models by considering the proportional deviation rather than the absolute difference. This could capture scenarios where participants are more sensitive to relative unfairness. For example, losing 10% of their fair share might be more impactful than losing a fixed amount. This model would allow testing whether proportional fairness is a better explanation than absolute fairness.\n\nNow, checking for covariance between parameters. Since alpha is multiplied by split_self (in \u00a3) and beta is multiplied by a unitless term, the two parameters are on different scales, which might reduce covariance. This could improve parameter recovery compared to Model 2, where both terms are in \u00a3.\n\nIn summary, the proposed model combines absolute monetary gain with proportional fairness, using two parameters to capture sensitivity to each. This approach is different from the previous models and explores a new psychological mechanism of proportional fairness evaluation.\n</think>\n\n<MODEL>\nU_accept = alpha * split_self + beta * ((split_self - 3 * token_self) / (3 * token_self))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_accept\": {\n      \"description\": \"Utility of accepting the proposed split\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"alpha\": {\n      \"description\": \"Sensitivity to absolute monetary gain from the proposed split\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta\": {\n      \"description\": \"Sensitivity to proportional deviation from contribution-based fairness\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed monetary amount for the participant (in \u00a3)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant in the pretask\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<SUMMARY>\nA utility model combining absolute monetary gain and proportional fairness evaluation. The utility of accepting an offer depends linearly on the proposed amount (split_self) and the proportional deviation of this amount from the participant's equitable contribution (3 * token_self). The proportional term captures sensitivity to relative fairness violations, where offers below one's contribution are penalized according to their percentage shortfall. Two parameters control sensitivity to money (alpha) and proportional fairness (beta).\n</SUMMARY>",
  "current_model": "Specification: U_accept = alpha * split_self + beta * ((split_self - 3 * token_self) / (3 * token_self))\nSummary: A utility model combining absolute monetary gain and proportional fairness evaluation. The utility of accepting an offer depends linearly on the proposed amount (split_self) and the proportional deviation of this amount from the participant's equitable contribution (3 * token_self). The proportional term captures sensitivity to relative fairness violations, where offers below one's contribution are penalized according to their percentage shortfall. Two parameters control sensitivity to money (alpha) and proportional fairness (beta).",
  "simulation_code": "def simulate_model(trial_data, alpha=1, beta=1):\n    utility_values = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0)\n        token_self = trial.get(\"token_self\", 1) #Handle potential zero division error.\n\n        if token_self ==0:\n            utility = alpha * split_self #Avoid division by zero\n        else:\n            utility = alpha * split_self + beta * ((split_self - 3 * token_self) / (3 * token_self))\n        utility_values.append(utility)\n    return utility_values",
  "fitting_results": [
    {
      "alpha": -0.35974426119901737,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -8.02836550792066,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.972430890800112,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -16.54069734411095,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0948651627722303,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -13.811937152928648,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.8343723167462676,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -13.722362775946333,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.7404465327801375,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -15.000316963746004,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.5598368087275152,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -14.266610245637914,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": -10.0,
      "success": true,
      "log_likelihood": -0.0002363206580740376,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.477091506705637,
      "beta": 8.833631661067434,
      "success": true,
      "log_likelihood": -15.265860613035636,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": -10.0,
      "success": true,
      "log_likelihood": -0.00023632065807403758,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.6430024893155878,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -13.431193957964384,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.8619078324483491,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -11.50516275616554,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -0.19279239322105068,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -9.369325858343702,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.7043994914363663,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -13.471287619174495,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": -10.0,
      "success": true,
      "log_likelihood": -0.0002363206580740376,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": -10.0,
      "success": true,
      "log_likelihood": -0.0002363206580740376,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": -10.0,
      "success": true,
      "log_likelihood": -0.00023632065807403758,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": -10.0,
      "success": true,
      "log_likelihood": -0.0002363206580740376,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 3.996686408728857,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -3.1325713125980394,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 2.7226344143797765,
      "beta": 6.06179826932835,
      "success": true,
      "log_likelihood": -8.534746182239449,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": -10.0,
      "success": true,
      "log_likelihood": -0.00023632065807403763,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.98414063341825,
      "beta": 8.96714310588788,
      "success": true,
      "log_likelihood": -17.464002529151372,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 2.466913010214287,
      "beta": 6.4140709122238615,
      "success": true,
      "log_likelihood": -9.769347728533095,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.6751929968697732,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -15.853553301571834,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.1394892208642822,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -16.05703398343638,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.7080498806830787,
      "beta": 8.460392308150078,
      "success": true,
      "log_likelihood": -18.417091687185625,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.3259462876578758,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -14.431421609556883,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.2742751973955533,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -12.962189985802194,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.32272368454001077,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -10.119570336882617,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.8758718227995648,
      "beta": 2.9283173463939427,
      "success": true,
      "log_likelihood": -10.630208754407706,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.1299591615745257,
      "beta": 3.343777163798974,
      "success": true,
      "log_likelihood": -17.009476294084312,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": -10.0,
      "success": true,
      "log_likelihood": -0.0002363206580740376,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -0.35974440604381797,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -8.028365507920759,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.6267291972164807,
      "beta": 8.013029987003733,
      "success": true,
      "log_likelihood": -18.85841951281628,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.6816629026424843,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -14.29345591496534,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": -10.0,
      "success": true,
      "log_likelihood": -0.00023632065807403758,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.8333871122145924,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -10.608364603891497,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.9696058875670106,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -10.644000227366,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.8990506979412959,
      "beta": 9.815072951771302,
      "success": true,
      "log_likelihood": -17.12958874493679,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.9122418344080827,
      "beta": 4.986406363643574,
      "success": true,
      "log_likelihood": -19.341547040239607,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.753198062101408,
      "beta": 1.1712816260391408,
      "success": true,
      "log_likelihood": -9.720714626648416,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.7691030015734421,
      "beta": 5.406322966051999,
      "success": true,
      "log_likelihood": -20.212323411853497,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.15576674069396196,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -11.155329237114072,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.257225888929446,
      "beta": -5.870822531314995,
      "success": true,
      "log_likelihood": -6.438824009088494,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.2515136443121326,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -15.685761892511408,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.4635977672873093,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -14.31816281327156,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.466121111782185,
      "beta": 5.832283072450547,
      "success": true,
      "log_likelihood": -15.274347664061615,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0789917800685858,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -16.471344515257876,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.7043995099428585,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -17.054620950708603,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.5983248092277471,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -16.70785466990033,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.4169866072095873,
      "beta": 2.9049909682602864,
      "success": true,
      "log_likelihood": -23.119250280908876,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0639685901156448,
      "beta": 4.520428142275871,
      "success": true,
      "log_likelihood": -18.085227566655632,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -0.12783564943811082,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -12.019511317121504,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.13099051572848,
      "beta": 9.481387630365443,
      "success": true,
      "log_likelihood": -16.675193006123347,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.6889424564550658,
      "beta": 3.638969554513223,
      "success": true,
      "log_likelihood": -21.134914601637686,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.3232871811981973,
      "beta": 6.920519236033724,
      "success": true,
      "log_likelihood": -19.592648063403914,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.5068444043729136,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -11.034510836992704,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.3320806152357246,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -11.920904777304145,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.7386427731036047,
      "beta": -4.780828595452052,
      "success": true,
      "log_likelihood": -12.020891855717098,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -0.2056016044529385,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -9.699510746842142,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.7075857268343335,
      "beta": 4.820644027223467,
      "success": true,
      "log_likelihood": -13.163684055297354,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.7778722642723519,
      "beta": 4.855214470524945,
      "success": true,
      "log_likelihood": -20.32213130629558,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.8960535678426735,
      "beta": 9.863427824555844,
      "success": true,
      "log_likelihood": -17.100232942705595,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -0.3597442034865385,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -8.0283655079207,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.6685791848039103,
      "beta": 7.462624700926284,
      "success": true,
      "log_likelihood": -19.30304348766115,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.2256135592596964,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -10.79886938512305,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.2835028374072701,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -13.353690856610422,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 2.09682467048829,
      "beta": 2.387886515607484,
      "success": true,
      "log_likelihood": -8.8011696992873,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.6015605208344887,
      "beta": 2.975507817245595,
      "success": true,
      "log_likelihood": -12.62493184557615,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.4054823360498176,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -12.918118023968706,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.1745944041775784,
      "beta": -1.5269605575962857,
      "success": true,
      "log_likelihood": -11.386604863853343,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -0.19703758867381957,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -6.47970737852915,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -0.10852748149031796,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -11.980483101721493,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0668699177036016,
      "beta": 9.4450517531998,
      "success": true,
      "log_likelihood": -16.92543209133401,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.5528422853258845,
      "beta": 4.765888660035699,
      "success": true,
      "log_likelihood": -14.238500089637038,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.38989457976208525,
      "beta": 3.6039929606262597,
      "success": true,
      "log_likelihood": -22.92225579969603,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.235929942806076,
      "beta": 6.307092321703099,
      "success": true,
      "log_likelihood": -16.956975049484182,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.7860544832656624,
      "beta": -0.3650446986560454,
      "success": true,
      "log_likelihood": -7.878799678152081,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -0.8612190669696366,
      "beta": 5.915490848594612,
      "success": true,
      "log_likelihood": -9.51908666431283,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.6334698017337088,
      "beta": 3.07558450044304,
      "success": true,
      "log_likelihood": -21.575757115118453,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -0.3597442557653797,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -8.028365507920661,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.426992581020545,
      "beta": 3.5870544338565558,
      "success": true,
      "log_likelihood": -22.79243339838646,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.965398753449876,
      "beta": -3.719873763557926,
      "success": true,
      "log_likelihood": -10.849351109384111,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -0.3171052015050744,
      "beta": 8.243466507840987,
      "success": true,
      "log_likelihood": -12.506491642529463,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.2380604030057918,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -10.340836179338948,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.34742491992684155,
      "beta": 1.5608451399649899,
      "success": true,
      "log_likelihood": -23.700053044917492,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -0.24091299859599385,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -7.565644647291714,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.9145115804691502,
      "beta": 4.019027139581501,
      "success": true,
      "log_likelihood": -19.266382293864652,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.09961483694815454,
      "beta": 9.678187078209845,
      "success": true,
      "log_likelihood": -14.782409180029587,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 2.5641490771545543,
      "beta": 2.1854606772149823,
      "success": true,
      "log_likelihood": -6.409953598879179,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.1814064826863684,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -11.645116318791755,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.6517534368811567,
      "beta": 1.7785206482260556,
      "success": true,
      "log_likelihood": -20.997804434906843,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "alpha": {
        "r": 0.766729626101917,
        "p": 1.4257288850687963e-20
      },
      "beta": {
        "r": 0.5617719673687867,
        "p": 1.194718494481754e-09
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 32.24846051603598,
  "bic_error": "'ModelOutput' object has no attribute 'metrics'",
  "recovery_summary": "Parameter Recovery:\n- alpha: r = 0.767\n- beta: r = 0.562",
  "previous_models": [
    "Specification: U_accept = alpha * split_self + beta * ((split_self - 3 * token_self) / (3 * token_self))\nSummary: A utility model combining absolute monetary gain and proportional fairness evaluation. The utility of accepting an offer depends linearly on the proposed amount (split_self) and the proportional deviation of this amount from the participant's equitable contribution (3 * token_self). The proportional term captures sensitivity to relative fairness violations, where offers below one's contribution are penalized according to their percentage shortfall. Two parameters control sensitivity to money (alpha) and proportional fairness (beta).\nBIC: 32.24846051603598\n\nParameter Recovery:\n- alpha: r = 0.767\n- beta: r = 0.562"
  ]
}