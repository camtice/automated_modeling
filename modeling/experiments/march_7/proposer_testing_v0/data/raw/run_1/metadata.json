{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641",
  "output_description": "Design a computational model for the given task. The model should obtain the utility, (not the probability of choosing an action).  Your goal is to eventually explore the entire space of possible explainations and mechanisms by which the observed behavior arises.\n\nYour model should use the given variables appropriately, but does not necessary need to use all or even most of the variables. Do not include the model for the utility of rejecting an offer. \n\nThe model should:\n1. Predict only proposer behavior.\n2. Build on relevant psychological principles.\n3. Be considerate of high covariance between learnable parameters as the model will have to pass parameter recovery tests.\n4. Be applicable to the dataset given within the task description (i.e. the model should be able to be run using only the provided dataset structure).\n5. Not include parameters to simulate general stochasticity of behavior, because this will be handled later by a temperature parameter.\n6. Should have no more than two learnable parameters.\n7. This specific model should calculate the utility of an action, which will then be used to determine the probability of choosing that action. Negative values should represent a negative utility, and thus an unlikely action.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Use clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'. DO NOT USE 'lambda' AS A PARAMETER NAME.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641\n\nDesired Output Specification: Design a computational model for the given task. The model should obtain the utility, (not the probability of choosing an action).  Your goal is to eventually explore the entire space of possible explainations and mechanisms by which the observed behavior arises.\n\nYour model should use the given variables appropriately, but does not necessary need to use all or even most of the variables. Do not include the model for the utility of rejecting an offer. \n\nThe model should:\n1. Predict only proposer behavior.\n2. Build on relevant psychological principles.\n3. Be considerate of high covariance between learnable parameters as the model will have to pass parameter recovery tests.\n4. Be applicable to the dataset given within the task description (i.e. the model should be able to be run using only the provided dataset structure).\n5. Not include parameters to simulate general stochasticity of behavior, because this will be handled later by a temperature parameter.\n6. Should have no more than two learnable parameters.\n7. This specific model should calculate the utility of an action, which will then be used to determine the probability of choosing that action. Negative values should represent a negative utility, and thus an unlikely action.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Use clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'. DO NOT USE 'lambda' AS A PARAMETER NAME.\n\nPrevious Models:\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "Step-by-step reasoning:\n1. Key psychological mechanisms:\n   \u2022 Proposers aim to maximize their monetary share (self-interest) but are also sensitive to fairness norms.\n   \u2022 The fairness norm is represented by the idea that one\u2019s \u201centitlement\u201d in the split is proportional to one\u2019s token contribution relative to the total tokens (participant and opponent).\n   \u2022 When a proposer\u2019s chosen split (split_self) exceeds what is considered fair (entitlement), a fairness cost (or guilt) is incurred.\n\n2. Mechanism interaction:\n   \u2022 The utility of a proposal increases with the monetary reward (split_self) but is reduced if the proposer takes more than his/her entitled share.\n   \u2022 The deviation is captured by the excess of split_self above the fair share (which is token_self divided by the total tokens times the combined earning).\n\n3. Mathematical form:\n   \u2022 A linear combination is chosen:\n       U = (rho \u00d7 split_self) \u2013 (phi \u00d7 max{split_self \u2013 entitlement, 0})\n     where entitlement = (token_self/(token_self+token_opp)) \u00d7 combined_earning.\n   \u2022 The \u201cmax{\u2026,0}\u201d ensures that only proposals that give the proposer more than his fairness norm are penalized.\n\n4. Parameters:\n   \u2022 Two learnable parameters are used:\n       \u2013 rho: scaling the positive effect of self-payoff.\n       \u2013 phi: scaling the penalty for exceeding the fairness norm.\n   \u2022 Reasonable numerical bounds can be assigned: e.g., [0, 10] for both.\n\n5. Mapping to observed behavior:\n   \u2022 The model uses the observable proposal split (split_self) and the tokens from the pretask (token_self and token_opp) as well as the total pot value (combined_earning) to compute an \u201centitlement\u201d or fair share.\n   \u2022 This utility is then posited to drive the proposers\u2019 choices without accounting for any base stochasticity (handled separately).\n\nThe final formal model specification is as follows:\n\n<MODEL>\nU_action = rho * split_self - phi * max( split_self - (token_self/(token_self+token_opp))*combined_earning , 0)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_action\": {\n      \"description\": \"Utility of the proposed action by a proposer.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"rho\": {\n      \"description\": \"Learnable sensitivity parameter weighting the self-reward in the proposal.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Learnable sensitivity parameter penalizing proposals that exceed the fairness entitlement.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"The proposed monetary share for the participant (proposer).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"combined_earning\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant, representing their contribution.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent, representing their contribution.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total amount of money available to be split, derived from token contributions.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<SUMMARY>\nA utility model for proposers that balances self-interest with fairness concerns. The utility is the weighted monetary gain (scaled by rho) minus a penalty (scaled by phi) applied only when the proposer allocates more than the fair share\u2014defined by the proportion of tokens contributed relative to total tokens\u2014of the combined earnings.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return the utility values for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['rho', 'phi']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of utility values for each trial\n\n                Your code will be implemented within the following code block:\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    utility_values = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        utility_values.append(beta + (epsilon * E) + (eta * N))\n    return utility_values\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE UTLITY VALUES.\n                Model Specification:\n                U_action = rho * split_self - phi * max( split_self - (token_self/(token_self+token_opp))*combined_earning , 0)\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"U_action\": {\n      \"description\": \"Utility of the proposed action by a proposer.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"rho\": {\n      \"description\": \"Learnable sensitivity parameter weighting the self-reward in the proposal.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Learnable sensitivity parameter penalizing proposals that exceed the fairness entitlement.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"The proposed monetary share for the participant (proposer).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"combined_earning\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant, representing their contribution.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent, representing their contribution.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total amount of money available to be split, derived from token contributions.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641\n\n                ",
      "output": "```python\nimport json\nimport math\n\ndef simulate_model(trial_data, rho=1, phi=1):\n    utility_values = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0)\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n\n        if token_self + token_opp ==0:\n            entitlement = 0\n        else:\n            entitlement = (token_self / (token_self + token_opp)) * combined_earning\n\n        fairness_penalty = max(split_self - entitlement, 0)\n        utility = rho * split_self - phi * fairness_penalty\n        utility_values.append(utility)\n    return utility_values\n\n# Data as list of dictionaries\ndata_json = '[{\"ID\": 1, \"group\": \"A\", \"trial_number\": 1, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 5, \"token_self\": 10, \"combined_earning\": 15, \"split_opp\": 5, \"split_self\": 10, \"splitperc_opp\": 33, \"splitperc_self\": 67, \"accept\": 1, \"accepted_amount\": 10, \"accepted_perc\": 67, \"proposed_perc\": 67, \"proposed_amount\": 10}, {\"ID\": 2, \"group\": \"B\", \"trial_number\": 2, \"trial_type\": 2, \"trial_role\": 1, \"token_opp\": 12, \"token_self\": 3, \"combined_earning\": 15, \"split_opp\": 12, \"split_self\": 3, \"splitperc_opp\": 80, \"splitperc_self\": 20, \"accept\": 0, \"accepted_amount\": 0, \"accepted_perc\": 0, \"proposed_perc\": 20, \"proposed_amount\": 3}]'\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data, rho=2, phi=3)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n```"
    }
  ],
  "learnable_parameters": {
    "rho": {
      "description": "Learnable sensitivity parameter weighting the self-reward in the proposal.",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "phi": {
      "description": "Learnable sensitivity parameter penalizing proposals that exceed the fairness entitlement.",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "U_action = rho * split_self - phi * max( split_self - (token_self/(token_self+token_opp))*combined_earning , 0)",
  "variable_descriptions": {
    "U_action": {
      "description": "Utility of the proposed action by a proposer.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "rho": {
      "description": "Learnable sensitivity parameter weighting the self-reward in the proposal.",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "phi": {
      "description": "Learnable sensitivity parameter penalizing proposals that exceed the fairness entitlement.",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "split_self": {
      "description": "The proposed monetary share for the participant (proposer).",
      "range": {
        "min": 0,
        "max": "combined_earning",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Number of tokens found by the participant, representing their contribution.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent, representing their contribution.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "combined_earning": {
      "description": "Total amount of money available to be split, derived from token contributions.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    }
  },
  "model_summary": "A utility model for proposers that balances self-interest with fairness concerns. The utility is the weighted monetary gain (scaled by rho) minus a penalty (scaled by phi) applied only when the proposer allocates more than the fair share\u2014defined by the proportion of tokens contributed relative to total tokens\u2014of the combined earnings.",
  "full_reasoning": "Step-by-step reasoning:\n1. Key psychological mechanisms:\n   \u2022 Proposers aim to maximize their monetary share (self-interest) but are also sensitive to fairness norms.\n   \u2022 The fairness norm is represented by the idea that one\u2019s \u201centitlement\u201d in the split is proportional to one\u2019s token contribution relative to the total tokens (participant and opponent).\n   \u2022 When a proposer\u2019s chosen split (split_self) exceeds what is considered fair (entitlement), a fairness cost (or guilt) is incurred.\n\n2. Mechanism interaction:\n   \u2022 The utility of a proposal increases with the monetary reward (split_self) but is reduced if the proposer takes more than his/her entitled share.\n   \u2022 The deviation is captured by the excess of split_self above the fair share (which is token_self divided by the total tokens times the combined earning).\n\n3. Mathematical form:\n   \u2022 A linear combination is chosen:\n       U = (rho \u00d7 split_self) \u2013 (phi \u00d7 max{split_self \u2013 entitlement, 0})\n     where entitlement = (token_self/(token_self+token_opp)) \u00d7 combined_earning.\n   \u2022 The \u201cmax{\u2026,0}\u201d ensures that only proposals that give the proposer more than his fairness norm are penalized.\n\n4. Parameters:\n   \u2022 Two learnable parameters are used:\n       \u2013 rho: scaling the positive effect of self-payoff.\n       \u2013 phi: scaling the penalty for exceeding the fairness norm.\n   \u2022 Reasonable numerical bounds can be assigned: e.g., [0, 10] for both.\n\n5. Mapping to observed behavior:\n   \u2022 The model uses the observable proposal split (split_self) and the tokens from the pretask (token_self and token_opp) as well as the total pot value (combined_earning) to compute an \u201centitlement\u201d or fair share.\n   \u2022 This utility is then posited to drive the proposers\u2019 choices without accounting for any base stochasticity (handled separately).\n\nThe final formal model specification is as follows:\n\n<MODEL>\nU_action = rho * split_self - phi * max( split_self - (token_self/(token_self+token_opp))*combined_earning , 0)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_action\": {\n      \"description\": \"Utility of the proposed action by a proposer.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"rho\": {\n      \"description\": \"Learnable sensitivity parameter weighting the self-reward in the proposal.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Learnable sensitivity parameter penalizing proposals that exceed the fairness entitlement.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"The proposed monetary share for the participant (proposer).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"combined_earning\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant, representing their contribution.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent, representing their contribution.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total amount of money available to be split, derived from token contributions.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<SUMMARY>\nA utility model for proposers that balances self-interest with fairness concerns. The utility is the weighted monetary gain (scaled by rho) minus a penalty (scaled by phi) applied only when the proposer allocates more than the fair share\u2014defined by the proportion of tokens contributed relative to total tokens\u2014of the combined earnings.\n</SUMMARY>",
  "current_model": "Specification: U_action = rho * split_self - phi * max( split_self - (token_self/(token_self+token_opp))*combined_earning , 0)\nSummary: A utility model for proposers that balances self-interest with fairness concerns. The utility is the weighted monetary gain (scaled by rho) minus a penalty (scaled by phi) applied only when the proposer allocates more than the fair share\u2014defined by the proportion of tokens contributed relative to total tokens\u2014of the combined earnings.",
  "simulation_code": "def simulate_model(trial_data, rho=1, phi=1):\n    utility_values = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0)\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n\n        if token_self + token_opp ==0:\n            entitlement = 0\n        else:\n            entitlement = (token_self / (token_self + token_opp)) * combined_earning\n\n        fairness_penalty = max(split_self - entitlement, 0)\n        utility = rho * split_self - phi * fairness_penalty\n        utility_values.append(utility)\n    return utility_values",
  "fitting_results": [
    {
      "rho": 0.0,
      "phi": 2.3690195405269803,
      "success": true,
      "log_likelihood": -33.61272666103652,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "rho": 0.0,
      "phi": 1.777198639636938,
      "success": true,
      "log_likelihood": -34.23054014445191,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "rho": 0.0,
      "phi": 1.777192682242374,
      "success": true,
      "log_likelihood": -34.23054014443345,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "rho": 0.0,
      "phi": 1.777188872438993,
      "success": true,
      "log_likelihood": -34.23054014443241,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "rho": 0.0,
      "phi": 1.7771884528912976,
      "success": true,
      "log_likelihood": -34.2305401444328,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "rho": 0.024665540241613413,
      "phi": 1.8618186056498098,
      "success": true,
      "log_likelihood": -34.21538572129209,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "rho": 0.3961251992583713,
      "phi": 3.155953921121744,
      "success": true,
      "log_likelihood": -30.821677782519615,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "rho": 0.039740809631665354,
      "phi": 1.913719366687938,
      "success": true,
      "log_likelihood": -34.191238507681064,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "rho": 0.3961250833136967,
      "phi": 3.155949239905098,
      "success": true,
      "log_likelihood": -30.821677782520368,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "rho": 0.0,
      "phi": 1.7771925341740722,
      "success": true,
      "log_likelihood": -34.230540144433256,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "rho": 0.0,
      "phi": 1.7772090943205134,
      "success": true,
      "log_likelihood": -34.23054014453391,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "rho": 0.0,
      "phi": 2.3690145264530362,
      "success": true,
      "log_likelihood": -33.612726661025924,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "rho": 0.0,
      "phi": 1.7771925030448128,
      "success": true,
      "log_likelihood": -34.23054014443321,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "rho": 0.39612503029045787,
      "phi": 3.155951678154266,
      "success": true,
      "log_likelihood": -30.82167778251787,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "rho": 0.39612225708113596,
      "phi": 3.1559491197532417,
      "success": true,
      "log_likelihood": -30.821677782667802,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "rho": 0.39612446128542417,
      "phi": 3.155948130495928,
      "success": true,
      "log_likelihood": -30.821677782522787,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "rho": 0.39612508213785336,
      "phi": 3.155955942438954,
      "success": true,
      "log_likelihood": -30.821677782522332,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "rho": 0.3063005270200111,
      "phi": 2.8398268694739865,
      "success": true,
      "log_likelihood": -32.083302080926465,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "rho": 0.2939052140844587,
      "phi": 2.796361227651269,
      "success": true,
      "log_likelihood": -32.240849359962205,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "rho": 0.39610960391406425,
      "phi": 3.1558285948295803,
      "success": true,
      "log_likelihood": -30.821677788322308,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "rho": 0.0,
      "phi": 1.7771882074845655,
      "success": true,
      "log_likelihood": -34.23054014443308,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "rho": 0.2661328578335687,
      "phi": 2.699164302315182,
      "success": true,
      "log_likelihood": -32.57679712946033,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "rho": 0.0,
      "phi": 1.7772086164203091,
      "success": true,
      "log_likelihood": -34.23054014452879,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "rho": 0.0,
      "phi": 1.7771976793349498,
      "success": true,
      "log_likelihood": -34.230540144447545,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "rho": 0.0,
      "phi": 1.7772115423147816,
      "success": true,
      "log_likelihood": -34.23054014456225,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "rho": 0.0,
      "phi": 1.7771947456348927,
      "success": true,
      "log_likelihood": -34.23054014443752,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "rho": 0.0,
      "phi": 1.7771853873303098,
      "success": true,
      "log_likelihood": -34.2305401444388,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "rho": 0.0,
      "phi": 1.7771918919974077,
      "success": true,
      "log_likelihood": -34.230540144432545,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "rho": 0.27819163817367326,
      "phi": 2.741327875910913,
      "success": true,
      "log_likelihood": -32.43391850266673,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "rho": 0.13137982003589221,
      "phi": 2.230033967209422,
      "success": true,
      "log_likelihood": -33.80725937407253,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "rho": 0.39612427613894896,
      "phi": 3.155945516797903,
      "success": true,
      "log_likelihood": -30.821677782529772,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "rho": 0.0,
      "phi": 2.369013597642911,
      "success": true,
      "log_likelihood": -33.612726661025164,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "rho": 0.0,
      "phi": 1.7771954036306326,
      "success": true,
      "log_likelihood": -34.23054014443933,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "rho": 0.0,
      "phi": 1.7772192599847871,
      "success": true,
      "log_likelihood": -34.23054014467426,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "rho": 0.39611612118569356,
      "phi": 3.155867665777246,
      "success": true,
      "log_likelihood": -30.82167778477996,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "rho": 0.08674027522569926,
      "phi": 2.075682553261244,
      "success": true,
      "log_likelihood": -34.04431546597141,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "rho": 0.11280698972312656,
      "phi": 2.1657582860169193,
      "success": true,
      "log_likelihood": -33.917131749020186,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "rho": 0.0,
      "phi": 1.7771902640555988,
      "success": true,
      "log_likelihood": -34.230540144431814,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "rho": 0.0,
      "phi": 1.777198173145287,
      "success": true,
      "log_likelihood": -34.23054014444972,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "rho": 0.2991994315864966,
      "phi": 2.8149173928783857,
      "success": true,
      "log_likelihood": -32.174125649547676,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "rho": 0.0,
      "phi": 1.7772054632862206,
      "success": true,
      "log_likelihood": -34.23054014449827,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "rho": 0.0,
      "phi": 1.777189211242593,
      "success": true,
      "log_likelihood": -34.23054014443217,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "rho": 0.3279264730783666,
      "phi": 2.9157477748260425,
      "success": true,
      "log_likelihood": -31.79793700547476,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "rho": 0.0,
      "phi": 1.7771917260780874,
      "success": true,
      "log_likelihood": -34.2305401444324,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "rho": 0.0,
      "phi": 1.7771918603006802,
      "success": true,
      "log_likelihood": -34.23054014443252,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "rho": 0.132936013349579,
      "phi": 2.235464641853054,
      "success": true,
      "log_likelihood": -33.79734752141518,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "rho": 0.0,
      "phi": 1.777196577988314,
      "success": true,
      "log_likelihood": -34.230540144443204,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "rho": 0.0,
      "phi": 1.7771897025135295,
      "success": true,
      "log_likelihood": -34.23054014443192,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "rho": 0.0,
      "phi": 1.7771915636947704,
      "success": true,
      "log_likelihood": -34.230540144432275,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "rho": 0.0,
      "phi": 2.369014430569193,
      "success": true,
      "log_likelihood": -33.61272666102582,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "rho": 0.06999552498621069,
      "phi": 2.0179133850901114,
      "success": true,
      "log_likelihood": -34.10896375078834,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "rho": 0.0,
      "phi": 2.369013292180049,
      "success": true,
      "log_likelihood": -33.612726661025,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "rho": 0.0,
      "phi": 1.7771976900768816,
      "success": true,
      "log_likelihood": -34.230540144447595,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "rho": 0.0,
      "phi": 2.369002762236352,
      "success": true,
      "log_likelihood": -33.61272666104423,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "rho": 0.0,
      "phi": 1.7771913973824134,
      "success": true,
      "log_likelihood": -34.23054014443216,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "rho": 0.0,
      "phi": 1.7771965710617765,
      "success": true,
      "log_likelihood": -34.23054014444317,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "rho": 0.0,
      "phi": 1.7771989235915162,
      "success": true,
      "log_likelihood": -34.2305401444533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "rho": 0.23238252004414933,
      "phi": 2.581201868181618,
      "success": true,
      "log_likelihood": -32.95055647229281,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "rho": 0.0,
      "phi": 2.3690135350667014,
      "success": true,
      "log_likelihood": -33.61272666102513,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "rho": 0.20931170497488252,
      "phi": 2.5007565858813607,
      "success": true,
      "log_likelihood": -33.18240896058097,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "rho": 0.0,
      "phi": 1.7771904731229156,
      "success": true,
      "log_likelihood": -34.23054014443182,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "rho": 0.0,
      "phi": 1.7771884760691108,
      "success": true,
      "log_likelihood": -34.23054014443278,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "rho": 0.0,
      "phi": 2.3690272243478425,
      "success": true,
      "log_likelihood": -33.61272666107411,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "rho": 0.0,
      "phi": 1.7771897690601421,
      "success": true,
      "log_likelihood": -34.2305401444319,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "rho": 0.0,
      "phi": 1.7771833631214577,
      "success": true,
      "log_likelihood": -34.23054014444574,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "rho": 0.0,
      "phi": 1.7771989270026352,
      "success": true,
      "log_likelihood": -34.230540144453315,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "rho": 0.3098707197794444,
      "phi": 2.8523516168793366,
      "success": true,
      "log_likelihood": -32.03708940562603,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "rho": 0.2407257474126612,
      "phi": 2.6103175688452613,
      "success": true,
      "log_likelihood": -32.861850586089574,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "rho": 0.0,
      "phi": 1.777191243352522,
      "success": true,
      "log_likelihood": -34.23054014443207,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "rho": 0.2712828115089453,
      "phi": 2.7171349761785577,
      "success": true,
      "log_likelihood": -32.51633851377083,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "rho": 0.0,
      "phi": 1.7771883309126288,
      "success": true,
      "log_likelihood": -34.230540144432936,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "rho": 0.0,
      "phi": 2.3690201100866437,
      "success": true,
      "log_likelihood": -33.61272666103843,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "rho": 0.0,
      "phi": 1.7771909829400632,
      "success": true,
      "log_likelihood": -34.23054014443195,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "rho": 0.1834315462232602,
      "phi": 2.410697707200817,
      "success": true,
      "log_likelihood": -33.41800760835314,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "rho": 0.0,
      "phi": 3.9013583391854203,
      "success": true,
      "log_likelihood": -32.2524285913954,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "rho": 0.0578695461796294,
      "phi": 1.9761244342926085,
      "success": true,
      "log_likelihood": -34.14732162992337,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "rho": 0.3261053473687446,
      "phi": 2.909352946425347,
      "success": true,
      "log_likelihood": -31.822463177371763,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "rho": 0.0,
      "phi": 10.0,
      "success": true,
      "log_likelihood": -30.550380875558158,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "rho": 0.0,
      "phi": 1.7771890065591356,
      "success": true,
      "log_likelihood": -34.230540144432304,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "rho": 0.0,
      "phi": 2.3690152945558545,
      "success": true,
      "log_likelihood": -33.61272666102683,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "rho": 0.0,
      "phi": 1.7771879245989375,
      "success": true,
      "log_likelihood": -34.23054014443345,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "rho": 0.26784573480107987,
      "phi": 2.705098234160659,
      "success": true,
      "log_likelihood": -32.5567730204653,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "rho": 0.0,
      "phi": 10.0,
      "success": true,
      "log_likelihood": -30.550380875558155,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "rho": 0.0,
      "phi": 1.7771908162122583,
      "success": true,
      "log_likelihood": -34.23054014443189,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "rho": 0.0,
      "phi": 1.7771942387538482,
      "success": true,
      "log_likelihood": -34.23054014443629,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "rho": 0.0,
      "phi": 1.7771883614648283,
      "success": true,
      "log_likelihood": -34.2305401444329,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "rho": 0.03822563882490797,
      "phi": 1.9084815796077261,
      "success": true,
      "log_likelihood": -34.194162041951394,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "rho": 0.0,
      "phi": 3.9013763591157495,
      "success": true,
      "log_likelihood": -32.252428591343055,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "rho": 0.3426307963503484,
      "phi": 2.967475783259944,
      "success": true,
      "log_likelihood": -31.596782229370326,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "rho": 0.0,
      "phi": 1.7772057011681806,
      "success": true,
      "log_likelihood": -34.230540144500374,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "rho": 0.023152776376057664,
      "phi": 1.8566729404469449,
      "success": true,
      "log_likelihood": -34.217178932808906,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "rho": {
        "r": 0.5325709799103828,
        "p": 1.1753219781030528e-08
      },
      "phi": {
        "r": 0.6077449562314252,
        "p": 2.013112728473463e-11
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 74.6313593138762,
  "bic_error": "'ModelOutput' object has no attribute 'metrics'",
  "recovery_summary": "Parameter Recovery:\n- rho: r = 0.533\n- phi: r = 0.608",
  "previous_models": [
    "Specification: U_action = rho * split_self - phi * max( split_self - (token_self/(token_self+token_opp))*combined_earning , 0)\nSummary: A utility model for proposers that balances self-interest with fairness concerns. The utility is the weighted monetary gain (scaled by rho) minus a penalty (scaled by phi) applied only when the proposer allocates more than the fair share\u2014defined by the proportion of tokens contributed relative to total tokens\u2014of the combined earnings.\nBIC: 74.6313593138762\n\nParameter Recovery:\n- rho: r = 0.533\n- phi: r = 0.608"
  ]
}