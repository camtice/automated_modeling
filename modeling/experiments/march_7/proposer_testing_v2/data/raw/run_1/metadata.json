{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641",
  "output_description": "Design a computational model for the given task. The model should obtain the utility of accepting an offer, (not the probability of choosing an action).  Your goal is to eventually explore the entire space of possible explainations and mechanisms by which the observed behavior arises.\n\nYour model should use the given variables appropriately, but does not necessary need to use all or even most of the variables. Do not include the model for the utility of rejecting an offer. \n\nThe model should:\n1. Predict only responder behavior.\n2. Build on relevant psychological principles.\n3. Be considerate of high covariance between learnable parameters as the model will have to pass parameter recovery tests.\n4. Be applicable to the dataset given within the task description (i.e. the model should be able to be run using only the provided dataset structure).\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Use clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'. DO NOT USE 'lambda' AS A PARAMETER NAME.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641\n\nDesired Output Specification: Design a computational model for the given task. The model should obtain the utility of accepting an offer, (not the probability of choosing an action).  Your goal is to eventually explore the entire space of possible explainations and mechanisms by which the observed behavior arises.\n\nYour model should use the given variables appropriately, but does not necessary need to use all or even most of the variables. Do not include the model for the utility of rejecting an offer. \n\nThe model should:\n1. Predict only responder behavior.\n2. Build on relevant psychological principles.\n3. Be considerate of high covariance between learnable parameters as the model will have to pass parameter recovery tests.\n4. Be applicable to the dataset given within the task description (i.e. the model should be able to be run using only the provided dataset structure).\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Use clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'. DO NOT USE 'lambda' AS A PARAMETER NAME.\n\nPrevious Models:\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "Step-by-step reasoning:\n\n1. Key Psychological Mechanisms:\n\u2003\u2022 Fairness evaluation: Responders likely compare the offered split (split_self) with a \u201cfair\u201d share. Here \u201cfair\u201d is defined by one\u2019s own contribution relative to the total contributions. With each token valued equally, the fair share is given by the proportion of tokens found by the participant, i.e., token_self/(token_self + token_opp) multiplied by the total combined earning.\n\u2003\u2022 Inequality aversion: Responders are known to dislike unfair outcomes. In particular, people are especially sensitive to disadvantageous inequity\u2014that is, when the offer is below what they consider fair. They may also show (typically lower) sensitivity to advantageous inequity when the offer exceeds the fair amount.\n\u2003\u2022 Integration of monetary gain and fairness concerns: Even if an offer provides money (split_self), its attractiveness is reduced if it deviates from the normatively \u201cfair\u201d share. This leads to the combination of both a reward (the absolute payoff) and the fairness deviation.\n\u2003\u2022 Attention to learnable parameters: Given the high covariance in free parameters observed in model selection/recovery tests, we use a structure with two separate parameters (one for disadvantageous and one for advantageous inequality) with generous but finite bounds.\n\n2. Interactions and Mathematical Form:\n\u2003\u2022 Compute a \u201cfair share\u201d allocation (f) as a function of tokens: \n\u2003\u2003f = (token_self / (token_self + token_opp)) \u00d7 combined_earning.\n\u2003\u2022 Calculate the inequality gap (d) = split_self \u2013 f.\n\u2003\u2022 When d is negative (offer worse than fair): apply a penalty weighted by a disadvantageous inequality aversion parameter (alpha).\n\u2003\u2022 When d is positive (offer better than fair): optionally apply a (typically smaller) penalty weighted by an advantageous inequality aversion parameter (beta).\n\u2003\u2022 The final utility of accepting an offer, U_accept, is then given by the offered monetary reward less the fairness \u201cpenalty.\u201d\n\n3. Learnable Parameters and Their Roles:\n\u2003\u2022 alpha: disadvantageous inequality aversion parameter (expected to be relatively high if responders strongly dislike offers below the fair share).\n\u2003\u2022 beta: advantageous inequality aversion parameter (typically lower since being \u201cover\u2010rewarded\u201d is less aversive, but still may matter).\n\n4. Mapping to Observables:\n\u2003\u2022 The model uses the observable split_self, token_self, token_opp, and combined_earning from the dataset to compute the fair share.\n\u2003\u2022 The computed U_accept is a latent utility measure that explains the tendency to accept an offer (given that rejecting would have another utility that we do not model here).\n\nBelow is the formal specification.\n\n<MODEL>\nLet f = (token_self / (token_self + token_opp)) * combined_earning.\nLet d = split_self - f.\nThen, the utility of accepting an offer is defined as:\n\u2003\u2003U_accept = split_self - alpha * max(f - split_self, 0) - beta * max(split_self - f, 0).\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_accept\": {\n      \"description\": \"Utility of accepting an offer, integrating monetary reward and fairness deviation.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"split_self\": {\n      \"description\": \"Monetary share proposed for the participant (in \u00a3).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total pot (in \u00a3) available to be divided.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"alpha\": {\n      \"description\": \"Disadvantageous inequality aversion parameter, weighting penalty when the offer is below a fair share.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 20,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta\": {\n      \"description\": \"Advantageous inequality aversion parameter, weighting any penalty when the offer exceeds the fair share.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"f\": {\n      \"description\": \"Calculated fair share allocation based on token contributions.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"d\": {\n      \"description\": \"Fairness gap between the offered share and the fair share (split_self - f).\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<SUMMARY>\nThe model computes the responder\u2019s utility for accepting an offer as the proposed monetary share minus a fairness penalty. The fairness penalty is proportional to the deviation from a fair share\u2014calculated as the participant\u2019s tokens relative to the total tokens\u2014and is weighted differently when the offer is below (using parameter alpha) or above (using parameter beta) the fair share. Two learnable parameters with generous finite bounds capture these sensitivities.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['alpha', 'beta']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of utility values for each trial\n\n                Your code will be implemented within the following code block:\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    utility_values = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        utility_values.append(beta + (epsilon * E) + (eta * N))\n    return utility_values\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE UTLITY VALUES.\n                Model Specification:\n                Let f = (token_self / (token_self + token_opp)) * combined_earning.\nLet d = split_self - f.\nThen, the utility of accepting an offer is defined as:\n\u2003\u2003U_accept = split_self - alpha * max(f - split_self, 0) - beta * max(split_self - f, 0).\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"U_accept\": {\n      \"description\": \"Utility of accepting an offer, integrating monetary reward and fairness deviation.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"split_self\": {\n      \"description\": \"Monetary share proposed for the participant (in \\u00a3).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total pot (in \\u00a3) available to be divided.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"alpha\": {\n      \"description\": \"Disadvantageous inequality aversion parameter, weighting penalty when the offer is below a fair share.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 20,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta\": {\n      \"description\": \"Advantageous inequality aversion parameter, weighting any penalty when the offer exceeds the fair share.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"f\": {\n      \"description\": \"Calculated fair share allocation based on token contributions.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"d\": {\n      \"description\": \"Fairness gap between the offered share and the fair share (split_self - f).\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641\n\n                ",
      "output": "```python\nimport json\nimport math\n\ndef simulate_model(trial_data, alpha=1, beta=1):\n    utility_values = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n        split_self = trial.get(\"split_self\", 0)\n\n        if token_self + token_opp ==0: #Handle division by zero\n            f = 0\n        else:\n            f = (token_self / (token_self + token_opp)) * combined_earning\n        d = split_self - f\n        u_accept = split_self - alpha * max(f - split_self, 0) - beta * max(split_self - f, 0)\n        utility_values.append(u_accept)\n    return utility_values\n\n# Example usage (replace with your actual data loading)\ndata_json = '[{\"token_self\": 10, \"token_opp\": 20, \"combined_earning\": 30, \"split_self\": 10}, {\"token_self\": 5, \"token_opp\": 5, \"combined_earning\": 20, \"split_self\": 10}]'\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data, alpha=2, beta=0.5)\nprint(json.dumps({\"results\": results}))\n```"
    }
  ],
  "learnable_parameters": {
    "alpha": {
      "description": "Disadvantageous inequality aversion parameter, weighting penalty when the offer is below a fair share.",
      "range": {
        "min": 0,
        "max": 20,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta": {
      "description": "Advantageous inequality aversion parameter, weighting any penalty when the offer exceeds the fair share.",
      "range": {
        "min": 0,
        "max": 5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "Let f = (token_self / (token_self + token_opp)) * combined_earning.\nLet d = split_self - f.\nThen, the utility of accepting an offer is defined as:\n\u2003\u2003U_accept = split_self - alpha * max(f - split_self, 0) - beta * max(split_self - f, 0).",
  "variable_descriptions": {
    "U_accept": {
      "description": "Utility of accepting an offer, integrating monetary reward and fairness deviation.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "split_self": {
      "description": "Monetary share proposed for the participant (in \u00a3).",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Number of tokens found by the participant.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "combined_earning": {
      "description": "Total pot (in \u00a3) available to be divided.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "alpha": {
      "description": "Disadvantageous inequality aversion parameter, weighting penalty when the offer is below a fair share.",
      "range": {
        "min": 0,
        "max": 20,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta": {
      "description": "Advantageous inequality aversion parameter, weighting any penalty when the offer exceeds the fair share.",
      "range": {
        "min": 0,
        "max": 5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "f": {
      "description": "Calculated fair share allocation based on token contributions.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "d": {
      "description": "Fairness gap between the offered share and the fair share (split_self - f).",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "The model computes the responder\u2019s utility for accepting an offer as the proposed monetary share minus a fairness penalty. The fairness penalty is proportional to the deviation from a fair share\u2014calculated as the participant\u2019s tokens relative to the total tokens\u2014and is weighted differently when the offer is below (using parameter alpha) or above (using parameter beta) the fair share. Two learnable parameters with generous finite bounds capture these sensitivities.",
  "full_reasoning": "Step-by-step reasoning:\n\n1. Key Psychological Mechanisms:\n\u2003\u2022 Fairness evaluation: Responders likely compare the offered split (split_self) with a \u201cfair\u201d share. Here \u201cfair\u201d is defined by one\u2019s own contribution relative to the total contributions. With each token valued equally, the fair share is given by the proportion of tokens found by the participant, i.e., token_self/(token_self + token_opp) multiplied by the total combined earning.\n\u2003\u2022 Inequality aversion: Responders are known to dislike unfair outcomes. In particular, people are especially sensitive to disadvantageous inequity\u2014that is, when the offer is below what they consider fair. They may also show (typically lower) sensitivity to advantageous inequity when the offer exceeds the fair amount.\n\u2003\u2022 Integration of monetary gain and fairness concerns: Even if an offer provides money (split_self), its attractiveness is reduced if it deviates from the normatively \u201cfair\u201d share. This leads to the combination of both a reward (the absolute payoff) and the fairness deviation.\n\u2003\u2022 Attention to learnable parameters: Given the high covariance in free parameters observed in model selection/recovery tests, we use a structure with two separate parameters (one for disadvantageous and one for advantageous inequality) with generous but finite bounds.\n\n2. Interactions and Mathematical Form:\n\u2003\u2022 Compute a \u201cfair share\u201d allocation (f) as a function of tokens: \n\u2003\u2003f = (token_self / (token_self + token_opp)) \u00d7 combined_earning.\n\u2003\u2022 Calculate the inequality gap (d) = split_self \u2013 f.\n\u2003\u2022 When d is negative (offer worse than fair): apply a penalty weighted by a disadvantageous inequality aversion parameter (alpha).\n\u2003\u2022 When d is positive (offer better than fair): optionally apply a (typically smaller) penalty weighted by an advantageous inequality aversion parameter (beta).\n\u2003\u2022 The final utility of accepting an offer, U_accept, is then given by the offered monetary reward less the fairness \u201cpenalty.\u201d\n\n3. Learnable Parameters and Their Roles:\n\u2003\u2022 alpha: disadvantageous inequality aversion parameter (expected to be relatively high if responders strongly dislike offers below the fair share).\n\u2003\u2022 beta: advantageous inequality aversion parameter (typically lower since being \u201cover\u2010rewarded\u201d is less aversive, but still may matter).\n\n4. Mapping to Observables:\n\u2003\u2022 The model uses the observable split_self, token_self, token_opp, and combined_earning from the dataset to compute the fair share.\n\u2003\u2022 The computed U_accept is a latent utility measure that explains the tendency to accept an offer (given that rejecting would have another utility that we do not model here).\n\nBelow is the formal specification.\n\n<MODEL>\nLet f = (token_self / (token_self + token_opp)) * combined_earning.\nLet d = split_self - f.\nThen, the utility of accepting an offer is defined as:\n\u2003\u2003U_accept = split_self - alpha * max(f - split_self, 0) - beta * max(split_self - f, 0).\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_accept\": {\n      \"description\": \"Utility of accepting an offer, integrating monetary reward and fairness deviation.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"split_self\": {\n      \"description\": \"Monetary share proposed for the participant (in \u00a3).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total pot (in \u00a3) available to be divided.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"alpha\": {\n      \"description\": \"Disadvantageous inequality aversion parameter, weighting penalty when the offer is below a fair share.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 20,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta\": {\n      \"description\": \"Advantageous inequality aversion parameter, weighting any penalty when the offer exceeds the fair share.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"f\": {\n      \"description\": \"Calculated fair share allocation based on token contributions.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"d\": {\n      \"description\": \"Fairness gap between the offered share and the fair share (split_self - f).\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<SUMMARY>\nThe model computes the responder\u2019s utility for accepting an offer as the proposed monetary share minus a fairness penalty. The fairness penalty is proportional to the deviation from a fair share\u2014calculated as the participant\u2019s tokens relative to the total tokens\u2014and is weighted differently when the offer is below (using parameter alpha) or above (using parameter beta) the fair share. Two learnable parameters with generous finite bounds capture these sensitivities.\n</SUMMARY>",
  "current_model": "Specification: Let f = (token_self / (token_self + token_opp)) * combined_earning.\nLet d = split_self - f.\nThen, the utility of accepting an offer is defined as:\n\u2003\u2003U_accept = split_self - alpha * max(f - split_self, 0) - beta * max(split_self - f, 0).\nSummary: The model computes the responder\u2019s utility for accepting an offer as the proposed monetary share minus a fairness penalty. The fairness penalty is proportional to the deviation from a fair share\u2014calculated as the participant\u2019s tokens relative to the total tokens\u2014and is weighted differently when the offer is below (using parameter alpha) or above (using parameter beta) the fair share. Two learnable parameters with generous finite bounds capture these sensitivities.",
  "simulation_code": "def simulate_model(trial_data, alpha=1, beta=1):\n    utility_values = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n        split_self = trial.get(\"split_self\", 0)\n\n        if token_self + token_opp ==0: #Handle division by zero\n            f = 0\n        else:\n            f = (token_self / (token_self + token_opp)) * combined_earning\n        d = split_self - f\n        u_accept = split_self - alpha * max(f - split_self, 0) - beta * max(split_self - f, 0)\n        utility_values.append(u_accept)\n    return utility_values",
  "fitting_results": [
    {
      "alpha": 8.313191680286849,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -26.75275981973131,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 1.8578664934349485,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -40.158182656122285,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 1.9687761758442062,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -36.03694468024822,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 2.2884573594406596,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -36.74773628239568,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 2.7828996589005346,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -32.80259521205491,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 1.3453075478030736,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -38.925172277157664,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 0.0,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -36.17417481852814,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 1.2861285516487309,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -39.16181597109101,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 0.0,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -36.17417481852814,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 2.989088093740124,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -32.89015891634472,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 2.7089096135234283,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -30.926254137168,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 7.131710858337997,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -27.004457253984157,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 2.9669353158483798,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -31.688507542353232,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 0.0,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -36.17417481852814,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 0.0,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -36.17417481852813,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 0.0,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -36.17417481852813,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 0.0,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -36.17417481852813,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 0.3865126666891592,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -38.516953502613845,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 0.35687509837455644,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -39.23710171189394,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 0.0,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -36.17417481852813,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 1.7560509636849981,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -39.68382760838664,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 0.45786273254218074,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -39.70359480518269,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 2.1913490026452735,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -41.691279989228015,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 1.5667268617572785,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -41.66967358344316,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 2.275875126200541,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -36.9938980000887,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 1.4452183513120471,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -40.55154288505365,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 1.646710652998236,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -38.019463413508554,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 5.519853022168086,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -23.251220356532507,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 0.3184120071029684,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -40.140036909201555,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 0.6982711813122259,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -43.46008331740351,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 0.0,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -36.17417481852814,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 8.313457729770624,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -26.752759828483825,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 1.731826898056087,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -46.30120528218552,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 2.480328872925492,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -37.69683907503167,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 0.0,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -36.17417481852813,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 1.024159346922047,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -41.06934872325582,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 1.1104990826889247,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -38.4339487128746,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 2.0908467612461035,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -37.81104287743609,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 1.136728932014232,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -43.63760600357735,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 0.09953772352994357,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -40.00146711379949,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 1.4195872964556866,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -42.781252365974005,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 4.602300387955145,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -32.12935249064345,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 0.0,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -38.87417481704688,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 1.4713208005012868,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -41.31407393555147,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 1.3635277696171966,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -39.89543240758521,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 0.7025875169192373,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -43.332551141791846,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 1.7560523535876293,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -39.683827611429734,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 2.0696239425833194,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -42.773073188900646,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 3.1302077186578843,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -32.563864999685116,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 1.069346176535144,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -50.487853925216655,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 0.8761654476418779,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -44.10137300107734,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 4.720459952371575,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -36.080228341512665,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 1.3696474506700824,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -44.21793832525226,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 0.9321815612285006,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -47.18772629313268,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 2.3401858283249655,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -43.253496619159925,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 4.187509212170624,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -26.362060064709976,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 4.384325398989739,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -29.276771008545694,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 0.0,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -42.999174815843354,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 6.640701103498858,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -28.77678505700015,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 0.39915711993312275,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -42.70356509416753,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 1.174153061456673,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -45.50603639059948,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 2.069617212564721,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -38.27307319713952,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 8.313130382077103,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -26.752759820148338,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 1.6392251612615771,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -45.717685234974425,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 4.720457941379813,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -29.780228388419715,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 1.5182004319652938,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -40.00439315557326,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 0.128820317632078,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -39.50005793490542,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 0.3949456187168219,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -41.30834396572854,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 1.2977793198002876,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -41.81802388405002,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 0.017105661412489415,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -41.272152605097226,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 20.0,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -16.739377558011945,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 5.048034736856653,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -33.87519044430284,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 1.6770133486878573,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -40.22092436095058,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 0.49964771622032916,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -43.094526084056966,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 1.3696517189555633,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -45.717938319025585,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 1.1314504517614148,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -40.797662632608194,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 0.0,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -38.9491748176861,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 7.7646737141112405,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -28.106980529689796,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 0.8170158148748576,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -50.40167845907475,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 8.313178778497171,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -26.752759819743357,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 1.2803361204213664,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -49.83305823198071,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 0.0,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -41.424174816385175,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 6.4989095000357455,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -26.34446341243461,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 1.7398504882712682,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -37.096017695201965,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 0.9227429816656623,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -53.17684513050807,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 8.313192364351455,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -26.452759819792707,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 0.9655670458895999,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -44.36459115650109,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 4.436694261513922,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -30.370991132635353,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 0.01709908182499441,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -38.27215260673641,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 1.6392254119117005,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -39.71768523908925,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 0.7373229855338539,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -48.30059661682155,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "alpha": {
        "r": 0.8520143560137372,
        "p": 2.682132730706282e-29
      },
      "beta": {
        "r": null,
        "p": null
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 83.73226512871645,
  "bic_error": "'ModelOutput' object has no attribute 'metrics'",
  "recovery_summary": "Parameter Recovery:\n- alpha: r = 0.852\n- beta: r = nan",
  "previous_models": [
    "Specification: Let f = (token_self / (token_self + token_opp)) * combined_earning.\nLet d = split_self - f.\nThen, the utility of accepting an offer is defined as:\n\u2003\u2003U_accept = split_self - alpha * max(f - split_self, 0) - beta * max(split_self - f, 0).\nSummary: The model computes the responder\u2019s utility for accepting an offer as the proposed monetary share minus a fairness penalty. The fairness penalty is proportional to the deviation from a fair share\u2014calculated as the participant\u2019s tokens relative to the total tokens\u2014and is weighted differently when the offer is below (using parameter alpha) or above (using parameter beta) the fair share. Two learnable parameters with generous finite bounds capture these sensitivities.\nBIC: 83.73226512871645\n\nParameter Recovery:\n- alpha: r = 0.852\n- beta: r = nan"
  ]
}