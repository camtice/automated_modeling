{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641",
  "output_description": "Design a computational model for the given task. The model should obtain the utility of accepting an offer, (not the probability of choosing an action).  Your goal is to eventually explore the entire space of possible explainations and mechanisms by which the observed behavior arises.\n\nYour model should use the given variables appropriately, but does not necessary need to use all or even most of the variables. Do not include the model for the utility of rejecting an offer. \n\nThe model should:\n1. Predict only responder behavior.\n2. Build on relevant psychological principles.\n3. Be considerate of high covariance between learnable parameters as the model will have to pass parameter recovery tests.\n4. Be applicable to the dataset given within the task description (i.e. the model should be able to be run using only the provided dataset structure).\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Use clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'. DO NOT USE 'lambda' AS A PARAMETER NAME.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641\n\nDesired Output Specification: Design a computational model for the given task. The model should obtain the utility of accepting an offer, (not the probability of choosing an action).  Your goal is to eventually explore the entire space of possible explainations and mechanisms by which the observed behavior arises.\n\nYour model should use the given variables appropriately, but does not necessary need to use all or even most of the variables. Do not include the model for the utility of rejecting an offer. \n\nThe model should:\n1. Predict only responder behavior.\n2. Build on relevant psychological principles.\n3. Be considerate of high covariance between learnable parameters as the model will have to pass parameter recovery tests.\n4. Be applicable to the dataset given within the task description (i.e. the model should be able to be run using only the provided dataset structure).\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Use clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'. DO NOT USE 'lambda' AS A PARAMETER NAME.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "Step-by-step reasoning:\n\n1. Key Psychological Mechanisms:\n\u2003\u2022 Fairness perception: Responders compare the received split (split_self) with what they believe is a \u201cfair share\u201d based on their contributions (token_self) relative to their opponent\u2019s (token_opp).\n\u2003\u2022 Inequity aversion: Responders suffer disutility when the accepted split deviates from the fair share, with possibly different sensitivities when receiving less (disadvantageous inequality) versus more (advantageous inequality) than fair.\n\n2. Mechanism Interactions:\n\u2003\u2022 The fair share is computed from the participant\u2019s contribution relative to the total contributions, scaled by the available combined earnings.\n\u2003\u2022 The deviation between the offered share and the fair share drives a penalty on utility. Two parameters (alpha for disadvantageous inequality and beta for advantageous inequality) determine how strongly deviations affect utility.\n\u2003\u2022 The resulting utility of accepting an offer is a balance between the monetary gain (split_self) and the fairness penalty.\n\n3. Mathematical Form:\n\u2003\u2022 Compute the fair share (F) as:\n\u2003\u2003F = combined_earning \u00d7 (token_self / (token_self + token_opp))\n\u2003\u2022 Define the utility for accepting an offer (U_accept) as:\n\u2003\u2003U_accept = split_self \u2013 alpha \u00d7 max{F \u2013 split_self, 0} \u2013 beta \u00d7 max{split_self \u2013 F, 0}\n\n4. Parameters Needed:\n\u2003\u2022 alpha: sensitivity to disadvantageous inequality (receiving less than fair share). Its bounds can be [0, 10].\n\u2003\u2022 beta: sensitivity to advantageous inequality (receiving more than fair share). Its bounds can be [0, 10].\n\n5. Mapping to Observed Variables:\n\u2003\u2022 split_self and combined_earning are observed in the dataset.\n\u2003\u2022 token_self and token_opp (from the pretask) are used to compute the fair share F.\n\u2003\u2022 The computed U_accept is compared indirectly to the observed acceptance behavior (and accepted_amount) to infer the underlying fairness motives.\n\nThe complete formal model specification is provided below.\n\n<MODEL>\nLet F = combined_earning \u00d7 (token_self / (token_self + token_opp))\nU_accept = split_self \u2013 alpha \u00d7 max(F \u2013 split_self, 0) \u2013 beta \u00d7 max(split_self \u2013 F, 0)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_accept\": {\n      \"description\": \"Utility of accepting an offer, computed as the monetary split reduced by penalties for fairness deviations.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"deterministic\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total amount of money available, calculated from the combined tokens found in the trial (each token is \u00a33).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"observed\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant, representing their contribution.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"observed\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent, representing the opponent's contribution.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"observed\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed monetary share for the participant (in \u00a3).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"observed\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"alpha\": {\n      \"description\": \"Learnable parameter representing sensitivity to disadvantageous inequality (when the received share is below the fair share).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0,\n          \"high\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta\": {\n      \"description\": \"Learnable parameter representing sensitivity to advantageous inequality (when the received share is above the fair share).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0,\n          \"high\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    }\n  }\n}\n</VARIABLES>\n\n<SUMMARY>\nThe model computes the utility of accepting an offer by comparing the allocated monetary split (split_self) against a fairness benchmark, which is computed as the proportional contribution (token_self relative to token_self plus token_opp) multiplied by the total available earnings (combined_earning). Two learnable sensitivity parameters (alpha and beta) penalize deviations from this fair share, with separate weights for disadvantageous versus advantageous deviations. This formalization captures fairness-driven decision processes in responder behavior.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['alpha', 'beta']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block:\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE UTLITY VALUES.\n                Model Specification:\n                Let F = combined_earning \u00d7 (token_self / (token_self + token_opp))\nU_accept = split_self \u2013 alpha \u00d7 max(F \u2013 split_self, 0) \u2013 beta \u00d7 max(split_self \u2013 F, 0)\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"U_accept\": {\n      \"description\": \"Utility of accepting an offer, computed as the monetary split reduced by penalties for fairness deviations.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"deterministic\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total amount of money available, calculated from the combined tokens found in the trial (each token is \\u00a33).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"observed\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant, representing their contribution.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"observed\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent, representing the opponent's contribution.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"observed\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed monetary share for the participant (in \\u00a3).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"observed\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"alpha\": {\n      \"description\": \"Learnable parameter representing sensitivity to disadvantageous inequality (when the received share is below the fair share).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0,\n          \"high\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta\": {\n      \"description\": \"Learnable parameter representing sensitivity to advantageous inequality (when the received share is above the fair share).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0,\n          \"high\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641\n\n                ",
      "output": "```python\nimport json\nimport math\n\ndef simulate_model(trial_data, alpha=1, beta=1):\n    model_predictions = []\n    for trial in trial_data:\n        combined_earning = trial.get(\"combined_earning\", 0)\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        split_self = trial.get(\"split_self\", 0)\n\n        if token_self + token_opp == 0: #avoid division by zero\n            F = 0\n        else:\n            F = combined_earning * (token_self / (token_self + token_opp))\n\n        U_accept = split_self - alpha * max(F - split_self, 0) - beta * max(split_self - F, 0)\n        model_predictions.append(U_accept)\n    return model_predictions\n\n# Example usage (replace with your actual data loading)\ndata_json = '[{\"combined_earning\": 10, \"token_self\": 5, \"token_opp\": 5, \"split_self\": 5}, {\"combined_earning\": 12, \"token_self\": 2, \"token_opp\": 10, \"split_self\": 2}]'\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data, alpha=2, beta=1)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n\n```"
    }
  ],
  "learnable_parameters": {
    "alpha": {
      "description": "Learnable parameter representing sensitivity to disadvantageous inequality (when the received share is below the fair share).",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0,
          "high": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "beta": {
      "description": "Learnable parameter representing sensitivity to advantageous inequality (when the received share is above the fair share).",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0,
          "high": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "Let F = combined_earning \u00d7 (token_self / (token_self + token_opp))\nU_accept = split_self \u2013 alpha \u00d7 max(F \u2013 split_self, 0) \u2013 beta \u00d7 max(split_self \u2013 F, 0)",
  "variable_descriptions": {
    "U_accept": {
      "description": "Utility of accepting an offer, computed as the monetary split reduced by penalties for fairness deviations.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "deterministic",
        "parameters": {}
      },
      "learnable": false,
      "source": "calculated"
    },
    "combined_earning": {
      "description": "Total amount of money available, calculated from the combined tokens found in the trial (each token is \u00a33).",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "observed",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Number of tokens found by the participant, representing their contribution.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "observed",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent, representing the opponent's contribution.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "observed",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "split_self": {
      "description": "Proposed monetary share for the participant (in \u00a3).",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "observed",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "alpha": {
      "description": "Learnable parameter representing sensitivity to disadvantageous inequality (when the received share is below the fair share).",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0,
          "high": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "beta": {
      "description": "Learnable parameter representing sensitivity to advantageous inequality (when the received share is above the fair share).",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0,
          "high": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_summary": "The model computes the utility of accepting an offer by comparing the allocated monetary split (split_self) against a fairness benchmark, which is computed as the proportional contribution (token_self relative to token_self plus token_opp) multiplied by the total available earnings (combined_earning). Two learnable sensitivity parameters (alpha and beta) penalize deviations from this fair share, with separate weights for disadvantageous versus advantageous deviations. This formalization captures fairness-driven decision processes in responder behavior.",
  "full_reasoning": "Step-by-step reasoning:\n\n1. Key Psychological Mechanisms:\n\u2003\u2022 Fairness perception: Responders compare the received split (split_self) with what they believe is a \u201cfair share\u201d based on their contributions (token_self) relative to their opponent\u2019s (token_opp).\n\u2003\u2022 Inequity aversion: Responders suffer disutility when the accepted split deviates from the fair share, with possibly different sensitivities when receiving less (disadvantageous inequality) versus more (advantageous inequality) than fair.\n\n2. Mechanism Interactions:\n\u2003\u2022 The fair share is computed from the participant\u2019s contribution relative to the total contributions, scaled by the available combined earnings.\n\u2003\u2022 The deviation between the offered share and the fair share drives a penalty on utility. Two parameters (alpha for disadvantageous inequality and beta for advantageous inequality) determine how strongly deviations affect utility.\n\u2003\u2022 The resulting utility of accepting an offer is a balance between the monetary gain (split_self) and the fairness penalty.\n\n3. Mathematical Form:\n\u2003\u2022 Compute the fair share (F) as:\n\u2003\u2003F = combined_earning \u00d7 (token_self / (token_self + token_opp))\n\u2003\u2022 Define the utility for accepting an offer (U_accept) as:\n\u2003\u2003U_accept = split_self \u2013 alpha \u00d7 max{F \u2013 split_self, 0} \u2013 beta \u00d7 max{split_self \u2013 F, 0}\n\n4. Parameters Needed:\n\u2003\u2022 alpha: sensitivity to disadvantageous inequality (receiving less than fair share). Its bounds can be [0, 10].\n\u2003\u2022 beta: sensitivity to advantageous inequality (receiving more than fair share). Its bounds can be [0, 10].\n\n5. Mapping to Observed Variables:\n\u2003\u2022 split_self and combined_earning are observed in the dataset.\n\u2003\u2022 token_self and token_opp (from the pretask) are used to compute the fair share F.\n\u2003\u2022 The computed U_accept is compared indirectly to the observed acceptance behavior (and accepted_amount) to infer the underlying fairness motives.\n\nThe complete formal model specification is provided below.\n\n<MODEL>\nLet F = combined_earning \u00d7 (token_self / (token_self + token_opp))\nU_accept = split_self \u2013 alpha \u00d7 max(F \u2013 split_self, 0) \u2013 beta \u00d7 max(split_self \u2013 F, 0)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_accept\": {\n      \"description\": \"Utility of accepting an offer, computed as the monetary split reduced by penalties for fairness deviations.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"deterministic\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total amount of money available, calculated from the combined tokens found in the trial (each token is \u00a33).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"observed\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant, representing their contribution.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"observed\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent, representing the opponent's contribution.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"observed\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed monetary share for the participant (in \u00a3).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"observed\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"alpha\": {\n      \"description\": \"Learnable parameter representing sensitivity to disadvantageous inequality (when the received share is below the fair share).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0,\n          \"high\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta\": {\n      \"description\": \"Learnable parameter representing sensitivity to advantageous inequality (when the received share is above the fair share).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0,\n          \"high\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    }\n  }\n}\n</VARIABLES>\n\n<SUMMARY>\nThe model computes the utility of accepting an offer by comparing the allocated monetary split (split_self) against a fairness benchmark, which is computed as the proportional contribution (token_self relative to token_self plus token_opp) multiplied by the total available earnings (combined_earning). Two learnable sensitivity parameters (alpha and beta) penalize deviations from this fair share, with separate weights for disadvantageous versus advantageous deviations. This formalization captures fairness-driven decision processes in responder behavior.\n</SUMMARY>",
  "current_model": "Specification: Let F = combined_earning \u00d7 (token_self / (token_self + token_opp))\nU_accept = split_self \u2013 alpha \u00d7 max(F \u2013 split_self, 0) \u2013 beta \u00d7 max(split_self \u2013 F, 0)\nSummary: The model computes the utility of accepting an offer by comparing the allocated monetary split (split_self) against a fairness benchmark, which is computed as the proportional contribution (token_self relative to token_self plus token_opp) multiplied by the total available earnings (combined_earning). Two learnable sensitivity parameters (alpha and beta) penalize deviations from this fair share, with separate weights for disadvantageous versus advantageous deviations. This formalization captures fairness-driven decision processes in responder behavior.",
  "simulation_code": "def simulate_model(trial_data, alpha=1, beta=1):\n    model_predictions = []\n    for trial in trial_data:\n        combined_earning = trial.get(\"combined_earning\", 0)\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        split_self = trial.get(\"split_self\", 0)\n\n        if token_self + token_opp == 0: #avoid division by zero\n            F = 0\n        else:\n            F = combined_earning * (token_self / (token_self + token_opp))\n\n        U_accept = split_self - alpha * max(F - split_self, 0) - beta * max(split_self - F, 0)\n        model_predictions.append(U_accept)\n    return model_predictions",
  "fitting_results": [
    {
      "alpha": 8.31316457846239,
      "beta": 5.9953542293362885,
      "success": true,
      "log_likelihood": -26.529237700599914,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 1.857860456017517,
      "beta": 5.330406330788396,
      "success": true,
      "log_likelihood": -40.128810685911695,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 1.9687100447101076,
      "beta": 5.330154802844438,
      "success": true,
      "log_likelihood": -36.007572744896365,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 2.288464655439573,
      "beta": 5.330373499078239,
      "success": true,
      "log_likelihood": -36.71836431253793,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 2.782872999741621,
      "beta": 5.330383099966126,
      "success": true,
      "log_likelihood": -32.77322324125194,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 1.3453082123662026,
      "beta": 5.330416547807163,
      "success": true,
      "log_likelihood": -38.895800306794875,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 0.0,
      "beta": 5.330486663350669,
      "success": true,
      "log_likelihood": -36.144802849494475,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 1.2861284238166406,
      "beta": 5.330413273886868,
      "success": true,
      "log_likelihood": -39.13244400073057,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 0.0,
      "beta": 5.330405633950247,
      "success": true,
      "log_likelihood": -36.144802848189244,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 2.989093187497603,
      "beta": 5.3303666389346285,
      "success": true,
      "log_likelihood": -32.860786946636466,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 2.7089098179391717,
      "beta": 5.330412735680379,
      "success": true,
      "log_likelihood": -30.89688216680831,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 7.1317133206002294,
      "beta": 5.995302287373441,
      "success": true,
      "log_likelihood": -26.780935134239765,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 2.9669528823535907,
      "beta": 5.330383009486761,
      "success": true,
      "log_likelihood": -31.65913557266742,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 0.0,
      "beta": 5.330393187591481,
      "success": true,
      "log_likelihood": -36.144802848288954,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 0.0,
      "beta": 5.33041026459407,
      "success": true,
      "log_likelihood": -36.14480284817255,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 0.0,
      "beta": 5.3304267411835475,
      "success": true,
      "log_likelihood": -36.1448028482029,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 0.0,
      "beta": 5.330408841931288,
      "success": true,
      "log_likelihood": -36.1448028481765,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 0.3865126307343035,
      "beta": 5.330414696617501,
      "success": true,
      "log_likelihood": -38.48758153225261,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 0.35687148415229397,
      "beta": 5.330375242783922,
      "success": true,
      "log_likelihood": -39.20772974203975,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 0.0,
      "beta": 5.330416099689994,
      "success": true,
      "log_likelihood": -36.14480284816727,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 1.7560544582502369,
      "beta": 5.330393995356178,
      "success": true,
      "log_likelihood": -39.654455638185965,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 0.4578677161742136,
      "beta": 5.33039098691081,
      "success": true,
      "log_likelihood": -39.67422283518708,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 2.191348805836714,
      "beta": 5.33041237960845,
      "success": true,
      "log_likelihood": -41.66190801886899,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 1.5667263249676247,
      "beta": 5.3303915767160035,
      "success": true,
      "log_likelihood": -41.640301613247196,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 2.2758751105979176,
      "beta": 5.330414110807945,
      "success": true,
      "log_likelihood": -36.96452602972767,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 1.445218327171843,
      "beta": 5.330420363214183,
      "success": true,
      "log_likelihood": -40.52217091470021,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 1.6466963150600962,
      "beta": 5.330339816495688,
      "success": true,
      "log_likelihood": -37.9900914436509,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 5.519854169793378,
      "beta": 5.330424886348265,
      "success": true,
      "log_likelihood": -23.22184838619811,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 0.3184109347122459,
      "beta": 5.3303808376354995,
      "success": true,
      "log_likelihood": -40.110664939147995,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 0.698270745689472,
      "beta": 5.330406806456907,
      "success": true,
      "log_likelihood": -43.43071134706156,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 0.0,
      "beta": 5.330417386476487,
      "success": true,
      "log_likelihood": -36.14480284816848,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 8.313183973558413,
      "beta": 5.995310517769601,
      "success": true,
      "log_likelihood": -26.529237700002046,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 1.7318229422435205,
      "beta": 5.330401841939929,
      "success": true,
      "log_likelihood": -46.271833311935474,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 2.480326608644698,
      "beta": 5.330407960930526,
      "success": true,
      "log_likelihood": -37.66746710469196,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 0.0,
      "beta": 5.330412934530646,
      "success": true,
      "log_likelihood": -36.144802848167956,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 1.0241595827756653,
      "beta": 5.330413685446021,
      "success": true,
      "log_likelihood": -41.03997675289499,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 1.1105017999036422,
      "beta": 5.330420249125853,
      "success": true,
      "log_likelihood": -38.40457674255134,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 2.090848801308234,
      "beta": 5.330409097798068,
      "success": true,
      "log_likelihood": -37.781670907097045,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 1.1367294082001282,
      "beta": 5.330414000173902,
      "success": true,
      "log_likelihood": -43.608234033217705,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 0.09953769197406365,
      "beta": 5.330406189055646,
      "success": true,
      "log_likelihood": -39.97209514345787,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 1.4195871465110015,
      "beta": 5.330414932604571,
      "success": true,
      "log_likelihood": -42.751880395613306,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 4.602318055793923,
      "beta": 5.3304657963096655,
      "success": true,
      "log_likelihood": -32.09998052122656,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 0.0,
      "beta": 5.330422612498171,
      "success": true,
      "log_likelihood": -38.84480284670089,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 1.4713144140354417,
      "beta": 5.3304373299593815,
      "success": true,
      "log_likelihood": -41.28470196556684,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 1.3635175146627077,
      "beta": 5.330456751425806,
      "success": true,
      "log_likelihood": -39.866060438356854,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 0.702584432697133,
      "beta": 5.330409612440805,
      "success": true,
      "log_likelihood": -43.30317917152829,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 1.7560508552917284,
      "beta": 5.330411452112073,
      "success": true,
      "log_likelihood": -39.654455641066576,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 2.0696197007980692,
      "beta": 5.330413102535731,
      "success": true,
      "log_likelihood": -42.74370121849458,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 3.13020839797883,
      "beta": 5.330409417462346,
      "success": true,
      "log_likelihood": -32.534493029334044,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 1.0693313338716504,
      "beta": 5.995352995429573,
      "success": true,
      "log_likelihood": -50.264331807622256,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 0.8761623818333871,
      "beta": 5.3304103265672556,
      "success": true,
      "log_likelihood": -44.07200103079688,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 4.720420208207285,
      "beta": 5.995146087161755,
      "success": true,
      "log_likelihood": -35.85670622739635,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 1.3696368369110568,
      "beta": 5.330345521511905,
      "success": true,
      "log_likelihood": -44.188566357367876,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 0.9321822411455487,
      "beta": 5.995287958892381,
      "success": true,
      "log_likelihood": -46.96420417341646,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 2.340189854037877,
      "beta": 5.330443203853291,
      "success": true,
      "log_likelihood": -43.22412464913577,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 4.18750898405841,
      "beta": 5.330410680235,
      "success": true,
      "log_likelihood": -26.332688094353497,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 4.384329178262206,
      "beta": 5.330419039974198,
      "success": true,
      "log_likelihood": -29.247399038197422,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 0.0,
      "beta": 5.330413893337635,
      "success": true,
      "log_likelihood": -42.969802845482434,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 6.640709992125646,
      "beta": 5.995302453430163,
      "success": true,
      "log_likelihood": -28.553262937188702,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 0.3991571388627488,
      "beta": 5.330413117308836,
      "success": true,
      "log_likelihood": -42.67419312380718,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 1.1741524436489714,
      "beta": 5.3304034225156425,
      "success": true,
      "log_likelihood": -45.47666442027542,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 2.069614947138232,
      "beta": 5.330385705297887,
      "success": true,
      "log_likelihood": -38.24370122706701,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 8.313186351368863,
      "beta": 5.995295689202088,
      "success": true,
      "log_likelihood": -26.529237699989217,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 1.6392280043398755,
      "beta": 5.330404362552894,
      "success": true,
      "log_likelihood": -45.68831326467074,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 4.720457355957196,
      "beta": 5.330379737474361,
      "success": true,
      "log_likelihood": -29.75085641837945,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 1.5181988067653143,
      "beta": 5.330413631696834,
      "success": true,
      "log_likelihood": -39.97502118525444,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 0.12882252628311916,
      "beta": 5.33040448588251,
      "success": true,
      "log_likelihood": -39.470685964599944,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 0.3949394681427548,
      "beta": 5.330342581088105,
      "success": true,
      "log_likelihood": -41.27897199705202,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 1.2977808867882275,
      "beta": 5.330416298023337,
      "success": true,
      "log_likelihood": -41.788651913675764,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 0.017099162544723358,
      "beta": 5.33041561517323,
      "success": true,
      "log_likelihood": -41.2427806344333,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 10.0,
      "beta": 5.330417029754951,
      "success": true,
      "log_likelihood": -18.451448035076396,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 5.048030280438985,
      "beta": 5.995261949019777,
      "success": true,
      "log_likelihood": -33.65166832487677,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 1.6770218265867773,
      "beta": 5.330423961753699,
      "success": true,
      "log_likelihood": -40.19155239094743,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 0.49963808675732085,
      "beta": 5.330439791950977,
      "success": true,
      "log_likelihood": -43.065154114680624,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 1.3695982769346777,
      "beta": 7.746081029216818,
      "success": true,
      "log_likelihood": -44.71262484382004,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 1.1314558883235113,
      "beta": 5.330372130166696,
      "success": true,
      "log_likelihood": -40.76829066292369,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 0.0,
      "beta": 5.33041297699249,
      "success": true,
      "log_likelihood": -38.91980284732587,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 7.764763184113343,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -25.86510863655384,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 0.8170091108638883,
      "beta": 5.330405289780136,
      "success": true,
      "log_likelihood": -50.37230648911412,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 8.313186333364635,
      "beta": 5.995328172831431,
      "success": true,
      "log_likelihood": -26.529237700123787,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 1.2803358748591183,
      "beta": 5.330437292241042,
      "success": true,
      "log_likelihood": -49.803686261746904,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 0.0,
      "beta": 5.330414885041633,
      "success": true,
      "log_likelihood": -41.394802846023964,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 6.498900637795928,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -24.102591520300724,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 1.739851098819077,
      "beta": 5.330410116103669,
      "success": true,
      "log_likelihood": -37.066645724847,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 0.9227500992355433,
      "beta": 5.330407348797313,
      "success": true,
      "log_likelihood": -53.14747316057366,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 8.313076676461355,
      "beta": 5.330425736027552,
      "success": true,
      "log_likelihood": -26.423387850992608,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 0.9655688816688998,
      "beta": 5.330375065965776,
      "success": true,
      "log_likelihood": -44.33521918655909,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 4.436688612317059,
      "beta": 7.7470244465141676,
      "success": true,
      "log_likelihood": -29.36567757059642,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 0.01709825324589033,
      "beta": 5.330410539724251,
      "success": true,
      "log_likelihood": -38.24278063638479,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 1.6392255434338932,
      "beta": 5.330415850234427,
      "success": true,
      "log_likelihood": -39.68831326872812,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 0.737322771119693,
      "beta": 5.330408510454153,
      "success": true,
      "log_likelihood": -48.271224646471424,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "alpha": {
        "r": 0.9414220861337868,
        "p": 4.652846365918811e-48
      },
      "beta": {
        "r": 0.35299621126859654,
        "p": 0.00031544824059150746
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 83.52897301360112,
  "bic_error": "'ModelOutput' object has no attribute 'metrics'",
  "recovery_summary": "Parameter Recovery:\n- alpha: r = 0.941\n- beta: r = 0.353",
  "previous_models": [
    "Specification: Let F = combined_earning \u00d7 (token_self / (token_self + token_opp))\nU_accept = split_self \u2013 alpha \u00d7 max(F \u2013 split_self, 0) \u2013 beta \u00d7 max(split_self \u2013 F, 0)\nSummary: The model computes the utility of accepting an offer by comparing the allocated monetary split (split_self) against a fairness benchmark, which is computed as the proportional contribution (token_self relative to token_self plus token_opp) multiplied by the total available earnings (combined_earning). Two learnable sensitivity parameters (alpha and beta) penalize deviations from this fair share, with separate weights for disadvantageous versus advantageous deviations. This formalization captures fairness-driven decision processes in responder behavior.\nBIC: 83.52897301360112\n\nParameter Recovery:\n- alpha: r = 0.941\n- beta: r = 0.353"
  ]
}