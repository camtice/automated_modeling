{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641",
  "output_description": "Design a computational model for the given task. The model should obtain the utility of accepting an offer, (not the probability of choosing an action).  Your goal is to eventually explore the entire space of possible explainations and mechanisms by which the observed behavior arises.\n\nYour model should use the given variables appropriately, but does not necessary need to use all or even most of the variables. Do not include the model for the utility of rejecting an offer. \n\nThe model should:\n1. Predict only responder behavior.\n2. Build on relevant psychological principles.\n3. Be considerate of high covariance between learnable parameters as the model will have to pass parameter recovery tests.\n4. Be applicable to the dataset given within the task description (i.e. the model should be able to be run using only the provided dataset structure).\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Use clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'. DO NOT USE 'lambda' AS A PARAMETER NAME.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641\n\nDesired Output Specification: Design a computational model for the given task. The model should obtain the utility of accepting an offer, (not the probability of choosing an action).  Your goal is to eventually explore the entire space of possible explainations and mechanisms by which the observed behavior arises.\n\nYour model should use the given variables appropriately, but does not necessary need to use all or even most of the variables. Do not include the model for the utility of rejecting an offer. \n\nThe model should:\n1. Predict only responder behavior.\n2. Build on relevant psychological principles.\n3. Be considerate of high covariance between learnable parameters as the model will have to pass parameter recovery tests.\n4. Be applicable to the dataset given within the task description (i.e. the model should be able to be run using only the provided dataset structure).\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Use clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'. DO NOT USE 'lambda' AS A PARAMETER NAME.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "Below is the step\u2010by\u2010step reasoning and the resulting model specification.\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\nStep\u2010by\u2010step reasoning:\n\n1. Key Psychological Mechanisms:\n\u2003\u2022 Responders gain direct monetary benefits when accepting an offer.\n\u2003\u2022 They have a notion of \u201cdesert\u201d based on their pre\u2010task tokens relative to the opponent\u2019s tokens. This \u201cdesert\u201d represents what they perceive as a fair share of the combined earning.\n\u2003\u2022 An offer that falls short of one\u2019s \u201cdesert\u201d is penalized in value according to a fairness sensitivity (inequity aversion) mechanism.\n\u2003\u2022 The model ignores any potential utility of rejection and focuses solely on the utility of accepting an offer.\n\n2. How these mechanisms interact:\n\u2003\u2022 The responder\u2019s utility of accepting an offer is increasing in the actual offered monetary share (split_self) but is decreased when the share is lower than what is \u201cdeserved\u201d (computed as token_self divided by the total tokens multiplied by the combined_earning).\n\u2003\u2022 A fairness parameter scales the psychological loss when the offer undercuts the respondent\u2019s computed \u201cdesert.\u201d\n\n3. Mathematical form to capture interactions:\n\u2003\u2022 Let desert = (token_self / (token_self + token_opp)) \u00d7 combined_earning.\n\u2003\u2022 Then, the penalty is the difference between desert and the actually offered share (if positive).\n\u2003\u2022 The overall utility is linear in money (offer multiplied by a money sensitivity) plus a bias intercept, with a penalty term applied if the offer is less than one\u2019s calculated desert.\n\n4. Learnable parameters:\n\u2003\u2022 An intercept (bias) parameter.\n\u2003\u2022 A money weight (marginal utility of money taken from the offer).\n\u2003\u2022 A fairness weight (sensitivity to receiving less than one\u2019s desert).\n\u2003\u2022 All are given generous but finite bounds.\n\n5. Mapping to observed behavior:\n\u2003\u2022 split_self, token_self, token_opp, and combined_earning are observed in the dataset.\n\u2003\u2022 The model computes a \u201cdesert\u201d based on tokens.\n\u2003\u2022 The difference between the computed desert and the offered share affects the utility of accepting. A lower-than-desert offer yields a utility penalty weighted by the fairness parameter.\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\nThe formal model specification is provided below.\n\n<MODEL>\nU_accept = intercept + money_weight * split_self - fairness_weight * max((token_self / (token_self + token_opp)) * combined_earning - split_self, 0)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_accept\": {\n      \"description\": \"Utility for accepting the offer given by the responder.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"intercept\": {\n      \"description\": \"Baseline bias in the utility for accepting an offer.\",\n      \"range\": {\n        \"min\": -100,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"money_weight\": {\n      \"description\": \"Marginal utility weight attributed to the monetary offer (split_self).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"fairness_weight\": {\n      \"description\": \"Fairness sensitivity parameter that scales the penalty when the offer is less than the deserved amount.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"The monetary share proposed for the participant (responder) in the current trial.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"combined_earning\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"The number of tokens found by the participant that indicates their contribution (used to compute fairness desert).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"positive integer\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"The number of tokens found by the opponent (used to compute fairness desert).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"positive integer\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total amount of money earned in the trial, determined by the combined tokens (each token is \u00a33).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"in accordance with tokens\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<SUMMARY>\nThe model computes the utility of accepting an offer for responders by linearly weighting the proposed share with a money sensitivity parameter and applying a fairness penalty for offers that fall below a \u201cdesert\u201d computed from the participant\u2019s relative token contribution. The model includes an intercept and two learnable parameters with generous bounds, ensuring applicability to the provided dataset while accounting for fairness-based psychological mechanisms.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['intercept', 'money_weight', 'fairness_weight']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block:\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE UTLITY VALUES.\n                Model Specification:\n                U_accept = intercept + money_weight * split_self - fairness_weight * max((token_self / (token_self + token_opp)) * combined_earning - split_self, 0)\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"U_accept\": {\n      \"description\": \"Utility for accepting the offer given by the responder.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"intercept\": {\n      \"description\": \"Baseline bias in the utility for accepting an offer.\",\n      \"range\": {\n        \"min\": -100,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"money_weight\": {\n      \"description\": \"Marginal utility weight attributed to the monetary offer (split_self).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"fairness_weight\": {\n      \"description\": \"Fairness sensitivity parameter that scales the penalty when the offer is less than the deserved amount.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"The monetary share proposed for the participant (responder) in the current trial.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"combined_earning\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"The number of tokens found by the participant that indicates their contribution (used to compute fairness desert).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"positive integer\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"The number of tokens found by the opponent (used to compute fairness desert).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"positive integer\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total amount of money earned in the trial, determined by the combined tokens (each token is \\u00a33).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"in accordance with tokens\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641\n\n                ",
      "output": "```python\nimport json\nimport math\n\ndef simulate_model(trial_data, intercept=0, money_weight=1, fairness_weight=1):\n    model_predictions = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0)\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n\n        if token_self + token_opp == 0: #Avoid division by zero\n            desert = 0\n        else:\n            desert = (token_self / (token_self + token_opp)) * combined_earning\n\n        fairness_penalty = max(desert - split_self, 0)\n        \n        utility = intercept + (money_weight * split_self) - (fairness_weight * fairness_penalty)\n        model_predictions.append(utility)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = \"\"\"\n[\n  {\"ID\": 1, \"group\": \"A\", \"trial_number\": 1, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 2, \"token_self\": 5, \"combined_earning\": 21, \"split_opp\": 9.0, \"split_self\": 12.0, \"splitperc_opp\": 43, \"splitperc_self\": 57, \"accept\": 1.0, \"accepted_amount\": 12.0, \"accepted_perc\": 57.0, \"proposed_perc\": 57.0, \"proposed_amount\": 12.0},\n  {\"ID\": 2, \"group\": \"A\", \"trial_number\": 2, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 8, \"token_self\": 2, \"combined_earning\": 30, \"split_opp\": 21.0, \"split_self\": 9.0, \"splitperc_opp\": 70, \"splitperc_self\": 30, \"accept\": 1.0, \"accepted_amount\": 9.0, \"accepted_perc\": 30.0, \"proposed_perc\": 30.0, \"proposed_amount\": 9.0}\n]\n\"\"\"\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n```"
    }
  ],
  "learnable_parameters": {
    "intercept": {
      "description": "Baseline bias in the utility for accepting an offer.",
      "range": {
        "min": -100,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "money_weight": {
      "description": "Marginal utility weight attributed to the monetary offer (split_self).",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "fairness_weight": {
      "description": "Fairness sensitivity parameter that scales the penalty when the offer is less than the deserved amount.",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "U_accept = intercept + money_weight * split_self - fairness_weight * max((token_self / (token_self + token_opp)) * combined_earning - split_self, 0)",
  "variable_descriptions": {
    "U_accept": {
      "description": "Utility for accepting the offer given by the responder.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "intercept": {
      "description": "Baseline bias in the utility for accepting an offer.",
      "range": {
        "min": -100,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "money_weight": {
      "description": "Marginal utility weight attributed to the monetary offer (split_self).",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "fairness_weight": {
      "description": "Fairness sensitivity parameter that scales the penalty when the offer is less than the deserved amount.",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "split_self": {
      "description": "The monetary share proposed for the participant (responder) in the current trial.",
      "range": {
        "min": 0,
        "max": "combined_earning",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "The number of tokens found by the participant that indicates their contribution (used to compute fairness desert).",
      "range": {
        "min": 0,
        "max": "positive integer",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "The number of tokens found by the opponent (used to compute fairness desert).",
      "range": {
        "min": 0,
        "max": "positive integer",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "combined_earning": {
      "description": "Total amount of money earned in the trial, determined by the combined tokens (each token is \u00a33).",
      "range": {
        "min": 0,
        "max": "in accordance with tokens",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    }
  },
  "model_summary": "The model computes the utility of accepting an offer for responders by linearly weighting the proposed share with a money sensitivity parameter and applying a fairness penalty for offers that fall below a \u201cdesert\u201d computed from the participant\u2019s relative token contribution. The model includes an intercept and two learnable parameters with generous bounds, ensuring applicability to the provided dataset while accounting for fairness-based psychological mechanisms.",
  "full_reasoning": "Below is the step\u2010by\u2010step reasoning and the resulting model specification.\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\nStep\u2010by\u2010step reasoning:\n\n1. Key Psychological Mechanisms:\n\u2003\u2022 Responders gain direct monetary benefits when accepting an offer.\n\u2003\u2022 They have a notion of \u201cdesert\u201d based on their pre\u2010task tokens relative to the opponent\u2019s tokens. This \u201cdesert\u201d represents what they perceive as a fair share of the combined earning.\n\u2003\u2022 An offer that falls short of one\u2019s \u201cdesert\u201d is penalized in value according to a fairness sensitivity (inequity aversion) mechanism.\n\u2003\u2022 The model ignores any potential utility of rejection and focuses solely on the utility of accepting an offer.\n\n2. How these mechanisms interact:\n\u2003\u2022 The responder\u2019s utility of accepting an offer is increasing in the actual offered monetary share (split_self) but is decreased when the share is lower than what is \u201cdeserved\u201d (computed as token_self divided by the total tokens multiplied by the combined_earning).\n\u2003\u2022 A fairness parameter scales the psychological loss when the offer undercuts the respondent\u2019s computed \u201cdesert.\u201d\n\n3. Mathematical form to capture interactions:\n\u2003\u2022 Let desert = (token_self / (token_self + token_opp)) \u00d7 combined_earning.\n\u2003\u2022 Then, the penalty is the difference between desert and the actually offered share (if positive).\n\u2003\u2022 The overall utility is linear in money (offer multiplied by a money sensitivity) plus a bias intercept, with a penalty term applied if the offer is less than one\u2019s calculated desert.\n\n4. Learnable parameters:\n\u2003\u2022 An intercept (bias) parameter.\n\u2003\u2022 A money weight (marginal utility of money taken from the offer).\n\u2003\u2022 A fairness weight (sensitivity to receiving less than one\u2019s desert).\n\u2003\u2022 All are given generous but finite bounds.\n\n5. Mapping to observed behavior:\n\u2003\u2022 split_self, token_self, token_opp, and combined_earning are observed in the dataset.\n\u2003\u2022 The model computes a \u201cdesert\u201d based on tokens.\n\u2003\u2022 The difference between the computed desert and the offered share affects the utility of accepting. A lower-than-desert offer yields a utility penalty weighted by the fairness parameter.\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\nThe formal model specification is provided below.\n\n<MODEL>\nU_accept = intercept + money_weight * split_self - fairness_weight * max((token_self / (token_self + token_opp)) * combined_earning - split_self, 0)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_accept\": {\n      \"description\": \"Utility for accepting the offer given by the responder.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"intercept\": {\n      \"description\": \"Baseline bias in the utility for accepting an offer.\",\n      \"range\": {\n        \"min\": -100,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"money_weight\": {\n      \"description\": \"Marginal utility weight attributed to the monetary offer (split_self).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"fairness_weight\": {\n      \"description\": \"Fairness sensitivity parameter that scales the penalty when the offer is less than the deserved amount.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"The monetary share proposed for the participant (responder) in the current trial.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"combined_earning\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"The number of tokens found by the participant that indicates their contribution (used to compute fairness desert).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"positive integer\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"The number of tokens found by the opponent (used to compute fairness desert).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"positive integer\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total amount of money earned in the trial, determined by the combined tokens (each token is \u00a33).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"in accordance with tokens\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<SUMMARY>\nThe model computes the utility of accepting an offer for responders by linearly weighting the proposed share with a money sensitivity parameter and applying a fairness penalty for offers that fall below a \u201cdesert\u201d computed from the participant\u2019s relative token contribution. The model includes an intercept and two learnable parameters with generous bounds, ensuring applicability to the provided dataset while accounting for fairness-based psychological mechanisms.\n</SUMMARY>",
  "current_model": "Specification: U_accept = intercept + money_weight * split_self - fairness_weight * max((token_self / (token_self + token_opp)) * combined_earning - split_self, 0)\nSummary: The model computes the utility of accepting an offer for responders by linearly weighting the proposed share with a money sensitivity parameter and applying a fairness penalty for offers that fall below a \u201cdesert\u201d computed from the participant\u2019s relative token contribution. The model includes an intercept and two learnable parameters with generous bounds, ensuring applicability to the provided dataset while accounting for fairness-based psychological mechanisms.",
  "simulation_code": "def simulate_model(trial_data, intercept=0, money_weight=1, fairness_weight=1):\n    model_predictions = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0)\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n\n        if token_self + token_opp == 0: #Avoid division by zero\n            desert = 0\n        else:\n            desert = (token_self / (token_self + token_opp)) * combined_earning\n\n        fairness_penalty = max(desert - split_self, 0)\n        \n        utility = intercept + (money_weight * split_self) - (fairness_weight * fairness_penalty)\n        model_predictions.append(utility)\n    return model_predictions",
  "fitting_results": [
    {
      "intercept": -9.695665386798554,
      "money_weight": 1.0895328018266845,
      "fairness_weight": 1.0940790440029142,
      "success": true,
      "log_likelihood": -8.950643850598476,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "intercept": -0.51558601601381,
      "money_weight": 0.0357487751828714,
      "fairness_weight": 0.4771949532471339,
      "success": true,
      "log_likelihood": -32.064805526444914,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "intercept": 0.1911173935350998,
      "money_weight": 0.0,
      "fairness_weight": 0.7188188767933021,
      "success": true,
      "log_likelihood": -31.566194339477892,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "intercept": -3.214761846830051,
      "money_weight": 0.515873670177487,
      "fairness_weight": 0.40986522037913825,
      "success": true,
      "log_likelihood": -28.769228160897125,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "intercept": 0.2288035103196745,
      "money_weight": 0.0,
      "fairness_weight": 1.183616352687299,
      "success": true,
      "log_likelihood": -27.631155639541525,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "intercept": 0.19541982114382087,
      "money_weight": 0.021624686080486386,
      "fairness_weight": 0.3641539814357649,
      "success": true,
      "log_likelihood": -34.40011317310772,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "intercept": 1.7509657428045449,
      "money_weight": 0.0,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -30.895672458845073,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "intercept": 0.4884279975348777,
      "money_weight": 0.0,
      "fairness_weight": 0.38818770692543053,
      "success": true,
      "log_likelihood": -34.49061862127556,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "intercept": 1.750937341670427,
      "money_weight": 0.0,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -30.895672457787537,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "intercept": -6.784079486378171,
      "money_weight": 1.3444967030444945,
      "fairness_weight": 0.34467154951784024,
      "success": true,
      "log_likelihood": -32.03750824524206,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "intercept": -0.34736402944161127,
      "money_weight": 0.10448845106335305,
      "fairness_weight": 1.0737958910201972,
      "success": true,
      "log_likelihood": -27.942064918080426,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "intercept": -8.703186875176204,
      "money_weight": 1.0341689024955412,
      "fairness_weight": 1.0327821185145438,
      "success": true,
      "log_likelihood": -11.152357131893936,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "intercept": 0.04095412032602723,
      "money_weight": 0.0,
      "fairness_weight": 1.20842857913979,
      "success": true,
      "log_likelihood": -26.891699403328705,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "intercept": 1.7509393092970211,
      "money_weight": 0.0,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -30.895672457791967,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "intercept": 1.7509382330288008,
      "money_weight": 0.0,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -30.895672457788272,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "intercept": 1.750936373336247,
      "money_weight": 0.0,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -30.89567245778911,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "intercept": 1.7509410493386548,
      "money_weight": 0.0,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -30.895672457804416,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "intercept": 0.8765195690201435,
      "money_weight": 0.0,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -34.15485844876445,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "intercept": 1.042594618841881,
      "money_weight": 0.0,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -33.67521776498787,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "intercept": 1.75093597158669,
      "money_weight": 0.0,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -30.89567245779048,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "intercept": 0.15399239354297997,
      "money_weight": 0.0,
      "fairness_weight": 0.582343954095458,
      "success": true,
      "log_likelihood": -32.647979686159644,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "intercept": 0.8765088639900452,
      "money_weight": 0.0,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -34.154858448622804,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "intercept": -5.483145867282257,
      "money_weight": 0.7868916026440588,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -26.883721405652167,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "intercept": -1.997212104642984,
      "money_weight": 0.304115055573671,
      "fairness_weight": 0.15188240319219476,
      "success": true,
      "log_likelihood": -33.00640542353997,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "intercept": 0.32200533746173216,
      "money_weight": 0.0,
      "fairness_weight": 0.9382319225139261,
      "success": true,
      "log_likelihood": -29.962982861077204,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "intercept": -0.8561856270956095,
      "money_weight": 0.1518380055982816,
      "fairness_weight": 0.25406575700467715,
      "success": true,
      "log_likelihood": -33.98597029993308,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "intercept": -1.2603451949870732,
      "money_weight": 0.25507280877175165,
      "fairness_weight": 0.3610333515837603,
      "success": true,
      "log_likelihood": -32.959618797888034,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "intercept": -0.39208824848373874,
      "money_weight": 0.0,
      "fairness_weight": 2.2887166878128786,
      "success": true,
      "log_likelihood": -19.33107622309567,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "intercept": 1.0425932906538096,
      "money_weight": 0.0,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -33.67521776498745,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "intercept": 0.39342090067997265,
      "money_weight": 0.0,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -35.10501400746458,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "intercept": 1.7509428715067823,
      "money_weight": 0.0,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -30.89567245782608,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "intercept": -9.695303306112509,
      "money_weight": 1.0894745247419646,
      "fairness_weight": 1.0941070439007614,
      "success": true,
      "log_likelihood": -8.950643847535304,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "intercept": -3.7986539060541546,
      "money_weight": 0.49579468473366173,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -29.961823896972323,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "intercept": -2.2154878064527197,
      "money_weight": 0.2820037128258771,
      "fairness_weight": 0.5454244183825375,
      "success": true,
      "log_likelihood": -28.2879738077686,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "intercept": 22.069906537675347,
      "money_weight": 10.0,
      "fairness_weight": 1.1837823018654738,
      "success": true,
      "log_likelihood": -345.2910773019005,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "intercept": -2.546772179202358,
      "money_weight": 0.5359653863402565,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -33.875238356395094,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "intercept": -0.23760385660612832,
      "money_weight": 0.13113785383848922,
      "fairness_weight": 0.19314541881744754,
      "success": true,
      "log_likelihood": -34.963245529599455,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "intercept": 0.04031309196206874,
      "money_weight": 0.0,
      "fairness_weight": 0.7409511974546633,
      "success": true,
      "log_likelihood": -30.96744222292147,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "intercept": 0.12050929421739887,
      "money_weight": 0.0,
      "fairness_weight": 0.18874269143692832,
      "success": true,
      "log_likelihood": -35.07213311886433,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "intercept": 1.212271172329765,
      "money_weight": 0.0,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -33.111666088216076,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "intercept": 0.13513669423191127,
      "money_weight": 0.0,
      "fairness_weight": 0.3729285013602155,
      "success": true,
      "log_likelihood": -34.1746090796541,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "intercept": -3.171198147633125,
      "money_weight": 0.28558711372047413,
      "fairness_weight": 1.0736050911885768,
      "success": true,
      "log_likelihood": -19.721993239399378,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "intercept": 1.5655169132468523,
      "money_weight": 0.0,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -31.72450555077889,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "intercept": -1.8272511707315906,
      "money_weight": 0.2979393471666315,
      "fairness_weight": 0.13746793941656024,
      "success": true,
      "log_likelihood": -33.527235538142556,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "intercept": -0.7235369248807808,
      "money_weight": 0.15550708890711953,
      "fairness_weight": 0.2446435696344324,
      "success": true,
      "log_likelihood": -34.31271897143852,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "intercept": -0.335223204216732,
      "money_weight": 0.10363325762439908,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -35.2914605616951,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "intercept": -0.4094413102039242,
      "money_weight": 0.04713314697758738,
      "fairness_weight": 0.46269433072264254,
      "success": true,
      "log_likelihood": -32.63178710592503,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "intercept": -3.964783755980185,
      "money_weight": 0.5206271439604376,
      "fairness_weight": 0.08115033908035629,
      "success": true,
      "log_likelihood": -28.835465092846675,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "intercept": 0.19827566282373013,
      "money_weight": 0.0,
      "fairness_weight": 1.35255559726467,
      "success": true,
      "log_likelihood": -26.22020140769819,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "intercept": -1.5331649323371255,
      "money_weight": 0.12215626661148285,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -33.6106713636214,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "intercept": -0.07844161864325408,
      "money_weight": 0.0,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -35.340701648477086,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "intercept": -7.183941594143063,
      "money_weight": 0.7133396162864416,
      "fairness_weight": 0.2886137585272396,
      "success": true,
      "log_likelihood": -15.100979260070341,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "intercept": -2.9136835205748297,
      "money_weight": 0.45998074721008064,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -32.786912709900875,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "intercept": -1.8285322781372957,
      "money_weight": 0.27702929604687415,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -34.21249147031802,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "intercept": -1.0500715743414475,
      "money_weight": 0.0,
      "fairness_weight": 0.5276413090105858,
      "success": true,
      "log_likelihood": -28.972426749847106,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "intercept": -0.5345171356054832,
      "money_weight": 0.06696795133696294,
      "fairness_weight": 1.6667550930628399,
      "success": true,
      "log_likelihood": -22.701139629447628,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "intercept": -1.737259652180124,
      "money_weight": 0.16159486429870948,
      "fairness_weight": 1.3819768721659975,
      "success": true,
      "log_likelihood": -21.59326993303271,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "intercept": 1.0425944697632263,
      "money_weight": 0.0,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -33.67521776498757,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "intercept": -8.545989484615637,
      "money_weight": 0.9767475392415782,
      "fairness_weight": 0.822044636803486,
      "success": true,
      "log_likelihood": -11.586137257437832,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "intercept": 0.5525072043874911,
      "money_weight": 0.0,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -34.86859421525021,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "intercept": -0.43699772489472577,
      "money_weight": 0.0,
      "fairness_weight": 0.0610350062514609,
      "success": true,
      "log_likelihood": -34.848784546017065,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "intercept": 0.00664581005714617,
      "money_weight": 0.0,
      "fairness_weight": 0.7182689696871204,
      "success": true,
      "log_likelihood": -31.076879010534512,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "intercept": -9.695899375071948,
      "money_weight": 1.0895606496444001,
      "fairness_weight": 1.0939693214213526,
      "success": true,
      "log_likelihood": -8.950643857035445,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "intercept": -3.595805147468383,
      "money_weight": 0.49338687078485044,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -30.771504363602883,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "intercept": -5.078264760019793,
      "money_weight": 0.6763622368205628,
      "fairness_weight": 0.9952965731383657,
      "success": true,
      "log_likelihood": -18.779066058821677,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "intercept": -1.9510917775726628,
      "money_weight": 0.34515728482453756,
      "fairness_weight": 0.1764274099809018,
      "success": true,
      "log_likelihood": -33.27614996190566,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "intercept": 1.2122693427856195,
      "money_weight": 0.0,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -33.11166608822325,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "intercept": 0.8765079631173742,
      "money_weight": 0.0,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -34.154858448626754,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "intercept": -3.556839521300547,
      "money_weight": 0.6579548265571574,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -32.39447809636324,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "intercept": 1.2122709303901975,
      "money_weight": 0.0,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -33.111666088216474,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "intercept": -5.5209215120963355,
      "money_weight": 0.675146921281141,
      "fairness_weight": 10.0,
      "success": true,
      "log_likelihood": -8.12074416860744,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "intercept": -7.392125347681055,
      "money_weight": 0.7874501367643304,
      "fairness_weight": 0.4240013268278964,
      "success": true,
      "log_likelihood": -14.686841224268658,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "intercept": -1.24520171794158,
      "money_weight": 0.19222102167628696,
      "fairness_weight": 0.3195135940246746,
      "success": true,
      "log_likelihood": -32.83494792539116,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "intercept": 0.3934202757076688,
      "money_weight": 0.0,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -35.105014007464604,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "intercept": -1.5223377733420274,
      "money_weight": 0.07732481491157256,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -33.086392452486216,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "intercept": 0.4330783332428401,
      "money_weight": 0.0,
      "fairness_weight": 0.2710187909927344,
      "success": true,
      "log_likelihood": -34.951085304427124,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "intercept": 1.3863133523040363,
      "money_weight": 0.0,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -32.4622225733464,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "intercept": -7.900606863524269,
      "money_weight": 0.5212323177112362,
      "fairness_weight": 0.6253333556526869,
      "success": true,
      "log_likelihood": -7.873034506461318,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "intercept": 45.99226673578903,
      "money_weight": 7.748324857718677,
      "fairness_weight": 1.9661851506391193,
      "success": true,
      "log_likelihood": -667.6208821974918,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "intercept": -9.69531320782327,
      "money_weight": 1.0894772192072726,
      "fairness_weight": 1.0941122915983965,
      "success": true,
      "log_likelihood": -8.950643847554636,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "intercept": -1.0425961439514624,
      "money_weight": 0.0,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -33.67521776499488,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "intercept": 1.212271375407053,
      "money_weight": 0.0,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -33.111666088215856,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "intercept": -6.76042345599311,
      "money_weight": 0.6468744595993913,
      "fairness_weight": 0.9004584607695656,
      "success": true,
      "log_likelihood": -12.317929586933781,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "intercept": -4.678322167579003,
      "money_weight": 0.862164969727594,
      "fairness_weight": 0.05738386042203852,
      "success": true,
      "log_likelihood": -30.20333957041323,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "intercept": -0.5525061005124992,
      "money_weight": 0.0,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -34.86859421525059,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "intercept": -6.024173839427931,
      "money_weight": 0.6067467641788314,
      "fairness_weight": 1.7969370281029289,
      "success": true,
      "log_likelihood": -11.306670387929076,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "intercept": -0.004245520476360047,
      "money_weight": 0.0,
      "fairness_weight": 0.039057401835263926,
      "success": true,
      "log_likelihood": -35.33240791875066,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "intercept": -2.2496348873629604,
      "money_weight": 0.07838948815126633,
      "fairness_weight": 1.0613843657044983,
      "success": true,
      "log_likelihood": -20.139338962976005,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "intercept": 1.3862924406565864,
      "money_weight": 0.0,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -32.46222257284066,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "intercept": -5.935799654912009,
      "money_weight": 1.0858178850734725,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -28.476881553478623,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "intercept": -0.5680722544786055,
      "money_weight": 0.12994031325505742,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -35.73823856892673,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "intercept": {
        "r": 0.613190842241452,
        "p": 1.187489450816919e-11
      },
      "money_weight": {
        "r": 0.39063912175033527,
        "p": 5.865719793650256e-05
      },
      "fairness_weight": {
        "r": 0.7519064085358356,
        "p": 1.9677641044724583e-19
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 89.98832227055063,
  "bic_error": "'ModelOutput' object has no attribute 'metrics'",
  "recovery_summary": "Parameter Recovery:\n- intercept: r = 0.613\n- money_weight: r = 0.391\n- fairness_weight: r = 0.752",
  "previous_models": [
    "Specification: U_accept = intercept + money_weight * split_self - fairness_weight * max((token_self / (token_self + token_opp)) * combined_earning - split_self, 0)\nSummary: The model computes the utility of accepting an offer for responders by linearly weighting the proposed share with a money sensitivity parameter and applying a fairness penalty for offers that fall below a \u201cdesert\u201d computed from the participant\u2019s relative token contribution. The model includes an intercept and two learnable parameters with generous bounds, ensuring applicability to the provided dataset while accounting for fairness-based psychological mechanisms.\nBIC: 89.98832227055063\n\nParameter Recovery:\n- intercept: r = 0.613\n- money_weight: r = 0.391\n- fairness_weight: r = 0.752"
  ]
}