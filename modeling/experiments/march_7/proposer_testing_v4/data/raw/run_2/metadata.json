{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641",
  "output_description": "Design a computational model for the given task. The model should obtain the utility of accepting an offer, (not the probability of choosing an action).  Your goal is to eventually explore the entire space of possible explainations and mechanisms by which the observed behavior arises.\n\nYour model should use the given variables appropriately, but does not necessary need to use all or even most of the variables. Do not include the model for the utility of rejecting an offer. \n\nThe model should:\n1. Predict only responder behavior.\n2. Build on relevant psychological principles.\n3. Be considerate of high covariance between learnable parameters as the model will have to pass parameter recovery tests.\n4. Be applicable to the dataset given within the task description (i.e. the model should be able to be run using only the provided dataset structure).\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Use clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'. DO NOT USE 'lambda' AS A PARAMETER NAME.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641\n\nDesired Output Specification: Design a computational model for the given task. The model should obtain the utility of accepting an offer, (not the probability of choosing an action).  Your goal is to eventually explore the entire space of possible explainations and mechanisms by which the observed behavior arises.\n\nYour model should use the given variables appropriately, but does not necessary need to use all or even most of the variables. Do not include the model for the utility of rejecting an offer. \n\nThe model should:\n1. Predict only responder behavior.\n2. Build on relevant psychological principles.\n3. Be considerate of high covariance between learnable parameters as the model will have to pass parameter recovery tests.\n4. Be applicable to the dataset given within the task description (i.e. the model should be able to be run using only the provided dataset structure).\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Use clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'. DO NOT USE 'lambda' AS A PARAMETER NAME.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "Step 1. Identifying Psychological Mechanisms\n\n\u2022 Responders are known to care not only about the absolute monetary reward (split_self in \u00a3) but also about whether the offer is \u201cfair\u201d given the contributions of both players. In our experiment, fairness is indexed by the tokens from the pre\u2010task (token_self and token_opp) that determine each player\u2019s entitlement. The \u201cfair\u201d share for the participant is therefore proportional to token_self relative to the total tokens (token_self + token_opp), multiplied by the combined_earning.\n\n\u2022 The primary mechanism is an inequity aversion effect: responders feel a disutility (or penalty) when the offered split (split_self) is below what would be fair given the contribution levels. When the offer is at least as good as the \u201cfair\u201d stake, no fairness\u2010penalty should be imposed. This is captured by comparing the received reward to the expected fair share.\n\n\u2022 Other considerations like the trial type or the role have been noted, but since we are focusing on responder behavior and the psychological mechanism of fairness alongside self\u2010interest, we use only those variables that are necessary to compute the fair share and the reward received.\n\nStep 2. Combining the Mechanisms\n\n\u2022 We compute the fair share as: \n\u2003\u2003fair_share = combined_earning \u00d7 [token_self/(token_self + token_opp)].\n\n\u2022 Then, the utility of accepting an outcome (U_accept) is given by the actual monetary reward (split_self) minus a fairness penalty. The penalty is applied only when the reward is below the fair share. This mechanism encapsulates the aversion to disadvantageous inequality.\n\n\u2022 Mathematically, we can achieve this by using a \u201cmax\u201d function that subtracts the fair share minus the reward only when it is positive. A learnable parameter phi (fairness sensitivity) scales this penalty.\n\nStep 3. Mathematical Formulation\n\nWe propose the following model for the utility of accepting an offer:\n\nFirst, define the fair share:\n\u2003\u2003F = combined_earning \u00d7 (token_self/(token_self + token_opp)).\n\nThen,\n\u2003\u2003U_accept = split_self \u2212 phi \u00d7 max(F \u2212 split_self, 0).\n\nIn words, if the offered split_self is below F, the fairness penalty phi*(F \u2212 split_self) is subtracted. Otherwise, the utility equals the monetary gain split_self without any fairness penalty.\n\nStep 4. Learnable Parameter and Bounds\n\n\u2022 Fairness sensitivity (phi) is a learnable parameter that should be nonnegative. We set generous bounds on it, for example between 0 and 10.\n\nStep 5. Mapping to Observables\n\n\u2022 split_self, combined_earning, token_self, and token_opp are provided in the dataset.\n\u2022 The formula uses these variables to calculate the fair share, and thereby the fairness\u2010adjusted utility.\n\u2022 This model is only applicable for responder decisions (trial_role for responder), and does not cover reject utility.\n\nBelow is the formal specification of the model, the variable descriptions, and a concise summary.\n\n<MODEL>\nLet F = combined_earning * (token_self / (token_self + token_opp))\nU_accept = split_self - phi * max(F - split_self, 0)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_accept\": {\n      \"description\": \"Utility for a responder when accepting an offer, combining monetary reward and penalty for receiving less than the fair share.\",\n      \"range\": {\n        \"min\": \"-infinity\",\n        \"max\": \"infinity\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"deterministic\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant (in \u00a3) as provided in the dataset.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"infinity\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"data\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total monetary earning in the trial (in \u00a3), noting that each token is worth \u00a33.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"infinity\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"data\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens that correspond to the participant's contribution.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"infinity\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"data\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens corresponding to the opponent's contribution.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"infinity\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"data\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"phi\": {\n      \"description\": \"Fairness sensitivity parameter scaling the penalty for an offer below the fair share. Higher values indicate stronger aversion to unfair offers.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": 0,\n          \"upper\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    }\n  }\n}\n</VARIABLES>\n\n<SUMMARY>\nA utility model for responder behavior that computes the acceptance utility as the monetary reward reduced by a fairness penalty when the received amount is lower than an entitlement-based fair share. The fair share is calculated from combined earnings weighted by the participant\u2019s tokens over the total tokens, and a learnable fairness sensitivity parameter (phi) scales the penalty.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['phi']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block:\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE UTLITY VALUES.\n                Model Specification:\n                Let F = combined_earning * (token_self / (token_self + token_opp))\nU_accept = split_self - phi * max(F - split_self, 0)\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"U_accept\": {\n      \"description\": \"Utility for a responder when accepting an offer, combining monetary reward and penalty for receiving less than the fair share.\",\n      \"range\": {\n        \"min\": \"-infinity\",\n        \"max\": \"infinity\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"deterministic\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant (in \\u00a3) as provided in the dataset.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"infinity\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"data\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total monetary earning in the trial (in \\u00a3), noting that each token is worth \\u00a33.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"infinity\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"data\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens that correspond to the participant's contribution.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"infinity\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"data\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens corresponding to the opponent's contribution.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"infinity\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"data\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"phi\": {\n      \"description\": \"Fairness sensitivity parameter scaling the penalty for an offer below the fair share. Higher values indicate stronger aversion to unfair offers.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": 0,\n          \"upper\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641\n\n                ",
      "output": "```python\nimport json\nimport math\n\ndef simulate_model(trial_data, phi=1):\n    model_predictions = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n\n        if token_self + token_opp ==0:\n            F = 0\n        else:\n            F = combined_earning * (token_self / (token_self + token_opp))\n        \n        U_accept = split_self - phi * max(F - split_self, 0)\n        model_predictions.append(U_accept)\n    return model_predictions\n\n# Example usage (replace with your actual data)\ndata_json = '[{\"split_self\": 10, \"combined_earning\": 20, \"token_self\": 10, \"token_opp\": 10}, {\"split_self\": 5, \"combined_earning\": 20, \"token_self\": 10, \"token_opp\": 10}, {\"split_self\": 15, \"combined_earning\": 20, \"token_self\": 10, \"token_opp\": 10}]'\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data, phi=2)  #Example phi value\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n\n```"
    }
  ],
  "learnable_parameters": {
    "phi": {
      "description": "Fairness sensitivity parameter scaling the penalty for an offer below the fair share. Higher values indicate stronger aversion to unfair offers.",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "lower": 0,
          "upper": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "Let F = combined_earning * (token_self / (token_self + token_opp))\nU_accept = split_self - phi * max(F - split_self, 0)",
  "variable_descriptions": {
    "U_accept": {
      "description": "Utility for a responder when accepting an offer, combining monetary reward and penalty for receiving less than the fair share.",
      "range": {
        "min": "-infinity",
        "max": "infinity",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": {
        "type": "deterministic"
      },
      "learnable": false,
      "source": "calculated"
    },
    "split_self": {
      "description": "Proposed share for the participant (in \u00a3) as provided in the dataset.",
      "range": {
        "min": 0,
        "max": "infinity",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": {
        "type": "data"
      },
      "learnable": false,
      "source": "data"
    },
    "combined_earning": {
      "description": "Total monetary earning in the trial (in \u00a3), noting that each token is worth \u00a33.",
      "range": {
        "min": 0,
        "max": "infinity",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": {
        "type": "data"
      },
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Number of tokens that correspond to the participant's contribution.",
      "range": {
        "min": 0,
        "max": "infinity",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": {
        "type": "data"
      },
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens corresponding to the opponent's contribution.",
      "range": {
        "min": 0,
        "max": "infinity",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": {
        "type": "data"
      },
      "learnable": false,
      "source": "data"
    },
    "phi": {
      "description": "Fairness sensitivity parameter scaling the penalty for an offer below the fair share. Higher values indicate stronger aversion to unfair offers.",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "lower": 0,
          "upper": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_summary": "A utility model for responder behavior that computes the acceptance utility as the monetary reward reduced by a fairness penalty when the received amount is lower than an entitlement-based fair share. The fair share is calculated from combined earnings weighted by the participant\u2019s tokens over the total tokens, and a learnable fairness sensitivity parameter (phi) scales the penalty.",
  "full_reasoning": "Step 1. Identifying Psychological Mechanisms\n\n\u2022 Responders are known to care not only about the absolute monetary reward (split_self in \u00a3) but also about whether the offer is \u201cfair\u201d given the contributions of both players. In our experiment, fairness is indexed by the tokens from the pre\u2010task (token_self and token_opp) that determine each player\u2019s entitlement. The \u201cfair\u201d share for the participant is therefore proportional to token_self relative to the total tokens (token_self + token_opp), multiplied by the combined_earning.\n\n\u2022 The primary mechanism is an inequity aversion effect: responders feel a disutility (or penalty) when the offered split (split_self) is below what would be fair given the contribution levels. When the offer is at least as good as the \u201cfair\u201d stake, no fairness\u2010penalty should be imposed. This is captured by comparing the received reward to the expected fair share.\n\n\u2022 Other considerations like the trial type or the role have been noted, but since we are focusing on responder behavior and the psychological mechanism of fairness alongside self\u2010interest, we use only those variables that are necessary to compute the fair share and the reward received.\n\nStep 2. Combining the Mechanisms\n\n\u2022 We compute the fair share as: \n\u2003\u2003fair_share = combined_earning \u00d7 [token_self/(token_self + token_opp)].\n\n\u2022 Then, the utility of accepting an outcome (U_accept) is given by the actual monetary reward (split_self) minus a fairness penalty. The penalty is applied only when the reward is below the fair share. This mechanism encapsulates the aversion to disadvantageous inequality.\n\n\u2022 Mathematically, we can achieve this by using a \u201cmax\u201d function that subtracts the fair share minus the reward only when it is positive. A learnable parameter phi (fairness sensitivity) scales this penalty.\n\nStep 3. Mathematical Formulation\n\nWe propose the following model for the utility of accepting an offer:\n\nFirst, define the fair share:\n\u2003\u2003F = combined_earning \u00d7 (token_self/(token_self + token_opp)).\n\nThen,\n\u2003\u2003U_accept = split_self \u2212 phi \u00d7 max(F \u2212 split_self, 0).\n\nIn words, if the offered split_self is below F, the fairness penalty phi*(F \u2212 split_self) is subtracted. Otherwise, the utility equals the monetary gain split_self without any fairness penalty.\n\nStep 4. Learnable Parameter and Bounds\n\n\u2022 Fairness sensitivity (phi) is a learnable parameter that should be nonnegative. We set generous bounds on it, for example between 0 and 10.\n\nStep 5. Mapping to Observables\n\n\u2022 split_self, combined_earning, token_self, and token_opp are provided in the dataset.\n\u2022 The formula uses these variables to calculate the fair share, and thereby the fairness\u2010adjusted utility.\n\u2022 This model is only applicable for responder decisions (trial_role for responder), and does not cover reject utility.\n\nBelow is the formal specification of the model, the variable descriptions, and a concise summary.\n\n<MODEL>\nLet F = combined_earning * (token_self / (token_self + token_opp))\nU_accept = split_self - phi * max(F - split_self, 0)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_accept\": {\n      \"description\": \"Utility for a responder when accepting an offer, combining monetary reward and penalty for receiving less than the fair share.\",\n      \"range\": {\n        \"min\": \"-infinity\",\n        \"max\": \"infinity\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"deterministic\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant (in \u00a3) as provided in the dataset.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"infinity\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"data\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total monetary earning in the trial (in \u00a3), noting that each token is worth \u00a33.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"infinity\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"data\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens that correspond to the participant's contribution.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"infinity\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"data\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens corresponding to the opponent's contribution.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"infinity\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"data\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"phi\": {\n      \"description\": \"Fairness sensitivity parameter scaling the penalty for an offer below the fair share. Higher values indicate stronger aversion to unfair offers.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": 0,\n          \"upper\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    }\n  }\n}\n</VARIABLES>\n\n<SUMMARY>\nA utility model for responder behavior that computes the acceptance utility as the monetary reward reduced by a fairness penalty when the received amount is lower than an entitlement-based fair share. The fair share is calculated from combined earnings weighted by the participant\u2019s tokens over the total tokens, and a learnable fairness sensitivity parameter (phi) scales the penalty.\n</SUMMARY>",
  "current_model": "Specification: Let F = combined_earning * (token_self / (token_self + token_opp))\nU_accept = split_self - phi * max(F - split_self, 0)\nSummary: A utility model for responder behavior that computes the acceptance utility as the monetary reward reduced by a fairness penalty when the received amount is lower than an entitlement-based fair share. The fair share is calculated from combined earnings weighted by the participant\u2019s tokens over the total tokens, and a learnable fairness sensitivity parameter (phi) scales the penalty.",
  "simulation_code": "def simulate_model(trial_data, phi=1):\n    model_predictions = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n\n        if token_self + token_opp ==0:\n            F = 0\n        else:\n            F = combined_earning * (token_self / (token_self + token_opp))\n        \n        U_accept = split_self - phi * max(F - split_self, 0)\n        model_predictions.append(U_accept)\n    return model_predictions",
  "fitting_results": [
    {
      "phi": 8.31333717029742,
      "success": true,
      "log_likelihood": -37.92544686904014,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "phi": 1.8578658680699938,
      "success": true,
      "log_likelihood": -49.830869703298795,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "phi": 1.9687775920009667,
      "success": true,
      "log_likelihood": -45.70963172742043,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "phi": 2.2884603631597824,
      "success": true,
      "log_likelihood": -46.4204233295596,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "phi": 2.7828796598809293,
      "success": true,
      "log_likelihood": -42.475282258442384,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "phi": 1.3453083172663443,
      "success": true,
      "log_likelihood": -48.5978593243328,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "phi": 0.0,
      "success": true,
      "log_likelihood": -45.84686186570536,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "phi": 1.2861314276549232,
      "success": true,
      "log_likelihood": -48.83450301832272,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "phi": 0.0,
      "success": true,
      "log_likelihood": -45.84686186570537,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "phi": 2.9890739698985866,
      "success": true,
      "log_likelihood": -42.56284596383588,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "phi": 2.708907737979237,
      "success": true,
      "log_likelihood": -40.59894118435108,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "phi": 7.131699764806902,
      "success": true,
      "log_likelihood": -38.17714430064816,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "phi": 2.9669375884698286,
      "success": true,
      "log_likelihood": -41.361194589524466,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "phi": 0.0,
      "success": true,
      "log_likelihood": -45.84686186570536,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "phi": 0.0,
      "success": true,
      "log_likelihood": -45.84686186570536,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "phi": 0.0,
      "success": true,
      "log_likelihood": -45.84686186570538,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "phi": 0.0,
      "success": true,
      "log_likelihood": -45.846861865705364,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "phi": 0.3865125818109436,
      "success": true,
      "log_likelihood": -48.18964054979103,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "phi": 0.3568748773506027,
      "success": true,
      "log_likelihood": -48.90978875907071,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "phi": 0.0,
      "success": true,
      "log_likelihood": -45.84686186570537,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "phi": 1.7560515158523795,
      "success": true,
      "log_likelihood": -49.356514655563885,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "phi": 0.4578626433803317,
      "success": true,
      "log_likelihood": -49.3762818523601,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "phi": 2.1913501200978542,
      "success": true,
      "log_likelihood": -51.3639670364072,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "phi": 1.5667299835599082,
      "success": true,
      "log_likelihood": -51.342360630538685,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "phi": 2.275878172509814,
      "success": true,
      "log_likelihood": -46.666585047291434,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "phi": 1.445220806148351,
      "success": true,
      "log_likelihood": -50.22422993224844,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "phi": 1.6466968485147204,
      "success": true,
      "log_likelihood": -47.69215045973198,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "phi": 5.519856837440261,
      "success": true,
      "log_likelihood": -32.92390740371826,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "phi": 0.31841147737443587,
      "success": true,
      "log_likelihood": -49.812723956380076,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "phi": 0.698273497365995,
      "success": true,
      "log_likelihood": -53.132770364624434,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "phi": 0.0,
      "success": true,
      "log_likelihood": -45.84686186570537,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "phi": 8.3131921095384,
      "success": true,
      "log_likelihood": -37.925446866381314,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "phi": 1.7318265829227215,
      "success": true,
      "log_likelihood": -55.9738923293627,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "phi": 2.4803377300246088,
      "success": true,
      "log_likelihood": -47.36952612242222,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "phi": 0.0,
      "success": true,
      "log_likelihood": -45.84686186570537,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "phi": 1.0241599630496316,
      "success": true,
      "log_likelihood": -50.74203577043472,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "phi": 1.110500773825439,
      "success": true,
      "log_likelihood": -48.10663576005842,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "phi": 2.0908472016519393,
      "success": true,
      "log_likelihood": -47.48372992461374,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "phi": 1.136729191244434,
      "success": true,
      "log_likelihood": -53.3102930507549,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "phi": 0.09951345943080117,
      "success": true,
      "log_likelihood": -49.674154165306646,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "phi": 1.419586103016771,
      "success": true,
      "log_likelihood": -52.45393941316256,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "phi": 4.602311420214065,
      "success": true,
      "log_likelihood": -41.80203953794576,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "phi": 0.0,
      "success": true,
      "log_likelihood": -48.54686186422411,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "phi": 1.4713322786124545,
      "success": true,
      "log_likelihood": -50.98676098345203,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "phi": 1.3635283441409172,
      "success": true,
      "log_likelihood": -49.56811945476241,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "phi": 0.7025879466048607,
      "success": true,
      "log_likelihood": -53.0052381889696,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "phi": 1.7560517974589247,
      "success": true,
      "log_likelihood": -49.35651465860267,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "phi": 2.0696204987102806,
      "success": true,
      "log_likelihood": -52.445760236030964,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "phi": 3.13020893291712,
      "success": true,
      "log_likelihood": -42.23655204686741,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "phi": 1.0693462385963974,
      "success": true,
      "log_likelihood": -61.660540971866375,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "phi": 0.8761655305082611,
      "success": true,
      "log_likelihood": -53.774060048254654,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "phi": 4.720461724935951,
      "success": true,
      "log_likelihood": -47.252915388165235,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "phi": 1.369662172976988,
      "success": true,
      "log_likelihood": -53.890625372997825,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "phi": 0.9321824514245475,
      "success": true,
      "log_likelihood": -58.36041333978075,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "phi": 2.340181666880595,
      "success": true,
      "log_likelihood": -52.92618366629851,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "phi": 4.187510937251071,
      "success": true,
      "log_likelihood": -36.03474711188948,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "phi": 4.384325370400458,
      "success": true,
      "log_likelihood": -38.94945805572292,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "phi": 0.0,
      "success": true,
      "log_likelihood": -52.67186186302059,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "phi": 6.64072729701545,
      "success": true,
      "log_likelihood": -39.94947210357877,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "phi": 0.39915708682603523,
      "success": true,
      "log_likelihood": -52.376252141344764,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "phi": 1.1741533730604168,
      "success": true,
      "log_likelihood": -55.17872343777725,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "phi": 2.0696204178014033,
      "success": true,
      "log_likelihood": -47.945760244282695,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "phi": 8.313197631929945,
      "success": true,
      "log_likelihood": -37.92544686638907,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "phi": 1.639225678665249,
      "success": true,
      "log_likelihood": -55.390372282150814,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "phi": 4.720464850444012,
      "success": true,
      "log_likelihood": -39.452915435613505,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "phi": 1.5182017239679086,
      "success": true,
      "log_likelihood": -49.67708020273789,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "phi": 0.12882042517460623,
      "success": true,
      "log_likelihood": -49.17274498208228,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "phi": 0.3949456604496761,
      "success": true,
      "log_likelihood": -50.98103101290582,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "phi": 1.2977837334287186,
      "success": true,
      "log_likelihood": -51.490710931269746,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "phi": 0.01709893484230953,
      "success": true,
      "log_likelihood": -50.94483965197169,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "phi": 10.0,
      "success": true,
      "log_likelihood": -28.1535070526137,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "phi": 5.048065334486029,
      "success": true,
      "log_likelihood": -45.04787749137106,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "phi": 1.6770136143223193,
      "success": true,
      "log_likelihood": -49.893611408127704,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "phi": 0.4996476981452642,
      "success": true,
      "log_likelihood": -52.76721313123417,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "phi": 1.3696519059930943,
      "success": true,
      "log_likelihood": -59.140625364839096,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "phi": 1.131450937032927,
      "success": true,
      "log_likelihood": -50.47034967978653,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "phi": 0.0,
      "success": true,
      "log_likelihood": -48.62186186486333,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "phi": 7.764712182568651,
      "success": true,
      "log_likelihood": -43.02966757425483,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "phi": 0.8170157044866787,
      "success": true,
      "log_likelihood": -60.07436550625213,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "phi": 8.313173767363248,
      "success": true,
      "log_likelihood": -37.92544686640863,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "phi": 1.2803355236756744,
      "success": true,
      "log_likelihood": -59.50574527915543,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "phi": 0.0,
      "success": true,
      "log_likelihood": -51.0968618635624,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "phi": 6.498907925247468,
      "success": true,
      "log_likelihood": -41.267150457722025,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "phi": 1.7398513588850233,
      "success": true,
      "log_likelihood": -46.76870474238062,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "phi": 0.9227433186021113,
      "success": true,
      "log_likelihood": -62.84953217768659,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "phi": 8.313188155493824,
      "success": true,
      "log_likelihood": -36.12544686696873,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "phi": 0.9655672055436068,
      "success": true,
      "log_likelihood": -54.03727820367703,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "phi": 4.436694134896681,
      "success": true,
      "log_likelihood": -43.79367817844853,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "phi": 0.017100155121024918,
      "success": true,
      "log_likelihood": -47.94483965392192,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "phi": 1.6392255394149062,
      "success": true,
      "log_likelihood": -49.390372286266356,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "phi": 0.7373230065595305,
      "success": true,
      "log_likelihood": -57.97328366399878,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "phi": {
        "r": 0.9439059835475044,
        "p": 5.91232611871514e-49
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 99.90936177568791,
  "bic_error": "'ModelOutput' object has no attribute 'metrics'",
  "recovery_summary": "Parameter Recovery:\n- phi: r = 0.944",
  "previous_models": [
    "Specification: Let F = combined_earning * (token_self / (token_self + token_opp))\nU_accept = split_self - phi * max(F - split_self, 0)\nSummary: A utility model for responder behavior that computes the acceptance utility as the monetary reward reduced by a fairness penalty when the received amount is lower than an entitlement-based fair share. The fair share is calculated from combined earnings weighted by the participant\u2019s tokens over the total tokens, and a learnable fairness sensitivity parameter (phi) scales the penalty.\nBIC: 99.90936177568791\n\nParameter Recovery:\n- phi: r = 0.944"
  ]
}