{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641",
  "output_description": "Design a computational model for the Ultimatum Game that captures how people \nreject unfair offers even when it means getting nothing. The model should obtain the utility, (not the probability of choosing an action).\n\nYour model should use the given variables appropriately, but does not necessary need to use all or even most of the variables. Do not include the model for the utility of rejecting an offer.\n\nThe model should:\n1. Predict only responder behavior.\n2. Build on relevant psychological principles.\n3. Be considerate of high covariance between learnable parameters as the model\nwill have to pass parameter recovery tests.\n4. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n5. Should have no more than two learnable parameters.\n6. This specific model should calculate the utility of an action, which will then be used to determine\nthe probability of choosing that action. Negative values should represent a negative utility, and thus an unlikly action.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Use clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nFor this run, can you please recreate the fehr schmidt model of the ultimatum game? No need to include the envy parameter, since the split self is always greater than the split opp in this dataset. I would like for you to make a change where to where instead of pulling on a fair split, we calculate envy by using a learned estimation from the environment. The participant should learn the estimation of expected split from the environment. Perhaps it starts at 0.5, and then is updated based on the learning rate from the actual recieved split.(This means you should only have two learnable parameters, alpha and the learning rate.)",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641\n\nDesired Output Specification: Design a computational model for the Ultimatum Game that captures how people \nreject unfair offers even when it means getting nothing. The model should obtain the utility, (not the probability of choosing an action).\n\nYour model should use the given variables appropriately, but does not necessary need to use all or even most of the variables. Do not include the model for the utility of rejecting an offer.\n\nThe model should:\n1. Predict only responder behavior.\n2. Build on relevant psychological principles.\n3. Be considerate of high covariance between learnable parameters as the model\nwill have to pass parameter recovery tests.\n4. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n5. Should have no more than two learnable parameters.\n6. This specific model should calculate the utility of an action, which will then be used to determine\nthe probability of choosing that action. Negative values should represent a negative utility, and thus an unlikly action.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Use clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nFor this run, can you please recreate the fehr schmidt model of the ultimatum game? No need to include the envy parameter, since the split self is always greater than the split opp in this dataset. I would like for you to make a change where to where instead of pulling on a fair split, we calculate envy by using a learned estimation from the environment. The participant should learn the estimation of expected split from the environment. Perhaps it starts at 0.5, and then is updated based on the learning rate from the actual recieved split.(This means you should only have two learnable parameters, alpha and the learning rate.)\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "Step-by-step reasoning:\n\n1. Key psychological mechanisms: In the Fehr-Schmidt model, responders\u2019 utility is not based solely on monetary payoff; it is reduced by the emotional cost (\u201cenvy\u201d) of receiving less than what they expect to be fair. In our modified version the fair share is not fixed at 0.5 but is learned from the environment. That is, each responder starts with an expectation of 50% of the total pot and subsequently updates this expectation with the actual proportions received. The envy (inequality aversion) is then computed based on the deviation between this learned expectation and the actual proportion received, penalizing offers below expectation.\n\n2. How these mechanisms interact: On each trial, the responder compares the monetary amount they receive (split_self) against what they would have expected (their fair share, calculated as the learned estimate V multiplied by the combined pot). If the amount received is lower than this fair amount, the responder experiences a penalty proportional to the shortfall. Additionally, the expected fair share is updated based on the difference between the fair proportion of the accepted offer (i.e. split_self/combined_earning) and the current expectation V, using a learning rate.\n\n3. Mathematical form of interactions: The utility for accepting an offer on trial t can be formulated as:\n\u2003\u2003U_accept,t = split_self,t \u2212 \u03b1 \u00d7 max(V_t \u00d7 combined_earning,t \u2212 split_self,t, 0)\nwhere \u03b1 is the envy sensitivity parameter, and V_t is the current learned expectation. Then, the expectation is updated trial-by-trial as:\n\u2003\u2003V_(t+1) = V_t + learning_rate \u00d7 (split_self,t/combined_earning,t \u2212 V_t)\n\n4. Learnable parameters: There are two learnable parameters:\n\u2003\u2022 \u03b1 (alpha): quantifies the degree to which falling short of the expected fair share reduces the utility.\n\u2003\u2022 learning_rate: determines how quickly the learned expectation of fairness is updated from trial to trial.\nThese parameters both have finite bounds.\n\n5. Mapping to observable behavior: The available dataset contains split_self and combined_earning, which allow computing the received proportion. The model computes utility on each trial (utility of acceptance) based on the observed offer and learned fairness expectation. The update equation uses the ratio split_self/combined_earning to adjust the expectation V.\n\nNow, the formal model specification is provided below.\n\n<MODEL>\nU_accept_t = split_self_t - alpha * max(V_t * combined_earning_t - split_self_t, 0)\nV_t+1 = V_t + learning_rate * ((split_self_t / combined_earning_t) - V_t)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_accept_t\": {\n      \"description\": \"Utility for accepting an offer on trial t, measured in monetary units (\u00a3). Negative values indicate a cost that reduces likelihood of acceptance.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"alpha\": {\n      \"description\": \"Envy sensitivity parameter; higher values indicate stronger penalization when the received amount is below the learned fair amount.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"learning_rate\": {\n      \"description\": \"Learning rate for updating the estimated fair share from the environment.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self_t\": {\n      \"description\": \"Monetary amount allocated to the responder on trial t (in \u00a3).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning_t\": {\n      \"description\": \"Total monetary amount available in the trial t (in \u00a3).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"V_t\": {\n      \"description\": \"Learned estimate of the fair share proportion on trial t; starts at 0.5 and is updated with each offer.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<SUMMARY>\nA two-parameter model of responder behavior in the ultimatum game where the utility for accepting an offer is computed as the monetary payoff diminished by an inequality aversion penalty. This penalty is proportional to the shortfall between the offer and a dynamically updated, learned expectation of fairness. The envy sensitivity (alpha) and learning rate are the only learnable parameters.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['alpha', 'learning_rate']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block:\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE UTLITY VALUES.\n                Model Specification:\n                U_accept_t = split_self_t - alpha * max(V_t * combined_earning_t - split_self_t, 0)\nV_t+1 = V_t + learning_rate * ((split_self_t / combined_earning_t) - V_t)\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"U_accept_t\": {\n      \"description\": \"Utility for accepting an offer on trial t, measured in monetary units (\\u00a3). Negative values indicate a cost that reduces likelihood of acceptance.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"alpha\": {\n      \"description\": \"Envy sensitivity parameter; higher values indicate stronger penalization when the received amount is below the learned fair amount.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"learning_rate\": {\n      \"description\": \"Learning rate for updating the estimated fair share from the environment.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self_t\": {\n      \"description\": \"Monetary amount allocated to the responder on trial t (in \\u00a3).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning_t\": {\n      \"description\": \"Total monetary amount available in the trial t (in \\u00a3).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"V_t\": {\n      \"description\": \"Learned estimate of the fair share proportion on trial t; starts at 0.5 and is updated with each offer.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641\n\n                ",
      "output": "```python\nimport json\nimport math\n\ndef simulate_model(trial_data, alpha=1, learning_rate=0.1):\n    model_predictions = []\n    for trial in trial_data:\n        split_self_t = trial.get(\"split_self\", 0)\n        combined_earning_t = trial.get(\"combined_earning\", 1) #avoid division by zero\n\n        if combined_earning_t ==0:\n            V_t = 0.5\n        else:\n            V_t = 0.5\n\n        U_accept_t = split_self_t - alpha * max(V_t * combined_earning_t - split_self_t, 0)\n        model_predictions.append(U_accept_t)\n\n\n        #Update V_t for the next trial if data exists and combined_earning is not zero\n        if \"split_self\" in trial and \"combined_earning\" in trial and combined_earning_t !=0:\n            V_t = V_t + learning_rate * ((split_self_t / combined_earning_t) - V_t)\n\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = \"\"\"\n[\n  {\"ID\":1, \"group\":\"A\", \"trial_number\":1, \"trial_type\":1, \"trial_role\":2, \"token_opp\":20, \"token_self\":0, \"combined_earning\":20, \"split_opp\":10, \"split_self\":10, \"splitperc_opp\":50, \"splitperc_self\":50, \"accept\":1.0, \"accepted_amount\":10.0, \"accepted_perc\":50.0, \"proposed_perc\":50.0, \"proposed_amount\":10.0},\n  {\"ID\":1, \"group\":\"A\", \"trial_number\":2, \"trial_type\":1, \"trial_role\":2, \"token_opp\":20, \"token_self\":0, \"combined_earning\":20, \"split_opp\":15, \"split_self\":5, \"splitperc_opp\":75, \"splitperc_self\":25, \"accept\":0.0, \"accepted_amount\":0.0, \"accepted_perc\":0.0, \"proposed_perc\":25.0, \"proposed_amount\":5.0}\n]\n\"\"\"\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data, alpha=2, learning_rate=0.2)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n\n```"
    }
  ],
  "learnable_parameters": {
    "alpha": {
      "description": "Envy sensitivity parameter; higher values indicate stronger penalization when the received amount is below the learned fair amount.",
      "range": {
        "min": 0,
        "max": 5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "learning_rate": {
      "description": "Learning rate for updating the estimated fair share from the environment.",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "U_accept_t = split_self_t - alpha * max(V_t * combined_earning_t - split_self_t, 0)\nV_t+1 = V_t + learning_rate * ((split_self_t / combined_earning_t) - V_t)",
  "variable_descriptions": {
    "U_accept_t": {
      "description": "Utility for accepting an offer on trial t, measured in monetary units (\u00a3). Negative values indicate a cost that reduces likelihood of acceptance.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "alpha": {
      "description": "Envy sensitivity parameter; higher values indicate stronger penalization when the received amount is below the learned fair amount.",
      "range": {
        "min": 0,
        "max": 5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "learning_rate": {
      "description": "Learning rate for updating the estimated fair share from the environment.",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "split_self_t": {
      "description": "Monetary amount allocated to the responder on trial t (in \u00a3).",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "combined_earning_t": {
      "description": "Total monetary amount available in the trial t (in \u00a3).",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "V_t": {
      "description": "Learned estimate of the fair share proportion on trial t; starts at 0.5 and is updated with each offer.",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "A two-parameter model of responder behavior in the ultimatum game where the utility for accepting an offer is computed as the monetary payoff diminished by an inequality aversion penalty. This penalty is proportional to the shortfall between the offer and a dynamically updated, learned expectation of fairness. The envy sensitivity (alpha) and learning rate are the only learnable parameters.",
  "full_reasoning": "Step-by-step reasoning:\n\n1. Key psychological mechanisms: In the Fehr-Schmidt model, responders\u2019 utility is not based solely on monetary payoff; it is reduced by the emotional cost (\u201cenvy\u201d) of receiving less than what they expect to be fair. In our modified version the fair share is not fixed at 0.5 but is learned from the environment. That is, each responder starts with an expectation of 50% of the total pot and subsequently updates this expectation with the actual proportions received. The envy (inequality aversion) is then computed based on the deviation between this learned expectation and the actual proportion received, penalizing offers below expectation.\n\n2. How these mechanisms interact: On each trial, the responder compares the monetary amount they receive (split_self) against what they would have expected (their fair share, calculated as the learned estimate V multiplied by the combined pot). If the amount received is lower than this fair amount, the responder experiences a penalty proportional to the shortfall. Additionally, the expected fair share is updated based on the difference between the fair proportion of the accepted offer (i.e. split_self/combined_earning) and the current expectation V, using a learning rate.\n\n3. Mathematical form of interactions: The utility for accepting an offer on trial t can be formulated as:\n\u2003\u2003U_accept,t = split_self,t \u2212 \u03b1 \u00d7 max(V_t \u00d7 combined_earning,t \u2212 split_self,t, 0)\nwhere \u03b1 is the envy sensitivity parameter, and V_t is the current learned expectation. Then, the expectation is updated trial-by-trial as:\n\u2003\u2003V_(t+1) = V_t + learning_rate \u00d7 (split_self,t/combined_earning,t \u2212 V_t)\n\n4. Learnable parameters: There are two learnable parameters:\n\u2003\u2022 \u03b1 (alpha): quantifies the degree to which falling short of the expected fair share reduces the utility.\n\u2003\u2022 learning_rate: determines how quickly the learned expectation of fairness is updated from trial to trial.\nThese parameters both have finite bounds.\n\n5. Mapping to observable behavior: The available dataset contains split_self and combined_earning, which allow computing the received proportion. The model computes utility on each trial (utility of acceptance) based on the observed offer and learned fairness expectation. The update equation uses the ratio split_self/combined_earning to adjust the expectation V.\n\nNow, the formal model specification is provided below.\n\n<MODEL>\nU_accept_t = split_self_t - alpha * max(V_t * combined_earning_t - split_self_t, 0)\nV_t+1 = V_t + learning_rate * ((split_self_t / combined_earning_t) - V_t)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_accept_t\": {\n      \"description\": \"Utility for accepting an offer on trial t, measured in monetary units (\u00a3). Negative values indicate a cost that reduces likelihood of acceptance.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"alpha\": {\n      \"description\": \"Envy sensitivity parameter; higher values indicate stronger penalization when the received amount is below the learned fair amount.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"learning_rate\": {\n      \"description\": \"Learning rate for updating the estimated fair share from the environment.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self_t\": {\n      \"description\": \"Monetary amount allocated to the responder on trial t (in \u00a3).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning_t\": {\n      \"description\": \"Total monetary amount available in the trial t (in \u00a3).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"V_t\": {\n      \"description\": \"Learned estimate of the fair share proportion on trial t; starts at 0.5 and is updated with each offer.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<SUMMARY>\nA two-parameter model of responder behavior in the ultimatum game where the utility for accepting an offer is computed as the monetary payoff diminished by an inequality aversion penalty. This penalty is proportional to the shortfall between the offer and a dynamically updated, learned expectation of fairness. The envy sensitivity (alpha) and learning rate are the only learnable parameters.\n</SUMMARY>",
  "current_model": "Specification: U_accept_t = split_self_t - alpha * max(V_t * combined_earning_t - split_self_t, 0)\nV_t+1 = V_t + learning_rate * ((split_self_t / combined_earning_t) - V_t)\nSummary: A two-parameter model of responder behavior in the ultimatum game where the utility for accepting an offer is computed as the monetary payoff diminished by an inequality aversion penalty. This penalty is proportional to the shortfall between the offer and a dynamically updated, learned expectation of fairness. The envy sensitivity (alpha) and learning rate are the only learnable parameters.",
  "simulation_code": "def simulate_model(trial_data, alpha=1, learning_rate=0.1):\n    model_predictions = []\n    for trial in trial_data:\n        split_self_t = trial.get(\"split_self\", 0)\n        combined_earning_t = trial.get(\"combined_earning\", 1) #avoid division by zero\n\n        if combined_earning_t ==0:\n            V_t = 0.5\n        else:\n            V_t = 0.5\n\n        U_accept_t = split_self_t - alpha * max(V_t * combined_earning_t - split_self_t, 0)\n        model_predictions.append(U_accept_t)\n\n\n        #Update V_t for the next trial if data exists and combined_earning is not zero\n        if \"split_self\" in trial and \"combined_earning\" in trial and combined_earning_t !=0:\n            V_t = V_t + learning_rate * ((split_self_t / combined_earning_t) - V_t)\n\n    return model_predictions",
  "fitting_results": [
    {
      "alpha": 5.0,
      "learning_rate": 0.7718337617772588,
      "success": true,
      "log_likelihood": -42.56561981083739,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 1.5551011857066832,
      "learning_rate": 0.1798869764154718,
      "success": true,
      "log_likelihood": -57.10815448163365,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 1.3508747486697485,
      "learning_rate": 0.8584253599665078,
      "success": true,
      "log_likelihood": -57.754637832604146,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 1.9179800452024847,
      "learning_rate": 0.9485356009861952,
      "success": true,
      "log_likelihood": -54.717197167637075,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 1.6604076429294115,
      "learning_rate": 0.7819347580358275,
      "success": true,
      "log_likelihood": -60.566219370812526,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 1.1392095834377371,
      "learning_rate": 0.26071690624890087,
      "success": true,
      "log_likelihood": -53.55577617462072,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 0.0,
      "learning_rate": 0.5262925084450084,
      "success": true,
      "log_likelihood": -45.84686186570536,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 1.0218214245978685,
      "learning_rate": 0.5151804844284651,
      "success": true,
      "log_likelihood": -54.42569411064349,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 0.0,
      "learning_rate": 0.026976011698670255,
      "success": true,
      "log_likelihood": -45.84686186570537,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 2.1600944604758086,
      "learning_rate": 0.11989662641845233,
      "success": true,
      "log_likelihood": -55.70853456712294,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 1.8979294590799365,
      "learning_rate": 0.9932986313578815,
      "success": true,
      "log_likelihood": -54.403387472994496,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 5.0,
      "learning_rate": 0.3874854432798547,
      "success": true,
      "log_likelihood": -45.56561980883384,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 2.148133010026574,
      "learning_rate": 0.6515650622511847,
      "success": true,
      "log_likelihood": -54.44509192744556,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 0.0,
      "learning_rate": 0.36098245251998384,
      "success": true,
      "log_likelihood": -45.84686186570536,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 0.0,
      "learning_rate": 0.4640590493224287,
      "success": true,
      "log_likelihood": -45.84686186570536,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 0.0,
      "learning_rate": 0.2760828919276904,
      "success": true,
      "log_likelihood": -45.84686186570538,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 0.0,
      "learning_rate": 0.2782818847140228,
      "success": true,
      "log_likelihood": -45.846861865705364,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 0.16992645141018542,
      "learning_rate": 0.9728787105698325,
      "success": true,
      "log_likelihood": -49.25957246897847,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 0.0108637627118226,
      "learning_rate": 0.18487726572513452,
      "success": true,
      "log_likelihood": -49.97116477202694,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 0.0,
      "learning_rate": 0.48006381025328226,
      "success": true,
      "log_likelihood": -45.84686186570537,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 1.3237657428364857,
      "learning_rate": 0.1596761595293894,
      "success": true,
      "log_likelihood": -58.45582163475208,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 0.2082575472758947,
      "learning_rate": 0.8263367751874514,
      "success": true,
      "log_likelihood": -50.885259353632804,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 2.4228713589443216,
      "learning_rate": 0.30433364489434855,
      "success": true,
      "log_likelihood": -51.52727778763425,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 1.4278853264140494,
      "learning_rate": 0.07459073592535825,
      "success": true,
      "log_likelihood": -55.78366033221538,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 1.478969027844461,
      "learning_rate": 0.948441669502014,
      "success": true,
      "log_likelihood": -61.24568606638929,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 1.1151710108657356,
      "learning_rate": 0.6440061979474618,
      "success": true,
      "log_likelihood": -57.19392566832268,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 1.586691946808455,
      "learning_rate": 0.20754698432048446,
      "success": true,
      "log_likelihood": -51.086902737830734,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 3.1002857224737697,
      "learning_rate": 0.2879292980598078,
      "success": true,
      "log_likelihood": -52.1269073705984,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 0.0,
      "learning_rate": 0.8505702238732611,
      "success": true,
      "log_likelihood": -50.64686186445334,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 0.4502481886325615,
      "learning_rate": 0.04477058899519615,
      "success": true,
      "log_likelihood": -55.9439991166056,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 0.0,
      "learning_rate": 0.8304583685926488,
      "success": true,
      "log_likelihood": -45.84686186570537,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 5.0,
      "learning_rate": 0.09758298968769008,
      "success": true,
      "log_likelihood": -42.56561981083739,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 2.067141277432845,
      "learning_rate": 0.06795165356727573,
      "success": true,
      "log_likelihood": -53.82639688516894,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 2.3119770874727528,
      "learning_rate": 0.3264539275032603,
      "success": true,
      "log_likelihood": -52.7973125470893,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 0.0,
      "learning_rate": 0.6732610624663853,
      "success": true,
      "log_likelihood": -45.84686186570537,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 0.9710628090033936,
      "learning_rate": 0.050472964662902964,
      "success": true,
      "log_likelihood": -52.77322758889382,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 0.8460255869819853,
      "learning_rate": 0.3042175107166295,
      "success": true,
      "log_likelihood": -53.064584785799504,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 1.5089540693995431,
      "learning_rate": 0.3170773469092274,
      "success": true,
      "log_likelihood": -58.997512636081424,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 0.8727010177098209,
      "learning_rate": 0.1574912870714702,
      "success": true,
      "log_likelihood": -58.36733149806786,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 0.0,
      "learning_rate": 0.8227275561114424,
      "success": true,
      "log_likelihood": -49.74686186439737,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 1.2132426766734712,
      "learning_rate": 0.36630574380924197,
      "success": true,
      "log_likelihood": -57.59739813075165,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 3.2645583083979206,
      "learning_rate": 0.9266463618472055,
      "success": true,
      "log_likelihood": -54.43187441563293,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 0.0,
      "learning_rate": 0.37074565653981517,
      "success": true,
      "log_likelihood": -48.54686186422411,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 1.471566367002841,
      "learning_rate": 0.896717680917098,
      "success": true,
      "log_likelihood": -53.181330857181734,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 1.1574405001821813,
      "learning_rate": 0.28978045725461976,
      "success": true,
      "log_likelihood": -54.57240645231857,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 0.6048360116351135,
      "learning_rate": 0.3533020436837897,
      "success": true,
      "log_likelihood": -54.64253414330379,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 1.7030714545930907,
      "learning_rate": 0.8485648874646077,
      "success": true,
      "log_likelihood": -52.810607197082895,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 1.928130620206494,
      "learning_rate": 0.28341097627847245,
      "success": true,
      "log_likelihood": -57.49796809292529,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 1.8979279355659195,
      "learning_rate": 0.623499426291799,
      "success": true,
      "log_likelihood": -60.40338747134796,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 1.0563328471711957,
      "learning_rate": 0.524147974504212,
      "success": true,
      "log_likelihood": -63.25813090928587,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 0.7518998641155881,
      "learning_rate": 0.9389282299998648,
      "success": true,
      "log_likelihood": -56.24287305854776,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 5.0,
      "learning_rate": 0.3703483283562711,
      "success": true,
      "log_likelihood": -45.86561980877291,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 1.4278859962990647,
      "learning_rate": 0.28147833083881,
      "success": true,
      "log_likelihood": -55.03366033252817,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 0.9543924630371319,
      "learning_rate": 0.22623742230129895,
      "success": true,
      "log_likelihood": -59.21483909623795,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 1.442307078884047,
      "learning_rate": 0.6616925389470024,
      "success": true,
      "log_likelihood": -68.91839757110729,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 2.5272316946787297,
      "learning_rate": 0.49998969520348846,
      "success": true,
      "log_likelihood": -54.20319478317026,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 3.1686322682459624,
      "learning_rate": 0.1701863614531487,
      "success": true,
      "log_likelihood": -51.196709273772164,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 0.0,
      "learning_rate": 0.007055953563405826,
      "success": true,
      "log_likelihood": -52.67186186302059,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 5.0,
      "learning_rate": 0.16556307844707718,
      "success": true,
      "log_likelihood": -43.165619810710076,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 0.2929744699451195,
      "learning_rate": 0.25942469454809347,
      "success": true,
      "log_likelihood": -53.13417004508059,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 1.0796601140369737,
      "learning_rate": 0.9494234952916941,
      "success": true,
      "log_likelihood": -58.13773881005915,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 1.6520276434711192,
      "learning_rate": 0.7402524148533502,
      "success": true,
      "log_likelihood": -57.01543541464501,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 5.0,
      "learning_rate": 0.21583290346540351,
      "success": true,
      "log_likelihood": -42.5656198108374,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 1.660407361445953,
      "learning_rate": 0.8299469375033244,
      "success": true,
      "log_likelihood": -57.5662193660792,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 3.928989499878671,
      "learning_rate": 0.9798442005049816,
      "success": true,
      "log_likelihood": -46.88503747454125,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 1.4495692963293059,
      "learning_rate": 0.1907459705622715,
      "success": true,
      "log_likelihood": -52.984952447145666,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 0.0,
      "learning_rate": 0.23546170835995484,
      "success": true,
      "log_likelihood": -49.296861864813174,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 0.1248858677580307,
      "learning_rate": 0.25651845069519974,
      "success": true,
      "log_likelihood": -52.198088012736974,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 1.2773783529426006,
      "learning_rate": 0.36306580714452086,
      "success": true,
      "log_likelihood": -53.66356472298787,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 0.0,
      "learning_rate": 0.13068780760747356,
      "success": true,
      "log_likelihood": -50.94686186319459,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 5.0,
      "learning_rate": 0.7929121918830813,
      "success": true,
      "log_likelihood": -46.01561980964165,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 5.0,
      "learning_rate": 0.028884502623462205,
      "success": true,
      "log_likelihood": -43.615619810617005,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 1.464185632475954,
      "learning_rate": 0.5766008278767764,
      "success": true,
      "log_likelihood": -55.616421724588506,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 0.36476606662162075,
      "learning_rate": 0.21359089987801128,
      "success": true,
      "log_likelihood": -53.98870909564944,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 1.290503613089638,
      "learning_rate": 0.5058129757292792,
      "success": true,
      "log_likelihood": -62.320975140629734,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 1.0332621604836911,
      "learning_rate": 0.7163313498644636,
      "success": true,
      "log_likelihood": -53.3715636034073,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 0.0,
      "learning_rate": 0.8524967220134483,
      "success": true,
      "log_likelihood": -48.62186186486333,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 5.0,
      "learning_rate": 0.3320511680791851,
      "success": true,
      "log_likelihood": -50.965619804022715,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 0.6854290850591847,
      "learning_rate": 0.2966243599412536,
      "success": true,
      "log_likelihood": -62.41848351865153,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 5.0,
      "learning_rate": 0.06741610625449701,
      "success": true,
      "log_likelihood": -42.56561981083739,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 1.2578853272213706,
      "learning_rate": 0.35398529607562323,
      "success": true,
      "log_likelihood": -61.67377765341813,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 0.0,
      "learning_rate": 0.3096317263400088,
      "success": true,
      "log_likelihood": -51.0968618635624,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 5.0,
      "learning_rate": 0.3303663870197432,
      "success": true,
      "log_likelihood": -48.11561980783468,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 1.602751852538241,
      "learning_rate": 0.703595933243777,
      "success": true,
      "log_likelihood": -51.447696814524214,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 0.751899333479518,
      "learning_rate": 0.5549286572544156,
      "success": true,
      "log_likelihood": -65.9928730549514,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 5.0,
      "learning_rate": 0.41813015293698863,
      "success": true,
      "log_likelihood": -43.01561981074432,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 0.7467466533605415,
      "learning_rate": 0.23411596605946383,
      "success": true,
      "log_likelihood": -57.87407223888735,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 2.778459660866287,
      "learning_rate": 0.8871597589997147,
      "success": true,
      "log_likelihood": -60.597601264091324,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 0.0,
      "learning_rate": 0.2730845735373325,
      "success": true,
      "log_likelihood": -47.94686186518108,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 1.6604087232178255,
      "learning_rate": 0.0037262541196758647,
      "success": true,
      "log_likelihood": -51.56621937342447,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    },
    {
      "alpha": 0.6449972233705217,
      "learning_rate": 0.17123356910009102,
      "success": true,
      "log_likelihood": -59.66759583316514,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 51
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "alpha": {
        "r": 0.9505157146741368,
        "p": 1.489423265541852e-51
      },
      "learning_rate": {
        "r": 0.054615890779070676,
        "p": 0.5894071024674292
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 113.49109511232878,
  "bic_error": "'ModelOutput' object has no attribute 'metrics'",
  "recovery_summary": "Parameter Recovery:\n- alpha: r = 0.951\n- learning_rate: r = 0.055",
  "previous_models": [
    "Specification: U_accept_t = split_self_t - alpha * max(V_t * combined_earning_t - split_self_t, 0)\nV_t+1 = V_t + learning_rate * ((split_self_t / combined_earning_t) - V_t)\nSummary: A two-parameter model of responder behavior in the ultimatum game where the utility for accepting an offer is computed as the monetary payoff diminished by an inequality aversion penalty. This penalty is proportional to the shortfall between the offer and a dynamically updated, learned expectation of fairness. The envy sensitivity (alpha) and learning rate are the only learnable parameters.\nBIC: 113.49109511232878\n\nParameter Recovery:\n- alpha: r = 0.951\n- learning_rate: r = 0.055"
  ]
}