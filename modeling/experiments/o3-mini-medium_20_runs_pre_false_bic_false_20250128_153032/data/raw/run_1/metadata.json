{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the given task. The model should obtain the utility, (not the probability of choosing an action).  Your goal is to eventually explore the entire space of possible explainations and mechanisms by which the observed behavior arises.\n\nYour model should use the given variables appropriately, but does not necessary need to use all or even most of the variables. Do not include the model for the utility of rejecting an offer. \n\nThe model should:\n1. Predict only responder behavior.\n2. Build on relevant psychological principles.\n3. Be considerate of high covariance between learnable parameters as the model\nwill have to pass parameter recovery tests.\n4. Be applicable to the dataset given within the task description (i.e. the model should be able to be run using only the provided dataset structure).\n5. Not include parameters to simulate general stochasticity of behavior, because this will be handled later by a temperature parameter.\n6. Should have no more than two learnable parameters.\n7. This specific model should calculate the utility of an action, which will then be used to determine\nthe probability of choosing that action. Negative values should represent a negative utility, and thus an unlikly action.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Use clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "learnable_parameters": {
    "alpha": {
      "description": "Learnable sensitivity to disadvantageous inequity; penalty weight when the offer is below the fair share",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": 0,
          "max": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "beta": {
      "description": "Learnable sensitivity to advantageous inequity; bonus weight when the offer exceeds the fair share",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": 0,
          "max": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "Let fair_share = (token_self / (token_self + token_opp)) \u00d7 combined_earning.\n\nThen, the utility of accepting is defined as:\n\u2003U_accept = { split_self \u2212 alpha \u00d7 (fair_share \u2212 split_self),\u2003if split_self < fair_share\n\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003 split_self + beta \u00d7 (split_self \u2212 fair_share),\u2003\u2003if split_self \u2265 fair_share }.",
  "variable_descriptions": {
    "U_accept": {
      "description": "Utility of accepting the offer, calculated from the offered share adjusted by fairness deviations",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "alpha": {
      "description": "Learnable sensitivity to disadvantageous inequity; penalty weight when the offer is below the fair share",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": 0,
          "max": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "beta": {
      "description": "Learnable sensitivity to advantageous inequity; bonus weight when the offer exceeds the fair share",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": 0,
          "max": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "token_self": {
      "description": "Number of tokens found by the participant; used to compute the fair share",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent; used to compute the fair share",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "combined_earning": {
      "description": "Total amount of money earned in the trial; each token is worth \u00a33",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "split_self": {
      "description": "Proposed monetary share for the participant (responder) in the trial",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "fair_share": {
      "description": "Computed fair share for the responder based on tokens contributed relative to the total and the combined earning",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "A piecewise linear utility model for responder behavior that computes a fairness benchmark from the proportion of tokens contributed relative to the total tokens and adjusts the offered share accordingly. When the offer is below fairness, a penalty weighted by parameter alpha is applied; when above, a bonus weighted by parameter beta is added. Only the utility of accepting is modeled, with two learnable parameters ensuring tractability in parameter recovery.",
  "full_reasoning": "Step-by-step reasoning:\n\n1. Key psychological mechanisms:\n\u2003\u2022 Responders compare the monetary share they are offered (split_self) to what they consider \u201cfair.\u201d Fairness is inferred from their contribution relative to the total contribution (i.e., token_self relative to token_self + token_opp) scaled by the total combined earnings.\n\u2003\u2022 When the offer is below the fairness benchmark, the responder feels disadvantageous inequity and this reduces the utility.\n\u2003\u2022 When the offer is above the fairness benchmark, responders might experience an extra \u201cbonus\u201d from getting more than what is fair (advantageous inequity), though this bonus is typically less pronounced.\n\n2. How these mechanisms interact:\n\u2003\u2022 A fair share (fair_share) is computed for each trial as the fraction of tokens found by the responder times the total combined earning.\n\u2003\u2022 The difference between the observed share (split_self) and the fair share is then weighted by a sensitivity parameter.\n\u2003\u2022 We use a piecewise function: if the offer is less than fair, a penalty is applied using a parameter alpha; if the offer exceeds the fair share, a bonus is applied using a parameter beta.\n\n3. Mathematical form:\n\u2003\u2022 Define fair_share = (token_self/(token_self + token_opp)) \u00d7 combined_earning.\n\u2003\u2022 Then, the utility of accepting (U_accept) is given by:\n\u2003\u2003\u2003\u2022 U_accept = split_self \u2212 alpha \u00d7 (fair_share \u2212 split_self) if split_self < fair_share,\n\u2003\u2003\u2003\u2022 U_accept = split_self + beta \u00d7 (split_self \u2212 fair_share) if split_self \u2265 fair_share.\n\u2003\u2022 This formulation ensures that when the proposal is below fairness, the utility is penalized (potentially negative) and when above, a bonus is accorded. Both alpha and beta are learnable parameters with finite generous bounds.\n\n4. Learnable parameters:\n\u2003\u2022 alpha: a nonnegative parameter capturing sensitivity to disadvantageous inequity. (Bounds: 0 to 10)\n\u2003\u2022 beta: a nonnegative parameter capturing sensitivity (or bonus) when the offer is above the fair share. (Bounds: 0 to 10)\n\n5. Mapping to observable behavior:\n\u2003\u2022 The model uses the observed split self (the money offered to the responder), tokens found by the self and opponent (to compute fair share), and the total combined earning. The computed U_accept will then serve as the basis (before being passed through a softmax or logistic function with an external temperature parameter) for predicting the likelihood of acceptance.\n\nBelow is the formal model specification.\n\n<MODEL>\nLet fair_share = (token_self / (token_self + token_opp)) \u00d7 combined_earning.\n\nThen, the utility of accepting is defined as:\n\u2003U_accept = { split_self \u2212 alpha \u00d7 (fair_share \u2212 split_self),\u2003if split_self < fair_share\n\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003 split_self + beta \u00d7 (split_self \u2212 fair_share),\u2003\u2003if split_self \u2265 fair_share }.\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_accept\": {\n      \"description\": \"Utility of accepting the offer, calculated from the offered share adjusted by fairness deviations\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"alpha\": {\n      \"description\": \"Learnable sensitivity to disadvantageous inequity; penalty weight when the offer is below the fair share\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta\": {\n      \"description\": \"Learnable sensitivity to advantageous inequity; bonus weight when the offer exceeds the fair share\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant; used to compute the fair share\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent; used to compute the fair share\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total amount of money earned in the trial; each token is worth \u00a33\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed monetary share for the participant (responder) in the trial\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"fair_share\": {\n      \"description\": \"Computed fair share for the responder based on tokens contributed relative to the total and the combined earning\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<SUMMARY>\nA piecewise linear utility model for responder behavior that computes a fairness benchmark from the proportion of tokens contributed relative to the total tokens and adjusts the offered share accordingly. When the offer is below fairness, a penalty weighted by parameter alpha is applied; when above, a bonus weighted by parameter beta is added. Only the utility of accepting is modeled, with two learnable parameters ensuring tractability in parameter recovery.\n</SUMMARY>",
  "simulation_code": "def simulate_model(trial_data, alpha=1, beta=1):\n    utility_values = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n        split_self = trial.get(\"split_self\", 0)\n\n        if token_self + token_opp ==0: #Handle the case of zero tokens\n            fair_share = 0\n        else:\n            fair_share = (token_self / (token_self + token_opp)) * combined_earning\n\n        if split_self < fair_share:\n            utility = split_self - alpha * (fair_share - split_self)\n        else:\n            utility = split_self + beta * (split_self - fair_share)\n        utility_values.append(utility)\n    return utility_values",
  "fitting_results": [
    {
      "alpha": 7.684312838447952,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -12.01254770391648,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.55122680802781,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -16.12810534429558,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.641894750190146,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -12.291693276288646,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.8940784012771226,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -13.781131943245498,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 2.260006613843151,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -10.921060668962319,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.1121988017718076,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -13.48443658351509,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -6.705200070342561,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0595197508933494,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -13.548727215630565,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -6.7052000703425625,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 2.406379587452388,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -11.422462132098982,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 2.2067893537794725,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -8.891012288459956,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 6.225876574154298,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -11.971441566213162,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 2.3907688136661536,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -10.177353791433315,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -6.70520007034256,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -6.705200070342559,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -6.70520007034256,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -6.705200070342559,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.1880743806507752,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -10.035167957606616,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.1549961644158545,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -10.650259326818743,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -6.70520007034256,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.4665798850812284,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -15.385704911720513,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.2655518902472928,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -11.470605739839124,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.818896712705671,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -18.494776404067146,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.3057245789910081,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -16.85680528271095,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.884370278746212,
      "beta": 9.532006425508426,
      "success": true,
      "log_likelihood": -13.999078642728675,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.2002228174332008,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -15.397474209841873,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.3742015792971995,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -13.426564114356102,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 4.4192162432580275,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -5.453402660523607,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.1111504946462088,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -11.415175030600027,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.5108860874817565,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -16.031731111894384,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -6.705200070342559,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 7.684310718872445,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -12.012547703917168,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.446244890430059,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -21.9383918781566,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 2.0391824576454853,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -15.167839084573068,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -6.705200070342561,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.8212818427867975,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -14.670830740577816,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.900750202310267,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -12.298340192861534,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.7397888586380041,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -14.370531530504753,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.924700423809658,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -17.581077047686748,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -10.605200069034561,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.1777500094693383,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -17.554161957623446,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 3.589711989338108,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -13.291639406598481,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -9.405200068861307,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.223030457456471,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -16.233994778598028,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.1283364882670872,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -14.50737935815706,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.5151316426834243,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -15.91825544129105,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.4665782085369117,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -15.385704912767059,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.7229092370730594,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -19.280230889493758,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 2.5053778481638287,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -11.367675483030558,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.8629952571270125,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -25.972360048815062,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.6826040320368248,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -17.242768978221484,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 3.6878869820371314,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -19.140847876384836,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.1337501034278994,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -18.84755116666428,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.7354869048251951,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -22.249623564983008,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.9336238563837802,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -20.407010251430105,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 3.2624877666879772,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -6.9426846446758566,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 3.4145797063050263,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -10.141633926636386,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -13.530200067657775,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 5.638617443161768,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -13.52829870548366,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.20201608311545535,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -14.266280320902704,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.9587243604478356,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -19.561704064449785,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.7229091989010252,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -14.780230892639834,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 7.684307821208348,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -12.012547703919541,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.367837219244904,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -21.104390412304863,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 3.6878817226732883,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -11.095918076242953,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.2637963170286202,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -15.056251576256447,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -10.155200069450347,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.1973833658404857,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -12.856257889270648,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0699239005128092,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -16.23901972283389,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -11.805200067831793,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -2.1417362922681558,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 3.9730188454768216,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -17.331392329366498,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.3999610656093562,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -15.71045163832229,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.30972107855447145,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -15.004825918789399,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.133751468056583,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -24.34248097277771,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.9198874929801585,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -14.72524902707798,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -9.480200069500505,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 7.005572247067074,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -17.012334394248146,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.626189752576652,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -23.355741255508388,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 7.684314487076083,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -12.012547703916557,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0543413456940516,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -24.202996905389885,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -11.955200068199591,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 5.4737635851097295,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -14.769930322931316,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.4529711637653904,
      "beta": 9.472650407490478,
      "success": true,
      "log_likelihood": -12.756097248780952,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.7266108477948401,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -26.46435075416855,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 7.684306816202471,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -9.967617895395538,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.7667714269199936,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -17.785366178477048,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 3.4559788652861907,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -15.303926995487528,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -8.80520006981828,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.3679020858383755,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -15.104390440710311,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.5491376457904007,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -20.998979152053984,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "alpha": {
        "r": 0.9256313814858972,
        "p": 3.803984200637386e-43
      },
      "beta": {
        "r": 0.17932699931243412,
        "p": 0.0742247258433765
      }
    }
  },
  "bic_results": {
    "average_bic": 34.88900523391942,
    "individual_bics": [
      31.192133284745182,
      39.42324856550338,
      31.750424429489513,
      34.729301763403214,
      29.009159214836856,
      34.1359110439424,
      20.57743801759734,
      34.26449230817335,
      20.577438017597345,
      30.011962141110182,
      24.949062453832134,
      31.109921009338542,
      27.52174545977885,
      20.577438017597338,
      20.577438017597338,
      20.577438017597338,
      20.577438017597338,
      27.237373792125453,
      28.467556530549707,
      20.577438017597338,
      37.938447700353244,
      30.10824935659047,
      44.15659068504651,
      40.88064844233412,
      35.16519516236957,
      37.96198629659597,
      34.020166105624426,
      18.073843197959434,
      29.997387938112276,
      39.230500100700986,
      20.577438017597338,
      31.192133284746554,
      51.04382163322542,
      37.50271604605835,
      20.57743801759734,
      36.50869935806785,
      31.763718262635287,
      35.90810093792172,
      42.32919197228571,
      28.377438014981344,
      42.27536179215911,
      33.75031669010918,
      25.977438014634835,
      39.635027434108274,
      36.18179659322634,
      39.00354875949432,
      37.93844770244634,
      45.727499655899734,
      29.902388842973338,
      59.11175797454234,
      41.652575833355186,
      45.44873362968189,
      44.86214021024078,
      51.66628500687823,
      47.98105837977243,
      21.052407166263933,
      27.450305730184994,
      34.22743801222777,
      34.22363528787954,
      35.69959851871763,
      46.29044600581179,
      36.72749966219189,
      31.1921332847513,
      49.37581870152194,
      29.358874029398123,
      37.27954102942511,
      27.477438015812915,
      32.87955365545351,
      39.64507732258,
      30.777438012575807,
      11.45051046144853,
      41.829822535645214,
      38.5879411535568,
      37.17668971449102,
      55.85199982246764,
      36.61753593106818,
      26.127438015913228,
      41.19170666540851,
      53.878520387928994,
      31.19213328474533,
      55.57303168769199,
      31.0774380133114,
      36.70689852277485,
      32.679232374474125,
      60.09573938524932,
      27.102273667703294,
      42.737770233866314,
      37.77489186788728,
      24.77743801654878,
      37.37581875833284,
      49.164996181020186
    ],
    "num_parameters": 2,
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n)"
  }
}