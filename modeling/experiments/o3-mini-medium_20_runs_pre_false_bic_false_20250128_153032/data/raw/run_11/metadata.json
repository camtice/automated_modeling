{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the given task. The model should obtain the utility, (not the probability of choosing an action).  Your goal is to eventually explore the entire space of possible explainations and mechanisms by which the observed behavior arises.\n\nYour model should use the given variables appropriately, but does not necessary need to use all or even most of the variables. Do not include the model for the utility of rejecting an offer. \n\nThe model should:\n1. Predict only responder behavior.\n2. Build on relevant psychological principles.\n3. Be considerate of high covariance between learnable parameters as the model\nwill have to pass parameter recovery tests.\n4. Be applicable to the dataset given within the task description (i.e. the model should be able to be run using only the provided dataset structure).\n5. Not include parameters to simulate general stochasticity of behavior, because this will be handled later by a temperature parameter.\n6. Should have no more than two learnable parameters.\n7. This specific model should calculate the utility of an action, which will then be used to determine\nthe probability of choosing that action. Negative values should represent a negative utility, and thus an unlikly action.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Use clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "learnable_parameters": {
    "bias": {
      "description": "Baseline utility parameter reflecting inherent preference to accept offers",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "fairness_weight": {
      "description": "Sensitivity parameter for the shortfall of the offer from the fair share",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "U_accept = bias + split_self - fairness_weight * max((token_self / (token_self + token_opp)) * combined_earning - split_self, 0)",
  "variable_descriptions": {
    "U_accept": {
      "description": "Computed utility of accepting an offer",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "bias": {
      "description": "Baseline utility parameter reflecting inherent preference to accept offers",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "fairness_weight": {
      "description": "Sensitivity parameter for the shortfall of the offer from the fair share",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "split_self": {
      "description": "Proposed share for the participant (in \u00a3)",
      "range": {
        "min": 0,
        "max": "combined_earning",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Number of tokens found by the participant (pre-task measure of contribution)",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent (pre-task measure of contribution)",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "combined_earning": {
      "description": "Total amount of money earned in the trial (each token is worth \u00a33)",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    }
  },
  "model_summary": "A utility model for responder behavior that computes the utility of accepting an offer as the sum of a baseline bias and the actual offer amount, penalized by the extent to which the offer falls below the fair share (calculated from the participant\u2019s token count relative to total tokens and the combined earnings). Two learnable parameters (bias and fairness_weight) calibrate this trade-off.",
  "full_reasoning": "Step-by-step reasoning:\n1. Key psychological mechanisms: Responder behavior is driven by self\u2010interest (the absolute amount offered) and fairness considerations based on the relative entitlement derived from pre\u2010task tokens. In other words, responders compare the actual offer (split_self) to what they consider fair given their contribution relative to their opponent\u2019s (token_self and token_opp) and the combined pot (combined_earning).\n\n2. How these mechanisms interact: The base utility increases with the absolute amount the participant receives (split_self). However, if the offer is less than what would be fair (i.e. the proportional allocation of combined_earning according to tokens), then a fairness penalty is applied. This penalty is scaled by a fairness sensitivity parameter. An additional bias parameter (baseline) is added to capture any inherent preference for accepting offers regardless of fairness level.\n\n3. Mathematical form capturing these interactions: Compute the fair share as \n\u2003\u2003fair_share = (token_self / (token_self + token_opp)) \u00d7 combined_earning.\nThen, the utility of accepting (U_accept) is the sum of a baseline (bias) plus the offer (split_self) minus a penalty when the offer falls short of the fair share. That is,\n\u2003\u2003U_accept = bias + split_self \u2013 fairness_weight \u00d7 max(fair_share \u2013 split_self, 0).\n\n4. Required parameters: Two learnable parameters are used:\n\u2003\u2022 fairness_weight (representing sensitivity to deviations from fairness; penalty for receiving less than one\u2019s fair share) \n\u2003\u2022 bias (a baseline utility parameter)\n\n5. Mapping to observable behavior: The computed utility U_accept (which can be negative) is derived solely from observable variables in the dataset (token_self, token_opp, combined_earning, and split_self) and the two learnable parameters. This utility form can be incorporated into any softmax\u2010 or threshold\u2010based choice model (once temperature is added externally) to predict acceptance behavior.\n\nBelow is the formal mathematical model specification and the JSON variable descriptions.\n\n<MODEL>\nU_accept = bias + split_self - fairness_weight * max((token_self / (token_self + token_opp)) * combined_earning - split_self, 0)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_accept\": {\n      \"description\": \"Computed utility of accepting an offer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"bias\": {\n      \"description\": \"Baseline utility parameter reflecting inherent preference to accept offers\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"fairness_weight\": {\n      \"description\": \"Sensitivity parameter for the shortfall of the offer from the fair share\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant (in \u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"combined_earning\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant (pre-task measure of contribution)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent (pre-task measure of contribution)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total amount of money earned in the trial (each token is worth \u00a33)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<SUMMARY>\nA utility model for responder behavior that computes the utility of accepting an offer as the sum of a baseline bias and the actual offer amount, penalized by the extent to which the offer falls below the fair share (calculated from the participant\u2019s token count relative to total tokens and the combined earnings). Two learnable parameters (bias and fairness_weight) calibrate this trade-off.\n</SUMMARY>",
  "simulation_code": "def simulate_model(trial_data, bias=0, fairness_weight=1):\n    utility_values = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0)\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n\n        if token_self + token_opp ==0: # Handle division by zero\n          fair_share = 0\n        else:\n          fair_share = (token_self / (token_self + token_opp)) * combined_earning\n\n        utility = bias + split_self - fairness_weight * max(fair_share - split_self, 0)\n        utility_values.append(utility)\n    return utility_values",
  "fitting_results": [
    {
      "bias": -6.383025291097116,
      "fairness_weight": 2.0466073254950086,
      "success": true,
      "log_likelihood": -6.173579779352129,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 0.7504301066448522,
      "fairness_weight": 1.7915462553698196,
      "success": true,
      "log_likelihood": -16.270977859998712,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 4.011763667544958,
      "fairness_weight": 2.972287057270833,
      "success": true,
      "log_likelihood": -10.705124853412482,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": -0.5043097148224894,
      "fairness_weight": 1.7204429694359193,
      "success": true,
      "log_likelihood": -13.97437652064758,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 5.316381089535106,
      "fairness_weight": 4.399485649387552,
      "success": true,
      "log_likelihood": -8.65234168728625,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 4.424289125435423,
      "fairness_weight": 2.3978023184222748,
      "success": true,
      "log_likelihood": -11.58530827595819,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 10.0,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -0.05368990312462738,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 7.075160299340451,
      "fairness_weight": 3.0901339633925797,
      "success": true,
      "log_likelihood": -10.061812595939534,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 10.0,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -0.05368990312462738,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 1.48680623181261,
      "fairness_weight": 3.0089669959447347,
      "success": true,
      "log_likelihood": -11.344160536752408,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 4.354173963446688,
      "fairness_weight": 3.91343703890838,
      "success": true,
      "log_likelihood": -7.195897903713794,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": -5.433370560170794,
      "fairness_weight": 2.072417604200628,
      "success": true,
      "log_likelihood": -7.266370666375071,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 3.7486143972902766,
      "fairness_weight": 3.94667742026521,
      "success": true,
      "log_likelihood": -8.91527377294295,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 10.0,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -0.05368990312462738,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 10.0,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -0.053689903124627375,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 10.0,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -0.05368990312462739,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 10.0,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -0.05368990312462736,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 5.096768719801006,
      "fairness_weight": 1.3559282337889063,
      "success": true,
      "log_likelihood": -7.810408866253761,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 10.0,
      "fairness_weight": 2.3843084258726877,
      "success": true,
      "log_likelihood": -5.535674496555384,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 10.0,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -0.05368990312462737,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 3.5079418933551354,
      "fairness_weight": 2.578738353370186,
      "success": true,
      "log_likelihood": -14.111937506647674,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 9.052268716651392,
      "fairness_weight": 2.3455339717086785,
      "success": true,
      "log_likelihood": -7.269052711858584,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": -2.9035744646562764,
      "fairness_weight": 0.8671318899901378,
      "success": true,
      "log_likelihood": -16.566148628982397,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": -0.18780029062943715,
      "fairness_weight": 1.249384856781061,
      "success": true,
      "log_likelihood": -17.094280890090435,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 5.683076840045226,
      "fairness_weight": 3.9068481069441794,
      "success": true,
      "log_likelihood": -11.357401389845142,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 1.4479358905376405,
      "fairness_weight": 1.627429970957035,
      "success": true,
      "log_likelihood": -15.285214365647112,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 2.0142611967861126,
      "fairness_weight": 1.995919755022301,
      "success": true,
      "log_likelihood": -13.045078510296047,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 4.76550181899772,
      "fairness_weight": 8.233950572023389,
      "success": true,
      "log_likelihood": -4.502011539608337,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 8.148700391931303,
      "fairness_weight": 1.9225914871694514,
      "success": true,
      "log_likelihood": -7.721295028311757,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 3.7100842261213938,
      "fairness_weight": 1.430112945727508,
      "success": true,
      "log_likelihood": -14.579062506116829,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 10.0,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -0.05368990312462736,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": -6.3830214845744155,
      "fairness_weight": 2.046600628715482,
      "success": true,
      "log_likelihood": -6.173579779317623,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": -3.037442000974247,
      "fairness_weight": 0.5323875662610168,
      "success": true,
      "log_likelihood": -19.628153076342038,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": -0.8234433626725165,
      "fairness_weight": 1.7464549348592904,
      "success": true,
      "log_likelihood": -15.272874130843173,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 10.0,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -0.05368990312462737,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": -0.11261041562513374,
      "fairness_weight": 0.7912489642336896,
      "success": true,
      "log_likelihood": -14.912963604132376,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 5.229955167294607,
      "fairness_weight": 2.339121366702096,
      "success": true,
      "log_likelihood": -9.871733052147997,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 2.9562757674891134,
      "fairness_weight": 2.7423608180914822,
      "success": true,
      "log_likelihood": -13.470235227339405,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 2.8205943594916407,
      "fairness_weight": 1.7034700752345093,
      "success": true,
      "log_likelihood": -16.701738386411876,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 4.8812127443620765,
      "fairness_weight": 0.9230348276901592,
      "success": true,
      "log_likelihood": -8.611832350500787,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 3.07592550967785,
      "fairness_weight": 2.084706389448982,
      "success": true,
      "log_likelihood": -16.533027744721107,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": -2.7640104867946165,
      "fairness_weight": 2.175815820442329,
      "success": true,
      "log_likelihood": -12.074128774437215,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 5.228592876199723,
      "fairness_weight": 0.3617419278839324,
      "success": true,
      "log_likelihood": -5.689521157509816,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 0.26831213833897005,
      "fairness_weight": 1.30215474520076,
      "success": true,
      "log_likelihood": -16.46445310920819,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 2.2091556506541887,
      "fairness_weight": 1.7702124170812659,
      "success": true,
      "log_likelihood": -14.005244949990487,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 0.23081728431445528,
      "fairness_weight": 0.5726147210882865,
      "success": true,
      "log_likelihood": -16.15186322124624,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 1.410050669675296,
      "fairness_weight": 1.9105875696774224,
      "success": true,
      "log_likelihood": -15.298730423154106,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": -2.4728000621129027,
      "fairness_weight": 0.9246532970701594,
      "success": true,
      "log_likelihood": -17.9743700313045,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 5.63821032361222,
      "fairness_weight": 5.004195049784368,
      "success": true,
      "log_likelihood": -9.068765076559053,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": -3.267943634900779,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -22.687410151792967,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 0.8509986607031202,
      "fairness_weight": 0.9026881039976772,
      "success": true,
      "log_likelihood": -17.347443598654564,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": -6.051922339793864,
      "fairness_weight": 0.9038037163932572,
      "success": true,
      "log_likelihood": -11.40972787270797,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": -1.5237234935302322,
      "fairness_weight": 0.6997686990827224,
      "success": true,
      "log_likelihood": -18.503211033596436,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": -2.5845689863801913,
      "fairness_weight": 0.06616249609986607,
      "success": true,
      "log_likelihood": -20.285118909579666,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": -1.3929421322071949,
      "fairness_weight": 1.45448972667259,
      "success": true,
      "log_likelihood": -20.220164286662566,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 3.3669574402216402,
      "fairness_weight": 5.1627345273395155,
      "success": true,
      "log_likelihood": -6.1895173035447115,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": -0.5049717534040795,
      "fairness_weight": 3.1471887954693973,
      "success": true,
      "log_likelihood": -10.347224413414379,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 1.0428655453343958,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -13.253874573851178,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": -5.742872293720217,
      "fairness_weight": 1.724070907280719,
      "success": true,
      "log_likelihood": -7.9166412839703,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 0.727328276941541,
      "fairness_weight": 0.37497652417652544,
      "success": true,
      "log_likelihood": -14.410592901961081,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 0.09545556623671415,
      "fairness_weight": 0.9850836765624833,
      "success": true,
      "log_likelihood": -19.804703708897136,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 2.7164341202465763,
      "fairness_weight": 2.6392934824178074,
      "success": true,
      "log_likelihood": -14.023778633648037,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": -6.383010545593958,
      "fairness_weight": 2.0466074552565825,
      "success": true,
      "log_likelihood": -6.173579779332636,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": -2.640878209950809,
      "fairness_weight": 0.5831601456051158,
      "success": true,
      "log_likelihood": -19.449797917085537,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": -2.5984517978958714,
      "fairness_weight": 2.3152423407483553,
      "success": true,
      "log_likelihood": -10.087469877922842,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 0.6828172831403964,
      "fairness_weight": 1.4676949269049449,
      "success": true,
      "log_likelihood": -15.213118564200593,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 5.82966204445607,
      "fairness_weight": 1.1565756083889172,
      "success": true,
      "log_likelihood": -7.695481950359217,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 5.401709484781911,
      "fairness_weight": 1.435358368345691,
      "success": true,
      "log_likelihood": -10.451133985013694,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": -1.0588880560293858,
      "fairness_weight": 0.7717366457069369,
      "success": true,
      "log_likelihood": -16.21173823594241,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 3.0306061765719154,
      "fairness_weight": 0.42438719401634434,
      "success": true,
      "log_likelihood": -10.608905773254671,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": -2.1949043204332233,
      "fairness_weight": 10.0,
      "success": true,
      "log_likelihood": -1.6526045746690596,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": -5.717162361842106,
      "fairness_weight": 1.139916416001235,
      "success": true,
      "log_likelihood": -10.652727439382753,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 0.6906634382891395,
      "fairness_weight": 1.613149987621956,
      "success": true,
      "log_likelihood": -15.86673531352122,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 0.5330385243446466,
      "fairness_weight": 0.4379196503318574,
      "success": true,
      "log_likelihood": -15.192972651265999,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": -2.3833347615721725,
      "fairness_weight": 0.4605331588314838,
      "success": true,
      "log_likelihood": -22.772649824991312,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 5.9997761391096045,
      "fairness_weight": 2.579007704561063,
      "success": true,
      "log_likelihood": -11.835130093712623,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 6.361689853131226,
      "fairness_weight": 1.0318263169852508,
      "success": true,
      "log_likelihood": -6.528380514098152,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": -8.506780175219188,
      "fairness_weight": 0.9443945367596911,
      "success": true,
      "log_likelihood": -6.592360166203553,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": -2.493233999373474,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -21.686735352219177,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": -6.383020696163503,
      "fairness_weight": 2.046594387154617,
      "success": true,
      "log_likelihood": -6.1735797793272145,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": -2.066642749532035,
      "fairness_weight": 0.4793544327283499,
      "success": true,
      "log_likelihood": -23.288950504670808,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 1.7057879178623956,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -10.998506324686982,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": -5.837920501722888,
      "fairness_weight": 1.6268302818513618,
      "success": true,
      "log_likelihood": -8.867253734892872,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": -0.12589002036522445,
      "fairness_weight": 1.4138443008193808,
      "success": true,
      "log_likelihood": -12.996341724791224,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": -1.8498025940919363,
      "fairness_weight": 0.247045214567939,
      "success": true,
      "log_likelihood": -25.769436374460742,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": -4.767743856694995,
      "fairness_weight": 3.020289331053191,
      "success": true,
      "log_likelihood": -7.157681751131203,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 2.037064490659314,
      "fairness_weight": 1.3058152621571644,
      "success": true,
      "log_likelihood": -17.362656499136452,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": -2.9946925745899398,
      "fairness_weight": 1.989246024888871,
      "success": true,
      "log_likelihood": -13.517243682523702,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 8.875017945434902,
      "fairness_weight": 1.5826739192374706,
      "success": true,
      "log_likelihood": -4.9845116842830555,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": -1.7739919218025797,
      "fairness_weight": 0.835363210170868,
      "success": true,
      "log_likelihood": -14.556905243672908,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": -0.5405665470189444,
      "fairness_weight": 0.4135218452577471,
      "success": true,
      "log_likelihood": -21.17481215958817,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "bias": {
        "r": 0.9258182932992319,
        "p": 3.3780554518968894e-43
      },
      "fairness_weight": {
        "r": 0.7322877310621811,
        "p": 4.84155283321079e-18
      }
    }
  },
  "bic_results": {
    "average_bic": 30.185236212395782,
    "individual_bics": [
      19.514197435616477,
      39.70899359690964,
      28.57728758373718,
      35.11579091820738,
      24.471721251484723,
      30.3376544288286,
      7.274417683161475,
      27.29066306879129,
      7.274417683161475,
      29.855358950417035,
      21.55883368433981,
      21.69977920966236,
      24.997585422798117,
      7.274417683161475,
      7.274417683161475,
      7.274417683161475,
      7.274417683161475,
      22.787855609419744,
      18.238386870022985,
      7.274417683161475,
      35.39091289020757,
      21.705143300629388,
      40.29933513487701,
      41.35559965709309,
      29.881840656602506,
      37.73746660820645,
      33.25719489750431,
      16.171060956128894,
      22.609627933535734,
      36.32516288914588,
      7.274417683161475,
      19.514197435547466,
      46.423344029596294,
      37.71278613859857,
      7.274417683161475,
      36.99296508517697,
      26.910503981208215,
      34.10750833159103,
      40.57051464973597,
      24.390702577913792,
      40.23309336635443,
      31.31529542578665,
      18.54608019193185,
      40.0959440953286,
      35.17752777689319,
      39.4707643194047,
      37.764498723220434,
      43.115777939521216,
      25.304568030030325,
      52.54185818049815,
      41.86192507422135,
      29.98649362232816,
      44.17345994410509,
      47.73727569607155,
      47.60736645023735,
      19.54607248400164,
      27.86148670374098,
      33.674787024614574,
      23.000320444852818,
      35.98822368083438,
      46.77644529470649,
      35.214595144208296,
      19.514197435577493,
      46.06663371108329,
      27.341977632757903,
      37.59327500531341,
      22.558001777630654,
      28.069305846939606,
      39.590514348797036,
      28.384849423421564,
      10.47224702625034,
      28.472492755677727,
      38.90050850395466,
      37.55298317944422,
      52.71233752689484,
      30.837298064337467,
      20.223798905108524,
      20.35175820931933,
      50.54050858135057,
      19.51419743556665,
      53.744938886253834,
      29.164050526286182,
      24.901545346697965,
      33.15972132649467,
      58.7059106258337,
      21.482401379174625,
      41.89235087518512,
      34.20152524195962,
      17.13606124547833,
      36.280848364258034,
      49.51666219608856
    ],
    "num_parameters": 2,
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n)"
  }
}