{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the given task. The model should obtain the utility, (not the probability of choosing an action).  Your goal is to eventually explore the entire space of possible explainations and mechanisms by which the observed behavior arises.\n\nYour model should use the given variables appropriately, but does not necessary need to use all or even most of the variables. Do not include the model for the utility of rejecting an offer. \n\nThe model should:\n1. Predict only responder behavior.\n2. Build on relevant psychological principles.\n3. Be considerate of high covariance between learnable parameters as the model\nwill have to pass parameter recovery tests.\n4. Be applicable to the dataset given within the task description (i.e. the model should be able to be run using only the provided dataset structure).\n5. Not include parameters to simulate general stochasticity of behavior, because this will be handled later by a temperature parameter.\n6. Should have no more than two learnable parameters.\n7. This specific model should calculate the utility of an action, which will then be used to determine\nthe probability of choosing that action. Negative values should represent a negative utility, and thus an unlikly action.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Use clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "learnable_parameters": {
    "lambda_param": {
      "description": "Learnable sensitivity parameter for disadvantageous inequity (penalty when the offer is below the fairness reference).",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "xi_param": {
      "description": "Learnable sensitivity parameter for advantageous inequity (additional utility for offers exceeding the fairness reference).",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "Let fair_share = (token_self / (token_self + token_opp)) * combined_earning.\n\nThen the utility for accepting an offer, U_accept, is defined piecewise as:\n\n\u2003\u2003U_accept = { \n\u2003\u2003\u2003\u2003split_self - lambda_param * (fair_share - split_self),   if split_self < fair_share,\n\u2003\u2003\u2003\u2003split_self + xi_param * (split_self - fair_share),         if split_self \u2265 fair_share.\n\u2003\u2003}",
  "variable_descriptions": {
    "U_accept": {
      "description": "Utility of accepting the proposal, computed as the offered amount adjusted for deviations from the fairness reference.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "split_self": {
      "description": "Monetary share proposed to the participant (in \u00a3).",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Number of tokens found by the participant.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "combined_earning": {
      "description": "Total money earned in the trial (each token is worth \u00a33).",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "lambda_param": {
      "description": "Learnable sensitivity parameter for disadvantageous inequity (penalty when the offer is below the fairness reference).",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "xi_param": {
      "description": "Learnable sensitivity parameter for advantageous inequity (additional utility for offers exceeding the fairness reference).",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "fair_share": {
      "description": "Reference amount representing the fair share, computed as the ratio of token_self to total tokens times the combined earning.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "A piecewise linear utility model for responder behavior that judges proposals based on a fairness reference computed from token contributions and total earnings. Offers below the fair share incur a penalty weighted by lambda_param, whereas offers above fairness receive a boost weighted by xi_param. Only responder acceptance is modeled with two learnable parameters.",
  "full_reasoning": "Step 1. Key psychological mechanisms  \n\u2022 A responder judges an offer by comparing the amount proposed (split_self) to a \u201cfair\u201d share. The fair share is determined by the relative token contributions of the participant versus the opponent.  \n\u2022 When the proposed share is below the fair share, the responder is assumed to feel disadvantaged or \u201cenvy\u2010like\u201d and this reduces the utility of accepting the offer. Conversely, when the proposed share exceeds the fair share the responder may experience a small boost (or at least no penalty) due to the \u201cadvantageous inequity\u201d even though\u2014empirically\u2014very generous offers are rarely penalized.  \n\u2022 This fairness comparison draws on principles seen in models of inequity aversion and social utility: one parameter (\u03bb_param) governs sensitivity (or aversion) to disadvantageous inequity, and a second parameter (xi_param) can capture any change in utility when the offer is above what is \u201cfair.\u201d  \n\nStep 2. How these mechanisms interact  \n\u2022 For each trial, the \u201cfair share\u201d is computed as the ratio of the participant\u2019s token contribution to the total tokens, multiplied by the combined monetary earning.  \n\u2022 If the offer received is less than this fair share, then the utility is penalized by the shortfall weighted by \u03bb_param.  \n\u2022 If the offer is at least fair, then any surplus above the fair share increases the utility, but only modestly, weighted by xi_param.  \n\nStep 3. Mathematical form  \n\u2022 Define fair_share = (token_self/(token_self + token_opp)) \u00d7 combined_earning.  \n\u2022 Then, using indicator functions (or a piecewise definition), the utility for acceptance (U_accept) is given by:  \n\u2003\u2003\u2022 U_accept = split_self \u2212 \u03bb_param \u00d7 (fair_share \u2212 split_self) when split_self < fair_share  \n\u2003\u2003\u2022 U_accept = split_self + xi_param \u00d7 (split_self \u2212 fair_share) when split_self \u2265 fair_share  \n\nStep 4. Learnable parameters  \n\u2022 \u03bb_param captures sensitivity to offers perceived as unfairly low (disadvantageous inequity aversion).  \n\u2022 xi_param governs the additional utility (if any) for offers that exceed fairness (advantageous inequity) and is expected to be smaller, possibly near zero.  \n\u2022 Both parameters have generous, finite numerical bounds.  \n\nStep 5. Mapping to observable behavior  \n\u2022 The observable split_self given in the data and the token counts allow the computation of the fairness reference.  \n\u2022 The model then produces a utility value U_accept for the accepted offer option, which can subsequently be combined with a temperature parameter (introduced later) to derive the probability of acceptance.  \n\u2022 Only responder behavior is modeled. Offers (for which \u201caccept\u201d is 0 or 1 in the data) can be compared on the basis of their computed acceptance utility.\n\nBelow is the formal specification.\n\n<MODEL>\nLet fair_share = (token_self / (token_self + token_opp)) * combined_earning.\n\nThen the utility for accepting an offer, U_accept, is defined piecewise as:\n\n\u2003\u2003U_accept = { \n\u2003\u2003\u2003\u2003split_self - lambda_param * (fair_share - split_self),   if split_self < fair_share,\n\u2003\u2003\u2003\u2003split_self + xi_param * (split_self - fair_share),         if split_self \u2265 fair_share.\n\u2003\u2003}\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_accept\": {\n      \"description\": \"Utility of accepting the proposal, computed as the offered amount adjusted for deviations from the fairness reference.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"split_self\": {\n      \"description\": \"Monetary share proposed to the participant (in \u00a3).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total money earned in the trial (each token is worth \u00a33).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"lambda_param\": {\n      \"description\": \"Learnable sensitivity parameter for disadvantageous inequity (penalty when the offer is below the fairness reference).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"xi_param\": {\n      \"description\": \"Learnable sensitivity parameter for advantageous inequity (additional utility for offers exceeding the fairness reference).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"fair_share\": {\n      \"description\": \"Reference amount representing the fair share, computed as the ratio of token_self to total tokens times the combined earning.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<SUMMARY>\nA piecewise linear utility model for responder behavior that judges proposals based on a fairness reference computed from token contributions and total earnings. Offers below the fair share incur a penalty weighted by lambda_param, whereas offers above fairness receive a boost weighted by xi_param. Only responder acceptance is modeled with two learnable parameters.\n</SUMMARY>",
  "simulation_code": "def simulate_model(trial_data, lambda_param=1, xi_param=1):\n    utility_values = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n        split_self = trial.get(\"split_self\", 0)\n\n        if token_self + token_opp ==0: #Handle division by zero\n            fair_share = 0\n        else:\n            fair_share = (token_self / (token_self + token_opp)) * combined_earning\n\n        if split_self < fair_share:\n            utility = split_self - lambda_param * (fair_share - split_self)\n        else:\n            utility = split_self + xi_param * (split_self - fair_share)\n        utility_values.append(utility)\n    return utility_values",
  "fitting_results": [
    {
      "lambda_param": 7.684312340644461,
      "xi_param": 0.0,
      "success": true,
      "log_likelihood": -12.012547703916562,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.5512267440758647,
      "xi_param": 10.0,
      "success": true,
      "log_likelihood": -16.12810534429557,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.6418941438789922,
      "xi_param": 10.0,
      "success": true,
      "log_likelihood": -12.291693276286944,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.8940785570827825,
      "xi_param": 10.0,
      "success": true,
      "log_likelihood": -13.781131943245382,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 2.2600066577985394,
      "xi_param": 10.0,
      "success": true,
      "log_likelihood": -10.921060668962314,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.112198954970191,
      "xi_param": 10.0,
      "success": true,
      "log_likelihood": -13.484436583514906,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.0,
      "xi_param": 10.0,
      "success": true,
      "log_likelihood": -6.705200070342561,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.0595196128789015,
      "xi_param": 10.0,
      "success": true,
      "log_likelihood": -13.54872721563074,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.0,
      "xi_param": 10.0,
      "success": true,
      "log_likelihood": -6.7052000703425625,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 2.4063795167632827,
      "xi_param": 10.0,
      "success": true,
      "log_likelihood": -11.422462132098989,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 2.2067891633742813,
      "xi_param": 10.0,
      "success": true,
      "log_likelihood": -8.891012288460061,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 6.225877119735794,
      "xi_param": 0.0,
      "success": true,
      "log_likelihood": -11.971441566213787,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 2.3907714932766404,
      "xi_param": 10.0,
      "success": true,
      "log_likelihood": -10.177353791423789,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.0,
      "xi_param": 10.0,
      "success": true,
      "log_likelihood": -6.70520007034256,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.0,
      "xi_param": 10.0,
      "success": true,
      "log_likelihood": -6.705200070342559,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.0,
      "xi_param": 10.0,
      "success": true,
      "log_likelihood": -6.70520007034256,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.0,
      "xi_param": 10.0,
      "success": true,
      "log_likelihood": -6.705200070342559,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.18807435256638755,
      "xi_param": 10.0,
      "success": true,
      "log_likelihood": -10.035167957606614,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.15499616781088824,
      "xi_param": 10.0,
      "success": true,
      "log_likelihood": -10.650259326818743,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.0,
      "xi_param": 10.0,
      "success": true,
      "log_likelihood": -6.70520007034256,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.4665782182596747,
      "xi_param": 10.0,
      "success": true,
      "log_likelihood": -15.38570491173658,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.265551895161411,
      "xi_param": 10.0,
      "success": true,
      "log_likelihood": -11.470605739839124,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.8188965856210462,
      "xi_param": 10.0,
      "success": true,
      "log_likelihood": -18.494776404067068,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.305721925221214,
      "xi_param": 10.0,
      "success": true,
      "log_likelihood": -16.856805282752987,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.8844042047502567,
      "xi_param": 10.0,
      "success": true,
      "log_likelihood": -13.997824525601986,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.2002224648067792,
      "xi_param": 10.0,
      "success": true,
      "log_likelihood": -15.397474209842738,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.3742023593989887,
      "xi_param": 10.0,
      "success": true,
      "log_likelihood": -13.426564114351958,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 4.419228549085638,
      "xi_param": 10.0,
      "success": true,
      "log_likelihood": -5.4534026604577255,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.11115050347589109,
      "xi_param": 10.0,
      "success": true,
      "log_likelihood": -11.415175030600027,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.5108863567395241,
      "xi_param": 10.0,
      "success": true,
      "log_likelihood": -16.031731111893738,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.0,
      "xi_param": 10.0,
      "success": true,
      "log_likelihood": -6.705200070342559,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 7.684313589938023,
      "xi_param": 0.0,
      "success": true,
      "log_likelihood": -12.012547703916447,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.446244245883943,
      "xi_param": 10.0,
      "success": true,
      "log_likelihood": -21.93839187815909,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 2.0391822910367305,
      "xi_param": 10.0,
      "success": true,
      "log_likelihood": -15.167839084573147,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.0,
      "xi_param": 10.0,
      "success": true,
      "log_likelihood": -6.705200070342561,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.8212818427987825,
      "xi_param": 10.0,
      "success": true,
      "log_likelihood": -14.67083074057782,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.90076409875466,
      "xi_param": 8.837706027378669,
      "success": true,
      "log_likelihood": -12.301820973599774,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.739788829445668,
      "xi_param": 10.0,
      "success": true,
      "log_likelihood": -14.37053153050476,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.9247004285912489,
      "xi_param": 10.0,
      "success": true,
      "log_likelihood": -17.581077047686758,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.0,
      "xi_param": 10.0,
      "success": true,
      "log_likelihood": -10.605200069034561,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.1777500469585243,
      "xi_param": 10.0,
      "success": true,
      "log_likelihood": -17.55416195762342,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 3.589703142548752,
      "xi_param": 10.0,
      "success": true,
      "log_likelihood": -13.291639406612274,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.0,
      "xi_param": 10.0,
      "success": true,
      "log_likelihood": -9.405200068861307,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.2230304745455016,
      "xi_param": 10.0,
      "success": true,
      "log_likelihood": -16.23399477859802,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.1283356014243222,
      "xi_param": 10.0,
      "success": true,
      "log_likelihood": -14.507379358162169,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.5151316730750033,
      "xi_param": 10.0,
      "success": true,
      "log_likelihood": -15.918255441291048,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.4665803753960747,
      "xi_param": 10.0,
      "success": true,
      "log_likelihood": -15.385704912751896,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.7229091478993237,
      "xi_param": 10.0,
      "success": true,
      "log_likelihood": -19.280230889493787,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 2.505377985210448,
      "xi_param": 10.0,
      "success": true,
      "log_likelihood": -11.367675483030567,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.8629951647522005,
      "xi_param": 0.0,
      "success": true,
      "log_likelihood": -25.972360048815002,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.6826098304067826,
      "xi_param": 9.230428014377274,
      "success": true,
      "log_likelihood": -17.244932058911616,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 3.687887231236954,
      "xi_param": 0.0,
      "success": true,
      "log_likelihood": -19.14084787638497,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.1337516498773677,
      "xi_param": 10.0,
      "success": true,
      "log_likelihood": -18.8475511666483,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.7354869432562113,
      "xi_param": 0.0,
      "success": true,
      "log_likelihood": -22.249623564983004,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.9336322858769674,
      "xi_param": 10.0,
      "success": true,
      "log_likelihood": -20.40701025116644,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 3.2624860915057123,
      "xi_param": 10.0,
      "success": true,
      "log_likelihood": -6.942684644677326,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 3.4145782814658485,
      "xi_param": 10.0,
      "success": true,
      "log_likelihood": -10.141633926636244,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.0,
      "xi_param": 10.0,
      "success": true,
      "log_likelihood": -13.530200067657775,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 5.638620258551764,
      "xi_param": 0.0,
      "success": true,
      "log_likelihood": -13.528298705484389,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.2020160345611474,
      "xi_param": 10.0,
      "success": true,
      "log_likelihood": -14.26628032090273,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.958724348186968,
      "xi_param": 10.0,
      "success": true,
      "log_likelihood": -19.56170406444978,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.722903778119723,
      "xi_param": 10.0,
      "success": true,
      "log_likelihood": -14.780230892772849,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 7.684314761885938,
      "xi_param": 0.0,
      "success": true,
      "log_likelihood": -12.01254770391662,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.3678371873127617,
      "xi_param": 10.0,
      "success": true,
      "log_likelihood": -21.104390412304856,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 3.687887357427826,
      "xi_param": 10.0,
      "success": true,
      "log_likelihood": -11.09591807622485,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.2637962691709144,
      "xi_param": 10.0,
      "success": true,
      "log_likelihood": -15.056251576256466,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.0,
      "xi_param": 10.0,
      "success": true,
      "log_likelihood": -10.155200069450347,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.19737679022548557,
      "xi_param": 9.583521294776533,
      "success": true,
      "log_likelihood": -12.857364984174817,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.0699240493519386,
      "xi_param": 10.0,
      "success": true,
      "log_likelihood": -16.239019722833703,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.0,
      "xi_param": 10.0,
      "success": true,
      "log_likelihood": -11.805200067831793,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 10.0,
      "xi_param": 10.0,
      "success": true,
      "log_likelihood": -2.1417362922681558,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 3.9730145978318614,
      "xi_param": 0.0,
      "success": true,
      "log_likelihood": -17.33139232939124,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.3999611197149728,
      "xi_param": 10.0,
      "success": true,
      "log_likelihood": -15.71045163832227,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.30972110103005285,
      "xi_param": 10.0,
      "success": true,
      "log_likelihood": -15.004825918789395,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.133751694199597,
      "xi_param": 0.0,
      "success": true,
      "log_likelihood": -24.342480972777576,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.9198875913989943,
      "xi_param": 10.0,
      "success": true,
      "log_likelihood": -14.725249027077897,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.0,
      "xi_param": 10.0,
      "success": true,
      "log_likelihood": -9.480200069500505,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 7.005624041408626,
      "xi_param": 0.0,
      "success": true,
      "log_likelihood": -17.012334394592525,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.6261897754855719,
      "xi_param": 10.0,
      "success": true,
      "log_likelihood": -23.355741255508384,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 7.68431120598241,
      "xi_param": 0.0,
      "success": true,
      "log_likelihood": -12.012547703916931,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.0543412299366006,
      "xi_param": 10.0,
      "success": true,
      "log_likelihood": -24.202996905389934,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.0,
      "xi_param": 10.0,
      "success": true,
      "log_likelihood": -11.955200068199591,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 5.473771361655811,
      "xi_param": 0.0,
      "success": true,
      "log_likelihood": -14.769930322935771,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.4529888254466243,
      "xi_param": 10.0,
      "success": true,
      "log_likelihood": -12.754670830587722,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.7266107931885181,
      "xi_param": 10.0,
      "success": true,
      "log_likelihood": -26.464350754168557,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 7.684313024223589,
      "xi_param": 10.0,
      "success": true,
      "log_likelihood": -9.967617895391246,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.7667715731705906,
      "xi_param": 10.0,
      "success": true,
      "log_likelihood": -17.785366178476792,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 3.455978298805529,
      "xi_param": 0.0,
      "success": true,
      "log_likelihood": -15.303926995488725,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.0,
      "xi_param": 10.0,
      "success": true,
      "log_likelihood": -8.80520006981828,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.367837161270237,
      "xi_param": 10.0,
      "success": true,
      "log_likelihood": -15.104390415823179,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.5491377554725284,
      "xi_param": 10.0,
      "success": true,
      "log_likelihood": -20.998979152053877,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "lambda_param": {
        "r": 0.8974418765828699,
        "p": 1.3150988836547323e-36
      },
      "xi_param": {
        "r": 0.17541052165706406,
        "p": 0.08087818136678052
      }
    }
  },
  "bic_results": {
    "average_bic": 34.889094693179054,
    "individual_bics": [
      31.192133284745346,
      39.42324856550336,
      31.75042442948611,
      34.72930176340299,
      29.00915921483685,
      34.13591104394203,
      20.57743801759734,
      34.2644923081737,
      20.577438017597345,
      30.011962141110196,
      24.94906245383234,
      31.109921009339793,
      27.5217454597598,
      20.577438017597338,
      20.577438017597338,
      20.577438017597338,
      20.577438017597338,
      27.237373792125446,
      28.467556530549707,
      20.577438017597338,
      37.93844770038538,
      30.10824935659047,
      44.15659068504635,
      40.88064844241819,
      35.162686928116194,
      37.96198629659769,
      34.020166105616134,
      18.07384319782767,
      29.997387938112276,
      39.23050010069969,
      20.577438017597338,
      31.19213328474511,
      51.0438216332304,
      37.50271604605852,
      20.57743801759734,
      36.50869935806786,
      31.770679824111767,
      35.90810093792174,
      42.329191972285734,
      28.377438014981344,
      42.27536179215906,
      33.75031669013677,
      25.977438014634835,
      39.63502743410826,
      36.181796593236555,
      39.003548759494315,
      37.93844770241601,
      45.72749965589979,
      29.90238884297335,
      59.11175797454222,
      41.65690199473545,
      45.44873362968216,
      44.86214021020882,
      51.666285006878226,
      47.9810583792451,
      21.05240716626687,
      27.45030573018471,
      34.22743801222777,
      34.223635287880995,
      35.69959851871768,
      46.29044600581178,
      36.727499662457916,
      31.19213328474546,
      49.37581870152193,
      29.35887402936192,
      37.279541029425154,
      27.477438015812915,
      32.881767845261855,
      39.645077322579624,
      30.777438012575807,
      11.45051046144853,
      41.829822535694696,
      38.58794115355676,
      37.17668971449101,
      55.85199982246737,
      36.61753593106801,
      26.127438015913228,
      41.19170666609727,
      53.87852038792899,
      31.192133284746085,
      55.57303168769209,
      31.0774380133114,
      36.70689852278376,
      32.676379538087666,
      60.09573938524933,
      27.10227366769471,
      42.7377702338658,
      37.77489186788967,
      24.77743801654878,
      37.375818708558576,
      49.16499618101997
    ],
    "num_parameters": 2,
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n)"
  }
}