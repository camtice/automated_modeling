{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the given task. The model should obtain the utility, (not the probability of choosing an action).  Your goal is to eventually explore the entire space of possible explainations and mechanisms by which the observed behavior arises.\n\nYour model should use the given variables appropriately, but does not necessary need to use all or even most of the variables. Do not include the model for the utility of rejecting an offer. \n\nThe model should:\n1. Predict only responder behavior.\n2. Build on relevant psychological principles.\n3. Be considerate of high covariance between learnable parameters as the model\nwill have to pass parameter recovery tests.\n4. Be applicable to the dataset given within the task description (i.e. the model should be able to be run using only the provided dataset structure).\n5. Not include parameters to simulate general stochasticity of behavior, because this will be handled later by a temperature parameter.\n6. Should have no more than two learnable parameters.\n7. This specific model should calculate the utility of an action, which will then be used to determine\nthe probability of choosing that action. Negative values should represent a negative utility, and thus an unlikly action.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Use clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "learnable_parameters": {
    "alpha": {
      "description": "Inequity aversion parameter for disadvantageous inequality (sensitivity when split_self is below the fair share).",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "delta": {
      "description": "Inequity aversion parameter for advantageous inequality (sensitivity when split_self is above the fair share).",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "U_accept = split_self - [ alpha \u00b7 I(d < 0) \u00b7 (fS - split_self) + delta \u00b7 I(d > 0) \u00b7 (split_self - fS) ]\nwhere\n\u2003fS = (token_self / (token_self + token_opp)) \u00b7 combined_earning,\n\u2003d = split_self - fS,\n\u2003I(condition) = 1 if condition holds, 0 otherwise.",
  "variable_descriptions": {
    "U_accept": {
      "description": "Utility of accepting the offer, computed from the offered share minus fairness penalties. Negative values indicate low utility.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "split_self": {
      "description": "The proposed share for the participant (in \u00a3).",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Number of tokens found by the participant.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "combined_earning": {
      "description": "Total amount of money earned in the trial (each token is worth \u00a33).",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "fS": {
      "description": "Fair share of the participant, computed as the ratio of token_self to total tokens times combined_earning.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "d": {
      "description": "The discrepancy between the offered share and the fair share (split_self minus fS).",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "alpha": {
      "description": "Inequity aversion parameter for disadvantageous inequality (sensitivity when split_self is below the fair share).",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "delta": {
      "description": "Inequity aversion parameter for advantageous inequality (sensitivity when split_self is above the fair share).",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_summary": "A fairness-based utility model for responder decisions that computes a fairness reference from the participant\u2019s token contribution relative to the total tokens. The offered share (split_self) is compared to this fair share, and the utility is reduced proportionally by one of two learnable parameters: alpha for disadvantageous deviation (when the offer is lower than fair) and delta for advantageous deviation (when the offer is higher than fair). This model uses only two learnable parameters and maps directly to the observed trial variables.",
  "full_reasoning": "Step-by-step reasoning:\n\n1. Key psychological mechanisms:\n\u2003\u2022 Responders tend to compare the proposed share with a fairness reference based on their contribution versus that of their opponent.\n\u2003\u2022 Offers below this fairness reference produce a \u201cpunishment\u201d (negative disutility) due to disadvantageous inequity aversion.\n\u2003\u2022 Offers that exceed the fairness reference may also produce discomfort (or guilt) if the responder is motivated by fairness norms, though often to a lesser extent.\n\u2003\u2022 Thus, the fairness discrepancy (difference between the offered share and the fair share computed from token contributions) is central.\n\n2. How these mechanisms interact:\n\u2003\u2022 Compute a fair share using the ratio of tokens the participant found (token_self) to the total tokens (token_self + token_opp), multiplied by the combined earning.\n\u2003\u2022 Compare the actual proposed share (split_self) to this fair share.\n\u2003\u2022 Penalize the utility by a factor proportional to the absolute deviation. Use one learnable parameter for disadvantageous inequality (when the proposed share is below the fair share) and a second (possibly weaker) parameter for advantageous inequality (when the proposed share is above the fair share).\n\n3. Mathematical form:\n\u2003\u2022 Define the fairness reference fS = (token_self/(token_self + token_opp)) \u00b7 combined_earning.\n\u2003\u2022 Let the discrepancy d = split_self \u2212 fS.\n\u2003\u2022 Then, the utility for accepting the offer is given by:\n\u2003\u2003\u2013 U_accept = split_self minus a penalty that is alpha\u00b7(fS \u2212 split_self) when d < 0,\n\u2003\u2003\u2013 and U_accept = split_self minus a penalty that is delta\u00b7(split_self \u2212 fS) when d > 0.\n\u2003\u2022 This can be written in one unified formula using indicator functions.\n\n4. Required parameters:\n\u2003\u2022 Two learnable parameters:\n\u2003\u2003\u2013 alpha: sensitivity to disadvantageous inequity (when offer is below fair share),\n\u2003\u2003\u2013 delta: sensitivity to advantageous inequity (when offer is above fair share).\n\u2003\u2022 Their numerical bounds will be set generously, for example, from 0 to 10.\n\n5. Mapping model variables to observable behavior:\n\u2003\u2022 The data provides token_self, token_opp, combined_earning, and split_self.\n\u2003\u2022 By computing fair_share from tokens and combined_earning, the model captures each responder\u2019s fairness reference.\n\u2003\u2022 The penalty applied to split_self based on the discrepancy (weighted by alpha or delta) affects the computed utility; lower utilities will be associated with a lower likelihood of acceptance.\n\nBelow is the formal specification:\n\n<MODEL>\nU_accept = split_self - [ alpha \u00b7 I(d < 0) \u00b7 (fS - split_self) + delta \u00b7 I(d > 0) \u00b7 (split_self - fS) ]\nwhere\n\u2003fS = (token_self / (token_self + token_opp)) \u00b7 combined_earning,\n\u2003d = split_self - fS,\n\u2003I(condition) = 1 if condition holds, 0 otherwise.\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_accept\": {\n      \"description\": \"Utility of accepting the offer, computed from the offered share minus fairness penalties. Negative values indicate low utility.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"split_self\": {\n      \"description\": \"The proposed share for the participant (in \u00a3).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total amount of money earned in the trial (each token is worth \u00a33).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"fS\": {\n      \"description\": \"Fair share of the participant, computed as the ratio of token_self to total tokens times combined_earning.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"d\": {\n      \"description\": \"The discrepancy between the offered share and the fair share (split_self minus fS).\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"alpha\": {\n      \"description\": \"Inequity aversion parameter for disadvantageous inequality (sensitivity when split_self is below the fair share).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"delta\": {\n      \"description\": \"Inequity aversion parameter for advantageous inequality (sensitivity when split_self is above the fair share).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    }\n  }\n}\n</VARIABLES>\n\n<SUMMARY>\nA fairness-based utility model for responder decisions that computes a fairness reference from the participant\u2019s token contribution relative to the total tokens. The offered share (split_self) is compared to this fair share, and the utility is reduced proportionally by one of two learnable parameters: alpha for disadvantageous deviation (when the offer is lower than fair) and delta for advantageous deviation (when the offer is higher than fair). This model uses only two learnable parameters and maps directly to the observed trial variables.\n</SUMMARY>",
  "simulation_code": "def simulate_model(trial_data, alpha=1, delta=1):\n    utility_values = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n        split_self = trial.get(\"split_self\", 0)\n\n        if token_self + token_opp == 0: #Handle division by zero\n            fS = 0\n        else:\n            fS = (token_self / (token_self + token_opp)) * combined_earning\n        d = split_self - fS\n        \n        penalty = 0\n        if d < 0:\n            penalty = alpha * (fS - split_self)\n        elif d > 0:\n            penalty = delta * (split_self - fS)\n            \n        U_accept = split_self - penalty\n        utility_values.append(U_accept)\n    return utility_values",
  "fitting_results": [
    {
      "alpha": 7.684345773180541,
      "delta": 1.9267504630678802,
      "success": true,
      "log_likelihood": -11.809149638609558,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.5512238924769977,
      "delta": 0.0,
      "success": true,
      "log_likelihood": -16.373035153451525,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.6418964378542102,
      "delta": 0.0,
      "success": true,
      "log_likelihood": -12.53662308542556,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.894074176510726,
      "delta": 0.0,
      "success": true,
      "log_likelihood": -14.026061752433845,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 2.260004898399339,
      "delta": 0.0,
      "success": true,
      "log_likelihood": -11.16599047808456,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.1121987003575908,
      "delta": 0.0,
      "success": true,
      "log_likelihood": -13.729366392629043,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "delta": 0.0,
      "success": true,
      "log_likelihood": -6.9501298794562105,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0595197728189147,
      "delta": 0.0,
      "success": true,
      "log_likelihood": -13.793657024744208,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "delta": 0.0,
      "success": true,
      "log_likelihood": -6.950129879456211,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 2.406379551627998,
      "delta": 0.0,
      "success": true,
      "log_likelihood": -11.667391941212632,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 2.206788581870056,
      "delta": 0.0,
      "success": true,
      "log_likelihood": -9.135942097575336,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 6.225847232507737,
      "delta": 1.9267952918032476,
      "success": true,
      "log_likelihood": -11.768043501256596,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 2.3907704800416094,
      "delta": 0.0,
      "success": true,
      "log_likelihood": -10.422283600536948,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "delta": 0.0,
      "success": true,
      "log_likelihood": -6.950129879456208,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "delta": 0.0,
      "success": true,
      "log_likelihood": -6.950129879456209,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "delta": 0.0,
      "success": true,
      "log_likelihood": -6.95012987945621,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "delta": 0.0,
      "success": true,
      "log_likelihood": -6.950129879456209,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.18807595502544067,
      "delta": 0.0,
      "success": true,
      "log_likelihood": -10.28009776674038,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.1549961691109637,
      "delta": 0.0,
      "success": true,
      "log_likelihood": -10.895189135932391,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "delta": 0.0,
      "success": true,
      "log_likelihood": -6.950129879456208,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.4665799520484821,
      "delta": 0.0,
      "success": true,
      "log_likelihood": -15.630634720834152,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.2655519244208369,
      "delta": 0.0,
      "success": true,
      "log_likelihood": -11.715535548952781,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.818896655862147,
      "delta": 0.0,
      "success": true,
      "log_likelihood": -18.739706213180757,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.3057239616336358,
      "delta": 0.0,
      "success": true,
      "log_likelihood": -17.10173509182662,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.8844041356228067,
      "delta": 0.0,
      "success": true,
      "log_likelihood": -14.24275433471562,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.2002228221270341,
      "delta": 0.0,
      "success": true,
      "log_likelihood": -15.642404018955524,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.3742023713896288,
      "delta": 0.0,
      "success": true,
      "log_likelihood": -13.6714939234656,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 4.419228289134077,
      "delta": 0.0,
      "success": true,
      "log_likelihood": -5.698332469571418,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.11115059388105254,
      "delta": 0.0,
      "success": true,
      "log_likelihood": -11.660104839713707,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.5108863831136212,
      "delta": 0.0,
      "success": true,
      "log_likelihood": -16.2766609210074,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "delta": 0.0,
      "success": true,
      "log_likelihood": -6.950129879456209,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 7.684243322867364,
      "delta": 1.9265408982111336,
      "success": true,
      "log_likelihood": -11.809149641024925,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.4462449129780381,
      "delta": 0.0,
      "success": true,
      "log_likelihood": -22.183321687270244,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 2.039182445105981,
      "delta": 0.0,
      "success": true,
      "log_likelihood": -15.412768893686712,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "delta": 0.0,
      "success": true,
      "log_likelihood": -6.9501298794562105,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.8212818777043316,
      "delta": 0.0,
      "success": true,
      "log_likelihood": -14.915760549691456,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.9007502204546499,
      "delta": 0.0,
      "success": true,
      "log_likelihood": -12.543270001975186,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.7397886853088782,
      "delta": 0.0,
      "success": true,
      "log_likelihood": -14.61546133961859,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.9247004218074797,
      "delta": 0.0,
      "success": true,
      "log_likelihood": -17.826006856800394,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "delta": 0.0,
      "success": true,
      "log_likelihood": -10.850129878148211,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.17775012329339,
      "delta": 0.0,
      "success": true,
      "log_likelihood": -17.79909176673709,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 3.5897035707612273,
      "delta": 0.0,
      "success": true,
      "log_likelihood": -13.536569215722388,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "delta": 0.0,
      "success": true,
      "log_likelihood": -9.650129877974955,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.2230311616815202,
      "delta": 0.0,
      "success": true,
      "log_likelihood": -16.478924587714967,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.1283364434560819,
      "delta": 0.0,
      "success": true,
      "log_likelihood": -14.752309167270711,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.5151316744103936,
      "delta": 0.0,
      "success": true,
      "log_likelihood": -16.1631852504047,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.4665800319790345,
      "delta": 0.0,
      "success": true,
      "log_likelihood": -15.630634721864514,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.7229092179239927,
      "delta": 0.0,
      "success": true,
      "log_likelihood": -19.5251606986074,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 2.505377704779516,
      "delta": 0.0,
      "success": true,
      "log_likelihood": -11.612605292144277,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.8629943233873261,
      "delta": 1.9267320224712665,
      "success": true,
      "log_likelihood": -25.768961983350337,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.6826038460332495,
      "delta": 0.0,
      "success": true,
      "log_likelihood": -17.487698787335315,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 3.6878851862928292,
      "delta": 1.9267196183918176,
      "success": true,
      "log_likelihood": -18.937449810901473,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.1337516377666241,
      "delta": 0.0,
      "success": true,
      "log_likelihood": -19.092480975761944,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.7354609712520559,
      "delta": 1.926586034285575,
      "success": true,
      "log_likelihood": -22.046225506354364,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.9336325676418835,
      "delta": 0.0,
      "success": true,
      "log_likelihood": -20.65194006028042,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 3.2624872648221057,
      "delta": 0.0,
      "success": true,
      "log_likelihood": -7.187614453789324,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 3.4145782048914315,
      "delta": 0.0,
      "success": true,
      "log_likelihood": -10.386563735749986,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "delta": 0.0,
      "success": true,
      "log_likelihood": -13.775129876771425,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 5.6386181771208514,
      "delta": 1.9267145832651948,
      "success": true,
      "log_likelihood": -13.324900639998429,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.2020160892998163,
      "delta": 0.0,
      "success": true,
      "log_likelihood": -14.51121013001635,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.958723328318028,
      "delta": 0.0,
      "success": true,
      "log_likelihood": -19.806633873571293,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.7229091886933146,
      "delta": 0.0,
      "success": true,
      "log_likelihood": -15.025160701753487,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 7.684454535227717,
      "delta": 1.9257451465416147,
      "success": true,
      "log_likelihood": -11.809149704587014,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.3678371167498178,
      "delta": 0.0,
      "success": true,
      "log_likelihood": -21.349320221418516,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 3.687866171650391,
      "delta": 0.0,
      "success": true,
      "log_likelihood": -11.340847885648353,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.263795996747076,
      "delta": 0.0,
      "success": true,
      "log_likelihood": -15.301181385370796,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "delta": 0.0,
      "success": true,
      "log_likelihood": -10.400129878563996,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.19738340125917775,
      "delta": 0.0,
      "success": true,
      "log_likelihood": -13.10118769838432,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0699240085294717,
      "delta": 0.0,
      "success": true,
      "log_likelihood": -16.483949531947367,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "delta": 0.0,
      "success": true,
      "log_likelihood": -12.05012987694544,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "delta": 0.0,
      "success": true,
      "log_likelihood": -2.3866661013818056,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 3.9730216694795493,
      "delta": 1.9267293205972968,
      "success": true,
      "log_likelihood": -17.12799426388642,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.3999610630608732,
      "delta": 0.0,
      "success": true,
      "log_likelihood": -15.955381447435945,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.3097231143574905,
      "delta": 0.0,
      "success": true,
      "log_likelihood": -15.249755727937794,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.133738204131777,
      "delta": 5.087941859392823,
      "success": true,
      "log_likelihood": -22.594665573268355,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.9198875481851504,
      "delta": 0.0,
      "success": true,
      "log_likelihood": -14.97017883619156,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "delta": 0.0,
      "success": true,
      "log_likelihood": -9.725129878614155,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 7.005570414719038,
      "delta": 10.0,
      "success": true,
      "log_likelihood": -12.977666491818198,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.6261897850442367,
      "delta": 0.0,
      "success": true,
      "log_likelihood": -23.60067106462202,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 7.684313435793832,
      "delta": 1.9267156759965227,
      "success": true,
      "log_likelihood": -11.809149638431066,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0543407804354687,
      "delta": 0.0,
      "success": true,
      "log_likelihood": -24.4479267145056,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "delta": 0.0,
      "success": true,
      "log_likelihood": -12.20012987731324,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 5.473764071129859,
      "delta": 10.0,
      "success": true,
      "log_likelihood": -10.7352624205008,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.452986999369974,
      "delta": 0.0,
      "success": true,
      "log_likelihood": -12.999600639719425,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.7266108387374351,
      "delta": 0.0,
      "success": true,
      "log_likelihood": -26.709280563282196,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 7.684331254877539,
      "delta": 0.0,
      "success": true,
      "log_likelihood": -10.212547704536167,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.7667716552804692,
      "delta": 0.0,
      "success": true,
      "log_likelihood": -18.030295987590446,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 3.4559782035474784,
      "delta": 5.08783084474,
      "success": true,
      "log_likelihood": -13.556111594192936,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "delta": 0.0,
      "success": true,
      "log_likelihood": -9.050129878931928,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.3678370993714033,
      "delta": 0.0,
      "success": true,
      "log_likelihood": -15.349320224936859,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.5491377678900816,
      "delta": 0.0,
      "success": true,
      "log_likelihood": -21.243908961167527,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "alpha": {
        "r": 0.9069778816583428,
        "p": 1.394289556156591e-38
      },
      "delta": {
        "r": 0.6709110426486017,
        "p": 2.2205668187984634e-14
      }
    }
  },
  "bic_results": {
    "average_bic": 35.0045649604591,
    "individual_bics": [
      30.785337154131334,
      39.91310818381527,
      32.24028404776334,
      35.21916138177991,
      29.499018833081337,
      34.625770662170304,
      21.06729763582464,
      34.75435192640064,
      21.067297635824644,
      30.50182175933748,
      25.438922072062894,
      30.70312487942541,
      28.01160507798612,
      21.067297635824637,
      21.067297635824637,
      21.067297635824637,
      21.067297635824637,
      27.727233410392977,
      28.957416148777,
      21.067297635824637,
      38.42830731858052,
      30.598108974817784,
      44.64645030327373,
      41.370508060565456,
      35.65254654634346,
      38.45184591482327,
      34.51002572384342,
      18.563702816055056,
      30.487247556339632,
      39.72035971892702,
      21.067297635824637,
      30.785337158962072,
      51.533681251452705,
      37.992575664285646,
      21.06729763582464,
      36.99855897629513,
      32.25357788086259,
      36.3979605561494,
      42.819051590513006,
      28.867297633208644,
      42.765221410386395,
      34.24017630835699,
      26.467297632862127,
      40.12488705234215,
      36.671656211453644,
      39.49340837772162,
      38.428307320641245,
      46.21735927412702,
      30.392248461200772,
      58.70496184361289,
      42.14243545158285,
      45.041937498715164,
      45.35199982843611,
      51.25948888962095,
      48.47091799747306,
      21.54226678449087,
      27.940165348412194,
      34.71729763045507,
      33.816839156909076,
      36.18945813694492,
      46.780305624054805,
      37.217359280419195,
      30.785337286086246,
      49.86567831974925,
      29.848733648208928,
      37.76940064765381,
      27.967297634040214,
      33.36941327368086,
      40.13493694080695,
      31.2672976308031,
      11.94037007967583,
      41.42302640468506,
      39.07780077178411,
      37.66654933278781,
      52.35636902344893,
      37.10739554929534,
      26.617297634140527,
      33.122370860548614,
      54.36838000615626,
      30.78533715377435,
      56.062891305923415,
      31.5672976315387,
      28.637562717913816,
      33.16623915635107,
      60.58559900347661,
      27.592133285984552,
      43.22762985209311,
      34.279261065298094,
      25.267297634776078,
      37.86567832678594,
      49.65485579924727
    ],
    "num_parameters": 2,
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n)"
  }
}