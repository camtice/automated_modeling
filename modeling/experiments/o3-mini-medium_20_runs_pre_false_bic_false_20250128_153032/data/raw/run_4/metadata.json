{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the given task. The model should obtain the utility, (not the probability of choosing an action).  Your goal is to eventually explore the entire space of possible explainations and mechanisms by which the observed behavior arises.\n\nYour model should use the given variables appropriately, but does not necessary need to use all or even most of the variables. Do not include the model for the utility of rejecting an offer. \n\nThe model should:\n1. Predict only responder behavior.\n2. Build on relevant psychological principles.\n3. Be considerate of high covariance between learnable parameters as the model\nwill have to pass parameter recovery tests.\n4. Be applicable to the dataset given within the task description (i.e. the model should be able to be run using only the provided dataset structure).\n5. Not include parameters to simulate general stochasticity of behavior, because this will be handled later by a temperature parameter.\n6. Should have no more than two learnable parameters.\n7. This specific model should calculate the utility of an action, which will then be used to determine\nthe probability of choosing that action. Negative values should represent a negative utility, and thus an unlikly action.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Use clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "learnable_parameters": {
    "lambda_param": {
      "description": "Learnable sensitivity parameter for disadvantageous inequity (when the offer is below the expected fair share).",
      "range": {
        "min": 0,
        "max": 20,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "mu_param": {
      "description": "Learnable sensitivity parameter for advantageous inequity (when the offer is above the expected fair share).",
      "range": {
        "min": 0,
        "max": 20,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "U_responder = split_self - lambda_param * max( (token_self / (token_self + token_opp)) * combined_earning - split_self, 0 ) - mu_param * max( split_self - (token_self / (token_self + token_opp)) * combined_earning, 0 )",
  "variable_descriptions": {
    "U_responder": {
      "description": "Utility of accepting the offer by the responder, calculated using the offered split and fairness deviations.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "split_self": {
      "description": "The proposed share (in \u00a3) for the participant as observed in each trial.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Number of tokens found by the participant.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "combined_earning": {
      "description": "Total amount of money earned in the trial, which determines the stakes.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "lambda_param": {
      "description": "Learnable sensitivity parameter for disadvantageous inequity (when the offer is below the expected fair share).",
      "range": {
        "min": 0,
        "max": 20,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "mu_param": {
      "description": "Learnable sensitivity parameter for advantageous inequity (when the offer is above the expected fair share).",
      "range": {
        "min": 0,
        "max": 20,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_summary": "A fairness-based utility model for responders that computes an expected fair share from token contributions and combined earnings, then penalizes deviations from this fair share using distinct sensitivity parameters for disadvantageous and advantageous deviations. The model uses two learnable parameters to calibrate the inequity cost.",
  "full_reasoning": "Below is the step\u2010by\u2010step reasoning followed by our formal model specification.\n\n\u2013\u2013\u2013\u2013\u2013\u2013\u2013\nStep\u2010by\u2010step Reasoning:\n\n1. Key Psychological Mechanisms:\n   \u2022 We assume responders evaluate offers in light of fairness. Their fairness standard comes from the relative contributions (tokens) of the self versus the opponent.\n   \u2022 The expected \u201cfair\u201d share is computed by weighting the combined earning by the participant\u2019s share of the total tokens (token_self/(token_self + token_opp)).\n   \u2022 Deviations from this fair share cause a \u201ccost\u201d to the utility. In particular, offers below the expected share are penalized more (disadvantageous inequity) than offers above the expected share (advantageous inequity).\n\n2. Interaction of Mechanisms:\n   \u2022 The model calculates the expected fair share given the tokens and combined earning.\n   \u2022 Then the actual monetary offer (split_self) is compared to the expected fair share.\n   \u2022 Two separate parameters (lambda_param and mu_param) moderate the disutility from receiving an offer that is below or above this fair share.\n   \n3. Mathematical Form:\n   \u2022 Let E denote the expected fair share:\n         E = (token_self/(token_self + token_opp)) \u00d7 combined_earning.\n   \u2022 The model\u2019s utility for accepting an offer is then computed as:\n         U_responder = split_self \u2013 lambda_param\u00b7max(E \u2013 split_self, 0) \u2013 mu_param\u00b7max(split_self \u2013 E, 0).\n   \u2022 Here, the two terms with the max() functions capture the \u201cpenalty\u201d for inequity (with lambda_param capturing the sensitivity to a shortfall and mu_param to an excess), yielding negative utility when the deviation from fairness is large.\n\n4. Parameters & Calibration:\n   \u2022 The two learnable parameters, lambda_param and mu_param, are used to calibrate the cost sensitivity for disadvantageous and advantageous inequity, respectively.\n   \u2022 We specify generous finite bounds for these parameters, for example [0, 20] for both.\n\n5. Mapping to Observable Behavior:\n   \u2022 The observable \u201csplit_self\u201d and tokens (token_self, token_opp) are used directly to compute the expected fair share.\n   \u2022 The computed utility U_responder is then used (after introducing a temperature parameter later) to determine the probability of the responder\u2019s decision.\n   \u2022 Only responder trials (trial_role = 1, if 1 denotes responder) are used to generate behavior predictions.\n\n\u2013\u2013\u2013\u2013\u2013\u2013\u2013\nBelow is the formal model specification and variable descriptions.\n\n<MODEL>\nU_responder = split_self - lambda_param * max( (token_self / (token_self + token_opp)) * combined_earning - split_self, 0 ) - mu_param * max( split_self - (token_self / (token_self + token_opp)) * combined_earning, 0 )\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_responder\": {\n      \"description\": \"Utility of accepting the offer by the responder, calculated using the offered split and fairness deviations.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"split_self\": {\n      \"description\": \"The proposed share (in \u00a3) for the participant as observed in each trial.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total amount of money earned in the trial, which determines the stakes.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"lambda_param\": {\n      \"description\": \"Learnable sensitivity parameter for disadvantageous inequity (when the offer is below the expected fair share).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 20,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"mu_param\": {\n      \"description\": \"Learnable sensitivity parameter for advantageous inequity (when the offer is above the expected fair share).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 20,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    }\n  }\n}\n</VARIABLES>\n\n<SUMMARY>\nA fairness-based utility model for responders that computes an expected fair share from token contributions and combined earnings, then penalizes deviations from this fair share using distinct sensitivity parameters for disadvantageous and advantageous deviations. The model uses two learnable parameters to calibrate the inequity cost.\n</SUMMARY>",
  "simulation_code": "def simulate_model(trial_data, lambda_param=1, mu_param=1):\n    utility_values = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0)\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n\n        if token_self + token_opp ==0: #handle division by zero\n            expected_fair_share = 0\n        else:\n            expected_fair_share = (token_self / (token_self + token_opp)) * combined_earning\n\n        disadvantageous_inequity = max(expected_fair_share - split_self, 0)\n        advantageous_inequity = max(split_self - expected_fair_share, 0)\n\n        utility = split_self - lambda_param * disadvantageous_inequity - mu_param * advantageous_inequity\n        utility_values.append(utility)\n    return utility_values",
  "fitting_results": [
    {
      "lambda_param": 7.684311838885258,
      "mu_param": 1.9267144302323818,
      "success": true,
      "log_likelihood": -11.809149638431665,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.5512260552949322,
      "mu_param": 0.0,
      "success": true,
      "log_likelihood": -16.373035153411777,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.6418943159113426,
      "mu_param": 0.0,
      "success": true,
      "log_likelihood": -12.536623085400718,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.8940818817318692,
      "mu_param": 0.0,
      "success": true,
      "log_likelihood": -14.026061752401114,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 2.2600067137284126,
      "mu_param": 0.0,
      "success": true,
      "log_likelihood": -11.165990478075969,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.1122001761891327,
      "mu_param": 0.0,
      "success": true,
      "log_likelihood": -13.729366392638868,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.0,
      "mu_param": 0.0,
      "success": true,
      "log_likelihood": -6.9501298794562105,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.0595198023573493,
      "mu_param": 0.0,
      "success": true,
      "log_likelihood": -13.793657024744217,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.0,
      "mu_param": 0.0,
      "success": true,
      "log_likelihood": -6.950129879456211,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 2.406378336247198,
      "mu_param": 0.0,
      "success": true,
      "log_likelihood": -11.667391941216259,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 2.206786749629733,
      "mu_param": 0.0,
      "success": true,
      "log_likelihood": -9.135942097593231,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 6.225873264709338,
      "mu_param": 1.9267179460143549,
      "success": true,
      "log_likelihood": -11.768043500726026,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 2.3907708042224565,
      "mu_param": 0.0,
      "success": true,
      "log_likelihood": -10.422283600536565,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.0,
      "mu_param": 0.0,
      "success": true,
      "log_likelihood": -6.950129879456208,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.0,
      "mu_param": 0.0,
      "success": true,
      "log_likelihood": -6.950129879456209,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.0,
      "mu_param": 0.0,
      "success": true,
      "log_likelihood": -6.95012987945621,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.0,
      "mu_param": 0.0,
      "success": true,
      "log_likelihood": -6.950129879456209,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.1880742517917131,
      "mu_param": 0.0,
      "success": true,
      "log_likelihood": -10.28009776672038,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.1549962467262369,
      "mu_param": 0.0,
      "success": true,
      "log_likelihood": -10.895189135932426,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.0,
      "mu_param": 0.0,
      "success": true,
      "log_likelihood": -6.950129879456208,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.4665792609902384,
      "mu_param": 0.0,
      "success": true,
      "log_likelihood": -15.630634720836609,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.2655518954054513,
      "mu_param": 0.0,
      "success": true,
      "log_likelihood": -11.715535548952777,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.8188992389298646,
      "mu_param": 0.0,
      "success": true,
      "log_likelihood": -18.7397062132099,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.3057245105420774,
      "mu_param": 0.0,
      "success": true,
      "log_likelihood": -17.101735091824594,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.8844041993519112,
      "mu_param": 0.0,
      "success": true,
      "log_likelihood": -14.24275433471564,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.2002228288234371,
      "mu_param": 0.0,
      "success": true,
      "log_likelihood": -15.642404018955524,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.3742024257257086,
      "mu_param": 0.0,
      "success": true,
      "log_likelihood": -13.67149392346559,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 4.419228640495056,
      "mu_param": 0.0,
      "success": true,
      "log_likelihood": -5.698332469571377,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.11115047453275849,
      "mu_param": 0.0,
      "success": true,
      "log_likelihood": -11.660104839713687,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.5108863547331811,
      "mu_param": 0.0,
      "success": true,
      "log_likelihood": -16.276660921007387,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.0,
      "mu_param": 0.0,
      "success": true,
      "log_likelihood": -6.950129879456209,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 7.684309072834538,
      "mu_param": 1.9267164328893458,
      "success": true,
      "log_likelihood": -11.80914963843283,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.446244870433974,
      "mu_param": 0.0,
      "success": true,
      "log_likelihood": -22.183321687270265,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 2.039182544209264,
      "mu_param": 0.0,
      "success": true,
      "log_likelihood": -15.412768893686751,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.0,
      "mu_param": 0.0,
      "success": true,
      "log_likelihood": -6.9501298794562105,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.821281931226213,
      "mu_param": 0.0,
      "success": true,
      "log_likelihood": -14.91576054969148,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.9007499468722029,
      "mu_param": 0.0,
      "success": true,
      "log_likelihood": -12.543270001975676,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.7397889192209506,
      "mu_param": 0.0,
      "success": true,
      "log_likelihood": -14.615461339618395,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.9247004865805345,
      "mu_param": 0.0,
      "success": true,
      "log_likelihood": -17.826006856800422,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.0,
      "mu_param": 0.0,
      "success": true,
      "log_likelihood": -10.850129878148211,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.1777474819021427,
      "mu_param": 0.0,
      "success": true,
      "log_likelihood": -17.79909176678202,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 3.5897129054108077,
      "mu_param": 0.0,
      "success": true,
      "log_likelihood": -13.536569215717812,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.0,
      "mu_param": 0.0,
      "success": true,
      "log_likelihood": -9.650129877974955,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.2230300597536905,
      "mu_param": 0.0,
      "success": true,
      "log_likelihood": -16.478924587712665,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.1283364852451154,
      "mu_param": 0.0,
      "success": true,
      "log_likelihood": -14.752309167270713,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.5151316686484458,
      "mu_param": 0.0,
      "success": true,
      "log_likelihood": -16.1631852504047,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.4665798766867095,
      "mu_param": 0.0,
      "success": true,
      "log_likelihood": -15.630634721864467,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.7229089992101454,
      "mu_param": 0.0,
      "success": true,
      "log_likelihood": -19.52516069860765,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 2.5053779076228073,
      "mu_param": 0.0,
      "success": true,
      "log_likelihood": -11.612605292144202,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.8629929220639944,
      "mu_param": 1.9267519302549312,
      "success": true,
      "log_likelihood": -25.768961983452378,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.6826031169627644,
      "mu_param": 0.0,
      "success": true,
      "log_likelihood": -17.487698787341717,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 3.687880360367933,
      "mu_param": 1.9267613278998632,
      "success": true,
      "log_likelihood": -18.937449811062024,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.133751488405577,
      "mu_param": 0.0,
      "success": true,
      "log_likelihood": -19.092480975762072,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.7354866447751808,
      "mu_param": 1.9267185614010252,
      "success": true,
      "log_likelihood": -22.046225499498362,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.9336316467124934,
      "mu_param": 0.0,
      "success": true,
      "log_likelihood": -20.651940060281532,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 3.2624864899092554,
      "mu_param": 0.0,
      "success": true,
      "log_likelihood": -7.18761445379009,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 3.4145790876694755,
      "mu_param": 0.0,
      "success": true,
      "log_likelihood": -10.386563735749514,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.0,
      "mu_param": 4.2631370958341256e-16,
      "success": true,
      "log_likelihood": -13.775129876771425,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 5.638620676218284,
      "mu_param": 1.9267148172678241,
      "success": true,
      "log_likelihood": -13.324900639999626,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.20201610694382477,
      "mu_param": 0.0,
      "success": true,
      "log_likelihood": -14.51121013001635,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.9587243304769077,
      "mu_param": 0.0,
      "success": true,
      "log_likelihood": -19.806633873563428,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.7229088095454175,
      "mu_param": 0.0,
      "success": true,
      "log_likelihood": -15.025160701754272,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 7.6842204332770025,
      "mu_param": 1.9267159459649572,
      "success": true,
      "log_likelihood": -11.809149639282614,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.3678349918404558,
      "mu_param": 0.0,
      "success": true,
      "log_likelihood": -21.349320221446384,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 3.687887031356009,
      "mu_param": 0.0,
      "success": true,
      "log_likelihood": -11.34084788533828,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.2637962715501225,
      "mu_param": 0.0,
      "success": true,
      "log_likelihood": -15.301181385370114,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.0,
      "mu_param": 0.0,
      "success": true,
      "log_likelihood": -10.400129878563996,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.19738332095785288,
      "mu_param": 0.0,
      "success": true,
      "log_likelihood": -13.101187698384312,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.0699240561695722,
      "mu_param": 0.0,
      "success": true,
      "log_likelihood": -16.483949531947346,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.0,
      "mu_param": 0.0,
      "success": true,
      "log_likelihood": -12.05012987694544,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 20.0,
      "mu_param": 0.0,
      "success": true,
      "log_likelihood": -0.6893796944543839,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 3.973022517759201,
      "mu_param": 1.9267108054821807,
      "success": true,
      "log_likelihood": -17.127994263879398,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.399961032741013,
      "mu_param": 0.0,
      "success": true,
      "log_likelihood": -15.95538144743597,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.30972109693255895,
      "mu_param": 0.0,
      "success": true,
      "log_likelihood": -15.24975572790305,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.1337485410571972,
      "mu_param": 5.087850965414686,
      "success": true,
      "log_likelihood": -22.594665571551698,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.9198876638096212,
      "mu_param": 0.0,
      "success": true,
      "log_likelihood": -14.970178836191575,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.0,
      "mu_param": 7.05896444982917e-16,
      "success": true,
      "log_likelihood": -9.725129878614155,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 7.005568266357732,
      "mu_param": 20.0,
      "success": true,
      "log_likelihood": -12.724037383346737,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.6261895753910891,
      "mu_param": 0.0,
      "success": true,
      "log_likelihood": -23.60067106462249,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 7.684312155994648,
      "mu_param": 1.9267016598645,
      "success": true,
      "log_likelihood": -11.809149638447304,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.0543410331073813,
      "mu_param": 0.0,
      "success": true,
      "log_likelihood": -24.4479267145041,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.0,
      "mu_param": 0.0,
      "success": true,
      "log_likelihood": -12.20012987731324,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 5.473766302781106,
      "mu_param": 20.0,
      "success": true,
      "log_likelihood": -10.481633312027148,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.4529887971583435,
      "mu_param": 0.0,
      "success": true,
      "log_likelihood": -12.999600639701367,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.7266107928733093,
      "mu_param": 0.0,
      "success": true,
      "log_likelihood": -26.709280563282206,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 7.6843442352786155,
      "mu_param": 0.0,
      "success": true,
      "log_likelihood": -10.212547704598324,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.7667715666157344,
      "mu_param": 0.0,
      "success": true,
      "log_likelihood": -18.030295987590442,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 3.4559830431907015,
      "mu_param": 5.087898956686279,
      "success": true,
      "log_likelihood": -13.55611159438278,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.0,
      "mu_param": 0.0,
      "success": true,
      "log_likelihood": -9.050129878931928,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.3678371832070744,
      "mu_param": 0.0,
      "success": true,
      "log_likelihood": -15.349320224936832,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.5491377710231958,
      "mu_param": 0.0,
      "success": true,
      "log_likelihood": -21.243908961167527,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "lambda_param": {
        "r": 0.8258667491708062,
        "p": 3.9948071239263834e-26
      },
      "mu_param": {
        "r": 0.6172266840788766,
        "p": 7.977985719836289e-12
      }
    }
  },
  "bic_results": {
    "average_bic": 34.95611342857145,
    "individual_bics": [
      30.78533715377555,
      39.91310818373577,
      32.24028404771366,
      35.21916138171445,
      29.499018833064156,
      34.62577066218996,
      21.06729763582464,
      34.75435192640065,
      21.067297635824644,
      30.501821759344736,
      25.438922072098684,
      30.70312487836427,
      28.01160507798535,
      21.067297635824637,
      21.067297635824637,
      21.067297635824637,
      21.067297635824637,
      27.72723341035298,
      28.95741614877707,
      21.067297635824637,
      38.42830731858544,
      30.598108974817777,
      44.64645030333202,
      41.370508060561406,
      35.6525465463435,
      38.45184591482327,
      34.5100257238434,
      18.563702816054974,
      30.487247556339597,
      39.72035971892699,
      21.067297635824637,
      30.78533715377788,
      51.53368125145275,
      37.992575664285724,
      21.06729763582464,
      36.99855897629518,
      32.253577880863574,
      36.39796055614901,
      42.81905159051306,
      28.867297633208644,
      42.76522141047626,
      34.24017630834784,
      26.467297632862127,
      40.12488705233755,
      36.671656211453644,
      39.49340837772162,
      38.42830732064115,
      46.21735927412752,
      30.392248461200623,
      58.704961843816974,
      42.14243545159565,
      45.041937499036266,
      45.35199982843636,
      51.25948887590894,
      48.47091799747528,
      21.542266784492398,
      27.94016534841125,
      34.71729763045507,
      33.81683915691147,
      36.18945813694492,
      46.78030562403907,
      37.217359280420766,
      30.78533715547745,
      49.865678319804985,
      29.84873364758878,
      37.769400647652446,
      27.967297634040214,
      33.36941327368084,
      40.13493694080691,
      31.2672976308031,
      8.545797265820987,
      41.42302640467101,
      39.07780077178416,
      37.66654933271832,
      52.35636902001561,
      37.10739554929537,
      26.617297634140527,
      32.61511264360569,
      54.368380006157196,
      30.78533715380683,
      56.06289130592042,
      31.5672976315387,
      28.130304500966517,
      33.16623915631495,
      60.58559900347663,
      27.59213328610887,
      43.2276298520931,
      34.27926106567778,
      25.267297634776078,
      37.86567832678588,
      49.65485579924727
    ],
    "num_parameters": 2,
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n)"
  }
}