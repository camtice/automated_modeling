{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the given task. The model should obtain the utility, (not the probability of choosing an action).  Your goal is to eventually explore the entire space of possible explainations and mechanisms by which the observed behavior arises.\n\nYour model should use the given variables appropriately, but does not necessary need to use all or even most of the variables. Do not include the model for the utility of rejecting an offer. \n\nThe model should:\n1. Predict only responder behavior.\n2. Build on relevant psychological principles.\n3. Be considerate of high covariance between learnable parameters as the model\nwill have to pass parameter recovery tests.\n4. Be applicable to the dataset given within the task description (i.e. the model should be able to be run using only the provided dataset structure).\n5. Not include parameters to simulate general stochasticity of behavior, because this will be handled later by a temperature parameter.\n6. Should have no more than two learnable parameters.\n7. This specific model should calculate the utility of an action, which will then be used to determine\nthe probability of choosing that action. Negative values should represent a negative utility, and thus an unlikly action.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Use clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "learnable_parameters": {
    "lambda_param": {
      "description": "Gain sensitivity parameter that scales the money received in the utility computation",
      "range": {
        "min": 0.0,
        "max": 10.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "kappa_param": {
      "description": "Fairness sensitivity parameter that penalizes quadratic deviation from the fair share",
      "range": {
        "min": 0.0,
        "max": 10.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "Let fair_split = (token_self / (token_self + token_opp)) \u00d7 combined_earning\nU = lambda_param \u00d7 split_self \u2212 kappa_param \u00d7 (split_self \u2212 fair_split)\u00b2",
  "variable_descriptions": {
    "U": {
      "description": "Utility of accepting the offer; combines monetary gain and fairness penalty",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "lambda_param": {
      "description": "Gain sensitivity parameter that scales the money received in the utility computation",
      "range": {
        "min": 0.0,
        "max": 10.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "kappa_param": {
      "description": "Fairness sensitivity parameter that penalizes quadratic deviation from the fair share",
      "range": {
        "min": 0.0,
        "max": 10.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "split_self": {
      "description": "Offered monetary share for the participant (in \u00a3) as observed in the data",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Participant's token count reflecting their contribution",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Opponent's token count reflecting their contribution",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "combined_earning": {
      "description": "Total money produced in the trial; each token is worth \u00a33",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    }
  },
  "model_summary": "A utility model for responder behavior that computes the subjective benefit of accepting an offer as a weighted monetary gain diminished by a quadratic penalty for deviating from a fairness expectation. The fair share is derived from the participant\u2019s token count relative to the total tokens and the monetary pot available, with two learnable parameters governing the gain sensitivity and fairness penalty.",
  "full_reasoning": "Let\u2019s reason through the construction of the model step by step:\n\n1. Key Psychological Mechanisms:\n\u2003\u2022 Responders are assumed to care about both the monetary gain they receive and the fairness of that gain relative to what they contributed.\n\u2003\u2022 Fairness is captured by comparing the participant\u2019s accepted share (split_self) with what we call the \u201cfair share,\u201d computed as the ratio of tokens found by the participant to the total tokens (participant and opponent) multiplied by the combined earning.\n\u2003\u2022 A deviation from this fair split (especially if the offer is less than one\u2019s fair share) reduces the subjective utility of acceptance.\n\n2. How these Mechanisms Interact:\n\u2003\u2022 The utility from accepting an offer is positively influenced by the absolute amount received (split_self), but this is discounted by a penalty that increases as the offer deviates from the fair share.\n\u2003\u2022 This penalty is quadratic so that small deviations are penalized less and larger deviations carry a heavier cost, reflecting a non\u2010linear sensitivity to unfair outcomes.\n\n3. Mathematical Form:\n\u2003\u2022 The fair share is computed as:\u2003fair_split = (token_self / (token_self + token_opp)) \u00d7 combined_earning.\n\u2003\u2022 The utility for accepting an offer is then given by:\n\u2003\u2003U = \u03bb \u00d7 split_self \u2212 \u03ba \u00d7 (split_self \u2212 fair_split)\u00b2,\n\u2003\u2003where \u03bb scales the positive valuation of monetary gain and \u03ba scales the penalty for deviating from a fair split.\n\n4. Learnable Parameters:\n\u2003\u2022 \u03bb (lambda) is a gain multiplier that translates the monetary value into subjective utility.\n\u2003\u2022 \u03ba (kappa) is the fairness (penalty) sensitivity parameter.\n\u2003\u2022 Both parameters are learnable and must be bounded by a generous, finite range.\n\n5. Mapping to Observed Variables:\n\u2003\u2022 token_self, token_opp, and combined_earning allow us to compute the \u201cfair share\u201d expectation.\n\u2003\u2022 split_self is the actual monetary offer received by the responder.\n\u2003\u2022 The computed utility U will be used (together with a temperature parameter, introduced later) to derive the probability of accepting the offer.\n\nBelow is the formal specification:\n\n<MODEL>\nLet fair_split = (token_self / (token_self + token_opp)) \u00d7 combined_earning\nU = lambda_param \u00d7 split_self \u2212 kappa_param \u00d7 (split_self \u2212 fair_split)\u00b2\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the offer; combines monetary gain and fairness penalty\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"lambda_param\": {\n      \"description\": \"Gain sensitivity parameter that scales the money received in the utility computation\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 10.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"kappa_param\": {\n      \"description\": \"Fairness sensitivity parameter that penalizes quadratic deviation from the fair share\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 10.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Offered monetary share for the participant (in \u00a3) as observed in the data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Participant's token count reflecting their contribution\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Opponent's token count reflecting their contribution\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total money produced in the trial; each token is worth \u00a33\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<SUMMARY>\nA utility model for responder behavior that computes the subjective benefit of accepting an offer as a weighted monetary gain diminished by a quadratic penalty for deviating from a fairness expectation. The fair share is derived from the participant\u2019s token count relative to the total tokens and the monetary pot available, with two learnable parameters governing the gain sensitivity and fairness penalty.\n</SUMMARY>",
  "simulation_code": "def simulate_model(trial_data, lambda_param=1.0, kappa_param=1.0):\n    utility_values = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n        split_self = trial.get(\"split_self\", 0)\n\n        if token_self + token_opp ==0: #Handle division by zero\n            fair_split = 0\n        else:\n            fair_split = (token_self / (token_self + token_opp)) * combined_earning\n\n        utility = lambda_param * split_self - kappa_param * (split_self - fair_split)**2\n        utility_values.append(utility)\n    return utility_values",
  "fitting_results": [
    {
      "lambda_param": 0.0,
      "kappa_param": 1.3316279171917438,
      "success": true,
      "log_likelihood": -10.210675797012376,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.7044856779950947,
      "kappa_param": 0.2947025525276145,
      "success": true,
      "log_likelihood": -18.468728992194524,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.690491885650206,
      "kappa_param": 0.7500150593987508,
      "success": true,
      "log_likelihood": -10.864528077240262,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.9177143887415719,
      "kappa_param": 0.5194185226225778,
      "success": true,
      "log_likelihood": -14.907536005600086,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.4843258911703836,
      "kappa_param": 1.0778583738065524,
      "success": true,
      "log_likelihood": -9.346025228938567,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.8628611317044648,
      "kappa_param": 0.5410475906327054,
      "success": true,
      "log_likelihood": -11.067117823430786,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 10.0,
      "kappa_param": 0.0,
      "success": true,
      "log_likelihood": -0.006472187475228865,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 2.223436801093676,
      "kappa_param": 0.6446448496599965,
      "success": true,
      "log_likelihood": -9.49119676748113,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 10.0,
      "kappa_param": 0.0,
      "success": true,
      "log_likelihood": -0.0064721874752288674,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.8321605719968775,
      "kappa_param": 0.6548113466595812,
      "success": true,
      "log_likelihood": -13.626258775597435,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 2.851270696859576,
      "kappa_param": 1.8513995938711916,
      "success": true,
      "log_likelihood": -5.179077955952473,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.0,
      "kappa_param": 1.21055202969226,
      "success": true,
      "log_likelihood": -10.56758059677518,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 8.266583107868463,
      "kappa_param": 10.0,
      "success": true,
      "log_likelihood": -25.2151026996928,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 10.0,
      "kappa_param": 0.0,
      "success": true,
      "log_likelihood": -0.006472187475228864,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 10.0,
      "kappa_param": 0.0,
      "success": true,
      "log_likelihood": -0.006472187475228864,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 10.0,
      "kappa_param": 0.0,
      "success": true,
      "log_likelihood": -0.006472187475228867,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 10.0,
      "kappa_param": 0.0,
      "success": true,
      "log_likelihood": -0.006472187475228865,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 3.811363270682882,
      "kappa_param": 0.32952254793921515,
      "success": true,
      "log_likelihood": -4.9069849429837245,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 3.1587765490166513,
      "kappa_param": 0.2791995470247081,
      "success": true,
      "log_likelihood": -6.1051624513629,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 10.0,
      "kappa_param": 0.0,
      "success": true,
      "log_likelihood": -0.006472187475228866,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.8756647016256461,
      "kappa_param": 0.33460276893731783,
      "success": true,
      "log_likelihood": -17.1762627633057,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 2.602873902768498,
      "kappa_param": 0.2572172239124439,
      "success": true,
      "log_likelihood": -7.729788165889618,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.429314555109302,
      "kappa_param": 0.2902464749004656,
      "success": true,
      "log_likelihood": -19.31774749151616,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.744166063979932,
      "kappa_param": 0.2376450964390293,
      "success": true,
      "log_likelihood": -18.973224932297377,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.0972397257103472,
      "kappa_param": 0.6450983593281737,
      "success": true,
      "log_likelihood": -13.14157042845774,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.9230722527769323,
      "kappa_param": 0.24935963376074682,
      "success": true,
      "log_likelihood": -17.6810014183788,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.4751905646649028,
      "kappa_param": 0.5266082255253948,
      "success": true,
      "log_likelihood": -12.861697904222153,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.7081705726547447,
      "kappa_param": 3.7282782114823205,
      "success": true,
      "log_likelihood": -5.952249968843993,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 2.1997961848656793,
      "kappa_param": 0.16575428173213183,
      "success": true,
      "log_likelihood": -8.757564649646863,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.1152666485180078,
      "kappa_param": 0.12105002912787528,
      "success": true,
      "log_likelihood": -16.20370576444085,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 10.0,
      "kappa_param": 0.0,
      "success": true,
      "log_likelihood": -0.006472187475228866,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.0,
      "kappa_param": 1.3316322814994952,
      "success": true,
      "log_likelihood": -10.210675796994108,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.332498268173951,
      "kappa_param": 0.1653287488163039,
      "success": true,
      "log_likelihood": -21.931822592406437,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.5625398728982359,
      "kappa_param": 0.38711900271872307,
      "success": true,
      "log_likelihood": -17.470968027609477,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 10.0,
      "kappa_param": 0.0,
      "success": true,
      "log_likelihood": -0.006472187475228865,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.2641692234786417,
      "kappa_param": 0.2243103925920153,
      "success": true,
      "log_likelihood": -15.180631635702376,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 2.7447825786367663,
      "kappa_param": 0.640006463784129,
      "success": true,
      "log_likelihood": -7.778921031891517,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.0643257463301736,
      "kappa_param": 0.5481576550686044,
      "success": true,
      "log_likelihood": -14.191304852451902,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.9182527040569013,
      "kappa_param": 0.1998814562621819,
      "success": true,
      "log_likelihood": -18.029167183134078,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.704730669949948,
      "kappa_param": 0.03275736744733428,
      "success": true,
      "log_likelihood": -9.67530541779416,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.9083930176129886,
      "kappa_param": 0.2868049209413192,
      "success": true,
      "log_likelihood": -17.46873223310681,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.11453366727425922,
      "kappa_param": 0.4870409938691821,
      "success": true,
      "log_likelihood": -15.450711929510677,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 10.0,
      "kappa_param": 0.0,
      "success": true,
      "log_likelihood": -23.013701505177707,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.9521854596296332,
      "kappa_param": 0.29266016385886917,
      "success": true,
      "log_likelihood": -17.14533239670739,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.3883022438418302,
      "kappa_param": 0.39595054178391814,
      "success": true,
      "log_likelihood": -13.869528572602928,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.1126248885211039,
      "kappa_param": 0.11840112532287972,
      "success": true,
      "log_likelihood": -16.210400826076846,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.9987092679875631,
      "kappa_param": 0.4005704170014398,
      "success": true,
      "log_likelihood": -15.916165074488166,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.3031549673722428,
      "kappa_param": 0.18377436576145365,
      "success": true,
      "log_likelihood": -21.59154613086374,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.207110803739835,
      "kappa_param": 1.1384581014449993,
      "success": true,
      "log_likelihood": -9.80283473736063,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.27144056497296165,
      "kappa_param": 0.036844041997350106,
      "success": true,
      "log_likelihood": -24.02024137704045,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.0264370521142403,
      "kappa_param": 0.16144043565629684,
      "success": true,
      "log_likelihood": -17.18631397860822,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.0,
      "kappa_param": 0.45495583284437385,
      "success": true,
      "log_likelihood": -15.303407982729613,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.6456408197141056,
      "kappa_param": 0.17204745407650152,
      "success": true,
      "log_likelihood": -20.32486936937443,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.523685123746292,
      "kappa_param": 0.06697285845196116,
      "success": true,
      "log_likelihood": -21.96626510589197,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.24600528773053765,
      "kappa_param": 0.24936292030010285,
      "success": true,
      "log_likelihood": -20.118008348539522,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 2.183225019997015,
      "kappa_param": 3.1094385513331524,
      "success": true,
      "log_likelihood": -5.640683156944794,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.6466512001208113,
      "kappa_param": 1.105555671255761,
      "success": true,
      "log_likelihood": -11.276425383679436,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.1376591825973843,
      "kappa_param": 0.0,
      "success": true,
      "log_likelihood": -13.680488206349354,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.0,
      "kappa_param": 1.0636803206601675,
      "success": true,
      "log_likelihood": -11.064900204693386,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.1344616257674682,
      "kappa_param": 0.03226382980794457,
      "success": true,
      "log_likelihood": -14.668006671163761,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.6864587331574136,
      "kappa_param": 0.15158265757539832,
      "success": true,
      "log_likelihood": -20.197363511489588,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.8671972474887928,
      "kappa_param": 0.4312755906740916,
      "success": true,
      "log_likelihood": -16.09527665453309,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.0,
      "kappa_param": 1.3316333814245827,
      "success": true,
      "log_likelihood": -10.210675796995794,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.45878752080142654,
      "kappa_param": 0.1977518867044417,
      "success": true,
      "log_likelihood": -20.966033764320056,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.315827400671704,
      "kappa_param": 0.7244776348764671,
      "success": true,
      "log_likelihood": -13.536748144891368,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.9364593325009882,
      "kappa_param": 0.2720281789540229,
      "success": true,
      "log_likelihood": -17.414690615066778,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.9964293115050025,
      "kappa_param": 0.06742932087663331,
      "success": true,
      "log_likelihood": -8.570610136780832,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.6251894238463913,
      "kappa_param": 0.1145154663939811,
      "success": true,
      "log_likelihood": -11.72540153296912,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.8870492076854316,
      "kappa_param": 0.20536991716944403,
      "success": true,
      "log_likelihood": -18.247239087590245,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.3560457653685716,
      "kappa_param": 0.0,
      "success": true,
      "log_likelihood": -11.540124489362235,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.1413529631979134,
      "kappa_param": 2.340424586327023,
      "success": true,
      "log_likelihood": -8.557267172005194,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.0,
      "kappa_param": 0.6361558549984606,
      "success": true,
      "log_likelihood": -13.378409104142504,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.9676366665632193,
      "kappa_param": 0.36253293673923215,
      "success": true,
      "log_likelihood": -16.43093053547711,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.1053487224517302,
      "kappa_param": 0.05650029867755005,
      "success": true,
      "log_likelihood": -15.516798128968532,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.2624287261345819,
      "kappa_param": 0.07142396496306273,
      "success": true,
      "log_likelihood": -23.80536194878506,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.7618955194856791,
      "kappa_param": 0.4424167241601911,
      "success": true,
      "log_likelihood": -11.691713712382752,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.9845756954054106,
      "kappa_param": 0.02856906342136893,
      "success": true,
      "log_likelihood": -7.809018491789358,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.0,
      "kappa_param": 1.7268384604371003,
      "success": true,
      "log_likelihood": -9.258508941527303,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.3958923210468761,
      "kappa_param": 0.009873986737855393,
      "success": true,
      "log_likelihood": -22.743757631128574,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.0,
      "kappa_param": 1.3316303843866397,
      "success": true,
      "log_likelihood": -10.210675796997142,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.36374397186365476,
      "kappa_param": 0.10639916162084692,
      "success": true,
      "log_likelihood": -22.86119691311153,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.3338929661200714,
      "kappa_param": 0.0,
      "success": true,
      "log_likelihood": -11.741860654220261,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.00614983359198195,
      "kappa_param": 1.7663665745207093,
      "success": true,
      "log_likelihood": -9.19952962998277,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.505635118131555,
      "kappa_param": 0.5615471939836839,
      "success": true,
      "log_likelihood": -12.556712990291016,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.25996897871376995,
      "kappa_param": 0.014203722118333883,
      "success": true,
      "log_likelihood": -24.01402605752652,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.0,
      "kappa_param": 1.2512810465694904,
      "success": true,
      "log_likelihood": -10.442975411522907,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.9491335292708938,
      "kappa_param": 0.16834110118742215,
      "success": true,
      "log_likelihood": -17.874903346631488,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.11207760362883996,
      "kappa_param": 0.5616525735420338,
      "success": true,
      "log_likelihood": -14.568441740976265,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 2.8901668623101204,
      "kappa_param": 0.11408158779609189,
      "success": true,
      "log_likelihood": -5.461023703335984,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.9492737199409017,
      "kappa_param": 0.3224777671273509,
      "success": true,
      "log_likelihood": -16.90339736639122,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.5945495102739264,
      "kappa_param": 0.04230363234343549,
      "success": true,
      "log_likelihood": -21.073259770599574,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "lambda_param": {
        "r": 0.8301275391106986,
        "p": 1.323575007677105e-26
      },
      "kappa_param": {
        "r": 0.7730767986847166,
        "p": 4.363503194771013e-21
      }
    }
  },
  "bic_results": {
    "average_bic": 33.158253960411656,
    "individual_bics": [
      27.588389470936974,
      44.10449586130127,
      28.896094031392742,
      36.98210988811239,
      25.859088334789355,
      29.301273523773794,
      7.179982251862677,
      26.14943141187448,
      7.179982251862677,
      34.41955542810709,
      17.525193788817166,
      28.302199070462578,
      57.59724327629782,
      7.179982251862677,
      7.179982251862677,
      7.179982251862677,
      7.179982251862677,
      16.98100776287967,
      19.37736277963802,
      7.179982251862677,
      41.51956340352362,
      22.626614208691457,
      45.80253285994454,
      45.11348774150697,
      33.4501787338277,
      42.529040713669815,
      32.89043368535653,
      19.071537814600205,
      24.682167176205944,
      39.57444940579392,
      7.179982251862677,
      27.588389470900438,
      51.03068306172509,
      42.10897393213117,
      7.179982251862677,
      37.52830114831697,
      22.724879940695253,
      35.549647581816025,
      43.225372243180374,
      26.517648712500538,
      42.10450234312584,
      38.068461735933575,
      53.19444088726763,
      41.457702670326995,
      34.90609502211807,
      39.58783952906591,
      38.99936802588855,
      50.3501301386397,
      26.77270735163348,
      55.207520630993116,
      41.539665834128655,
      37.773853842371445,
      47.81677661566108,
      51.09956808869616,
      47.40305457399126,
      18.44840419080181,
      29.719888644271094,
      34.52801428961093,
      29.296838286298993,
      36.503051219239744,
      47.561764899891394,
      39.3575911859784,
      27.588389470903806,
      49.09910540555233,
      34.24053416669496,
      41.996419107045774,
      24.308258150473883,
      30.617840942850457,
      43.66151605209271,
      30.247286855636688,
      24.281572220922605,
      33.92385608519723,
      40.02889894786644,
      38.20063413484928,
      54.777761774482336,
      30.550465301677725,
      22.785074860490937,
      25.684055759966824,
      52.654553139169366,
      27.588389470906506,
      52.88943170313528,
      30.65075918535274,
      25.566097136877758,
      32.280463857494254,
      55.19508999196526,
      28.052988699958036,
      42.91684457017519,
      36.30392135886475,
      18.08908528358419,
      40.97383260969466,
      49.313557418111365
    ],
    "num_parameters": 2,
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n)"
  }
}