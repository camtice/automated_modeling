{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the given task. The model should obtain the utility, (not the probability of choosing an action).  Your goal is to eventually explore the entire space of possible explainations and mechanisms by which the observed behavior arises.\n\nYour model should use the given variables appropriately, but does not necessary need to use all or even most of the variables. Do not include the model for the utility of rejecting an offer. \n\nThe model should:\n1. Predict only responder behavior.\n2. Build on relevant psychological principles.\n3. Be considerate of high covariance between learnable parameters as the model\nwill have to pass parameter recovery tests.\n4. Be applicable to the dataset given within the task description (i.e. the model should be able to be run using only the provided dataset structure).\n5. Not include parameters to simulate general stochasticity of behavior, because this will be handled later by a temperature parameter.\n6. Should have no more than two learnable parameters.\n7. This specific model should calculate the utility of an action, which will then be used to determine\nthe probability of choosing that action. Negative values should represent a negative utility, and thus an unlikly action.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Use clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "learnable_parameters": {
    "lambda_param": {
      "description": "Learnable weight for disadvantageous inequity aversion (sensitivity to receiving less than the fair share)",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta_param": {
      "description": "Learnable weight for advantageous inequity aversion (sensitivity to receiving more than the fair share)",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "Let F = (token_self / (token_self + token_opp)) \u00d7 combined_earning.\nThen,\n\u2003U_accept = split_self \u2212 lambda_param \u00d7 max(F \u2212 split_self, 0) \u2212 beta_param \u00d7 max(split_self \u2212 F, 0)",
  "variable_descriptions": {
    "U_accept": {
      "description": "Utility of accepting the offer; higher values indicate a more favorable action. Negative values reflect a utility penalty.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "split_self": {
      "description": "The offered share for the participant in \u00a3.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Number of tokens found by the participant.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "combined_earning": {
      "description": "Total available money for a given trial in \u00a3.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "lambda_param": {
      "description": "Learnable weight for disadvantageous inequity aversion (sensitivity to receiving less than the fair share)",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta_param": {
      "description": "Learnable weight for advantageous inequity aversion (sensitivity to receiving more than the fair share)",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_summary": "A utility model for responder behavior where the utility of acceptance is computed as the monetary offer (split_self) minus an inequity penalty that depends on the deviation from a fair share. The fair share is defined proportionally from the participant\u2019s tokens relative to the total tokens and scaled by the combined earning. Two learnable parameters (lambda_param and beta_param) modulate the sensitivity to disadvantageous and advantageous deviations from fairness.",
  "full_reasoning": "Below is a step\u2010by\u2010step description of the reasoning and the final model specification.\n\nStep 1. Key psychological mechanisms:\n\u2022 Responders care not only about the absolute amount offered (split_self) but also about whether that offer meets a fairness standard.  \n\u2022 The fairness standard is computed from the relative contributions (token_self and token_opp) to the joint pot (combined_earning).  \n\u2022 When the offer falls short of the \u201cfair share\u201d (i.e. the share one would expect given one\u2019s tokens), the responder experiences \u201cdisadvantageous inequity aversion.\u201d Conversely, if one receives more than one\u2019s fair share, one might feel an \u201cadvantageous inequity aversion\u201d (or guilt), though typically to a lesser degree.\n\nStep 2. Mechanism interactions:\n\u2022 The \u201cfair share\u201d is defined as the proportion of tokens the responder found out of the total tokens multiplied by the available money.  \n\u2022 The utility of accepting an offer is given by the monetary gain (split_self) minus a penalty that increases with the deviation from the fair share.\n\u2022 Two penalties are separately weighted: one for disadvantageous inequality (when split_self falls below fair share) and one for advantageous inequality (when split_self exceeds fair share).  \n\nStep 3. Mathematical Form:\n\u2022 Calculate fair_share = (token_self / (token_self + token_opp)) \u00d7 combined_earning.\n\u2022 Use a piecewise penalty function:\n\u2003\u2013 When split_self is less than fair_share, the penalty is lambda_param times the shortfall.\n\u2003\u2013 When split_self is greater than fair_share, the penalty is beta_param times the excess.\n\u2022 Thus, the utility is a sum of the monetary offer minus the penalty incurred from deviating from the fair share.\n\nStep 4. Needed parameters:\n\u2022 lambda_param: Sensitivity to receiving less than the fair share (disadvantageous inequity aversion).\n\u2022 beta_param: Sensitivity to receiving more than the fair share (advantageous inequity aversion).\n\nStep 5. Mapping to observed behavior:\n\u2022 The computed utility U_accept (which could be negative) will be used later (with an externally provided temperature parameter) to map to the probability of accepting an offer.\n\u2022 Observed variables (split_self, token_self, token_opp, combined_earning) are directly used to compute the fair share and the utility.\n\nBelow is the formal model specification.\n\n<MODEL>\nLet F = (token_self / (token_self + token_opp)) \u00d7 combined_earning.\nThen,\n\u2003U_accept = split_self \u2212 lambda_param \u00d7 max(F \u2212 split_self, 0) \u2212 beta_param \u00d7 max(split_self \u2212 F, 0)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_accept\": {\n      \"description\": \"Utility of accepting the offer; higher values indicate a more favorable action. Negative values reflect a utility penalty.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"split_self\": {\n      \"description\": \"The offered share for the participant in \u00a3.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total available money for a given trial in \u00a3.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"lambda_param\": {\n      \"description\": \"Learnable weight for disadvantageous inequity aversion (sensitivity to receiving less than the fair share)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_param\": {\n      \"description\": \"Learnable weight for advantageous inequity aversion (sensitivity to receiving more than the fair share)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    }\n  }\n}\n</VARIABLES>\n\n<SUMMARY>\nA utility model for responder behavior where the utility of acceptance is computed as the monetary offer (split_self) minus an inequity penalty that depends on the deviation from a fair share. The fair share is defined proportionally from the participant\u2019s tokens relative to the total tokens and scaled by the combined earning. Two learnable parameters (lambda_param and beta_param) modulate the sensitivity to disadvantageous and advantageous deviations from fairness.\n</SUMMARY>",
  "simulation_code": "def simulate_model(trial_data, lambda_param=1, beta_param=1):\n    utility_values = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0)\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n\n        if token_self + token_opp ==0: #Handle division by zero error\n            F = 0\n        else:\n            F = (token_self / (token_self + token_opp)) * combined_earning\n\n        U_accept = split_self - lambda_param * max(F - split_self, 0) - beta_param * max(split_self - F, 0)\n        utility_values.append(U_accept)\n    return utility_values",
  "fitting_results": [
    {
      "lambda_param": 7.684288743418492,
      "beta_param": 1.926694536094371,
      "success": true,
      "log_likelihood": -11.809149638525554,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.551226663216151,
      "beta_param": 0.0,
      "success": true,
      "log_likelihood": -16.37303515340927,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.6418941703643353,
      "beta_param": 0.0,
      "success": true,
      "log_likelihood": -12.53662308540059,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.8940784822435786,
      "beta_param": 0.0,
      "success": true,
      "log_likelihood": -14.02606175235906,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 2.260007739860623,
      "beta_param": 0.0,
      "success": true,
      "log_likelihood": -11.165990478079127,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.1121988394021352,
      "beta_param": 0.0,
      "success": true,
      "log_likelihood": -13.729366392628663,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.0,
      "beta_param": 0.0,
      "success": true,
      "log_likelihood": -6.9501298794562105,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.0595197225831605,
      "beta_param": 0.0,
      "success": true,
      "log_likelihood": -13.793657024744233,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.0,
      "beta_param": 0.0,
      "success": true,
      "log_likelihood": -6.950129879456211,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 2.406379176933509,
      "beta_param": 0.0,
      "success": true,
      "log_likelihood": -11.667391941213,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 2.2067894077399797,
      "beta_param": 0.0,
      "success": true,
      "log_likelihood": -9.135942097573611,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 6.225872063980675,
      "beta_param": 1.9267147804026736,
      "success": true,
      "log_likelihood": -11.768043500726655,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 2.390770880734423,
      "beta_param": 0.0,
      "success": true,
      "log_likelihood": -10.422283600536549,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.0,
      "beta_param": 9.232932007591217e-18,
      "success": true,
      "log_likelihood": -6.950129879456208,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.0,
      "beta_param": 4.747544385290009e-16,
      "success": true,
      "log_likelihood": -6.950129879456209,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.0,
      "beta_param": 0.0,
      "success": true,
      "log_likelihood": -6.95012987945621,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.0,
      "beta_param": 0.0,
      "success": true,
      "log_likelihood": -6.950129879456209,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.18807432193161544,
      "beta_param": 0.0,
      "success": true,
      "log_likelihood": -10.280097766720282,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.15499615059542285,
      "beta_param": 0.0,
      "success": true,
      "log_likelihood": -10.895189135932394,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.0,
      "beta_param": 0.0,
      "success": true,
      "log_likelihood": -6.950129879456208,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.4665799119136265,
      "beta_param": 0.0,
      "success": true,
      "log_likelihood": -15.63063472083415,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.265551893528509,
      "beta_param": 0.0,
      "success": true,
      "log_likelihood": -11.715535548952774,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.8188961790766414,
      "beta_param": 0.0,
      "success": true,
      "log_likelihood": -18.73970621318138,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.305724511061835,
      "beta_param": 0.0,
      "success": true,
      "log_likelihood": -17.101735091824597,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.884405286307313,
      "beta_param": 0.0,
      "success": true,
      "log_likelihood": -14.242754334720795,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.200222940014533,
      "beta_param": 0.0,
      "success": true,
      "log_likelihood": -15.64240401895561,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.374202419809769,
      "beta_param": 0.0,
      "success": true,
      "log_likelihood": -13.671493923465585,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 4.419226160876877,
      "beta_param": 0.0,
      "success": true,
      "log_likelihood": -5.698332469573944,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.1111505394757905,
      "beta_param": 0.0,
      "success": true,
      "log_likelihood": -11.660104839713668,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.5108864451347656,
      "beta_param": 0.0,
      "success": true,
      "log_likelihood": -16.276660921007462,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.0,
      "beta_param": 0.0,
      "success": true,
      "log_likelihood": -6.950129879456209,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 7.684314232509278,
      "beta_param": 1.9267194983920917,
      "success": true,
      "log_likelihood": -11.80914963843138,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.4462433942794317,
      "beta_param": 0.0,
      "success": true,
      "log_likelihood": -22.18332168728314,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 2.039182342761657,
      "beta_param": 0.0,
      "success": true,
      "log_likelihood": -15.412768893686751,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.0,
      "beta_param": 0.0,
      "success": true,
      "log_likelihood": -6.9501298794562105,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.8212818246565619,
      "beta_param": 0.0,
      "success": true,
      "log_likelihood": -14.915760549691475,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.9007502149509711,
      "beta_param": 0.0,
      "success": true,
      "log_likelihood": -12.543270001975186,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.739788834698886,
      "beta_param": 0.0,
      "success": true,
      "log_likelihood": -14.615461339618415,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.9246994640001454,
      "beta_param": 0.0,
      "success": true,
      "log_likelihood": -17.826006856807652,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.0,
      "beta_param": 0.0,
      "success": true,
      "log_likelihood": -10.850129878148211,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.177750080486093,
      "beta_param": 0.0,
      "success": true,
      "log_likelihood": -17.799091766737067,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 3.589707652523663,
      "beta_param": 0.0,
      "success": true,
      "log_likelihood": -13.53656921570334,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.0,
      "beta_param": 0.0,
      "success": true,
      "log_likelihood": -9.650129877974955,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.2230304444323792,
      "beta_param": 0.0,
      "success": true,
      "log_likelihood": -16.47892458771167,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.1283364960457793,
      "beta_param": 0.0,
      "success": true,
      "log_likelihood": -14.75230916727072,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.51513168645058,
      "beta_param": 0.0,
      "success": true,
      "log_likelihood": -16.163185250404705,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.466580497410547,
      "beta_param": 0.0,
      "success": true,
      "log_likelihood": -15.630634721866226,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.7229084659514051,
      "beta_param": 0.0,
      "success": true,
      "log_likelihood": -19.525160698610016,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 2.5053780193700272,
      "beta_param": 0.0,
      "success": true,
      "log_likelihood": -11.61260529214423,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.8629826828437143,
      "beta_param": 1.9266463125892466,
      "success": true,
      "log_likelihood": -25.768961984919788,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.6826040255737357,
      "beta_param": 0.0,
      "success": true,
      "log_likelihood": -17.487698787335134,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 3.687825157758371,
      "beta_param": 1.926961829028541,
      "success": true,
      "log_likelihood": -18.93744981775228,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.133751681280796,
      "beta_param": 0.0,
      "success": true,
      "log_likelihood": -19.092480975761966,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.7355000935848894,
      "beta_param": 1.9268668647105043,
      "success": true,
      "log_likelihood": -22.046225502481576,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.933621336817011,
      "beta_param": 0.0,
      "success": true,
      "log_likelihood": -20.651940060725344,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 3.2624846652894353,
      "beta_param": 0.0,
      "success": true,
      "log_likelihood": -7.187614453796887,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 3.414578613214931,
      "beta_param": 0.0,
      "success": true,
      "log_likelihood": -10.38656373574959,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.0,
      "beta_param": 0.0,
      "success": true,
      "log_likelihood": -13.775129876771425,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 5.638529909934722,
      "beta_param": 1.9268318462591072,
      "success": true,
      "log_likelihood": -13.324900642598514,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.20201610607005338,
      "beta_param": 0.0,
      "success": true,
      "log_likelihood": -14.51121013001635,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.9587243184826697,
      "beta_param": 0.0,
      "success": true,
      "log_likelihood": -19.806633873563428,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.7229092723308894,
      "beta_param": 0.0,
      "success": true,
      "log_likelihood": -15.025160701753487,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 7.684314111978808,
      "beta_param": 1.926720436341759,
      "success": true,
      "log_likelihood": -11.809149638431732,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.3678349408706543,
      "beta_param": 0.0,
      "success": true,
      "log_likelihood": -21.3493202214477,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 3.6878773112522953,
      "beta_param": 0.0,
      "success": true,
      "log_likelihood": -11.34084788540331,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.2637962878508204,
      "beta_param": 0.0,
      "success": true,
      "log_likelihood": -15.301181385370107,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.0,
      "beta_param": 0.0,
      "success": true,
      "log_likelihood": -10.400129878563996,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.19738337480690976,
      "beta_param": 0.0,
      "success": true,
      "log_likelihood": -13.101187698384303,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.0699240082432735,
      "beta_param": 0.0,
      "success": true,
      "log_likelihood": -16.48394953194737,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.0,
      "beta_param": 0.0,
      "success": true,
      "log_likelihood": -12.05012987694544,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 10.0,
      "beta_param": 0.0,
      "success": true,
      "log_likelihood": -2.3866661013818056,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 3.973016345441911,
      "beta_param": 1.926732506053736,
      "success": true,
      "log_likelihood": -17.12799426390909,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.399961048692206,
      "beta_param": 0.0,
      "success": true,
      "log_likelihood": -15.95538144743596,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.30972111292220283,
      "beta_param": 0.0,
      "success": true,
      "log_likelihood": -15.249755727903047,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.1337518858653384,
      "beta_param": 5.087856556541703,
      "success": true,
      "log_likelihood": -22.594665571495003,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.9198869121655174,
      "beta_param": 0.0,
      "success": true,
      "log_likelihood": -14.970178836195212,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.0,
      "beta_param": 0.0,
      "success": true,
      "log_likelihood": -9.725129878614155,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 7.005576565930775,
      "beta_param": 10.0,
      "success": true,
      "log_likelihood": -12.977666491821479,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.6261898021429917,
      "beta_param": 0.0,
      "success": true,
      "log_likelihood": -23.600671064622013,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 7.684314895518371,
      "beta_param": 1.9267216857874443,
      "success": true,
      "log_likelihood": -11.809149638432565,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.0543413298640212,
      "beta_param": 0.0,
      "success": true,
      "log_likelihood": -24.44792671450352,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.0,
      "beta_param": 0.0,
      "success": true,
      "log_likelihood": -12.20012987731324,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 5.47376377990203,
      "beta_param": 10.0,
      "success": true,
      "log_likelihood": -10.735262420501122,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.452988740880013,
      "beta_param": 0.0,
      "success": true,
      "log_likelihood": -12.999600639701391,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.7266107319433359,
      "beta_param": 0.0,
      "success": true,
      "log_likelihood": -26.709280563282256,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 7.68430554360473,
      "beta_param": 0.0,
      "success": true,
      "log_likelihood": -10.212547704511001,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.7667715972344463,
      "beta_param": 0.0,
      "success": true,
      "log_likelihood": -18.030295987590428,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 3.4559795808632128,
      "beta_param": 5.087835377326848,
      "success": true,
      "log_likelihood": -13.556111594188147,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.0,
      "beta_param": 0.0,
      "success": true,
      "log_likelihood": -9.050129878931928,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.3678360062136088,
      "beta_param": 0.0,
      "success": true,
      "log_likelihood": -15.349320224944755,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 0.5491377566123549,
      "beta_param": 0.0,
      "success": true,
      "log_likelihood": -21.243908961167516,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "lambda_param": {
        "r": 0.913333506054787,
        "p": 5.083746936509463e-40
      },
      "beta_param": {
        "r": 0.6404516472015978,
        "p": 7.211233366407972e-13
      }
    }
  },
  "bic_results": {
    "average_bic": 35.00456495905321,
    "individual_bics": [
      30.785337153963326,
      39.913108183730756,
      32.2402840477134,
      35.21916138163034,
      29.499018833070473,
      34.62577066216954,
      21.06729763582464,
      34.75435192640069,
      21.067297635824644,
      30.50182175933822,
      25.43892207205944,
      30.70312487836553,
      28.011605077985315,
      21.067297635824637,
      21.067297635824637,
      21.067297635824637,
      21.067297635824637,
      27.72723341035278,
      28.957416148777007,
      21.067297635824637,
      38.42830731858052,
      30.59810897481777,
      44.646450303274975,
      41.37050806056141,
      35.65254654635381,
      38.45184591482344,
      34.51002572384339,
      18.563702816060108,
      30.487247556339554,
      39.72035971892714,
      21.067297635824637,
      30.785337153774982,
      51.5336812514785,
      37.992575664285724,
      21.06729763582464,
      36.99855897629517,
      32.25357788086259,
      36.39796055614905,
      42.81905159052752,
      28.867297633208644,
      42.76522141038635,
      34.2401763083189,
      26.467297632862127,
      40.12488705233556,
      36.67165621145366,
      39.49340837772163,
      38.42830732064467,
      46.21735927413225,
      30.39224846120068,
      58.70496184675179,
      42.142435451582486,
      45.04193751241678,
      45.35199982843615,
      51.25948888187537,
      48.47091799836291,
      21.542266784505994,
      27.940165348411398,
      34.71729763045507,
      33.81683916210925,
      36.18945813694492,
      46.78030562403907,
      37.217359280419195,
      30.785337153775686,
      49.86567831980762,
      29.848733647718838,
      37.76940064765243,
      27.967297634040214,
      33.36941327368083,
      40.13493694080696,
      31.2672976308031,
      11.94037007967583,
      41.4230264047304,
      39.07780077178414,
      37.66654933271831,
      52.356369019902225,
      37.107395549302645,
      26.617297634140527,
      33.12237086055518,
      54.368380006156244,
      30.78533715377735,
      56.06289130591926,
      31.5672976315387,
      28.637562717914463,
      33.166239156315,
      60.58559900347673,
      27.592133285934224,
      43.227629852093074,
      34.279261065288516,
      25.267297634776078,
      37.86567832680173,
      49.65485579924725
    ],
    "num_parameters": 2,
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n)"
  }
}