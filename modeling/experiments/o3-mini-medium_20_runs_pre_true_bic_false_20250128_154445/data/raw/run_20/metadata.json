{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the given task. The model should obtain the utility, (not the probability of choosing an action).  Your goal is to eventually explore the entire space of possible explainations and mechanisms by which the observed behavior arises.\n\nYour model should use the given variables appropriately, but does not necessary need to use all or even most of the variables. Do not include the model for the utility of rejecting an offer. \n\nThe model should:\n1. Predict only responder behavior.\n2. Build on relevant psychological principles.\n3. Be considerate of high covariance between learnable parameters as the model\nwill have to pass parameter recovery tests.\n4. Be applicable to the dataset given within the task description (i.e. the model should be able to be run using only the provided dataset structure).\n5. Not include parameters to simulate general stochasticity of behavior, because this will be handled later by a temperature parameter.\n6. Should have no more than two learnable parameters.\n7. This specific model should calculate the utility of an action, which will then be used to determine\nthe probability of choosing that action. Negative values should represent a negative utility, and thus an unlikly action.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Use clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nYou will be given the complete list of models that you have already created. Analyze the models, and notice the absence of possible explanations of behaviors that should be tested. You should start with simple obvious explanations, and as you notice these being thoroughly explored you should shift to fundamentally different models of behavior. Pay less attention to the names of the variables, and how they are actually interacting with the given behavioral data.\n\nYour results will be scored on a combination of BIC with a penalization for number of learned parameters, the ability to recover those learned parameters, and the ability of those parameters to account for the differences in behaviors among varying groups of people.\n\nPrevious Models:\nModel 1:\nSpecification: U = mu + split_self - lambda_param * max((combined_earning * (token_self / (token_self + token_opp))) - split_self, 0)\nSummary: A model of responder behavior based on fairness considerations. The fair share is determined by the participant\u2019s relative token contribution, and the utility of accepting an offer is computed as the offered monetary amount combined with an overall bias, reduced by a penalty proportional to any shortfall relative to the fair share. Two learnable parameters (mu and lambda_param) calibrate baseline utility and sensitivity to inequity.\nModel 2:\nSpecification: U = mu + split_self - lambda_param * (combined_earning * (token_self / (token_self + token_opp)) - split_self)^2\nSummary: A fairness-sensitive utility model for responders that calculates the utility of accepting an offer as the sum of the offered monetary share and an intercept, reduced by a quadratic penalty for deviations from a fair share based on token contributions. Two learnable parameters (mu and lambda_param) are used to adjust baseline acceptance bias and sensitivity to fairness deviations.\nModel 3:\nSpecification: U = mu + split_self - lambda_param * |(combined_earning * (token_self / (token_self + token_opp))) - split_self|\nSummary: A fairness-based utility model for responders that calculates the utility of accepting an offer as the sum of the offered monetary share and a baseline bias, minus a linear penalty for any deviation (in absolute terms) from a fairness benchmark determined by the participant\u2019s relative token contribution. Two learnable parameters (mu and lambda_param) calibrate the overall bias and sensitivity to inequity.\nModel 4:\nSpecification: Let \n\u2003\u2003r = combined_earning * (token_self / (token_self + token_opp))\n\u2003\u2003diff = split_self - r\n\nThen the utility of accepting an offer is given by:\n\n\u2003\u2003U = { (diff)^gamma\u2003\u2003\u2003\u2003if diff \u2265 0 \n\u2003\u2003\u2003\u2003\u2003 - lambda_param * ((-diff)^gamma)\u2003\u2003if diff < 0 }\nSummary: A prospect theory\u2013inspired utility model for responders that measures deviations from a fairness benchmark based on token contributions. The model transforms the difference between the offered split and the fair share with a non\u2010linear power function. Gains (offers above fairness) are valued with diminishing sensitivity (exponent parameter gamma), whereas losses (offers below fairness) are further penalized by a loss\u2010aversion factor (lambda_param). This yields a utility, which when negative indicates an unlikely action.\nModel 5:\nSpecification: Let r = combined_earning * (token_self / (token_self + token_opp))\nLet gap = max(r - split_self, 0)\nThen, the utility is given by:\n\u2003\u2003U = mu + split_self - lambda_param * ln(1 + gap)\nSummary: A utility model for responders where the offered share is augmented by a baseline bias and diminished by a logarithmically scaled penalty whenever the offer falls short of a fairness benchmark computed from token contributions. The model includes two learnable parameters: a baseline bias (mu) and a fairness sensitivity (lambda_param). This structure uses available monetary and token data to infer the fairness gap and its impact on responder utility.\nModel 6:\nSpecification: Let r = combined_earning * (token_self / (token_self + token_opp))\nLet error = |split_self - r| / r\nU = mu + split_self - lambda_param * ln(1 + error)\nSummary: A reference-dependent, logarithmic fairness model for responder evaluations. The model computes a baseline-adjusted offered share and subtracts a penalty that increases with the relative deviation from a fairness benchmark derived from token contributions. Two learnable parameters, mu and lambda_param, determine baseline utility and sensitivity to fairness deviations.\nModel 7:\nSpecification: Let r = combined_earning \u00d7 (token_self / (token_self + token_opp))  \nU = mu + split_self + lambda \u00d7 r \u00d7 ln(split_self / r)\nSummary: This model computes the utility of accepting an offer based on an additive combination of the offered monetary share and a fairness adjustment. The fairness benchmark is calculated from the participant\u2019s relative token contribution, and deviations from this benchmark are transformed via a logarithmic function scaled by a sensitivity parameter. Two learnable parameters \u2013 a baseline utility parameter (mu) and a fairness sensitivity parameter (lambda) \u2013 capture intrinsic acceptance bias and responsiveness to fairness deviations.\nModel 8:\nSpecification: Let r = combined_earning \u00d7 (token_self / (token_self + token_opp))\nLet gap = max(r \u2212 split_self, 0)\nThen, the utility is:\n\u2003\u2003U_i = (split_self)^(alpha) \u2212 lambda \u00d7 (gap)^(alpha)\nSummary: The model calculates the responder\u2019s utility based on a nonlinear transformation of the offered share, while penalizing offers that fall short of a fairness reference computed from token contributions. Two learnable parameters govern the curvature of monetary rewards (alpha) and the sensitivity to fairness deviations (lambda).\nModel 9:\nSpecification: Let r = combined_earning \u00d7 (token_self/(token_self + token_opp))\nU = \u03bc + ln(split_self) \u2013 \u03bb \u00d7 max{ ln(r) \u2013 ln(split_self), 0 }\nSummary: A logarithmic utility model for responders that compares the logarithm of the offered monetary share to the logarithm of a fairness benchmark computed from token contributions. The utility is given by an additive baseline bias plus the log offer, with a penalty (scaled by a fairness sensitivity parameter) applied when the offer is below the fair share.\nModel 10:\nSpecification: U = mu + split_self - lambda_param * (1 - exp(- max( (combined_earning * (token_self/(token_self + token_opp))) - split_self, 0 ) ))\nSummary: A utility model for responders that computes the attractiveness of an offer as the sum of a baseline bias and the offered monetary share, reduced by an exponential penalty if the offer falls short of a fairness benchmark derived from the relative token contributions. The penalty saturates for larger deviations, capturing diminishing sensitivity to extreme unfairness. Two learnable parameters\u2014mu (baseline bias) and lambda_param (fairness sensitivity)\u2014govern the model.\nModel 11:\nSpecification: Let r = combined_earning \u00d7 (token_self / (token_self + token_opp))\nU = mu + split_self \u00d7 (split_self / r)^(lambda_param)\nSummary: A fairness-driven responder utility model in which the fairness benchmark is computed from token contributions. The offered monetary share is multiplicatively adjusted by a power transformation of the ratio between the offer and the fairness benchmark, with an additive baseline parameter. Two learnable parameters (mu and lambda_param) determine baseline acceptance bias and sensitivity to fairness deviations.\nModel 12:\nSpecification: Let p = token_self / (token_self + token_opp)\nLet q = split_self / combined_earning\nU = mu + split_self - lambda_param * [max(p - q, 0)]^2 * combined_earning\nSummary: A utility model for responders that rewards the monetary offer and penalizes deviations below a fairness benchmark. The fair share is defined as the participant\u2019s token contribution proportion relative to total tokens, while the actual offer is considered as the proportion of the combined earnings. The penalty is applied quadratically to any shortfall (only when the actual offered proportion is below the fair share) and is scaled by the combined earning. Two learnable parameters\u2014the baseline bias (mu) and fairness sensitivity (lambda_param)\u2014govern the overall utility.\nModel 13:\nSpecification: Let r = combined_earning \u00d7 (token_self / (token_self + token_opp))\nU = mu + split_self \u2212 lambda_param \u00d7 ((max(r \u2212 split_self, 0))\u00b2 / r)\nSummary: A fairness-normalized quadratic utility model for responders. The utility of accepting an offer is given by a baseline bias (mu) plus the offered share, from which a penalty is subtracted if the offer falls short of the fairness benchmark (defined by token proportions). The penalty scales with the square of the shortfall normalized by the fair share, with lambda_param controlling sensitivity.\nModel 14:\nSpecification: Let r = combined_earning \u00d7 (token_self/(token_self + token_opp))\nThen, define:\n\u2003\u2003Utility U = mu + r \u00d7 ((split_self/r)^(lambda_param) \u2212 1)\nSummary: This model computes the utility of a responder\u2019s offer by first determining a fairness benchmark defined as the expected monetary share based on token contributions. The offered share is compared to this benchmark via a ratio that is exponentiated with a fairness sensitivity parameter. The resulting scaled difference is added to a baseline bias, such that offers exceeding the benchmark yield positive utility and offers falling short incur a penalty.\nModel 15:\nSpecification: Let r = combined_earning \u00d7 ( token_self / (token_self + token_opp) )\nThen, define the normalized shortfall as: S = max((r \u2212 split_self) / r, 0)\nThe utility for an offer is:\n\u2003U = mu + split_self \u2212 lambda \u00d7 S\nSummary: The model computes responder utility as a combination of a baseline bias (mu) and the offered monetary share (split_self), diminished by a penalty that is proportional to the relative shortfall from a fairness benchmark. The fairness benchmark is defined as the proportionate share of the combined earning based on the participant\u2019s token contribution. The penalty, scaled by the fairness sensitivity parameter (lambda), applies only when the offer falls below the fair share.\nModel 16:\nSpecification: Let r = combined_earning \u00d7 (token_self / (token_self + token_opp))\nLet D = (split_self - r) / r\nU = mu + split_self + lambda \u00d7 tanh(D)\nSummary: A responder utility model that adds the offered monetary split to a baseline bias and adjusts this sum by a bounded fairness factor. The fairness benchmark is computed from the participant's token share of combined tokens, and the normalized deviation (D) is transformed via a hyperbolic tangent function. The single fairness sensitivity parameter (lambda) scales this adjustment, while the baseline parameter (mu) shifts overall utility.\nModel 17:\nSpecification: Let \n\u2003\u2003r = combined_earning \u00d7 (token_self / (token_self + token_opp))\n\u2003\u2003diff = r \u2212 split_self\nThen the utility is given by:\n\u2003\u2003U = mu + split_self \u2212 lambda \u00d7 ln(1 + exp(diff))\nSummary: A smooth fairness-sensitive utility model that computes a fairness benchmark from token contributions and combined earnings. The model adds the offered monetary share and a baseline bias while subtracting a penalty determined by a softplus transformation of the difference between the fair share and the offer. This yields a utility value in which only offers below the fairness benchmark are penalized, with two learnable parameters (mu and lambda) governing baseline preference and inequity sensitivity.\nModel 18:\nSpecification: Let \n\u2003\u2003r = combined_earning \u00d7 (token_self/(token_self + token_opp))\n\u2003\u2003ratio = split_self / r\nThen the utility of accepting an offer is given by: \n\u2003\u2003U = mu + r \u00b7 [ (ratio)^(lambda_param) \u00d7 (ratio \u2212 1) ]\nSummary: A fairness\u2010based responder utility model that computes the fairness benchmark from token contributions and scales the monetary offer nonlinearly based on its ratio to the benchmark. Deviations from fairness are transformed via a power function modulated by a sensitivity parameter, and added to a baseline utility.\nModel 19:\nSpecification: Let r = combined_earning \u00d7 (token_self / (token_self + token_opp))\nLet S = 1 / (1 + exp(\u2013(r \u2013 split_self)))\nThen, the utility is defined as:\n\u2003U = mu + split_self \u2013 lambda \u00d7 r \u00d7 (S \u2013 0.5)\nSummary: A utility model for responders where the fairness benchmark (r) is computed from token contributions to combined earnings. The model adds the offered monetary share to a baseline bias (mu) and adjusts this value by a fairness penalty determined through a sigmoid transformation of the offer's deviation from the benchmark, scaled by r and a sensitivity parameter (lambda). This approach yields a smooth, nonlinear adjustment for fairness deviations.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "learnable_parameters": {
    "mu": {
      "description": "Baseline utility parameter (general acceptance bias).",
      "range": {
        "min": -100,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "lambda_param": {
      "description": "Fairness sensitivity parameter that scales the penalty for deviation from a fairness benchmark weighted by opponent token contribution.",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "Let \n\u2003\u2003r = combined_earning \u00d7 (token_self / (token_self + token_opp))\nThen, the utility of accepting an offer is given by:\n\u2003\u2003U = mu + split_self \u2212 lambda_param \u00d7 (token_opp / (token_self + token_opp)) \u00d7 |split_self \u2212 r|",
  "variable_descriptions": {
    "U": {
      "description": "Utility of accepting the offer for the responder.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "mu": {
      "description": "Baseline utility parameter (general acceptance bias).",
      "range": {
        "min": -100,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "lambda_param": {
      "description": "Fairness sensitivity parameter that scales the penalty for deviation from a fairness benchmark weighted by opponent token contribution.",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "split_self": {
      "description": "Monetary share offered to the participant (in \u00a3).",
      "range": {
        "min": 0,
        "max": "combined_earning",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "combined_earning": {
      "description": "Total amount of money available in that trial, based on the tokens found.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Number of tokens found by the participant.",
      "range": {
        "min": 1,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent.",
      "range": {
        "min": 1,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "r": {
      "description": "Fairness benchmark computed as the participant\u2019s proportional share of the combined earning based on token contributions.",
      "range": {
        "min": 0,
        "max": "combined_earning",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "The model computes a fairness benchmark (r) as the participant\u2019s proportional share of the combined earning based on token contributions. The utility of accepting an offer is the sum of a baseline preference (mu) and the offered monetary share (split_self), minus a penalty that is proportional to the absolute deviation of the offer from the fairness benchmark. This penalty is weighted by the relative contribution of the opponent (token_opp/(token_self+token_opp)), reflecting increased sensitivity to unfairness when the opponent\u2019s contribution is high. Only two parameters (mu and lambda_param) are learned.",
  "full_reasoning": "Let\u2019s begin by briefly discussing the mechanism behind the model. In many social decision\u2010making tasks, responders compare the actual monetary offer against a fairness benchmark that is computed from each player\u2019s token contributions. However, the \u201cpsychological cost\u201d of deviating from fairness may not be the same for all individuals. In particular, a responder may be especially sensitive to deviations when the opponent\u2019s contributions are high relative to their own. In the model below the fairness benchmark is computed in the usual way as the expected fair share (r) and the penalty for deviation from r is weighted by the relative contribution of the opponent. That is, when the opponent finds many more tokens than the participant, even a moderately unfair offer is perceived as much less acceptable. In contrast, if the token ratio is in one\u2019s favor the unfair deviation is \u201cdiscounted\u201d by a lower opponent weight. Two learnable parameters appear in the model: a baseline utility (mu) that represents a general acceptance bias, and a fairness sensitivity (lambda_param) that scales the penalty for deviations from the fairness benchmark. Note that the model calculates the utility of an action (i.e. accepting an offer) for the responder only, and no additional noise parameter is included since stochasticity will be captured later by a temperature parameter.\n\nBelow is the formal specification:\n\n<MODEL>\nLet \n\u2003\u2003r = combined_earning \u00d7 (token_self / (token_self + token_opp))\nThen, the utility of accepting an offer is given by:\n\u2003\u2003U = mu + split_self \u2212 lambda_param \u00d7 (token_opp / (token_self + token_opp)) \u00d7 |split_self \u2212 r|\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the offer for the responder.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"mu\": {\n      \"description\": \"Baseline utility parameter (general acceptance bias).\",\n      \"range\": {\n        \"min\": -100,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"lambda_param\": {\n      \"description\": \"Fairness sensitivity parameter that scales the penalty for deviation from a fairness benchmark weighted by opponent token contribution.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Monetary share offered to the participant (in \u00a3).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"combined_earning\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total amount of money available in that trial, based on the tokens found.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant.\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent.\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"r\": {\n      \"description\": \"Fairness benchmark computed as the participant\u2019s proportional share of the combined earning based on token contributions.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"combined_earning\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<SUMMARY>\nThe model computes a fairness benchmark (r) as the participant\u2019s proportional share of the combined earning based on token contributions. The utility of accepting an offer is the sum of a baseline preference (mu) and the offered monetary share (split_self), minus a penalty that is proportional to the absolute deviation of the offer from the fairness benchmark. This penalty is weighted by the relative contribution of the opponent (token_opp/(token_self+token_opp)), reflecting increased sensitivity to unfairness when the opponent\u2019s contribution is high. Only two parameters (mu and lambda_param) are learned.\n</SUMMARY>",
  "simulation_code": "def simulate_model(trial_data, mu=0, lambda_param=1):\n    utility_values = []\n    for trial in trial_data:\n        try:\n            combined_earning = trial['combined_earning']\n            token_self = trial['token_self']\n            token_opp = trial['token_opp']\n            split_self = trial['split_self']\n\n            r = combined_earning * (token_self / (token_self + token_opp))\n            U = mu + split_self - lambda_param * (token_opp / (token_self + token_opp)) * abs(split_self - r)\n            utility_values.append(U)\n        except (KeyError, ZeroDivisionError) as e:\n            print(f\"Error processing trial {trial}: {e}\")\n            utility_values.append(float('nan')) # Handle missing data or errors gracefully\n\n    return utility_values",
  "fitting_results": [
    {
      "mu": -7.0325392705158745,
      "lambda_param": 2.452484321450683,
      "success": true,
      "log_likelihood": -7.160851854575469,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "mu": 1.8952972720693861,
      "lambda_param": 4.942791599543138,
      "success": true,
      "log_likelihood": -15.521821960385143,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "mu": 2.7385834387846897,
      "lambda_param": 5.3652040229004205,
      "success": true,
      "log_likelihood": -14.027690176627315,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "mu": -0.20308133768963404,
      "lambda_param": 3.931374098755071,
      "success": true,
      "log_likelihood": -14.682137777179618,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "mu": 3.255385424824135,
      "lambda_param": 7.155218250094392,
      "success": true,
      "log_likelihood": -13.856818760364387,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "mu": 5.103553367495896,
      "lambda_param": 5.894595065796411,
      "success": true,
      "log_likelihood": -11.37850675314584,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "mu": 88.42424916414721,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "mu": 7.571676569646113,
      "lambda_param": 7.384689285933094,
      "success": true,
      "log_likelihood": -9.81300075127627,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "mu": 86.36792378569227,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "mu": 2.6668186088202543,
      "lambda_param": 7.572050027962265,
      "success": true,
      "log_likelihood": -11.899159569170031,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "mu": 4.824385918069489,
      "lambda_param": 8.813386331525415,
      "success": true,
      "log_likelihood": -9.174396559596419,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "mu": -5.81688540227028,
      "lambda_param": 3.037623670428888,
      "success": true,
      "log_likelihood": -8.358372086964943,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "mu": 6.948844239157283,
      "lambda_param": 11.808784620608488,
      "success": true,
      "log_likelihood": -8.231495835655771,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "mu": 53.79406411007991,
      "lambda_param": 9.976921049329926,
      "success": true,
      "log_likelihood": -4.095468347826586e-06,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "mu": 100.0,
      "lambda_param": 18.229729869487215,
      "success": true,
      "log_likelihood": 3.5266460860964993e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "mu": 100.0,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "mu": 87.09145005394086,
      "lambda_param": 11.716787162687181,
      "success": true,
      "log_likelihood": 3.5969509591262034e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "mu": 5.730660642505323,
      "lambda_param": 3.3779533340287826,
      "success": true,
      "log_likelihood": -7.4842815940787,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "mu": 7.44034017199906,
      "lambda_param": 3.885123146918987,
      "success": true,
      "log_likelihood": -7.457348442207005,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "mu": 100.0,
      "lambda_param": 1.315949987038012,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "mu": 3.4521850464449946,
      "lambda_param": 5.636683970508848,
      "success": true,
      "log_likelihood": -15.394815543754754,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "mu": 8.604251509906762,
      "lambda_param": 4.973662940535921,
      "success": true,
      "log_likelihood": -7.363760417543951,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "mu": -2.6309757639306057,
      "lambda_param": 2.0901485293752318,
      "success": true,
      "log_likelihood": -16.662038149363354,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "mu": 0.6536603821684753,
      "lambda_param": 3.453172888430106,
      "success": true,
      "log_likelihood": -16.446714729927074,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "mu": 4.614099537375796,
      "lambda_param": 7.551872412257163,
      "success": true,
      "log_likelihood": -14.70900745492307,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "mu": 1.4636482260874588,
      "lambda_param": 3.5693591309800756,
      "success": true,
      "log_likelihood": -16.016597383494886,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "mu": 5.2027590187092185,
      "lambda_param": 7.187023220694227,
      "success": true,
      "log_likelihood": -9.719461948997298,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "mu": 4.950890167915632,
      "lambda_param": 14.5212340006541,
      "success": true,
      "log_likelihood": -6.4518714110858655,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "mu": 5.68655787942591,
      "lambda_param": 2.9422444463038513,
      "success": true,
      "log_likelihood": -9.14872351387282,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "mu": 3.4232248858562624,
      "lambda_param": 2.989026743071201,
      "success": true,
      "log_likelihood": -15.10392037306227,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "mu": 26.06260342112992,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": -1.7471161183793576e-05,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "mu": -7.032541525245668,
      "lambda_param": 2.4525127410814798,
      "success": true,
      "log_likelihood": -7.1608518547101365,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "mu": -2.285746667668848,
      "lambda_param": 1.8385404792802678,
      "success": true,
      "log_likelihood": -19.022232232155144,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "mu": 0.5422004715704549,
      "lambda_param": 5.136670144238002,
      "success": true,
      "log_likelihood": -14.272360462673822,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "mu": 61.49318666591248,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": 3.599646802674331e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "mu": 0.4900958282637498,
      "lambda_param": 2.210270618029906,
      "success": true,
      "log_likelihood": -14.461574402682748,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "mu": 4.239275239561662,
      "lambda_param": 4.526645022535774,
      "success": true,
      "log_likelihood": -11.303774429972155,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "mu": 3.300902633777796,
      "lambda_param": 6.289702567291383,
      "success": true,
      "log_likelihood": -14.630776485120624,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "mu": 3.173677503606818,
      "lambda_param": 4.046704277720429,
      "success": true,
      "log_likelihood": -16.740395546051946,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "mu": 6.2914879918620725,
      "lambda_param": 2.811326791261317,
      "success": true,
      "log_likelihood": -8.065095327143347,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "mu": 4.417521252422926,
      "lambda_param": 5.716202985211119,
      "success": true,
      "log_likelihood": -15.51875558243579,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "mu": -2.66217435176521,
      "lambda_param": 4.263300419005016,
      "success": true,
      "log_likelihood": -13.435691657774468,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "mu": 59.140252897337575,
      "lambda_param": 10.018174003938974,
      "success": true,
      "log_likelihood": -22.440183593934453,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "mu": 1.7358111209654004,
      "lambda_param": 4.114366654649658,
      "success": true,
      "log_likelihood": -14.851069645853228,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "mu": 2.6005195306653186,
      "lambda_param": 4.218631561741178,
      "success": true,
      "log_likelihood": -14.150438104979948,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "mu": 0.7618407118815523,
      "lambda_param": 1.6538400525066892,
      "success": true,
      "log_likelihood": -15.807492275587611,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "mu": 4.270979673091684,
      "lambda_param": 6.778038936385681,
      "success": true,
      "log_likelihood": -12.218157803983477,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "mu": -2.2481807736826425,
      "lambda_param": 2.166368940531178,
      "success": true,
      "log_likelihood": -18.164385580388064,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "mu": 4.582836542496948,
      "lambda_param": 9.156017955396619,
      "success": true,
      "log_likelihood": -13.03633174311699,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "mu": -3.2679439676151434,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": -22.687410151792964,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "mu": 5.807101308272832,
      "lambda_param": 5.986867770515118,
      "success": true,
      "log_likelihood": -20.41013549809365,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "mu": -6.107682641812389,
      "lambda_param": 1.7374187514848298,
      "success": true,
      "log_likelihood": -11.706546690892841,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "mu": -0.8505986410558722,
      "lambda_param": 2.098023211006026,
      "success": true,
      "log_likelihood": -17.953225091331102,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "mu": -2.375910702240109,
      "lambda_param": 0.31686779208146354,
      "success": true,
      "log_likelihood": -20.244761159190706,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "mu": -2.790506051880608,
      "lambda_param": 1.632777258890174,
      "success": true,
      "log_likelihood": -23.102176775084402,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "mu": 4.074468942020956,
      "lambda_param": 10.800967372430598,
      "success": true,
      "log_likelihood": -8.099009325511737,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "mu": -88.904124061291,
      "lambda_param": 4.010899453009942,
      "success": true,
      "log_likelihood": -230.25850923230956,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "mu": 1.0428337612057599,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": -13.253874574149263,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "mu": -6.086280104180386,
      "lambda_param": 2.6334835090412354,
      "success": true,
      "log_likelihood": -8.795724008367035,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "mu": 1.6649035736133762,
      "lambda_param": 1.4876698988227823,
      "success": true,
      "log_likelihood": -13.868080219890226,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "mu": 0.782138289308153,
      "lambda_param": 2.7124929071824515,
      "success": true,
      "log_likelihood": -19.269842231360858,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "mu": 4.1743706040921,
      "lambda_param": 7.129127300778917,
      "success": true,
      "log_likelihood": -13.60926378304179,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "mu": -7.032534055666458,
      "lambda_param": 2.4524937106082634,
      "success": true,
      "log_likelihood": -7.160851854568842,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "mu": -2.9790767263679307,
      "lambda_param": 0.9325697368824328,
      "success": true,
      "log_likelihood": -19.9511526534912,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "mu": -2.0696767161899516,
      "lambda_param": 5.108396464777055,
      "success": true,
      "log_likelihood": -10.968376822378751,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "mu": 2.3842803772522796,
      "lambda_param": 4.689164379605827,
      "success": true,
      "log_likelihood": -13.337418244370925,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "mu": 8.328533522602218,
      "lambda_param": 3.8380231429919958,
      "success": true,
      "log_likelihood": -6.709401858930979,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "mu": 4.870049904056209,
      "lambda_param": 2.877850090153516,
      "success": true,
      "log_likelihood": -10.958499380606474,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "mu": -0.4893070971392113,
      "lambda_param": 2.157683075872195,
      "success": true,
      "log_likelihood": -15.805641060627794,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "mu": 2.3592706828784684,
      "lambda_param": 0.4794926036142146,
      "success": true,
      "log_likelihood": -10.794797351252225,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "mu": -4.5638870476664914,
      "lambda_param": 5.197562088215101,
      "success": true,
      "log_likelihood": -7.333376986651427,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "mu": -5.558034896135979,
      "lambda_param": 2.4448606140153686,
      "success": true,
      "log_likelihood": -10.915787097514855,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "mu": 0.708588531422219,
      "lambda_param": 3.5030129016640252,
      "success": true,
      "log_likelihood": -16.734762896639435,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "mu": 0.7329785721507213,
      "lambda_param": 1.1049521593274552,
      "success": true,
      "log_likelihood": -15.143462591906838,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "mu": -1.1113121582045462,
      "lambda_param": 2.1261225831050146,
      "success": true,
      "log_likelihood": -21.4985932812129,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "mu": 9.84295248866883,
      "lambda_param": 8.575632237613867,
      "success": true,
      "log_likelihood": -8.76648579933341,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "mu": 4.515152658205886,
      "lambda_param": 1.2778517695876062,
      "success": true,
      "log_likelihood": -7.186383076577972,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "mu": -8.161651053140648,
      "lambda_param": 2.418871137304373,
      "success": true,
      "log_likelihood": -6.547740645145089,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "mu": 100.0,
      "lambda_param": 18.88819973014191,
      "success": true,
      "log_likelihood": -322.3585447161116,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "mu": -7.032533674846544,
      "lambda_param": 2.4524964669294995,
      "success": true,
      "log_likelihood": -7.160851854570596,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "mu": 5.9273515712788925,
      "lambda_param": 8.559610014236227,
      "success": true,
      "log_likelihood": -37.039202195925064,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "mu": 100.0,
      "lambda_param": 10.742849457424002,
      "success": true,
      "log_likelihood": -69.07755278652131,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "mu": -4.086887442256097,
      "lambda_param": 6.146993668626438,
      "success": true,
      "log_likelihood": -7.884583056780998,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "mu": 0.23617773736717024,
      "lambda_param": 3.3713786525827887,
      "success": true,
      "log_likelihood": -13.237648205498441,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "mu": -1.9688036754372682,
      "lambda_param": 0.4347976589939834,
      "success": true,
      "log_likelihood": -25.859868645403008,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "mu": -5.721887875367771,
      "lambda_param": 3.184810651688156,
      "success": true,
      "log_likelihood": -9.105609575677283,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "mu": 2.0114127851451156,
      "lambda_param": 2.8637247938174926,
      "success": true,
      "log_likelihood": -17.790050561158928,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "mu": -1.782559625517647,
      "lambda_param": 5.535792048154049,
      "success": true,
      "log_likelihood": -13.194510760739579,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "mu": 100.0,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": -46.05170185648088,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "mu": 4.542768282879045,
      "lambda_param": 8.172948426061632,
      "success": true,
      "log_likelihood": -23.564028205750922,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "mu": -0.32145994284756796,
      "lambda_param": 1.0715292395951634,
      "success": true,
      "log_likelihood": -21.10577732037509,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "mu": {
        "r": 0.8840098392610869,
        "p": 3.919830815321019e-34
      },
      "lambda_param": {
        "r": -0.049397801733135245,
        "p": 0.6255033613896946
      }
    }
  },
  "bic_results": {
    "average_bic": 45.36140274285818,
    "individual_bics": [
      21.488741586063156,
      38.210681797682504,
      35.22241823016685,
      36.53131343127146,
      34.88067539764099,
      29.924051383203903,
      7.167037869712219,
      26.79303937946476,
      7.167037869712219,
      30.96535701525228,
      25.51583099610506,
      23.883782050842107,
      23.63002954822376,
      7.167046067848916,
      7.167037869858928,
      7.167037869712219,
      7.167037869718318,
      22.135601065069622,
      22.08173476132623,
      7.167037869712219,
      37.95666896442173,
      21.89455871200012,
      40.49111417563893,
      40.060467336766365,
      36.58505278675836,
      39.20023264390199,
      26.605961774906817,
      20.07078069908395,
      25.46448490465786,
      37.37487862303676,
      7.167072819234588,
      21.488741586332495,
      45.211502341222506,
      35.711758802259865,
      7.167037869712926,
      36.09018668227772,
      29.774586736856527,
      36.428590847153465,
      40.64782896901611,
      23.29722853119891,
      38.2045490417838,
      34.03842119246116,
      52.047405064781124,
      36.86917716861868,
      35.46791408687211,
      38.782022428087444,
      31.60335348487917,
      43.495809037688346,
      33.2397013631462,
      52.541858180498146,
      47.987308873099515,
      30.580131258697904,
      43.07348805957442,
      47.65656019529363,
      53.37139142708102,
      23.365056527935693,
      467.68405634153135,
      33.67478702521075,
      24.758485893646288,
      34.903198316692674,
      45.706722339633934,
      34.3855654429958,
      21.488741586049905,
      47.06934318389462,
      29.10379152166972,
      33.84187436565407,
      20.58584159477418,
      29.08403663812517,
      38.77831999816781,
      28.756632579416667,
      21.83379185021507,
      28.998612071941928,
      40.63656367019109,
      37.4539630607259,
      50.16422443933802,
      24.700009475579037,
      21.53980403006816,
      20.2625191672024,
      651.8841273091355,
      21.48874158605341,
      81.24544226876235,
      145.32214344995484,
      22.936203990474215,
      33.6423342879091,
      58.886775167718234,
      25.378257028266788,
      42.747138999230074,
      33.556059398391376,
      99.27044158987398,
      54.29509428841406,
      49.3785925176624
    ],
    "num_parameters": 2,
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n)"
  }
}