{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the given task. The model should obtain the utility, (not the probability of choosing an action).  Your goal is to eventually explore the entire space of possible explainations and mechanisms by which the observed behavior arises.\n\nYour model should use the given variables appropriately, but does not necessary need to use all or even most of the variables. Do not include the model for the utility of rejecting an offer. \n\nThe model should:\n1. Predict only responder behavior.\n2. Build on relevant psychological principles.\n3. Be considerate of high covariance between learnable parameters as the model\nwill have to pass parameter recovery tests.\n4. Be applicable to the dataset given within the task description (i.e. the model should be able to be run using only the provided dataset structure).\n5. Not include parameters to simulate general stochasticity of behavior, because this will be handled later by a temperature parameter.\n6. Should have no more than two learnable parameters.\n7. This specific model should calculate the utility of an action, which will then be used to determine\nthe probability of choosing that action. Negative values should represent a negative utility, and thus an unlikly action.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Use clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nYou will be given the complete list of models that you have already created. Analyze the models, and notice the absence of possible explanations of behaviors that should be tested. You should start with simple obvious explanations, and as you notice these being thoroughly explored you should shift to fundamentally different models of behavior. Pay less attention to the names of the variables, and how they are actually interacting with the given behavioral data.\n\nYour results will be scored on a combination of BIC with a penalization for number of learned parameters, the ability to recover those learned parameters, and the ability of those parameters to account for the differences in behaviors among varying groups of people.\n\nPrevious Models:\nModel 1:\nSpecification: U = mu + split_self - lambda_param * max((combined_earning * (token_self / (token_self + token_opp))) - split_self, 0)\nSummary: A model of responder behavior based on fairness considerations. The fair share is determined by the participant\u2019s relative token contribution, and the utility of accepting an offer is computed as the offered monetary amount combined with an overall bias, reduced by a penalty proportional to any shortfall relative to the fair share. Two learnable parameters (mu and lambda_param) calibrate baseline utility and sensitivity to inequity.\nModel 2:\nSpecification: U = mu + split_self - lambda_param * (combined_earning * (token_self / (token_self + token_opp)) - split_self)^2\nSummary: A fairness-sensitive utility model for responders that calculates the utility of accepting an offer as the sum of the offered monetary share and an intercept, reduced by a quadratic penalty for deviations from a fair share based on token contributions. Two learnable parameters (mu and lambda_param) are used to adjust baseline acceptance bias and sensitivity to fairness deviations.\nModel 3:\nSpecification: U = mu + split_self - lambda_param * |(combined_earning * (token_self / (token_self + token_opp))) - split_self|\nSummary: A fairness-based utility model for responders that calculates the utility of accepting an offer as the sum of the offered monetary share and a baseline bias, minus a linear penalty for any deviation (in absolute terms) from a fairness benchmark determined by the participant\u2019s relative token contribution. Two learnable parameters (mu and lambda_param) calibrate the overall bias and sensitivity to inequity.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "learnable_parameters": {
    "gamma": {
      "description": "Exponent parameter capturing diminishing sensitivity (curvature of the value function)",
      "range": {
        "min": 0.1,
        "max": 2.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "lambda_param": {
      "description": "Loss aversion coefficient weighting negative deviations from the fairness benchmark",
      "range": {
        "min": 0.1,
        "max": 5.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "Let \n\u2003\u2003r = combined_earning * (token_self / (token_self + token_opp))\n\u2003\u2003diff = split_self - r\n\nThen the utility of accepting an offer is given by:\n\n\u2003\u2003U = { (diff)^gamma\u2003\u2003\u2003\u2003if diff \u2265 0 \n\u2003\u2003\u2003\u2003\u2003 - lambda_param * ((-diff)^gamma)\u2003\u2003if diff < 0 }",
  "variable_descriptions": {
    "U": {
      "description": "Utility of accepting the offer",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "r": {
      "description": "Fairness benchmark computed as combined_earning * (token_self / (token_self + token_opp))",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "diff": {
      "description": "Difference between the offered split for self and the fairness benchmark (split_self - r)",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "gamma": {
      "description": "Exponent parameter capturing diminishing sensitivity (curvature of the value function)",
      "range": {
        "min": 0.1,
        "max": 2.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "lambda_param": {
      "description": "Loss aversion coefficient weighting negative deviations from the fairness benchmark",
      "range": {
        "min": 0.1,
        "max": 5.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "combined_earning": {
      "description": "Total amount of money earned in the trial (each token is worth \u00a33)",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Number of tokens found by the participant",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "split_self": {
      "description": "Proposed share (in \u00a3) allocated for the participant",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    }
  },
  "model_summary": "A prospect theory\u2013inspired utility model for responders that measures deviations from a fairness benchmark based on token contributions. The model transforms the difference between the offered split and the fair share with a non\u2010linear power function. Gains (offers above fairness) are valued with diminishing sensitivity (exponent parameter gamma), whereas losses (offers below fairness) are further penalized by a loss\u2010aversion factor (lambda_param). This yields a utility, which when negative indicates an unlikely action.",
  "full_reasoning": "Step-by-step reasoning:\n1. Key psychological mechanisms: The model is inspired by prospect theory applied to fairness. Responders compare the offered split (split_self) to a fairness benchmark (r), which is determined by the participant\u2019s relative token contribution (token_self relative to token_self + token_opp) applied to the combined earnings. Offers above the benchmark are treated as gains, whereas offers below the benchmark are treated as losses\u2014with losses weighted more heavily due to loss aversion.\n\n2. How these mechanisms interact: The model computes a difference (diff = split_self \u2013 r) that captures the deviation from the fairness norm. When diff is positive (i.e. the offer exceeds the fair share), the utility is given by a positively valued, concave (or convex) power function. When diff is negative (i.e. the offer is lower than the norm), the loss is accentuated by a learnable loss-aversion parameter (lambda_param).\n\n3. Mathematical form to capture these interactions: \n\u2003\u2003\u2022 Calculate the fairness benchmark r = combined_earning * (token_self / (token_self + token_opp)).\n\u2003\u2003\u2022 Compute the deviation diff = split_self \u2013 r.\n\u2003\u2003\u2022 Then, using a piecewise function inspired by prospect theory, the utility is:\n\u2003\u2003\u2003\u2003if diff \u2265 0: U = (diff)^gamma,\n\u2003\u2003\u2003\u2003if diff < 0: U = \u2013 lambda_param * (\u2013diff)^gamma.\nHere gamma captures the curvature (diminishing sensitivity) in the value function.\n\n4. Parameters needed: There are two learnable parameters:\n\u2003\u2003\u2022 gamma \u2013 the exponent capturing diminishing sensitivity (curvature).\n\u2003\u2003\u2022 lambda_param \u2013 the loss-aversion coefficient capturing the extra disutility of offers below the fairness benchmark.\n\n5. How model variables map to observable behavior: The observable split_self and combined_earning (along with token_self and token_opp) allow the computation of the fairness benchmark r and the deviation diff. This deviation is then transformed by gamma (affecting sensitivity) and lambda_param (affecting loss weight) to produce a utility value. This utility (which can be negative) determines the likelihood of accepting an offer as part of a later probability mapping.\n\nBelow is the formal specification.\n\n<MODEL>\nLet \n\u2003\u2003r = combined_earning * (token_self / (token_self + token_opp))\n\u2003\u2003diff = split_self - r\n\nThen the utility of accepting an offer is given by:\n\n\u2003\u2003U = { (diff)^gamma\u2003\u2003\u2003\u2003if diff \u2265 0 \n\u2003\u2003\u2003\u2003\u2003 - lambda_param * ((-diff)^gamma)\u2003\u2003if diff < 0 }\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the offer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"r\": {\n      \"description\": \"Fairness benchmark computed as combined_earning * (token_self / (token_self + token_opp))\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"diff\": {\n      \"description\": \"Difference between the offered split for self and the fairness benchmark (split_self - r)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"gamma\": {\n      \"description\": \"Exponent parameter capturing diminishing sensitivity (curvature of the value function)\",\n      \"range\": {\n        \"min\": 0.1,\n        \"max\": 2.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"lambda_param\": {\n      \"description\": \"Loss aversion coefficient weighting negative deviations from the fairness benchmark\",\n      \"range\": {\n        \"min\": 0.1,\n        \"max\": 5.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total amount of money earned in the trial (each token is worth \u00a33)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share (in \u00a3) allocated for the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<SUMMARY>\nA prospect theory\u2013inspired utility model for responders that measures deviations from a fairness benchmark based on token contributions. The model transforms the difference between the offered split and the fair share with a non\u2010linear power function. Gains (offers above fairness) are valued with diminishing sensitivity (exponent parameter gamma), whereas losses (offers below fairness) are further penalized by a loss\u2010aversion factor (lambda_param). This yields a utility, which when negative indicates an unlikely action.\n</SUMMARY>",
  "simulation_code": "def simulate_model(trial_data, gamma=1, lambda_param=1):\n    utility_values = []\n    for trial in trial_data:\n        combined_earning = trial.get(\"combined_earning\", 0)\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        split_self = trial.get(\"split_self\", 0)\n\n        if token_self + token_opp == 0: #handle division by zero\n            r = 0\n        else:\n            r = combined_earning * (token_self / (token_self + token_opp))\n        diff = split_self - r\n\n        if diff >= 0:\n            utility = diff**gamma\n        else:\n            utility = -lambda_param * ((-diff)**gamma)\n        utility_values.append(utility)\n    return utility_values",
  "fitting_results": [
    {
      "gamma": 0.383632150068426,
      "lambda_param": 5.0,
      "success": true,
      "log_likelihood": -7.1626091820633935,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 1.9143746564540458,
      "lambda_param": 0.14439503682608104,
      "success": true,
      "log_likelihood": -21.836752780688027,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 2.0,
      "lambda_param": 0.18751937490164491,
      "success": true,
      "log_likelihood": -20.15193876884259,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 2.0,
      "lambda_param": 0.22031736598374999,
      "success": true,
      "log_likelihood": -19.2987798312881,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 2.0,
      "lambda_param": 0.3654188443924414,
      "success": true,
      "log_likelihood": -16.211005912967646,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 1.9999999999999998,
      "lambda_param": 0.1,
      "success": true,
      "log_likelihood": -22.889210757161546,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.1,
      "lambda_param": 0.1,
      "success": true,
      "log_likelihood": -25.39466815577835,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 2.0,
      "lambda_param": 0.1,
      "success": true,
      "log_likelihood": -22.88021075717302,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.1,
      "lambda_param": 0.1,
      "success": true,
      "log_likelihood": -25.394668155778362,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 1.988438070193863,
      "lambda_param": 0.32991925469167627,
      "success": true,
      "log_likelihood": -16.95502911133608,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 2.0,
      "lambda_param": 0.347469488295909,
      "success": true,
      "log_likelihood": -16.531669088028107,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.8678717707736368,
      "lambda_param": 3.3115298905600463,
      "success": true,
      "log_likelihood": -9.050717394459973,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 2.0,
      "lambda_param": 0.3804314059782579,
      "success": true,
      "log_likelihood": -15.95515774219485,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.1,
      "lambda_param": 0.1,
      "success": true,
      "log_likelihood": -25.39466815577835,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.1,
      "lambda_param": 0.1,
      "success": true,
      "log_likelihood": -25.394668155778355,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.1,
      "lambda_param": 0.1,
      "success": true,
      "log_likelihood": -25.394668155778355,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.1,
      "lambda_param": 0.1,
      "success": true,
      "log_likelihood": -25.39466815577836,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.1,
      "lambda_param": 0.1,
      "success": true,
      "log_likelihood": -25.106156996992823,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.1,
      "lambda_param": 0.1,
      "success": true,
      "log_likelihood": -25.1582812277378,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.1,
      "lambda_param": 0.1,
      "success": true,
      "log_likelihood": -25.394668155778362,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 1.9174866846268108,
      "lambda_param": 0.13821597620455592,
      "success": true,
      "log_likelihood": -21.97747419355036,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.1,
      "lambda_param": 0.1,
      "success": true,
      "log_likelihood": -25.101541061870222,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 2.0,
      "lambda_param": 0.17917676806003616,
      "success": true,
      "log_likelihood": -20.37671985785781,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 1.9225725360844605,
      "lambda_param": 0.1,
      "success": true,
      "log_likelihood": -22.975567290643106,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 2.0,
      "lambda_param": 0.2509956219630245,
      "success": true,
      "log_likelihood": -18.55011394305929,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 1.8075382685866135,
      "lambda_param": 0.1,
      "success": true,
      "log_likelihood": -23.414765997209933,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 2.0,
      "lambda_param": 0.12598811698081674,
      "success": true,
      "log_likelihood": -21.861375847395,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 2.0,
      "lambda_param": 1.3356960402889735,
      "success": true,
      "log_likelihood": -9.92727217453865,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.1,
      "lambda_param": 0.1,
      "success": true,
      "log_likelihood": -25.16052182896364,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.1,
      "lambda_param": 0.1,
      "success": true,
      "log_likelihood": -24.934240004342875,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.1,
      "lambda_param": 0.1,
      "success": true,
      "log_likelihood": -25.394668155778362,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.38363217228132096,
      "lambda_param": 5.0,
      "success": true,
      "log_likelihood": -7.1626091820634095,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 2.0,
      "lambda_param": 0.10148573540129613,
      "success": true,
      "log_likelihood": -22.553655395612367,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 2.0,
      "lambda_param": 0.21914173474449547,
      "success": true,
      "log_likelihood": -19.32844324685386,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.1,
      "lambda_param": 0.1,
      "success": true,
      "log_likelihood": -25.39466815577836,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 1.2328605425504038,
      "lambda_param": 0.1,
      "success": true,
      "log_likelihood": -24.61346687471228,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 1.8632676254369414,
      "lambda_param": 0.1,
      "success": true,
      "log_likelihood": -23.945304647767998,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 2.0,
      "lambda_param": 0.20490927463575076,
      "success": true,
      "log_likelihood": -19.693199294627007,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 1.6445107304991826,
      "lambda_param": 0.1,
      "success": true,
      "log_likelihood": -24.198770813607485,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.1,
      "lambda_param": 0.1,
      "success": true,
      "log_likelihood": -25.220721520906217,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 2.0,
      "lambda_param": 0.1,
      "success": true,
      "log_likelihood": -22.84646075715038,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.5702871080815574,
      "lambda_param": 2.738411122368739,
      "success": true,
      "log_likelihood": -12.699332454301484,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.1,
      "lambda_param": 0.1,
      "success": true,
      "log_likelihood": -25.33783519858277,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 2.0,
      "lambda_param": 0.1,
      "success": true,
      "log_likelihood": -22.92746075713092,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 2.0,
      "lambda_param": 0.1,
      "success": true,
      "log_likelihood": -23.054585757125903,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.1,
      "lambda_param": 0.1,
      "success": true,
      "log_likelihood": -24.841154489864753,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 2.0,
      "lambda_param": 0.1374820355169131,
      "success": true,
      "log_likelihood": -21.535545534523315,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.773646214680349,
      "lambda_param": 0.8287443388636576,
      "success": true,
      "log_likelihood": -21.27846067791588,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 2.0,
      "lambda_param": 0.46268085867305164,
      "success": true,
      "log_likelihood": -14.735538314167949,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.9775822551122708,
      "lambda_param": 0.1,
      "success": true,
      "log_likelihood": -24.85625331952663,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.1,
      "lambda_param": 0.1,
      "success": true,
      "log_likelihood": -24.780526240832472,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.33589513047646913,
      "lambda_param": 3.5688044203891764,
      "success": true,
      "log_likelihood": -12.37728215337661,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 1.740992818192995,
      "lambda_param": 0.1,
      "success": true,
      "log_likelihood": -23.72487125248815,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.740656094241454,
      "lambda_param": 0.1,
      "success": true,
      "log_likelihood": -25.048198956707044,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 1.5050046658020046,
      "lambda_param": 0.38241111281146817,
      "success": true,
      "log_likelihood": -20.05146984511904,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 2.0,
      "lambda_param": 0.7308622896933766,
      "success": true,
      "log_likelihood": -12.263720417222265,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 2.0,
      "lambda_param": 0.6815452841787679,
      "success": true,
      "log_likelihood": -12.597033961241884,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.1,
      "lambda_param": 0.1,
      "success": true,
      "log_likelihood": -25.194629069211896,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.6145269931274118,
      "lambda_param": 3.6467483852200906,
      "success": true,
      "log_likelihood": -9.63039770263291,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.1,
      "lambda_param": 0.1,
      "success": true,
      "log_likelihood": -25.003526653355426,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 1.5804022750396247,
      "lambda_param": 0.1,
      "success": true,
      "log_likelihood": -24.221912287067948,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 2.0,
      "lambda_param": 0.17880334301745057,
      "success": true,
      "log_likelihood": -20.38678810706603,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.3836313456850463,
      "lambda_param": 5.0,
      "success": true,
      "log_likelihood": -7.16260918206542,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 2.0,
      "lambda_param": 0.10429508062900422,
      "success": true,
      "log_likelihood": -22.47494836365639,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.876416637794693,
      "lambda_param": 2.021858875418923,
      "success": true,
      "log_likelihood": -12.84749937815455,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 1.884013287848323,
      "lambda_param": 0.1,
      "success": true,
      "log_likelihood": -23.151233515385638,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.1,
      "lambda_param": 0.1,
      "success": true,
      "log_likelihood": -25.219908235401828,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.1,
      "lambda_param": 0.1,
      "success": true,
      "log_likelihood": -25.104502157272442,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 1.6567932618309775,
      "lambda_param": 0.1,
      "success": true,
      "log_likelihood": -23.962209443128483,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.1,
      "lambda_param": 0.1,
      "success": true,
      "log_likelihood": -25.22431321152078,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.5683912619924201,
      "lambda_param": 5.0,
      "success": true,
      "log_likelihood": -3.7502716146054715,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.5154907428029238,
      "lambda_param": 3.0657118624364004,
      "success": true,
      "log_likelihood": -12.34578494212527,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 2.0,
      "lambda_param": 0.12244272076459405,
      "success": true,
      "log_likelihood": -21.96198387094917,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.1,
      "lambda_param": 0.1,
      "success": true,
      "log_likelihood": -24.952682588199227,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.7606057297647905,
      "lambda_param": 0.2965160455233716,
      "success": true,
      "log_likelihood": -24.723220791971276,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 1.991477850162579,
      "lambda_param": 0.1,
      "success": true,
      "log_likelihood": -23.62700557103456,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.1,
      "lambda_param": 0.1,
      "success": true,
      "log_likelihood": -25.27793413083144,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.28571404773886283,
      "lambda_param": 5.0,
      "success": true,
      "log_likelihood": -7.913256724174623,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.1,
      "lambda_param": 0.1,
      "success": true,
      "log_likelihood": -24.634651949451875,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.38363210218072347,
      "lambda_param": 5.0,
      "success": true,
      "log_likelihood": -7.162609182063381,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 1.6664841860388586,
      "lambda_param": 0.1,
      "success": true,
      "log_likelihood": -24.002672970379155,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.1,
      "lambda_param": 0.1,
      "success": true,
      "log_likelihood": -25.23667383386778,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 1.3923757072179654,
      "lambda_param": 2.1568239864136833,
      "success": true,
      "log_likelihood": -10.581911876507363,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 2.0,
      "lambda_param": 0.13618005660227878,
      "success": true,
      "log_likelihood": -21.57248915504714,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.1,
      "lambda_param": 0.1,
      "success": true,
      "log_likelihood": -24.625426917285726,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.3564029567793923,
      "lambda_param": 5.0,
      "success": true,
      "log_likelihood": -6.748700667416384,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 1.2704353856773498,
      "lambda_param": 0.1,
      "success": true,
      "log_likelihood": -24.698621055859622,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.9920238562196423,
      "lambda_param": 1.6763149811940867,
      "success": true,
      "log_likelihood": -14.257288476975031,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.1,
      "lambda_param": 0.1,
      "success": true,
      "log_likelihood": -25.277166346089835,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 2.0,
      "lambda_param": 0.10429535871742503,
      "success": true,
      "log_likelihood": -22.4749483636464,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.1,
      "lambda_param": 0.1,
      "success": true,
      "log_likelihood": -24.790373991546833,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "gamma": {
        "r": 0.43297711038454584,
        "p": 6.8195409402375415e-06
      },
      "lambda_param": {
        "r": 0.7066631891408373,
        "p": 2.127941224459697e-16
      }
    }
  },
  "bic_results": {
    "average_bic": 48.131679163543986,
    "individual_bics": [
      21.49225624103901,
      50.84054343828827,
      47.4709154145974,
      45.76459753948842,
      39.58904970284751,
      52.94545939123531,
      57.95637418846892,
      52.92745939125826,
      57.95637418846894,
      41.07709609958438,
      40.23037605296843,
      25.268472665832164,
      39.07735336130192,
      57.95637418846892,
      57.95637418846893,
      57.95637418846893,
      57.956374188468935,
      57.379351870897864,
      57.483600332387816,
      57.95637418846894,
      51.12198626401294,
      57.37012000065266,
      47.92047759262784,
      53.11817245819843,
      44.2672657630308,
      53.996569871332085,
      50.88978957170222,
      27.02158222598952,
      57.488081534839495,
      57.03551788559797,
      57.95637418846894,
      21.492256241039037,
      52.27434866813695,
      45.823924370619935,
      57.956374188468935,
      56.39397162633678,
      55.05764717244821,
      46.55343646616623,
      55.56457950412719,
      57.60848091872465,
      52.859959391212975,
      32.565702785515185,
      57.84270827407776,
      53.02195939117406,
      53.27620939116402,
      56.84934685664172,
      50.23812894595885,
      49.72395923274398,
      36.63811450524812,
      56.87954451596548,
      56.72809035857716,
      31.921602183665442,
      54.61678038188852,
      57.263435790326305,
      47.2699775671503,
      31.69447871135675,
      32.361105799395986,
      57.55629601533601,
      26.427833282178042,
      57.17409118362307,
      55.61086245104811,
      47.94061409104428,
      21.49225624104306,
      52.116934604225,
      32.86203663322132,
      53.46950490768349,
      57.606854347715874,
      57.3760421914571,
      55.091456763169184,
      57.61566429995378,
      14.667581106123162,
      31.85860776116276,
      51.091005618810556,
      57.07240305331067,
      56.61347946085477,
      54.421049018981336,
      57.7229061385751,
      22.993551325261464,
      56.43634177581597,
      21.49225624103898,
      55.17238381767053,
      57.64038554464778,
      28.330861629926943,
      50.3120161870065,
      56.41789171148367,
      20.664439211744988,
      56.56427998863146,
      35.68161483086228,
      57.72137056909189,
      52.11693460420502,
      56.747785860005884
    ],
    "num_parameters": 2,
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n)"
  }
}