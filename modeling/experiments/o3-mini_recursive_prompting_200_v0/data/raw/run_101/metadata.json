{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "<think>\nFor run 101, we will slightly modify the model to allow even more flexibility in the nonlinearity. In particular, we will adjust the adaptive transformation f_adapt(z) to be a proper convex combination between a leaky linear term and a logarithmic term for z \u2265 0. Let the mixing weight be \u03b1(\u03c6) = \u03c6 \u2013 0.5 (with \u03c6 \u2208 [0.5, 1.5], \u03b1(\u03c6) \u2208 [0, 1]). For z \u2265 0, set\n\u2003f_adapt(z) = \u03b1(\u03c6)*z + [1 \u2013 \u03b1(\u03c6)]*ln(1+z),\nand for z < 0, simply set f_adapt(z) = \u03c6 * z.\nWe also add an extra cubic term (e.g., 0.000001\u00d7a\u00b3) to the dynamic threshold T to capture additional curvature.\nFor the extra blending composite, increase the influence of the softplus part by adding a fixed linear term (for example, add 0.1*(0.865/(1+a)) to the softplus expression) so that the composite becomes more responsive for small a values.\nRetain the overall structure as before: compute a as the sum of fixed components F\u2081 through F\u2081\u2081 plus a small constant \u03b4; modulate a sequentially using the given sine/cosine functions to obtain z; apply the new adaptive transformation f_adapt(z) and multiply by the dynamic threshold T (now with an extra cubic term) and by the extra blending composite (with the enhanced softplus blending); finally, compute f(x) = sign(z) \u00d7 ( f_adapt(z) \u00d7 T \u00d7 extra )^(0.944 + 0.00015\u00d7ln(1+a)), then the latent utility U = \u03b2 + \u03b3 \u00d7 f(x) and the acceptance probability via a logistic function.\nAll three learnable parameters must remain: \u03b2 \u2208 [\u201310, 10], \u03b3 \u2208 [0, 10], and \u03c6 \u2208 [0.5, 1.5]. Encourage creativity with the convex combination function and the extra blending composite to further improve accuracy, lower BIC, and enhance parameter recovery.\n</think>\nNew Instructions for Run 101 of 200:\n1. Compute the core sum \u201ca\u201d as the sum of fixed components F\u2081 through F\u2081\u2081 plus a small constant \u03b4.\n2. Multiply \u201ca\u201d by [1 + 0.012 \u00d7 sin(a + 0.045)] and then scale the result by 1.08.\n3. Sequentially modulate the scaled value with:\n\u2003\u2003\u2022 [1 + 0.008 \u00d7 cos(a + 0.065)]\n\u2003\u2003\u2022 [1 + 0.005 \u00d7 sin(a + 0.115)]\n\u2003\u2003\u2022 [1 + 0.004 \u00d7 cos(a + 0.085)]\n\u2003\u2003\u2022 [1 + 0.006 \u00d7 (sin(a + 0.035) \u00d7 cos(a + 0.055))]\n\u2003\u2003\u2022 [1 + 0.003 \u00d7 (sin(a + 0.03) \u00d7 cos(a + 0.05))]\n4. Define the resulting value as z.\n5. For the adaptive transformation f_adapt(z), use a convex combination for z \u2265 0:\n\u2003\u2003\u2022 Let \u03b1(\u03c6) = \u03c6 \u2013 0.5.\n\u2003\u2003\u2022 For z \u2265 0, set f_adapt(z) = \u03b1(\u03c6)\u00d7z + [1 \u2013 \u03b1(\u03c6)]\u00d7ln(1+z); for z < 0, set f_adapt(z) = \u03c6\u00d7z.\n6. Define the dynamic threshold T as:\n\u2003\u2003T = 1 + 0.0005\u00d7a\u00b2 + 0.00005\u00d7a\u00b3 + 0.000005\u00d7a\u2074 + 0.0000001\u00d7a\u2075 + 0.00000001\u00d7a\u2076 + 0.000000001\u00d7a\u2077 + 0.0000000001\u00d7a\u2078 + 0.000001\u00d7a\u00b3.\n7. For the extra blending composite, define\n\u2003\u2003extra = ( exp(\u2013a/0.1) \u00d7 [z/(1+|z|)] \u00d7 [1 + 0.005\u00d7sin(1/(1+a))] \u00d7 [ softplus(0.865/(1+a)) + 0.1\u00d7(0.865/(1+a)) + 0.5\u00d7(0.865/(1+a)) ] \u00d7 [1 \u2013 0.002\u00d7cos(a)] \u00d7 [1 \u2013 0.0025\u00d7cos(2.5\u00d7a)] \u00d7 [1 + 0.001\u00d7a] \u00d7 [1 + cosh(0.001\u00d7a)]^(2+0.0005\u00d7a) + 1e\u20136 )^(0.944 + 0.00015\u00d7ln(1+a)).\n\u2003\u2003You may adjust the softplus term by including the extra linear blend.\n8. Define the final transformed signal as:\n\u2003\u2003f(x) = sign(z) \u00d7 ( f_adapt(z) \u00d7 T \u00d7 extra )^(0.944 + 0.00015\u00d7ln(1+a) ).\n9. Compute the latent utility U = \u03b2 + \u03b3 \u00d7 f(x) and then the acceptance probability:\n\u2003\u2003P(accept = 1) = 1/(1 + exp(\u2013U)).\n10. Retain exactly three learnable parameters with fixed bounds: \u03b2 \u2208 [\u201310, 10], \u03b3 \u2208 [0, 10], and \u03c6 \u2208 [0.5, 1.5].\nEncourage creative, out-of-the-box modifications in defining f_adapt and extra to further improve accuracy, lower BIC, and enhance parameter recovery while preserving the overall model structure.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: <think>\nFor run 101, we will slightly modify the model to allow even more flexibility in the nonlinearity. In particular, we will adjust the adaptive transformation f_adapt(z) to be a proper convex combination between a leaky linear term and a logarithmic term for z \u2265 0. Let the mixing weight be \u03b1(\u03c6) = \u03c6 \u2013 0.5 (with \u03c6 \u2208 [0.5, 1.5], \u03b1(\u03c6) \u2208 [0, 1]). For z \u2265 0, set\n\u2003f_adapt(z) = \u03b1(\u03c6)*z + [1 \u2013 \u03b1(\u03c6)]*ln(1+z),\nand for z < 0, simply set f_adapt(z) = \u03c6 * z.\nWe also add an extra cubic term (e.g., 0.000001\u00d7a\u00b3) to the dynamic threshold T to capture additional curvature.\nFor the extra blending composite, increase the influence of the softplus part by adding a fixed linear term (for example, add 0.1*(0.865/(1+a)) to the softplus expression) so that the composite becomes more responsive for small a values.\nRetain the overall structure as before: compute a as the sum of fixed components F\u2081 through F\u2081\u2081 plus a small constant \u03b4; modulate a sequentially using the given sine/cosine functions to obtain z; apply the new adaptive transformation f_adapt(z) and multiply by the dynamic threshold T (now with an extra cubic term) and by the extra blending composite (with the enhanced softplus blending); finally, compute f(x) = sign(z) \u00d7 ( f_adapt(z) \u00d7 T \u00d7 extra )^(0.944 + 0.00015\u00d7ln(1+a)), then the latent utility U = \u03b2 + \u03b3 \u00d7 f(x) and the acceptance probability via a logistic function.\nAll three learnable parameters must remain: \u03b2 \u2208 [\u201310, 10], \u03b3 \u2208 [0, 10], and \u03c6 \u2208 [0.5, 1.5]. Encourage creativity with the convex combination function and the extra blending composite to further improve accuracy, lower BIC, and enhance parameter recovery.\n</think>\nNew Instructions for Run 101 of 200:\n1. Compute the core sum \u201ca\u201d as the sum of fixed components F\u2081 through F\u2081\u2081 plus a small constant \u03b4.\n2. Multiply \u201ca\u201d by [1 + 0.012 \u00d7 sin(a + 0.045)] and then scale the result by 1.08.\n3. Sequentially modulate the scaled value with:\n\u2003\u2003\u2022 [1 + 0.008 \u00d7 cos(a + 0.065)]\n\u2003\u2003\u2022 [1 + 0.005 \u00d7 sin(a + 0.115)]\n\u2003\u2003\u2022 [1 + 0.004 \u00d7 cos(a + 0.085)]\n\u2003\u2003\u2022 [1 + 0.006 \u00d7 (sin(a + 0.035) \u00d7 cos(a + 0.055))]\n\u2003\u2003\u2022 [1 + 0.003 \u00d7 (sin(a + 0.03) \u00d7 cos(a + 0.05))]\n4. Define the resulting value as z.\n5. For the adaptive transformation f_adapt(z), use a convex combination for z \u2265 0:\n\u2003\u2003\u2022 Let \u03b1(\u03c6) = \u03c6 \u2013 0.5.\n\u2003\u2003\u2022 For z \u2265 0, set f_adapt(z) = \u03b1(\u03c6)\u00d7z + [1 \u2013 \u03b1(\u03c6)]\u00d7ln(1+z); for z < 0, set f_adapt(z) = \u03c6\u00d7z.\n6. Define the dynamic threshold T as:\n\u2003\u2003T = 1 + 0.0005\u00d7a\u00b2 + 0.00005\u00d7a\u00b3 + 0.000005\u00d7a\u2074 + 0.0000001\u00d7a\u2075 + 0.00000001\u00d7a\u2076 + 0.000000001\u00d7a\u2077 + 0.0000000001\u00d7a\u2078 + 0.000001\u00d7a\u00b3.\n7. For the extra blending composite, define\n\u2003\u2003extra = ( exp(\u2013a/0.1) \u00d7 [z/(1+|z|)] \u00d7 [1 + 0.005\u00d7sin(1/(1+a))] \u00d7 [ softplus(0.865/(1+a)) + 0.1\u00d7(0.865/(1+a)) + 0.5\u00d7(0.865/(1+a)) ] \u00d7 [1 \u2013 0.002\u00d7cos(a)] \u00d7 [1 \u2013 0.0025\u00d7cos(2.5\u00d7a)] \u00d7 [1 + 0.001\u00d7a] \u00d7 [1 + cosh(0.001\u00d7a)]^(2+0.0005\u00d7a) + 1e\u20136 )^(0.944 + 0.00015\u00d7ln(1+a)).\n\u2003\u2003You may adjust the softplus term by including the extra linear blend.\n8. Define the final transformed signal as:\n\u2003\u2003f(x) = sign(z) \u00d7 ( f_adapt(z) \u00d7 T \u00d7 extra )^(0.944 + 0.00015\u00d7ln(1+a) ).\n9. Compute the latent utility U = \u03b2 + \u03b3 \u00d7 f(x) and then the acceptance probability:\n\u2003\u2003P(accept = 1) = 1/(1 + exp(\u2013U)).\n10. Retain exactly three learnable parameters with fixed bounds: \u03b2 \u2208 [\u201310, 10], \u03b3 \u2208 [0, 10], and \u03c6 \u2208 [0.5, 1.5].\nEncourage creative, out-of-the-box modifications in defining f_adapt and extra to further improve accuracy, lower BIC, and enhance parameter recovery while preserving the overall model structure.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<MODEL>\na = \u03b4 + \u03a3[i=1 to 11] F_i  \na_scaled = a \u00b7 (1 + 0.012\u00b7sin(a + 0.045)) \u00b7 1.08  \nz = a_scaled \u00b7 (1 + 0.008\u00b7cos(a + 0.065)) \u00b7 (1 + 0.005\u00b7sin(a + 0.115)) \u00b7 (1 + 0.004\u00b7cos(a + 0.085)) \u00b7 (1 + 0.006\u00b7(sin(a + 0.035)\u00b7cos(a + 0.055))) \u00b7 (1 + 0.003\u00b7(sin(a + 0.03)\u00b7cos(a + 0.05)))  \n\u03b1 = \u03c6 \u2013 0.5  \nf_adapt(z) = { \u03b1\u00b7z + (1 \u2013 \u03b1)\u00b7ln(1 + z)\u2003if z \u2265 0  \n\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u03c6\u00b7z\u2003\u2003\u2003\u2003\u2003\u2003\u2003if z < 0 }  \nT = 1 + 0.0005\u00b7a\u00b2 + 0.00005\u00b7a\u00b3 + 0.000005\u00b7a\u2074 + 0.0000001\u00b7a\u2075 + 0.00000001\u00b7a\u2076 + 0.000000001\u00b7a\u2077 + 0.0000000001\u00b7a\u2078 + 0.000001\u00b7a\u00b3  \nextra = { exp(\u2013a/0.1) \u00b7 [ z/(1+|z|) ] \u00b7 [1 + 0.005\u00b7sin(1/(1+a))] \u00b7 [ softplus(0.865/(1+a)) + 0.1\u00b7(0.865/(1+a)) + 0.5\u00b7(0.865/(1+a)) ] \u00b7 [1 \u2013 0.002\u00b7cos(a)] \u00b7 [1 \u2013 0.0025\u00b7cos(2.5\u00b7a)] \u00b7 [1 + 0.001\u00b7a] \u00b7 [1 + cosh(0.001\u00b7a)]^(2 + 0.0005\u00b7a) + 1\u00d710^(\u20136) }^(0.944 + 0.00015\u00b7ln(1+a))  \nf(x) = sign(z) \u00b7 [ f_adapt(z) \u00b7 T \u00b7 extra ]^(0.944 + 0.00015\u00b7ln(1+a))  \nU = \u03b2 + \u03b3 \u00b7 f(x)  \nP(accept = 1) = 1 / (1 + exp(\u2013U))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"\u03b2\": {\n      \"description\": \"Baseline utility parameter\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": { \"low\": -10, \"high\": 10 }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"\u03b3\": {\n      \"description\": \"Utility scaling parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": { \"low\": 0, \"high\": 10 }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"\u03c6\": {\n      \"description\": \"Adaptive transformation mixing parameter\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": { \"low\": 0.5, \"high\": 1.5 }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"F_i\": {\n      \"description\": \"Fixed components (F\u2081 through F\u2081\u2081) summarizing task-specific contributions\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"\u03b4\": {\n      \"description\": \"Small constant offset for the core sum a\",\n      \"range\": {\n        \"min\": -1,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"constant\",\n        \"parameters\": { \"value\": 0 }\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a\": {\n      \"description\": \"Core sum computed as the offset plus fixed components\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a_scaled\": {\n      \"description\": \"Core sum a after initial scaling by a sinusoidal modulation and constant factor\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"z\": {\n      \"description\": \"Sequentially modulated signal derived from a_scaled\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"\u03b1\": {\n      \"description\": \"Intermediate mixing weight computed as \u03c6 \u2013 0.5\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_adapt(z)\": {\n      \"description\": \"Adaptive transformation of z using a convex combination of a linear and logarithmic mapping for nonnegative z, and a linear mapping for negative z\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"T\": {\n      \"description\": \"Dynamic threshold incorporating polynomial curvature including an extra cubic term\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"extra\": {\n      \"description\": \"Extra blending composite enhancing the response for small a values via an augmented softplus blend\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f(x)\": {\n      \"description\": \"Final transformed signal computed as the sign of z times the powered product of f_adapt(z), T, and extra\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed as the baseline \u03b2 plus scaled transformed signal f(x)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"P(accept = 1)\": {\n      \"description\": \"Acceptance probability computed via a logistic transformation of the latent utility U\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"softplus\": {\n      \"description\": \"Softplus function defined as softplus(x) = ln(1 + exp(x))\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"sin\": {\n      \"description\": \"Standard sine trigonometric function\",\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"cos\": {\n      \"description\": \"Standard cosine trigonometric function\",\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"cosh\": {\n      \"description\": \"Hyperbolic cosine function\",\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"ln\": {\n      \"description\": \"Natural logarithm function\",\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"exp\": {\n      \"description\": \"Exponential function\",\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"sign\": {\n      \"description\": \"Sign function returns 1 for nonnegative input and \u20131 for negative input\",\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"abs\": {\n      \"description\": \"Absolute value function\",\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA complex nonlinear utility model predicts responder acceptance. It first computes a core sum from 11 fixed components plus a constant, applies several sinusoidal and cosine modulations to generate a signal z, and then transforms z with an adaptive nonlinear function f_adapt that convexly blends linear and logarithmic mappings for nonnegative values. A dynamic threshold T (augmented with an extra cubic curvature term) and an extra blending composite further modify the transformed signal. The final signal f(x) is raised to a power that itself depends on a, then scaled by the learnable parameter \u03b3 and shifted by the baseline \u03b2 to yield latent utility U. The acceptance probability is derived via a logistic function, thus enabling binary prediction (accept/reject) while using three learnable parameters with specified finite bounds.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['\u03b2', '\u03b3', '\u03c6']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                a = \u03b4 + \u03a3[i=1 to 11] F_i  \na_scaled = a \u00b7 (1 + 0.012\u00b7sin(a + 0.045)) \u00b7 1.08  \nz = a_scaled \u00b7 (1 + 0.008\u00b7cos(a + 0.065)) \u00b7 (1 + 0.005\u00b7sin(a + 0.115)) \u00b7 (1 + 0.004\u00b7cos(a + 0.085)) \u00b7 (1 + 0.006\u00b7(sin(a + 0.035)\u00b7cos(a + 0.055))) \u00b7 (1 + 0.003\u00b7(sin(a + 0.03)\u00b7cos(a + 0.05)))  \n\u03b1 = \u03c6 \u2013 0.5  \nf_adapt(z) = { \u03b1\u00b7z + (1 \u2013 \u03b1)\u00b7ln(1 + z)\u2003if z \u2265 0  \n\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u03c6\u00b7z\u2003\u2003\u2003\u2003\u2003\u2003\u2003if z < 0 }  \nT = 1 + 0.0005\u00b7a\u00b2 + 0.00005\u00b7a\u00b3 + 0.000005\u00b7a\u2074 + 0.0000001\u00b7a\u2075 + 0.00000001\u00b7a\u2076 + 0.000000001\u00b7a\u2077 + 0.0000000001\u00b7a\u2078 + 0.000001\u00b7a\u00b3  \nextra = { exp(\u2013a/0.1) \u00b7 [ z/(1+|z|) ] \u00b7 [1 + 0.005\u00b7sin(1/(1+a))] \u00b7 [ softplus(0.865/(1+a)) + 0.1\u00b7(0.865/(1+a)) + 0.5\u00b7(0.865/(1+a)) ] \u00b7 [1 \u2013 0.002\u00b7cos(a)] \u00b7 [1 \u2013 0.0025\u00b7cos(2.5\u00b7a)] \u00b7 [1 + 0.001\u00b7a] \u00b7 [1 + cosh(0.001\u00b7a)]^(2 + 0.0005\u00b7a) + 1\u00d710^(\u20136) }^(0.944 + 0.00015\u00b7ln(1+a))  \nf(x) = sign(z) \u00b7 [ f_adapt(z) \u00b7 T \u00b7 extra ]^(0.944 + 0.00015\u00b7ln(1+a))  \nU = \u03b2 + \u03b3 \u00b7 f(x)  \nP(accept = 1) = 1 / (1 + exp(\u2013U))\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"\\u03b2\": {\n      \"description\": \"Baseline utility parameter\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"\\u03b3\": {\n      \"description\": \"Utility scaling parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0,\n          \"high\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"\\u03c6\": {\n      \"description\": \"Adaptive transformation mixing parameter\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0.5,\n          \"high\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"F_i\": {\n      \"description\": \"Fixed components (F\\u2081 through F\\u2081\\u2081) summarizing task-specific contributions\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"\\u03b4\": {\n      \"description\": \"Small constant offset for the core sum a\",\n      \"range\": {\n        \"min\": -1,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"constant\",\n        \"parameters\": {\n          \"value\": 0\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a\": {\n      \"description\": \"Core sum computed as the offset plus fixed components\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a_scaled\": {\n      \"description\": \"Core sum a after initial scaling by a sinusoidal modulation and constant factor\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"z\": {\n      \"description\": \"Sequentially modulated signal derived from a_scaled\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"\\u03b1\": {\n      \"description\": \"Intermediate mixing weight computed as \\u03c6 \\u2013 0.5\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_adapt(z)\": {\n      \"description\": \"Adaptive transformation of z using a convex combination of a linear and logarithmic mapping for nonnegative z, and a linear mapping for negative z\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"T\": {\n      \"description\": \"Dynamic threshold incorporating polynomial curvature including an extra cubic term\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"extra\": {\n      \"description\": \"Extra blending composite enhancing the response for small a values via an augmented softplus blend\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f(x)\": {\n      \"description\": \"Final transformed signal computed as the sign of z times the powered product of f_adapt(z), T, and extra\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed as the baseline \\u03b2 plus scaled transformed signal f(x)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"P(accept = 1)\": {\n      \"description\": \"Acceptance probability computed via a logistic transformation of the latent utility U\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"softplus\": {\n      \"description\": \"Softplus function defined as softplus(x) = ln(1 + exp(x))\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"sin\": {\n      \"description\": \"Standard sine trigonometric function\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"cos\": {\n      \"description\": \"Standard cosine trigonometric function\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"cosh\": {\n      \"description\": \"Hyperbolic cosine function\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"ln\": {\n      \"description\": \"Natural logarithm function\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"exp\": {\n      \"description\": \"Exponential function\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"sign\": {\n      \"description\": \"Sign function returns 1 for nonnegative input and \\u20131 for negative input\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"abs\": {\n      \"description\": \"Absolute value function\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, \u03b2=0, \u03b3=1, \u03c6=1):\n    model_predictions = []\n    for trial in trial_data:\n        # Extract F_i values from trial data\n        F = [trial.get(f\"F{i}\", 0) for i in range(1, 12)]  # Handle missing F_i keys gracefully\n        \n        # Calculate a\n        \u03b4 = 0  # Small constant offset\n        a = \u03b4 + sum(F)\n        \n        # Calculate a_scaled\n        a_scaled = a * (1 + 0.012 * math.sin(a + 0.045)) * 1.08\n        \n        # Calculate z\n        z = a_scaled * (1 + 0.008 * math.cos(a + 0.065)) * (1 + 0.005 * math.sin(a + 0.115)) * (1 + 0.004 * math.cos(a + 0.085)) * (1 + 0.006 * (math.sin(a + 0.035) * math.cos(a + 0.055))) * (1 + 0.003 * (math.sin(a + 0.03) * math.cos(a + 0.05)))\n        \n        # Calculate \u03b1\n        \u03b1 = \u03c6 - 0.5\n        \n        # Calculate f_adapt(z)\n        if z >= 0:\n            f_adapt_z = \u03b1 * z + (1 - \u03b1) * math.log(1 + z)\n        else:\n            f_adapt_z = \u03c6 * z\n        \n        # Calculate T\n        T = 1 + 0.0005 * a**2 + 0.00005 * a**3 + 0.000005 * a**4 + 0.0000001 * a**5 + 0.00000001 * a**6 + 0.000000001 * a**7 + 0.0000000001 * a**8 + 0.000001 * a**3\n        \n        # Define softplus function\n        def softplus(x):\n            return math.log(1 + math.exp(x))\n        \n        # Calculate extra\n        abs_z = abs(z)\n        extra_base = math.exp(-a / 0.1) * (z / (1 + abs_z)) * (1 + 0.005 * math.sin(1 / (1 + a))) * (softplus(0.865 / (1 + a)) + 0.1 * (0.865 / (1 + a)) + 0.5 * (0.865 / (1 + a))) * (1 - 0.002 * math.cos(a)) * (1 - 0.0025 * math.cos(2.5 * a)) * (1 + 0.001 * a) * (1 + math.cosh(0.001 * a))**(2 + 0.0005 * a) + 1e-06\n        extra = extra_base**(0.944 + 0.00015 * math.log(1 + a))\n        \n        # Calculate f(x)\n        sign_z = 1 if z >= 0 else -1\n        f_x = sign_z * (f_adapt_z * T * extra)**(0.944 + 0.00015 * math.log(1 + a))\n        \n        # Calculate U\n        U = \u03b2 + \u03b3 * f_x\n        \n        # Calculate P(accept = 1)\n        P_accept = 1 / (1 + math.exp(-U))\n        \n        model_predictions.append(P_accept)\n    \n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data, \u03b2=0, \u03b3=1, \u03c6=1)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n",
      "timestamp": 1743544764.676916
    }
  ],
  "learnable_parameters": {
    "\u03b2": {
      "description": "Baseline utility parameter",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -10,
          "high": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "\u03b3": {
      "description": "Utility scaling parameter",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0,
          "high": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "\u03c6": {
      "description": "Adaptive transformation mixing parameter",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0.5,
          "high": 1.5
        }
      },
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "a = \u03b4 + \u03a3[i=1 to 11] F_i  \na_scaled = a \u00b7 (1 + 0.012\u00b7sin(a + 0.045)) \u00b7 1.08  \nz = a_scaled \u00b7 (1 + 0.008\u00b7cos(a + 0.065)) \u00b7 (1 + 0.005\u00b7sin(a + 0.115)) \u00b7 (1 + 0.004\u00b7cos(a + 0.085)) \u00b7 (1 + 0.006\u00b7(sin(a + 0.035)\u00b7cos(a + 0.055))) \u00b7 (1 + 0.003\u00b7(sin(a + 0.03)\u00b7cos(a + 0.05)))  \n\u03b1 = \u03c6 \u2013 0.5  \nf_adapt(z) = { \u03b1\u00b7z + (1 \u2013 \u03b1)\u00b7ln(1 + z)\u2003if z \u2265 0  \n\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u03c6\u00b7z\u2003\u2003\u2003\u2003\u2003\u2003\u2003if z < 0 }  \nT = 1 + 0.0005\u00b7a\u00b2 + 0.00005\u00b7a\u00b3 + 0.000005\u00b7a\u2074 + 0.0000001\u00b7a\u2075 + 0.00000001\u00b7a\u2076 + 0.000000001\u00b7a\u2077 + 0.0000000001\u00b7a\u2078 + 0.000001\u00b7a\u00b3  \nextra = { exp(\u2013a/0.1) \u00b7 [ z/(1+|z|) ] \u00b7 [1 + 0.005\u00b7sin(1/(1+a))] \u00b7 [ softplus(0.865/(1+a)) + 0.1\u00b7(0.865/(1+a)) + 0.5\u00b7(0.865/(1+a)) ] \u00b7 [1 \u2013 0.002\u00b7cos(a)] \u00b7 [1 \u2013 0.0025\u00b7cos(2.5\u00b7a)] \u00b7 [1 + 0.001\u00b7a] \u00b7 [1 + cosh(0.001\u00b7a)]^(2 + 0.0005\u00b7a) + 1\u00d710^(\u20136) }^(0.944 + 0.00015\u00b7ln(1+a))  \nf(x) = sign(z) \u00b7 [ f_adapt(z) \u00b7 T \u00b7 extra ]^(0.944 + 0.00015\u00b7ln(1+a))  \nU = \u03b2 + \u03b3 \u00b7 f(x)  \nP(accept = 1) = 1 / (1 + exp(\u2013U))",
  "variable_descriptions": {
    "\u03b2": {
      "description": "Baseline utility parameter",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -10,
          "high": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "\u03b3": {
      "description": "Utility scaling parameter",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0,
          "high": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "\u03c6": {
      "description": "Adaptive transformation mixing parameter",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0.5,
          "high": 1.5
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "F_i": {
      "description": "Fixed components (F\u2081 through F\u2081\u2081) summarizing task-specific contributions",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": {
        "type": "empirical",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "\u03b4": {
      "description": "Small constant offset for the core sum a",
      "range": {
        "min": -1,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "constant",
        "parameters": {
          "value": 0
        }
      },
      "learnable": false,
      "source": "calculated"
    },
    "a": {
      "description": "Core sum computed as the offset plus fixed components",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "a_scaled": {
      "description": "Core sum a after initial scaling by a sinusoidal modulation and constant factor",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "z": {
      "description": "Sequentially modulated signal derived from a_scaled",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "\u03b1": {
      "description": "Intermediate mixing weight computed as \u03c6 \u2013 0.5",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "f_adapt(z)": {
      "description": "Adaptive transformation of z using a convex combination of a linear and logarithmic mapping for nonnegative z, and a linear mapping for negative z",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "T": {
      "description": "Dynamic threshold incorporating polynomial curvature including an extra cubic term",
      "range": {
        "min": 1,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "extra": {
      "description": "Extra blending composite enhancing the response for small a values via an augmented softplus blend",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "f(x)": {
      "description": "Final transformed signal computed as the sign of z times the powered product of f_adapt(z), T, and extra",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "U": {
      "description": "Latent utility computed as the baseline \u03b2 plus scaled transformed signal f(x)",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "P(accept = 1)": {
      "description": "Acceptance probability computed via a logistic transformation of the latent utility U",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "softplus": {
      "description": "Softplus function defined as softplus(x) = ln(1 + exp(x))",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "sin": {
      "description": "Standard sine trigonometric function",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "cos": {
      "description": "Standard cosine trigonometric function",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "cosh": {
      "description": "Hyperbolic cosine function",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "ln": {
      "description": "Natural logarithm function",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "exp": {
      "description": "Exponential function",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "sign": {
      "description": "Sign function returns 1 for nonnegative input and \u20131 for negative input",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "abs": {
      "description": "Absolute value function",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "A complex nonlinear utility model predicts responder acceptance. It first computes a core sum from 11 fixed components plus a constant, applies several sinusoidal and cosine modulations to generate a signal z, and then transforms z with an adaptive nonlinear function f_adapt that convexly blends linear and logarithmic mappings for nonnegative values. A dynamic threshold T (augmented with an extra cubic curvature term) and an extra blending composite further modify the transformed signal. The final signal f(x) is raised to a power that itself depends on a, then scaled by the learnable parameter \u03b3 and shifted by the baseline \u03b2 to yield latent utility U. The acceptance probability is derived via a logistic function, thus enabling binary prediction (accept/reject) while using three learnable parameters with specified finite bounds.",
  "target_variable": "accept",
  "full_reasoning": "<MODEL>\na = \u03b4 + \u03a3[i=1 to 11] F_i  \na_scaled = a \u00b7 (1 + 0.012\u00b7sin(a + 0.045)) \u00b7 1.08  \nz = a_scaled \u00b7 (1 + 0.008\u00b7cos(a + 0.065)) \u00b7 (1 + 0.005\u00b7sin(a + 0.115)) \u00b7 (1 + 0.004\u00b7cos(a + 0.085)) \u00b7 (1 + 0.006\u00b7(sin(a + 0.035)\u00b7cos(a + 0.055))) \u00b7 (1 + 0.003\u00b7(sin(a + 0.03)\u00b7cos(a + 0.05)))  \n\u03b1 = \u03c6 \u2013 0.5  \nf_adapt(z) = { \u03b1\u00b7z + (1 \u2013 \u03b1)\u00b7ln(1 + z)\u2003if z \u2265 0  \n\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u03c6\u00b7z\u2003\u2003\u2003\u2003\u2003\u2003\u2003if z < 0 }  \nT = 1 + 0.0005\u00b7a\u00b2 + 0.00005\u00b7a\u00b3 + 0.000005\u00b7a\u2074 + 0.0000001\u00b7a\u2075 + 0.00000001\u00b7a\u2076 + 0.000000001\u00b7a\u2077 + 0.0000000001\u00b7a\u2078 + 0.000001\u00b7a\u00b3  \nextra = { exp(\u2013a/0.1) \u00b7 [ z/(1+|z|) ] \u00b7 [1 + 0.005\u00b7sin(1/(1+a))] \u00b7 [ softplus(0.865/(1+a)) + 0.1\u00b7(0.865/(1+a)) + 0.5\u00b7(0.865/(1+a)) ] \u00b7 [1 \u2013 0.002\u00b7cos(a)] \u00b7 [1 \u2013 0.0025\u00b7cos(2.5\u00b7a)] \u00b7 [1 + 0.001\u00b7a] \u00b7 [1 + cosh(0.001\u00b7a)]^(2 + 0.0005\u00b7a) + 1\u00d710^(\u20136) }^(0.944 + 0.00015\u00b7ln(1+a))  \nf(x) = sign(z) \u00b7 [ f_adapt(z) \u00b7 T \u00b7 extra ]^(0.944 + 0.00015\u00b7ln(1+a))  \nU = \u03b2 + \u03b3 \u00b7 f(x)  \nP(accept = 1) = 1 / (1 + exp(\u2013U))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"\u03b2\": {\n      \"description\": \"Baseline utility parameter\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": { \"low\": -10, \"high\": 10 }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"\u03b3\": {\n      \"description\": \"Utility scaling parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": { \"low\": 0, \"high\": 10 }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"\u03c6\": {\n      \"description\": \"Adaptive transformation mixing parameter\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": { \"low\": 0.5, \"high\": 1.5 }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"F_i\": {\n      \"description\": \"Fixed components (F\u2081 through F\u2081\u2081) summarizing task-specific contributions\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"\u03b4\": {\n      \"description\": \"Small constant offset for the core sum a\",\n      \"range\": {\n        \"min\": -1,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"constant\",\n        \"parameters\": { \"value\": 0 }\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a\": {\n      \"description\": \"Core sum computed as the offset plus fixed components\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a_scaled\": {\n      \"description\": \"Core sum a after initial scaling by a sinusoidal modulation and constant factor\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"z\": {\n      \"description\": \"Sequentially modulated signal derived from a_scaled\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"\u03b1\": {\n      \"description\": \"Intermediate mixing weight computed as \u03c6 \u2013 0.5\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_adapt(z)\": {\n      \"description\": \"Adaptive transformation of z using a convex combination of a linear and logarithmic mapping for nonnegative z, and a linear mapping for negative z\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"T\": {\n      \"description\": \"Dynamic threshold incorporating polynomial curvature including an extra cubic term\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"extra\": {\n      \"description\": \"Extra blending composite enhancing the response for small a values via an augmented softplus blend\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f(x)\": {\n      \"description\": \"Final transformed signal computed as the sign of z times the powered product of f_adapt(z), T, and extra\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed as the baseline \u03b2 plus scaled transformed signal f(x)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"P(accept = 1)\": {\n      \"description\": \"Acceptance probability computed via a logistic transformation of the latent utility U\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"softplus\": {\n      \"description\": \"Softplus function defined as softplus(x) = ln(1 + exp(x))\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"sin\": {\n      \"description\": \"Standard sine trigonometric function\",\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"cos\": {\n      \"description\": \"Standard cosine trigonometric function\",\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"cosh\": {\n      \"description\": \"Hyperbolic cosine function\",\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"ln\": {\n      \"description\": \"Natural logarithm function\",\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"exp\": {\n      \"description\": \"Exponential function\",\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"sign\": {\n      \"description\": \"Sign function returns 1 for nonnegative input and \u20131 for negative input\",\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"abs\": {\n      \"description\": \"Absolute value function\",\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA complex nonlinear utility model predicts responder acceptance. It first computes a core sum from 11 fixed components plus a constant, applies several sinusoidal and cosine modulations to generate a signal z, and then transforms z with an adaptive nonlinear function f_adapt that convexly blends linear and logarithmic mappings for nonnegative values. A dynamic threshold T (augmented with an extra cubic curvature term) and an extra blending composite further modify the transformed signal. The final signal f(x) is raised to a power that itself depends on a, then scaled by the learnable parameter \u03b3 and shifted by the baseline \u03b2 to yield latent utility U. The acceptance probability is derived via a logistic function, thus enabling binary prediction (accept/reject) while using three learnable parameters with specified finite bounds.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: a = \u03b4 + \u03a3[i=1 to 11] F_i  \na_scaled = a \u00b7 (1 + 0.012\u00b7sin(a + 0.045)) \u00b7 1.08  \nz = a_scaled \u00b7 (1 + 0.008\u00b7cos(a + 0.065)) \u00b7 (1 + 0.005\u00b7sin(a + 0.115)) \u00b7 (1 + 0.004\u00b7cos(a + 0.085)) \u00b7 (1 + 0.006\u00b7(sin(a + 0.035)\u00b7cos(a + 0.055))) \u00b7 (1 + 0.003\u00b7(sin(a + 0.03)\u00b7cos(a + 0.05)))  \n\u03b1 = \u03c6 \u2013 0.5  \nf_adapt(z) = { \u03b1\u00b7z + (1 \u2013 \u03b1)\u00b7ln(1 + z)\u2003if z \u2265 0  \n\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u03c6\u00b7z\u2003\u2003\u2003\u2003\u2003\u2003\u2003if z < 0 }  \nT = 1 + 0.0005\u00b7a\u00b2 + 0.00005\u00b7a\u00b3 + 0.000005\u00b7a\u2074 + 0.0000001\u00b7a\u2075 + 0.00000001\u00b7a\u2076 + 0.000000001\u00b7a\u2077 + 0.0000000001\u00b7a\u2078 + 0.000001\u00b7a\u00b3  \nextra = { exp(\u2013a/0.1) \u00b7 [ z/(1+|z|) ] \u00b7 [1 + 0.005\u00b7sin(1/(1+a))] \u00b7 [ softplus(0.865/(1+a)) + 0.1\u00b7(0.865/(1+a)) + 0.5\u00b7(0.865/(1+a)) ] \u00b7 [1 \u2013 0.002\u00b7cos(a)] \u00b7 [1 \u2013 0.0025\u00b7cos(2.5\u00b7a)] \u00b7 [1 + 0.001\u00b7a] \u00b7 [1 + cosh(0.001\u00b7a)]^(2 + 0.0005\u00b7a) + 1\u00d710^(\u20136) }^(0.944 + 0.00015\u00b7ln(1+a))  \nf(x) = sign(z) \u00b7 [ f_adapt(z) \u00b7 T \u00b7 extra ]^(0.944 + 0.00015\u00b7ln(1+a))  \nU = \u03b2 + \u03b3 \u00b7 f(x)  \nP(accept = 1) = 1 / (1 + exp(\u2013U))\nSummary: A complex nonlinear utility model predicts responder acceptance. It first computes a core sum from 11 fixed components plus a constant, applies several sinusoidal and cosine modulations to generate a signal z, and then transforms z with an adaptive nonlinear function f_adapt that convexly blends linear and logarithmic mappings for nonnegative values. A dynamic threshold T (augmented with an extra cubic curvature term) and an extra blending composite further modify the transformed signal. The final signal f(x) is raised to a power that itself depends on a, then scaled by the learnable parameter \u03b3 and shifted by the baseline \u03b2 to yield latent utility U. The acceptance probability is derived via a logistic function, thus enabling binary prediction (accept/reject) while using three learnable parameters with specified finite bounds.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, \u03b2=0, \u03b3=1, \u03c6=1):\n    model_predictions = []\n    for trial in trial_data:\n        # Extract F_i values from trial data\n        F = [trial.get(f\"F{i}\", 0) for i in range(1, 12)]  # Handle missing F_i keys gracefully\n        \n        # Calculate a\n        \u03b4 = 0  # Small constant offset\n        a = \u03b4 + sum(F)\n        \n        # Calculate a_scaled\n        a_scaled = a * (1 + 0.012 * math.sin(a + 0.045)) * 1.08\n        \n        # Calculate z\n        z = a_scaled * (1 + 0.008 * math.cos(a + 0.065)) * (1 + 0.005 * math.sin(a + 0.115)) * (1 + 0.004 * math.cos(a + 0.085)) * (1 + 0.006 * (math.sin(a + 0.035) * math.cos(a + 0.055))) * (1 + 0.003 * (math.sin(a + 0.03) * math.cos(a + 0.05)))\n        \n        # Calculate \u03b1\n        \u03b1 = \u03c6 - 0.5\n        \n        # Calculate f_adapt(z)\n        if z >= 0:\n            f_adapt_z = \u03b1 * z + (1 - \u03b1) * math.log(1 + z)\n        else:\n            f_adapt_z = \u03c6 * z\n        \n        # Calculate T\n        T = 1 + 0.0005 * a**2 + 0.00005 * a**3 + 0.000005 * a**4 + 0.0000001 * a**5 + 0.00000001 * a**6 + 0.000000001 * a**7 + 0.0000000001 * a**8 + 0.000001 * a**3\n        \n        # Define softplus function\n        def softplus(x):\n            return math.log(1 + math.exp(x))\n        \n        # Calculate extra\n        abs_z = abs(z)\n        extra_base = math.exp(-a / 0.1) * (z / (1 + abs_z)) * (1 + 0.005 * math.sin(1 / (1 + a))) * (softplus(0.865 / (1 + a)) + 0.1 * (0.865 / (1 + a)) + 0.5 * (0.865 / (1 + a))) * (1 - 0.002 * math.cos(a)) * (1 - 0.0025 * math.cos(2.5 * a)) * (1 + 0.001 * a) * (1 + math.cosh(0.001 * a))**(2 + 0.0005 * a) + 1e-06\n        extra = extra_base**(0.944 + 0.00015 * math.log(1 + a))\n        \n        # Calculate f(x)\n        sign_z = 1 if z >= 0 else -1\n        f_x = sign_z * (f_adapt_z * T * extra)**(0.944 + 0.00015 * math.log(1 + a))\n        \n        # Calculate U\n        U = \u03b2 + \u03b3 * f_x\n        \n        # Calculate P(accept = 1)\n        P_accept = 1 / (1 + math.exp(-U))\n        \n        model_predictions.append(P_accept)\n    \n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.5512820512820512,
  "fitting_results": [
    {
      "\u03b2": -10.0,
      "\u03b3": 3.5829670172712182,
      "\u03c6": 1.0564393606703033,
      "success": true,
      "log_likelihood": -24.953979470262787,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -6.337168058950483,
      "\u03b3": 7.214600043487175,
      "\u03c6": 0.7799367306830733,
      "success": true,
      "log_likelihood": -24.95331253023204,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -2.0782934148516676,
      "\u03b3": 1.5828688235310384,
      "\u03c6": 1.4630155796444053,
      "success": true,
      "log_likelihood": -24.897714324107138,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -10.0,
      "\u03b3": 3.8603692780244394,
      "\u03c6": 1.4210794256717372,
      "success": true,
      "log_likelihood": -24.953434695838467,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -10.0,
      "\u03b3": 3.4789070665204527,
      "\u03c6": 0.5842276163046748,
      "success": true,
      "log_likelihood": -24.953389297969775,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 0.28407584124056007,
      "\u03b3": 0.986470060351804,
      "\u03c6": 0.5291219164318752,
      "success": true,
      "log_likelihood": -23.545973163849986,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 10.0,
      "\u03b3": 8.859199487293608,
      "\u03c6": 1.3909351547377469,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 0.8149157771300772,
      "\u03b3": 5.3087992384655465,
      "\u03c6": 1.4241321542989231,
      "success": true,
      "log_likelihood": -22.91451005172695,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 10.0,
      "\u03b3": 1.4384568982189017,
      "\u03c6": 0.752717100978432,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -10.0,
      "\u03b3": 5.1133212261466685,
      "\u03c6": 0.8757588978754727,
      "success": true,
      "log_likelihood": -24.95348009370716,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -10.0,
      "\u03b3": 9.420174341678768,
      "\u03c6": 1.3757446141825054,
      "success": true,
      "log_likelihood": -24.95338929796977,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -10.0,
      "\u03b3": 8.995131083742162,
      "\u03c6": 0.573035755435442,
      "success": true,
      "log_likelihood": -24.953934072394095,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -10.0,
      "\u03b3": 7.7879134921269335,
      "\u03c6": 0.9211461576704043,
      "success": true,
      "log_likelihood": -24.953434695838467,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 10.0,
      "\u03b3": 5.857809966434752,
      "\u03c6": 0.9022175127127413,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 10.0,
      "\u03b3": 4.2964572574962165,
      "\u03c6": 0.8794957550882327,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 10.0,
      "\u03b3": 2.812076099367573,
      "\u03c6": 1.3627546346574633,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 10.0,
      "\u03b3": 3.841971192868525,
      "\u03c6": 1.0452603668671137,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 10.0,
      "\u03b3": 1.1798385249376386,
      "\u03c6": 0.6062457903741738,
      "success": true,
      "log_likelihood": -16.27763329973089,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 10.0,
      "\u03b3": 0.324114477283437,
      "\u03c6": 1.2418742222881898,
      "success": true,
      "log_likelihood": -15.27767869783462,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 10.0,
      "\u03b3": 6.206508973566453,
      "\u03c6": 1.3966354232998188,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -1.247448081775171,
      "\u03b3": 9.749022980499172,
      "\u03c6": 0.7219596228324929,
      "success": true,
      "log_likelihood": -24.730616750311754,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 10.0,
      "\u03b3": 6.989534165502258,
      "\u03c6": 1.0843956225703857,
      "success": true,
      "log_likelihood": -16.27763329973089,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -10.0,
      "\u03b3": 3.8237298564366196,
      "\u03c6": 0.8187020201851255,
      "success": true,
      "log_likelihood": -24.95352549157585,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -7.340654768641659,
      "\u03b3": 7.030041719726552,
      "\u03c6": 0.8855354734643024,
      "success": true,
      "log_likelihood": -24.952652178483724,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -9.362099473153926,
      "\u03b3": 6.983487824904068,
      "\u03c6": 0.7534472903420325,
      "success": true,
      "log_likelihood": -24.95329852617206,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -0.6790407147199747,
      "\u03b3": 2.856211696139843,
      "\u03c6": 0.5709179890338811,
      "success": true,
      "log_likelihood": -24.450957568539792,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -1.2474462198504106,
      "\u03b3": 5.463922734249843,
      "\u03c6": 1.025336219451098,
      "success": true,
      "log_likelihood": -24.73061675030833,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -10.0,
      "\u03b3": 8.544655278635615,
      "\u03c6": 1.1987826560102064,
      "success": true,
      "log_likelihood": -24.953661685181935,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 10.0,
      "\u03b3": 5.0995706630720194,
      "\u03c6": 1.248933744408901,
      "success": true,
      "log_likelihood": -15.27767869783462,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 10.0,
      "\u03b3": 0.5686461522883868,
      "\u03c6": 1.4330919247192972,
      "success": true,
      "log_likelihood": -19.2774971054197,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 10.0,
      "\u03b3": 0.04236093011194986,
      "\u03c6": 1.3617173039853956,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -10.0,
      "\u03b3": 4.215919241092631,
      "\u03c6": 1.160888386509519,
      "success": true,
      "log_likelihood": -24.953979470262787,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -10.0,
      "\u03b3": 7.7460964489924455,
      "\u03c6": 1.3221784246233752,
      "success": true,
      "log_likelihood": -24.953434695838464,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -10.0,
      "\u03b3": 6.366086130573942,
      "\u03c6": 0.9027973337200143,
      "success": true,
      "log_likelihood": -24.953480093707164,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 10.0,
      "\u03b3": 6.573455769078028,
      "\u03c6": 0.7612990035024433,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 0.28406957030645763,
      "\u03b3": 0.24189018403756757,
      "\u03c6": 1.2154291920061622,
      "success": true,
      "log_likelihood": -23.545973163855617,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 1.5194073148298368,
      "\u03b3": 6.701349307686951,
      "\u03c6": 1.014528729433601,
      "success": true,
      "log_likelihood": -22.157939225115467,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -8.310373218413986,
      "\u03b3": 5.596709274694845,
      "\u03c6": 1.4989911917835756,
      "success": true,
      "log_likelihood": -24.95329876504042,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 0.8148732316102687,
      "\u03b3": 9.909183282110607,
      "\u03c6": 1.1863322568620294,
      "success": true,
      "log_likelihood": -22.9145100514134,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 10.0,
      "\u03b3": 3.9495371936127666,
      "\u03c6": 0.9262482861070773,
      "success": true,
      "log_likelihood": -14.277724095938346,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -0.1926511206731484,
      "\u03b3": 4.4113642642549635,
      "\u03c6": 1.1113234042399744,
      "success": true,
      "log_likelihood": -24.0569451887245,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -9.999999999999998,
      "\u03b3": 2.6014679856462797,
      "\u03c6": 1.3164432307659153,
      "success": true,
      "log_likelihood": -24.95375248091932,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 9.999999999999998,
      "\u03b3": 5.284006373012048,
      "\u03c6": 0.8821464468288117,
      "success": true,
      "log_likelihood": -12.277814892145805,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -1.2474436179101103,
      "\u03b3": 0.3405166635836021,
      "\u03c6": 1.3846502274041903,
      "success": true,
      "log_likelihood": -24.730616750305117,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -0.19265380141642371,
      "\u03b3": 5.843076513765361,
      "\u03c6": 0.7245341677640035,
      "success": true,
      "log_likelihood": -24.056945188723496,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 3.071370634273358,
      "\u03b3": 1.271818004574381,
      "\u03c6": 0.5563315526938483,
      "success": true,
      "log_likelihood": -21.270320982037276,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -2.0795475688800464,
      "\u03b3": 9.174723843382614,
      "\u03c6": 0.9818226080311004,
      "success": true,
      "log_likelihood": -24.89771439419242,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3333333333333333,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -10.0,
      "\u03b3": 7.9155251212722275,
      "\u03c6": 1.0986141962425546,
      "success": true,
      "log_likelihood": -24.95348009370716,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -10.0,
      "\u03b3": 2.2979640576532088,
      "\u03c6": 1.2982355407023025,
      "success": true,
      "log_likelihood": -24.953434695838464,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -2.078356314914618,
      "\u03b3": 8.001384437710882,
      "\u03c6": 1.1027660840550162,
      "success": true,
      "log_likelihood": -24.897714324340694,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 1.5230039831801667,
      "\u03b3": 8.954105069841056,
      "\u03c6": 1.4964147076541985,
      "success": true,
      "log_likelihood": -22.157938154732967,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -10.0,
      "\u03b3": 1.742858420543949,
      "\u03c6": 0.8739557344426204,
      "success": true,
      "log_likelihood": -24.9538886745254,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -2.07853257235602,
      "\u03b3": 5.570630057705856,
      "\u03c6": 0.914410864660565,
      "success": true,
      "log_likelihood": -24.89771432684274,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -6.9408788521718,
      "\u03b3": 1.8882595752145204,
      "\u03c6": 1.040105286397071,
      "success": true,
      "log_likelihood": -24.95040324433905,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -10.0,
      "\u03b3": 9.67256904784607,
      "\u03c6": 1.427792415560011,
      "success": true,
      "log_likelihood": -24.95348009370716,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -10.0,
      "\u03b3": 3.0799128324359257,
      "\u03c6": 0.6693172012354466,
      "success": true,
      "log_likelihood": -24.953570889444546,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -10.0,
      "\u03b3": 9.179409340717973,
      "\u03c6": 1.3742944122096035,
      "success": true,
      "log_likelihood": -24.953661685181938,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 10.0,
      "\u03b3": 3.3649730747198427,
      "\u03c6": 1.131202982377287,
      "success": true,
      "log_likelihood": -15.27767869783462,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -10.0,
      "\u03b3": 6.641165970357774,
      "\u03c6": 1.390637516820444,
      "success": true,
      "log_likelihood": -24.953934072394095,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 10.0,
      "\u03b3": 7.30767092633914,
      "\u03c6": 0.5841608890801518,
      "success": true,
      "log_likelihood": -18.27754250352343,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -0.1926500557937138,
      "\u03b3": 8.98685892790496,
      "\u03c6": 1.024111834180184,
      "success": true,
      "log_likelihood": -24.056945188725944,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -6.2134076120537465,
      "\u03b3": 2.9677732292982917,
      "\u03c6": 0.8589986324647408,
      "success": true,
      "log_likelihood": -24.95331646418115,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -10.0,
      "\u03b3": 0.10815839044826303,
      "\u03c6": 0.5025243940250442,
      "success": true,
      "log_likelihood": -24.953979470262787,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3333333333333333,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -10.0,
      "\u03b3": 0.03927116219493709,
      "\u03c6": 1.351100760209464,
      "success": true,
      "log_likelihood": -24.95338929796977,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -10.0,
      "\u03b3": 8.076512253002788,
      "\u03c6": 0.821524907918796,
      "success": true,
      "log_likelihood": -24.95375248091932,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -1.2480780643897131,
      "\u03b3": 2.3086634968719224,
      "\u03c6": 1.0697133715027927,
      "success": true,
      "log_likelihood": -24.730616804609916,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 10.0,
      "\u03b3": 0.5252007776237422,
      "\u03c6": 1.101514805117243,
      "success": true,
      "log_likelihood": -14.277724095938348,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 10.0,
      "\u03b3": 8.913811575740048,
      "\u03c6": 0.8376471287746308,
      "success": true,
      "log_likelihood": -16.277633299730887,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -1.248012604655613,
      "\u03b3": 8.630014308128073,
      "\u03c6": 0.8112115352928541,
      "success": true,
      "log_likelihood": -24.730616794035832,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 10.0,
      "\u03b3": 1.9519268180121352,
      "\u03c6": 0.8713399127930137,
      "success": true,
      "log_likelihood": -14.27772409593835,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -10.0,
      "\u03b3": 5.232583776163406,
      "\u03c6": 1.2224903800323097,
      "success": true,
      "log_likelihood": -24.953934072394095,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -10.0,
      "\u03b3": 6.883744910885218,
      "\u03c6": 0.8584815773689988,
      "success": true,
      "log_likelihood": -24.9538886745254,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -6.7221362587671445,
      "\u03b3": 8.926111247778854,
      "\u03c6": 1.2106387529570966,
      "success": true,
      "log_likelihood": -24.9521024844537,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 10.0,
      "\u03b3": 7.103469138744797,
      "\u03c6": 0.9255640595669135,
      "success": true,
      "log_likelihood": -19.2774971054197,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -9.578178171868355,
      "\u03b3": 0.14707586299419595,
      "\u03c6": 0.959619906835264,
      "success": true,
      "log_likelihood": -24.953298514518227,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 1.5229755934565512,
      "\u03b3": 4.108957866902255,
      "\u03c6": 0.8936826612755859,
      "success": true,
      "log_likelihood": -22.157938154804093,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 10.0,
      "\u03b3": 2.2297744305184564,
      "\u03c6": 0.71259693258247,
      "success": true,
      "log_likelihood": -13.277769494042078,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -10.0,
      "\u03b3": 5.077316835158669,
      "\u03c6": 1.28012527596442,
      "success": true,
      "log_likelihood": -24.95402486813148,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -0.19265548452493303,
      "\u03b3": 3.5054158291587365,
      "\u03c6": 1.4741365065986356,
      "success": true,
      "log_likelihood": -24.056945188724786,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -10.0,
      "\u03b3": 8.887152857156476,
      "\u03c6": 0.6244310867117103,
      "success": true,
      "log_likelihood": -24.953979470262784,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -2.0783932812329327,
      "\u03b3": 0.4565000978610567,
      "\u03c6": 1.0661308785689987,
      "success": true,
      "log_likelihood": -24.897714324639797,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 10.0,
      "\u03b3": 6.691084560549045,
      "\u03c6": 1.1694429759136507,
      "success": true,
      "log_likelihood": -14.277724095938348,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -10.0,
      "\u03b3": 9.53716939651903,
      "\u03c6": 1.2348275294932765,
      "success": true,
      "log_likelihood": -24.953934072394095,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -9.999999999999998,
      "\u03b3": 4.936247858413202,
      "\u03c6": 1.3799073762145149,
      "success": true,
      "log_likelihood": -24.953298502232386,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.25,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -0.19265823774850852,
      "\u03b3": 6.296534701373796,
      "\u03c6": 1.3945061421101719,
      "success": true,
      "log_likelihood": -24.056945188730154,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -10.0,
      "\u03b3": 7.5352630429028045,
      "\u03c6": 0.8808821486112572,
      "success": true,
      "log_likelihood": -24.95393407239409,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 1.5231309431424835,
      "\u03b3": 0.18015205137771328,
      "\u03c6": 0.7367448099922794,
      "success": true,
      "log_likelihood": -22.1579381560419,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -10.0,
      "\u03b3": 4.06583226191586,
      "\u03c6": 0.7995490612401882,
      "success": true,
      "log_likelihood": -24.95375248091932,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 10.0,
      "\u03b3": 6.687223253236762,
      "\u03c6": 1.2902734996228584,
      "success": true,
      "log_likelihood": -13.277769494042078,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -10.0,
      "\u03b3": 3.517945659855972,
      "\u03c6": 1.3925580348979638,
      "success": true,
      "log_likelihood": -24.953343900101082,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 1.526042081895863,
      "\u03b3": 9.70655891862513,
      "\u03c6": 0.8097925330328507,
      "success": true,
      "log_likelihood": -22.157938914209616,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "\u03b2": {
        "r": 0.6362458525145082,
        "p": 1.131338407792664e-12
      },
      "\u03b3": {
        "r": -0.09210898646822341,
        "p": 0.36205884240635167
      },
      "\u03c6": {
        "r": -0.14759032930980448,
        "p": 0.14281575473930405
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 53.936073397195365,
  "bic_results": {
    "average_bic": 53.936073397195365,
    "individual_bics": [
      60.6585157558939,
      60.65718187583241,
      60.54598546358261,
      60.65742620704526,
      60.65733541130788,
      57.8425031430683,
      33.3062773958674,
      56.57957691882223,
      33.3062773958674,
      60.657517002782654,
      60.65733541130787,
      60.65842496015652,
      60.65742620704526,
      33.3062773958674,
      33.3062773958674,
      33.3062773958674,
      33.3062773958674,
      43.305823414830115,
      41.305914211037575,
      33.3062773958674,
      60.211790315991834,
      43.305823414830115,
      60.65760779852003,
      60.655861172335776,
      60.65715386771245,
      59.65247195244791,
      60.211790315984985,
      60.657880185732196,
      41.305914211037575,
      49.30555102620774,
      33.3062773958674,
      60.6585157558939,
      60.65742620704526,
      60.657517002782654,
      33.3062773958674,
      57.84250314307957,
      55.06643526559927,
      60.65715434544917,
      56.57957691819513,
      39.30600500724502,
      58.86444719281734,
      60.65806177720697,
      35.30618659965994,
      60.21179031597856,
      58.86444719281532,
      53.29119877944288,
      60.54598560375317,
      60.657517002782654,
      60.65742620704526,
      60.54598546404972,
      55.06643312483426,
      60.65833416441913,
      60.545985469053804,
      60.65136330404643,
      60.657517002782654,
      60.657698594257425,
      60.65788018573221,
      41.305914211037575,
      60.65842496015652,
      47.3056418224152,
      58.86444719282022,
      60.657189743730626,
      60.6585157558939,
      60.65733541130787,
      60.65806177720697,
      60.21179042458816,
      39.30600500724503,
      43.3058234148301,
      60.21179040343999,
      39.306005007245034,
      60.65842496015652,
      60.65833416441913,
      60.654761784275735,
      49.30555102620774,
      60.65715384440479,
      55.06643312497651,
      37.306095803452486,
      60.658606551631294,
      58.864447192817906,
      60.6585157558939,
      60.54598546464793,
      39.30600500724503,
      60.65842496015652,
      60.6571538198331,
      58.864447192828635,
      60.65842496015651,
      55.06643312745213,
      60.65806177720697,
      37.306095803452486,
      60.65724461557049,
      55.06643464378756
    ],
    "group_enabled": false,
    "group_bics": null,
    "num_parameters": 3,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- \u03b2: r = 0.636\n- \u03b3: r = -0.092\n- \u03c6: r = -0.148",
  "previous_models": [
    "Specification: a = \u03b4 + \u03a3[i=1 to 11] F_i  \na_scaled = a \u00b7 (1 + 0.012\u00b7sin(a + 0.045)) \u00b7 1.08  \nz = a_scaled \u00b7 (1 + 0.008\u00b7cos(a + 0.065)) \u00b7 (1 + 0.005\u00b7sin(a + 0.115)) \u00b7 (1 + 0.004\u00b7cos(a + 0.085)) \u00b7 (1 + 0.006\u00b7(sin(a + 0.035)\u00b7cos(a + 0.055))) \u00b7 (1 + 0.003\u00b7(sin(a + 0.03)\u00b7cos(a + 0.05)))  \n\u03b1 = \u03c6 \u2013 0.5  \nf_adapt(z) = { \u03b1\u00b7z + (1 \u2013 \u03b1)\u00b7ln(1 + z)\u2003if z \u2265 0  \n\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u03c6\u00b7z\u2003\u2003\u2003\u2003\u2003\u2003\u2003if z < 0 }  \nT = 1 + 0.0005\u00b7a\u00b2 + 0.00005\u00b7a\u00b3 + 0.000005\u00b7a\u2074 + 0.0000001\u00b7a\u2075 + 0.00000001\u00b7a\u2076 + 0.000000001\u00b7a\u2077 + 0.0000000001\u00b7a\u2078 + 0.000001\u00b7a\u00b3  \nextra = { exp(\u2013a/0.1) \u00b7 [ z/(1+|z|) ] \u00b7 [1 + 0.005\u00b7sin(1/(1+a))] \u00b7 [ softplus(0.865/(1+a)) + 0.1\u00b7(0.865/(1+a)) + 0.5\u00b7(0.865/(1+a)) ] \u00b7 [1 \u2013 0.002\u00b7cos(a)] \u00b7 [1 \u2013 0.0025\u00b7cos(2.5\u00b7a)] \u00b7 [1 + 0.001\u00b7a] \u00b7 [1 + cosh(0.001\u00b7a)]^(2 + 0.0005\u00b7a) + 1\u00d710^(\u20136) }^(0.944 + 0.00015\u00b7ln(1+a))  \nf(x) = sign(z) \u00b7 [ f_adapt(z) \u00b7 T \u00b7 extra ]^(0.944 + 0.00015\u00b7ln(1+a))  \nU = \u03b2 + \u03b3 \u00b7 f(x)  \nP(accept = 1) = 1 / (1 + exp(\u2013U))\nSummary: A complex nonlinear utility model predicts responder acceptance. It first computes a core sum from 11 fixed components plus a constant, applies several sinusoidal and cosine modulations to generate a signal z, and then transforms z with an adaptive nonlinear function f_adapt that convexly blends linear and logarithmic mappings for nonnegative values. A dynamic threshold T (augmented with an extra cubic curvature term) and an extra blending composite further modify the transformed signal. The final signal f(x) is raised to a power that itself depends on a, then scaled by the learnable parameter \u03b3 and shifted by the baseline \u03b2 to yield latent utility U. The acceptance probability is derived via a logistic function, thus enabling binary prediction (accept/reject) while using three learnable parameters with specified finite bounds.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 53.936073397195365\nOverall Accuracy: 0.5513\n\nParameter Recovery:\n- \u03b2: r = 0.636\n- \u03b3: r = -0.092\n- \u03c6: r = -0.148"
  ]
}