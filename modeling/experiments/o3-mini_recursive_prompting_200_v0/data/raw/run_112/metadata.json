{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "<think>\nFor Run 112, we encourage further creative adjustments to the \u201cextra\u201d blending composite and the adaptive transformation. In this new version, retain the overall architecture but add an extra harmonic modulation term inside the extra composite (for instance, multiplying by [1 + 0.002\u00d7cos(0.5\u00d7a)]) and allow a slight modification to the final exponent by including a small nonlinear oscillatory factor (such as multiplying the exponent by [1 + 0.001\u00d7sin(a)]). You may also experiment with a slightly nonlinear scaling in the adaptive transformation for negative values (for example, applying a quadratic term) to help improve parameter recovery. Keep the dynamic threshold T as a high\u2010order polynomial in a, and ensure that the final model still yields latent utility U = beta + gamma\u00b7f(x) where P(accept=1) = 1/(1+exp(\u2013U)). Remember that the three learnable parameters must remain exactly beta \u2208 [\u201310, 10], gamma \u2208 [0, 10], and phi \u2208 [0.5, 1.5]. These adjustments are intended to further lower the BIC, sharpen parameter recovery, and increase prediction accuracy.\n</think>\n\nNew Instructions for Run 112:\n1. Compute the core sum \u201ca\u201d as the sum of fixed components F1 through F11 plus a small constant \u03b4.\n2. Multiply \u201ca\u201d by [1 + 0.012\u00d7sin(a + 0.045)] and scale by 1.08.\n3. Sequentially modulate the result with these factors:\n\u2003\u2003\u2022 [1 + 0.008\u00d7cos(a + 0.065)]\n\u2003\u2003\u2022 [1 + 0.005\u00d7sin(a + 0.115)]\n\u2003\u2003\u2022 [1 + 0.004\u00d7cos(a + 0.085)]\n\u2003\u2003\u2022 [1 + 0.006\u00d7(sin(a + 0.035)\u00d7cos(a + 0.055))]\n\u2003\u2003\u2022 [1 + 0.003\u00d7(sin(a + 0.03)\u00d7cos(a + 0.05))]\nDefine the product as z.\n4. Define the weight w = (phi \u2013 0.5)/phi. Then, for the adaptive transformation f_adapt(z):\n\u2003\u2003\u2022 If z \u2265 0, set f_adapt(z) = 1.002 \u00d7 [z^(w) \u00d7 (ln(1+z))^(1\u2013w)].\n\u2003\u2003\u2022 If z < 0, set f_adapt(z) = phi \u00d7 z, optionally with a slight quadratic adjustment for enhanced recovery.\n5. Define the dynamic threshold T as a high\u2010order polynomial in a:\n\u2003\u2003T = 1 + 0.0005\u00d7a\u00b2 + 0.00005\u00d7a\u00b3 + 0.000005\u00d7a\u2074 + 0.0000001\u00d7a\u2075 + 0.00000001\u00d7a\u2076 + 0.000000001\u00d7a\u2077 + 0.0000000001\u00d7a\u2078 + 0.000001\u00d7a\u00b3.\n6. In the extra blending composite, define extra as:\n\u2003\u2003extra = { exp(\u2013a/0.1) \u00d7 [z/(1+|z|)] \u00d7 [1 + 0.005\u00d7sin(1/(1+a))] \u00d7 [1 + 0.002\u00d7cos(0.5\u00d7a)] \u00d7 [1.07\u00d7softplus(0.865/(1+a)) + 0.15\u00d7(0.865/(1+a)) + 0.5\u00d7(0.865/(1+a)) + 0.006\u00d7a] \u00d7 [1 \u2013 0.002\u00d7cos(a)] \u00d7 [1 \u2013 0.0025\u00d7cos(2.5\u00d7a)] \u00d7 [1 + 0.001\u00d7a] \u00d7 [1 + cosh(0.001\u00d7a)]^(2+0.0005\u00d7a) + 1e\u20136 }^(0.9478+0.00018\u00d7ln(1+a)).\n7. Define the final transformed signal as:\n\u2003\u2003f(x) = sign(z) \u00d7 [ f_adapt(z) \u00d7 T \u00d7 extra ]^( [0.9478+0.00018\u00d7ln(1+a)] \u00d7 [1+0.001\u00d7sin(a)] ).\n8. Compute the latent utility as:\n\u2003\u2003U = beta + gamma \u00d7 f(x),\nand then obtain the probability of acceptance as:\n\u2003\u2003P(accept=1) = 1 / (1 + exp(\u2013U)).\n9. The model must use exactly three learnable parameters with these fixed bounds:\n\u2003\u2003\u2022 beta \u2208 [\u201310, 10]\n\u2003\u2003\u2022 gamma \u2208 [0, 10]\n\u2003\u2003\u2022 phi \u2208 [0.5, 1.5]\n10. Innovate if beneficial; you may adjust the adaptive transformation or introduce extra modulation terms as long as the overall structure remains interpretable and the three learnable parameters are preserved.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: <think>\nFor Run 112, we encourage further creative adjustments to the \u201cextra\u201d blending composite and the adaptive transformation. In this new version, retain the overall architecture but add an extra harmonic modulation term inside the extra composite (for instance, multiplying by [1 + 0.002\u00d7cos(0.5\u00d7a)]) and allow a slight modification to the final exponent by including a small nonlinear oscillatory factor (such as multiplying the exponent by [1 + 0.001\u00d7sin(a)]). You may also experiment with a slightly nonlinear scaling in the adaptive transformation for negative values (for example, applying a quadratic term) to help improve parameter recovery. Keep the dynamic threshold T as a high\u2010order polynomial in a, and ensure that the final model still yields latent utility U = beta + gamma\u00b7f(x) where P(accept=1) = 1/(1+exp(\u2013U)). Remember that the three learnable parameters must remain exactly beta \u2208 [\u201310, 10], gamma \u2208 [0, 10], and phi \u2208 [0.5, 1.5]. These adjustments are intended to further lower the BIC, sharpen parameter recovery, and increase prediction accuracy.\n</think>\n\nNew Instructions for Run 112:\n1. Compute the core sum \u201ca\u201d as the sum of fixed components F1 through F11 plus a small constant \u03b4.\n2. Multiply \u201ca\u201d by [1 + 0.012\u00d7sin(a + 0.045)] and scale by 1.08.\n3. Sequentially modulate the result with these factors:\n\u2003\u2003\u2022 [1 + 0.008\u00d7cos(a + 0.065)]\n\u2003\u2003\u2022 [1 + 0.005\u00d7sin(a + 0.115)]\n\u2003\u2003\u2022 [1 + 0.004\u00d7cos(a + 0.085)]\n\u2003\u2003\u2022 [1 + 0.006\u00d7(sin(a + 0.035)\u00d7cos(a + 0.055))]\n\u2003\u2003\u2022 [1 + 0.003\u00d7(sin(a + 0.03)\u00d7cos(a + 0.05))]\nDefine the product as z.\n4. Define the weight w = (phi \u2013 0.5)/phi. Then, for the adaptive transformation f_adapt(z):\n\u2003\u2003\u2022 If z \u2265 0, set f_adapt(z) = 1.002 \u00d7 [z^(w) \u00d7 (ln(1+z))^(1\u2013w)].\n\u2003\u2003\u2022 If z < 0, set f_adapt(z) = phi \u00d7 z, optionally with a slight quadratic adjustment for enhanced recovery.\n5. Define the dynamic threshold T as a high\u2010order polynomial in a:\n\u2003\u2003T = 1 + 0.0005\u00d7a\u00b2 + 0.00005\u00d7a\u00b3 + 0.000005\u00d7a\u2074 + 0.0000001\u00d7a\u2075 + 0.00000001\u00d7a\u2076 + 0.000000001\u00d7a\u2077 + 0.0000000001\u00d7a\u2078 + 0.000001\u00d7a\u00b3.\n6. In the extra blending composite, define extra as:\n\u2003\u2003extra = { exp(\u2013a/0.1) \u00d7 [z/(1+|z|)] \u00d7 [1 + 0.005\u00d7sin(1/(1+a))] \u00d7 [1 + 0.002\u00d7cos(0.5\u00d7a)] \u00d7 [1.07\u00d7softplus(0.865/(1+a)) + 0.15\u00d7(0.865/(1+a)) + 0.5\u00d7(0.865/(1+a)) + 0.006\u00d7a] \u00d7 [1 \u2013 0.002\u00d7cos(a)] \u00d7 [1 \u2013 0.0025\u00d7cos(2.5\u00d7a)] \u00d7 [1 + 0.001\u00d7a] \u00d7 [1 + cosh(0.001\u00d7a)]^(2+0.0005\u00d7a) + 1e\u20136 }^(0.9478+0.00018\u00d7ln(1+a)).\n7. Define the final transformed signal as:\n\u2003\u2003f(x) = sign(z) \u00d7 [ f_adapt(z) \u00d7 T \u00d7 extra ]^( [0.9478+0.00018\u00d7ln(1+a)] \u00d7 [1+0.001\u00d7sin(a)] ).\n8. Compute the latent utility as:\n\u2003\u2003U = beta + gamma \u00d7 f(x),\nand then obtain the probability of acceptance as:\n\u2003\u2003P(accept=1) = 1 / (1 + exp(\u2013U)).\n9. The model must use exactly three learnable parameters with these fixed bounds:\n\u2003\u2003\u2022 beta \u2208 [\u201310, 10]\n\u2003\u2003\u2022 gamma \u2208 [0, 10]\n\u2003\u2003\u2022 phi \u2208 [0.5, 1.5]\n10. Innovate if beneficial; you may adjust the adaptive transformation or introduce extra modulation terms as long as the overall structure remains interpretable and the three learnable parameters are preserved.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<MODEL>\na = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + \u03b4\na_mod = a \u00b7 [1 + 0.012 \u00b7 sin(a + 0.045)] \u00b7 1.08\nb\u2081 = a_mod \u00b7 [1 + 0.008 \u00b7 cos(a + 0.065)]\nb\u2082 = b\u2081 \u00b7 [1 + 0.005 \u00b7 sin(a + 0.115)]\nb\u2083 = b\u2082 \u00b7 [1 + 0.004 \u00b7 cos(a + 0.085)]\nb\u2084 = b\u2083 \u00b7 [1 + 0.006 \u00b7 (sin(a + 0.035) \u00b7 cos(a + 0.055))]\nz = b\u2084 \u00b7 [1 + 0.003 \u00b7 (sin(a + 0.03) \u00b7 cos(a + 0.05))]\nw = (phi - 0.5) / phi\nf_adapt(z) = { 1.002 \u00b7 [ z^(w) \u00b7 (ln(1+z))^(1-w) ]\u2003\u2003if\u2003z \u2265 0 \n            \u2003\u2003\u2003\u2003\u2003  phi \u00b7 z\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003if\u2003z < 0 }\nT = 1 + 0.0005 \u00b7 a\u00b2 + 0.00005 \u00b7 a\u00b3 + 0.000005 \u00b7 a\u2074 + 0.0000001 \u00b7 a\u2075 + 0.00000001 \u00b7 a\u2076 + 0.000000001 \u00b7 a\u2077 + 0.0000000001 \u00b7 a\u2078 + 0.000001 \u00b7 a\u00b3\nextra = { exp(\u2013a/0.1) \u00b7 [z/(1+|z|)] \u00b7 [1+0.005\u00b7sin(1/(1+a))] \u00b7 [1+0.002\u00b7cos(0.5\u00b7a)] \u00b7 [1.07\u00b7softplus(0.865/(1+a)) + 0.15\u00b7(0.865/(1+a)) + 0.5\u00b7(0.865/(1+a)) + 0.006\u00b7a] \u00b7 [1\u20130.002\u00b7cos(a)] \u00b7 [1\u20130.0025\u00b7cos(2.5\u00b7a)] \u00b7 [1+0.001\u00b7a] \u00b7 [1+cosh(0.001\u00b7a)]^(2+0.0005\u00b7a) + 1e\u20136 }^(0.9478+0.00018\u00b7ln(1+a))\nf(x) = sign(z) \u00b7 [ f_adapt(z) \u00b7 T \u00b7 extra ]^((0.9478+0.00018\u00b7ln(1+a)) \u00b7 [1+0.001\u00b7sin(a)])\nU = beta + gamma \u00b7 f(x)\nP(accept=1) = 1/(1+exp(\u2013U))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"beta\": {\n      \"description\": \"Base utility intercept parameter; captures the baseline tendency to accept\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": -10,\n          \"upper\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Scaling parameter for the transformed signal f(x)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": 0,\n          \"upper\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Adaptive weight parameter regulating the transformation f_adapt for negative z values\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": 0.5,\n          \"upper\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"F1\": {\n      \"description\": \"Fixed component 1 computed from task data\",\n      \"range\": {\n        \"min\": -100,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data/calculated\"\n    },\n    \"F2\": {\n      \"description\": \"Fixed component 2 computed from task data\",\n      \"range\": {\n        \"min\": -100,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data/calculated\"\n    },\n    \"F3\": {\n      \"description\": \"Fixed component 3 computed from task data\",\n      \"range\": {\n        \"min\": -100,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data/calculated\"\n    },\n    \"F4\": {\n      \"description\": \"Fixed component 4 computed from task data\",\n      \"range\": {\n        \"min\": -100,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data/calculated\"\n    },\n    \"F5\": {\n      \"description\": \"Fixed component 5 computed from task data\",\n      \"range\": {\n        \"min\": -100,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data/calculated\"\n    },\n    \"F6\": {\n      \"description\": \"Fixed component 6 computed from task data\",\n      \"range\": {\n        \"min\": -100,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data/calculated\"\n    },\n    \"F7\": {\n      \"description\": \"Fixed component 7 computed from task data\",\n      \"range\": {\n        \"min\": -100,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data/calculated\"\n    },\n    \"F8\": {\n      \"description\": \"Fixed component 8 computed from task data\",\n      \"range\": {\n        \"min\": -100,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data/calculated\"\n    },\n    \"F9\": {\n      \"description\": \"Fixed component 9 computed from task data\",\n      \"range\": {\n        \"min\": -100,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data/calculated\"\n    },\n    \"F10\": {\n      \"description\": \"Fixed component 10 computed from task data\",\n      \"range\": {\n        \"min\": -100,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data/calculated\"\n    },\n    \"F11\": {\n      \"description\": \"Fixed component 11 computed from task data\",\n      \"range\": {\n        \"min\": -100,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data/calculated\"\n    },\n    \"\u03b4\": {\n      \"description\": \"Small constant added to the sum of fixed components\",\n      \"range\": {\n        \"min\": 1e-6,\n        \"max\": 1e-6,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data/fixed\"\n    },\n    \"a\": {\n      \"description\": \"Core sum of fixed components plus \u03b4\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a_mod\": {\n      \"description\": \"Scaled version of a after initial modulation\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"b\u2081\": {\n      \"description\": \"Sequential modulation of a_mod (first modulation)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"b\u2082\": {\n      \"description\": \"Sequential modulation of b\u2081 (second modulation)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"b\u2083\": {\n      \"description\": \"Sequential modulation of b\u2082 (third modulation)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"b\u2084\": {\n      \"description\": \"Sequential modulation of b\u2083 (fourth modulation)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"z\": {\n      \"description\": \"Modulated signal after sequential transformations\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"w\": {\n      \"description\": \"Weight computed from phi for the adaptive transformation\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_adapt\": {\n      \"description\": \"Adaptive transformation of z based on its sign\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"T\": {\n      \"description\": \"Dynamic threshold as a high\u2010order polynomial in a\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"extra\": {\n      \"description\": \"Extra blending composite term incorporating harmonic modulations and softplus adjustments\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f(x)\": {\n      \"description\": \"Final nonlinearly transformed signal used in the utility computation\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed as the sum of beta and scaled transformed signal f(x)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"P(accept=1)\": {\n      \"description\": \"Predicted probability of accepting the proposal computed via a logistic function of U\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nThe model computes a core sum of eleven fixed components augmented by a small constant, which is then sequentially modulated through several harmonic and oscillatory transformations to yield a signal z. An adaptive transformation is applied to z using a weight derived from phi, with different formulations for positive and negative z. A dynamic threshold T and an extra composite blending term further nonlinearly transform the signal. The final transformed signal f(x) is scaled by gamma and shifted by beta to yield the latent utility U, which is then converted into the acceptance probability via a logistic function.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['beta', 'gamma', 'phi']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                a = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + \u03b4\na_mod = a \u00b7 [1 + 0.012 \u00b7 sin(a + 0.045)] \u00b7 1.08\nb\u2081 = a_mod \u00b7 [1 + 0.008 \u00b7 cos(a + 0.065)]\nb\u2082 = b\u2081 \u00b7 [1 + 0.005 \u00b7 sin(a + 0.115)]\nb\u2083 = b\u2082 \u00b7 [1 + 0.004 \u00b7 cos(a + 0.085)]\nb\u2084 = b\u2083 \u00b7 [1 + 0.006 \u00b7 (sin(a + 0.035) \u00b7 cos(a + 0.055))]\nz = b\u2084 \u00b7 [1 + 0.003 \u00b7 (sin(a + 0.03) \u00b7 cos(a + 0.05))]\nw = (phi - 0.5) / phi\nf_adapt(z) = { 1.002 \u00b7 [ z^(w) \u00b7 (ln(1+z))^(1-w) ]\u2003\u2003if\u2003z \u2265 0 \n            \u2003\u2003\u2003\u2003\u2003  phi \u00b7 z\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003if\u2003z < 0 }\nT = 1 + 0.0005 \u00b7 a\u00b2 + 0.00005 \u00b7 a\u00b3 + 0.000005 \u00b7 a\u2074 + 0.0000001 \u00b7 a\u2075 + 0.00000001 \u00b7 a\u2076 + 0.000000001 \u00b7 a\u2077 + 0.0000000001 \u00b7 a\u2078 + 0.000001 \u00b7 a\u00b3\nextra = { exp(\u2013a/0.1) \u00b7 [z/(1+|z|)] \u00b7 [1+0.005\u00b7sin(1/(1+a))] \u00b7 [1+0.002\u00b7cos(0.5\u00b7a)] \u00b7 [1.07\u00b7softplus(0.865/(1+a)) + 0.15\u00b7(0.865/(1+a)) + 0.5\u00b7(0.865/(1+a)) + 0.006\u00b7a] \u00b7 [1\u20130.002\u00b7cos(a)] \u00b7 [1\u20130.0025\u00b7cos(2.5\u00b7a)] \u00b7 [1+0.001\u00b7a] \u00b7 [1+cosh(0.001\u00b7a)]^(2+0.0005\u00b7a) + 1e\u20136 }^(0.9478+0.00018\u00b7ln(1+a))\nf(x) = sign(z) \u00b7 [ f_adapt(z) \u00b7 T \u00b7 extra ]^((0.9478+0.00018\u00b7ln(1+a)) \u00b7 [1+0.001\u00b7sin(a)])\nU = beta + gamma \u00b7 f(x)\nP(accept=1) = 1/(1+exp(\u2013U))\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"beta\": {\n      \"description\": \"Base utility intercept parameter; captures the baseline tendency to accept\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": -10,\n          \"upper\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Scaling parameter for the transformed signal f(x)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": 0,\n          \"upper\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Adaptive weight parameter regulating the transformation f_adapt for negative z values\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": 0.5,\n          \"upper\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"F1\": {\n      \"description\": \"Fixed component 1 computed from task data\",\n      \"range\": {\n        \"min\": -100,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data/calculated\"\n    },\n    \"F2\": {\n      \"description\": \"Fixed component 2 computed from task data\",\n      \"range\": {\n        \"min\": -100,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data/calculated\"\n    },\n    \"F3\": {\n      \"description\": \"Fixed component 3 computed from task data\",\n      \"range\": {\n        \"min\": -100,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data/calculated\"\n    },\n    \"F4\": {\n      \"description\": \"Fixed component 4 computed from task data\",\n      \"range\": {\n        \"min\": -100,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data/calculated\"\n    },\n    \"F5\": {\n      \"description\": \"Fixed component 5 computed from task data\",\n      \"range\": {\n        \"min\": -100,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data/calculated\"\n    },\n    \"F6\": {\n      \"description\": \"Fixed component 6 computed from task data\",\n      \"range\": {\n        \"min\": -100,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data/calculated\"\n    },\n    \"F7\": {\n      \"description\": \"Fixed component 7 computed from task data\",\n      \"range\": {\n        \"min\": -100,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data/calculated\"\n    },\n    \"F8\": {\n      \"description\": \"Fixed component 8 computed from task data\",\n      \"range\": {\n        \"min\": -100,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data/calculated\"\n    },\n    \"F9\": {\n      \"description\": \"Fixed component 9 computed from task data\",\n      \"range\": {\n        \"min\": -100,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data/calculated\"\n    },\n    \"F10\": {\n      \"description\": \"Fixed component 10 computed from task data\",\n      \"range\": {\n        \"min\": -100,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data/calculated\"\n    },\n    \"F11\": {\n      \"description\": \"Fixed component 11 computed from task data\",\n      \"range\": {\n        \"min\": -100,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data/calculated\"\n    },\n    \"\\u03b4\": {\n      \"description\": \"Small constant added to the sum of fixed components\",\n      \"range\": {\n        \"min\": 1e-06,\n        \"max\": 1e-06,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data/fixed\"\n    },\n    \"a\": {\n      \"description\": \"Core sum of fixed components plus \\u03b4\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a_mod\": {\n      \"description\": \"Scaled version of a after initial modulation\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"b\\u2081\": {\n      \"description\": \"Sequential modulation of a_mod (first modulation)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"b\\u2082\": {\n      \"description\": \"Sequential modulation of b\\u2081 (second modulation)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"b\\u2083\": {\n      \"description\": \"Sequential modulation of b\\u2082 (third modulation)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"b\\u2084\": {\n      \"description\": \"Sequential modulation of b\\u2083 (fourth modulation)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"z\": {\n      \"description\": \"Modulated signal after sequential transformations\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"w\": {\n      \"description\": \"Weight computed from phi for the adaptive transformation\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_adapt\": {\n      \"description\": \"Adaptive transformation of z based on its sign\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"T\": {\n      \"description\": \"Dynamic threshold as a high\\u2010order polynomial in a\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"extra\": {\n      \"description\": \"Extra blending composite term incorporating harmonic modulations and softplus adjustments\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f(x)\": {\n      \"description\": \"Final nonlinearly transformed signal used in the utility computation\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed as the sum of beta and scaled transformed signal f(x)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"P(accept=1)\": {\n      \"description\": \"Predicted probability of accepting the proposal computed via a logistic function of U\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, beta=0, gamma=1, phi=1):\n    model_predictions = []\n    for trial in trial_data:\n        F1 = trial.get(\"F1\", 0)\n        F2 = trial.get(\"F2\", 0)\n        F3 = trial.get(\"F3\", 0)\n        F4 = trial.get(\"F4\", 0)\n        F5 = trial.get(\"F5\", 0)\n        F6 = trial.get(\"F6\", 0)\n        F7 = trial.get(\"F7\", 0)\n        F8 = trial.get(\"F8\", 0)\n        F9 = trial.get(\"F9\", 0)\n        F10 = trial.get(\"F10\", 0)\n        F11 = trial.get(\"F11\", 0)\n        delta = 1e-06\n\n        a = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + delta\n        a_mod = a * (1 + 0.012 * math.sin(a + 0.045)) * 1.08\n        b1 = a_mod * (1 + 0.008 * math.cos(a + 0.065))\n        b2 = b1 * (1 + 0.005 * math.sin(a + 0.115))\n        b3 = b2 * (1 + 0.004 * math.cos(a + 0.085))\n        b4 = b3 * (1 + 0.006 * (math.sin(a + 0.035) * math.cos(a + 0.055)))\n        z = b4 * (1 + 0.003 * (math.sin(a + 0.03) * math.cos(a + 0.05)))\n\n        w = (phi - 0.5) / phi\n\n        if z >= 0:\n            f_adapt_z = 1.002 * (z**w) * (math.log(1 + z)**(1 - w))\n        else:\n            f_adapt_z = phi * z\n\n        T = 1 + 0.0005 * a**2 + 0.00005 * a**3 + 0.000005 * a**4 + 0.0000001 * a**5 + 0.00000001 * a**6 + 0.000000001 * a**7 + 0.0000000001 * a**8 + 0.000001 * a**3\n\n        softplus = lambda x: math.log(1 + math.exp(x))\n        \n        extra_base = math.exp(-a/0.1) * (z/(1+abs(z))) * (1+0.005*math.sin(1/(1+a))) * (1+0.002*math.cos(0.5*a)) * (1.07*softplus(0.865/(1+a)) + 0.15*(0.865/(1+a)) + 0.5*(0.865/(1+a)) + 0.006*a) * (1-0.002*math.cos(a)) * (1-0.0025*math.cos(2.5*a)) * (1+0.001*a) * (1+math.cosh(0.001*a))**(2+0.0005*a) + 1e-6\n        extra = extra_base**(0.9478+0.00018*math.log(1+a))\n\n\n        fx_sign = 1 if z >= 0 else -1\n        fx = fx_sign * (f_adapt_z * T * extra)**((0.9478+0.00018*math.log(1+a)) * (1+0.001*math.sin(a)))\n\n        U = beta + gamma * fx\n        \n        try:\n            p_accept = 1 / (1 + math.exp(-U))\n        except OverflowError:\n            p_accept = 0.0 if U > 0 else 1.0\n        \n\n        model_predictions.append(p_accept)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '''\n[\n  {\n    \"ID\": 0,\n    \"group\": \"treatment\",\n    \"trial_number\": 1,\n    \"trial_type\": 1,\n    \"trial_role\": 0,\n    \"token_opp\": 1,\n    \"token_self\": 5,\n    \"combined_earning\": 6,\n    \"split_opp\": 0.5,\n    \"split_self\": 5.5,\n    \"splitperc_opp\": 8,\n    \"splitperc_self\": 92,\n    \"accept\": 1.0,\n    \"accepted_amount\": 0.5,\n    \"accepted_perc\": 8.0,\n    \"proposed_perc\": 8.0,\n    \"proposed_amount\": 0.5,\n    \"F1\": 1,\n    \"F2\": 2,\n    \"F3\": 3,\n    \"F4\": 4,\n    \"F5\": 5,\n    \"F6\": 6,\n    \"F7\": 7,\n    \"F8\": 8,\n    \"F9\": 9,\n    \"F10\": 10,\n    \"F11\": 11\n  },\n  {\n    \"ID\": 1,\n    \"group\": \"treatment\",\n    \"trial_number\": 2,\n    \"trial_type\": 1,\n    \"trial_role\": 0,\n    \"token_opp\": 2,\n    \"token_self\": 4,\n    \"combined_earning\": 6,\n    \"split_opp\": 1.0,\n    \"split_self\": 5.0,\n    \"splitperc_opp\": 17,\n    \"splitperc_self\": 83,\n    \"accept\": 1.0,\n    \"accepted_amount\": 1.0,\n    \"accepted_perc\": 17.0,\n    \"proposed_perc\": 17.0,\n    \"proposed_amount\": 1.0,\n        \"F1\": -1,\n    \"F2\": -2,\n    \"F3\": -3,\n    \"F4\": -4,\n    \"F5\": -5,\n    \"F6\": -6,\n    \"F7\": -7,\n    \"F8\": -8,\n    \"F9\": -9,\n    \"F10\": -10,\n    \"F11\": -11\n  }\n]\n'''\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n```",
      "timestamp": 1743545623.634906
    }
  ],
  "learnable_parameters": {
    "beta": {
      "description": "Base utility intercept parameter; captures the baseline tendency to accept",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "lower": -10,
          "upper": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Scaling parameter for the transformed signal f(x)",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "lower": 0,
          "upper": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "phi": {
      "description": "Adaptive weight parameter regulating the transformation f_adapt for negative z values",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "lower": 0.5,
          "upper": 1.5
        }
      },
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "a = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + \u03b4\na_mod = a \u00b7 [1 + 0.012 \u00b7 sin(a + 0.045)] \u00b7 1.08\nb\u2081 = a_mod \u00b7 [1 + 0.008 \u00b7 cos(a + 0.065)]\nb\u2082 = b\u2081 \u00b7 [1 + 0.005 \u00b7 sin(a + 0.115)]\nb\u2083 = b\u2082 \u00b7 [1 + 0.004 \u00b7 cos(a + 0.085)]\nb\u2084 = b\u2083 \u00b7 [1 + 0.006 \u00b7 (sin(a + 0.035) \u00b7 cos(a + 0.055))]\nz = b\u2084 \u00b7 [1 + 0.003 \u00b7 (sin(a + 0.03) \u00b7 cos(a + 0.05))]\nw = (phi - 0.5) / phi\nf_adapt(z) = { 1.002 \u00b7 [ z^(w) \u00b7 (ln(1+z))^(1-w) ]\u2003\u2003if\u2003z \u2265 0 \n            \u2003\u2003\u2003\u2003\u2003  phi \u00b7 z\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003if\u2003z < 0 }\nT = 1 + 0.0005 \u00b7 a\u00b2 + 0.00005 \u00b7 a\u00b3 + 0.000005 \u00b7 a\u2074 + 0.0000001 \u00b7 a\u2075 + 0.00000001 \u00b7 a\u2076 + 0.000000001 \u00b7 a\u2077 + 0.0000000001 \u00b7 a\u2078 + 0.000001 \u00b7 a\u00b3\nextra = { exp(\u2013a/0.1) \u00b7 [z/(1+|z|)] \u00b7 [1+0.005\u00b7sin(1/(1+a))] \u00b7 [1+0.002\u00b7cos(0.5\u00b7a)] \u00b7 [1.07\u00b7softplus(0.865/(1+a)) + 0.15\u00b7(0.865/(1+a)) + 0.5\u00b7(0.865/(1+a)) + 0.006\u00b7a] \u00b7 [1\u20130.002\u00b7cos(a)] \u00b7 [1\u20130.0025\u00b7cos(2.5\u00b7a)] \u00b7 [1+0.001\u00b7a] \u00b7 [1+cosh(0.001\u00b7a)]^(2+0.0005\u00b7a) + 1e\u20136 }^(0.9478+0.00018\u00b7ln(1+a))\nf(x) = sign(z) \u00b7 [ f_adapt(z) \u00b7 T \u00b7 extra ]^((0.9478+0.00018\u00b7ln(1+a)) \u00b7 [1+0.001\u00b7sin(a)])\nU = beta + gamma \u00b7 f(x)\nP(accept=1) = 1/(1+exp(\u2013U))",
  "variable_descriptions": {
    "beta": {
      "description": "Base utility intercept parameter; captures the baseline tendency to accept",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "lower": -10,
          "upper": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Scaling parameter for the transformed signal f(x)",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "lower": 0,
          "upper": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "phi": {
      "description": "Adaptive weight parameter regulating the transformation f_adapt for negative z values",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "lower": 0.5,
          "upper": 1.5
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "F1": {
      "description": "Fixed component 1 computed from task data",
      "range": {
        "min": -100,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data/calculated"
    },
    "F2": {
      "description": "Fixed component 2 computed from task data",
      "range": {
        "min": -100,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data/calculated"
    },
    "F3": {
      "description": "Fixed component 3 computed from task data",
      "range": {
        "min": -100,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data/calculated"
    },
    "F4": {
      "description": "Fixed component 4 computed from task data",
      "range": {
        "min": -100,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data/calculated"
    },
    "F5": {
      "description": "Fixed component 5 computed from task data",
      "range": {
        "min": -100,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data/calculated"
    },
    "F6": {
      "description": "Fixed component 6 computed from task data",
      "range": {
        "min": -100,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data/calculated"
    },
    "F7": {
      "description": "Fixed component 7 computed from task data",
      "range": {
        "min": -100,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data/calculated"
    },
    "F8": {
      "description": "Fixed component 8 computed from task data",
      "range": {
        "min": -100,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data/calculated"
    },
    "F9": {
      "description": "Fixed component 9 computed from task data",
      "range": {
        "min": -100,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data/calculated"
    },
    "F10": {
      "description": "Fixed component 10 computed from task data",
      "range": {
        "min": -100,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data/calculated"
    },
    "F11": {
      "description": "Fixed component 11 computed from task data",
      "range": {
        "min": -100,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data/calculated"
    },
    "\u03b4": {
      "description": "Small constant added to the sum of fixed components",
      "range": {
        "min": 1e-06,
        "max": 1e-06,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data/fixed"
    },
    "a": {
      "description": "Core sum of fixed components plus \u03b4",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "a_mod": {
      "description": "Scaled version of a after initial modulation",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "b\u2081": {
      "description": "Sequential modulation of a_mod (first modulation)",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "b\u2082": {
      "description": "Sequential modulation of b\u2081 (second modulation)",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "b\u2083": {
      "description": "Sequential modulation of b\u2082 (third modulation)",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "b\u2084": {
      "description": "Sequential modulation of b\u2083 (fourth modulation)",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "z": {
      "description": "Modulated signal after sequential transformations",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "w": {
      "description": "Weight computed from phi for the adaptive transformation",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "f_adapt": {
      "description": "Adaptive transformation of z based on its sign",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "T": {
      "description": "Dynamic threshold as a high\u2010order polynomial in a",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "extra": {
      "description": "Extra blending composite term incorporating harmonic modulations and softplus adjustments",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "f(x)": {
      "description": "Final nonlinearly transformed signal used in the utility computation",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "U": {
      "description": "Latent utility computed as the sum of beta and scaled transformed signal f(x)",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "P(accept=1)": {
      "description": "Predicted probability of accepting the proposal computed via a logistic function of U",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "The model computes a core sum of eleven fixed components augmented by a small constant, which is then sequentially modulated through several harmonic and oscillatory transformations to yield a signal z. An adaptive transformation is applied to z using a weight derived from phi, with different formulations for positive and negative z. A dynamic threshold T and an extra composite blending term further nonlinearly transform the signal. The final transformed signal f(x) is scaled by gamma and shifted by beta to yield the latent utility U, which is then converted into the acceptance probability via a logistic function.",
  "target_variable": "accept",
  "full_reasoning": "<MODEL>\na = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + \u03b4\na_mod = a \u00b7 [1 + 0.012 \u00b7 sin(a + 0.045)] \u00b7 1.08\nb\u2081 = a_mod \u00b7 [1 + 0.008 \u00b7 cos(a + 0.065)]\nb\u2082 = b\u2081 \u00b7 [1 + 0.005 \u00b7 sin(a + 0.115)]\nb\u2083 = b\u2082 \u00b7 [1 + 0.004 \u00b7 cos(a + 0.085)]\nb\u2084 = b\u2083 \u00b7 [1 + 0.006 \u00b7 (sin(a + 0.035) \u00b7 cos(a + 0.055))]\nz = b\u2084 \u00b7 [1 + 0.003 \u00b7 (sin(a + 0.03) \u00b7 cos(a + 0.05))]\nw = (phi - 0.5) / phi\nf_adapt(z) = { 1.002 \u00b7 [ z^(w) \u00b7 (ln(1+z))^(1-w) ]\u2003\u2003if\u2003z \u2265 0 \n            \u2003\u2003\u2003\u2003\u2003  phi \u00b7 z\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003if\u2003z < 0 }\nT = 1 + 0.0005 \u00b7 a\u00b2 + 0.00005 \u00b7 a\u00b3 + 0.000005 \u00b7 a\u2074 + 0.0000001 \u00b7 a\u2075 + 0.00000001 \u00b7 a\u2076 + 0.000000001 \u00b7 a\u2077 + 0.0000000001 \u00b7 a\u2078 + 0.000001 \u00b7 a\u00b3\nextra = { exp(\u2013a/0.1) \u00b7 [z/(1+|z|)] \u00b7 [1+0.005\u00b7sin(1/(1+a))] \u00b7 [1+0.002\u00b7cos(0.5\u00b7a)] \u00b7 [1.07\u00b7softplus(0.865/(1+a)) + 0.15\u00b7(0.865/(1+a)) + 0.5\u00b7(0.865/(1+a)) + 0.006\u00b7a] \u00b7 [1\u20130.002\u00b7cos(a)] \u00b7 [1\u20130.0025\u00b7cos(2.5\u00b7a)] \u00b7 [1+0.001\u00b7a] \u00b7 [1+cosh(0.001\u00b7a)]^(2+0.0005\u00b7a) + 1e\u20136 }^(0.9478+0.00018\u00b7ln(1+a))\nf(x) = sign(z) \u00b7 [ f_adapt(z) \u00b7 T \u00b7 extra ]^((0.9478+0.00018\u00b7ln(1+a)) \u00b7 [1+0.001\u00b7sin(a)])\nU = beta + gamma \u00b7 f(x)\nP(accept=1) = 1/(1+exp(\u2013U))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"beta\": {\n      \"description\": \"Base utility intercept parameter; captures the baseline tendency to accept\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": -10,\n          \"upper\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Scaling parameter for the transformed signal f(x)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": 0,\n          \"upper\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Adaptive weight parameter regulating the transformation f_adapt for negative z values\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": 0.5,\n          \"upper\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"F1\": {\n      \"description\": \"Fixed component 1 computed from task data\",\n      \"range\": {\n        \"min\": -100,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data/calculated\"\n    },\n    \"F2\": {\n      \"description\": \"Fixed component 2 computed from task data\",\n      \"range\": {\n        \"min\": -100,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data/calculated\"\n    },\n    \"F3\": {\n      \"description\": \"Fixed component 3 computed from task data\",\n      \"range\": {\n        \"min\": -100,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data/calculated\"\n    },\n    \"F4\": {\n      \"description\": \"Fixed component 4 computed from task data\",\n      \"range\": {\n        \"min\": -100,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data/calculated\"\n    },\n    \"F5\": {\n      \"description\": \"Fixed component 5 computed from task data\",\n      \"range\": {\n        \"min\": -100,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data/calculated\"\n    },\n    \"F6\": {\n      \"description\": \"Fixed component 6 computed from task data\",\n      \"range\": {\n        \"min\": -100,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data/calculated\"\n    },\n    \"F7\": {\n      \"description\": \"Fixed component 7 computed from task data\",\n      \"range\": {\n        \"min\": -100,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data/calculated\"\n    },\n    \"F8\": {\n      \"description\": \"Fixed component 8 computed from task data\",\n      \"range\": {\n        \"min\": -100,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data/calculated\"\n    },\n    \"F9\": {\n      \"description\": \"Fixed component 9 computed from task data\",\n      \"range\": {\n        \"min\": -100,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data/calculated\"\n    },\n    \"F10\": {\n      \"description\": \"Fixed component 10 computed from task data\",\n      \"range\": {\n        \"min\": -100,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data/calculated\"\n    },\n    \"F11\": {\n      \"description\": \"Fixed component 11 computed from task data\",\n      \"range\": {\n        \"min\": -100,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data/calculated\"\n    },\n    \"\u03b4\": {\n      \"description\": \"Small constant added to the sum of fixed components\",\n      \"range\": {\n        \"min\": 1e-6,\n        \"max\": 1e-6,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data/fixed\"\n    },\n    \"a\": {\n      \"description\": \"Core sum of fixed components plus \u03b4\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a_mod\": {\n      \"description\": \"Scaled version of a after initial modulation\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"b\u2081\": {\n      \"description\": \"Sequential modulation of a_mod (first modulation)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"b\u2082\": {\n      \"description\": \"Sequential modulation of b\u2081 (second modulation)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"b\u2083\": {\n      \"description\": \"Sequential modulation of b\u2082 (third modulation)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"b\u2084\": {\n      \"description\": \"Sequential modulation of b\u2083 (fourth modulation)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"z\": {\n      \"description\": \"Modulated signal after sequential transformations\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"w\": {\n      \"description\": \"Weight computed from phi for the adaptive transformation\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_adapt\": {\n      \"description\": \"Adaptive transformation of z based on its sign\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"T\": {\n      \"description\": \"Dynamic threshold as a high\u2010order polynomial in a\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"extra\": {\n      \"description\": \"Extra blending composite term incorporating harmonic modulations and softplus adjustments\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f(x)\": {\n      \"description\": \"Final nonlinearly transformed signal used in the utility computation\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed as the sum of beta and scaled transformed signal f(x)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"P(accept=1)\": {\n      \"description\": \"Predicted probability of accepting the proposal computed via a logistic function of U\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nThe model computes a core sum of eleven fixed components augmented by a small constant, which is then sequentially modulated through several harmonic and oscillatory transformations to yield a signal z. An adaptive transformation is applied to z using a weight derived from phi, with different formulations for positive and negative z. A dynamic threshold T and an extra composite blending term further nonlinearly transform the signal. The final transformed signal f(x) is scaled by gamma and shifted by beta to yield the latent utility U, which is then converted into the acceptance probability via a logistic function.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: a = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + \u03b4\na_mod = a \u00b7 [1 + 0.012 \u00b7 sin(a + 0.045)] \u00b7 1.08\nb\u2081 = a_mod \u00b7 [1 + 0.008 \u00b7 cos(a + 0.065)]\nb\u2082 = b\u2081 \u00b7 [1 + 0.005 \u00b7 sin(a + 0.115)]\nb\u2083 = b\u2082 \u00b7 [1 + 0.004 \u00b7 cos(a + 0.085)]\nb\u2084 = b\u2083 \u00b7 [1 + 0.006 \u00b7 (sin(a + 0.035) \u00b7 cos(a + 0.055))]\nz = b\u2084 \u00b7 [1 + 0.003 \u00b7 (sin(a + 0.03) \u00b7 cos(a + 0.05))]\nw = (phi - 0.5) / phi\nf_adapt(z) = { 1.002 \u00b7 [ z^(w) \u00b7 (ln(1+z))^(1-w) ]\u2003\u2003if\u2003z \u2265 0 \n            \u2003\u2003\u2003\u2003\u2003  phi \u00b7 z\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003if\u2003z < 0 }\nT = 1 + 0.0005 \u00b7 a\u00b2 + 0.00005 \u00b7 a\u00b3 + 0.000005 \u00b7 a\u2074 + 0.0000001 \u00b7 a\u2075 + 0.00000001 \u00b7 a\u2076 + 0.000000001 \u00b7 a\u2077 + 0.0000000001 \u00b7 a\u2078 + 0.000001 \u00b7 a\u00b3\nextra = { exp(\u2013a/0.1) \u00b7 [z/(1+|z|)] \u00b7 [1+0.005\u00b7sin(1/(1+a))] \u00b7 [1+0.002\u00b7cos(0.5\u00b7a)] \u00b7 [1.07\u00b7softplus(0.865/(1+a)) + 0.15\u00b7(0.865/(1+a)) + 0.5\u00b7(0.865/(1+a)) + 0.006\u00b7a] \u00b7 [1\u20130.002\u00b7cos(a)] \u00b7 [1\u20130.0025\u00b7cos(2.5\u00b7a)] \u00b7 [1+0.001\u00b7a] \u00b7 [1+cosh(0.001\u00b7a)]^(2+0.0005\u00b7a) + 1e\u20136 }^(0.9478+0.00018\u00b7ln(1+a))\nf(x) = sign(z) \u00b7 [ f_adapt(z) \u00b7 T \u00b7 extra ]^((0.9478+0.00018\u00b7ln(1+a)) \u00b7 [1+0.001\u00b7sin(a)])\nU = beta + gamma \u00b7 f(x)\nP(accept=1) = 1/(1+exp(\u2013U))\nSummary: The model computes a core sum of eleven fixed components augmented by a small constant, which is then sequentially modulated through several harmonic and oscillatory transformations to yield a signal z. An adaptive transformation is applied to z using a weight derived from phi, with different formulations for positive and negative z. A dynamic threshold T and an extra composite blending term further nonlinearly transform the signal. The final transformed signal f(x) is scaled by gamma and shifted by beta to yield the latent utility U, which is then converted into the acceptance probability via a logistic function.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, beta=0, gamma=1, phi=1):\n    model_predictions = []\n    for trial in trial_data:\n        F1 = trial.get(\"F1\", 0)\n        F2 = trial.get(\"F2\", 0)\n        F3 = trial.get(\"F3\", 0)\n        F4 = trial.get(\"F4\", 0)\n        F5 = trial.get(\"F5\", 0)\n        F6 = trial.get(\"F6\", 0)\n        F7 = trial.get(\"F7\", 0)\n        F8 = trial.get(\"F8\", 0)\n        F9 = trial.get(\"F9\", 0)\n        F10 = trial.get(\"F10\", 0)\n        F11 = trial.get(\"F11\", 0)\n        delta = 1e-06\n\n        a = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + delta\n        a_mod = a * (1 + 0.012 * math.sin(a + 0.045)) * 1.08\n        b1 = a_mod * (1 + 0.008 * math.cos(a + 0.065))\n        b2 = b1 * (1 + 0.005 * math.sin(a + 0.115))\n        b3 = b2 * (1 + 0.004 * math.cos(a + 0.085))\n        b4 = b3 * (1 + 0.006 * (math.sin(a + 0.035) * math.cos(a + 0.055)))\n        z = b4 * (1 + 0.003 * (math.sin(a + 0.03) * math.cos(a + 0.05)))\n\n        w = (phi - 0.5) / phi\n\n        if z >= 0:\n            f_adapt_z = 1.002 * (z**w) * (math.log(1 + z)**(1 - w))\n        else:\n            f_adapt_z = phi * z\n\n        T = 1 + 0.0005 * a**2 + 0.00005 * a**3 + 0.000005 * a**4 + 0.0000001 * a**5 + 0.00000001 * a**6 + 0.000000001 * a**7 + 0.0000000001 * a**8 + 0.000001 * a**3\n\n        softplus = lambda x: math.log(1 + math.exp(x))\n        \n        extra_base = math.exp(-a/0.1) * (z/(1+abs(z))) * (1+0.005*math.sin(1/(1+a))) * (1+0.002*math.cos(0.5*a)) * (1.07*softplus(0.865/(1+a)) + 0.15*(0.865/(1+a)) + 0.5*(0.865/(1+a)) + 0.006*a) * (1-0.002*math.cos(a)) * (1-0.0025*math.cos(2.5*a)) * (1+0.001*a) * (1+math.cosh(0.001*a))**(2+0.0005*a) + 1e-6\n        extra = extra_base**(0.9478+0.00018*math.log(1+a))\n\n\n        fx_sign = 1 if z >= 0 else -1\n        fx = fx_sign * (f_adapt_z * T * extra)**((0.9478+0.00018*math.log(1+a)) * (1+0.001*math.sin(a)))\n\n        U = beta + gamma * fx\n        \n        try:\n            p_accept = 1 / (1 + math.exp(-U))\n        except OverflowError:\n            p_accept = 0.0 if U > 0 else 1.0\n        \n\n        model_predictions.append(p_accept)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.5589133089133089,
  "fitting_results": [
    {
      "beta": -9.999999999999998,
      "gamma": 0.0026119847604044732,
      "phi": 0.9688763904040164,
      "success": true,
      "log_likelihood": -24.953979470262787,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 7.329404505689272,
      "phi": 1.4942821941811133,
      "success": true,
      "log_likelihood": -24.953298502232386,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.0775137410120923,
      "gamma": 6.531377651146208,
      "phi": 1.1738012871942618,
      "success": true,
      "log_likelihood": -24.89771435002653,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 2.5126879452258555,
      "phi": 1.0666459437305997,
      "success": true,
      "log_likelihood": -24.953434695838492,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -9.999999999999998,
      "gamma": 3.94315157333207,
      "phi": 1.4860065133535623,
      "success": true,
      "log_likelihood": -24.9533892979698,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.28408384830245,
      "gamma": 8.751804613814947,
      "phi": 1.1982332512771854,
      "success": true,
      "log_likelihood": -23.545973163871306,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 9.175595443418063,
      "phi": 1.0015268110330324,
      "success": true,
      "log_likelihood": -11.277860290249262,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.8148759547794576,
      "gamma": 2.1616275789414283,
      "phi": 1.1638562743461618,
      "success": true,
      "log_likelihood": -22.91451005141385,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 9.183289764860213,
      "phi": 0.807625289461271,
      "success": true,
      "log_likelihood": -11.277860290249262,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 1.3756060869704323,
      "phi": 0.7140557648996214,
      "success": true,
      "log_likelihood": -24.953480093707157,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 2.134530580265345,
      "phi": 1.34922220435373,
      "success": true,
      "log_likelihood": -24.953389297969796,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.637657823895057,
      "phi": 1.408928188466033,
      "success": true,
      "log_likelihood": -24.953934072394098,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 6.313838058172713,
      "phi": 1.1471906950395803,
      "success": true,
      "log_likelihood": -24.953434695838524,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 8.921470835057788,
      "phi": 0.9256348063962159,
      "success": true,
      "log_likelihood": -11.277860290249277,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 3.4923643886733737,
      "phi": 1.3286512449975498,
      "success": true,
      "log_likelihood": -11.277860290249425,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 6.061495616821345,
      "phi": 1.2509794218399135,
      "success": true,
      "log_likelihood": -11.277860290249349,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 5.848648723923563,
      "phi": 1.369148333429477,
      "success": true,
      "log_likelihood": -11.277860290249361,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 8.426851813536446,
      "phi": 0.8352945223130896,
      "success": true,
      "log_likelihood": -16.277633299730766,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 8.335430871076458,
      "phi": 0.8614888133670763,
      "success": true,
      "log_likelihood": -15.277678697834467,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 7.3002806180572355,
      "phi": 1.483730725423112,
      "success": true,
      "log_likelihood": -11.277860290249322,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.2479108445256857,
      "gamma": 4.0114708630067035,
      "phi": 1.3484244664771547,
      "success": true,
      "log_likelihood": -24.730616779868463,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 2.762200655190963,
      "phi": 1.3564010165543716,
      "success": true,
      "log_likelihood": -16.27763329973086,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -9.999999999999998,
      "gamma": 5.580296222819142,
      "phi": 1.0838698849891326,
      "success": true,
      "log_likelihood": -24.95352549157592,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.0783708375397474,
      "gamma": 9.388444183818397,
      "phi": 1.2588770807355079,
      "success": true,
      "log_likelihood": -24.89771432444394,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 3.8557943349862844,
      "phi": 1.331328562773741,
      "success": true,
      "log_likelihood": -24.95329850223239,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.6791261620185204,
      "gamma": 5.665443824783127,
      "phi": 1.3121683044495105,
      "success": true,
      "log_likelihood": -24.450957569597417,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.2474926590833726,
      "gamma": 6.42999192100905,
      "phi": 1.0787883505093006,
      "success": true,
      "log_likelihood": -24.730616750669892,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 4.556001781897824,
      "phi": 0.9054629936955817,
      "success": true,
      "log_likelihood": -24.953661685182052,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 3.297054815450835,
      "phi": 0.7110358359533392,
      "success": true,
      "log_likelihood": -15.27767869783458,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 2.35720508430451,
      "phi": 0.5704583263257406,
      "success": true,
      "log_likelihood": -19.277497105419688,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 7.457808291591186,
      "phi": 0.6955925079410787,
      "success": true,
      "log_likelihood": -11.277860290249322,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 6.044325931217754,
      "phi": 0.6396090514968241,
      "success": true,
      "log_likelihood": -24.95397947026304,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.3244493191494757,
      "phi": 1.226159166859103,
      "success": true,
      "log_likelihood": -24.953434695838467,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 5.641113861362203,
      "phi": 1.3890517388487855,
      "success": true,
      "log_likelihood": -24.953480093707217,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 4.126282700726316,
      "phi": 0.8606505036351128,
      "success": true,
      "log_likelihood": -11.277860290249407,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.28407455968938466,
      "gamma": 7.847751576303211,
      "phi": 1.399091734273648,
      "success": true,
      "log_likelihood": -23.545973163849528,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.5229004825884092,
      "gamma": 1.1593297394584379,
      "phi": 1.2107280003844596,
      "success": true,
      "log_likelihood": -22.15793815563372,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -6.248927613475471,
      "gamma": 2.1695928503493467,
      "phi": 1.498997237916182,
      "success": true,
      "log_likelihood": -24.95331523413298,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.8148762674694011,
      "gamma": 9.125512646733792,
      "phi": 1.4962192765558064,
      "success": true,
      "log_likelihood": -22.914510051414094,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 9.426600540126202,
      "phi": 0.6931484006305059,
      "success": true,
      "log_likelihood": -14.27772409593816,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.19265210343201944,
      "gamma": 0.8617264942974379,
      "phi": 0.8329837566765514,
      "success": true,
      "log_likelihood": -24.056945188723688,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.30464663720126794,
      "phi": 1.3956838225824684,
      "success": true,
      "log_likelihood": -24.953752480919327,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 9.69664113886708,
      "phi": 0.7054405967384336,
      "success": true,
      "log_likelihood": -12.277814892145535,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.2474286623427775,
      "gamma": 3.9776335351393,
      "phi": 1.2294526115159863,
      "success": true,
      "log_likelihood": -24.730616750321698,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -7.098293130893032,
      "gamma": 5.216718445609171,
      "phi": 1.272144057681861,
      "success": true,
      "log_likelihood": -24.949998234310165,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 3.068576295627836,
      "gamma": 2.0806740883784625,
      "phi": 0.6791935498156919,
      "success": true,
      "log_likelihood": -21.270320874609304,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.0783182652227588,
      "gamma": 0.7567296699597592,
      "phi": 0.5924097148121226,
      "success": true,
      "log_likelihood": -24.89771432415797,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 7.923146181576497,
      "phi": 1.1950223640507487,
      "success": true,
      "log_likelihood": -24.953480093707235,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 7.861037623337166,
      "phi": 1.198216632466253,
      "success": true,
      "log_likelihood": -24.953434695838517,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.0784851103083306,
      "gamma": 5.181304237759896,
      "phi": 0.6714739599603621,
      "success": true,
      "log_likelihood": -24.897714325901113,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.5230387767713847,
      "gamma": 3.7591829604982374,
      "phi": 0.9468069696249952,
      "success": true,
      "log_likelihood": -22.157938154827125,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 3.3395062843301027,
      "phi": 1.1226738375507177,
      "success": true,
      "log_likelihood": -24.95388867452552,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.078312719994858,
      "gamma": 9.299294946200554,
      "phi": 0.6826351853301935,
      "success": true,
      "log_likelihood": -24.89771432414191,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.6790568082550602,
      "gamma": 6.078923790827256,
      "phi": 1.0092607174847918,
      "success": true,
      "log_likelihood": -24.450957568495607,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 2.4111991055016846,
      "phi": 1.423691471995416,
      "success": true,
      "log_likelihood": -24.953480093707192,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 5.045013593273443,
      "phi": 1.4619593112393607,
      "success": true,
      "log_likelihood": -24.953570889444638,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 4.544443085934418,
      "phi": 1.4645449181972836,
      "success": true,
      "log_likelihood": -24.953661685182052,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 8.307986211505895,
      "phi": 0.6279909085880463,
      "success": true,
      "log_likelihood": -15.277678697834467,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 3.301309766010132,
      "phi": 1.211605552157283,
      "success": true,
      "log_likelihood": -24.953934072394222,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 7.151521317421037,
      "phi": 0.8478432086601908,
      "success": true,
      "log_likelihood": -18.277542503523375,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.19265480651616143,
      "gamma": 1.2980486926138946,
      "phi": 1.4783868087419902,
      "success": true,
      "log_likelihood": -24.056945188724093,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -7.067750679627494,
      "gamma": 7.546581777112726,
      "phi": 0.7893893497476425,
      "success": true,
      "log_likelihood": -24.953301755096653,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 3.1176140450283327,
      "phi": 0.7079487243228872,
      "success": true,
      "log_likelihood": -24.953979470262905,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -6.7486628832481745,
      "gamma": 5.04013388915066,
      "phi": 1.3734599776115575,
      "success": true,
      "log_likelihood": -24.955646810814997,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -9.999999999999998,
      "gamma": 6.310495013587387,
      "phi": 0.8594804690963735,
      "success": true,
      "log_likelihood": -24.95375248091952,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.2475980101982722,
      "gamma": 0.8798767740416125,
      "phi": 1.4714648700947572,
      "success": true,
      "log_likelihood": -24.73061675362568,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 5.028319081715048,
      "phi": 0.8120406864247784,
      "success": true,
      "log_likelihood": -14.277724095938256,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 9.999999999999998,
      "gamma": 7.8514743706558745,
      "phi": 0.8850209445437025,
      "success": true,
      "log_likelihood": -16.27763329973077,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.2474473913473871,
      "gamma": 8.370250851247551,
      "phi": 0.7598801312040511,
      "success": true,
      "log_likelihood": -24.73061675031039,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 9.425696760209236,
      "phi": 0.6264820964556603,
      "success": true,
      "log_likelihood": -14.277724095938163,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 1.1188912356827718,
      "phi": 1.2990419223945295,
      "success": true,
      "log_likelihood": -24.953934072394123,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -9.999999999999998,
      "gamma": 5.596933241774229,
      "phi": 1.3161420787399423,
      "success": true,
      "log_likelihood": -24.953888674525594,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.0786789097133656,
      "gamma": 9.058098982388653,
      "phi": 1.066290338389718,
      "success": true,
      "log_likelihood": -24.8977143309884,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 6.8303183337665505,
      "phi": 0.8781656159313492,
      "success": true,
      "log_likelihood": -19.277497105419663,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -7.335867726394816,
      "gamma": 3.032472854205613,
      "phi": 0.6621952433604461,
      "success": true,
      "log_likelihood": -24.953300401900563,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.5230008411148874,
      "gamma": 6.931838848752933,
      "phi": 1.1336920109709618,
      "success": true,
      "log_likelihood": -22.15793815473429,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 8.605900802110796,
      "phi": 0.9076007594003309,
      "success": true,
      "log_likelihood": -13.277769494041875,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 2.4579819231677447,
      "phi": 0.5439203418198928,
      "success": true,
      "log_likelihood": -24.9540248681316,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.19265070513563093,
      "gamma": 5.994662764347021,
      "phi": 1.3313220435507729,
      "success": true,
      "log_likelihood": -24.05694518872499,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.21892213299358199,
      "phi": 1.1978176631855466,
      "success": true,
      "log_likelihood": -24.95397947026279,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -6.373979819238948,
      "gamma": 7.50585222569211,
      "phi": 0.9199293888677149,
      "success": true,
      "log_likelihood": -24.95160908016478,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 6.049509287440764,
      "phi": 1.2459051766715197,
      "success": true,
      "log_likelihood": -14.277724095938213,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 1.4903867501840018,
      "phi": 1.144064286879244,
      "success": true,
      "log_likelihood": -24.95393407239413,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3333333333333333,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -6.344801930422412,
      "gamma": 0.024882429320052246,
      "phi": 0.9316662403879947,
      "success": true,
      "log_likelihood": -24.95331231791374,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -6.849051822740201,
      "gamma": 5.572541948031447,
      "phi": 0.6478647286456916,
      "success": true,
      "log_likelihood": -24.949066193495366,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 2.147299997053107,
      "phi": 1.414972221613687,
      "success": true,
      "log_likelihood": -24.953934072394194,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.5228215619581484,
      "gamma": 6.2710080281027905,
      "phi": 0.7918280929080049,
      "success": true,
      "log_likelihood": -22.15793815750858,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 1.348660013907803,
      "phi": 1.1818649727747808,
      "success": true,
      "log_likelihood": -24.953752480919338,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 5.432996163011934,
      "phi": 0.8685844281123937,
      "success": true,
      "log_likelihood": -13.277769494041966,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.08810759888745245,
      "phi": 1.4970781299763827,
      "success": true,
      "log_likelihood": -24.953343900101085,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.5230077243380191,
      "gamma": 7.906102030263396,
      "phi": 0.6209822732442182,
      "success": true,
      "log_likelihood": -22.157938154733472,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "beta": {
        "r": 0.6647763903524143,
        "p": 4.6243830291718054e-14
      },
      "gamma": {
        "r": 0.09013178396250768,
        "p": 0.37249855340346016
      },
      "phi": {
        "r": 0.010346749642121305,
        "p": 0.9186222355779481
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 53.96316254010387,
  "bic_results": {
    "average_bic": 53.96316254010387,
    "individual_bics": [
      60.6585157558939,
      60.6571538198331,
      60.54598551542139,
      60.65742620704532,
      60.657335411307926,
      57.842503143110946,
      33.30627739586686,
      56.579576918196025,
      33.30627739586686,
      60.65751700278264,
      60.657335411307926,
      60.65842496015652,
      60.657426207045376,
      33.306277395866886,
      33.306277395867184,
      33.30627739586703,
      33.306277395867056,
      43.30582341482986,
      41.30591421103726,
      33.30627739586697,
      60.21179037510525,
      43.305823414830044,
      60.657607798520175,
      60.545985464256205,
      60.65715381983311,
      59.65247195456317,
      60.21179031670812,
      60.65788018573244,
      41.30591421103749,
      49.30555102620771,
      33.30627739586697,
      60.65851575589441,
      60.65742620704526,
      60.65751700278277,
      33.30627739586714,
      57.84250314306739,
      55.06643312663577,
      60.657187283634286,
      56.57957691819652,
      39.30600500724465,
      58.8644471928157,
      60.65806177720698,
      35.3061865996594,
      60.21179031601173,
      60.65055328398866,
      53.291198564586935,
      60.545985463684275,
      60.6575170027828,
      60.65742620704536,
      60.54598546717055,
      55.066433125022584,
      60.65833416441937,
      60.545985463652144,
      59.65247195235955,
      60.65751700278271,
      60.65769859425761,
      60.65788018573244,
      41.30591421103726,
      60.65842496015678,
      47.30564182241508,
      58.86444719281651,
      60.657160325561634,
      60.65851575589414,
      60.66185043699832,
      60.658061777207365,
      60.21179032261969,
      39.30600500724484,
      43.305823414829874,
      60.211790315989106,
      39.30600500724466,
      60.65842496015658,
      60.658334164419514,
      60.54598547734513,
      49.30555102620765,
      60.65715761916945,
      55.066433124836905,
      37.30609580345208,
      60.658606551631536,
      58.864447192818304,
      60.658515755893916,
      60.653774975697885,
      39.30600500724476,
      60.658424960156594,
      60.65718145119581,
      60.648689202359066,
      60.65842496015672,
      55.06643313038549,
      60.65806177720701,
      37.306095803452266,
      60.657244615570505,
      55.06643312483527
    ],
    "group_enabled": false,
    "group_bics": null,
    "num_parameters": 3,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- beta: r = 0.665\n- gamma: r = 0.090\n- phi: r = 0.010",
  "previous_models": [
    "Specification: a = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + \u03b4\na_mod = a \u00b7 [1 + 0.012 \u00b7 sin(a + 0.045)] \u00b7 1.08\nb\u2081 = a_mod \u00b7 [1 + 0.008 \u00b7 cos(a + 0.065)]\nb\u2082 = b\u2081 \u00b7 [1 + 0.005 \u00b7 sin(a + 0.115)]\nb\u2083 = b\u2082 \u00b7 [1 + 0.004 \u00b7 cos(a + 0.085)]\nb\u2084 = b\u2083 \u00b7 [1 + 0.006 \u00b7 (sin(a + 0.035) \u00b7 cos(a + 0.055))]\nz = b\u2084 \u00b7 [1 + 0.003 \u00b7 (sin(a + 0.03) \u00b7 cos(a + 0.05))]\nw = (phi - 0.5) / phi\nf_adapt(z) = { 1.002 \u00b7 [ z^(w) \u00b7 (ln(1+z))^(1-w) ]\u2003\u2003if\u2003z \u2265 0 \n            \u2003\u2003\u2003\u2003\u2003  phi \u00b7 z\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003if\u2003z < 0 }\nT = 1 + 0.0005 \u00b7 a\u00b2 + 0.00005 \u00b7 a\u00b3 + 0.000005 \u00b7 a\u2074 + 0.0000001 \u00b7 a\u2075 + 0.00000001 \u00b7 a\u2076 + 0.000000001 \u00b7 a\u2077 + 0.0000000001 \u00b7 a\u2078 + 0.000001 \u00b7 a\u00b3\nextra = { exp(\u2013a/0.1) \u00b7 [z/(1+|z|)] \u00b7 [1+0.005\u00b7sin(1/(1+a))] \u00b7 [1+0.002\u00b7cos(0.5\u00b7a)] \u00b7 [1.07\u00b7softplus(0.865/(1+a)) + 0.15\u00b7(0.865/(1+a)) + 0.5\u00b7(0.865/(1+a)) + 0.006\u00b7a] \u00b7 [1\u20130.002\u00b7cos(a)] \u00b7 [1\u20130.0025\u00b7cos(2.5\u00b7a)] \u00b7 [1+0.001\u00b7a] \u00b7 [1+cosh(0.001\u00b7a)]^(2+0.0005\u00b7a) + 1e\u20136 }^(0.9478+0.00018\u00b7ln(1+a))\nf(x) = sign(z) \u00b7 [ f_adapt(z) \u00b7 T \u00b7 extra ]^((0.9478+0.00018\u00b7ln(1+a)) \u00b7 [1+0.001\u00b7sin(a)])\nU = beta + gamma \u00b7 f(x)\nP(accept=1) = 1/(1+exp(\u2013U))\nSummary: The model computes a core sum of eleven fixed components augmented by a small constant, which is then sequentially modulated through several harmonic and oscillatory transformations to yield a signal z. An adaptive transformation is applied to z using a weight derived from phi, with different formulations for positive and negative z. A dynamic threshold T and an extra composite blending term further nonlinearly transform the signal. The final transformed signal f(x) is scaled by gamma and shifted by beta to yield the latent utility U, which is then converted into the acceptance probability via a logistic function.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 53.96316254010387\nOverall Accuracy: 0.5589\n\nParameter Recovery:\n- beta: r = 0.665\n- gamma: r = 0.090\n- phi: r = 0.010"
  ]
}