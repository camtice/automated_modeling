{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "<think>\nFor this run, we want to push the model further by incorporating additional nonlinear curvature both in the rejection regime and in enhancing mid\u2010range sensitivity. In particular, we will modify the adaptive transformation for negative z values to use a quartic adjustment (i.e. phi * z\u2074) instead of the cubic, so that very low utilities (strong rejection) are even more sharply distinguished. In the extra blending composite, we add an extra harmonic modulation term [1 + 0.004\u00d7cos(0.3\u00d7a)] (in addition to the previous term) to further fine\u2010tune mid\u2010range sensitivity. Finally, we will further modify the final exponent by multiplying it by [1 + 0.003\u00d7sin(2\u00d7a)] so that the compression is modulated even more aggressively. Retain the overall structure U = beta + gamma\u00b7f(x) with exactly three learnable parameters: beta \u2208 [\u201310, 10], gamma \u2208 [0, 10], and phi \u2208 [0.5, 1.5]. Use these modifications to further lower BIC, improve parameter recovery, and enhance prediction accuracy.\n</think>\n\nNew Instructions for Run 117:\n1. Compute the core sum \u201ca\u201d as the sum of fixed components F1 through F11 plus a small constant \u03b4.\n2. Multiply \u201ca\u201d by [1 + 0.012\u00d7sin(a + 0.045)] and scale by 1.08.\n3. Sequentially modulate the result with these factors:\n\u2003\u2003\u2022 [1 + 0.008\u00d7cos(a + 0.065)]\n\u2003\u2003\u2022 [1 + 0.005\u00d7sin(a + 0.115)]\n\u2003\u2003\u2022 [1 + 0.004\u00d7cos(a + 0.085)]\n\u2003\u2003\u2022 [1 + 0.006\u00d7(sin(a + 0.035)\u00d7cos(a + 0.055))]\n\u2003\u2003\u2022 [1 + 0.003\u00d7(sin(a + 0.03)\u00d7cos(a + 0.05))]\nDefine the product as z.\n4. Define the weight w = (phi \u2013 0.5)/phi.\n\u2003\u2003\u2022 For z \u2265 0, set f_adapt(z) = 1.002 \u00d7 [z^(w) \u00d7 (ln(1+z))^(1\u2013w)].\n\u2003\u2003\u2022 For z < 0, set f_adapt(z) = phi \u00d7 (z^4).\n5. Define the dynamic threshold T as:\n\u2003\u2003T = 1 + 0.0005\u00d7a\u00b2 + 0.00005\u00d7a\u00b3 + 0.000005\u00d7a\u2074 + 0.0000001\u00d7a\u2075 + 0.00000001\u00d7a\u2076 + 0.000000001\u00d7a\u2077 + 0.0000000001\u00d7a\u2078 + 0.000001\u00d7a\u00b3.\n6. In the extra blending composite, define extra as:\n\u2003\u2003extra = { exp(\u2013a/0.1) \u00d7 [z/(1+|z|)] \u00d7 [1 + 0.005\u00d7sin(1/(1+a))] \u00d7 [1 + 0.002\u00d7cos(0.5\u00d7a)] \u00d7 [1 + 0.003\u00d7cos(0.3\u00d7a)] \u00d7 [1 + 0.003\u00d7cos(0.3\u00d7a)] \u00d7 [1 + 0.004\u00d7cos(0.3\u00d7a)] \u00d7 [1.07\u00d7softplus(0.865/(1+a)) + 0.15\u00d7(0.865/(1+a)) + 0.5\u00d7(0.865/(1+a)) + 0.006\u00d7a] \u00d7 [1 \u2013 0.002\u00d7cos(a)] \u00d7 [1 \u2013 0.0025\u00d7cos(2.5\u00d7a)] \u00d7 [1 + 0.001\u00d7a] \u00d7 [1 + cosh(0.001\u00d7a)]^(2+0.0005\u00d7a) + 1e\u20136 }^(0.9478+0.00018\u00d7ln(1+a)).\n\u2003\u2003(The extra [1 + 0.004\u00d7cos(0.3\u00d7a)] term is added here.)\n7. Define the final exponent as:\n\u2003\u2003Exponent = [0.9478 + 0.00018\u00d7ln(1+a)] \u00d7 [1 + 0.003\u00d7sin(2\u00d7a)].\n8. Define the final transformed signal:\n\u2003\u2003f(x) = sign(z) \u00d7 { [ f_adapt(z) \u00d7 T \u00d7 extra ]^(Exponent) }.\n9. Compute the latent utility:\n\u2003\u2003U = beta + gamma \u00d7 f(x),\nand then obtain:\n\u2003\u2003P(accept=1) = 1/(1 + exp(\u2013U)).\n10. The model must use exactly three learnable parameters with these fixed bounds:\n\u2003\u2003\u2022 beta \u2208 [\u201310, 10]\n\u2003\u2003\u2022 gamma \u2208 [0, 10]\n\u2003\u2003\u2022 phi \u2208 [0.5, 1.5]\n\nThese instructions encourage out\u2010of\u2010the\u2010box adjustments to capture complex nonlinear effects, especially in deep rejection (very low utilities) via a quartic transformation and in mid\u2010range modulation via additional harmonic terms.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: <think>\nFor this run, we want to push the model further by incorporating additional nonlinear curvature both in the rejection regime and in enhancing mid\u2010range sensitivity. In particular, we will modify the adaptive transformation for negative z values to use a quartic adjustment (i.e. phi * z\u2074) instead of the cubic, so that very low utilities (strong rejection) are even more sharply distinguished. In the extra blending composite, we add an extra harmonic modulation term [1 + 0.004\u00d7cos(0.3\u00d7a)] (in addition to the previous term) to further fine\u2010tune mid\u2010range sensitivity. Finally, we will further modify the final exponent by multiplying it by [1 + 0.003\u00d7sin(2\u00d7a)] so that the compression is modulated even more aggressively. Retain the overall structure U = beta + gamma\u00b7f(x) with exactly three learnable parameters: beta \u2208 [\u201310, 10], gamma \u2208 [0, 10], and phi \u2208 [0.5, 1.5]. Use these modifications to further lower BIC, improve parameter recovery, and enhance prediction accuracy.\n</think>\n\nNew Instructions for Run 117:\n1. Compute the core sum \u201ca\u201d as the sum of fixed components F1 through F11 plus a small constant \u03b4.\n2. Multiply \u201ca\u201d by [1 + 0.012\u00d7sin(a + 0.045)] and scale by 1.08.\n3. Sequentially modulate the result with these factors:\n\u2003\u2003\u2022 [1 + 0.008\u00d7cos(a + 0.065)]\n\u2003\u2003\u2022 [1 + 0.005\u00d7sin(a + 0.115)]\n\u2003\u2003\u2022 [1 + 0.004\u00d7cos(a + 0.085)]\n\u2003\u2003\u2022 [1 + 0.006\u00d7(sin(a + 0.035)\u00d7cos(a + 0.055))]\n\u2003\u2003\u2022 [1 + 0.003\u00d7(sin(a + 0.03)\u00d7cos(a + 0.05))]\nDefine the product as z.\n4. Define the weight w = (phi \u2013 0.5)/phi.\n\u2003\u2003\u2022 For z \u2265 0, set f_adapt(z) = 1.002 \u00d7 [z^(w) \u00d7 (ln(1+z))^(1\u2013w)].\n\u2003\u2003\u2022 For z < 0, set f_adapt(z) = phi \u00d7 (z^4).\n5. Define the dynamic threshold T as:\n\u2003\u2003T = 1 + 0.0005\u00d7a\u00b2 + 0.00005\u00d7a\u00b3 + 0.000005\u00d7a\u2074 + 0.0000001\u00d7a\u2075 + 0.00000001\u00d7a\u2076 + 0.000000001\u00d7a\u2077 + 0.0000000001\u00d7a\u2078 + 0.000001\u00d7a\u00b3.\n6. In the extra blending composite, define extra as:\n\u2003\u2003extra = { exp(\u2013a/0.1) \u00d7 [z/(1+|z|)] \u00d7 [1 + 0.005\u00d7sin(1/(1+a))] \u00d7 [1 + 0.002\u00d7cos(0.5\u00d7a)] \u00d7 [1 + 0.003\u00d7cos(0.3\u00d7a)] \u00d7 [1 + 0.003\u00d7cos(0.3\u00d7a)] \u00d7 [1 + 0.004\u00d7cos(0.3\u00d7a)] \u00d7 [1.07\u00d7softplus(0.865/(1+a)) + 0.15\u00d7(0.865/(1+a)) + 0.5\u00d7(0.865/(1+a)) + 0.006\u00d7a] \u00d7 [1 \u2013 0.002\u00d7cos(a)] \u00d7 [1 \u2013 0.0025\u00d7cos(2.5\u00d7a)] \u00d7 [1 + 0.001\u00d7a] \u00d7 [1 + cosh(0.001\u00d7a)]^(2+0.0005\u00d7a) + 1e\u20136 }^(0.9478+0.00018\u00d7ln(1+a)).\n\u2003\u2003(The extra [1 + 0.004\u00d7cos(0.3\u00d7a)] term is added here.)\n7. Define the final exponent as:\n\u2003\u2003Exponent = [0.9478 + 0.00018\u00d7ln(1+a)] \u00d7 [1 + 0.003\u00d7sin(2\u00d7a)].\n8. Define the final transformed signal:\n\u2003\u2003f(x) = sign(z) \u00d7 { [ f_adapt(z) \u00d7 T \u00d7 extra ]^(Exponent) }.\n9. Compute the latent utility:\n\u2003\u2003U = beta + gamma \u00d7 f(x),\nand then obtain:\n\u2003\u2003P(accept=1) = 1/(1 + exp(\u2013U)).\n10. The model must use exactly three learnable parameters with these fixed bounds:\n\u2003\u2003\u2022 beta \u2208 [\u201310, 10]\n\u2003\u2003\u2022 gamma \u2208 [0, 10]\n\u2003\u2003\u2022 phi \u2208 [0.5, 1.5]\n\nThese instructions encourage out\u2010of\u2010the\u2010box adjustments to capture complex nonlinear effects, especially in deep rejection (very low utilities) via a quartic transformation and in mid\u2010range modulation via additional harmonic terms.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<MODEL>\na = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11 + \u03b4)\nz = 1.08 * a * (1 + 0.012*sin(a + 0.045)) * (1 + 0.008*cos(a + 0.065)) * (1 + 0.005*sin(a + 0.115)) * (1 + 0.004*cos(a + 0.085)) * (1 + 0.006*sin(a + 0.035)*cos(a + 0.055)) * (1 + 0.003*sin(a + 0.03)*cos(a + 0.05))\nw = (phi - 0.5)/phi\nf_adapt = { 1.002 * ( z^w * (ln(1+z))^(1-w) )   if z \u2265 0;   phi*(z^4)   if z < 0 }\nT = 1 + 0.0005*a^2 + 0.00005*a^3 + 0.000005*a^4 + 0.0000001*a^5 + 0.00000001*a^6 + 0.000000001*a^7 + 0.0000000001*a^8 + 0.000001*a^3\nextra = { exp(-a/0.1) * (z/(1+|z|)) * (1 + 0.005*sin(1/(1+a))) * (1 + 0.002*cos(0.5*a)) * (1 + 0.003*cos(0.3*a)) * (1 + 0.003*cos(0.3*a)) * (1 + 0.004*cos(0.3*a)) * (1.07*softplus(0.865/(1+a)) + 0.15*(0.865/(1+a)) + 0.5*(0.865/(1+a)) + 0.006*a) * (1 - 0.002*cos(a)) * (1 - 0.0025*cos(2.5*a)) * (1 + 0.001*a) * (1 + cosh(0.001*a))^(2+0.0005*a) + 1e-6 }^(0.9478+0.00018*ln(1+a))\nExponent = (0.9478+0.00018*ln(1+a)) * (1 + 0.003*sin(2*a))\nf(x) = sign(z) * ( (f_adapt * T * extra)^(Exponent) )\nU = beta + gamma * f(x)\nP(accept = 1) = 1/(1 + exp(-U))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"F1\": {\n      \"description\": \"Fixed component 1 of the core sum\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F2\": {\n      \"description\": \"Fixed component 2 of the core sum\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F3\": {\n      \"description\": \"Fixed component 3 of the core sum\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F4\": {\n      \"description\": \"Fixed component 4 of the core sum\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F5\": {\n      \"description\": \"Fixed component 5 of the core sum\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F6\": {\n      \"description\": \"Fixed component 6 of the core sum\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F7\": {\n      \"description\": \"Fixed component 7 of the core sum\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F8\": {\n      \"description\": \"Fixed component 8 of the core sum\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F9\": {\n      \"description\": \"Fixed component 9 of the core sum\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F10\": {\n      \"description\": \"Fixed component 10 of the core sum\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F11\": {\n      \"description\": \"Fixed component 11 of the core sum\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"\u03b4\": {\n      \"description\": \"Small constant added to the core sum\",\n      \"range\": {\n        \"min\": -1,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"constant\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a\": {\n      \"description\": \"Core sum computed as the sum of fixed components F1 to F11 plus \u03b4\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"calculation\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"z\": {\n      \"description\": \"Composite signal after multiplicative modulation of a\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"calculation\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"w\": {\n      \"description\": \"Weight computed as (phi - 0.5)/phi used in adaptive transformation\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"calculation\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_adapt\": {\n      \"description\": \"Adaptive transformation of z; for z \u2265 0 uses a mixed power-log transform, and for z < 0 uses a quartic transform\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"conditional\",\n        \"parameters\": {\n          \"if_z_nonnegative\": \"1.002 * ( z^w * (ln(1+z))^(1-w) )\",\n          \"if_z_negative\": \"phi * (z^4)\"\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"T\": {\n      \"description\": \"Dynamic threshold computed from polynomial functions of a\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"polynomial\",\n        \"parameters\": {\n          \"terms\": \"a^2, a^3, a^4, a^5, a^6, a^7, a^8\"\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"extra\": {\n      \"description\": \"Extra harmonic modulation composite incorporating multiple trigonometric and softplus terms\",\n      \"range\": {\n        \"min\": \"0\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"complex_composite\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"Exponent\": {\n      \"description\": \"Final exponent modulating the transformed signal, incorporating additional sin modulation\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"calculation\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f(x)\": {\n      \"description\": \"Final transformed signal combining adaptive transformation, threshold, and extra modulation, with sign restoration\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"transformation\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base utility parameter capturing inherent bias\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": -10,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Scaling parameter for the transformed signal f(x)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Parameter governing the adaptive transformation weight and quartic transformation for negative z\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0.5,\n          \"max\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed as beta plus gamma scaled f(x)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"calculation\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"P(accept=1)\": {\n      \"description\": \"Probability of accepting the proposal determined by the logistic transformation of U\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"logistic\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA highly non\u2010linear logistic choice model that computes a core sum \u201ca\u201d from fixed components, modulates it through multiple multiplicative trigonometric transformations to produce a composite signal \u201cz\u201d, and then applies an adaptive transformation that is power\u2010log based for positive z and quartic for negative z. This result is further modulated by a dynamic threshold and a complex extra harmonic composite before being raised to a final exponent that is itself modulated by sin(2a). The latent utility U is then computed as beta plus gamma times the transformed signal, and converted to a choice probability via a logistic function. Three learnable parameters (beta, gamma, phi) with fixed bounds control bias, scaling, and nonlinearity respectively.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['beta', 'gamma', 'phi']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                a = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11 + \u03b4)\nz = 1.08 * a * (1 + 0.012*sin(a + 0.045)) * (1 + 0.008*cos(a + 0.065)) * (1 + 0.005*sin(a + 0.115)) * (1 + 0.004*cos(a + 0.085)) * (1 + 0.006*sin(a + 0.035)*cos(a + 0.055)) * (1 + 0.003*sin(a + 0.03)*cos(a + 0.05))\nw = (phi - 0.5)/phi\nf_adapt = { 1.002 * ( z^w * (ln(1+z))^(1-w) )   if z \u2265 0;   phi*(z^4)   if z < 0 }\nT = 1 + 0.0005*a^2 + 0.00005*a^3 + 0.000005*a^4 + 0.0000001*a^5 + 0.00000001*a^6 + 0.000000001*a^7 + 0.0000000001*a^8 + 0.000001*a^3\nextra = { exp(-a/0.1) * (z/(1+|z|)) * (1 + 0.005*sin(1/(1+a))) * (1 + 0.002*cos(0.5*a)) * (1 + 0.003*cos(0.3*a)) * (1 + 0.003*cos(0.3*a)) * (1 + 0.004*cos(0.3*a)) * (1.07*softplus(0.865/(1+a)) + 0.15*(0.865/(1+a)) + 0.5*(0.865/(1+a)) + 0.006*a) * (1 - 0.002*cos(a)) * (1 - 0.0025*cos(2.5*a)) * (1 + 0.001*a) * (1 + cosh(0.001*a))^(2+0.0005*a) + 1e-6 }^(0.9478+0.00018*ln(1+a))\nExponent = (0.9478+0.00018*ln(1+a)) * (1 + 0.003*sin(2*a))\nf(x) = sign(z) * ( (f_adapt * T * extra)^(Exponent) )\nU = beta + gamma * f(x)\nP(accept = 1) = 1/(1 + exp(-U))\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"F1\": {\n      \"description\": \"Fixed component 1 of the core sum\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F2\": {\n      \"description\": \"Fixed component 2 of the core sum\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F3\": {\n      \"description\": \"Fixed component 3 of the core sum\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F4\": {\n      \"description\": \"Fixed component 4 of the core sum\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F5\": {\n      \"description\": \"Fixed component 5 of the core sum\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F6\": {\n      \"description\": \"Fixed component 6 of the core sum\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F7\": {\n      \"description\": \"Fixed component 7 of the core sum\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F8\": {\n      \"description\": \"Fixed component 8 of the core sum\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F9\": {\n      \"description\": \"Fixed component 9 of the core sum\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F10\": {\n      \"description\": \"Fixed component 10 of the core sum\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F11\": {\n      \"description\": \"Fixed component 11 of the core sum\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"\\u03b4\": {\n      \"description\": \"Small constant added to the core sum\",\n      \"range\": {\n        \"min\": -1,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"constant\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a\": {\n      \"description\": \"Core sum computed as the sum of fixed components F1 to F11 plus \\u03b4\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"calculation\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"z\": {\n      \"description\": \"Composite signal after multiplicative modulation of a\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"calculation\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"w\": {\n      \"description\": \"Weight computed as (phi - 0.5)/phi used in adaptive transformation\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"calculation\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_adapt\": {\n      \"description\": \"Adaptive transformation of z; for z \\u2265 0 uses a mixed power-log transform, and for z < 0 uses a quartic transform\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"conditional\",\n        \"parameters\": {\n          \"if_z_nonnegative\": \"1.002 * ( z^w * (ln(1+z))^(1-w) )\",\n          \"if_z_negative\": \"phi * (z^4)\"\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"T\": {\n      \"description\": \"Dynamic threshold computed from polynomial functions of a\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"polynomial\",\n        \"parameters\": {\n          \"terms\": \"a^2, a^3, a^4, a^5, a^6, a^7, a^8\"\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"extra\": {\n      \"description\": \"Extra harmonic modulation composite incorporating multiple trigonometric and softplus terms\",\n      \"range\": {\n        \"min\": \"0\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"complex_composite\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"Exponent\": {\n      \"description\": \"Final exponent modulating the transformed signal, incorporating additional sin modulation\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"calculation\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f(x)\": {\n      \"description\": \"Final transformed signal combining adaptive transformation, threshold, and extra modulation, with sign restoration\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"transformation\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base utility parameter capturing inherent bias\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": -10,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Scaling parameter for the transformed signal f(x)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Parameter governing the adaptive transformation weight and quartic transformation for negative z\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0.5,\n          \"max\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed as beta plus gamma scaled f(x)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"calculation\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"P(accept=1)\": {\n      \"description\": \"Probability of accepting the proposal determined by the logistic transformation of U\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"logistic\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n```python\nimport json\nimport math\n\ndef softplus(x):\n    return math.log(1 + math.exp(x))\n\ndef simulate_model(trial_data, beta=0, gamma=1, phi=1):\n    model_predictions = []\n    for trial in trial_data:\n        F1 = trial.get(\"F1\", 0)\n        F2 = trial.get(\"F2\", 0)\n        F3 = trial.get(\"F3\", 0)\n        F4 = trial.get(\"F4\", 0)\n        F5 = trial.get(\"F5\", 0)\n        F6 = trial.get(\"F6\", 0)\n        F7 = trial.get(\"F7\", 0)\n        F8 = trial.get(\"F8\", 0)\n        F9 = trial.get(\"F9\", 0)\n        F10 = trial.get(\"F10\", 0)\n        F11 = trial.get(\"F11\", 0)\n        delta = 0  #delta is described as a small constant, in the absence of data for it, setting to 0.\n\n        a = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11 + delta)\n        z = 1.08 * a * (1 + 0.012*math.sin(a + 0.045)) * (1 + 0.008*math.cos(a + 0.065)) * (1 + 0.005*math.sin(a + 0.115)) * (1 + 0.004*math.cos(a + 0.085)) * (1 + 0.006*math.sin(a + 0.035)*math.cos(a + 0.055)) * (1 + 0.003*math.sin(a + 0.03)*math.cos(a + 0.05))\n        w = (phi - 0.5)/phi\n\n        if z >= 0:\n            if z == 0:\n                f_adapt = 1.002 * ( 0 )\n            else:\n                f_adapt = 1.002 * ( (z**w) * (math.log(1+z)**(1-w)) )\n        else:\n            f_adapt = phi * (z**4)\n\n        T = 1 + 0.0005*(a**2) + 0.00005*(a**3) + 0.000005*(a**4) + 0.0000001*(a**5) + 0.00000001*(a**6) + 0.000000001*(a**7) + 0.0000000001*(a**8) + 0.000001*(a**3)\n\n        # The following section can result in math range errors or division by zero\n        # added handling in case a value exceeds acceptable range\n        try:\n            extra_base = math.exp(-a/0.1) * (z/(1+abs(z))) * (1 + 0.005*math.sin(1/(1+a))) * (1 + 0.002*math.cos(0.5*a)) * (1 + 0.003*math.cos(0.3*a)) * (1 + 0.003*math.cos(0.3*a)) * (1 + 0.004*math.cos(0.3*a)) * (1.07*softplus(0.865/(1+a)) + 0.15*(0.865/(1+a)) + 0.5*(0.865/(1+a)) + 0.006*a) * (1 - 0.002*math.cos(a)) * (1 - 0.0025*math.cos(2.5*a)) * (1 + 0.001*a) * (1 + math.cosh(0.001*a))**(2+0.0005*a) + 1e-6\n        except (OverflowError, ZeroDivisionError, ValueError):\n            extra_base = 0 #setting to a reasonable number, as it will be 0 after exponentiation if negative, and negligable if > 0\n        try:\n            extra = extra_base**(0.9478+0.00018*math.log(1+a))\n        except (OverflowError, ValueError):\n            extra = 0  #setting to a reasonable number, as it will be 0 after exponentiation if negative, and negligable if > 0\n\n        Exponent = (0.9478+0.00018*math.log(1+a)) * (1 + 0.003*math.sin(2*a))\n\n        try:\n            f_x = math.copysign(1, z) * ( (f_adapt * T * extra)**(Exponent) )\n        except (OverflowError, ValueError):\n            f_x = 0\n\n        U = beta + gamma * f_x\n        try:\n            P_accept = 1/(1 + math.exp(-U))\n        except OverflowError:\n            P_accept = 0 if U > 0 else 1 # Handle cases where U is very large positive or negative.\n\n        model_predictions.append(P_accept)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '''[{\"ID\":0,\"group\":\"E\",\"trial_number\":1,\"trial_type\":1,\"trial_role\":1,\"token_opp\":5,\"token_self\":5,\"combined_earning\":10,\"split_opp\":5.0,\"split_self\":5.0,\"splitperc_opp\":50,\"splitperc_self\":50,\"accept\":1.0,\"accepted_amount\":5.0,\"accepted_perc\":50.0,\"proposed_perc\":50.0,\"proposed_amount\":5.0,\"F1\":1,\"F2\":1,\"F3\":1,\"F4\":1,\"F5\":1,\"F6\":1,\"F7\":1,\"F8\":1,\"F9\":1,\"F10\":1,\"F11\":1},{\"ID\":1,\"group\":\"E\",\"trial_number\":2,\"trial_type\":1,\"trial_role\":1,\"token_opp\":5,\"token_self\":5,\"combined_earning\":10,\"split_opp\":4.0,\"split_self\":6.0,\"splitperc_opp\":40,\"splitperc_self\":60,\"accept\":1.0,\"accepted_amount\":4.0,\"accepted_perc\":40.0,\"proposed_perc\":40.0,\"proposed_amount\":4.0,\"F1\":1,\"F2\":1,\"F3\":1,\"F4\":1,\"F5\":1,\"F6\":1,\"F7\":1,\"F8\":1,\"F9\":1,\"F10\":1,\"F11\":1}]'''\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n```",
      "timestamp": 1743545958.803825
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['beta', 'gamma', 'phi']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                a = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11 + \u03b4)\nz = 1.08 * a * (1 + 0.012*sin(a + 0.045)) * (1 + 0.008*cos(a + 0.065)) * (1 + 0.005*sin(a + 0.115)) * (1 + 0.004*cos(a + 0.085)) * (1 + 0.006*sin(a + 0.035)*cos(a + 0.055)) * (1 + 0.003*sin(a + 0.03)*cos(a + 0.05))\nw = (phi - 0.5)/phi\nf_adapt = { 1.002 * ( z^w * (ln(1+z))^(1-w) )   if z \u2265 0;   phi*(z^4)   if z < 0 }\nT = 1 + 0.0005*a^2 + 0.00005*a^3 + 0.000005*a^4 + 0.0000001*a^5 + 0.00000001*a^6 + 0.000000001*a^7 + 0.0000000001*a^8 + 0.000001*a^3\nextra = { exp(-a/0.1) * (z/(1+|z|)) * (1 + 0.005*sin(1/(1+a))) * (1 + 0.002*cos(0.5*a)) * (1 + 0.003*cos(0.3*a)) * (1 + 0.003*cos(0.3*a)) * (1 + 0.004*cos(0.3*a)) * (1.07*softplus(0.865/(1+a)) + 0.15*(0.865/(1+a)) + 0.5*(0.865/(1+a)) + 0.006*a) * (1 - 0.002*cos(a)) * (1 - 0.0025*cos(2.5*a)) * (1 + 0.001*a) * (1 + cosh(0.001*a))^(2+0.0005*a) + 1e-6 }^(0.9478+0.00018*ln(1+a))\nExponent = (0.9478+0.00018*ln(1+a)) * (1 + 0.003*sin(2*a))\nf(x) = sign(z) * ( (f_adapt * T * extra)^(Exponent) )\nU = beta + gamma * f(x)\nP(accept = 1) = 1/(1 + exp(-U))\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"F1\": {\n      \"description\": \"Fixed component 1 of the core sum\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F2\": {\n      \"description\": \"Fixed component 2 of the core sum\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F3\": {\n      \"description\": \"Fixed component 3 of the core sum\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F4\": {\n      \"description\": \"Fixed component 4 of the core sum\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F5\": {\n      \"description\": \"Fixed component 5 of the core sum\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F6\": {\n      \"description\": \"Fixed component 6 of the core sum\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F7\": {\n      \"description\": \"Fixed component 7 of the core sum\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F8\": {\n      \"description\": \"Fixed component 8 of the core sum\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F9\": {\n      \"description\": \"Fixed component 9 of the core sum\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F10\": {\n      \"description\": \"Fixed component 10 of the core sum\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F11\": {\n      \"description\": \"Fixed component 11 of the core sum\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"\\u03b4\": {\n      \"description\": \"Small constant added to the core sum\",\n      \"range\": {\n        \"min\": -1,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"constant\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a\": {\n      \"description\": \"Core sum computed as the sum of fixed components F1 to F11 plus \\u03b4\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"calculation\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"z\": {\n      \"description\": \"Composite signal after multiplicative modulation of a\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"calculation\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"w\": {\n      \"description\": \"Weight computed as (phi - 0.5)/phi used in adaptive transformation\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"calculation\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_adapt\": {\n      \"description\": \"Adaptive transformation of z; for z \\u2265 0 uses a mixed power-log transform, and for z < 0 uses a quartic transform\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"conditional\",\n        \"parameters\": {\n          \"if_z_nonnegative\": \"1.002 * ( z^w * (ln(1+z))^(1-w) )\",\n          \"if_z_negative\": \"phi * (z^4)\"\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"T\": {\n      \"description\": \"Dynamic threshold computed from polynomial functions of a\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"polynomial\",\n        \"parameters\": {\n          \"terms\": \"a^2, a^3, a^4, a^5, a^6, a^7, a^8\"\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"extra\": {\n      \"description\": \"Extra harmonic modulation composite incorporating multiple trigonometric and softplus terms\",\n      \"range\": {\n        \"min\": \"0\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"complex_composite\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"Exponent\": {\n      \"description\": \"Final exponent modulating the transformed signal, incorporating additional sin modulation\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"calculation\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f(x)\": {\n      \"description\": \"Final transformed signal combining adaptive transformation, threshold, and extra modulation, with sign restoration\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"transformation\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base utility parameter capturing inherent bias\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": -10,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Scaling parameter for the transformed signal f(x)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Parameter governing the adaptive transformation weight and quartic transformation for negative z\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0.5,\n          \"max\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed as beta plus gamma scaled f(x)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"calculation\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"P(accept=1)\": {\n      \"description\": \"Probability of accepting the proposal determined by the logistic transformation of U\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"logistic\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "",
      "timestamp": 1743545959.519008
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['beta', 'gamma', 'phi']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                a = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11 + \u03b4)\nz = 1.08 * a * (1 + 0.012*sin(a + 0.045)) * (1 + 0.008*cos(a + 0.065)) * (1 + 0.005*sin(a + 0.115)) * (1 + 0.004*cos(a + 0.085)) * (1 + 0.006*sin(a + 0.035)*cos(a + 0.055)) * (1 + 0.003*sin(a + 0.03)*cos(a + 0.05))\nw = (phi - 0.5)/phi\nf_adapt = { 1.002 * ( z^w * (ln(1+z))^(1-w) )   if z \u2265 0;   phi*(z^4)   if z < 0 }\nT = 1 + 0.0005*a^2 + 0.00005*a^3 + 0.000005*a^4 + 0.0000001*a^5 + 0.00000001*a^6 + 0.000000001*a^7 + 0.0000000001*a^8 + 0.000001*a^3\nextra = { exp(-a/0.1) * (z/(1+|z|)) * (1 + 0.005*sin(1/(1+a))) * (1 + 0.002*cos(0.5*a)) * (1 + 0.003*cos(0.3*a)) * (1 + 0.003*cos(0.3*a)) * (1 + 0.004*cos(0.3*a)) * (1.07*softplus(0.865/(1+a)) + 0.15*(0.865/(1+a)) + 0.5*(0.865/(1+a)) + 0.006*a) * (1 - 0.002*cos(a)) * (1 - 0.0025*cos(2.5*a)) * (1 + 0.001*a) * (1 + cosh(0.001*a))^(2+0.0005*a) + 1e-6 }^(0.9478+0.00018*ln(1+a))\nExponent = (0.9478+0.00018*ln(1+a)) * (1 + 0.003*sin(2*a))\nf(x) = sign(z) * ( (f_adapt * T * extra)^(Exponent) )\nU = beta + gamma * f(x)\nP(accept = 1) = 1/(1 + exp(-U))\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"F1\": {\n      \"description\": \"Fixed component 1 of the core sum\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F2\": {\n      \"description\": \"Fixed component 2 of the core sum\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F3\": {\n      \"description\": \"Fixed component 3 of the core sum\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F4\": {\n      \"description\": \"Fixed component 4 of the core sum\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F5\": {\n      \"description\": \"Fixed component 5 of the core sum\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F6\": {\n      \"description\": \"Fixed component 6 of the core sum\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F7\": {\n      \"description\": \"Fixed component 7 of the core sum\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F8\": {\n      \"description\": \"Fixed component 8 of the core sum\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F9\": {\n      \"description\": \"Fixed component 9 of the core sum\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F10\": {\n      \"description\": \"Fixed component 10 of the core sum\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F11\": {\n      \"description\": \"Fixed component 11 of the core sum\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"\\u03b4\": {\n      \"description\": \"Small constant added to the core sum\",\n      \"range\": {\n        \"min\": -1,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"constant\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a\": {\n      \"description\": \"Core sum computed as the sum of fixed components F1 to F11 plus \\u03b4\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"calculation\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"z\": {\n      \"description\": \"Composite signal after multiplicative modulation of a\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"calculation\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"w\": {\n      \"description\": \"Weight computed as (phi - 0.5)/phi used in adaptive transformation\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"calculation\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_adapt\": {\n      \"description\": \"Adaptive transformation of z; for z \\u2265 0 uses a mixed power-log transform, and for z < 0 uses a quartic transform\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"conditional\",\n        \"parameters\": {\n          \"if_z_nonnegative\": \"1.002 * ( z^w * (ln(1+z))^(1-w) )\",\n          \"if_z_negative\": \"phi * (z^4)\"\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"T\": {\n      \"description\": \"Dynamic threshold computed from polynomial functions of a\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"polynomial\",\n        \"parameters\": {\n          \"terms\": \"a^2, a^3, a^4, a^5, a^6, a^7, a^8\"\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"extra\": {\n      \"description\": \"Extra harmonic modulation composite incorporating multiple trigonometric and softplus terms\",\n      \"range\": {\n        \"min\": \"0\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"complex_composite\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"Exponent\": {\n      \"description\": \"Final exponent modulating the transformed signal, incorporating additional sin modulation\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"calculation\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f(x)\": {\n      \"description\": \"Final transformed signal combining adaptive transformation, threshold, and extra modulation, with sign restoration\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"transformation\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base utility parameter capturing inherent bias\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": -10,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Scaling parameter for the transformed signal f(x)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Parameter governing the adaptive transformation weight and quartic transformation for negative z\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0.5,\n          \"max\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed as beta plus gamma scaled f(x)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"calculation\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"P(accept=1)\": {\n      \"description\": \"Probability of accepting the proposal determined by the logistic transformation of U\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"logistic\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, beta=0, gamma=1, phi=1):\n    model_predictions = []\n\n    def softplus(x):\n        return math.log(1 + math.exp(x))\n\n    for trial in trial_data:\n        F1 = trial.get(\"F1\", 0)\n        F2 = trial.get(\"F2\", 0)\n        F3 = trial.get(\"F3\", 0)\n        F4 = trial.get(\"F4\", 0)\n        F5 = trial.get(\"F5\", 0)\n        F6 = trial.get(\"F6\", 0)\n        F7 = trial.get(\"F7\", 0)\n        F8 = trial.get(\"F8\", 0)\n        F9 = trial.get(\"F9\", 0)\n        F10 = trial.get(\"F10\", 0)\n        F11 = trial.get(\"F11\", 0)\n        delta = 0  # Assuming delta is always 0\n\n        a = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11 + delta)\n        z = 1.08 * a * (1 + 0.012*math.sin(a + 0.045)) * (1 + 0.008*math.cos(a + 0.065)) * (1 + 0.005*math.sin(a + 0.115)) * (1 + 0.004*math.cos(a + 0.085)) * (1 + 0.006*math.sin(a + 0.035)*math.cos(a + 0.055)) * (1 + 0.003*math.sin(a + 0.03)*math.cos(a + 0.05))\n        w = (phi - 0.5)/phi\n\n        if z >= 0:\n            f_adapt = 1.002 * ( z**w * (math.log(1+z))**(1-w) )\n        else:\n            f_adapt = phi*(z**4)\n\n        T = 1 + 0.0005*a**2 + 0.00005*a**3 + 0.000005*a**4 + 0.0000001*a**5 + 0.00000001*a**6 + 0.000000001*a**7 + 0.0000000001*a**8 + 0.000001*a**3\n        \n        extra_base = math.exp(-a/0.1) * (z/(1+abs(z))) * (1 + 0.005*math.sin(1/(1+a))) * (1 + 0.002*math.cos(0.5*a)) * (1 + 0.003*math.cos(0.3*a)) * (1 + 0.003*math.cos(0.3*a)) * (1 + 0.004*math.cos(0.3*a)) * (1.07*softplus(0.865/(1+a)) + 0.15*(0.865/(1+a)) + 0.5*(0.865/(1+a)) + 0.006*a) * (1 - 0.002*math.cos(a)) * (1 - 0.0025*math.cos(2.5*a)) * (1 + 0.001*a) * (1 + math.cosh(0.001*a))**(2+0.0005*a) + 1e-6\n\n        Exponent = (0.9478+0.00018*math.log(1+a)) * (1 + 0.003*math.sin(2*a))\n\n        extra = extra_base**(0.9478+0.00018*math.log(1+a))\n\n        if z >= 0:\n          fx = math.copysign(1, z) * ( (f_adapt * T * extra)**(Exponent) )\n        else:\n          fx = math.copysign(1, z) * ( (f_adapt * T * extra)**(Exponent) )\n\n        U = beta + gamma * fx\n        P_accept = 1/(1 + math.exp(-U))\n\n        model_predictions.append(P_accept)\n\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '[{\"F1\": 1, \"F2\": 2, \"F3\": 3, \"F4\": 4, \"F5\": 5, \"F6\": 6, \"F7\": 7, \"F8\": 8, \"F9\": 9, \"F10\": 10, \"F11\": 11}, {\"F1\": 1, \"F2\": 2, \"F3\": 3, \"F4\": 4, \"F5\": 5, \"F6\": 6, \"F7\": 7, \"F8\": 8, \"F9\": 9, \"F10\": 10, \"F11\": 11}]'\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data, beta=0.5, gamma=0.5, phi=0.5)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n```",
      "timestamp": 1743545965.9494379
    }
  ],
  "learnable_parameters": {
    "beta": {
      "description": "Base utility parameter capturing inherent bias",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": -10,
          "max": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Scaling parameter for the transformed signal f(x)",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": 0,
          "max": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "phi": {
      "description": "Parameter governing the adaptive transformation weight and quartic transformation for negative z",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": 0.5,
          "max": 1.5
        }
      },
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "a = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11 + \u03b4)\nz = 1.08 * a * (1 + 0.012*sin(a + 0.045)) * (1 + 0.008*cos(a + 0.065)) * (1 + 0.005*sin(a + 0.115)) * (1 + 0.004*cos(a + 0.085)) * (1 + 0.006*sin(a + 0.035)*cos(a + 0.055)) * (1 + 0.003*sin(a + 0.03)*cos(a + 0.05))\nw = (phi - 0.5)/phi\nf_adapt = { 1.002 * ( z^w * (ln(1+z))^(1-w) )   if z \u2265 0;   phi*(z^4)   if z < 0 }\nT = 1 + 0.0005*a^2 + 0.00005*a^3 + 0.000005*a^4 + 0.0000001*a^5 + 0.00000001*a^6 + 0.000000001*a^7 + 0.0000000001*a^8 + 0.000001*a^3\nextra = { exp(-a/0.1) * (z/(1+|z|)) * (1 + 0.005*sin(1/(1+a))) * (1 + 0.002*cos(0.5*a)) * (1 + 0.003*cos(0.3*a)) * (1 + 0.003*cos(0.3*a)) * (1 + 0.004*cos(0.3*a)) * (1.07*softplus(0.865/(1+a)) + 0.15*(0.865/(1+a)) + 0.5*(0.865/(1+a)) + 0.006*a) * (1 - 0.002*cos(a)) * (1 - 0.0025*cos(2.5*a)) * (1 + 0.001*a) * (1 + cosh(0.001*a))^(2+0.0005*a) + 1e-6 }^(0.9478+0.00018*ln(1+a))\nExponent = (0.9478+0.00018*ln(1+a)) * (1 + 0.003*sin(2*a))\nf(x) = sign(z) * ( (f_adapt * T * extra)^(Exponent) )\nU = beta + gamma * f(x)\nP(accept = 1) = 1/(1 + exp(-U))",
  "variable_descriptions": {
    "F1": {
      "description": "Fixed component 1 of the core sum",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "data",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "F2": {
      "description": "Fixed component 2 of the core sum",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "data",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "F3": {
      "description": "Fixed component 3 of the core sum",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "data",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "F4": {
      "description": "Fixed component 4 of the core sum",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "data",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "F5": {
      "description": "Fixed component 5 of the core sum",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "data",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "F6": {
      "description": "Fixed component 6 of the core sum",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "data",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "F7": {
      "description": "Fixed component 7 of the core sum",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "data",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "F8": {
      "description": "Fixed component 8 of the core sum",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "data",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "F9": {
      "description": "Fixed component 9 of the core sum",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "data",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "F10": {
      "description": "Fixed component 10 of the core sum",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "data",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "F11": {
      "description": "Fixed component 11 of the core sum",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "data",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "\u03b4": {
      "description": "Small constant added to the core sum",
      "range": {
        "min": -1,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "constant",
        "parameters": {}
      },
      "learnable": false,
      "source": "calculated"
    },
    "a": {
      "description": "Core sum computed as the sum of fixed components F1 to F11 plus \u03b4",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": {
        "type": "calculation",
        "parameters": {}
      },
      "learnable": false,
      "source": "calculated"
    },
    "z": {
      "description": "Composite signal after multiplicative modulation of a",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": {
        "type": "calculation",
        "parameters": {}
      },
      "learnable": false,
      "source": "calculated"
    },
    "w": {
      "description": "Weight computed as (phi - 0.5)/phi used in adaptive transformation",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": {
        "type": "calculation",
        "parameters": {}
      },
      "learnable": false,
      "source": "calculated"
    },
    "f_adapt": {
      "description": "Adaptive transformation of z; for z \u2265 0 uses a mixed power-log transform, and for z < 0 uses a quartic transform",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": {
        "type": "conditional",
        "parameters": {
          "if_z_nonnegative": "1.002 * ( z^w * (ln(1+z))^(1-w) )",
          "if_z_negative": "phi * (z^4)"
        }
      },
      "learnable": false,
      "source": "calculated"
    },
    "T": {
      "description": "Dynamic threshold computed from polynomial functions of a",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": {
        "type": "polynomial",
        "parameters": {
          "terms": "a^2, a^3, a^4, a^5, a^6, a^7, a^8"
        }
      },
      "learnable": false,
      "source": "calculated"
    },
    "extra": {
      "description": "Extra harmonic modulation composite incorporating multiple trigonometric and softplus terms",
      "range": {
        "min": "0",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": {
        "type": "complex_composite",
        "parameters": {}
      },
      "learnable": false,
      "source": "calculated"
    },
    "Exponent": {
      "description": "Final exponent modulating the transformed signal, incorporating additional sin modulation",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": {
        "type": "calculation",
        "parameters": {}
      },
      "learnable": false,
      "source": "calculated"
    },
    "f(x)": {
      "description": "Final transformed signal combining adaptive transformation, threshold, and extra modulation, with sign restoration",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": {
        "type": "transformation",
        "parameters": {}
      },
      "learnable": false,
      "source": "calculated"
    },
    "beta": {
      "description": "Base utility parameter capturing inherent bias",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": -10,
          "max": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Scaling parameter for the transformed signal f(x)",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": 0,
          "max": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "phi": {
      "description": "Parameter governing the adaptive transformation weight and quartic transformation for negative z",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": 0.5,
          "max": 1.5
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "U": {
      "description": "Latent utility computed as beta plus gamma scaled f(x)",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": {
        "type": "calculation",
        "parameters": {}
      },
      "learnable": false,
      "source": "calculated"
    },
    "P(accept=1)": {
      "description": "Probability of accepting the proposal determined by the logistic transformation of U",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "logistic",
        "parameters": {}
      },
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "A highly non\u2010linear logistic choice model that computes a core sum \u201ca\u201d from fixed components, modulates it through multiple multiplicative trigonometric transformations to produce a composite signal \u201cz\u201d, and then applies an adaptive transformation that is power\u2010log based for positive z and quartic for negative z. This result is further modulated by a dynamic threshold and a complex extra harmonic composite before being raised to a final exponent that is itself modulated by sin(2a). The latent utility U is then computed as beta plus gamma times the transformed signal, and converted to a choice probability via a logistic function. Three learnable parameters (beta, gamma, phi) with fixed bounds control bias, scaling, and nonlinearity respectively.",
  "target_variable": "accept",
  "full_reasoning": "<MODEL>\na = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11 + \u03b4)\nz = 1.08 * a * (1 + 0.012*sin(a + 0.045)) * (1 + 0.008*cos(a + 0.065)) * (1 + 0.005*sin(a + 0.115)) * (1 + 0.004*cos(a + 0.085)) * (1 + 0.006*sin(a + 0.035)*cos(a + 0.055)) * (1 + 0.003*sin(a + 0.03)*cos(a + 0.05))\nw = (phi - 0.5)/phi\nf_adapt = { 1.002 * ( z^w * (ln(1+z))^(1-w) )   if z \u2265 0;   phi*(z^4)   if z < 0 }\nT = 1 + 0.0005*a^2 + 0.00005*a^3 + 0.000005*a^4 + 0.0000001*a^5 + 0.00000001*a^6 + 0.000000001*a^7 + 0.0000000001*a^8 + 0.000001*a^3\nextra = { exp(-a/0.1) * (z/(1+|z|)) * (1 + 0.005*sin(1/(1+a))) * (1 + 0.002*cos(0.5*a)) * (1 + 0.003*cos(0.3*a)) * (1 + 0.003*cos(0.3*a)) * (1 + 0.004*cos(0.3*a)) * (1.07*softplus(0.865/(1+a)) + 0.15*(0.865/(1+a)) + 0.5*(0.865/(1+a)) + 0.006*a) * (1 - 0.002*cos(a)) * (1 - 0.0025*cos(2.5*a)) * (1 + 0.001*a) * (1 + cosh(0.001*a))^(2+0.0005*a) + 1e-6 }^(0.9478+0.00018*ln(1+a))\nExponent = (0.9478+0.00018*ln(1+a)) * (1 + 0.003*sin(2*a))\nf(x) = sign(z) * ( (f_adapt * T * extra)^(Exponent) )\nU = beta + gamma * f(x)\nP(accept = 1) = 1/(1 + exp(-U))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"F1\": {\n      \"description\": \"Fixed component 1 of the core sum\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F2\": {\n      \"description\": \"Fixed component 2 of the core sum\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F3\": {\n      \"description\": \"Fixed component 3 of the core sum\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F4\": {\n      \"description\": \"Fixed component 4 of the core sum\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F5\": {\n      \"description\": \"Fixed component 5 of the core sum\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F6\": {\n      \"description\": \"Fixed component 6 of the core sum\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F7\": {\n      \"description\": \"Fixed component 7 of the core sum\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F8\": {\n      \"description\": \"Fixed component 8 of the core sum\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F9\": {\n      \"description\": \"Fixed component 9 of the core sum\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F10\": {\n      \"description\": \"Fixed component 10 of the core sum\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F11\": {\n      \"description\": \"Fixed component 11 of the core sum\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"\u03b4\": {\n      \"description\": \"Small constant added to the core sum\",\n      \"range\": {\n        \"min\": -1,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"constant\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a\": {\n      \"description\": \"Core sum computed as the sum of fixed components F1 to F11 plus \u03b4\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"calculation\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"z\": {\n      \"description\": \"Composite signal after multiplicative modulation of a\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"calculation\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"w\": {\n      \"description\": \"Weight computed as (phi - 0.5)/phi used in adaptive transformation\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"calculation\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_adapt\": {\n      \"description\": \"Adaptive transformation of z; for z \u2265 0 uses a mixed power-log transform, and for z < 0 uses a quartic transform\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"conditional\",\n        \"parameters\": {\n          \"if_z_nonnegative\": \"1.002 * ( z^w * (ln(1+z))^(1-w) )\",\n          \"if_z_negative\": \"phi * (z^4)\"\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"T\": {\n      \"description\": \"Dynamic threshold computed from polynomial functions of a\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"polynomial\",\n        \"parameters\": {\n          \"terms\": \"a^2, a^3, a^4, a^5, a^6, a^7, a^8\"\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"extra\": {\n      \"description\": \"Extra harmonic modulation composite incorporating multiple trigonometric and softplus terms\",\n      \"range\": {\n        \"min\": \"0\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"complex_composite\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"Exponent\": {\n      \"description\": \"Final exponent modulating the transformed signal, incorporating additional sin modulation\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"calculation\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f(x)\": {\n      \"description\": \"Final transformed signal combining adaptive transformation, threshold, and extra modulation, with sign restoration\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"transformation\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base utility parameter capturing inherent bias\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": -10,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Scaling parameter for the transformed signal f(x)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Parameter governing the adaptive transformation weight and quartic transformation for negative z\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0.5,\n          \"max\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed as beta plus gamma scaled f(x)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"calculation\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"P(accept=1)\": {\n      \"description\": \"Probability of accepting the proposal determined by the logistic transformation of U\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"logistic\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA highly non\u2010linear logistic choice model that computes a core sum \u201ca\u201d from fixed components, modulates it through multiple multiplicative trigonometric transformations to produce a composite signal \u201cz\u201d, and then applies an adaptive transformation that is power\u2010log based for positive z and quartic for negative z. This result is further modulated by a dynamic threshold and a complex extra harmonic composite before being raised to a final exponent that is itself modulated by sin(2a). The latent utility U is then computed as beta plus gamma times the transformed signal, and converted to a choice probability via a logistic function. Three learnable parameters (beta, gamma, phi) with fixed bounds control bias, scaling, and nonlinearity respectively.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: a = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11 + \u03b4)\nz = 1.08 * a * (1 + 0.012*sin(a + 0.045)) * (1 + 0.008*cos(a + 0.065)) * (1 + 0.005*sin(a + 0.115)) * (1 + 0.004*cos(a + 0.085)) * (1 + 0.006*sin(a + 0.035)*cos(a + 0.055)) * (1 + 0.003*sin(a + 0.03)*cos(a + 0.05))\nw = (phi - 0.5)/phi\nf_adapt = { 1.002 * ( z^w * (ln(1+z))^(1-w) )   if z \u2265 0;   phi*(z^4)   if z < 0 }\nT = 1 + 0.0005*a^2 + 0.00005*a^3 + 0.000005*a^4 + 0.0000001*a^5 + 0.00000001*a^6 + 0.000000001*a^7 + 0.0000000001*a^8 + 0.000001*a^3\nextra = { exp(-a/0.1) * (z/(1+|z|)) * (1 + 0.005*sin(1/(1+a))) * (1 + 0.002*cos(0.5*a)) * (1 + 0.003*cos(0.3*a)) * (1 + 0.003*cos(0.3*a)) * (1 + 0.004*cos(0.3*a)) * (1.07*softplus(0.865/(1+a)) + 0.15*(0.865/(1+a)) + 0.5*(0.865/(1+a)) + 0.006*a) * (1 - 0.002*cos(a)) * (1 - 0.0025*cos(2.5*a)) * (1 + 0.001*a) * (1 + cosh(0.001*a))^(2+0.0005*a) + 1e-6 }^(0.9478+0.00018*ln(1+a))\nExponent = (0.9478+0.00018*ln(1+a)) * (1 + 0.003*sin(2*a))\nf(x) = sign(z) * ( (f_adapt * T * extra)^(Exponent) )\nU = beta + gamma * f(x)\nP(accept = 1) = 1/(1 + exp(-U))\nSummary: A highly non\u2010linear logistic choice model that computes a core sum \u201ca\u201d from fixed components, modulates it through multiple multiplicative trigonometric transformations to produce a composite signal \u201cz\u201d, and then applies an adaptive transformation that is power\u2010log based for positive z and quartic for negative z. This result is further modulated by a dynamic threshold and a complex extra harmonic composite before being raised to a final exponent that is itself modulated by sin(2a). The latent utility U is then computed as beta plus gamma times the transformed signal, and converted to a choice probability via a logistic function. Three learnable parameters (beta, gamma, phi) with fixed bounds control bias, scaling, and nonlinearity respectively.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [
    {
      "retry_number": 0,
      "error": "Traceback (most recent call last):\n  File \"<string>\", line 67, in <module>\n    results = simulate_model(data, beta=0.5, gamma=0.5, phi=0.5)\n  File \"<string>\", line 39, in simulate_model\n    extra_base = math.exp(-a/0.1) * (z/(1+abs(z))) * (1 + 0.005*math.sin(1/(1+a))) * (1 + 0.002*math.cos(0.5*a)) * (1 + 0.003*math.cos(0.3*a)) * (1 + 0.003*math.cos(0.3*a)) * (1 + 0.004*math.cos(0.3*a)) * (1.07*softplus(0.865/(1+a)) + 0.15*(0.865/(1+a)) + 0.5*(0.865/(1+a)) + 0.006*a) * (1 - 0.002*math.cos(a)) * (1 - 0.0025*math.cos(2.5*a)) * (1 + 0.001*a) * (1 + math.cosh(0.001*a))**(2+0.0005*a) + 1e-6\n                                                                                                                                                                                                                   ^^^^^^^^\nNameError: name 'softplus' is not defined\n",
      "timestamp": 1743545958.877085
    },
    {
      "retry_number": 1,
      "error": "Could not extract simulate_model function from generated code",
      "timestamp": 1743545959.519053
    }
  ],
  "current_retry": 2,
  "simulation_error": "Could not extract simulate_model function from generated code",
  "simulation_code": "def simulate_model(trial_data, beta=0, gamma=1, phi=1):\n    model_predictions = []\n\n    def softplus(x):\n        return math.log(1 + math.exp(x))\n\n    for trial in trial_data:\n        F1 = trial.get(\"F1\", 0)\n        F2 = trial.get(\"F2\", 0)\n        F3 = trial.get(\"F3\", 0)\n        F4 = trial.get(\"F4\", 0)\n        F5 = trial.get(\"F5\", 0)\n        F6 = trial.get(\"F6\", 0)\n        F7 = trial.get(\"F7\", 0)\n        F8 = trial.get(\"F8\", 0)\n        F9 = trial.get(\"F9\", 0)\n        F10 = trial.get(\"F10\", 0)\n        F11 = trial.get(\"F11\", 0)\n        delta = 0  # Assuming delta is always 0\n\n        a = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11 + delta)\n        z = 1.08 * a * (1 + 0.012*math.sin(a + 0.045)) * (1 + 0.008*math.cos(a + 0.065)) * (1 + 0.005*math.sin(a + 0.115)) * (1 + 0.004*math.cos(a + 0.085)) * (1 + 0.006*math.sin(a + 0.035)*math.cos(a + 0.055)) * (1 + 0.003*math.sin(a + 0.03)*math.cos(a + 0.05))\n        w = (phi - 0.5)/phi\n\n        if z >= 0:\n            f_adapt = 1.002 * ( z**w * (math.log(1+z))**(1-w) )\n        else:\n            f_adapt = phi*(z**4)\n\n        T = 1 + 0.0005*a**2 + 0.00005*a**3 + 0.000005*a**4 + 0.0000001*a**5 + 0.00000001*a**6 + 0.000000001*a**7 + 0.0000000001*a**8 + 0.000001*a**3\n        \n        extra_base = math.exp(-a/0.1) * (z/(1+abs(z))) * (1 + 0.005*math.sin(1/(1+a))) * (1 + 0.002*math.cos(0.5*a)) * (1 + 0.003*math.cos(0.3*a)) * (1 + 0.003*math.cos(0.3*a)) * (1 + 0.004*math.cos(0.3*a)) * (1.07*softplus(0.865/(1+a)) + 0.15*(0.865/(1+a)) + 0.5*(0.865/(1+a)) + 0.006*a) * (1 - 0.002*math.cos(a)) * (1 - 0.0025*math.cos(2.5*a)) * (1 + 0.001*a) * (1 + math.cosh(0.001*a))**(2+0.0005*a) + 1e-6\n\n        Exponent = (0.9478+0.00018*math.log(1+a)) * (1 + 0.003*math.sin(2*a))\n\n        extra = extra_base**(0.9478+0.00018*math.log(1+a))\n\n        if z >= 0:\n          fx = math.copysign(1, z) * ( (f_adapt * T * extra)**(Exponent) )\n        else:\n          fx = math.copysign(1, z) * ( (f_adapt * T * extra)**(Exponent) )\n\n        U = beta + gamma * fx\n        P_accept = 1/(1 + math.exp(-U))\n\n        model_predictions.append(P_accept)\n\n    return model_predictions",
  "total_retries": 2,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.5604395604395604,
  "fitting_results": [
    {
      "beta": -10.0,
      "gamma": 2.9368211063211582,
      "phi": 0.6869356886389136,
      "success": true,
      "log_likelihood": -24.953979470262787,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -6.291872179182375,
      "gamma": 6.84869946685842,
      "phi": 1.183301360722736,
      "success": true,
      "log_likelihood": -24.95331385875856,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.0783104592940136,
      "gamma": 8.472730405234293,
      "phi": 1.4826323369360148,
      "success": true,
      "log_likelihood": -24.897714324136167,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 3.6944776544245883,
      "phi": 1.441730891870157,
      "success": true,
      "log_likelihood": -24.953434695838467,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 5.270530656607628,
      "phi": 1.4023847213629712,
      "success": true,
      "log_likelihood": -24.953389297969775,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.28409148761373376,
      "gamma": 9.869167445245331,
      "phi": 0.9815098558079483,
      "success": true,
      "log_likelihood": -23.545973163921442,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 5.578536206417864,
      "phi": 0.7818168615748785,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.8148801259632935,
      "gamma": 3.0277179135204344,
      "phi": 1.2791704589475337,
      "success": true,
      "log_likelihood": -22.91451005141974,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 6.9645581579341815,
      "phi": 0.7008155343109063,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 4.077388504086042,
      "phi": 1.2271252752351665,
      "success": true,
      "log_likelihood": -24.95348009370716,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 2.3685155683205883,
      "phi": 0.7432992993036789,
      "success": true,
      "log_likelihood": -24.95338929796977,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 6.275704156038152,
      "phi": 1.040158583297572,
      "success": true,
      "log_likelihood": -24.953934072394095,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 7.140517405177462,
      "phi": 1.271783412642376,
      "success": true,
      "log_likelihood": -24.953434695838467,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.7975499235967154,
      "phi": 1.3065508655404627,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 5.559990070231134,
      "phi": 0.5452015203475953,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 2.841393856641752,
      "phi": 0.5349842609808884,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 2.2173209542362815,
      "phi": 1.4912229161753627,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 9.74593252450325,
      "phi": 1.3225903733333317,
      "success": true,
      "log_likelihood": -16.27763329973089,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 2.251644542147911,
      "phi": 0.7983641447925125,
      "success": true,
      "log_likelihood": -15.27767869783462,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 4.403983701545529,
      "phi": 1.2009735975046325,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -7.3415971824448585,
      "gamma": 3.2125474401080223,
      "phi": 0.7587033639541197,
      "success": true,
      "log_likelihood": -24.952005190074974,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 5.875075395121536,
      "phi": 0.6921036444880335,
      "success": true,
      "log_likelihood": -16.27763329973089,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -9.406901622009624,
      "gamma": 2.835567931269012,
      "phi": 0.9795159828433323,
      "success": true,
      "log_likelihood": -24.953709265085863,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.078774296445846,
      "gamma": 5.14354755881394,
      "phi": 0.9383113483350328,
      "success": true,
      "log_likelihood": -24.897714334700634,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -9.999999999999998,
      "gamma": 3.2217812116242452,
      "phi": 0.5241852023380706,
      "success": true,
      "log_likelihood": -24.953298502232386,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.6790575800870134,
      "gamma": 0.01355716351636227,
      "phi": 0.9318678885277524,
      "success": true,
      "log_likelihood": -24.45095756849631,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.247442991827471,
      "gamma": 4.542854192519573,
      "phi": 1.450993785408738,
      "success": true,
      "log_likelihood": -24.730616750304616,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 4.000788625409147,
      "phi": 0.7989022157367024,
      "success": true,
      "log_likelihood": -24.953661685181935,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.2009919256673387,
      "phi": 0.6381316384004041,
      "success": true,
      "log_likelihood": -15.27767869783462,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 1.6726145733256859,
      "phi": 0.5658856486909895,
      "success": true,
      "log_likelihood": -19.2774971054197,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 4.1816615390561465,
      "phi": 1.1383439810520763,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 3.8217898960632657,
      "phi": 1.250438211666657,
      "success": true,
      "log_likelihood": -24.953979470262787,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 2.2118224670403497,
      "phi": 0.6424843645736555,
      "success": true,
      "log_likelihood": -24.953434695838464,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 5.7277363489746955,
      "phi": 0.7896986065884555,
      "success": true,
      "log_likelihood": -24.953480093707164,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 4.452790904965066,
      "phi": 1.0115825547339954,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.2857776426920409,
      "gamma": 8.775396468122768,
      "phi": 0.9114873753921476,
      "success": true,
      "log_likelihood": -23.545973886839782,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.5229981703779263,
      "gamma": 3.834351670229401,
      "phi": 1.4050511660784388,
      "success": true,
      "log_likelihood": -22.157938154736676,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 8.865956414928801,
      "phi": 0.6386966840300601,
      "success": true,
      "log_likelihood": -24.953298502232386,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.8148658308609985,
      "gamma": 6.0079651898858755,
      "phi": 0.5747669747034186,
      "success": true,
      "log_likelihood": -22.91451005142577,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 9.999999999999998,
      "gamma": 3.571026291756593,
      "phi": 0.7434201245298755,
      "success": true,
      "log_likelihood": -14.277724095938346,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.19266011490124757,
      "gamma": 9.257519739614999,
      "phi": 0.8203946793515318,
      "success": true,
      "log_likelihood": -24.056945188736073,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 6.813992597438242,
      "phi": 1.3573341929183247,
      "success": true,
      "log_likelihood": -24.95375248091932,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 4.442426700515053,
      "phi": 1.328229115651606,
      "success": true,
      "log_likelihood": -12.277814892145805,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.247334007344619,
      "gamma": 3.9960021843802798,
      "phi": 1.4609415791207163,
      "success": true,
      "log_likelihood": -24.7306167518124,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.192654556280749,
      "gamma": 9.769191821667187,
      "phi": 1.116512304155961,
      "success": true,
      "log_likelihood": -24.05694518872391,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 3.064458671803697,
      "gamma": 9.336212288979894,
      "phi": 1.2258503063895858,
      "success": true,
      "log_likelihood": -21.2703209014563,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.076527873169108,
      "gamma": 7.124728900711503,
      "phi": 1.206777912099411,
      "success": true,
      "log_likelihood": -24.89771445925553,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 1.675574822645679,
      "phi": 0.5289146222288003,
      "success": true,
      "log_likelihood": -24.95348009370716,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 4.176365717489573,
      "phi": 1.3893203691042135,
      "success": true,
      "log_likelihood": -24.953434695838464,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.0782800163498805,
      "gamma": 8.642986605195661,
      "phi": 1.3611331416612473,
      "success": true,
      "log_likelihood": -24.897714324102196,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.5243603891714543,
      "gamma": 7.352560080719154,
      "phi": 1.2080568200355162,
      "success": true,
      "log_likelihood": -22.157938306166166,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 1.6257486496117812,
      "phi": 1.4719634811992552,
      "success": true,
      "log_likelihood": -24.9538886745254,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.0811974489086458,
      "gamma": 4.719674046993138,
      "phi": 0.6279809694785091,
      "success": true,
      "log_likelihood": -24.89771469575705,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.6790534710516086,
      "gamma": 6.892777972185734,
      "phi": 1.0419393124550296,
      "success": true,
      "log_likelihood": -24.45095756849548,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 2.3582032294573985,
      "phi": 1.2125320319023838,
      "success": true,
      "log_likelihood": -24.95348009370716,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 8.99551757330517,
      "phi": 0.7806353980300311,
      "success": true,
      "log_likelihood": -24.953570889444546,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 6.731092389452787,
      "phi": 0.9418222450840219,
      "success": true,
      "log_likelihood": -24.953661685181938,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 6.085237649783684,
      "phi": 0.9956183946499628,
      "success": true,
      "log_likelihood": -15.27767869783462,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 5.796463141484325,
      "phi": 0.5357520611075454,
      "success": true,
      "log_likelihood": -24.953934072394095,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.2909793660318827,
      "phi": 1.100980038605628,
      "success": true,
      "log_likelihood": -18.27754250352343,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.19263237697289567,
      "gamma": 4.6499861287685835,
      "phi": 0.9280081576726111,
      "success": true,
      "log_likelihood": -24.05694518883681,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -6.391262056696293,
      "gamma": 3.7401261984066556,
      "phi": 1.4840519933900014,
      "success": true,
      "log_likelihood": -24.953311093177735,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.2777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 8.521039246859875,
      "phi": 0.7504795894553935,
      "success": true,
      "log_likelihood": -24.953979470262787,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 7.991146587436945,
      "phi": 0.8105171374209431,
      "success": true,
      "log_likelihood": -24.95338929796977,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -8.739046650154174,
      "gamma": 3.5379483342948745,
      "phi": 1.2644289862471012,
      "success": true,
      "log_likelihood": -24.95490041727822,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -9.857814540493882,
      "gamma": 5.1627932894344735,
      "phi": 0.9464099943552757,
      "success": true,
      "log_likelihood": -24.953193837552124,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 8.080661257919967,
      "phi": 0.7141513947830744,
      "success": true,
      "log_likelihood": -14.277724095938348,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 7.86971022864318,
      "phi": 0.8478773672350984,
      "success": true,
      "log_likelihood": -16.277633299730887,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.2474548208315497,
      "gamma": 1.9497328793732183,
      "phi": 1.2861255879332072,
      "success": true,
      "log_likelihood": -24.730616750331844,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 9.999999999999998,
      "gamma": 5.0013130139303685,
      "phi": 0.5505634105410766,
      "success": true,
      "log_likelihood": -14.27772409593835,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 8.585505054622066,
      "phi": 1.3280643399820256,
      "success": true,
      "log_likelihood": -24.953934072394095,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 5.884337758054128,
      "phi": 0.5867820491061568,
      "success": true,
      "log_likelihood": -24.9538886745254,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.0782965863494924,
      "gamma": 6.305339593439393,
      "phi": 0.5289257745970559,
      "success": true,
      "log_likelihood": -24.897714324110602,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 7.815069296450102,
      "phi": 0.6854088889178677,
      "success": true,
      "log_likelihood": -19.2774971054197,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 6.10205956384521,
      "phi": 0.9941178879778254,
      "success": true,
      "log_likelihood": -24.953298502232386,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.5232544724414903,
      "gamma": 1.710477830614553,
      "phi": 1.39365413220467,
      "success": true,
      "log_likelihood": -22.15793815986772,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 6.927647737942869,
      "phi": 1.1302683160951326,
      "success": true,
      "log_likelihood": -13.277769494042078,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -9.999999999999998,
      "gamma": 7.476443381639781,
      "phi": 1.3967331262166023,
      "success": true,
      "log_likelihood": -24.95402486813148,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.19266527320812854,
      "gamma": 6.800232308828555,
      "phi": 1.3720714609793128,
      "success": true,
      "log_likelihood": -24.05694518876186,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 2.7906518151247472,
      "phi": 1.0032656228412575,
      "success": true,
      "log_likelihood": -24.953979470262784,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.077374760341849,
      "gamma": 9.777784368302482,
      "phi": 0.6407057066325416,
      "success": true,
      "log_likelihood": -24.897714360251157,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 3.981689016697892,
      "phi": 0.5542786080275213,
      "success": true,
      "log_likelihood": -14.277724095938348,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 3.744647976268889,
      "phi": 0.8226465802868466,
      "success": true,
      "log_likelihood": -24.953934072394095,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -9.237279113804194,
      "gamma": 7.094423778028602,
      "phi": 1.0620914912981934,
      "success": true,
      "log_likelihood": -24.953298535589404,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.1926483214329597,
      "gamma": 3.9829316783275406,
      "phi": 0.7229952998469821,
      "success": true,
      "log_likelihood": -24.056945188729564,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 2.3119766937254305,
      "phi": 0.9905388173823688,
      "success": true,
      "log_likelihood": -24.95393407239409,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.5230797043959565,
      "gamma": 8.30075383005881,
      "phi": 1.1266708385046078,
      "success": true,
      "log_likelihood": -22.15793815519357,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 4.868706458783668,
      "phi": 0.7896694222903419,
      "success": true,
      "log_likelihood": -24.95375248091932,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 1.4511368151759219,
      "phi": 1.3340508996095792,
      "success": true,
      "log_likelihood": -13.277769494042078,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -9.999999999999998,
      "gamma": 6.763448617249296,
      "phi": 0.9435387224529691,
      "success": true,
      "log_likelihood": -24.953343900101082,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.5225376379513589,
      "gamma": 7.628508983202287,
      "phi": 1.3227074590011325,
      "success": true,
      "log_likelihood": -22.15793817275723,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "beta": {
        "r": 0.7741600246376908,
        "p": 3.5515476970661905e-21
      },
      "gamma": {
        "r": -0.024862909764371638,
        "p": 0.8060374403214354
      },
      "phi": {
        "r": -0.004541229724124169,
        "p": 0.9642335848963084
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 53.93248044351939,
  "bic_results": {
    "average_bic": 53.93248044351939,
    "individual_bics": [
      60.6585157558939,
      60.65718453288545,
      60.54598546364066,
      60.65742620704526,
      60.65733541130788,
      57.84250314321122,
      33.3062773958674,
      56.579576918207806,
      33.3062773958674,
      60.657517002782654,
      60.65733541130787,
      60.65842496015652,
      60.65742620704526,
      33.3062773958674,
      33.3062773958674,
      33.3062773958674,
      33.3062773958674,
      43.305823414830115,
      41.305914211037575,
      33.3062773958674,
      60.65456719551828,
      43.305823414830115,
      60.65797534554005,
      60.5459854847696,
      60.6571538198331,
      59.652471952360955,
      60.21179031597757,
      60.657880185732196,
      41.305914211037575,
      49.30555102620774,
      33.3062773958674,
      60.6585157558939,
      60.65742620704526,
      60.657517002782654,
      33.3062773958674,
      57.84250458904789,
      55.06643312484168,
      60.6571538198331,
      56.57957691821987,
      39.30600500724502,
      58.86444719284047,
      60.65806177720697,
      35.30618659965994,
      60.211790318993124,
      58.864447192816144,
      53.29119861828093,
      60.54598573387939,
      60.657517002782654,
      60.65742620704526,
      60.54598546357272,
      55.06643342770066,
      60.65833416441913,
      60.54598620688243,
      59.65247195235929,
      60.657517002782654,
      60.657698594257425,
      60.65788018573221,
      41.305914211037575,
      60.65842496015652,
      47.3056418224152,
      58.864447193041954,
      60.657179001723804,
      60.6585157558939,
      60.65733541130787,
      60.66035764992478,
      60.65694449047258,
      39.30600500724503,
      43.3058234148301,
      60.21179031603202,
      39.306005007245034,
      60.65842496015652,
      60.65833416441913,
      60.54598546358953,
      49.30555102620774,
      60.6571538198331,
      55.066433135103765,
      37.306095803452486,
      60.658606551631294,
      58.864447192892044,
      60.6585157558939,
      60.54598553587064,
      39.30600500724503,
      60.65842496015652,
      60.657153886547135,
      58.864447192827456,
      60.65842496015651,
      55.06643312575547,
      60.65806177720697,
      37.306095803452486,
      60.65724461557049,
      55.066433160882795
    ],
    "group_enabled": false,
    "group_bics": null,
    "num_parameters": 3,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- beta: r = 0.774\n- gamma: r = -0.025\n- phi: r = -0.005",
  "previous_models": [
    "Specification: a = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11 + \u03b4)\nz = 1.08 * a * (1 + 0.012*sin(a + 0.045)) * (1 + 0.008*cos(a + 0.065)) * (1 + 0.005*sin(a + 0.115)) * (1 + 0.004*cos(a + 0.085)) * (1 + 0.006*sin(a + 0.035)*cos(a + 0.055)) * (1 + 0.003*sin(a + 0.03)*cos(a + 0.05))\nw = (phi - 0.5)/phi\nf_adapt = { 1.002 * ( z^w * (ln(1+z))^(1-w) )   if z \u2265 0;   phi*(z^4)   if z < 0 }\nT = 1 + 0.0005*a^2 + 0.00005*a^3 + 0.000005*a^4 + 0.0000001*a^5 + 0.00000001*a^6 + 0.000000001*a^7 + 0.0000000001*a^8 + 0.000001*a^3\nextra = { exp(-a/0.1) * (z/(1+|z|)) * (1 + 0.005*sin(1/(1+a))) * (1 + 0.002*cos(0.5*a)) * (1 + 0.003*cos(0.3*a)) * (1 + 0.003*cos(0.3*a)) * (1 + 0.004*cos(0.3*a)) * (1.07*softplus(0.865/(1+a)) + 0.15*(0.865/(1+a)) + 0.5*(0.865/(1+a)) + 0.006*a) * (1 - 0.002*cos(a)) * (1 - 0.0025*cos(2.5*a)) * (1 + 0.001*a) * (1 + cosh(0.001*a))^(2+0.0005*a) + 1e-6 }^(0.9478+0.00018*ln(1+a))\nExponent = (0.9478+0.00018*ln(1+a)) * (1 + 0.003*sin(2*a))\nf(x) = sign(z) * ( (f_adapt * T * extra)^(Exponent) )\nU = beta + gamma * f(x)\nP(accept = 1) = 1/(1 + exp(-U))\nSummary: A highly non\u2010linear logistic choice model that computes a core sum \u201ca\u201d from fixed components, modulates it through multiple multiplicative trigonometric transformations to produce a composite signal \u201cz\u201d, and then applies an adaptive transformation that is power\u2010log based for positive z and quartic for negative z. This result is further modulated by a dynamic threshold and a complex extra harmonic composite before being raised to a final exponent that is itself modulated by sin(2a). The latent utility U is then computed as beta plus gamma times the transformed signal, and converted to a choice probability via a logistic function. Three learnable parameters (beta, gamma, phi) with fixed bounds control bias, scaling, and nonlinearity respectively.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 53.93248044351939\nOverall Accuracy: 0.5604\n\nParameter Recovery:\n- beta: r = 0.774\n- gamma: r = -0.025\n- phi: r = -0.005"
  ]
}