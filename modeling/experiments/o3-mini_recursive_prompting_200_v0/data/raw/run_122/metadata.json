{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "<think>\nFor run 122, emphasize further capturing subtle curvature and extreme rejection behavior. Retain the core sum \u201ca\u201d (F1\u2013F11 plus \u03b4) and standard modulation to produce z. For the adaptive transformation, when z \u2265 0, continue to use the power\u2013log blend (use 1.002\u00d7[z^w\u00d7(ln(1+z))^(1\u2013w)]). For z < 0, switch to a 7th\u2010power transformation with a small constant shift \u0394_shift inside the base (i.e. use phi\u00d7((z+\u0394_shift)^7)); this should help capture deep negative utilities. In the extra composite, add a factor [1 + tanh(0.05\u00d7a)] to better capture extreme curvature effects. Furthermore, augment the final exponent by multiplying by an extra sine\u2013cosine modulation term [1 + 0.003\u00d7sin(2\u00d7a) + 0.001\u00d7cos(3\u00d7a) + 0.0025\u00d7cos(0.7\u00d7a)]. Continue to use an 8th\u2010order polynomial for the dynamic threshold T. Also, remind the model that exploring alternative nonlinear functions (e.g., additional tanh or softsign corrections) within the extra composite can be beneficial. Ensure that exactly three learnable parameters are used with bounds: beta \u2208 [\u201310, 10], gamma \u2208 [0, 10], and phi \u2208 [0.5, 1.5].\n</think>\n\nNew Instructions for Run 122:\n\n1. Compute the core sum \u201ca\u201d as the sum of fixed components F1 through F11 plus a small constant \u03b4.\n2. Compute a_mod = a \u00d7 [1 + 0.012 \u00d7 sin(a + 0.045)] and then scale by 1.08.\n3. Sequentially modulate a_mod with:\n\u2003\u2003\u2022 [1 + 0.008 \u00d7 cos(a + 0.065)]\n\u2003\u2003\u2022 [1 + 0.005 \u00d7 sin(a + 0.115)]\n\u2003\u2003\u2022 [1 + 0.004 \u00d7 cos(a + 0.085)]\n\u2003\u2003\u2022 [1 + 0.006 \u00d7 (sin(a + 0.035) \u00d7 cos(a + 0.055))]\n\u2003\u2003\u2022 [1 + 0.003 \u00d7 (sin(a + 0.03) \u00d7 cos(a + 0.05))]\n\u2003Define the product as z.\n4. Define the weight w = (phi \u2013 0.5) / phi.\n\u2003\u2003\u2022 For z \u2265 0, set f_adapt(z) = 1.002 \u00d7 [z^(w) \u00d7 (ln(1+z))^(1\u2013w)].\n\u2003\u2003\u2022 For z < 0, set f_adapt(z) = phi \u00d7 ((z + \u0394_shift)^7), where \u0394_shift is a small constant offset.\n5. Define the dynamic threshold T as an 8th\u2013order polynomial in a:\n\u2003\u2003T = 1 + 0.0005\u00d7a\u00b2 + 0.00005\u00d7a\u00b3 + 0.000005\u00d7a\u2074 + 0.0000001\u00d7a\u2075 + 0.00000001\u00d7a\u2076 + 0.000000001\u00d7a\u2077 + 0.0000000001\u00d7a\u2078 + 0.000001\u00d7a\u00b3.\n6. Define the extra blending composite extra as:\n\u2003\u2003extra = { exp(\u2013a/0.1) \u00d7 [z/(1+|z|)] \u00d7 [1 + 0.005\u00d7sin(1/(1+a))] \u00d7 [1 + 0.002\u00d7cos(0.5\u00d7a)] \u00d7 ([1 + 0.003\u00d7cos(0.3\u00d7a)]\u00b2) \u00d7 ([1 + 0.004\u00d7cos(0.3\u00d7a)]\u00b2) \u00d7 [1 + 0.0025\u00d7cos(0.7\u00d7a)] \u00d7 [1 + tanh(0.05\u00d7a)] \u00d7 [1.07\u00d7softplus(0.865/(1+a)) + 0.15\u00d7(0.865/(1+a)) + 0.5\u00d7(0.865/(1+a)) + 0.006\u00d7a] \u00d7 [1 \u2013 0.002\u00d7cos(a)] \u00d7 [1 \u2013 0.0025\u00d7cos(2.5\u00d7a)] \u00d7 [1 + 0.001\u00d7a] \u00d7 [1 + cosh(0.001\u00d7a)]^(2+0.0005\u00d7a) + 1e\u20136 }^(0.9478 + 0.00018\u00d7ln(1+a)).\n7. Define the final exponent as:\n\u2003\u2003Exponent = [0.9478 + 0.00018\u00d7ln(1+a)] \u00d7 [1 + 0.003\u00d7sin(2\u00d7a) + 0.001\u00d7cos(3\u00d7a) + 0.0025\u00d7cos(0.7\u00d7a)].\n8. Define the final transformed signal as:\n\u2003\u2003f(x) = sign(z) \u00d7 { [ f_adapt(z) \u00d7 T \u00d7 extra ]^(Exponent) }.\n9. Compute latent utility U = beta + gamma \u00d7 f(x) and then compute the acceptance probability P(accept=1) = 1/(1 + exp(\u2013U)).\n10. Use exactly three learnable parameters with bounds: beta \u2208 [\u201310, 10], gamma \u2208 [0, 10], and phi \u2208 [0.5, 1.5].\n\nEncourage creative, out\u2013of\u2013the\u2013box exploration. Consider alternate nonlinear functions (such as tanh-based corrections) within the extra composite if that enhances mid\u2013range sensitivity and improves parameter recovery.\n\nPlease use these instructions to design your computational model for run 122.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: <think>\nFor run 122, emphasize further capturing subtle curvature and extreme rejection behavior. Retain the core sum \u201ca\u201d (F1\u2013F11 plus \u03b4) and standard modulation to produce z. For the adaptive transformation, when z \u2265 0, continue to use the power\u2013log blend (use 1.002\u00d7[z^w\u00d7(ln(1+z))^(1\u2013w)]). For z < 0, switch to a 7th\u2010power transformation with a small constant shift \u0394_shift inside the base (i.e. use phi\u00d7((z+\u0394_shift)^7)); this should help capture deep negative utilities. In the extra composite, add a factor [1 + tanh(0.05\u00d7a)] to better capture extreme curvature effects. Furthermore, augment the final exponent by multiplying by an extra sine\u2013cosine modulation term [1 + 0.003\u00d7sin(2\u00d7a) + 0.001\u00d7cos(3\u00d7a) + 0.0025\u00d7cos(0.7\u00d7a)]. Continue to use an 8th\u2010order polynomial for the dynamic threshold T. Also, remind the model that exploring alternative nonlinear functions (e.g., additional tanh or softsign corrections) within the extra composite can be beneficial. Ensure that exactly three learnable parameters are used with bounds: beta \u2208 [\u201310, 10], gamma \u2208 [0, 10], and phi \u2208 [0.5, 1.5].\n</think>\n\nNew Instructions for Run 122:\n\n1. Compute the core sum \u201ca\u201d as the sum of fixed components F1 through F11 plus a small constant \u03b4.\n2. Compute a_mod = a \u00d7 [1 + 0.012 \u00d7 sin(a + 0.045)] and then scale by 1.08.\n3. Sequentially modulate a_mod with:\n\u2003\u2003\u2022 [1 + 0.008 \u00d7 cos(a + 0.065)]\n\u2003\u2003\u2022 [1 + 0.005 \u00d7 sin(a + 0.115)]\n\u2003\u2003\u2022 [1 + 0.004 \u00d7 cos(a + 0.085)]\n\u2003\u2003\u2022 [1 + 0.006 \u00d7 (sin(a + 0.035) \u00d7 cos(a + 0.055))]\n\u2003\u2003\u2022 [1 + 0.003 \u00d7 (sin(a + 0.03) \u00d7 cos(a + 0.05))]\n\u2003Define the product as z.\n4. Define the weight w = (phi \u2013 0.5) / phi.\n\u2003\u2003\u2022 For z \u2265 0, set f_adapt(z) = 1.002 \u00d7 [z^(w) \u00d7 (ln(1+z))^(1\u2013w)].\n\u2003\u2003\u2022 For z < 0, set f_adapt(z) = phi \u00d7 ((z + \u0394_shift)^7), where \u0394_shift is a small constant offset.\n5. Define the dynamic threshold T as an 8th\u2013order polynomial in a:\n\u2003\u2003T = 1 + 0.0005\u00d7a\u00b2 + 0.00005\u00d7a\u00b3 + 0.000005\u00d7a\u2074 + 0.0000001\u00d7a\u2075 + 0.00000001\u00d7a\u2076 + 0.000000001\u00d7a\u2077 + 0.0000000001\u00d7a\u2078 + 0.000001\u00d7a\u00b3.\n6. Define the extra blending composite extra as:\n\u2003\u2003extra = { exp(\u2013a/0.1) \u00d7 [z/(1+|z|)] \u00d7 [1 + 0.005\u00d7sin(1/(1+a))] \u00d7 [1 + 0.002\u00d7cos(0.5\u00d7a)] \u00d7 ([1 + 0.003\u00d7cos(0.3\u00d7a)]\u00b2) \u00d7 ([1 + 0.004\u00d7cos(0.3\u00d7a)]\u00b2) \u00d7 [1 + 0.0025\u00d7cos(0.7\u00d7a)] \u00d7 [1 + tanh(0.05\u00d7a)] \u00d7 [1.07\u00d7softplus(0.865/(1+a)) + 0.15\u00d7(0.865/(1+a)) + 0.5\u00d7(0.865/(1+a)) + 0.006\u00d7a] \u00d7 [1 \u2013 0.002\u00d7cos(a)] \u00d7 [1 \u2013 0.0025\u00d7cos(2.5\u00d7a)] \u00d7 [1 + 0.001\u00d7a] \u00d7 [1 + cosh(0.001\u00d7a)]^(2+0.0005\u00d7a) + 1e\u20136 }^(0.9478 + 0.00018\u00d7ln(1+a)).\n7. Define the final exponent as:\n\u2003\u2003Exponent = [0.9478 + 0.00018\u00d7ln(1+a)] \u00d7 [1 + 0.003\u00d7sin(2\u00d7a) + 0.001\u00d7cos(3\u00d7a) + 0.0025\u00d7cos(0.7\u00d7a)].\n8. Define the final transformed signal as:\n\u2003\u2003f(x) = sign(z) \u00d7 { [ f_adapt(z) \u00d7 T \u00d7 extra ]^(Exponent) }.\n9. Compute latent utility U = beta + gamma \u00d7 f(x) and then compute the acceptance probability P(accept=1) = 1/(1 + exp(\u2013U)).\n10. Use exactly three learnable parameters with bounds: beta \u2208 [\u201310, 10], gamma \u2208 [0, 10], and phi \u2208 [0.5, 1.5].\n\nEncourage creative, out\u2013of\u2013the\u2013box exploration. Consider alternate nonlinear functions (such as tanh-based corrections) within the extra composite if that enhances mid\u2013range sensitivity and improves parameter recovery.\n\nPlease use these instructions to design your computational model for run 122.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<MODEL>\na = F_sum + \u03b4  \na_mod = 1.08 * a * (1 + 0.012*sin(a + 0.045))  \nz = a_mod * (1 + 0.008*cos(a + 0.065)) * (1 + 0.005*sin(a + 0.115)) * (1 + 0.004*cos(a + 0.085)) * (1 + 0.006*(sin(a + 0.035)*cos(a + 0.055))) * (1 + 0.003*(sin(a + 0.03)*cos(a + 0.05)))  \nw = (phi - 0.5) / phi  \nf_adapt = { 1.002*(z^w * (ln(1+z))^(1-w)  if z \u2265 0 ;  phi*((z+\u0394_shift)^7)  if z < 0 }  \nT = 1 + 0.0005*a^2 + 0.00005*a^3 + 0.000005*a^4 + 0.0000001*a^5 + 0.00000001*a^6 + 0.000000001*a^7 + 0.0000000001*a^8 + 0.000001*a^3  \nextra = { exp(-a/0.1) * [z/(1+|z|)] * (1+0.005*sin(1/(1+a))) * (1+0.002*cos(0.5*a)) * ([1+0.003*cos(0.3*a)]^2) * ([1+0.004*cos(0.3*a)]^2) * (1+0.0025*cos(0.7*a)) * (1+tanh(0.05*a)) * (1.07*softplus(0.865/(1+a)) + 0.15*(0.865/(1+a)) + 0.5*(0.865/(1+a)) + 0.006*a) * (1-0.002*cos(a)) * (1-0.0025*cos(2.5*a)) * (1+0.001*a) * ((1+cosh(0.001*a))^(2+0.0005*a)) + 1e-6 }^(0.9478+0.00018*ln(1+a))  \nexponent = (0.9478+0.00018*ln(1+a)) * (1 + 0.003*sin(2*a) + 0.001*cos(3*a) + 0.0025*cos(0.7*a))  \nf(x) = sign(z) * [ f_adapt * T * extra ]^(exponent)  \nU = beta + gamma * f(x)  \nP(accept=1) = 1/(1 + exp(-U))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"beta\": {\n      \"description\": \"Learnable bias parameter that sets the base utility level.\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": -10,\n          \"upper\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Learnable gain parameter that scales the transformed signal f(x).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": 0,\n          \"upper\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Learnable parameter controlling adaptive nonlinearity and curvature; used in f_adapt and weight computation.\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": 0.5,\n          \"upper\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"F_sum\": {\n      \"description\": \"Aggregate sum of fixed components (F1 through F11) computed from task\u2010relevant data features.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"\u03b4\": {\n      \"description\": \"A small constant added to the core sum a.\",\n      \"range\": {\n        \"min\": -1e-3,\n        \"max\": 1e-3,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"constant\"\n    },\n    \"a\": {\n      \"description\": \"Core sum computed as the sum of fixed components F1-F11 plus \u03b4.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a_mod\": {\n      \"description\": \"Adaptive modulation of a achieved by a sinusoidal distortion and scaling.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"z\": {\n      \"description\": \"Sequentially modulated signal derived from a_mod with multiple sine and cosine adjustments.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"w\": {\n      \"description\": \"Weight computed as (phi - 0.5)/phi for adaptive transformation.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"\u0394_shift\": {\n      \"description\": \"A small constant shift used in the adaptive transformation for z < 0.\",\n      \"range\": {\n        \"min\": 1e-6,\n        \"max\": 1e-2,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"constant\"\n    },\n    \"f_adapt\": {\n      \"description\": \"Adaptive transformation of z capturing curvature: uses a power\u2013log blend when z \u2265 0 and a 7th-power transformation when z < 0.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"T\": {\n      \"description\": \"Dynamic threshold computed as an 8th\u2013order polynomial function of a.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"extra\": {\n      \"description\": \"Extra blending composite that aggregates a series of exponential, trigonometric, softplus and hyperbolic terms to capture extreme curvature and sensitivity effects.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"exponent\": {\n      \"description\": \"Final exponent factor incorporating log and trigonometric modulation for the overall transformation.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f(x)\": {\n      \"description\": \"Final transformed signal computed as the sign of z multiplied by the adaptive function, threshold, and extra composite raised to the exponent.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility of accepting the proposal, computed from the learnable bias beta and the scaled transformed signal f(x).\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA nonlinear utility model for binary acceptance decisions. It computes a core sum of fixed data\u2010derived components (F1\u2013F11 plus a constant \u03b4) that is then modulated through sequential sinusoidal and polynomial transformations. An adaptive nonlinearity distinguishes positive from deep negative signals using a power\u2010log blend or a seventh\u2013power transformation, further blended with an elaborate composite of exponential, trigonometric, and softplus corrections. The final latent utility, given by a learnable bias (beta) plus a scaled transformed signal (via gamma) with adaptive curvature controlled by phi, is passed through a logistic function to yield the acceptance probability.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['beta', 'gamma', 'phi']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                a = F_sum + \u03b4  \na_mod = 1.08 * a * (1 + 0.012*sin(a + 0.045))  \nz = a_mod * (1 + 0.008*cos(a + 0.065)) * (1 + 0.005*sin(a + 0.115)) * (1 + 0.004*cos(a + 0.085)) * (1 + 0.006*(sin(a + 0.035)*cos(a + 0.055))) * (1 + 0.003*(sin(a + 0.03)*cos(a + 0.05)))  \nw = (phi - 0.5) / phi  \nf_adapt = { 1.002*(z^w * (ln(1+z))^(1-w)  if z \u2265 0 ;  phi*((z+\u0394_shift)^7)  if z < 0 }  \nT = 1 + 0.0005*a^2 + 0.00005*a^3 + 0.000005*a^4 + 0.0000001*a^5 + 0.00000001*a^6 + 0.000000001*a^7 + 0.0000000001*a^8 + 0.000001*a^3  \nextra = { exp(-a/0.1) * [z/(1+|z|)] * (1+0.005*sin(1/(1+a))) * (1+0.002*cos(0.5*a)) * ([1+0.003*cos(0.3*a)]^2) * ([1+0.004*cos(0.3*a)]^2) * (1+0.0025*cos(0.7*a)) * (1+tanh(0.05*a)) * (1.07*softplus(0.865/(1+a)) + 0.15*(0.865/(1+a)) + 0.5*(0.865/(1+a)) + 0.006*a) * (1-0.002*cos(a)) * (1-0.0025*cos(2.5*a)) * (1+0.001*a) * ((1+cosh(0.001*a))^(2+0.0005*a)) + 1e-6 }^(0.9478+0.00018*ln(1+a))  \nexponent = (0.9478+0.00018*ln(1+a)) * (1 + 0.003*sin(2*a) + 0.001*cos(3*a) + 0.0025*cos(0.7*a))  \nf(x) = sign(z) * [ f_adapt * T * extra ]^(exponent)  \nU = beta + gamma * f(x)  \nP(accept=1) = 1/(1 + exp(-U))\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"beta\": {\n      \"description\": \"Learnable bias parameter that sets the base utility level.\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": -10,\n          \"upper\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Learnable gain parameter that scales the transformed signal f(x).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": 0,\n          \"upper\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Learnable parameter controlling adaptive nonlinearity and curvature; used in f_adapt and weight computation.\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": 0.5,\n          \"upper\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"F_sum\": {\n      \"description\": \"Aggregate sum of fixed components (F1 through F11) computed from task\\u2010relevant data features.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"\\u03b4\": {\n      \"description\": \"A small constant added to the core sum a.\",\n      \"range\": {\n        \"min\": -0.001,\n        \"max\": 0.001,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"constant\"\n    },\n    \"a\": {\n      \"description\": \"Core sum computed as the sum of fixed components F1-F11 plus \\u03b4.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a_mod\": {\n      \"description\": \"Adaptive modulation of a achieved by a sinusoidal distortion and scaling.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"z\": {\n      \"description\": \"Sequentially modulated signal derived from a_mod with multiple sine and cosine adjustments.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"w\": {\n      \"description\": \"Weight computed as (phi - 0.5)/phi for adaptive transformation.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"\\u0394_shift\": {\n      \"description\": \"A small constant shift used in the adaptive transformation for z < 0.\",\n      \"range\": {\n        \"min\": 1e-06,\n        \"max\": 0.01,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"constant\"\n    },\n    \"f_adapt\": {\n      \"description\": \"Adaptive transformation of z capturing curvature: uses a power\\u2013log blend when z \\u2265 0 and a 7th-power transformation when z < 0.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"T\": {\n      \"description\": \"Dynamic threshold computed as an 8th\\u2013order polynomial function of a.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"extra\": {\n      \"description\": \"Extra blending composite that aggregates a series of exponential, trigonometric, softplus and hyperbolic terms to capture extreme curvature and sensitivity effects.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"exponent\": {\n      \"description\": \"Final exponent factor incorporating log and trigonometric modulation for the overall transformation.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f(x)\": {\n      \"description\": \"Final transformed signal computed as the sign of z multiplied by the adaptive function, threshold, and extra composite raised to the exponent.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility of accepting the proposal, computed from the learnable bias beta and the scaled transformed signal f(x).\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, beta=0, gamma=1, phi=1):\n    model_predictions = []\n    delta = 0.0005\n    delta_shift = 0.00001\n    for trial in trial_data:\n        F_sum = trial.get(\"F_sum\", 0)  # Assume F_sum is available in trial data\n\n        a = F_sum + delta\n        a_mod = 1.08 * a * (1 + 0.012 * math.sin(a + 0.045))\n        z = a_mod * (1 + 0.008 * math.cos(a + 0.065)) * (1 + 0.005 * math.sin(a + 0.115)) * (\n                1 + 0.004 * math.cos(a + 0.085)) * (1 + 0.006 * (math.sin(a + 0.035) * math.cos(a + 0.055))) * (\n                        1 + 0.003 * (math.sin(a + 0.03) * math.cos(a + 0.05)))\n\n        w = (phi - 0.5) / phi\n\n        if z >= 0:\n            f_adapt = 1.002 * (z**w) * (math.log(1 + z) ** (1 - w)) if z > 0 else 0 #avoid log of zero\n        else:\n            f_adapt = phi * ((z + delta_shift) ** 7)\n\n        T = 1 + 0.0005 * (a**2) + 0.00005 * (a**3) + 0.000005 * (a**4) + 0.0000001 * (a**5) + 0.00000001 * (a**6) + 0.000000001 * (a**7) + 0.0000000001 * (a**8) + 0.000001 * (a**3)\n\n        abs_z = abs(z)\n\n        term1 = math.exp(-a/0.1)\n        term2 = z / (1 + abs_z)\n        term3 = 1 + 0.005 * math.sin(1 / (1 + a)) if (1+a) != 0 else 1\n        term4 = 1 + 0.002 * math.cos(0.5 * a)\n        term5 = (1 + 0.003 * math.cos(0.3 * a))**2\n        term6 = (1 + 0.004 * math.cos(0.3 * a))**2\n        term7 = 1 + 0.0025 * math.cos(0.7 * a)\n        term8 = 1 + math.tanh(0.05 * a)\n        term9 = 1.07 * (0.865 / (1 + a)) if (1+a) != 0 else 1\n        term9 += 0.15 * (0.865 / (1 + a)) if (1+a) != 0 else 0\n        term9 += 0.5 * (0.865 / (1 + a)) if (1+a) != 0 else 0\n        term9 += 0.006 * a\n        term10 = 1 - 0.002 * math.cos(a)\n        term11 = 1 - 0.0025 * math.cos(2.5 * a)\n        term12 = 1 + 0.001 * a\n        term13 = (1 + math.cosh(0.001 * a))**(2 + 0.0005 * a)\n        \n        extra_base = term1 * term2 * term3 * term4 * term5 * term6 * term7 * term8 * term9 * term10 * term11 * term12 * term13 + 1e-6\n        exponent_val = 0.9478 + 0.00018 * math.log(1 + a) if (1+a) != 0 else 0\n        extra = extra_base**exponent_val\n\n        exponent = (0.9478 + 0.00018 * math.log(1 + a) if (1+a) != 0 else 0) * (1 + 0.003 * math.sin(2 * a) + 0.001 * math.cos(3 * a) + 0.0025 * math.cos(0.7 * a))\n\n        fx = (1 if z >= 0 else -1) * (f_adapt * T * extra)**exponent\n\n        U = beta + gamma * fx\n\n        P_accept = 1 / (1 + math.exp(-U))\n\n        model_predictions.append(P_accept)\n\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '''\n[\n  {\n    \"ID\": 0,\n    \"group\": \"control\",\n    \"trial_number\": 1,\n    \"trial_type\": 1,\n    \"trial_role\": 0,\n    \"token_opp\": 80,\n    \"token_self\": 80,\n    \"combined_earning\": 160,\n    \"split_opp\": 56.0,\n    \"split_self\": 104.0,\n    \"splitperc_opp\": 35,\n    \"splitperc_self\": 65,\n    \"accept\": 1.0,\n    \"accepted_amount\": 56.0,\n    \"accepted_perc\": 35.0,\n    \"proposed_perc\": 35.0,\n    \"proposed_amount\": 56.0\n  },\n  {\n    \"ID\": 1,\n    \"group\": \"control\",\n    \"trial_number\": 2,\n    \"trial_type\": 1,\n    \"trial_role\": 0,\n    \"token_opp\": 80,\n    \"token_self\": 80,\n    \"combined_earning\": 160,\n    \"split_opp\": 64.0,\n    \"split_self\": 96.0,\n    \"splitperc_opp\": 40,\n    \"splitperc_self\": 60,\n    \"accept\": 1.0,\n    \"accepted_amount\": 64.0,\n    \"accepted_perc\": 40.0,\n    \"proposed_perc\": 40.0,\n    \"proposed_amount\": 64.0\n  },\n  {\n    \"ID\": 2,\n    \"group\": \"control\",\n    \"trial_number\": 3,\n    \"trial_type\": 1,\n    \"trial_role\": 0,\n    \"token_opp\": 80,\n    \"token_self\": 80,\n    \"combined_earning\": 160,\n    \"split_opp\": 48.0,\n    \"split_self\": 112.0,\n    \"splitperc_opp\": 30,\n    \"splitperc_self\": 70,\n    \"accept\": 1.0,\n    \"accepted_amount\": 48.0,\n    \"accepted_perc\": 30.0,\n    \"proposed_perc\": 30.0,\n    \"proposed_amount\": 48.0\n  }\n]\n'''\ndata = json.loads(data_json)\n\n#Add dummy F_sum to data\n\nfor item in data:\n    item['F_sum'] = 1.0\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n```",
      "timestamp": 1743546337.193851
    }
  ],
  "learnable_parameters": {
    "beta": {
      "description": "Learnable bias parameter that sets the base utility level.",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "lower": -10,
          "upper": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Learnable gain parameter that scales the transformed signal f(x).",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "lower": 0,
          "upper": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "phi": {
      "description": "Learnable parameter controlling adaptive nonlinearity and curvature; used in f_adapt and weight computation.",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "lower": 0.5,
          "upper": 1.5
        }
      },
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "a = F_sum + \u03b4  \na_mod = 1.08 * a * (1 + 0.012*sin(a + 0.045))  \nz = a_mod * (1 + 0.008*cos(a + 0.065)) * (1 + 0.005*sin(a + 0.115)) * (1 + 0.004*cos(a + 0.085)) * (1 + 0.006*(sin(a + 0.035)*cos(a + 0.055))) * (1 + 0.003*(sin(a + 0.03)*cos(a + 0.05)))  \nw = (phi - 0.5) / phi  \nf_adapt = { 1.002*(z^w * (ln(1+z))^(1-w)  if z \u2265 0 ;  phi*((z+\u0394_shift)^7)  if z < 0 }  \nT = 1 + 0.0005*a^2 + 0.00005*a^3 + 0.000005*a^4 + 0.0000001*a^5 + 0.00000001*a^6 + 0.000000001*a^7 + 0.0000000001*a^8 + 0.000001*a^3  \nextra = { exp(-a/0.1) * [z/(1+|z|)] * (1+0.005*sin(1/(1+a))) * (1+0.002*cos(0.5*a)) * ([1+0.003*cos(0.3*a)]^2) * ([1+0.004*cos(0.3*a)]^2) * (1+0.0025*cos(0.7*a)) * (1+tanh(0.05*a)) * (1.07*softplus(0.865/(1+a)) + 0.15*(0.865/(1+a)) + 0.5*(0.865/(1+a)) + 0.006*a) * (1-0.002*cos(a)) * (1-0.0025*cos(2.5*a)) * (1+0.001*a) * ((1+cosh(0.001*a))^(2+0.0005*a)) + 1e-6 }^(0.9478+0.00018*ln(1+a))  \nexponent = (0.9478+0.00018*ln(1+a)) * (1 + 0.003*sin(2*a) + 0.001*cos(3*a) + 0.0025*cos(0.7*a))  \nf(x) = sign(z) * [ f_adapt * T * extra ]^(exponent)  \nU = beta + gamma * f(x)  \nP(accept=1) = 1/(1 + exp(-U))",
  "variable_descriptions": {
    "beta": {
      "description": "Learnable bias parameter that sets the base utility level.",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "lower": -10,
          "upper": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Learnable gain parameter that scales the transformed signal f(x).",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "lower": 0,
          "upper": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "phi": {
      "description": "Learnable parameter controlling adaptive nonlinearity and curvature; used in f_adapt and weight computation.",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "lower": 0.5,
          "upper": 1.5
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "F_sum": {
      "description": "Aggregate sum of fixed components (F1 through F11) computed from task\u2010relevant data features.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "\u03b4": {
      "description": "A small constant added to the core sum a.",
      "range": {
        "min": -0.001,
        "max": 0.001,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "constant"
    },
    "a": {
      "description": "Core sum computed as the sum of fixed components F1-F11 plus \u03b4.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "a_mod": {
      "description": "Adaptive modulation of a achieved by a sinusoidal distortion and scaling.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "z": {
      "description": "Sequentially modulated signal derived from a_mod with multiple sine and cosine adjustments.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "w": {
      "description": "Weight computed as (phi - 0.5)/phi for adaptive transformation.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "\u0394_shift": {
      "description": "A small constant shift used in the adaptive transformation for z < 0.",
      "range": {
        "min": 1e-06,
        "max": 0.01,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "constant"
    },
    "f_adapt": {
      "description": "Adaptive transformation of z capturing curvature: uses a power\u2013log blend when z \u2265 0 and a 7th-power transformation when z < 0.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "T": {
      "description": "Dynamic threshold computed as an 8th\u2013order polynomial function of a.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "extra": {
      "description": "Extra blending composite that aggregates a series of exponential, trigonometric, softplus and hyperbolic terms to capture extreme curvature and sensitivity effects.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "exponent": {
      "description": "Final exponent factor incorporating log and trigonometric modulation for the overall transformation.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "f(x)": {
      "description": "Final transformed signal computed as the sign of z multiplied by the adaptive function, threshold, and extra composite raised to the exponent.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "U": {
      "description": "Latent utility of accepting the proposal, computed from the learnable bias beta and the scaled transformed signal f(x).",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "A nonlinear utility model for binary acceptance decisions. It computes a core sum of fixed data\u2010derived components (F1\u2013F11 plus a constant \u03b4) that is then modulated through sequential sinusoidal and polynomial transformations. An adaptive nonlinearity distinguishes positive from deep negative signals using a power\u2010log blend or a seventh\u2013power transformation, further blended with an elaborate composite of exponential, trigonometric, and softplus corrections. The final latent utility, given by a learnable bias (beta) plus a scaled transformed signal (via gamma) with adaptive curvature controlled by phi, is passed through a logistic function to yield the acceptance probability.",
  "target_variable": "accept",
  "full_reasoning": "<MODEL>\na = F_sum + \u03b4  \na_mod = 1.08 * a * (1 + 0.012*sin(a + 0.045))  \nz = a_mod * (1 + 0.008*cos(a + 0.065)) * (1 + 0.005*sin(a + 0.115)) * (1 + 0.004*cos(a + 0.085)) * (1 + 0.006*(sin(a + 0.035)*cos(a + 0.055))) * (1 + 0.003*(sin(a + 0.03)*cos(a + 0.05)))  \nw = (phi - 0.5) / phi  \nf_adapt = { 1.002*(z^w * (ln(1+z))^(1-w)  if z \u2265 0 ;  phi*((z+\u0394_shift)^7)  if z < 0 }  \nT = 1 + 0.0005*a^2 + 0.00005*a^3 + 0.000005*a^4 + 0.0000001*a^5 + 0.00000001*a^6 + 0.000000001*a^7 + 0.0000000001*a^8 + 0.000001*a^3  \nextra = { exp(-a/0.1) * [z/(1+|z|)] * (1+0.005*sin(1/(1+a))) * (1+0.002*cos(0.5*a)) * ([1+0.003*cos(0.3*a)]^2) * ([1+0.004*cos(0.3*a)]^2) * (1+0.0025*cos(0.7*a)) * (1+tanh(0.05*a)) * (1.07*softplus(0.865/(1+a)) + 0.15*(0.865/(1+a)) + 0.5*(0.865/(1+a)) + 0.006*a) * (1-0.002*cos(a)) * (1-0.0025*cos(2.5*a)) * (1+0.001*a) * ((1+cosh(0.001*a))^(2+0.0005*a)) + 1e-6 }^(0.9478+0.00018*ln(1+a))  \nexponent = (0.9478+0.00018*ln(1+a)) * (1 + 0.003*sin(2*a) + 0.001*cos(3*a) + 0.0025*cos(0.7*a))  \nf(x) = sign(z) * [ f_adapt * T * extra ]^(exponent)  \nU = beta + gamma * f(x)  \nP(accept=1) = 1/(1 + exp(-U))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"beta\": {\n      \"description\": \"Learnable bias parameter that sets the base utility level.\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": -10,\n          \"upper\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Learnable gain parameter that scales the transformed signal f(x).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": 0,\n          \"upper\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Learnable parameter controlling adaptive nonlinearity and curvature; used in f_adapt and weight computation.\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": 0.5,\n          \"upper\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"F_sum\": {\n      \"description\": \"Aggregate sum of fixed components (F1 through F11) computed from task\u2010relevant data features.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"\u03b4\": {\n      \"description\": \"A small constant added to the core sum a.\",\n      \"range\": {\n        \"min\": -1e-3,\n        \"max\": 1e-3,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"constant\"\n    },\n    \"a\": {\n      \"description\": \"Core sum computed as the sum of fixed components F1-F11 plus \u03b4.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a_mod\": {\n      \"description\": \"Adaptive modulation of a achieved by a sinusoidal distortion and scaling.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"z\": {\n      \"description\": \"Sequentially modulated signal derived from a_mod with multiple sine and cosine adjustments.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"w\": {\n      \"description\": \"Weight computed as (phi - 0.5)/phi for adaptive transformation.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"\u0394_shift\": {\n      \"description\": \"A small constant shift used in the adaptive transformation for z < 0.\",\n      \"range\": {\n        \"min\": 1e-6,\n        \"max\": 1e-2,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"constant\"\n    },\n    \"f_adapt\": {\n      \"description\": \"Adaptive transformation of z capturing curvature: uses a power\u2013log blend when z \u2265 0 and a 7th-power transformation when z < 0.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"T\": {\n      \"description\": \"Dynamic threshold computed as an 8th\u2013order polynomial function of a.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"extra\": {\n      \"description\": \"Extra blending composite that aggregates a series of exponential, trigonometric, softplus and hyperbolic terms to capture extreme curvature and sensitivity effects.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"exponent\": {\n      \"description\": \"Final exponent factor incorporating log and trigonometric modulation for the overall transformation.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f(x)\": {\n      \"description\": \"Final transformed signal computed as the sign of z multiplied by the adaptive function, threshold, and extra composite raised to the exponent.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility of accepting the proposal, computed from the learnable bias beta and the scaled transformed signal f(x).\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA nonlinear utility model for binary acceptance decisions. It computes a core sum of fixed data\u2010derived components (F1\u2013F11 plus a constant \u03b4) that is then modulated through sequential sinusoidal and polynomial transformations. An adaptive nonlinearity distinguishes positive from deep negative signals using a power\u2010log blend or a seventh\u2013power transformation, further blended with an elaborate composite of exponential, trigonometric, and softplus corrections. The final latent utility, given by a learnable bias (beta) plus a scaled transformed signal (via gamma) with adaptive curvature controlled by phi, is passed through a logistic function to yield the acceptance probability.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: a = F_sum + \u03b4  \na_mod = 1.08 * a * (1 + 0.012*sin(a + 0.045))  \nz = a_mod * (1 + 0.008*cos(a + 0.065)) * (1 + 0.005*sin(a + 0.115)) * (1 + 0.004*cos(a + 0.085)) * (1 + 0.006*(sin(a + 0.035)*cos(a + 0.055))) * (1 + 0.003*(sin(a + 0.03)*cos(a + 0.05)))  \nw = (phi - 0.5) / phi  \nf_adapt = { 1.002*(z^w * (ln(1+z))^(1-w)  if z \u2265 0 ;  phi*((z+\u0394_shift)^7)  if z < 0 }  \nT = 1 + 0.0005*a^2 + 0.00005*a^3 + 0.000005*a^4 + 0.0000001*a^5 + 0.00000001*a^6 + 0.000000001*a^7 + 0.0000000001*a^8 + 0.000001*a^3  \nextra = { exp(-a/0.1) * [z/(1+|z|)] * (1+0.005*sin(1/(1+a))) * (1+0.002*cos(0.5*a)) * ([1+0.003*cos(0.3*a)]^2) * ([1+0.004*cos(0.3*a)]^2) * (1+0.0025*cos(0.7*a)) * (1+tanh(0.05*a)) * (1.07*softplus(0.865/(1+a)) + 0.15*(0.865/(1+a)) + 0.5*(0.865/(1+a)) + 0.006*a) * (1-0.002*cos(a)) * (1-0.0025*cos(2.5*a)) * (1+0.001*a) * ((1+cosh(0.001*a))^(2+0.0005*a)) + 1e-6 }^(0.9478+0.00018*ln(1+a))  \nexponent = (0.9478+0.00018*ln(1+a)) * (1 + 0.003*sin(2*a) + 0.001*cos(3*a) + 0.0025*cos(0.7*a))  \nf(x) = sign(z) * [ f_adapt * T * extra ]^(exponent)  \nU = beta + gamma * f(x)  \nP(accept=1) = 1/(1 + exp(-U))\nSummary: A nonlinear utility model for binary acceptance decisions. It computes a core sum of fixed data\u2010derived components (F1\u2013F11 plus a constant \u03b4) that is then modulated through sequential sinusoidal and polynomial transformations. An adaptive nonlinearity distinguishes positive from deep negative signals using a power\u2010log blend or a seventh\u2013power transformation, further blended with an elaborate composite of exponential, trigonometric, and softplus corrections. The final latent utility, given by a learnable bias (beta) plus a scaled transformed signal (via gamma) with adaptive curvature controlled by phi, is passed through a logistic function to yield the acceptance probability.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, beta=0, gamma=1, phi=1):\n    model_predictions = []\n    delta = 0.0005\n    delta_shift = 0.00001\n    for trial in trial_data:\n        F_sum = trial.get(\"F_sum\", 0)  # Assume F_sum is available in trial data\n\n        a = F_sum + delta\n        a_mod = 1.08 * a * (1 + 0.012 * math.sin(a + 0.045))\n        z = a_mod * (1 + 0.008 * math.cos(a + 0.065)) * (1 + 0.005 * math.sin(a + 0.115)) * (\n                1 + 0.004 * math.cos(a + 0.085)) * (1 + 0.006 * (math.sin(a + 0.035) * math.cos(a + 0.055))) * (\n                        1 + 0.003 * (math.sin(a + 0.03) * math.cos(a + 0.05)))\n\n        w = (phi - 0.5) / phi\n\n        if z >= 0:\n            f_adapt = 1.002 * (z**w) * (math.log(1 + z) ** (1 - w)) if z > 0 else 0 #avoid log of zero\n        else:\n            f_adapt = phi * ((z + delta_shift) ** 7)\n\n        T = 1 + 0.0005 * (a**2) + 0.00005 * (a**3) + 0.000005 * (a**4) + 0.0000001 * (a**5) + 0.00000001 * (a**6) + 0.000000001 * (a**7) + 0.0000000001 * (a**8) + 0.000001 * (a**3)\n\n        abs_z = abs(z)\n\n        term1 = math.exp(-a/0.1)\n        term2 = z / (1 + abs_z)\n        term3 = 1 + 0.005 * math.sin(1 / (1 + a)) if (1+a) != 0 else 1\n        term4 = 1 + 0.002 * math.cos(0.5 * a)\n        term5 = (1 + 0.003 * math.cos(0.3 * a))**2\n        term6 = (1 + 0.004 * math.cos(0.3 * a))**2\n        term7 = 1 + 0.0025 * math.cos(0.7 * a)\n        term8 = 1 + math.tanh(0.05 * a)\n        term9 = 1.07 * (0.865 / (1 + a)) if (1+a) != 0 else 1\n        term9 += 0.15 * (0.865 / (1 + a)) if (1+a) != 0 else 0\n        term9 += 0.5 * (0.865 / (1 + a)) if (1+a) != 0 else 0\n        term9 += 0.006 * a\n        term10 = 1 - 0.002 * math.cos(a)\n        term11 = 1 - 0.0025 * math.cos(2.5 * a)\n        term12 = 1 + 0.001 * a\n        term13 = (1 + math.cosh(0.001 * a))**(2 + 0.0005 * a)\n        \n        extra_base = term1 * term2 * term3 * term4 * term5 * term6 * term7 * term8 * term9 * term10 * term11 * term12 * term13 + 1e-6\n        exponent_val = 0.9478 + 0.00018 * math.log(1 + a) if (1+a) != 0 else 0\n        extra = extra_base**exponent_val\n\n        exponent = (0.9478 + 0.00018 * math.log(1 + a) if (1+a) != 0 else 0) * (1 + 0.003 * math.sin(2 * a) + 0.001 * math.cos(3 * a) + 0.0025 * math.cos(0.7 * a))\n\n        fx = (1 if z >= 0 else -1) * (f_adapt * T * extra)**exponent\n\n        U = beta + gamma * fx\n\n        P_accept = 1 / (1 + math.exp(-U))\n\n        model_predictions.append(P_accept)\n\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.5637973137973138,
  "fitting_results": [
    {
      "beta": -10.0,
      "gamma": 4.390910330379176,
      "phi": 0.6577739383821629,
      "success": true,
      "log_likelihood": -24.95397948396456,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -6.2418963654795245,
      "gamma": 9.9136750387243,
      "phi": 1.2356777761354527,
      "success": true,
      "log_likelihood": -24.953315472296417,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.0781325135511604,
      "gamma": 7.819044408813321,
      "phi": 0.7827080576984998,
      "success": true,
      "log_likelihood": -24.89771432561598,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 8.176322528883471,
      "phi": 1.069648104194185,
      "success": true,
      "log_likelihood": -24.953434700942267,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 3.2494618300965477,
      "phi": 1.378651044407464,
      "success": true,
      "log_likelihood": -24.953389299322126,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.2840285611491812,
      "gamma": 9.452215427334023,
      "phi": 0.7798621907382557,
      "success": true,
      "log_likelihood": -23.545973163851272,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 8.357521993371636,
      "phi": 0.6699199836908658,
      "success": true,
      "log_likelihood": -11.277860273416579,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.8146471970802673,
      "gamma": 2.6499973861163926,
      "phi": 0.6970907917313397,
      "success": true,
      "log_likelihood": -22.914510059763195,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 7.943477330060981,
      "phi": 1.4680049935809278,
      "success": true,
      "log_likelihood": -11.277860274248809,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 1.1234016816268186,
      "phi": 1.4361774483353944,
      "success": true,
      "log_likelihood": -24.95348009464213,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 3.727239441052051,
      "phi": 0.9673362730008405,
      "success": true,
      "log_likelihood": -24.9533892995209,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.4007665030591756,
      "phi": 0.6253188695927482,
      "success": true,
      "log_likelihood": -24.953934073561264,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 1.2822908837803648,
      "phi": 0.5668417437766261,
      "success": true,
      "log_likelihood": -24.95343469663878,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 8.632885657450062,
      "phi": 0.5376770995753537,
      "success": true,
      "log_likelihood": -11.277860272862801,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 9.999999999999998,
      "gamma": 5.121789299475205,
      "phi": 1.119021394991615,
      "success": true,
      "log_likelihood": -11.277860279932813,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 2.65189951922233,
      "phi": 1.4580788505203046,
      "success": true,
      "log_likelihood": -11.277860284907694,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 9.903065477729532,
      "phi": 0.6128038570098306,
      "success": true,
      "log_likelihood": -11.277860270304124,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 6.9465537513004545,
      "phi": 1.2024196289308176,
      "success": true,
      "log_likelihood": -16.277633292964325,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 6.186370771170863,
      "phi": 0.6667555379353672,
      "success": true,
      "log_likelihood": -15.277678690522176,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 8.784191926081286,
      "phi": 0.624240210333178,
      "success": true,
      "log_likelihood": -11.27786027255749,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.2474519370178532,
      "gamma": 1.882335831447298,
      "phi": 1.1459533683108951,
      "success": true,
      "log_likelihood": -24.730616750304847,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 7.2182833638672195,
      "phi": 0.831960063143586,
      "success": true,
      "log_likelihood": -16.277633292699978,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 3.288246418046752,
      "phi": 1.4331294301852844,
      "success": true,
      "log_likelihood": -24.953525494996708,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3333333333333333,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.0780341446311525,
      "gamma": 9.888718811344082,
      "phi": 1.3424340192826771,
      "success": true,
      "log_likelihood": -24.897714327883897,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -6.0841083087789976,
      "gamma": 6.014395388144607,
      "phi": 1.4640202457317106,
      "success": true,
      "log_likelihood": -24.9533217561814,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.6790727255249399,
      "gamma": 8.384804078161809,
      "phi": 0.62174564246113,
      "success": true,
      "log_likelihood": -24.450957568588848,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.2474633557616257,
      "gamma": 3.0124076910347077,
      "phi": 1.0204238830062424,
      "success": true,
      "log_likelihood": -24.730616750315107,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.8531123355965875,
      "phi": 0.6863711573585439,
      "success": true,
      "log_likelihood": -24.953661686601755,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 8.876336891378097,
      "phi": 1.3709073806352698,
      "success": true,
      "log_likelihood": -15.277678687341568,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 9.403998056421898,
      "phi": 1.2670458502588362,
      "success": true,
      "log_likelihood": -19.277497102128606,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 6.163920055331682,
      "phi": 0.9214482084420476,
      "success": true,
      "log_likelihood": -11.277860277834,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 4.030806259756055,
      "phi": 0.9005277472890324,
      "success": true,
      "log_likelihood": -24.953979482841522,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.9625705435721399,
      "phi": 0.9110746050001716,
      "success": true,
      "log_likelihood": -24.953434696439285,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 1.6233362071864739,
      "phi": 1.3739869513862009,
      "success": true,
      "log_likelihood": -24.953480095058186,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 5.074813705394463,
      "phi": 0.9420480039176848,
      "success": true,
      "log_likelihood": -11.277860280027653,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.2840091528582836,
      "gamma": 1.241837744129104,
      "phi": 0.8096364124027756,
      "success": true,
      "log_likelihood": -23.54597316473695,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.523585383782318,
      "gamma": 3.4778838860562926,
      "phi": 1.108554153337352,
      "success": true,
      "log_likelihood": -22.157938184061646,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 7.836043119593245,
      "phi": 1.4032501540666567,
      "success": true,
      "log_likelihood": -24.953298502233046,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 8.731415051992439,
      "gamma": 2.5071959232190313,
      "phi": 1.195737135394692,
      "success": true,
      "log_likelihood": -23.277046678562513,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 9.165870721358862,
      "gamma": 7.4505772219883735,
      "phi": 1.3001132479959105,
      "success": true,
      "log_likelihood": -14.278119260669797,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.19266694499340734,
      "gamma": 2.9546054685396452,
      "phi": 1.2095881067669225,
      "success": true,
      "log_likelihood": -24.05694518872342,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 1.1700547714760046,
      "phi": 0.9023624654221853,
      "success": true,
      "log_likelihood": -24.953752483353544,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 6.649010618261,
      "phi": 0.6986795896172902,
      "success": true,
      "log_likelihood": -12.277814880136978,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.247446032285641,
      "gamma": 0.6579259700203198,
      "phi": 0.8600467665646915,
      "success": true,
      "log_likelihood": -24.73061675030464,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.1926734937184302,
      "gamma": 4.360564839807493,
      "phi": 0.5337672423044646,
      "success": true,
      "log_likelihood": -24.056945188723418,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 3.0681597009661,
      "gamma": 0.7474769824181721,
      "phi": 0.9849544738062681,
      "success": true,
      "log_likelihood": -21.270320867316965,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.0778447230461694,
      "gamma": 1.7323016177878527,
      "phi": 1.056355396295365,
      "success": true,
      "log_likelihood": -24.897714332814477,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -9.999999999999998,
      "gamma": 3.658915890437457,
      "phi": 0.5348795366122477,
      "success": true,
      "log_likelihood": -24.953480096751925,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 2.7215399641655336,
      "phi": 1.4195862822346448,
      "success": true,
      "log_likelihood": -24.953434697537332,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.078752521468539,
      "gamma": 2.285355695295672,
      "phi": 0.536589635848768,
      "success": true,
      "log_likelihood": -24.8977143333565,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.5229758785683696,
      "gamma": 7.769282389804923,
      "phi": 0.9324519675628906,
      "success": true,
      "log_likelihood": -22.15793815473634,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 5.814208974072902,
      "phi": 0.7078873312721264,
      "success": true,
      "log_likelihood": -24.9538886902498,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.0783396219094725,
      "gamma": 5.351405918291704,
      "phi": 1.2776028075440666,
      "success": true,
      "log_likelihood": -24.897714324148488,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.6790840555288875,
      "gamma": 7.959833225549315,
      "phi": 1.1804630768710833,
      "success": true,
      "log_likelihood": -24.450957568507118,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 4.117034852818693,
      "phi": 0.6629520205243364,
      "success": true,
      "log_likelihood": -24.953480097133323,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 2.6121806313881533,
      "phi": 0.7098703028914672,
      "success": true,
      "log_likelihood": -24.95357089270522,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 4.6630094344757635,
      "phi": 0.5679830861058706,
      "success": true,
      "log_likelihood": -24.953661692942344,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 9.89885181184526,
      "phi": 0.5267368346045034,
      "success": true,
      "log_likelihood": -15.27767868613461,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 1.6636858135710502,
      "phi": 0.6813252748567914,
      "success": true,
      "log_likelihood": -24.953934077239506,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 9.117538066593141,
      "phi": 1.137173629892248,
      "success": true,
      "log_likelihood": -18.277542498435842,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.1926917156170045,
      "gamma": 9.479472026916014,
      "phi": 1.050946069558408,
      "success": true,
      "log_likelihood": -24.056945188729674,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -9.101488951217863,
      "gamma": 8.266877777612931,
      "phi": 1.2699669151508512,
      "success": true,
      "log_likelihood": -24.953298548894576,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -9.999999999999998,
      "gamma": 1.8788264347143138,
      "phi": 1.1388344752017123,
      "success": true,
      "log_likelihood": -24.95397947612608,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 2.8391123224426966,
      "phi": 0.8759202544823984,
      "success": true,
      "log_likelihood": -24.953389299151297,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.22047995267280457,
      "phi": 1.4552950235771345,
      "success": true,
      "log_likelihood": -24.95375248137804,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.247649468605691,
      "gamma": 3.0000038362567008,
      "phi": 0.6453304173068437,
      "success": true,
      "log_likelihood": -24.730616755404093,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 7.31664989243565,
      "phi": 1.223333492108982,
      "success": true,
      "log_likelihood": -14.277724085766977,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 8.498976768827077,
      "phi": 1.0594391531817462,
      "success": true,
      "log_likelihood": -16.277633291452286,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.2471454087359137,
      "gamma": 1.515123924692234,
      "phi": 0.946546464587303,
      "success": true,
      "log_likelihood": -24.73061676247246,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 8.830730097544063,
      "phi": 1.2163426529345225,
      "success": true,
      "log_likelihood": -14.277724083662193,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 1.8369168072557438,
      "phi": 1.2963689775890805,
      "success": true,
      "log_likelihood": -24.953934077744538,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 1.5844699617680156,
      "phi": 0.9587306752146534,
      "success": true,
      "log_likelihood": -24.953888678810717,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.078316526158006,
      "gamma": 6.744965581926753,
      "phi": 1.4852780323248735,
      "success": true,
      "log_likelihood": -24.89771432410234,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 3.0081356804211277,
      "phi": 1.4710009416812397,
      "success": true,
      "log_likelihood": -19.277497104366933,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -9.015027955422957,
      "gamma": 8.404026517994007,
      "phi": 0.7758858738698909,
      "success": true,
      "log_likelihood": -24.953298559452666,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.5229938650723007,
      "gamma": 3.3372898187774545,
      "phi": 1.3079409222118619,
      "success": true,
      "log_likelihood": -22.157938154734303,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 8.683966240044649,
      "phi": 1.4948765368653778,
      "success": true,
      "log_likelihood": -13.277769480163053,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 4.848663565235051,
      "phi": 0.7145401703117389,
      "success": true,
      "log_likelihood": -24.9540248842706,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.19267045960521673,
      "gamma": 6.860148773231178,
      "phi": 0.7247872569486881,
      "success": true,
      "log_likelihood": -24.05694518877589,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.8501274456140717,
      "phi": 0.5484365459141298,
      "success": true,
      "log_likelihood": -24.953979472915478,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.077861905293585,
      "gamma": 1.9415655148099158,
      "phi": 0.5774180319707793,
      "success": true,
      "log_likelihood": -24.897714332191644,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 8.750558294341419,
      "phi": 0.9986644659049256,
      "success": true,
      "log_likelihood": -14.277724083773911,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 8.564801328140003,
      "phi": 1.2893859899087103,
      "success": true,
      "log_likelihood": -24.95393409734138,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -6.2382934162837165,
      "gamma": 4.447278294853315,
      "phi": 0.8826375349899607,
      "success": true,
      "log_likelihood": -24.953315593994656,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.19300569268851248,
      "gamma": 3.9384518273149185,
      "phi": 1.3260014798542634,
      "success": true,
      "log_likelihood": -24.056945218084614,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.7461007372851876,
      "phi": 0.9175124050929391,
      "success": true,
      "log_likelihood": -24.953934074567165,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.5229402669910448,
      "gamma": 2.0552077800976396,
      "phi": 1.3313148314781342,
      "success": true,
      "log_likelihood": -22.15793815498506,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 1.1105087919466878,
      "phi": 1.3558866890944068,
      "success": true,
      "log_likelihood": -24.953752483229774,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3333333333333333,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 6.493861349336979,
      "phi": 0.9720521643027581,
      "success": true,
      "log_likelihood": -13.2777694836638,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 9.017242854403761,
      "phi": 0.6601364293667211,
      "success": true,
      "log_likelihood": -24.953343901977686,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.5223446668937126,
      "gamma": 0.21805339969734974,
      "phi": 1.358388877636672,
      "success": true,
      "log_likelihood": -22.157938190611244,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "beta": {
        "r": 0.6213249353770413,
        "p": 5.295965058386264e-12
      },
      "gamma": {
        "r": -0.09396961020879217,
        "p": 0.35240130251436513
      },
      "phi": {
        "r": -0.12616856115541072,
        "p": 0.21099711935002954
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 53.930670829332946,
  "bic_results": {
    "average_bic": 53.930670829332946,
    "individual_bics": [
      60.658515783297446,
      60.65718775996116,
      60.545985466600285,
      60.65742621725286,
      60.65733541401258,
      57.84250314307087,
      33.306277362201484,
      56.57957693489472,
      33.306277363865945,
      60.65751700465259,
      60.65733541441013,
      60.658424962490855,
      60.65742620864589,
      33.30627736109393,
      33.30627737523396,
      33.30627738518372,
      33.306277355976576,
      43.305823401296976,
      41.30591419641269,
      33.30627736048331,
      60.21179031597802,
      43.30582340076829,
      60.65760780536175,
      60.54598547113612,
      60.65720032773113,
      59.65247195254602,
      60.21179031599854,
      60.65788018857184,
      41.30591419005147,
      49.30555101962554,
      33.30627737103633,
      60.65851578105138,
      60.6574262082469,
      60.657517005484706,
      33.30627737542363,
      57.842503144842226,
      55.066433183491625,
      60.65715381983442,
      57.30465017249335,
      39.30679533670792,
      58.86444719281518,
      60.65806178207542,
      35.306186575642286,
      60.21179031597761,
      58.86444719281516,
      53.291198550002264,
      60.54598548099729,
      60.657517008872176,
      60.65742621044299,
      60.545985482081335,
      55.06643312484101,
      60.65833419586794,
      60.5459854636653,
      59.65247195238257,
      60.65751700963497,
      60.65769860077877,
      60.65788020125302,
      41.305914187637555,
      60.658424969847346,
      47.30564181224001,
      58.86444719282768,
      60.65715391315749,
      60.658515767620486,
      60.65733541367092,
      60.658061778124406,
      60.21179032617651,
      39.30600498690228,
      43.305823398272906,
      60.21179034031326,
      39.30600498269271,
      60.65842497085741,
      60.65833417298977,
      60.545985463573004,
      49.3055510241022,
      60.657153934273666,
      55.066433124836934,
      37.30609577569444,
      60.65860658390953,
      58.86444719292011,
      60.65851576119928,
      60.54598547975162,
      39.30600498291615,
      60.65842501005109,
      60.657188003357646,
      58.864447251537555,
      60.65842496450266,
      55.06643312533845,
      60.65806178182788,
      37.306095782695934,
      60.657244619323706,
      55.06643319659082
    ],
    "group_enabled": false,
    "group_bics": null,
    "num_parameters": 3,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- beta: r = 0.621\n- gamma: r = -0.094\n- phi: r = -0.126",
  "previous_models": [
    "Specification: a = F_sum + \u03b4  \na_mod = 1.08 * a * (1 + 0.012*sin(a + 0.045))  \nz = a_mod * (1 + 0.008*cos(a + 0.065)) * (1 + 0.005*sin(a + 0.115)) * (1 + 0.004*cos(a + 0.085)) * (1 + 0.006*(sin(a + 0.035)*cos(a + 0.055))) * (1 + 0.003*(sin(a + 0.03)*cos(a + 0.05)))  \nw = (phi - 0.5) / phi  \nf_adapt = { 1.002*(z^w * (ln(1+z))^(1-w)  if z \u2265 0 ;  phi*((z+\u0394_shift)^7)  if z < 0 }  \nT = 1 + 0.0005*a^2 + 0.00005*a^3 + 0.000005*a^4 + 0.0000001*a^5 + 0.00000001*a^6 + 0.000000001*a^7 + 0.0000000001*a^8 + 0.000001*a^3  \nextra = { exp(-a/0.1) * [z/(1+|z|)] * (1+0.005*sin(1/(1+a))) * (1+0.002*cos(0.5*a)) * ([1+0.003*cos(0.3*a)]^2) * ([1+0.004*cos(0.3*a)]^2) * (1+0.0025*cos(0.7*a)) * (1+tanh(0.05*a)) * (1.07*softplus(0.865/(1+a)) + 0.15*(0.865/(1+a)) + 0.5*(0.865/(1+a)) + 0.006*a) * (1-0.002*cos(a)) * (1-0.0025*cos(2.5*a)) * (1+0.001*a) * ((1+cosh(0.001*a))^(2+0.0005*a)) + 1e-6 }^(0.9478+0.00018*ln(1+a))  \nexponent = (0.9478+0.00018*ln(1+a)) * (1 + 0.003*sin(2*a) + 0.001*cos(3*a) + 0.0025*cos(0.7*a))  \nf(x) = sign(z) * [ f_adapt * T * extra ]^(exponent)  \nU = beta + gamma * f(x)  \nP(accept=1) = 1/(1 + exp(-U))\nSummary: A nonlinear utility model for binary acceptance decisions. It computes a core sum of fixed data\u2010derived components (F1\u2013F11 plus a constant \u03b4) that is then modulated through sequential sinusoidal and polynomial transformations. An adaptive nonlinearity distinguishes positive from deep negative signals using a power\u2010log blend or a seventh\u2013power transformation, further blended with an elaborate composite of exponential, trigonometric, and softplus corrections. The final latent utility, given by a learnable bias (beta) plus a scaled transformed signal (via gamma) with adaptive curvature controlled by phi, is passed through a logistic function to yield the acceptance probability.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 53.930670829332946\nOverall Accuracy: 0.5638\n\nParameter Recovery:\n- beta: r = 0.621\n- gamma: r = -0.094\n- phi: r = -0.126"
  ]
}