{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "<think>\nFor run 123, further enhance the model\u2019s ability to capture subtle, extreme rejections by adding additional nonlinear corrections. In particular, introduce a tanh\u2010based factor within the extra composite to capture sharper curvature. For the adaptive transformation on negative z, replace the fixed 7th\u2013power function with one based on softsign (which smoothly bounds extreme values) raised to the 7th power after a small constant shift. Also, expand the dynamic threshold T by adding an additional a\u2079 term to model more extreme nonlinearity. Finally, amplify the final exponent by including an extra sine\u2013cosine modulation term that includes additional harmonic variations. Retain exactly three learnable parameters with the bounds: beta \u2208 [\u201310, 10], gamma \u2208 [0, 10], and phi \u2208 [0.5, 1.5]. This encourages creative and out\u2013of\u2013the\u2013box exploration of nonlinear blends while ensuring improved accuracy, lower BIC, and better parameter recovery.\n</think>\n\nNew Instructions for Run 123:\n1. Compute the core sum \u201ca\u201d as the sum of fixed components F1 through F11 plus a small constant \u03b4.\n2. Compute a_mod = a \u00d7 [1 + 0.012 \u00d7 sin(a + 0.045)] and then scale it by 1.08.\n3. Sequentially modulate a_mod with:\n\u2003\u2003\u2022 [1 + 0.008 \u00d7 cos(a + 0.065)]\n\u2003\u2003\u2022 [1 + 0.005 \u00d7 sin(a + 0.115)]\n\u2003\u2003\u2022 [1 + 0.004 \u00d7 cos(a + 0.085)]\n\u2003\u2003\u2022 [1 + 0.006 \u00d7 (sin(a + 0.035) \u00d7 cos(a + 0.055))]\n\u2003\u2003\u2022 [1 + 0.003 \u00d7 (sin(a + 0.03) \u00d7 cos(a + 0.05))]\nDefine the product as z.\n4. Define the weight w = (phi \u2013 0.5) / phi.\n\u2003\u2003\u2022 For z \u2265 0, set f_adapt(z) = 1.002 \u00d7 [z^w \u00d7 (ln(1+z))^(1\u2013w)].\n\u2003\u2003\u2022 For z < 0, set f_adapt(z) = phi \u00d7 [softsign(z + \u0394_shift)]^7, where softsign(x) = x/(1+|x|) and \u0394_shift is a small constant.\n5. Define the dynamic threshold T as an 8th\u2013order polynomial in a with an added a\u2079 term:\n\u2003\u2003T = 1 + 0.0005\u00d7a\u00b2 + 0.00005\u00d7a\u00b3 + 0.000005\u00d7a\u2074 + 0.0000001\u00d7a\u2075 + 0.00000001\u00d7a\u2076 + 0.000000001\u00d7a\u2077 + 0.0000000001\u00d7a\u2078 + 0.000001\u00d7a\u00b3 + 0.0000001\u00d7a\u2079.\n6. Define the extra blending composite extra as:\n\u2003\u2003extra = { exp(\u2013a/0.1) \u00d7 [z/(1+|z|)] \u00d7 [1 + 0.005\u00d7sin(1/(1+a))] \u00d7 [1 + 0.002\u00d7cos(0.5\u00d7a)] \u00d7 ([1+0.003\u00d7cos(0.3\u00d7a)]\u00b2) \u00d7 ([1+0.004\u00d7cos(0.3\u00d7a)]\u00b2) \u00d7 [1+0.0025\u00d7cos(0.7\u00d7a)] \u00d7 [1+tanh(0.05\u00d7a)] \u00d7 [1.07\u00d7softplus(0.865/(1+a)) + 0.15\u00d7(0.865/(1+a)) + 0.5\u00d7(0.865/(1+a)) + 0.006\u00d7a] \u00d7 [1 \u2013 0.002\u00d7cos(a)] \u00d7 [1 \u2013 0.0025\u00d7cos(2.5\u00d7a)] \u00d7 [1 + 0.001\u00d7a] \u00d7 [1+cosh(0.001\u00d7a)]^(2+0.0005\u00d7a) + 1e\u20136 }^(0.9478 + 0.00018\u00d7ln(1+a)).\n7. Define the final exponent as:\n\u2003\u2003Exponent = [0.9478 + 0.00018\u00d7ln(1+a)] \u00d7 [1 + 0.003\u00d7sin(2\u00d7a) + 0.001\u00d7cos(3\u00d7a) + 0.0025\u00d7cos(0.7\u00d7a) + 0.004\u00d7sin(2.5\u00d7a) + 0.002\u00d7cos(3.5\u00d7a)].\n8. Define the final transformed signal as:\n\u2003\u2003f(x) = sign(z) \u00d7 { [ f_adapt(z) \u00d7 T \u00d7 extra ]^(Exponent) }.\n9. Compute latent utility U = beta + gamma \u00d7 f(x) and then compute the acceptance probability P(accept=1) = 1/(1 + exp(\u2013U)).\n10. Use exactly three learnable parameters with bounds: beta \u2208 [\u201310, 10], gamma \u2208 [0, 10], and phi \u2208 [0.5, 1.5].\n\nEncourage creative, out\u2013of\u2013the\u2013box exploration by considering alternate nonlinear functions (such as additional tanh or softsign corrections) within the extra composite if that improves mid\u2013range sensitivity, parameter recovery, and overall model performance.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: <think>\nFor run 123, further enhance the model\u2019s ability to capture subtle, extreme rejections by adding additional nonlinear corrections. In particular, introduce a tanh\u2010based factor within the extra composite to capture sharper curvature. For the adaptive transformation on negative z, replace the fixed 7th\u2013power function with one based on softsign (which smoothly bounds extreme values) raised to the 7th power after a small constant shift. Also, expand the dynamic threshold T by adding an additional a\u2079 term to model more extreme nonlinearity. Finally, amplify the final exponent by including an extra sine\u2013cosine modulation term that includes additional harmonic variations. Retain exactly three learnable parameters with the bounds: beta \u2208 [\u201310, 10], gamma \u2208 [0, 10], and phi \u2208 [0.5, 1.5]. This encourages creative and out\u2013of\u2013the\u2013box exploration of nonlinear blends while ensuring improved accuracy, lower BIC, and better parameter recovery.\n</think>\n\nNew Instructions for Run 123:\n1. Compute the core sum \u201ca\u201d as the sum of fixed components F1 through F11 plus a small constant \u03b4.\n2. Compute a_mod = a \u00d7 [1 + 0.012 \u00d7 sin(a + 0.045)] and then scale it by 1.08.\n3. Sequentially modulate a_mod with:\n\u2003\u2003\u2022 [1 + 0.008 \u00d7 cos(a + 0.065)]\n\u2003\u2003\u2022 [1 + 0.005 \u00d7 sin(a + 0.115)]\n\u2003\u2003\u2022 [1 + 0.004 \u00d7 cos(a + 0.085)]\n\u2003\u2003\u2022 [1 + 0.006 \u00d7 (sin(a + 0.035) \u00d7 cos(a + 0.055))]\n\u2003\u2003\u2022 [1 + 0.003 \u00d7 (sin(a + 0.03) \u00d7 cos(a + 0.05))]\nDefine the product as z.\n4. Define the weight w = (phi \u2013 0.5) / phi.\n\u2003\u2003\u2022 For z \u2265 0, set f_adapt(z) = 1.002 \u00d7 [z^w \u00d7 (ln(1+z))^(1\u2013w)].\n\u2003\u2003\u2022 For z < 0, set f_adapt(z) = phi \u00d7 [softsign(z + \u0394_shift)]^7, where softsign(x) = x/(1+|x|) and \u0394_shift is a small constant.\n5. Define the dynamic threshold T as an 8th\u2013order polynomial in a with an added a\u2079 term:\n\u2003\u2003T = 1 + 0.0005\u00d7a\u00b2 + 0.00005\u00d7a\u00b3 + 0.000005\u00d7a\u2074 + 0.0000001\u00d7a\u2075 + 0.00000001\u00d7a\u2076 + 0.000000001\u00d7a\u2077 + 0.0000000001\u00d7a\u2078 + 0.000001\u00d7a\u00b3 + 0.0000001\u00d7a\u2079.\n6. Define the extra blending composite extra as:\n\u2003\u2003extra = { exp(\u2013a/0.1) \u00d7 [z/(1+|z|)] \u00d7 [1 + 0.005\u00d7sin(1/(1+a))] \u00d7 [1 + 0.002\u00d7cos(0.5\u00d7a)] \u00d7 ([1+0.003\u00d7cos(0.3\u00d7a)]\u00b2) \u00d7 ([1+0.004\u00d7cos(0.3\u00d7a)]\u00b2) \u00d7 [1+0.0025\u00d7cos(0.7\u00d7a)] \u00d7 [1+tanh(0.05\u00d7a)] \u00d7 [1.07\u00d7softplus(0.865/(1+a)) + 0.15\u00d7(0.865/(1+a)) + 0.5\u00d7(0.865/(1+a)) + 0.006\u00d7a] \u00d7 [1 \u2013 0.002\u00d7cos(a)] \u00d7 [1 \u2013 0.0025\u00d7cos(2.5\u00d7a)] \u00d7 [1 + 0.001\u00d7a] \u00d7 [1+cosh(0.001\u00d7a)]^(2+0.0005\u00d7a) + 1e\u20136 }^(0.9478 + 0.00018\u00d7ln(1+a)).\n7. Define the final exponent as:\n\u2003\u2003Exponent = [0.9478 + 0.00018\u00d7ln(1+a)] \u00d7 [1 + 0.003\u00d7sin(2\u00d7a) + 0.001\u00d7cos(3\u00d7a) + 0.0025\u00d7cos(0.7\u00d7a) + 0.004\u00d7sin(2.5\u00d7a) + 0.002\u00d7cos(3.5\u00d7a)].\n8. Define the final transformed signal as:\n\u2003\u2003f(x) = sign(z) \u00d7 { [ f_adapt(z) \u00d7 T \u00d7 extra ]^(Exponent) }.\n9. Compute latent utility U = beta + gamma \u00d7 f(x) and then compute the acceptance probability P(accept=1) = 1/(1 + exp(\u2013U)).\n10. Use exactly three learnable parameters with bounds: beta \u2208 [\u201310, 10], gamma \u2208 [0, 10], and phi \u2208 [0.5, 1.5].\n\nEncourage creative, out\u2013of\u2013the\u2013box exploration by considering alternate nonlinear functions (such as additional tanh or softsign corrections) within the extra composite if that improves mid\u2013range sensitivity, parameter recovery, and overall model performance.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<MODEL>\nLet F1 = trial_type  \nLet F2 = trial_role  \nLet F3 = token_opp  \nLet F4 = token_self  \nLet F5 = combined_earning  \nLet F6 = split_opp  \nLet F7 = split_self  \nLet F8 = splitperc_opp  \nLet F9 = splitperc_self  \nLet F10 = accepted_amount  \nLet F11 = accepted_perc  \n\n\u03b4 = 1e-6  \n\u0394_shift = 1e-3  \n\na = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + \u03b4  \n\na_mod = 1.08 * a * (1 + 0.012 * sin(a + 0.045))  \n\nz = a_mod * (1 + 0.008 * cos(a + 0.065)) * (1 + 0.005 * sin(a + 0.115)) * (1 + 0.004 * cos(a + 0.085)) * (1 + 0.006 * (sin(a + 0.035) * cos(a + 0.055))) * (1 + 0.003 * (sin(a + 0.03) * cos(a + 0.05)))  \n\nw = (phi - 0.5) / phi  \n\nf_adapt = { 1.002 * [ (z)^w * (ln(1+z))^(1-w) ]       for z \u2265 0  \n           \u03c6 * [ (z + \u0394_shift)/(1 + |z + \u0394_shift|) ]^7   for z < 0 }  \n\nT = 1 + 0.0005 * a^2 + 0.00005 * a^3 + 0.000005 * a^4 + 0.0000001 * a^5 + 0.00000001 * a^6 + 0.000000001 * a^7 + 0.0000000001 * a^8 + 0.000001 * a^3 + 0.0000001 * a^9  \n\nextra_base = exp(-a/0.1) * (z/(1+|z|)) * (1 + 0.005 * sin(1/(1+a))) * (1 + 0.002 * cos(0.5*a)) * ((1+0.003*cos(0.3*a))^2) * ((1+0.004*cos(0.3*a))^2) * (1 + 0.0025*cos(0.7*a)) * (1 + tanh(0.05*a)) * (1.07 * softplus(0.865/(1+a)) + 0.15*(0.865/(1+a)) + 0.5*(0.865/(1+a)) + 0.006*a) * (1 - 0.002*cos(a)) * (1 - 0.0025*cos(2.5*a)) * (1 + 0.001*a) * ((1+cosh(0.001*a))^(2+0.0005*a))  \nextra = ( extra_base + 1e-6 )^(0.9478 + 0.00018 * ln(1+a))  \n\nExponent = (0.9478 + 0.00018 * ln(1+a)) * (1 + 0.003*sin(2*a) + 0.001*cos(3*a) + 0.0025*cos(0.7*a) + 0.004*sin(2.5*a) + 0.002*cos(3.5*a))  \n\nf_x = sign(z) * ( f_adapt * T * extra )^(Exponent)  \n\nU = beta + gamma * f_x  \n\nP(accept = 1) = 1 / (1 + exp(-U))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"trial_type\": {\n      \"description\": \"Type of proposal indicating relative contributions (1 = equal, 2 = opponent more, 3 = participant more)\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": 3,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"trial_role\": {\n      \"description\": \"Role of the participant (1 = responder, 2 = proposer)\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": 2,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total money earned from tokens (each token is \u00a33)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_opp\": {\n      \"description\": \"Proposed share of the opponent in money (\u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share of the participant in money (\u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"splitperc_opp\": {\n      \"description\": \"Proposed percentage share for the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"splitperc_self\": {\n      \"description\": \"Proposed percentage share for the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"accepted_amount\": {\n      \"description\": \"Amount gained if the proposal is accepted (\u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"accepted_perc\": {\n      \"description\": \"Percentage gain if accepted\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"beta\": {\n      \"description\": \"Baseline utility parameter (inherent bias)\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Scaling parameter for the nonlinear transformed signal\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Modulation parameter controlling the adaptation and weight (affects f_adapt)\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"\u03b4\": {\n      \"description\": \"A small constant added to ensure numerical stability\",\n      \"range\": {\n        \"min\": 1e-6,\n        \"max\": 1e-6,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"\u0394_shift\": {\n      \"description\": \"A small constant shift used in the adaptive transformation for negative z\",\n      \"range\": {\n        \"min\": 1e-3,\n        \"max\": 1e-3,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a\": {\n      \"description\": \"Core sum computed as the sum of fixed components F1 to F11 plus \u03b4\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a_mod\": {\n      \"description\": \"Modulated core sum after initial nonlinear transformation\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"z\": {\n      \"description\": \"Sequentially modulated signal after multiple harmonic adjustments\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"w\": {\n      \"description\": \"Weight derived from phi used to blend power and logarithmic transforms\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_adapt\": {\n      \"description\": \"Adaptive transformation of z with nonlinear correction; uses tanh\u2010like smooth behavior for extreme negatives\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"T\": {\n      \"description\": \"Dynamic threshold computed as an 8th\u2013order polynomial in a with an added a\u2079 term\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"extra\": {\n      \"description\": \"Extra blending composite incorporating exponential, trigonometric, softplus, and hyperbolic functions with nonlinear modulation\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"Exponent\": {\n      \"description\": \"Final exponent incorporating additional sine\u2013cosine harmonic modulation\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_x\": {\n      \"description\": \"Final transformed signal computed as sign(z) multiplied by the powered product of f_adapt, T, and extra\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed from baseline beta and the scaled transformed signal f(x)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"P_accept\": {\n      \"description\": \"Probability of accepting the proposal computed via the logistic function\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"softplus\": {\n      \"description\": \"Softplus function defined as ln(1+exp(x)) used within the extra composite\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"softsign\": {\n      \"description\": \"Softsign function defined as x/(1+|x|) used in the adaptive transformation for negative z\",\n      \"range\": {\n        \"min\": \"-1\",\n        \"max\": \"1\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA computational model predicting responder acceptance by first summing eleven fixed proposal\u2010components from the data and applying a cascade of nonlinear, harmonic modulations. The core signal is adapted via a conditional transformation (using power\u2010 and softsign\u2013based corrections), dynamically thresholded with an 8th\u2013order polynomial (augmented by a ninth\u2013power term) and blended with an extra composite factor featuring multiple trigonometric and softplus components. The final transformed signal scales a baseline utility (beta) via a gain (gamma) to yield latent utility, which is mapped through a logistic function to predict accept/reject responses. Only three parameters (beta, gamma, phi) are learnable with constrained bounds.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['beta', 'gamma', 'phi']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                Let F1 = trial_type  \nLet F2 = trial_role  \nLet F3 = token_opp  \nLet F4 = token_self  \nLet F5 = combined_earning  \nLet F6 = split_opp  \nLet F7 = split_self  \nLet F8 = splitperc_opp  \nLet F9 = splitperc_self  \nLet F10 = accepted_amount  \nLet F11 = accepted_perc  \n\n\u03b4 = 1e-6  \n\u0394_shift = 1e-3  \n\na = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + \u03b4  \n\na_mod = 1.08 * a * (1 + 0.012 * sin(a + 0.045))  \n\nz = a_mod * (1 + 0.008 * cos(a + 0.065)) * (1 + 0.005 * sin(a + 0.115)) * (1 + 0.004 * cos(a + 0.085)) * (1 + 0.006 * (sin(a + 0.035) * cos(a + 0.055))) * (1 + 0.003 * (sin(a + 0.03) * cos(a + 0.05)))  \n\nw = (phi - 0.5) / phi  \n\nf_adapt = { 1.002 * [ (z)^w * (ln(1+z))^(1-w) ]       for z \u2265 0  \n           \u03c6 * [ (z + \u0394_shift)/(1 + |z + \u0394_shift|) ]^7   for z < 0 }  \n\nT = 1 + 0.0005 * a^2 + 0.00005 * a^3 + 0.000005 * a^4 + 0.0000001 * a^5 + 0.00000001 * a^6 + 0.000000001 * a^7 + 0.0000000001 * a^8 + 0.000001 * a^3 + 0.0000001 * a^9  \n\nextra_base = exp(-a/0.1) * (z/(1+|z|)) * (1 + 0.005 * sin(1/(1+a))) * (1 + 0.002 * cos(0.5*a)) * ((1+0.003*cos(0.3*a))^2) * ((1+0.004*cos(0.3*a))^2) * (1 + 0.0025*cos(0.7*a)) * (1 + tanh(0.05*a)) * (1.07 * softplus(0.865/(1+a)) + 0.15*(0.865/(1+a)) + 0.5*(0.865/(1+a)) + 0.006*a) * (1 - 0.002*cos(a)) * (1 - 0.0025*cos(2.5*a)) * (1 + 0.001*a) * ((1+cosh(0.001*a))^(2+0.0005*a))  \nextra = ( extra_base + 1e-6 )^(0.9478 + 0.00018 * ln(1+a))  \n\nExponent = (0.9478 + 0.00018 * ln(1+a)) * (1 + 0.003*sin(2*a) + 0.001*cos(3*a) + 0.0025*cos(0.7*a) + 0.004*sin(2.5*a) + 0.002*cos(3.5*a))  \n\nf_x = sign(z) * ( f_adapt * T * extra )^(Exponent)  \n\nU = beta + gamma * f_x  \n\nP(accept = 1) = 1 / (1 + exp(-U))\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"trial_type\": {\n      \"description\": \"Type of proposal indicating relative contributions (1 = equal, 2 = opponent more, 3 = participant more)\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": 3,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"trial_role\": {\n      \"description\": \"Role of the participant (1 = responder, 2 = proposer)\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": 2,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total money earned from tokens (each token is \\u00a33)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_opp\": {\n      \"description\": \"Proposed share of the opponent in money (\\u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share of the participant in money (\\u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"splitperc_opp\": {\n      \"description\": \"Proposed percentage share for the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"splitperc_self\": {\n      \"description\": \"Proposed percentage share for the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"accepted_amount\": {\n      \"description\": \"Amount gained if the proposal is accepted (\\u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"accepted_perc\": {\n      \"description\": \"Percentage gain if accepted\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"beta\": {\n      \"description\": \"Baseline utility parameter (inherent bias)\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Scaling parameter for the nonlinear transformed signal\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Modulation parameter controlling the adaptation and weight (affects f_adapt)\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"\\u03b4\": {\n      \"description\": \"A small constant added to ensure numerical stability\",\n      \"range\": {\n        \"min\": 1e-06,\n        \"max\": 1e-06,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"\\u0394_shift\": {\n      \"description\": \"A small constant shift used in the adaptive transformation for negative z\",\n      \"range\": {\n        \"min\": 0.001,\n        \"max\": 0.001,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a\": {\n      \"description\": \"Core sum computed as the sum of fixed components F1 to F11 plus \\u03b4\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a_mod\": {\n      \"description\": \"Modulated core sum after initial nonlinear transformation\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"z\": {\n      \"description\": \"Sequentially modulated signal after multiple harmonic adjustments\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"w\": {\n      \"description\": \"Weight derived from phi used to blend power and logarithmic transforms\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_adapt\": {\n      \"description\": \"Adaptive transformation of z with nonlinear correction; uses tanh\\u2010like smooth behavior for extreme negatives\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"T\": {\n      \"description\": \"Dynamic threshold computed as an 8th\\u2013order polynomial in a with an added a\\u2079 term\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"extra\": {\n      \"description\": \"Extra blending composite incorporating exponential, trigonometric, softplus, and hyperbolic functions with nonlinear modulation\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"Exponent\": {\n      \"description\": \"Final exponent incorporating additional sine\\u2013cosine harmonic modulation\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_x\": {\n      \"description\": \"Final transformed signal computed as sign(z) multiplied by the powered product of f_adapt, T, and extra\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed from baseline beta and the scaled transformed signal f(x)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"P_accept\": {\n      \"description\": \"Probability of accepting the proposal computed via the logistic function\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"softplus\": {\n      \"description\": \"Softplus function defined as ln(1+exp(x)) used within the extra composite\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"softsign\": {\n      \"description\": \"Softsign function defined as x/(1+|x|) used in the adaptive transformation for negative z\",\n      \"range\": {\n        \"min\": \"-1\",\n        \"max\": \"1\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, beta=0, gamma=1, phi=1):\n    model_predictions = []\n    delta = 1e-6\n    delta_shift = 1e-3\n\n    def softplus(x):\n        return math.log(1 + math.exp(x))\n\n    def softsign(x):\n        return x / (1 + abs(x))\n    \n    def sign(x):\n        if x > 0:\n            return 1\n        elif x < 0:\n            return -1\n        else:\n            return 0\n\n    for trial in trial_data:\n        F1 = trial.get(\"trial_type\", 0)\n        F2 = trial.get(\"trial_role\", 0)\n        F3 = trial.get(\"token_opp\", 0)\n        F4 = trial.get(\"token_self\", 0)\n        F5 = trial.get(\"combined_earning\", 0)\n        F6 = trial.get(\"split_opp\", 0)\n        F7 = trial.get(\"split_self\", 0)\n        F8 = trial.get(\"splitperc_opp\", 0)\n        F9 = trial.get(\"splitperc_self\", 0)\n        F10 = trial.get(\"accepted_amount\", 0)\n        F11 = trial.get(\"accepted_perc\", 0)\n        \n        a = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + delta\n\n        a_mod = 1.08 * a * (1 + 0.012 * math.sin(a + 0.045))\n\n        z = a_mod * (1 + 0.008 * math.cos(a + 0.065)) * (1 + 0.005 * math.sin(a + 0.115)) * (1 + 0.004 * math.cos(a + 0.085)) * (1 + 0.006 * (math.sin(a + 0.035) * math.cos(a + 0.055))) * (1 + 0.003 * (math.sin(a + 0.03) * math.cos(a + 0.05)))\n\n        w = (phi - 0.5) / phi\n        \n        if z >= 0:\n            f_adapt = 1.002 * ( (z)**w * (math.log(1+z))**(1-w) )\n        else:\n            f_adapt = phi * ( (z + delta_shift)/(1 + abs(z + delta_shift)) )**7\n\n        T = 1 + 0.0005 * a**2 + 0.00005 * a**3 + 0.000005 * a**4 + 0.0000001 * a**5 + 0.00000001 * a**6 + 0.000000001 * a**7 + 0.0000000001 * a**8 + 0.000001 * a**3 + 0.0000001 * a**9\n\n        extra_base = math.exp(-a/0.1) * (z/(1+abs(z))) * (1 + 0.005 * math.sin(1/(1+a))) * (1 + 0.002 * math.cos(0.5*a)) * ((1+0.003*math.cos(0.3*a))**2) * ((1+0.004*math.cos(0.3*a))**2) * (1 + 0.0025*math.cos(0.7*a)) * (1 + math.tanh(0.05*a)) * (1.07 * softplus(0.865/(1+a)) + 0.15*(0.865/(1+a)) + 0.5*(0.865/(1+a)) + 0.006*a) * (1 - 0.002*math.cos(a)) * (1 - 0.0025*math.cos(2.5*a)) * (1 + 0.001*a) * ((1+math.cosh(0.001*a))**(2+0.0005*a))\n        extra = ( extra_base + 1e-6 )**(0.9478 + 0.00018 * math.log(1+a))\n\n        Exponent = (0.9478 + 0.00018 * math.log(1+a)) * (1 + 0.003*math.sin(2*a) + 0.001*math.cos(3*a) + 0.0025*math.cos(0.7*a) + 0.004*math.sin(2.5*a) + 0.002*math.cos(3.5*a))\n\n        f_x = sign(z) * ( f_adapt * T * extra )**(Exponent)\n\n        U = beta + gamma * f_x\n\n        P_accept = 1 / (1 + math.exp(-U))\n\n        model_predictions.append(P_accept)\n\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '[{\"ID\": 0, \"group\": \"treatment\", \"trial_number\": 1, \"trial_type\": 3, \"trial_role\": 1, \"token_opp\": 514, \"token_self\": 635, \"combined_earning\": 3447, \"split_opp\": 1626.0, \"split_self\": 1821.0, \"splitperc_opp\": 47, \"splitperc_self\": 53, \"accept\": 1.0, \"accepted_amount\": 1626.0, \"accepted_perc\": 47.0, \"proposed_perc\": 47.16, \"proposed_amount\": 1626.0138}, {\"ID\": 1, \"group\": \"treatment\", \"trial_number\": 2, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 652, \"token_self\": 747, \"combined_earning\": 4197, \"split_opp\": 2098.0, \"split_self\": 2099.0, \"splitperc_opp\": 50, \"splitperc_self\": 50, \"accept\": 1.0, \"accepted_amount\": 2098.0, \"accepted_perc\": 50.0, \"proposed_perc\": 49.988087, \"proposed_amount\": 2098.0317}, {\"ID\": 2, \"group\": \"treatment\", \"trial_number\": 3, \"trial_type\": 2, \"trial_role\": 1, \"token_opp\": 528, \"token_self\": 815, \"combined_earning\": 4029, \"split_opp\": 2417.0, \"split_self\": 1612.0, \"splitperc_opp\": 60, \"splitperc_self\": 40, \"accept\": 0.0, \"accepted_amount\": 0.0, \"accepted_perc\": 0.0, \"proposed_perc\": 60.0, \"proposed_amount\": 2417.4}, {\"ID\": 3, \"group\": \"treatment\", \"trial_number\": 4, \"trial_type\": 2, \"trial_role\": 1, \"token_opp\": 521, \"token_self\": 616, \"combined_earning\": 3411, \"split_opp\": 2047.0, \"split_self\": 1364.0, \"splitperc_opp\": 60, \"splitperc_self\": 40, \"accept\": 0.0, \"accepted_amount\": 0.0, \"accepted_perc\": 0.0, \"proposed_perc\": 60.0, \"proposed_amount\": 2046.6}, {\"ID\": 4, \"group\": \"treatment\", \"trial_number\": 5, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 791, \"token_self\": 672, \"combined_earning\": 4389, \"split_opp\": 2194.0, \"split_self\": 2195.0, \"splitperc_opp\": 50, \"splitperc_self\": 50, \"accept\": 1.0, \"accepted_amount\": 2194.0, \"accepted_perc\": 50.0, \"proposed_perc\": 49.988608, \"proposed_amount\": 2194.0305}]'\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n```",
      "timestamp": 1743546415.412255
    }
  ],
  "learnable_parameters": {
    "beta": {
      "description": "Baseline utility parameter (inherent bias)",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Scaling parameter for the nonlinear transformed signal",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "phi": {
      "description": "Modulation parameter controlling the adaptation and weight (affects f_adapt)",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "Let F1 = trial_type  \nLet F2 = trial_role  \nLet F3 = token_opp  \nLet F4 = token_self  \nLet F5 = combined_earning  \nLet F6 = split_opp  \nLet F7 = split_self  \nLet F8 = splitperc_opp  \nLet F9 = splitperc_self  \nLet F10 = accepted_amount  \nLet F11 = accepted_perc  \n\n\u03b4 = 1e-6  \n\u0394_shift = 1e-3  \n\na = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + \u03b4  \n\na_mod = 1.08 * a * (1 + 0.012 * sin(a + 0.045))  \n\nz = a_mod * (1 + 0.008 * cos(a + 0.065)) * (1 + 0.005 * sin(a + 0.115)) * (1 + 0.004 * cos(a + 0.085)) * (1 + 0.006 * (sin(a + 0.035) * cos(a + 0.055))) * (1 + 0.003 * (sin(a + 0.03) * cos(a + 0.05)))  \n\nw = (phi - 0.5) / phi  \n\nf_adapt = { 1.002 * [ (z)^w * (ln(1+z))^(1-w) ]       for z \u2265 0  \n           \u03c6 * [ (z + \u0394_shift)/(1 + |z + \u0394_shift|) ]^7   for z < 0 }  \n\nT = 1 + 0.0005 * a^2 + 0.00005 * a^3 + 0.000005 * a^4 + 0.0000001 * a^5 + 0.00000001 * a^6 + 0.000000001 * a^7 + 0.0000000001 * a^8 + 0.000001 * a^3 + 0.0000001 * a^9  \n\nextra_base = exp(-a/0.1) * (z/(1+|z|)) * (1 + 0.005 * sin(1/(1+a))) * (1 + 0.002 * cos(0.5*a)) * ((1+0.003*cos(0.3*a))^2) * ((1+0.004*cos(0.3*a))^2) * (1 + 0.0025*cos(0.7*a)) * (1 + tanh(0.05*a)) * (1.07 * softplus(0.865/(1+a)) + 0.15*(0.865/(1+a)) + 0.5*(0.865/(1+a)) + 0.006*a) * (1 - 0.002*cos(a)) * (1 - 0.0025*cos(2.5*a)) * (1 + 0.001*a) * ((1+cosh(0.001*a))^(2+0.0005*a))  \nextra = ( extra_base + 1e-6 )^(0.9478 + 0.00018 * ln(1+a))  \n\nExponent = (0.9478 + 0.00018 * ln(1+a)) * (1 + 0.003*sin(2*a) + 0.001*cos(3*a) + 0.0025*cos(0.7*a) + 0.004*sin(2.5*a) + 0.002*cos(3.5*a))  \n\nf_x = sign(z) * ( f_adapt * T * extra )^(Exponent)  \n\nU = beta + gamma * f_x  \n\nP(accept = 1) = 1 / (1 + exp(-U))",
  "variable_descriptions": {
    "trial_type": {
      "description": "Type of proposal indicating relative contributions (1 = equal, 2 = opponent more, 3 = participant more)",
      "range": {
        "min": 1,
        "max": 3,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "trial_role": {
      "description": "Role of the participant (1 = responder, 2 = proposer)",
      "range": {
        "min": 1,
        "max": 2,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent",
      "range": {
        "min": 0,
        "max": 1000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Number of tokens found by the participant",
      "range": {
        "min": 0,
        "max": 1000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "combined_earning": {
      "description": "Total money earned from tokens (each token is \u00a33)",
      "range": {
        "min": 0,
        "max": 100000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "split_opp": {
      "description": "Proposed share of the opponent in money (\u00a3)",
      "range": {
        "min": 0,
        "max": 10000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "split_self": {
      "description": "Proposed share of the participant in money (\u00a3)",
      "range": {
        "min": 0,
        "max": 10000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "splitperc_opp": {
      "description": "Proposed percentage share for the opponent",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "splitperc_self": {
      "description": "Proposed percentage share for the participant",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "accepted_amount": {
      "description": "Amount gained if the proposal is accepted (\u00a3)",
      "range": {
        "min": 0,
        "max": 10000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "accepted_perc": {
      "description": "Percentage gain if accepted",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "beta": {
      "description": "Baseline utility parameter (inherent bias)",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Scaling parameter for the nonlinear transformed signal",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "phi": {
      "description": "Modulation parameter controlling the adaptation and weight (affects f_adapt)",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "\u03b4": {
      "description": "A small constant added to ensure numerical stability",
      "range": {
        "min": 1e-06,
        "max": 1e-06,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "\u0394_shift": {
      "description": "A small constant shift used in the adaptive transformation for negative z",
      "range": {
        "min": 0.001,
        "max": 0.001,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "a": {
      "description": "Core sum computed as the sum of fixed components F1 to F11 plus \u03b4",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "a_mod": {
      "description": "Modulated core sum after initial nonlinear transformation",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "z": {
      "description": "Sequentially modulated signal after multiple harmonic adjustments",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "w": {
      "description": "Weight derived from phi used to blend power and logarithmic transforms",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "f_adapt": {
      "description": "Adaptive transformation of z with nonlinear correction; uses tanh\u2010like smooth behavior for extreme negatives",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "T": {
      "description": "Dynamic threshold computed as an 8th\u2013order polynomial in a with an added a\u2079 term",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "extra": {
      "description": "Extra blending composite incorporating exponential, trigonometric, softplus, and hyperbolic functions with nonlinear modulation",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "Exponent": {
      "description": "Final exponent incorporating additional sine\u2013cosine harmonic modulation",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "f_x": {
      "description": "Final transformed signal computed as sign(z) multiplied by the powered product of f_adapt, T, and extra",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "U": {
      "description": "Latent utility computed from baseline beta and the scaled transformed signal f(x)",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "P_accept": {
      "description": "Probability of accepting the proposal computed via the logistic function",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "softplus": {
      "description": "Softplus function defined as ln(1+exp(x)) used within the extra composite",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "softsign": {
      "description": "Softsign function defined as x/(1+|x|) used in the adaptive transformation for negative z",
      "range": {
        "min": "-1",
        "max": "1",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "A computational model predicting responder acceptance by first summing eleven fixed proposal\u2010components from the data and applying a cascade of nonlinear, harmonic modulations. The core signal is adapted via a conditional transformation (using power\u2010 and softsign\u2013based corrections), dynamically thresholded with an 8th\u2013order polynomial (augmented by a ninth\u2013power term) and blended with an extra composite factor featuring multiple trigonometric and softplus components. The final transformed signal scales a baseline utility (beta) via a gain (gamma) to yield latent utility, which is mapped through a logistic function to predict accept/reject responses. Only three parameters (beta, gamma, phi) are learnable with constrained bounds.",
  "target_variable": "accept",
  "full_reasoning": "<MODEL>\nLet F1 = trial_type  \nLet F2 = trial_role  \nLet F3 = token_opp  \nLet F4 = token_self  \nLet F5 = combined_earning  \nLet F6 = split_opp  \nLet F7 = split_self  \nLet F8 = splitperc_opp  \nLet F9 = splitperc_self  \nLet F10 = accepted_amount  \nLet F11 = accepted_perc  \n\n\u03b4 = 1e-6  \n\u0394_shift = 1e-3  \n\na = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + \u03b4  \n\na_mod = 1.08 * a * (1 + 0.012 * sin(a + 0.045))  \n\nz = a_mod * (1 + 0.008 * cos(a + 0.065)) * (1 + 0.005 * sin(a + 0.115)) * (1 + 0.004 * cos(a + 0.085)) * (1 + 0.006 * (sin(a + 0.035) * cos(a + 0.055))) * (1 + 0.003 * (sin(a + 0.03) * cos(a + 0.05)))  \n\nw = (phi - 0.5) / phi  \n\nf_adapt = { 1.002 * [ (z)^w * (ln(1+z))^(1-w) ]       for z \u2265 0  \n           \u03c6 * [ (z + \u0394_shift)/(1 + |z + \u0394_shift|) ]^7   for z < 0 }  \n\nT = 1 + 0.0005 * a^2 + 0.00005 * a^3 + 0.000005 * a^4 + 0.0000001 * a^5 + 0.00000001 * a^6 + 0.000000001 * a^7 + 0.0000000001 * a^8 + 0.000001 * a^3 + 0.0000001 * a^9  \n\nextra_base = exp(-a/0.1) * (z/(1+|z|)) * (1 + 0.005 * sin(1/(1+a))) * (1 + 0.002 * cos(0.5*a)) * ((1+0.003*cos(0.3*a))^2) * ((1+0.004*cos(0.3*a))^2) * (1 + 0.0025*cos(0.7*a)) * (1 + tanh(0.05*a)) * (1.07 * softplus(0.865/(1+a)) + 0.15*(0.865/(1+a)) + 0.5*(0.865/(1+a)) + 0.006*a) * (1 - 0.002*cos(a)) * (1 - 0.0025*cos(2.5*a)) * (1 + 0.001*a) * ((1+cosh(0.001*a))^(2+0.0005*a))  \nextra = ( extra_base + 1e-6 )^(0.9478 + 0.00018 * ln(1+a))  \n\nExponent = (0.9478 + 0.00018 * ln(1+a)) * (1 + 0.003*sin(2*a) + 0.001*cos(3*a) + 0.0025*cos(0.7*a) + 0.004*sin(2.5*a) + 0.002*cos(3.5*a))  \n\nf_x = sign(z) * ( f_adapt * T * extra )^(Exponent)  \n\nU = beta + gamma * f_x  \n\nP(accept = 1) = 1 / (1 + exp(-U))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"trial_type\": {\n      \"description\": \"Type of proposal indicating relative contributions (1 = equal, 2 = opponent more, 3 = participant more)\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": 3,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"trial_role\": {\n      \"description\": \"Role of the participant (1 = responder, 2 = proposer)\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": 2,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total money earned from tokens (each token is \u00a33)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_opp\": {\n      \"description\": \"Proposed share of the opponent in money (\u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share of the participant in money (\u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"splitperc_opp\": {\n      \"description\": \"Proposed percentage share for the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"splitperc_self\": {\n      \"description\": \"Proposed percentage share for the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"accepted_amount\": {\n      \"description\": \"Amount gained if the proposal is accepted (\u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"accepted_perc\": {\n      \"description\": \"Percentage gain if accepted\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"beta\": {\n      \"description\": \"Baseline utility parameter (inherent bias)\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Scaling parameter for the nonlinear transformed signal\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Modulation parameter controlling the adaptation and weight (affects f_adapt)\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"\u03b4\": {\n      \"description\": \"A small constant added to ensure numerical stability\",\n      \"range\": {\n        \"min\": 1e-6,\n        \"max\": 1e-6,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"\u0394_shift\": {\n      \"description\": \"A small constant shift used in the adaptive transformation for negative z\",\n      \"range\": {\n        \"min\": 1e-3,\n        \"max\": 1e-3,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a\": {\n      \"description\": \"Core sum computed as the sum of fixed components F1 to F11 plus \u03b4\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a_mod\": {\n      \"description\": \"Modulated core sum after initial nonlinear transformation\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"z\": {\n      \"description\": \"Sequentially modulated signal after multiple harmonic adjustments\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"w\": {\n      \"description\": \"Weight derived from phi used to blend power and logarithmic transforms\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_adapt\": {\n      \"description\": \"Adaptive transformation of z with nonlinear correction; uses tanh\u2010like smooth behavior for extreme negatives\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"T\": {\n      \"description\": \"Dynamic threshold computed as an 8th\u2013order polynomial in a with an added a\u2079 term\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"extra\": {\n      \"description\": \"Extra blending composite incorporating exponential, trigonometric, softplus, and hyperbolic functions with nonlinear modulation\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"Exponent\": {\n      \"description\": \"Final exponent incorporating additional sine\u2013cosine harmonic modulation\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_x\": {\n      \"description\": \"Final transformed signal computed as sign(z) multiplied by the powered product of f_adapt, T, and extra\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed from baseline beta and the scaled transformed signal f(x)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"P_accept\": {\n      \"description\": \"Probability of accepting the proposal computed via the logistic function\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"softplus\": {\n      \"description\": \"Softplus function defined as ln(1+exp(x)) used within the extra composite\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"softsign\": {\n      \"description\": \"Softsign function defined as x/(1+|x|) used in the adaptive transformation for negative z\",\n      \"range\": {\n        \"min\": \"-1\",\n        \"max\": \"1\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA computational model predicting responder acceptance by first summing eleven fixed proposal\u2010components from the data and applying a cascade of nonlinear, harmonic modulations. The core signal is adapted via a conditional transformation (using power\u2010 and softsign\u2013based corrections), dynamically thresholded with an 8th\u2013order polynomial (augmented by a ninth\u2013power term) and blended with an extra composite factor featuring multiple trigonometric and softplus components. The final transformed signal scales a baseline utility (beta) via a gain (gamma) to yield latent utility, which is mapped through a logistic function to predict accept/reject responses. Only three parameters (beta, gamma, phi) are learnable with constrained bounds.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: Let F1 = trial_type  \nLet F2 = trial_role  \nLet F3 = token_opp  \nLet F4 = token_self  \nLet F5 = combined_earning  \nLet F6 = split_opp  \nLet F7 = split_self  \nLet F8 = splitperc_opp  \nLet F9 = splitperc_self  \nLet F10 = accepted_amount  \nLet F11 = accepted_perc  \n\n\u03b4 = 1e-6  \n\u0394_shift = 1e-3  \n\na = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + \u03b4  \n\na_mod = 1.08 * a * (1 + 0.012 * sin(a + 0.045))  \n\nz = a_mod * (1 + 0.008 * cos(a + 0.065)) * (1 + 0.005 * sin(a + 0.115)) * (1 + 0.004 * cos(a + 0.085)) * (1 + 0.006 * (sin(a + 0.035) * cos(a + 0.055))) * (1 + 0.003 * (sin(a + 0.03) * cos(a + 0.05)))  \n\nw = (phi - 0.5) / phi  \n\nf_adapt = { 1.002 * [ (z)^w * (ln(1+z))^(1-w) ]       for z \u2265 0  \n           \u03c6 * [ (z + \u0394_shift)/(1 + |z + \u0394_shift|) ]^7   for z < 0 }  \n\nT = 1 + 0.0005 * a^2 + 0.00005 * a^3 + 0.000005 * a^4 + 0.0000001 * a^5 + 0.00000001 * a^6 + 0.000000001 * a^7 + 0.0000000001 * a^8 + 0.000001 * a^3 + 0.0000001 * a^9  \n\nextra_base = exp(-a/0.1) * (z/(1+|z|)) * (1 + 0.005 * sin(1/(1+a))) * (1 + 0.002 * cos(0.5*a)) * ((1+0.003*cos(0.3*a))^2) * ((1+0.004*cos(0.3*a))^2) * (1 + 0.0025*cos(0.7*a)) * (1 + tanh(0.05*a)) * (1.07 * softplus(0.865/(1+a)) + 0.15*(0.865/(1+a)) + 0.5*(0.865/(1+a)) + 0.006*a) * (1 - 0.002*cos(a)) * (1 - 0.0025*cos(2.5*a)) * (1 + 0.001*a) * ((1+cosh(0.001*a))^(2+0.0005*a))  \nextra = ( extra_base + 1e-6 )^(0.9478 + 0.00018 * ln(1+a))  \n\nExponent = (0.9478 + 0.00018 * ln(1+a)) * (1 + 0.003*sin(2*a) + 0.001*cos(3*a) + 0.0025*cos(0.7*a) + 0.004*sin(2.5*a) + 0.002*cos(3.5*a))  \n\nf_x = sign(z) * ( f_adapt * T * extra )^(Exponent)  \n\nU = beta + gamma * f_x  \n\nP(accept = 1) = 1 / (1 + exp(-U))\nSummary: A computational model predicting responder acceptance by first summing eleven fixed proposal\u2010components from the data and applying a cascade of nonlinear, harmonic modulations. The core signal is adapted via a conditional transformation (using power\u2010 and softsign\u2013based corrections), dynamically thresholded with an 8th\u2013order polynomial (augmented by a ninth\u2013power term) and blended with an extra composite factor featuring multiple trigonometric and softplus components. The final transformed signal scales a baseline utility (beta) via a gain (gamma) to yield latent utility, which is mapped through a logistic function to predict accept/reject responses. Only three parameters (beta, gamma, phi) are learnable with constrained bounds.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, beta=0, gamma=1, phi=1):\n    model_predictions = []\n    delta = 1e-6\n    delta_shift = 1e-3\n\n    def softplus(x):\n        return math.log(1 + math.exp(x))\n\n    def softsign(x):\n        return x / (1 + abs(x))\n    \n    def sign(x):\n        if x > 0:\n            return 1\n        elif x < 0:\n            return -1\n        else:\n            return 0\n\n    for trial in trial_data:\n        F1 = trial.get(\"trial_type\", 0)\n        F2 = trial.get(\"trial_role\", 0)\n        F3 = trial.get(\"token_opp\", 0)\n        F4 = trial.get(\"token_self\", 0)\n        F5 = trial.get(\"combined_earning\", 0)\n        F6 = trial.get(\"split_opp\", 0)\n        F7 = trial.get(\"split_self\", 0)\n        F8 = trial.get(\"splitperc_opp\", 0)\n        F9 = trial.get(\"splitperc_self\", 0)\n        F10 = trial.get(\"accepted_amount\", 0)\n        F11 = trial.get(\"accepted_perc\", 0)\n        \n        a = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + delta\n\n        a_mod = 1.08 * a * (1 + 0.012 * math.sin(a + 0.045))\n\n        z = a_mod * (1 + 0.008 * math.cos(a + 0.065)) * (1 + 0.005 * math.sin(a + 0.115)) * (1 + 0.004 * math.cos(a + 0.085)) * (1 + 0.006 * (math.sin(a + 0.035) * math.cos(a + 0.055))) * (1 + 0.003 * (math.sin(a + 0.03) * math.cos(a + 0.05)))\n\n        w = (phi - 0.5) / phi\n        \n        if z >= 0:\n            f_adapt = 1.002 * ( (z)**w * (math.log(1+z))**(1-w) )\n        else:\n            f_adapt = phi * ( (z + delta_shift)/(1 + abs(z + delta_shift)) )**7\n\n        T = 1 + 0.0005 * a**2 + 0.00005 * a**3 + 0.000005 * a**4 + 0.0000001 * a**5 + 0.00000001 * a**6 + 0.000000001 * a**7 + 0.0000000001 * a**8 + 0.000001 * a**3 + 0.0000001 * a**9\n\n        extra_base = math.exp(-a/0.1) * (z/(1+abs(z))) * (1 + 0.005 * math.sin(1/(1+a))) * (1 + 0.002 * math.cos(0.5*a)) * ((1+0.003*math.cos(0.3*a))**2) * ((1+0.004*math.cos(0.3*a))**2) * (1 + 0.0025*math.cos(0.7*a)) * (1 + math.tanh(0.05*a)) * (1.07 * softplus(0.865/(1+a)) + 0.15*(0.865/(1+a)) + 0.5*(0.865/(1+a)) + 0.006*a) * (1 - 0.002*math.cos(a)) * (1 - 0.0025*math.cos(2.5*a)) * (1 + 0.001*a) * ((1+math.cosh(0.001*a))**(2+0.0005*a))\n        extra = ( extra_base + 1e-6 )**(0.9478 + 0.00018 * math.log(1+a))\n\n        Exponent = (0.9478 + 0.00018 * math.log(1+a)) * (1 + 0.003*math.sin(2*a) + 0.001*math.cos(3*a) + 0.0025*math.cos(0.7*a) + 0.004*math.sin(2.5*a) + 0.002*math.cos(3.5*a))\n\n        f_x = sign(z) * ( f_adapt * T * extra )**(Exponent)\n\n        U = beta + gamma * f_x\n\n        P_accept = 1 / (1 + math.exp(-U))\n\n        model_predictions.append(P_accept)\n\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.5335775335775336,
  "fitting_results": [
    {
      "beta": 1.0530020589632052,
      "gamma": 8.593086342181508,
      "phi": 0.5065760578232656,
      "success": true,
      "log_likelihood": -44.277420737975305,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.25,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.3812901102072228,
      "gamma": 5.660707694230669,
      "phi": 0.7841864862960338,
      "success": true,
      "log_likelihood": -29.27742074150091,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 8.624153232660984,
      "gamma": 2.28744477274728,
      "phi": 1.1185681337600957,
      "success": true,
      "log_likelihood": -28.277420741735956,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.1471137154295512,
      "gamma": 6.562783564972721,
      "phi": 0.8766708366080246,
      "success": true,
      "log_likelihood": -32.27742074079579,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -4.424100467715033,
      "gamma": 1.0328186707436238,
      "phi": 0.8272956840006088,
      "success": true,
      "log_likelihood": -31.27742074103083,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.551485413759373,
      "gamma": 9.779855277790872,
      "phi": 0.9799880843611763,
      "success": true,
      "log_likelihood": -24.277420742676117,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -8.2325923088538,
      "gamma": 7.9408896467362755,
      "phi": 0.8058368354415152,
      "success": true,
      "log_likelihood": -11.27742074573165,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -5.026417832002639,
      "gamma": 0.959154576076855,
      "phi": 1.4985784970506892,
      "success": true,
      "log_likelihood": -23.277420742911158,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -6.626018801070714,
      "gamma": 7.549742163091047,
      "phi": 1.1390373427811549,
      "success": true,
      "log_likelihood": -11.27742074573165,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.3063689985070432,
      "gamma": 2.961083090231571,
      "phi": 1.0987973791321666,
      "success": true,
      "log_likelihood": -33.27742074056075,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -6.054780128180457,
      "gamma": 1.0685570642172304,
      "phi": 1.1447249890494193,
      "success": true,
      "log_likelihood": -31.27742074103083,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 7.2993786974886525,
      "gamma": 3.0957264359071357,
      "phi": 1.29074225678028,
      "success": true,
      "log_likelihood": -43.277420738210346,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.2777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -7.056547271380225,
      "gamma": 9.856615236801371,
      "phi": 0.6572566073432663,
      "success": true,
      "log_likelihood": -32.2774207407958,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 6.635889409614329,
      "gamma": 4.128011997578466,
      "phi": 1.169613512791763,
      "success": true,
      "log_likelihood": -11.27742074573165,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 4.060432684886006,
      "gamma": 1.8235075802180456,
      "phi": 1.1430345090703116,
      "success": true,
      "log_likelihood": -11.27742074573165,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 6.677901803073038,
      "gamma": 1.3245034507593967,
      "phi": 0.6196550663842728,
      "success": true,
      "log_likelihood": -11.27742074573165,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.5369453340965826,
      "gamma": 8.161917237241079,
      "phi": 0.7628668590337756,
      "success": true,
      "log_likelihood": -11.27742074573165,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -5.8380971540289295,
      "gamma": 4.703495683198189,
      "phi": 0.7444002753933965,
      "success": true,
      "log_likelihood": -16.277420744556444,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.0652163464735764,
      "gamma": 8.562360722873091,
      "phi": 1.182939261282412,
      "success": true,
      "log_likelihood": -15.277420744791481,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -5.917925673687567,
      "gamma": 1.6074192102098206,
      "phi": 0.9846949982372801,
      "success": true,
      "log_likelihood": -11.27742074573165,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 7.483349758986741,
      "gamma": 5.317941729377806,
      "phi": 0.886164436134387,
      "success": true,
      "log_likelihood": -27.277420741970992,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.352822585391797,
      "gamma": 5.743431577216795,
      "phi": 0.5897554134067188,
      "success": true,
      "log_likelihood": -16.277420744556444,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.8879642762538626,
      "gamma": 8.779229993655374,
      "phi": 0.5767509115665979,
      "success": true,
      "log_likelihood": -34.27742074032571,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -6.21288475128718,
      "gamma": 9.85666811302017,
      "phi": 1.1920595620854413,
      "success": true,
      "log_likelihood": -28.277420741735952,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.2976439809449918,
      "gamma": 5.104130869768139,
      "phi": 1.333841265008864,
      "success": true,
      "log_likelihood": -29.277420741500915,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -6.9536006845049485,
      "gamma": 9.758554649701646,
      "phi": 1.3505186886396718,
      "success": true,
      "log_likelihood": -26.277420742206036,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 7.930430039056166,
      "gamma": 5.375293587845263,
      "phi": 1.0399417616863573,
      "success": true,
      "log_likelihood": -27.277420741970996,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 6.001099376063593,
      "gamma": 0.19561424399607175,
      "phi": 0.8046953343704967,
      "success": true,
      "log_likelihood": -37.277420739620595,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 8.147978930989723,
      "gamma": 8.358887966518848,
      "phi": 1.1149116449975853,
      "success": true,
      "log_likelihood": -15.277420744791485,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 8.111631105020443,
      "gamma": 7.371576158298044,
      "phi": 0.9742254583153409,
      "success": true,
      "log_likelihood": -19.277420743851323,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -8.561692194652577,
      "gamma": 9.054957920155168,
      "phi": 1.061388389713006,
      "success": true,
      "log_likelihood": -11.27742074573165,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 8.928839397135459,
      "gamma": 8.101887940282554,
      "phi": 1.0208572262995177,
      "success": true,
      "log_likelihood": -44.277420737975305,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -7.85938831319593,
      "gamma": 6.579846065090028,
      "phi": 0.7132517425560561,
      "success": true,
      "log_likelihood": -32.2774207407958,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -7.08649007055695,
      "gamma": 5.170823137271158,
      "phi": 0.7717593092083861,
      "success": true,
      "log_likelihood": -33.27742074056075,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -9.18598010430692,
      "gamma": 0.7494197682882109,
      "phi": 0.9937324680150698,
      "success": true,
      "log_likelihood": -11.27742074573165,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 9.458791223617197,
      "gamma": 0.9754156399224923,
      "phi": 0.9814184993954121,
      "success": true,
      "log_likelihood": -24.277420742676114,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -7.921759395275727,
      "gamma": 7.567957942785033,
      "phi": 1.1696480783039085,
      "success": true,
      "log_likelihood": -22.277420743146198,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.2406493012402446,
      "gamma": 4.201459268152959,
      "phi": 1.2055338118532646,
      "success": true,
      "log_likelihood": -29.27742074150091,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -3.1234397918558248,
      "gamma": 0.5329819459259777,
      "phi": 1.4012778491919882,
      "success": true,
      "log_likelihood": -23.277420742911154,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.7404741645261197,
      "gamma": 0.025535467096273745,
      "phi": 1.3380494422637064,
      "success": true,
      "log_likelihood": -14.277420745026529,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.6786196773516089,
      "gamma": 7.437177971942389,
      "phi": 0.792866525278668,
      "success": true,
      "log_likelihood": -25.277420742441073,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.4683782275358332,
      "gamma": 4.375241314934466,
      "phi": 1.1666686040985947,
      "success": true,
      "log_likelihood": -39.27742073915051,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3333333333333333,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.656133133619228,
      "gamma": 2.8305407027436127,
      "phi": 0.5973910000085491,
      "success": true,
      "log_likelihood": -12.277420745496608,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -9.011976712031167,
      "gamma": 5.166311367579914,
      "phi": 1.2152919583099444,
      "success": true,
      "log_likelihood": -27.277420741970992,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -7.18074224206207,
      "gamma": 1.3089574746328136,
      "phi": 0.5372796225858277,
      "success": true,
      "log_likelihood": -25.277420742441073,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.7345036018821496,
      "gamma": 9.536914203396531,
      "phi": 1.4901392087398615,
      "success": true,
      "log_likelihood": -21.27742074338124,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 7.272763384010823,
      "gamma": 9.17770582427383,
      "phi": 1.3677540325850885,
      "success": true,
      "log_likelihood": -28.277420741735952,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.4041062554295589,
      "gamma": 7.335003282346348,
      "phi": 0.7250525510787074,
      "success": true,
      "log_likelihood": -33.27742074056075,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 6.3136368956699975,
      "gamma": 2.9074275739905273,
      "phi": 0.7398043693418136,
      "success": true,
      "log_likelihood": -32.2774207407958,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 5.213496353848173,
      "gamma": 6.330888087632879,
      "phi": 0.9997039812603047,
      "success": true,
      "log_likelihood": -28.277420741735952,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -5.618678080583566,
      "gamma": 1.8426188888332462,
      "phi": 0.5909362270825574,
      "success": true,
      "log_likelihood": -22.277420743146195,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -8.69884732100199,
      "gamma": 8.954442042731952,
      "phi": 0.7505252815087515,
      "success": true,
      "log_likelihood": -42.277420738445386,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3333333333333333,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 6.491341144074816,
      "gamma": 8.919494161680468,
      "phi": 1.40395388127164,
      "success": true,
      "log_likelihood": -28.277420741735956,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.5505680207950263,
      "gamma": 1.5009625719818198,
      "phi": 1.3154694997171428,
      "success": true,
      "log_likelihood": -26.277420742206033,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 4.089153265365503,
      "gamma": 2.531094011384969,
      "phi": 0.6796445139722227,
      "success": true,
      "log_likelihood": -33.27742074056075,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 8.88585283383059,
      "gamma": 1.0452086375183645,
      "phi": 0.539816034006289,
      "success": true,
      "log_likelihood": -35.27742074009067,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -4.787599631963937,
      "gamma": 2.602901529728514,
      "phi": 1.0461719410206631,
      "success": true,
      "log_likelihood": -37.277420739620595,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -3.2588623856435373,
      "gamma": 6.995718413743729,
      "phi": 1.1235508760132267,
      "success": true,
      "log_likelihood": -15.277420744791483,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 6.937216440709506,
      "gamma": 6.750514047589119,
      "phi": 1.3972096952233282,
      "success": true,
      "log_likelihood": -43.277420738210346,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.2777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -8.350185606097323,
      "gamma": 1.2139549410960493,
      "phi": 1.4533153123956124,
      "success": true,
      "log_likelihood": -18.27742074408636,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.2283403236291974,
      "gamma": 1.8997904515667585,
      "phi": 0.8052601005968818,
      "success": true,
      "log_likelihood": -25.277420742441077,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -3.3621907369436554,
      "gamma": 3.4902042368953645,
      "phi": 1.349291605775282,
      "success": true,
      "log_likelihood": -29.277420741500915,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3333333333333333,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.1766910316053902,
      "gamma": 3.9212578181318323,
      "phi": 0.7025753969434488,
      "success": true,
      "log_likelihood": -44.277420737975305,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.2803869265180072,
      "gamma": 6.3908105673159685,
      "phi": 1.0722084365050901,
      "success": true,
      "log_likelihood": -31.27742074103083,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -6.69489411576339,
      "gamma": 3.3809924036518724,
      "phi": 1.1624287002382396,
      "success": true,
      "log_likelihood": -39.27742073915051,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.0872212050905024,
      "gamma": 7.920193531793586,
      "phi": 1.003805953718114,
      "success": true,
      "log_likelihood": -27.277420741970996,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 3.8034757100580503,
      "gamma": 4.884914378715697,
      "phi": 1.1438839369483298,
      "success": true,
      "log_likelihood": -14.277420745026523,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -9.435633425275999,
      "gamma": 9.262940039060036,
      "phi": 0.5685255642068436,
      "success": true,
      "log_likelihood": -16.277420744556448,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 8.139742430633426,
      "gamma": 6.2402345472210685,
      "phi": 0.7574884085387819,
      "success": true,
      "log_likelihood": -27.277420741970992,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 7.414584531696633,
      "gamma": 6.537238775417204,
      "phi": 1.2936327778820926,
      "success": true,
      "log_likelihood": -14.277420745026525,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -8.751714794292347,
      "gamma": 8.60152130920809,
      "phi": 1.1275550127973761,
      "success": true,
      "log_likelihood": -43.277420738210346,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.25,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -4.448862057625254,
      "gamma": 2.4229264157770136,
      "phi": 1.4504395770337406,
      "success": true,
      "log_likelihood": -42.277420738445386,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.39401810509137647,
      "gamma": 2.8768825520119137,
      "phi": 1.2858796002798654,
      "success": true,
      "log_likelihood": -28.277420741735952,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 6.887160906579798,
      "gamma": 7.639746705037345,
      "phi": 0.5915026490908126,
      "success": true,
      "log_likelihood": -19.27742074385132,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 3.1458122065812084,
      "gamma": 7.075934852947809,
      "phi": 1.345558145235031,
      "success": true,
      "log_likelihood": -29.27742074150091,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -6.467114812942166,
      "gamma": 7.13739221683549,
      "phi": 0.6674316668314987,
      "success": true,
      "log_likelihood": -22.277420743146195,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -7.991712132299298,
      "gamma": 2.190487371394015,
      "phi": 0.8394657393234571,
      "success": true,
      "log_likelihood": -13.277420745261566,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.8452607014367359,
      "gamma": 0.8514089410665948,
      "phi": 0.8333968631246551,
      "success": true,
      "log_likelihood": -45.277420737740265,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 9.22434000981028,
      "gamma": 2.043005543377986,
      "phi": 0.6950209632234629,
      "success": true,
      "log_likelihood": -25.277420742441073,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -4.660259663257865,
      "gamma": 9.225704852070018,
      "phi": 1.4156976164929254,
      "success": true,
      "log_likelihood": -44.277420737975305,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.2222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -8.897268944301654,
      "gamma": 6.624149143706034,
      "phi": 1.1625337242095806,
      "success": true,
      "log_likelihood": -28.277420741735952,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 6.866688471282348,
      "gamma": 9.650106939648488,
      "phi": 1.3896511263465796,
      "success": true,
      "log_likelihood": -14.277420745026525,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.567155688511975,
      "gamma": 7.434800513065399,
      "phi": 0.6088897205580018,
      "success": true,
      "log_likelihood": -43.277420738210346,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3333333333333333,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 3.234044037180757,
      "gamma": 2.503747931906516,
      "phi": 0.6975314523824953,
      "success": true,
      "log_likelihood": -29.27742074150091,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -5.995945310414122,
      "gamma": 5.875646174081095,
      "phi": 1.0871803576659231,
      "success": true,
      "log_likelihood": -25.277420742441073,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.175124401064215,
      "gamma": 2.4685070137128884,
      "phi": 0.789634680988786,
      "success": true,
      "log_likelihood": -43.277420738210346,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.14731066185908048,
      "gamma": 3.5267368957665344,
      "phi": 1.0089736822315611,
      "success": true,
      "log_likelihood": -22.277420743146198,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 6.431663324859095,
      "gamma": 3.7229486990703418,
      "phi": 0.8378258013799623,
      "success": true,
      "log_likelihood": -39.27742073915051,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.40566146903653966,
      "gamma": 8.825358262416147,
      "phi": 0.7967210613904226,
      "success": true,
      "log_likelihood": -13.277420745261566,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 7.37363922451852,
      "gamma": 5.678085479779586,
      "phi": 1.0086696616172253,
      "success": true,
      "log_likelihood": -30.27742074126587,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 5.533354641919692,
      "gamma": 5.676624370642957,
      "phi": 0.6842371398890631,
      "success": true,
      "log_likelihood": -22.277420743146195,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "beta": {
        "r": -0.14059959708053366,
        "p": 0.16293730493201616
      },
      "gamma": {
        "r": 0.03279324237748867,
        "p": 0.7460162929404299
      },
      "phi": {
        "r": 0.0964654534869769,
        "p": 0.3397014090906222
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 64.3163873105318,
  "bic_results": {
    "average_bic": 64.3163873105318,
    "individual_bics": [
      99.30539829131894,
      69.30539829837015,
      67.30539829884025,
      75.30539829695991,
      73.30539829742999,
      59.30539830072057,
      33.305398306831634,
      57.30539830119065,
      33.305398306831634,
      77.30539829648983,
      73.30539829742999,
      97.30539829178902,
      75.30539829695992,
      33.305398306831634,
      33.305398306831634,
      33.305398306831634,
      33.305398306831634,
      43.305398304481216,
      41.3053983049513,
      33.305398306831634,
      65.30539829931031,
      43.305398304481216,
      79.30539829601975,
      67.30539829884023,
      69.30539829837016,
      63.30539829978041,
      65.30539829931033,
      85.30539829460952,
      41.3053983049513,
      49.30539830307097,
      33.305398306831634,
      99.30539829131894,
      75.30539829695992,
      77.30539829648983,
      33.305398306831634,
      59.305398300720555,
      55.30539830166073,
      69.30539829837015,
      57.305398301190635,
      39.30539830542139,
      61.305398300250474,
      89.30539829366934,
      35.305398306361546,
      65.30539829931031,
      61.305398300250474,
      53.30539830213081,
      67.30539829884023,
      77.30539829648983,
      75.30539829695992,
      67.30539829884023,
      55.305398301660716,
      95.3053982922591,
      67.30539829884025,
      63.30539829978039,
      77.30539829648983,
      81.30539829554967,
      85.30539829460952,
      41.3053983049513,
      97.30539829178902,
      47.305398303541054,
      61.30539830025049,
      69.30539829837016,
      99.30539829131894,
      73.30539829742999,
      89.30539829366934,
      65.30539829931033,
      39.30539830542138,
      43.30539830448123,
      65.30539829931031,
      39.30539830542138,
      97.30539829178902,
      95.3053982922591,
      67.30539829884023,
      49.30539830307097,
      69.30539829837015,
      55.305398301660716,
      37.30539830589146,
      101.30539829084886,
      61.305398300250474,
      99.30539829131894,
      67.30539829884023,
      39.30539830542138,
      97.30539829178902,
      69.30539829837015,
      61.305398300250474,
      97.30539829178902,
      55.30539830166073,
      89.30539829366934,
      37.30539830589146,
      71.30539829790007,
      55.305398301660716
    ],
    "group_enabled": false,
    "group_bics": null,
    "num_parameters": 3,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- beta: r = -0.141\n- gamma: r = 0.033\n- phi: r = 0.096",
  "previous_models": [
    "Specification: Let F1 = trial_type  \nLet F2 = trial_role  \nLet F3 = token_opp  \nLet F4 = token_self  \nLet F5 = combined_earning  \nLet F6 = split_opp  \nLet F7 = split_self  \nLet F8 = splitperc_opp  \nLet F9 = splitperc_self  \nLet F10 = accepted_amount  \nLet F11 = accepted_perc  \n\n\u03b4 = 1e-6  \n\u0394_shift = 1e-3  \n\na = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + \u03b4  \n\na_mod = 1.08 * a * (1 + 0.012 * sin(a + 0.045))  \n\nz = a_mod * (1 + 0.008 * cos(a + 0.065)) * (1 + 0.005 * sin(a + 0.115)) * (1 + 0.004 * cos(a + 0.085)) * (1 + 0.006 * (sin(a + 0.035) * cos(a + 0.055))) * (1 + 0.003 * (sin(a + 0.03) * cos(a + 0.05)))  \n\nw = (phi - 0.5) / phi  \n\nf_adapt = { 1.002 * [ (z)^w * (ln(1+z))^(1-w) ]       for z \u2265 0  \n           \u03c6 * [ (z + \u0394_shift)/(1 + |z + \u0394_shift|) ]^7   for z < 0 }  \n\nT = 1 + 0.0005 * a^2 + 0.00005 * a^3 + 0.000005 * a^4 + 0.0000001 * a^5 + 0.00000001 * a^6 + 0.000000001 * a^7 + 0.0000000001 * a^8 + 0.000001 * a^3 + 0.0000001 * a^9  \n\nextra_base = exp(-a/0.1) * (z/(1+|z|)) * (1 + 0.005 * sin(1/(1+a))) * (1 + 0.002 * cos(0.5*a)) * ((1+0.003*cos(0.3*a))^2) * ((1+0.004*cos(0.3*a))^2) * (1 + 0.0025*cos(0.7*a)) * (1 + tanh(0.05*a)) * (1.07 * softplus(0.865/(1+a)) + 0.15*(0.865/(1+a)) + 0.5*(0.865/(1+a)) + 0.006*a) * (1 - 0.002*cos(a)) * (1 - 0.0025*cos(2.5*a)) * (1 + 0.001*a) * ((1+cosh(0.001*a))^(2+0.0005*a))  \nextra = ( extra_base + 1e-6 )^(0.9478 + 0.00018 * ln(1+a))  \n\nExponent = (0.9478 + 0.00018 * ln(1+a)) * (1 + 0.003*sin(2*a) + 0.001*cos(3*a) + 0.0025*cos(0.7*a) + 0.004*sin(2.5*a) + 0.002*cos(3.5*a))  \n\nf_x = sign(z) * ( f_adapt * T * extra )^(Exponent)  \n\nU = beta + gamma * f_x  \n\nP(accept = 1) = 1 / (1 + exp(-U))\nSummary: A computational model predicting responder acceptance by first summing eleven fixed proposal\u2010components from the data and applying a cascade of nonlinear, harmonic modulations. The core signal is adapted via a conditional transformation (using power\u2010 and softsign\u2013based corrections), dynamically thresholded with an 8th\u2013order polynomial (augmented by a ninth\u2013power term) and blended with an extra composite factor featuring multiple trigonometric and softplus components. The final transformed signal scales a baseline utility (beta) via a gain (gamma) to yield latent utility, which is mapped through a logistic function to predict accept/reject responses. Only three parameters (beta, gamma, phi) are learnable with constrained bounds.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 64.3163873105318\nOverall Accuracy: 0.5336\n\nParameter Recovery:\n- beta: r = -0.141\n- gamma: r = 0.033\n- phi: r = 0.096"
  ]
}