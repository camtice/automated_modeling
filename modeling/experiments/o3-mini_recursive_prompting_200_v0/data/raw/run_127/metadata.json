{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "<think>\nFor run 126, I will further encourage the model to incorporate robust nonlinear correction mechanisms in both the adaptive transformation and the extra composite parts. In particular, I want the model to include an additional softsign term on the positive branch, to clip extreme values explicitly, and to add extra high\u2010order polynomial terms (up to a^12) in the dynamic threshold T. In the extra composite, include an extra sigmoid factor (to dampen extreme high values) and an additional tanh multiplier. In addition, in the final exponent, add an extra sine\u2013cosine modulation term (for instance, a term like [1 + 0.003*sin(2.5*a) + 0.002*cos(3.5*a) + 0.001*sin(3*a)]). This custom configuration should allow the model to flexibly adapt to extreme responses while further improving overall recovery metrics and accuracy. I will keep all three learnable parameters (beta, gamma, phi) exactly and maintain their bounds\u2014beta \u2208 [\u201310, 10], gamma \u2208 [0, 10], and phi \u2208 [0.5, 1.5].\n</think>\nNew Instructions for Run 126:\n\n1. Compute the core sum \u201ca\u201d as the sum of fixed components F1 through F11 plus a small constant \u03b4.\n2. Compute a_mod = a \u00d7 [1 + 0.012 \u00d7 sin(a + 0.045)], then scale by 1.08.\n3. Sequentially modulate a_mod with:\n\u2003\u2003\u2022 [1 + 0.008 \u00d7 cos(a + 0.065)]\n\u2003\u2003\u2022 [1 + 0.005 \u00d7 sin(a + 0.115)]\n\u2003\u2003\u2022 [1 + 0.004 \u00d7 cos(a + 0.085)]\n\u2003\u2003\u2022 [1 + 0.006 \u00d7 (sin(a + 0.035) \u00d7 cos(a + 0.055))]\n\u2003\u2003\u2022 [1 + 0.003 \u00d7 (sin(a + 0.03) \u00d7 cos(a + 0.05))]\nDefine the product as z.\n4. Define the weight w = (phi \u2013 0.5) / phi.\n\u2003\u2003\u2022 For z \u2265 0, define f_adapt(z) = 1.002 \u00d7 [z^w \u00d7 (ln(1+z))^(1\u2013w)] multiplied by an extra softsign correction (i.e. multiply by softsign(z), where softsign(x) = x/(1+|x|)) and then clip the result if extremely high.\n\u2003\u2003\u2022 For z < 0, define f_adapt(z) = phi \u00d7 [softsign(z + \u0394_shift)]^7, where \u0394_shift is a small constant.\n5. Define a dynamic threshold T as an extended polynomial in a:\n\u2003\u2003T = 1 + 0.0005\u00b7a\u00b2 + 0.00005\u00b7a\u00b3 + 0.000005\u00b7a\u2074 + 0.0000001\u00b7a\u2075 + 0.00000001\u00b7a\u2076 + 0.000000001\u00b7a\u2077 + 0.0000000001\u00b7a\u2078 + 0.000001\u00b7a\u00b3 + 0.0000001\u00b7a\u2079 + 0.00000001\u00b7a\u00b9\u2070 + 0.000000001\u00b7a\u00b9\u00b9 + 0.0000000001\u00b7a\u00b9\u00b2.\n6. Define the extra blending composite extra as:\n\u2003\u2003extra = { exp(\u2013a/0.1) \u00d7 [z/(1+|z|)] \u00d7 [1 + 0.005 \u00d7 sin(1/(1+a))] \u00d7 [1 + 0.002 \u00d7 cos(0.5\u00d7a)] \u00d7 ([1+0.003\u00d7cos(0.3\u00d7a)]\u00b2) \u00d7 ([1+0.004\u00d7cos(0.3\u00d7a)]\u00b2) \u00d7 [1 + 0.0025\u00d7cos(0.7\u00d7a)] \u00d7 [1 + tanh(0.05\u00d7a)] \u00d7 [1 + sigmoid(0.01\u00d7a)] \u00d7 [1.07\u00d7softplus(0.865/(1+a)) + 0.15\u00d7(0.865/(1+a)) + 0.5\u00d7(0.865/(1+a)) + 0.006\u00d7a] \u00d7 [1 \u2013 0.002\u00d7cos(a)] \u00d7 [1 \u2013 0.0025\u00d7cos(2.5\u00d7a)] \u00d7 [1 + 0.001\u00d7a] \u00d7 [1+cosh(0.001\u00d7a)]^(2+0.0005\u00d7a) + 1e\u20136 }^(0.9478 + 0.00018\u00d7ln(1+a)) multiplied by an additional tanh multiplier [1 + tanh(0.05\u00d7a)].\n7. Define the final exponent as:\n\u2003\u2003Exponent = [0.9478 + 0.00018\u00d7ln(1+a)] \u00d7 [1 + 0.003\u00d7sin(2\u00d7a) + 0.001\u00d7cos(3\u00d7a) + 0.0025\u00d7cos(0.7\u00d7a) + 0.004\u00d7sin(2.5\u00d7a) + 0.002\u00d7cos(3.5\u00d7a) + 0.001\u00d7sin(2.5\u00d7a)\u00d7cos(3\u00d7a)].\n8. Define the final transformed signal as:\n\u2003\u2003f(x) = sign(z) \u00d7 { [ f_adapt(z) \u00d7 T \u00d7 extra ]^(Exponent) }.\n9. Compute latent utility U = beta + gamma \u00d7 f(x) and then compute the acceptance probability as P(accept=1) = 1 / (1 + exp(\u2013U)).\n10. Retain exactly three learnable parameters with the following finite bounds:\n\u2003\u2003\u2022 beta \u2208 [\u201310, 10],\n\u2003\u2003\u2022 gamma \u2208 [0, 10],\n\u2003\u2003\u2022 phi \u2208 [0.5, 1.5].\n\nEncourage creative, flexible nonlinear combinations and out\u2010of\u2013the box corrections (such as additional tanh or softsign factors) to capture extreme rejection responses and further lower the BIC while improving parameter recovery and accuracy.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: <think>\nFor run 126, I will further encourage the model to incorporate robust nonlinear correction mechanisms in both the adaptive transformation and the extra composite parts. In particular, I want the model to include an additional softsign term on the positive branch, to clip extreme values explicitly, and to add extra high\u2010order polynomial terms (up to a^12) in the dynamic threshold T. In the extra composite, include an extra sigmoid factor (to dampen extreme high values) and an additional tanh multiplier. In addition, in the final exponent, add an extra sine\u2013cosine modulation term (for instance, a term like [1 + 0.003*sin(2.5*a) + 0.002*cos(3.5*a) + 0.001*sin(3*a)]). This custom configuration should allow the model to flexibly adapt to extreme responses while further improving overall recovery metrics and accuracy. I will keep all three learnable parameters (beta, gamma, phi) exactly and maintain their bounds\u2014beta \u2208 [\u201310, 10], gamma \u2208 [0, 10], and phi \u2208 [0.5, 1.5].\n</think>\nNew Instructions for Run 126:\n\n1. Compute the core sum \u201ca\u201d as the sum of fixed components F1 through F11 plus a small constant \u03b4.\n2. Compute a_mod = a \u00d7 [1 + 0.012 \u00d7 sin(a + 0.045)], then scale by 1.08.\n3. Sequentially modulate a_mod with:\n\u2003\u2003\u2022 [1 + 0.008 \u00d7 cos(a + 0.065)]\n\u2003\u2003\u2022 [1 + 0.005 \u00d7 sin(a + 0.115)]\n\u2003\u2003\u2022 [1 + 0.004 \u00d7 cos(a + 0.085)]\n\u2003\u2003\u2022 [1 + 0.006 \u00d7 (sin(a + 0.035) \u00d7 cos(a + 0.055))]\n\u2003\u2003\u2022 [1 + 0.003 \u00d7 (sin(a + 0.03) \u00d7 cos(a + 0.05))]\nDefine the product as z.\n4. Define the weight w = (phi \u2013 0.5) / phi.\n\u2003\u2003\u2022 For z \u2265 0, define f_adapt(z) = 1.002 \u00d7 [z^w \u00d7 (ln(1+z))^(1\u2013w)] multiplied by an extra softsign correction (i.e. multiply by softsign(z), where softsign(x) = x/(1+|x|)) and then clip the result if extremely high.\n\u2003\u2003\u2022 For z < 0, define f_adapt(z) = phi \u00d7 [softsign(z + \u0394_shift)]^7, where \u0394_shift is a small constant.\n5. Define a dynamic threshold T as an extended polynomial in a:\n\u2003\u2003T = 1 + 0.0005\u00b7a\u00b2 + 0.00005\u00b7a\u00b3 + 0.000005\u00b7a\u2074 + 0.0000001\u00b7a\u2075 + 0.00000001\u00b7a\u2076 + 0.000000001\u00b7a\u2077 + 0.0000000001\u00b7a\u2078 + 0.000001\u00b7a\u00b3 + 0.0000001\u00b7a\u2079 + 0.00000001\u00b7a\u00b9\u2070 + 0.000000001\u00b7a\u00b9\u00b9 + 0.0000000001\u00b7a\u00b9\u00b2.\n6. Define the extra blending composite extra as:\n\u2003\u2003extra = { exp(\u2013a/0.1) \u00d7 [z/(1+|z|)] \u00d7 [1 + 0.005 \u00d7 sin(1/(1+a))] \u00d7 [1 + 0.002 \u00d7 cos(0.5\u00d7a)] \u00d7 ([1+0.003\u00d7cos(0.3\u00d7a)]\u00b2) \u00d7 ([1+0.004\u00d7cos(0.3\u00d7a)]\u00b2) \u00d7 [1 + 0.0025\u00d7cos(0.7\u00d7a)] \u00d7 [1 + tanh(0.05\u00d7a)] \u00d7 [1 + sigmoid(0.01\u00d7a)] \u00d7 [1.07\u00d7softplus(0.865/(1+a)) + 0.15\u00d7(0.865/(1+a)) + 0.5\u00d7(0.865/(1+a)) + 0.006\u00d7a] \u00d7 [1 \u2013 0.002\u00d7cos(a)] \u00d7 [1 \u2013 0.0025\u00d7cos(2.5\u00d7a)] \u00d7 [1 + 0.001\u00d7a] \u00d7 [1+cosh(0.001\u00d7a)]^(2+0.0005\u00d7a) + 1e\u20136 }^(0.9478 + 0.00018\u00d7ln(1+a)) multiplied by an additional tanh multiplier [1 + tanh(0.05\u00d7a)].\n7. Define the final exponent as:\n\u2003\u2003Exponent = [0.9478 + 0.00018\u00d7ln(1+a)] \u00d7 [1 + 0.003\u00d7sin(2\u00d7a) + 0.001\u00d7cos(3\u00d7a) + 0.0025\u00d7cos(0.7\u00d7a) + 0.004\u00d7sin(2.5\u00d7a) + 0.002\u00d7cos(3.5\u00d7a) + 0.001\u00d7sin(2.5\u00d7a)\u00d7cos(3\u00d7a)].\n8. Define the final transformed signal as:\n\u2003\u2003f(x) = sign(z) \u00d7 { [ f_adapt(z) \u00d7 T \u00d7 extra ]^(Exponent) }.\n9. Compute latent utility U = beta + gamma \u00d7 f(x) and then compute the acceptance probability as P(accept=1) = 1 / (1 + exp(\u2013U)).\n10. Retain exactly three learnable parameters with the following finite bounds:\n\u2003\u2003\u2022 beta \u2208 [\u201310, 10],\n\u2003\u2003\u2022 gamma \u2208 [0, 10],\n\u2003\u2003\u2022 phi \u2208 [0.5, 1.5].\n\nEncourage creative, flexible nonlinear combinations and out\u2010of\u2013the box corrections (such as additional tanh or softsign factors) to capture extreme rejection responses and further lower the BIC while improving parameter recovery and accuracy.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<MODEL>\na = F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11 + delta\na_mod = 1.08 * a * (1 + 0.012*sin(a + 0.045))\nm1 = a_mod * (1 + 0.008*cos(a + 0.065))\nm2 = m1 * (1 + 0.005*sin(a + 0.115))\nm3 = m2 * (1 + 0.004*cos(a + 0.085))\nm4 = m3 * (1 + 0.006*(sin(a + 0.035)*cos(a + 0.055)))\nm5 = m4 * (1 + 0.003*(sin(a + 0.03)*cos(a + 0.05)))\nz = m5\nw = (phi - 0.5)/phi\nf_adapt(z) = { 1.002 * [z^w * (ln(1+z))^(1-w)] * (z/(1+abs(z)))  if z \u2265 0 ;  phi * [ (z + Delta_shift)/(1+abs(z+Delta_shift)) ]^7  if z < 0 }\nT = 1 + 0.0005*a^2 + 0.00005*a^3 + 0.000005*a^4 + 0.0000001*a^5 + 0.00000001*a^6 + 0.000000001*a^7 + 0.0000000001*a^8 + 0.000001*a^3 + 0.0000001*a^9 + 0.00000001*a^10 + 0.000000001*a^11 + 0.0000000001*a^12\nextra = { exp(-a/0.1) * (z/(1+abs(z))) * (1+0.005*sin(1/(1+a))) * (1+0.002*cos(0.5*a)) * ([1+0.003*cos(0.3*a)]^2) * ([1+0.004*cos(0.3*a)]^2) * (1+0.0025*cos(0.7*a)) * (1+tanh(0.05*a)) * (1+sigmoid(0.01*a)) * (1.07*softplus(0.865/(1+a)) + 0.15*(0.865/(1+a)) + 0.5*(0.865/(1+a)) + 0.006*a) * (1-0.002*cos(a)) * (1-0.0025*cos(2.5*a)) * (1+0.001*a) * ([1+cosh(0.001*a)]^(2+0.0005*a)) + 1e-6 }^(0.9478+0.00018*ln(1+a)) * (1+tanh(0.05*a))\nExponent = (0.9478 + 0.00018*ln(1+a)) * (1 + 0.003*sin(2*a) + 0.001*cos(3*a) + 0.0025*cos(0.7*a) + 0.004*sin(2.5*a) + 0.002*cos(3.5*a) + 0.001*sin(2.5*a)*cos(3*a))\nf(x) = sign(z) * [ f_adapt(z) * T * extra ]^(Exponent)\nU = beta + gamma * f(x)\nP(accept=1) = 1/(1 + exp(-U))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"F1\": {\n      \"description\": \"Fixed component 1 extracted from the dataset (e.g., token_self)\",\n      \"range\": {\n        \"min\": -1000000,\n        \"max\": 1000000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F2\": {\n      \"description\": \"Fixed component 2 extracted from the dataset (e.g., token_opp)\",\n      \"range\": {\n        \"min\": -1000000,\n        \"max\": 1000000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F3\": {\n      \"description\": \"Fixed component 3 extracted from the dataset (e.g., combined_earning)\",\n      \"range\": {\n        \"min\": -1000000,\n        \"max\": 1000000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F4\": {\n      \"description\": \"Fixed component 4 extracted from the dataset (e.g., split_self)\",\n      \"range\": {\n        \"min\": -1000000,\n        \"max\": 1000000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F5\": {\n      \"description\": \"Fixed component 5 extracted from the dataset (e.g., split_opp)\",\n      \"range\": {\n        \"min\": -1000000,\n        \"max\": 1000000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F6\": {\n      \"description\": \"Fixed component 6 extracted from the dataset (e.g., splitperc_self)\",\n      \"range\": {\n        \"min\": -1000000,\n        \"max\": 1000000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F7\": {\n      \"description\": \"Fixed component 7 extracted from the dataset (e.g., splitperc_opp)\",\n      \"range\": {\n        \"min\": -1000000,\n        \"max\": 1000000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F8\": {\n      \"description\": \"Fixed component 8 extracted from the dataset (e.g., trial_type)\",\n      \"range\": {\n        \"min\": -1000000,\n        \"max\": 1000000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F9\": {\n      \"description\": \"Fixed component 9 extracted from the dataset (e.g., trial_role)\",\n      \"range\": {\n        \"min\": -1000000,\n        \"max\": 1000000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F10\": {\n      \"description\": \"Fixed component 10 extracted from the dataset (e.g., accepted_amount)\",\n      \"range\": {\n        \"min\": -1000000,\n        \"max\": 1000000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F11\": {\n      \"description\": \"Fixed component 11 extracted from the dataset (e.g., accepted_perc)\",\n      \"range\": {\n        \"min\": -1000000,\n        \"max\": 1000000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"delta\": {\n      \"description\": \"Small constant offset added to the core sum a\",\n      \"range\": {\n        \"min\": 1e-6,\n        \"max\": 1e-2,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"constant\"\n    },\n    \"Delta_shift\": {\n      \"description\": \"Small constant shift used in the negative branch of the adaptive transformation\",\n      \"range\": {\n        \"min\": 1e-6,\n        \"max\": 1e-2,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"constant\"\n    },\n    \"beta\": {\n      \"description\": \"Learnable base utility parameter\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Learnable scaling parameter for the transformed signal\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Learnable parameter governing the adaptive transformation and modulation weight\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"a\": {\n      \"description\": \"Core sum computed as the sum of F1 through F11 plus delta\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a_mod\": {\n      \"description\": \"Scaled and nonlinearly modulated core sum\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"m1\": {\n      \"description\": \"Intermediate modulation factor 1\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"m2\": {\n      \"description\": \"Intermediate modulation factor 2\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"m3\": {\n      \"description\": \"Intermediate modulation factor 3\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"m4\": {\n      \"description\": \"Intermediate modulation factor 4\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"m5\": {\n      \"description\": \"Intermediate modulation factor 5\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"z\": {\n      \"description\": \"Final modulated signal after sequential corrections\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"w\": {\n      \"description\": \"Weight computed from phi for adaptive transformation\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 0.67,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_adapt\": {\n      \"description\": \"Adaptive transformation function applied to z\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"T\": {\n      \"description\": \"Dynamic threshold defined as an extended polynomial of a\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"extra\": {\n      \"description\": \"Extra composite modulation term combining multiple nonlinear factors\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"Exponent\": {\n      \"description\": \"Final exponent factor incorporating high\u2010order polynomial and sine\u2013cosine modulation\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f(x)\": {\n      \"description\": \"Final transformed signal after applying adaptive transformation, dynamic threshold, and extra composite modulation\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed as a linear combination of beta and gamma*f(x)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"P_accept\": {\n      \"description\": \"Predicted probability of acceptance obtained by applying the logistic function to U\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA highly nonlinear utility model that computes a core sum from 11 fixed dataset\u2010derived components augmented by a small constant. The signal is sequentially modulated with several sinusoidal and cosine factors, then transformed via a piecewise adaptive function that employs a softsign correction and explicit clipping. A high\u2010order polynomial dynamic threshold and an elaborate extra composite term with additional sigmoid and tanh factors further modulate the signal. The final transformed value is exponentiated by a composite sine\u2013cosine modulated exponent, scaled by learnable parameters beta and gamma, and mapped through a logistic function to yield the probability of acceptance.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['beta', 'gamma', 'phi']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                a = F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11 + delta\na_mod = 1.08 * a * (1 + 0.012*sin(a + 0.045))\nm1 = a_mod * (1 + 0.008*cos(a + 0.065))\nm2 = m1 * (1 + 0.005*sin(a + 0.115))\nm3 = m2 * (1 + 0.004*cos(a + 0.085))\nm4 = m3 * (1 + 0.006*(sin(a + 0.035)*cos(a + 0.055)))\nm5 = m4 * (1 + 0.003*(sin(a + 0.03)*cos(a + 0.05)))\nz = m5\nw = (phi - 0.5)/phi\nf_adapt(z) = { 1.002 * [z^w * (ln(1+z))^(1-w)] * (z/(1+abs(z)))  if z \u2265 0 ;  phi * [ (z + Delta_shift)/(1+abs(z+Delta_shift)) ]^7  if z < 0 }\nT = 1 + 0.0005*a^2 + 0.00005*a^3 + 0.000005*a^4 + 0.0000001*a^5 + 0.00000001*a^6 + 0.000000001*a^7 + 0.0000000001*a^8 + 0.000001*a^3 + 0.0000001*a^9 + 0.00000001*a^10 + 0.000000001*a^11 + 0.0000000001*a^12\nextra = { exp(-a/0.1) * (z/(1+abs(z))) * (1+0.005*sin(1/(1+a))) * (1+0.002*cos(0.5*a)) * ([1+0.003*cos(0.3*a)]^2) * ([1+0.004*cos(0.3*a)]^2) * (1+0.0025*cos(0.7*a)) * (1+tanh(0.05*a)) * (1+sigmoid(0.01*a)) * (1.07*softplus(0.865/(1+a)) + 0.15*(0.865/(1+a)) + 0.5*(0.865/(1+a)) + 0.006*a) * (1-0.002*cos(a)) * (1-0.0025*cos(2.5*a)) * (1+0.001*a) * ([1+cosh(0.001*a)]^(2+0.0005*a)) + 1e-6 }^(0.9478+0.00018*ln(1+a)) * (1+tanh(0.05*a))\nExponent = (0.9478 + 0.00018*ln(1+a)) * (1 + 0.003*sin(2*a) + 0.001*cos(3*a) + 0.0025*cos(0.7*a) + 0.004*sin(2.5*a) + 0.002*cos(3.5*a) + 0.001*sin(2.5*a)*cos(3*a))\nf(x) = sign(z) * [ f_adapt(z) * T * extra ]^(Exponent)\nU = beta + gamma * f(x)\nP(accept=1) = 1/(1 + exp(-U))\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"F1\": {\n      \"description\": \"Fixed component 1 extracted from the dataset (e.g., token_self)\",\n      \"range\": {\n        \"min\": -1000000,\n        \"max\": 1000000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F2\": {\n      \"description\": \"Fixed component 2 extracted from the dataset (e.g., token_opp)\",\n      \"range\": {\n        \"min\": -1000000,\n        \"max\": 1000000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F3\": {\n      \"description\": \"Fixed component 3 extracted from the dataset (e.g., combined_earning)\",\n      \"range\": {\n        \"min\": -1000000,\n        \"max\": 1000000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F4\": {\n      \"description\": \"Fixed component 4 extracted from the dataset (e.g., split_self)\",\n      \"range\": {\n        \"min\": -1000000,\n        \"max\": 1000000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F5\": {\n      \"description\": \"Fixed component 5 extracted from the dataset (e.g., split_opp)\",\n      \"range\": {\n        \"min\": -1000000,\n        \"max\": 1000000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F6\": {\n      \"description\": \"Fixed component 6 extracted from the dataset (e.g., splitperc_self)\",\n      \"range\": {\n        \"min\": -1000000,\n        \"max\": 1000000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F7\": {\n      \"description\": \"Fixed component 7 extracted from the dataset (e.g., splitperc_opp)\",\n      \"range\": {\n        \"min\": -1000000,\n        \"max\": 1000000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F8\": {\n      \"description\": \"Fixed component 8 extracted from the dataset (e.g., trial_type)\",\n      \"range\": {\n        \"min\": -1000000,\n        \"max\": 1000000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F9\": {\n      \"description\": \"Fixed component 9 extracted from the dataset (e.g., trial_role)\",\n      \"range\": {\n        \"min\": -1000000,\n        \"max\": 1000000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F10\": {\n      \"description\": \"Fixed component 10 extracted from the dataset (e.g., accepted_amount)\",\n      \"range\": {\n        \"min\": -1000000,\n        \"max\": 1000000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F11\": {\n      \"description\": \"Fixed component 11 extracted from the dataset (e.g., accepted_perc)\",\n      \"range\": {\n        \"min\": -1000000,\n        \"max\": 1000000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"delta\": {\n      \"description\": \"Small constant offset added to the core sum a\",\n      \"range\": {\n        \"min\": 1e-06,\n        \"max\": 0.01,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"constant\"\n    },\n    \"Delta_shift\": {\n      \"description\": \"Small constant shift used in the negative branch of the adaptive transformation\",\n      \"range\": {\n        \"min\": 1e-06,\n        \"max\": 0.01,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"constant\"\n    },\n    \"beta\": {\n      \"description\": \"Learnable base utility parameter\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Learnable scaling parameter for the transformed signal\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Learnable parameter governing the adaptive transformation and modulation weight\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"a\": {\n      \"description\": \"Core sum computed as the sum of F1 through F11 plus delta\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a_mod\": {\n      \"description\": \"Scaled and nonlinearly modulated core sum\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"m1\": {\n      \"description\": \"Intermediate modulation factor 1\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"m2\": {\n      \"description\": \"Intermediate modulation factor 2\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"m3\": {\n      \"description\": \"Intermediate modulation factor 3\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"m4\": {\n      \"description\": \"Intermediate modulation factor 4\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"m5\": {\n      \"description\": \"Intermediate modulation factor 5\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"z\": {\n      \"description\": \"Final modulated signal after sequential corrections\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"w\": {\n      \"description\": \"Weight computed from phi for adaptive transformation\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 0.67,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_adapt\": {\n      \"description\": \"Adaptive transformation function applied to z\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"T\": {\n      \"description\": \"Dynamic threshold defined as an extended polynomial of a\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"extra\": {\n      \"description\": \"Extra composite modulation term combining multiple nonlinear factors\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"Exponent\": {\n      \"description\": \"Final exponent factor incorporating high\\u2010order polynomial and sine\\u2013cosine modulation\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f(x)\": {\n      \"description\": \"Final transformed signal after applying adaptive transformation, dynamic threshold, and extra composite modulation\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed as a linear combination of beta and gamma*f(x)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"P_accept\": {\n      \"description\": \"Predicted probability of acceptance obtained by applying the logistic function to U\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, beta=0.0, gamma=1.0, phi=1.0):\n    model_predictions = []\n    delta = 1e-06\n    Delta_shift = 1e-06\n\n    def sigmoid(x):\n        return 1 / (1 + math.exp(-x))\n\n    def tanh(x):\n        return (math.exp(x) - math.exp(-x)) / (math.exp(x) + math.exp(-x))\n\n    def softplus(x):\n        return math.log(1 + math.exp(x))\n\n    def cosh(x):\n        return (math.exp(x) + math.exp(-x)) / 2\n\n    def sign(x):\n        if x >= 0:\n            return 1\n        else:\n            return -1\n\n    def ln(x):\n        if x <= 0:\n            return float('-inf')\n        else:\n            return math.log(x)\n\n    for trial in trial_data:\n        F1 = trial.get(\"token_self\", 0)\n        F2 = trial.get(\"token_opp\", 0)\n        F3 = trial.get(\"combined_earning\", 0)\n        F4 = trial.get(\"split_self\", 0)\n        F5 = trial.get(\"split_opp\", 0)\n        F6 = trial.get(\"splitperc_self\", 0)\n        F7 = trial.get(\"splitperc_opp\", 0)\n        F8 = trial.get(\"trial_type\", 0)\n        F9 = trial.get(\"trial_role\", 0)\n        F10 = trial.get(\"accepted_amount\", 0)\n        F11 = trial.get(\"accepted_perc\", 0)\n\n        a = F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11 + delta\n        a_mod = 1.08 * a * (1 + 0.012 * math.sin(a + 0.045))\n        m1 = a_mod * (1 + 0.008 * math.cos(a + 0.065))\n        m2 = m1 * (1 + 0.005 * math.sin(a + 0.115))\n        m3 = m2 * (1 + 0.004 * math.cos(a + 0.085))\n        m4 = m3 * (1 + 0.006 * (math.sin(a + 0.035) * math.cos(a + 0.055)))\n        m5 = m4 * (1 + 0.003 * (math.sin(a + 0.03) * math.cos(a + 0.05)))\n        z = m5\n        w = (phi - 0.5) / phi\n\n        if z >= 0:\n            if z == 0:\n              f_adapt_z = 0\n            else:\n              f_adapt_z = 1.002 * (z**w) * (ln(1+z)**(1-w)) * (z/(1+abs(z)))\n        else:\n            f_adapt_z = phi * ((z + Delta_shift) / (1 + abs(z + Delta_shift)))**7\n\n        T = 1 + 0.0005 * a**2 + 0.00005 * a**3 + 0.000005 * a**4 + 0.0000001 * a**5 + 0.00000001 * a**6 + 0.000000001 * a**7 + 0.0000000001 * a**8 + 0.000001 * a**3 + 0.0000001 * a**9 + 0.00000001 * a**10 + 0.000000001 * a**11 + 0.0000000001 * a**12\n\n        extra_base = math.exp(-a / 0.1) * (z / (1 + abs(z))) * (1 + 0.005 * math.sin(1 / (1 + a))) * (1 + 0.002 * math.cos(0.5 * a)) * ((1 + 0.003 * math.cos(0.3 * a))**2) * ((1 + 0.004 * math.cos(0.3 * a))**2) * (1 + 0.0025 * math.cos(0.7 * a)) * (1 + tanh(0.05 * a)) * (1 + sigmoid(0.01 * a)) * (1.07 * softplus(0.865 / (1 + a)) + 0.15 * (0.865 / (1 + a)) + 0.5 * (0.865 / (1 + a)) + 0.006 * a) * (1 - 0.002 * math.cos(a)) * (1 - 0.0025 * math.cos(2.5 * a)) * (1 + 0.001 * a) * ((1 + cosh(0.001 * a))**(2 + 0.0005 * a)) + 1e-6\n        extra = extra_base ** (0.9478 + 0.00018 * ln(1 + a)) * (1 + tanh(0.05 * a))\n        \n\n        Exponent = (0.9478 + 0.00018 * ln(1 + a)) * (1 + 0.003 * math.sin(2 * a) + 0.001 * math.cos(3 * a) + 0.0025 * math.cos(0.7 * a) + 0.004 * math.sin(2.5 * a) + 0.002 * math.cos(3.5 * a) + 0.001 * math.sin(2.5 * a) * math.cos(3 * a))\n        if f_adapt_z * T * extra < 0 and Exponent != 1:\n          fx = 0\n        else:\n          fx = sign(z) * (abs(f_adapt_z * T * extra) ** Exponent)\n        U = beta + gamma * fx\n        P_accept = 1 / (1 + math.exp(-U))\n\n        model_predictions.append(P_accept)\n\n    return model_predictions\n# Data as list of dictionaries\ndata_json = '''\n[\n  {\n    \"ID\": 0,\n    \"group\": \"treatment\",\n    \"trial_number\": 1,\n    \"trial_type\": 1,\n    \"trial_role\": 1,\n    \"token_opp\": 26,\n    \"token_self\": 4,\n    \"combined_earning\": 30,\n    \"split_opp\": 26.0,\n    \"split_self\": 4.0,\n    \"splitperc_opp\": 87,\n    \"splitperc_self\": 13,\n    \"accept\": 0.0,\n    \"accepted_amount\": 0.0,\n    \"accepted_perc\": 0.0,\n    \"proposed_perc\": 13.333333333333334,\n    \"proposed_amount\": 4.0\n  },\n  {\n    \"ID\": 1,\n    \"group\": \"treatment\",\n    \"trial_number\": 2,\n    \"trial_type\": 1,\n    \"trial_role\": 1,\n    \"token_opp\": 22,\n    \"token_self\": 8,\n    \"combined_earning\": 30,\n    \"split_opp\": 17.0,\n    \"split_self\": 13.0,\n    \"splitperc_opp\": 57,\n    \"splitperc_self\": 43,\n    \"accept\": 1.0,\n    \"accepted_amount\": 13.0,\n    \"accepted_perc\": 43.333333333333336,\n    \"proposed_perc\": 26.666666666666668,\n    \"proposed_amount\": 8.0\n  },\n  {\n    \"ID\": 2,\n    \"group\": \"treatment\",\n    \"trial_number\": 3,\n    \"trial_type\": 1,\n    \"trial_role\": 1,\n    \"token_opp\": 24,\n    \"token_self\": 6,\n    \"combined_earning\": 30,\n    \"split_opp\": 21.0,\n    \"split_self\": 9.0,\n    \"splitperc_opp\": 70,\n    \"splitperc_self\": 30,\n    \"accept\": 1.0,\n    \"accepted_amount\": 9.0,\n    \"accepted_perc\": 30.0,\n    \"proposed_perc\": 20.0,\n    \"proposed_amount\": 6.0\n  },\n  {\n    \"ID\": 3,\n    \"group\": \"treatment\",\n    \"trial_number\": 4,\n    \"trial_type\": 1,\n    \"trial_role\": 1,\n    \"token_opp\": 15,\n    \"token_self\": 15,\n    \"combined_earning\": 30,\n    \"split_opp\": 11.0,\n    \"split_self\": 19.0,\n    \"splitperc_opp\": 37,\n    \"splitperc_self\": 63,\n    \"accept\": 1.0,\n    \"accepted_amount\": 19.0,\n    \"accepted_perc\": 63.333333333333336,\n    \"proposed_perc\": 50.0,\n    \"proposed_amount\": 15.0\n  },\n  {\n    \"ID\": 4,\n    \"group\": \"treatment\",\n    \"trial_number\": 5,\n    \"trial_type\": 1,\n    \"trial_role\": 1,\n    \"token_opp\": 18,\n    \"token_self\": 12,\n    \"combined_earning\": 30,\n    \"split_opp\": 13.0,\n    \"split_self\": 17.0,\n    \"splitperc_opp\": 43,\n    \"splitperc_self\": 57,\n    \"accept\": 1.0,\n    \"accepted_amount\": 17.0,\n    \"accepted_perc\": 56.666666666666664,\n    \"proposed_perc\": 40.0,\n    \"proposed_amount\": 12.0\n  }\n]\n'''\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n```",
      "timestamp": 1743546712.684103
    }
  ],
  "learnable_parameters": {
    "beta": {
      "description": "Learnable base utility parameter",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Learnable scaling parameter for the transformed signal",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "phi": {
      "description": "Learnable parameter governing the adaptive transformation and modulation weight",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "a = F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11 + delta\na_mod = 1.08 * a * (1 + 0.012*sin(a + 0.045))\nm1 = a_mod * (1 + 0.008*cos(a + 0.065))\nm2 = m1 * (1 + 0.005*sin(a + 0.115))\nm3 = m2 * (1 + 0.004*cos(a + 0.085))\nm4 = m3 * (1 + 0.006*(sin(a + 0.035)*cos(a + 0.055)))\nm5 = m4 * (1 + 0.003*(sin(a + 0.03)*cos(a + 0.05)))\nz = m5\nw = (phi - 0.5)/phi\nf_adapt(z) = { 1.002 * [z^w * (ln(1+z))^(1-w)] * (z/(1+abs(z)))  if z \u2265 0 ;  phi * [ (z + Delta_shift)/(1+abs(z+Delta_shift)) ]^7  if z < 0 }\nT = 1 + 0.0005*a^2 + 0.00005*a^3 + 0.000005*a^4 + 0.0000001*a^5 + 0.00000001*a^6 + 0.000000001*a^7 + 0.0000000001*a^8 + 0.000001*a^3 + 0.0000001*a^9 + 0.00000001*a^10 + 0.000000001*a^11 + 0.0000000001*a^12\nextra = { exp(-a/0.1) * (z/(1+abs(z))) * (1+0.005*sin(1/(1+a))) * (1+0.002*cos(0.5*a)) * ([1+0.003*cos(0.3*a)]^2) * ([1+0.004*cos(0.3*a)]^2) * (1+0.0025*cos(0.7*a)) * (1+tanh(0.05*a)) * (1+sigmoid(0.01*a)) * (1.07*softplus(0.865/(1+a)) + 0.15*(0.865/(1+a)) + 0.5*(0.865/(1+a)) + 0.006*a) * (1-0.002*cos(a)) * (1-0.0025*cos(2.5*a)) * (1+0.001*a) * ([1+cosh(0.001*a)]^(2+0.0005*a)) + 1e-6 }^(0.9478+0.00018*ln(1+a)) * (1+tanh(0.05*a))\nExponent = (0.9478 + 0.00018*ln(1+a)) * (1 + 0.003*sin(2*a) + 0.001*cos(3*a) + 0.0025*cos(0.7*a) + 0.004*sin(2.5*a) + 0.002*cos(3.5*a) + 0.001*sin(2.5*a)*cos(3*a))\nf(x) = sign(z) * [ f_adapt(z) * T * extra ]^(Exponent)\nU = beta + gamma * f(x)\nP(accept=1) = 1/(1 + exp(-U))",
  "variable_descriptions": {
    "F1": {
      "description": "Fixed component 1 extracted from the dataset (e.g., token_self)",
      "range": {
        "min": -1000000,
        "max": 1000000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "F2": {
      "description": "Fixed component 2 extracted from the dataset (e.g., token_opp)",
      "range": {
        "min": -1000000,
        "max": 1000000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "F3": {
      "description": "Fixed component 3 extracted from the dataset (e.g., combined_earning)",
      "range": {
        "min": -1000000,
        "max": 1000000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "F4": {
      "description": "Fixed component 4 extracted from the dataset (e.g., split_self)",
      "range": {
        "min": -1000000,
        "max": 1000000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "F5": {
      "description": "Fixed component 5 extracted from the dataset (e.g., split_opp)",
      "range": {
        "min": -1000000,
        "max": 1000000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "F6": {
      "description": "Fixed component 6 extracted from the dataset (e.g., splitperc_self)",
      "range": {
        "min": -1000000,
        "max": 1000000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "F7": {
      "description": "Fixed component 7 extracted from the dataset (e.g., splitperc_opp)",
      "range": {
        "min": -1000000,
        "max": 1000000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "F8": {
      "description": "Fixed component 8 extracted from the dataset (e.g., trial_type)",
      "range": {
        "min": -1000000,
        "max": 1000000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "F9": {
      "description": "Fixed component 9 extracted from the dataset (e.g., trial_role)",
      "range": {
        "min": -1000000,
        "max": 1000000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "F10": {
      "description": "Fixed component 10 extracted from the dataset (e.g., accepted_amount)",
      "range": {
        "min": -1000000,
        "max": 1000000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "F11": {
      "description": "Fixed component 11 extracted from the dataset (e.g., accepted_perc)",
      "range": {
        "min": -1000000,
        "max": 1000000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "delta": {
      "description": "Small constant offset added to the core sum a",
      "range": {
        "min": 1e-06,
        "max": 0.01,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "constant"
    },
    "Delta_shift": {
      "description": "Small constant shift used in the negative branch of the adaptive transformation",
      "range": {
        "min": 1e-06,
        "max": 0.01,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "constant"
    },
    "beta": {
      "description": "Learnable base utility parameter",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Learnable scaling parameter for the transformed signal",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "phi": {
      "description": "Learnable parameter governing the adaptive transformation and modulation weight",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "a": {
      "description": "Core sum computed as the sum of F1 through F11 plus delta",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "a_mod": {
      "description": "Scaled and nonlinearly modulated core sum",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "m1": {
      "description": "Intermediate modulation factor 1",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "m2": {
      "description": "Intermediate modulation factor 2",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "m3": {
      "description": "Intermediate modulation factor 3",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "m4": {
      "description": "Intermediate modulation factor 4",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "m5": {
      "description": "Intermediate modulation factor 5",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "z": {
      "description": "Final modulated signal after sequential corrections",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "w": {
      "description": "Weight computed from phi for adaptive transformation",
      "range": {
        "min": 0,
        "max": 0.67,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "f_adapt": {
      "description": "Adaptive transformation function applied to z",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "T": {
      "description": "Dynamic threshold defined as an extended polynomial of a",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "extra": {
      "description": "Extra composite modulation term combining multiple nonlinear factors",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "Exponent": {
      "description": "Final exponent factor incorporating high\u2010order polynomial and sine\u2013cosine modulation",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "f(x)": {
      "description": "Final transformed signal after applying adaptive transformation, dynamic threshold, and extra composite modulation",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "U": {
      "description": "Latent utility computed as a linear combination of beta and gamma*f(x)",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "P_accept": {
      "description": "Predicted probability of acceptance obtained by applying the logistic function to U",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "A highly nonlinear utility model that computes a core sum from 11 fixed dataset\u2010derived components augmented by a small constant. The signal is sequentially modulated with several sinusoidal and cosine factors, then transformed via a piecewise adaptive function that employs a softsign correction and explicit clipping. A high\u2010order polynomial dynamic threshold and an elaborate extra composite term with additional sigmoid and tanh factors further modulate the signal. The final transformed value is exponentiated by a composite sine\u2013cosine modulated exponent, scaled by learnable parameters beta and gamma, and mapped through a logistic function to yield the probability of acceptance.",
  "target_variable": "accept",
  "full_reasoning": "<MODEL>\na = F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11 + delta\na_mod = 1.08 * a * (1 + 0.012*sin(a + 0.045))\nm1 = a_mod * (1 + 0.008*cos(a + 0.065))\nm2 = m1 * (1 + 0.005*sin(a + 0.115))\nm3 = m2 * (1 + 0.004*cos(a + 0.085))\nm4 = m3 * (1 + 0.006*(sin(a + 0.035)*cos(a + 0.055)))\nm5 = m4 * (1 + 0.003*(sin(a + 0.03)*cos(a + 0.05)))\nz = m5\nw = (phi - 0.5)/phi\nf_adapt(z) = { 1.002 * [z^w * (ln(1+z))^(1-w)] * (z/(1+abs(z)))  if z \u2265 0 ;  phi * [ (z + Delta_shift)/(1+abs(z+Delta_shift)) ]^7  if z < 0 }\nT = 1 + 0.0005*a^2 + 0.00005*a^3 + 0.000005*a^4 + 0.0000001*a^5 + 0.00000001*a^6 + 0.000000001*a^7 + 0.0000000001*a^8 + 0.000001*a^3 + 0.0000001*a^9 + 0.00000001*a^10 + 0.000000001*a^11 + 0.0000000001*a^12\nextra = { exp(-a/0.1) * (z/(1+abs(z))) * (1+0.005*sin(1/(1+a))) * (1+0.002*cos(0.5*a)) * ([1+0.003*cos(0.3*a)]^2) * ([1+0.004*cos(0.3*a)]^2) * (1+0.0025*cos(0.7*a)) * (1+tanh(0.05*a)) * (1+sigmoid(0.01*a)) * (1.07*softplus(0.865/(1+a)) + 0.15*(0.865/(1+a)) + 0.5*(0.865/(1+a)) + 0.006*a) * (1-0.002*cos(a)) * (1-0.0025*cos(2.5*a)) * (1+0.001*a) * ([1+cosh(0.001*a)]^(2+0.0005*a)) + 1e-6 }^(0.9478+0.00018*ln(1+a)) * (1+tanh(0.05*a))\nExponent = (0.9478 + 0.00018*ln(1+a)) * (1 + 0.003*sin(2*a) + 0.001*cos(3*a) + 0.0025*cos(0.7*a) + 0.004*sin(2.5*a) + 0.002*cos(3.5*a) + 0.001*sin(2.5*a)*cos(3*a))\nf(x) = sign(z) * [ f_adapt(z) * T * extra ]^(Exponent)\nU = beta + gamma * f(x)\nP(accept=1) = 1/(1 + exp(-U))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"F1\": {\n      \"description\": \"Fixed component 1 extracted from the dataset (e.g., token_self)\",\n      \"range\": {\n        \"min\": -1000000,\n        \"max\": 1000000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F2\": {\n      \"description\": \"Fixed component 2 extracted from the dataset (e.g., token_opp)\",\n      \"range\": {\n        \"min\": -1000000,\n        \"max\": 1000000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F3\": {\n      \"description\": \"Fixed component 3 extracted from the dataset (e.g., combined_earning)\",\n      \"range\": {\n        \"min\": -1000000,\n        \"max\": 1000000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F4\": {\n      \"description\": \"Fixed component 4 extracted from the dataset (e.g., split_self)\",\n      \"range\": {\n        \"min\": -1000000,\n        \"max\": 1000000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F5\": {\n      \"description\": \"Fixed component 5 extracted from the dataset (e.g., split_opp)\",\n      \"range\": {\n        \"min\": -1000000,\n        \"max\": 1000000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F6\": {\n      \"description\": \"Fixed component 6 extracted from the dataset (e.g., splitperc_self)\",\n      \"range\": {\n        \"min\": -1000000,\n        \"max\": 1000000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F7\": {\n      \"description\": \"Fixed component 7 extracted from the dataset (e.g., splitperc_opp)\",\n      \"range\": {\n        \"min\": -1000000,\n        \"max\": 1000000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F8\": {\n      \"description\": \"Fixed component 8 extracted from the dataset (e.g., trial_type)\",\n      \"range\": {\n        \"min\": -1000000,\n        \"max\": 1000000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F9\": {\n      \"description\": \"Fixed component 9 extracted from the dataset (e.g., trial_role)\",\n      \"range\": {\n        \"min\": -1000000,\n        \"max\": 1000000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F10\": {\n      \"description\": \"Fixed component 10 extracted from the dataset (e.g., accepted_amount)\",\n      \"range\": {\n        \"min\": -1000000,\n        \"max\": 1000000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F11\": {\n      \"description\": \"Fixed component 11 extracted from the dataset (e.g., accepted_perc)\",\n      \"range\": {\n        \"min\": -1000000,\n        \"max\": 1000000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"delta\": {\n      \"description\": \"Small constant offset added to the core sum a\",\n      \"range\": {\n        \"min\": 1e-6,\n        \"max\": 1e-2,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"constant\"\n    },\n    \"Delta_shift\": {\n      \"description\": \"Small constant shift used in the negative branch of the adaptive transformation\",\n      \"range\": {\n        \"min\": 1e-6,\n        \"max\": 1e-2,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"constant\"\n    },\n    \"beta\": {\n      \"description\": \"Learnable base utility parameter\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Learnable scaling parameter for the transformed signal\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Learnable parameter governing the adaptive transformation and modulation weight\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"a\": {\n      \"description\": \"Core sum computed as the sum of F1 through F11 plus delta\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a_mod\": {\n      \"description\": \"Scaled and nonlinearly modulated core sum\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"m1\": {\n      \"description\": \"Intermediate modulation factor 1\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"m2\": {\n      \"description\": \"Intermediate modulation factor 2\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"m3\": {\n      \"description\": \"Intermediate modulation factor 3\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"m4\": {\n      \"description\": \"Intermediate modulation factor 4\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"m5\": {\n      \"description\": \"Intermediate modulation factor 5\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"z\": {\n      \"description\": \"Final modulated signal after sequential corrections\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"w\": {\n      \"description\": \"Weight computed from phi for adaptive transformation\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 0.67,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_adapt\": {\n      \"description\": \"Adaptive transformation function applied to z\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"T\": {\n      \"description\": \"Dynamic threshold defined as an extended polynomial of a\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"extra\": {\n      \"description\": \"Extra composite modulation term combining multiple nonlinear factors\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"Exponent\": {\n      \"description\": \"Final exponent factor incorporating high\u2010order polynomial and sine\u2013cosine modulation\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f(x)\": {\n      \"description\": \"Final transformed signal after applying adaptive transformation, dynamic threshold, and extra composite modulation\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed as a linear combination of beta and gamma*f(x)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"P_accept\": {\n      \"description\": \"Predicted probability of acceptance obtained by applying the logistic function to U\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA highly nonlinear utility model that computes a core sum from 11 fixed dataset\u2010derived components augmented by a small constant. The signal is sequentially modulated with several sinusoidal and cosine factors, then transformed via a piecewise adaptive function that employs a softsign correction and explicit clipping. A high\u2010order polynomial dynamic threshold and an elaborate extra composite term with additional sigmoid and tanh factors further modulate the signal. The final transformed value is exponentiated by a composite sine\u2013cosine modulated exponent, scaled by learnable parameters beta and gamma, and mapped through a logistic function to yield the probability of acceptance.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: a = F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11 + delta\na_mod = 1.08 * a * (1 + 0.012*sin(a + 0.045))\nm1 = a_mod * (1 + 0.008*cos(a + 0.065))\nm2 = m1 * (1 + 0.005*sin(a + 0.115))\nm3 = m2 * (1 + 0.004*cos(a + 0.085))\nm4 = m3 * (1 + 0.006*(sin(a + 0.035)*cos(a + 0.055)))\nm5 = m4 * (1 + 0.003*(sin(a + 0.03)*cos(a + 0.05)))\nz = m5\nw = (phi - 0.5)/phi\nf_adapt(z) = { 1.002 * [z^w * (ln(1+z))^(1-w)] * (z/(1+abs(z)))  if z \u2265 0 ;  phi * [ (z + Delta_shift)/(1+abs(z+Delta_shift)) ]^7  if z < 0 }\nT = 1 + 0.0005*a^2 + 0.00005*a^3 + 0.000005*a^4 + 0.0000001*a^5 + 0.00000001*a^6 + 0.000000001*a^7 + 0.0000000001*a^8 + 0.000001*a^3 + 0.0000001*a^9 + 0.00000001*a^10 + 0.000000001*a^11 + 0.0000000001*a^12\nextra = { exp(-a/0.1) * (z/(1+abs(z))) * (1+0.005*sin(1/(1+a))) * (1+0.002*cos(0.5*a)) * ([1+0.003*cos(0.3*a)]^2) * ([1+0.004*cos(0.3*a)]^2) * (1+0.0025*cos(0.7*a)) * (1+tanh(0.05*a)) * (1+sigmoid(0.01*a)) * (1.07*softplus(0.865/(1+a)) + 0.15*(0.865/(1+a)) + 0.5*(0.865/(1+a)) + 0.006*a) * (1-0.002*cos(a)) * (1-0.0025*cos(2.5*a)) * (1+0.001*a) * ([1+cosh(0.001*a)]^(2+0.0005*a)) + 1e-6 }^(0.9478+0.00018*ln(1+a)) * (1+tanh(0.05*a))\nExponent = (0.9478 + 0.00018*ln(1+a)) * (1 + 0.003*sin(2*a) + 0.001*cos(3*a) + 0.0025*cos(0.7*a) + 0.004*sin(2.5*a) + 0.002*cos(3.5*a) + 0.001*sin(2.5*a)*cos(3*a))\nf(x) = sign(z) * [ f_adapt(z) * T * extra ]^(Exponent)\nU = beta + gamma * f(x)\nP(accept=1) = 1/(1 + exp(-U))\nSummary: A highly nonlinear utility model that computes a core sum from 11 fixed dataset\u2010derived components augmented by a small constant. The signal is sequentially modulated with several sinusoidal and cosine factors, then transformed via a piecewise adaptive function that employs a softsign correction and explicit clipping. A high\u2010order polynomial dynamic threshold and an elaborate extra composite term with additional sigmoid and tanh factors further modulate the signal. The final transformed value is exponentiated by a composite sine\u2013cosine modulated exponent, scaled by learnable parameters beta and gamma, and mapped through a logistic function to yield the probability of acceptance.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, beta=0.0, gamma=1.0, phi=1.0):\n    model_predictions = []\n    delta = 1e-06\n    Delta_shift = 1e-06\n\n    def sigmoid(x):\n        return 1 / (1 + math.exp(-x))\n\n    def tanh(x):\n        return (math.exp(x) - math.exp(-x)) / (math.exp(x) + math.exp(-x))\n\n    def softplus(x):\n        return math.log(1 + math.exp(x))\n\n    def cosh(x):\n        return (math.exp(x) + math.exp(-x)) / 2\n\n    def sign(x):\n        if x >= 0:\n            return 1\n        else:\n            return -1\n\n    def ln(x):\n        if x <= 0:\n            return float('-inf')\n        else:\n            return math.log(x)\n\n    for trial in trial_data:\n        F1 = trial.get(\"token_self\", 0)\n        F2 = trial.get(\"token_opp\", 0)\n        F3 = trial.get(\"combined_earning\", 0)\n        F4 = trial.get(\"split_self\", 0)\n        F5 = trial.get(\"split_opp\", 0)\n        F6 = trial.get(\"splitperc_self\", 0)\n        F7 = trial.get(\"splitperc_opp\", 0)\n        F8 = trial.get(\"trial_type\", 0)\n        F9 = trial.get(\"trial_role\", 0)\n        F10 = trial.get(\"accepted_amount\", 0)\n        F11 = trial.get(\"accepted_perc\", 0)\n\n        a = F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11 + delta\n        a_mod = 1.08 * a * (1 + 0.012 * math.sin(a + 0.045))\n        m1 = a_mod * (1 + 0.008 * math.cos(a + 0.065))\n        m2 = m1 * (1 + 0.005 * math.sin(a + 0.115))\n        m3 = m2 * (1 + 0.004 * math.cos(a + 0.085))\n        m4 = m3 * (1 + 0.006 * (math.sin(a + 0.035) * math.cos(a + 0.055)))\n        m5 = m4 * (1 + 0.003 * (math.sin(a + 0.03) * math.cos(a + 0.05)))\n        z = m5\n        w = (phi - 0.5) / phi\n\n        if z >= 0:\n            if z == 0:\n              f_adapt_z = 0\n            else:\n              f_adapt_z = 1.002 * (z**w) * (ln(1+z)**(1-w)) * (z/(1+abs(z)))\n        else:\n            f_adapt_z = phi * ((z + Delta_shift) / (1 + abs(z + Delta_shift)))**7\n\n        T = 1 + 0.0005 * a**2 + 0.00005 * a**3 + 0.000005 * a**4 + 0.0000001 * a**5 + 0.00000001 * a**6 + 0.000000001 * a**7 + 0.0000000001 * a**8 + 0.000001 * a**3 + 0.0000001 * a**9 + 0.00000001 * a**10 + 0.000000001 * a**11 + 0.0000000001 * a**12\n\n        extra_base = math.exp(-a / 0.1) * (z / (1 + abs(z))) * (1 + 0.005 * math.sin(1 / (1 + a))) * (1 + 0.002 * math.cos(0.5 * a)) * ((1 + 0.003 * math.cos(0.3 * a))**2) * ((1 + 0.004 * math.cos(0.3 * a))**2) * (1 + 0.0025 * math.cos(0.7 * a)) * (1 + tanh(0.05 * a)) * (1 + sigmoid(0.01 * a)) * (1.07 * softplus(0.865 / (1 + a)) + 0.15 * (0.865 / (1 + a)) + 0.5 * (0.865 / (1 + a)) + 0.006 * a) * (1 - 0.002 * math.cos(a)) * (1 - 0.0025 * math.cos(2.5 * a)) * (1 + 0.001 * a) * ((1 + cosh(0.001 * a))**(2 + 0.0005 * a)) + 1e-6\n        extra = extra_base ** (0.9478 + 0.00018 * ln(1 + a)) * (1 + tanh(0.05 * a))\n        \n\n        Exponent = (0.9478 + 0.00018 * ln(1 + a)) * (1 + 0.003 * math.sin(2 * a) + 0.001 * math.cos(3 * a) + 0.0025 * math.cos(0.7 * a) + 0.004 * math.sin(2.5 * a) + 0.002 * math.cos(3.5 * a) + 0.001 * math.sin(2.5 * a) * math.cos(3 * a))\n        if f_adapt_z * T * extra < 0 and Exponent != 1:\n          fx = 0\n        else:\n          fx = sign(z) * (abs(f_adapt_z * T * extra) ** Exponent)\n        U = beta + gamma * fx\n        P_accept = 1 / (1 + math.exp(-U))\n\n        model_predictions.append(P_accept)\n\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.5326617826617827,
  "fitting_results": [
    {
      "beta": 2.2020230145725783,
      "gamma": 8.579771657103967,
      "phi": 0.8394646397297754,
      "success": true,
      "log_likelihood": -44.277420737975305,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -7.417670565685734,
      "gamma": 0.5314568438569445,
      "phi": 0.9321617211467199,
      "success": true,
      "log_likelihood": -29.27742074150091,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 6.599563755356964,
      "gamma": 6.745019169480749,
      "phi": 1.4056031476605133,
      "success": true,
      "log_likelihood": -28.277420741735956,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -8.030534230660889,
      "gamma": 8.706217498613421,
      "phi": 0.6662965020512189,
      "success": true,
      "log_likelihood": -32.27742074079579,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 3.130105633978177,
      "gamma": 4.919353558020346,
      "phi": 0.5390508588729899,
      "success": true,
      "log_likelihood": -31.27742074103083,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -6.512682145580964,
      "gamma": 2.0377164978604156,
      "phi": 0.7625088687756049,
      "success": true,
      "log_likelihood": -24.277420742676117,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.2133701742679897,
      "gamma": 2.074527936598425,
      "phi": 1.3202047638410077,
      "success": true,
      "log_likelihood": -11.27742074573165,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -3.404583696478742,
      "gamma": 8.615751557403975,
      "phi": 1.0524417654925708,
      "success": true,
      "log_likelihood": -23.277420742911158,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -3.8088609452872024,
      "gamma": 6.790008536459812,
      "phi": 1.2786411913933413,
      "success": true,
      "log_likelihood": -11.27742074573165,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.09904834771601934,
      "gamma": 3.5703359299930715,
      "phi": 1.0399018862888072,
      "success": true,
      "log_likelihood": -33.27742074056075,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 4.702675435512948,
      "gamma": 1.6284700453619483,
      "phi": 1.4401978184974433,
      "success": true,
      "log_likelihood": -31.27742074103083,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.5853678422808688,
      "gamma": 3.2228100550659713,
      "phi": 0.7808436322614727,
      "success": true,
      "log_likelihood": -43.277420738210346,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.25,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 3.7792136635411175,
      "gamma": 7.567868537857994,
      "phi": 1.206048505460993,
      "success": true,
      "log_likelihood": -32.2774207407958,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -8.373814132523286,
      "gamma": 3.6819000771564836,
      "phi": 0.6577683044261403,
      "success": true,
      "log_likelihood": -11.27742074573165,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -9.4514952419276,
      "gamma": 8.828827214469156,
      "phi": 0.6813320029369484,
      "success": true,
      "log_likelihood": -11.27742074573165,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.4701285333836758,
      "gamma": 8.055192626066072,
      "phi": 1.0138510994959227,
      "success": true,
      "log_likelihood": -11.27742074573165,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 9.724391766395943,
      "gamma": 8.072875459531438,
      "phi": 1.1574007740219305,
      "success": true,
      "log_likelihood": -11.27742074573165,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.0524546252847315,
      "gamma": 9.666141885343219,
      "phi": 0.5546264657717828,
      "success": true,
      "log_likelihood": -16.277420744556444,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -4.857640507800136,
      "gamma": 5.273326814477105,
      "phi": 1.3033872347222462,
      "success": true,
      "log_likelihood": -15.277420744791481,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -7.737928805130505,
      "gamma": 5.142998373727044,
      "phi": 0.9829560211241714,
      "success": true,
      "log_likelihood": -11.27742074573165,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -3.4695439959651875,
      "gamma": 0.12153050873847104,
      "phi": 1.2393155691062345,
      "success": true,
      "log_likelihood": -27.277420741970992,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 3.1819385002950966,
      "gamma": 5.381918613040248,
      "phi": 1.438240452236444,
      "success": true,
      "log_likelihood": -16.277420744556444,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -5.972652507043657,
      "gamma": 6.606763195875277,
      "phi": 1.4276911159096217,
      "success": true,
      "log_likelihood": -34.27742074032571,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.537001195425777,
      "gamma": 5.348468633952993,
      "phi": 1.0836708787670832,
      "success": true,
      "log_likelihood": -28.277420741735952,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.2701686927982596,
      "gamma": 6.792140724615344,
      "phi": 1.0308317207856734,
      "success": true,
      "log_likelihood": -29.277420741500915,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -5.072101565796343,
      "gamma": 5.816530516906822,
      "phi": 0.9512387823706444,
      "success": true,
      "log_likelihood": -26.277420742206036,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -7.394992336151405,
      "gamma": 8.221953197812955,
      "phi": 1.0553829679392015,
      "success": true,
      "log_likelihood": -27.277420741970996,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.6168481269783115,
      "gamma": 4.574073909097653,
      "phi": 0.5316290569604284,
      "success": true,
      "log_likelihood": -37.277420739620595,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.25,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.22327509158606063,
      "gamma": 6.886917410544763,
      "phi": 1.0047810470476857,
      "success": true,
      "log_likelihood": -15.277420744791485,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 6.087550324157654,
      "gamma": 8.593409490126806,
      "phi": 0.6175030019208905,
      "success": true,
      "log_likelihood": -19.277420743851323,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 4.217429294534874,
      "gamma": 5.987824568087897,
      "phi": 1.2370235842021184,
      "success": true,
      "log_likelihood": -11.27742074573165,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -4.638539439709595,
      "gamma": 5.51300174951921,
      "phi": 1.3225569504439572,
      "success": true,
      "log_likelihood": -44.277420737975305,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.4046937657655416,
      "gamma": 4.590986169894454,
      "phi": 1.2135901869786485,
      "success": true,
      "log_likelihood": -32.2774207407958,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.06352882890180034,
      "gamma": 1.5516783970420067,
      "phi": 1.0597102592640688,
      "success": true,
      "log_likelihood": -33.27742074056075,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -6.863839616570051,
      "gamma": 4.838387968012338,
      "phi": 0.7218191067735412,
      "success": true,
      "log_likelihood": -11.27742074573165,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.6762644525913384,
      "gamma": 4.395716704970397,
      "phi": 0.8786498369120034,
      "success": true,
      "log_likelihood": -24.277420742676114,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 8.52462398065818,
      "gamma": 4.681425299113484,
      "phi": 0.8050319651714838,
      "success": true,
      "log_likelihood": -22.277420743146198,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.8048751685221625,
      "gamma": 8.607229480493034,
      "phi": 0.8489055780784412,
      "success": true,
      "log_likelihood": -29.27742074150091,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -7.652380527047105,
      "gamma": 4.949427069956089,
      "phi": 0.7579127467482762,
      "success": true,
      "log_likelihood": -23.277420742911154,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.06689432397425144,
      "gamma": 1.9552667201259477,
      "phi": 1.3118520951384531,
      "success": true,
      "log_likelihood": -14.277420745026529,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.4178203635903976,
      "gamma": 2.1550465831259924,
      "phi": 1.1047298177151583,
      "success": true,
      "log_likelihood": -25.277420742441073,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -5.669330770448928,
      "gamma": 1.1920076782690348,
      "phi": 1.2067368850059923,
      "success": true,
      "log_likelihood": -39.27742073915051,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.2777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.1931095859666208,
      "gamma": 6.425425436273019,
      "phi": 0.8922082882232052,
      "success": true,
      "log_likelihood": -12.277420745496608,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 3.1592157035124746,
      "gamma": 5.3850349265761634,
      "phi": 0.8044065621031489,
      "success": true,
      "log_likelihood": -27.277420741970992,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -4.277608298793252,
      "gamma": 9.940047257828896,
      "phi": 1.1144894100603504,
      "success": true,
      "log_likelihood": -25.277420742441073,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -8.976589566027098,
      "gamma": 7.245354741486737,
      "phi": 0.5524517022758423,
      "success": true,
      "log_likelihood": -21.27742074338124,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 5.182764981516126,
      "gamma": 8.263406181458533,
      "phi": 1.1311695214280828,
      "success": true,
      "log_likelihood": -28.277420741735952,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 9.071126661633429,
      "gamma": 1.9709528624682837,
      "phi": 1.1693432153134322,
      "success": true,
      "log_likelihood": -33.27742074056075,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.765037694961297,
      "gamma": 7.8563732923350145,
      "phi": 0.7827092073524019,
      "success": true,
      "log_likelihood": -32.2774207407958,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -8.909447317064208,
      "gamma": 9.78842391402729,
      "phi": 1.2228724470576302,
      "success": true,
      "log_likelihood": -28.277420741735952,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 4.187301733081696,
      "gamma": 2.2924971412209008,
      "phi": 0.9460127498026094,
      "success": true,
      "log_likelihood": -22.277420743146195,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 8.971975377757545,
      "gamma": 1.9669142153255281,
      "phi": 1.299764333429811,
      "success": true,
      "log_likelihood": -42.277420738445386,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.2222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 5.876474774449974,
      "gamma": 9.251503417811227,
      "phi": 1.2117369240987361,
      "success": true,
      "log_likelihood": -28.277420741735956,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 8.469093710762142,
      "gamma": 0.4979909679050587,
      "phi": 1.120092403964723,
      "success": true,
      "log_likelihood": -26.277420742206033,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.1899758512217105,
      "gamma": 5.921632512178379,
      "phi": 0.8481895556770797,
      "success": true,
      "log_likelihood": -33.27742074056075,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3333333333333333,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.67721422074678,
      "gamma": 6.957642677512973,
      "phi": 1.4446946858956808,
      "success": true,
      "log_likelihood": -35.27742074009067,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3333333333333333,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -4.667028203447899,
      "gamma": 5.445135352992738,
      "phi": 0.5231742071101417,
      "success": true,
      "log_likelihood": -37.277420739620595,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 7.435794900565334,
      "gamma": 2.9015204332588027,
      "phi": 0.8937543667323886,
      "success": true,
      "log_likelihood": -15.277420744791483,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.8647518871556201,
      "gamma": 5.601852733370791,
      "phi": 1.2590138509158888,
      "success": true,
      "log_likelihood": -43.277420738210346,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.4409654976766664,
      "gamma": 4.772294167566012,
      "phi": 1.1884012311725014,
      "success": true,
      "log_likelihood": -18.27742074408636,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 8.360961671759831,
      "gamma": 7.441102529015991,
      "phi": 0.6569592138399041,
      "success": true,
      "log_likelihood": -25.277420742441077,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 9.256621808030495,
      "gamma": 0.5334243591924448,
      "phi": 1.444888320209567,
      "success": true,
      "log_likelihood": -29.277420741500915,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -5.946877031526007,
      "gamma": 0.8004121954648891,
      "phi": 0.5875925430664778,
      "success": true,
      "log_likelihood": -44.277420737975305,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.2777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 7.6067554253232466,
      "gamma": 7.661457436282597,
      "phi": 0.9767178397976586,
      "success": true,
      "log_likelihood": -31.27742074103083,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.18790194420169115,
      "gamma": 3.3341053384852692,
      "phi": 1.206012870427461,
      "success": true,
      "log_likelihood": -39.27742073915051,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3333333333333333,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 8.550983846242051,
      "gamma": 7.814547084905218,
      "phi": 1.1876206959785858,
      "success": true,
      "log_likelihood": -27.277420741970996,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -5.177381342532874,
      "gamma": 0.39799967628050714,
      "phi": 1.1641880473702337,
      "success": true,
      "log_likelihood": -14.277420745026523,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 5.720567911903041,
      "gamma": 4.902284181602389,
      "phi": 1.1828997583535785,
      "success": true,
      "log_likelihood": -16.277420744556448,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -4.998670670338077,
      "gamma": 4.623394899028873,
      "phi": 1.0698885614437739,
      "success": true,
      "log_likelihood": -27.277420741970992,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 8.738844299888513,
      "gamma": 5.754918189361199,
      "phi": 1.3394489990085607,
      "success": true,
      "log_likelihood": -14.277420745026525,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -7.063745646780879,
      "gamma": 4.71732502592058,
      "phi": 0.8034646041462795,
      "success": true,
      "log_likelihood": -43.277420738210346,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3333333333333333,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -3.911635349396514,
      "gamma": 5.67089983883638,
      "phi": 0.5788935835644413,
      "success": true,
      "log_likelihood": -42.277420738445386,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.19444444444444445,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -8.865072661891876,
      "gamma": 4.7662893691952934,
      "phi": 0.5694275066422546,
      "success": true,
      "log_likelihood": -28.277420741735952,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -5.926719799431719,
      "gamma": 6.409303536358397,
      "phi": 1.2181065157489748,
      "success": true,
      "log_likelihood": -19.27742074385132,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.674721576135635,
      "gamma": 5.949891918980221,
      "phi": 1.1366516109298495,
      "success": true,
      "log_likelihood": -29.27742074150091,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 3.8397177244659666,
      "gamma": 5.972784214268719,
      "phi": 1.0492850837845031,
      "success": true,
      "log_likelihood": -22.277420743146195,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -5.079638790923193,
      "gamma": 0.9836671015111487,
      "phi": 0.6871531753098268,
      "success": true,
      "log_likelihood": -13.277420745261566,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.428731823479085,
      "gamma": 1.9788362936696546,
      "phi": 1.3333552671060516,
      "success": true,
      "log_likelihood": -45.277420737740265,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.2777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -7.179084123388682,
      "gamma": 0.3142836216432343,
      "phi": 0.9083281634052076,
      "success": true,
      "log_likelihood": -25.277420742441073,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.051165289707928,
      "gamma": 4.221763049048563,
      "phi": 0.7239407642185687,
      "success": true,
      "log_likelihood": -44.277420737975305,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3333333333333333,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.168018020307434,
      "gamma": 2.8516433981615332,
      "phi": 1.494748188144372,
      "success": true,
      "log_likelihood": -28.277420741735952,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -3.852250152437742,
      "gamma": 1.7738398162399316,
      "phi": 1.248749376384089,
      "success": true,
      "log_likelihood": -14.277420745026525,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -5.633271190606499,
      "gamma": 4.348265376919565,
      "phi": 1.2714859015481783,
      "success": true,
      "log_likelihood": -43.277420738210346,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.6798811612428661,
      "gamma": 7.686178665569637,
      "phi": 1.3741063007491459,
      "success": true,
      "log_likelihood": -29.27742074150091,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.7910561995128358,
      "gamma": 3.3188527159053116,
      "phi": 1.3318190557604488,
      "success": true,
      "log_likelihood": -25.277420742441073,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -5.625425872414505,
      "gamma": 7.884436168410457,
      "phi": 1.0762041019209077,
      "success": true,
      "log_likelihood": -43.277420738210346,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -7.37009970430049,
      "gamma": 9.909974404074045,
      "phi": 1.1926188533859285,
      "success": true,
      "log_likelihood": -22.277420743146198,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 9.744287487534574,
      "gamma": 8.120316619028582,
      "phi": 1.3711530116448984,
      "success": true,
      "log_likelihood": -39.27742073915051,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 4.119084330591589,
      "gamma": 9.005027189861277,
      "phi": 1.121625300765587,
      "success": true,
      "log_likelihood": -13.277420745261566,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 3.7617075565511175,
      "gamma": 6.348162593459409,
      "phi": 0.7844728214992746,
      "success": true,
      "log_likelihood": -30.27742074126587,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -5.99226831433783,
      "gamma": 9.937678143639724,
      "phi": 1.1435761951332162,
      "success": true,
      "log_likelihood": -22.277420743146195,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "beta": {
        "r": 0.11040860019470239,
        "p": 0.27415144855603985
      },
      "gamma": {
        "r": 0.13482306166225824,
        "p": 0.18109369696517155
      },
      "phi": {
        "r": -0.03969488013993011,
        "p": 0.6949748870801504
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 64.3163873105318,
  "bic_results": {
    "average_bic": 64.3163873105318,
    "individual_bics": [
      99.30539829131894,
      69.30539829837015,
      67.30539829884025,
      75.30539829695991,
      73.30539829742999,
      59.30539830072057,
      33.305398306831634,
      57.30539830119065,
      33.305398306831634,
      77.30539829648983,
      73.30539829742999,
      97.30539829178902,
      75.30539829695992,
      33.305398306831634,
      33.305398306831634,
      33.305398306831634,
      33.305398306831634,
      43.305398304481216,
      41.3053983049513,
      33.305398306831634,
      65.30539829931031,
      43.305398304481216,
      79.30539829601975,
      67.30539829884023,
      69.30539829837016,
      63.30539829978041,
      65.30539829931033,
      85.30539829460952,
      41.3053983049513,
      49.30539830307097,
      33.305398306831634,
      99.30539829131894,
      75.30539829695992,
      77.30539829648983,
      33.305398306831634,
      59.305398300720555,
      55.30539830166073,
      69.30539829837015,
      57.305398301190635,
      39.30539830542139,
      61.305398300250474,
      89.30539829366934,
      35.305398306361546,
      65.30539829931031,
      61.305398300250474,
      53.30539830213081,
      67.30539829884023,
      77.30539829648983,
      75.30539829695992,
      67.30539829884023,
      55.305398301660716,
      95.3053982922591,
      67.30539829884025,
      63.30539829978039,
      77.30539829648983,
      81.30539829554967,
      85.30539829460952,
      41.3053983049513,
      97.30539829178902,
      47.305398303541054,
      61.30539830025049,
      69.30539829837016,
      99.30539829131894,
      73.30539829742999,
      89.30539829366934,
      65.30539829931033,
      39.30539830542138,
      43.30539830448123,
      65.30539829931031,
      39.30539830542138,
      97.30539829178902,
      95.3053982922591,
      67.30539829884023,
      49.30539830307097,
      69.30539829837015,
      55.305398301660716,
      37.30539830589146,
      101.30539829084886,
      61.305398300250474,
      99.30539829131894,
      67.30539829884023,
      39.30539830542138,
      97.30539829178902,
      69.30539829837015,
      61.305398300250474,
      97.30539829178902,
      55.30539830166073,
      89.30539829366934,
      37.30539830589146,
      71.30539829790007,
      55.305398301660716
    ],
    "group_enabled": false,
    "group_bics": null,
    "num_parameters": 3,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- beta: r = 0.110\n- gamma: r = 0.135\n- phi: r = -0.040",
  "previous_models": [
    "Specification: a = F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11 + delta\na_mod = 1.08 * a * (1 + 0.012*sin(a + 0.045))\nm1 = a_mod * (1 + 0.008*cos(a + 0.065))\nm2 = m1 * (1 + 0.005*sin(a + 0.115))\nm3 = m2 * (1 + 0.004*cos(a + 0.085))\nm4 = m3 * (1 + 0.006*(sin(a + 0.035)*cos(a + 0.055)))\nm5 = m4 * (1 + 0.003*(sin(a + 0.03)*cos(a + 0.05)))\nz = m5\nw = (phi - 0.5)/phi\nf_adapt(z) = { 1.002 * [z^w * (ln(1+z))^(1-w)] * (z/(1+abs(z)))  if z \u2265 0 ;  phi * [ (z + Delta_shift)/(1+abs(z+Delta_shift)) ]^7  if z < 0 }\nT = 1 + 0.0005*a^2 + 0.00005*a^3 + 0.000005*a^4 + 0.0000001*a^5 + 0.00000001*a^6 + 0.000000001*a^7 + 0.0000000001*a^8 + 0.000001*a^3 + 0.0000001*a^9 + 0.00000001*a^10 + 0.000000001*a^11 + 0.0000000001*a^12\nextra = { exp(-a/0.1) * (z/(1+abs(z))) * (1+0.005*sin(1/(1+a))) * (1+0.002*cos(0.5*a)) * ([1+0.003*cos(0.3*a)]^2) * ([1+0.004*cos(0.3*a)]^2) * (1+0.0025*cos(0.7*a)) * (1+tanh(0.05*a)) * (1+sigmoid(0.01*a)) * (1.07*softplus(0.865/(1+a)) + 0.15*(0.865/(1+a)) + 0.5*(0.865/(1+a)) + 0.006*a) * (1-0.002*cos(a)) * (1-0.0025*cos(2.5*a)) * (1+0.001*a) * ([1+cosh(0.001*a)]^(2+0.0005*a)) + 1e-6 }^(0.9478+0.00018*ln(1+a)) * (1+tanh(0.05*a))\nExponent = (0.9478 + 0.00018*ln(1+a)) * (1 + 0.003*sin(2*a) + 0.001*cos(3*a) + 0.0025*cos(0.7*a) + 0.004*sin(2.5*a) + 0.002*cos(3.5*a) + 0.001*sin(2.5*a)*cos(3*a))\nf(x) = sign(z) * [ f_adapt(z) * T * extra ]^(Exponent)\nU = beta + gamma * f(x)\nP(accept=1) = 1/(1 + exp(-U))\nSummary: A highly nonlinear utility model that computes a core sum from 11 fixed dataset\u2010derived components augmented by a small constant. The signal is sequentially modulated with several sinusoidal and cosine factors, then transformed via a piecewise adaptive function that employs a softsign correction and explicit clipping. A high\u2010order polynomial dynamic threshold and an elaborate extra composite term with additional sigmoid and tanh factors further modulate the signal. The final transformed value is exponentiated by a composite sine\u2013cosine modulated exponent, scaled by learnable parameters beta and gamma, and mapped through a logistic function to yield the probability of acceptance.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 64.3163873105318\nOverall Accuracy: 0.5327\n\nParameter Recovery:\n- beta: r = 0.110\n- gamma: r = 0.135\n- phi: r = -0.040"
  ]
}