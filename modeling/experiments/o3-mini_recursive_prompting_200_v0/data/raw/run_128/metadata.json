{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "<think>\nFor this new run, please introduce additional nonlinear corrections and flexibility. In particular, keep the overall structure but update the adaptive transformation on the positive branch by applying an extra softsign multiplication and an explicit clipping mechanism to curb outlier influence. For the negative branch, further exponentiate by increasing the power (e.g. from 7 to 7 or 8) after applying a softsign correction. Also, extend the dynamic threshold T further, including extra polynomial terms up to a^12 as before. In the extra composite component, add an extra sigmoid factor and an additional tanh multiplier for dampening extreme values. Finally, update the final exponent to include an extra sine\u2013cosine modulation term such as [1 + 0.003*sin(2.5*a) + 0.002*cos(3.5*a) + 0.001*sin(3*a)]. Maintain the three learnable parameters (beta, gamma, and phi) with bounds beta \u2208 [\u201310, 10], gamma \u2208 [0, 10], and phi \u2208 [0.5, 1.5]. This extra emphasis on softsign correction, explicit clipping, additional damping via sigmoid/tanh in the extra composite, and enhanced final exponent modulation should improve model accuracy, lower the BIC, and provide even better parameter recovery.\n</think>\n\nNew Instructions for Run 128:\n1. Compute the core sum \u201ca\u201d as the sum of fixed components F1 through F11 plus a small constant \u03b4.\n2. Compute a_mod = 1.08 \u00d7 a \u00d7 [1 + 0.012 \u00d7 sin(a + 0.045)].\n3. Sequentially modulate a_mod with:\n\u2003\u2003\u2022 [1 + 0.008 \u00d7 cos(a + 0.065)]\n\u2003\u2003\u2022 [1 + 0.005 \u00d7 sin(a + 0.115)]\n\u2003\u2003\u2022 [1 + 0.004 \u00d7 cos(a + 0.085)]\n\u2003\u2003\u2022 [1 + 0.006 \u00d7 (sin(a + 0.035) \u00d7 cos(a + 0.055))]\n\u2003\u2003\u2022 [1 + 0.003 \u00d7 (sin(a + 0.03) \u00d7 cos(a + 0.05))]\nDefine the resulting product as z.\n4. Set the weight w = (phi \u2013 0.5) / phi.\n\u2003\u2003\u2022 For z \u2265 0, define the adaptive transformation as f_adapt(z) = 1.002 \u00d7 [z^w \u00d7 (ln(1+z))^(1\u2013w)] multiplied by a softsign(z) term (softsign(x) = x/(1+|x|)). Then, explicitly clip extreme values if needed.\n\u2003\u2003\u2022 For z < 0, define f_adapt(z) = phi \u00d7 [softsign(z + \u0394_shift)]^7.\n5. Define a dynamic threshold T as an extended polynomial in a, including terms up to a^12.\n6. Define the extra composite term extra as:\n\u2003\u2003extra = { exp(\u2013a/0.1) \u00d7 [z/(1+|z|)] \u00d7 [1 + 0.005 \u00d7 sin(1/(1+a))] \u00d7 [1 + 0.002 \u00d7 cos(0.5\u00d7a)] \u00d7 ([1+0.003\u00d7cos(0.3\u00d7a)]\u00b2) \u00d7 ([1+0.004\u00d7cos(0.3\u00d7a)]\u00b2) \u00d7 [1+0.0025\u00d7cos(0.7\u00d7a)] \u00d7 [1 + tanh(0.05\u00d7a)] \u00d7 [1 + sigmoid(0.01\u00d7a)] \u00d7 [1.07\u00d7softplus(0.865/(1+a)) + 0.15\u00d7(0.865/(1+a)) + 0.5\u00d7(0.865/(1+a)) + 0.006\u00d7a] \u00d7 [1 \u2013 0.002\u00d7cos(a)] \u00d7 [1 \u2013 0.0025\u00d7cos(2.5\u00d7a)] \u00d7 [1 + 0.001\u00d7a] \u00d7 [1+cosh(0.001\u00d7a)]^(2+0.0005\u00d7a) + 1e\u20136 }^(0.9478 + 0.00018\u00d7ln(1+a)) multiplied by an additional multiplier [1 + tanh(0.05\u00d7a)].\n7. Update the final exponent as:\n\u2003\u2003Exponent = [0.9478 + 0.00018\u00d7ln(1+a)] \u00d7 [1 + 0.003\u00d7sin(2\u00d7a) + 0.001\u00d7cos(3\u00d7a) + 0.0025\u00d7cos(0.7\u00d7a) + 0.004\u00d7sin(2.5\u00d7a) + 0.002\u00d7cos(3.5\u00d7a) + 0.001\u00d7sin(2.5\u00d7a)\u00d7cos(3\u00d7a)].\n8. Define the final transformed signal as:\n\u2003\u2003f(x) = sign(z) \u00d7 { [ f_adapt(z) \u00d7 T \u00d7 extra ]^(Exponent) }.\n9. Compute latent utility U = beta + gamma \u00d7 f(x) and compute the acceptance probability as P(accept=1) = 1/(1 + exp(\u2013U)).\n10. Retain exactly three learnable parameters with bounds: beta \u2208 [\u201310, 10], gamma \u2208 [0, 10], and phi \u2208 [0.5, 1.5].\n\nThese modifications, including explicit softsign corrections, clipping of extreme values, additional high\u2010order polynomial terms in T, an extra sigmoid term in the extra composite, and an augmented final exponent with additional sine\u2013cosine modulation, are intended to further improve model accuracy, reduce the BIC, and boost parameter recovery robustness.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: <think>\nFor this new run, please introduce additional nonlinear corrections and flexibility. In particular, keep the overall structure but update the adaptive transformation on the positive branch by applying an extra softsign multiplication and an explicit clipping mechanism to curb outlier influence. For the negative branch, further exponentiate by increasing the power (e.g. from 7 to 7 or 8) after applying a softsign correction. Also, extend the dynamic threshold T further, including extra polynomial terms up to a^12 as before. In the extra composite component, add an extra sigmoid factor and an additional tanh multiplier for dampening extreme values. Finally, update the final exponent to include an extra sine\u2013cosine modulation term such as [1 + 0.003*sin(2.5*a) + 0.002*cos(3.5*a) + 0.001*sin(3*a)]. Maintain the three learnable parameters (beta, gamma, and phi) with bounds beta \u2208 [\u201310, 10], gamma \u2208 [0, 10], and phi \u2208 [0.5, 1.5]. This extra emphasis on softsign correction, explicit clipping, additional damping via sigmoid/tanh in the extra composite, and enhanced final exponent modulation should improve model accuracy, lower the BIC, and provide even better parameter recovery.\n</think>\n\nNew Instructions for Run 128:\n1. Compute the core sum \u201ca\u201d as the sum of fixed components F1 through F11 plus a small constant \u03b4.\n2. Compute a_mod = 1.08 \u00d7 a \u00d7 [1 + 0.012 \u00d7 sin(a + 0.045)].\n3. Sequentially modulate a_mod with:\n\u2003\u2003\u2022 [1 + 0.008 \u00d7 cos(a + 0.065)]\n\u2003\u2003\u2022 [1 + 0.005 \u00d7 sin(a + 0.115)]\n\u2003\u2003\u2022 [1 + 0.004 \u00d7 cos(a + 0.085)]\n\u2003\u2003\u2022 [1 + 0.006 \u00d7 (sin(a + 0.035) \u00d7 cos(a + 0.055))]\n\u2003\u2003\u2022 [1 + 0.003 \u00d7 (sin(a + 0.03) \u00d7 cos(a + 0.05))]\nDefine the resulting product as z.\n4. Set the weight w = (phi \u2013 0.5) / phi.\n\u2003\u2003\u2022 For z \u2265 0, define the adaptive transformation as f_adapt(z) = 1.002 \u00d7 [z^w \u00d7 (ln(1+z))^(1\u2013w)] multiplied by a softsign(z) term (softsign(x) = x/(1+|x|)). Then, explicitly clip extreme values if needed.\n\u2003\u2003\u2022 For z < 0, define f_adapt(z) = phi \u00d7 [softsign(z + \u0394_shift)]^7.\n5. Define a dynamic threshold T as an extended polynomial in a, including terms up to a^12.\n6. Define the extra composite term extra as:\n\u2003\u2003extra = { exp(\u2013a/0.1) \u00d7 [z/(1+|z|)] \u00d7 [1 + 0.005 \u00d7 sin(1/(1+a))] \u00d7 [1 + 0.002 \u00d7 cos(0.5\u00d7a)] \u00d7 ([1+0.003\u00d7cos(0.3\u00d7a)]\u00b2) \u00d7 ([1+0.004\u00d7cos(0.3\u00d7a)]\u00b2) \u00d7 [1+0.0025\u00d7cos(0.7\u00d7a)] \u00d7 [1 + tanh(0.05\u00d7a)] \u00d7 [1 + sigmoid(0.01\u00d7a)] \u00d7 [1.07\u00d7softplus(0.865/(1+a)) + 0.15\u00d7(0.865/(1+a)) + 0.5\u00d7(0.865/(1+a)) + 0.006\u00d7a] \u00d7 [1 \u2013 0.002\u00d7cos(a)] \u00d7 [1 \u2013 0.0025\u00d7cos(2.5\u00d7a)] \u00d7 [1 + 0.001\u00d7a] \u00d7 [1+cosh(0.001\u00d7a)]^(2+0.0005\u00d7a) + 1e\u20136 }^(0.9478 + 0.00018\u00d7ln(1+a)) multiplied by an additional multiplier [1 + tanh(0.05\u00d7a)].\n7. Update the final exponent as:\n\u2003\u2003Exponent = [0.9478 + 0.00018\u00d7ln(1+a)] \u00d7 [1 + 0.003\u00d7sin(2\u00d7a) + 0.001\u00d7cos(3\u00d7a) + 0.0025\u00d7cos(0.7\u00d7a) + 0.004\u00d7sin(2.5\u00d7a) + 0.002\u00d7cos(3.5\u00d7a) + 0.001\u00d7sin(2.5\u00d7a)\u00d7cos(3\u00d7a)].\n8. Define the final transformed signal as:\n\u2003\u2003f(x) = sign(z) \u00d7 { [ f_adapt(z) \u00d7 T \u00d7 extra ]^(Exponent) }.\n9. Compute latent utility U = beta + gamma \u00d7 f(x) and compute the acceptance probability as P(accept=1) = 1/(1 + exp(\u2013U)).\n10. Retain exactly three learnable parameters with bounds: beta \u2208 [\u201310, 10], gamma \u2208 [0, 10], and phi \u2208 [0.5, 1.5].\n\nThese modifications, including explicit softsign corrections, clipping of extreme values, additional high\u2010order polynomial terms in T, an extra sigmoid term in the extra composite, and an augmented final exponent with additional sine\u2013cosine modulation, are intended to further improve model accuracy, reduce the BIC, and boost parameter recovery robustness.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<MODEL>\n\u03b4 = 1\u00d710^(-6)\na = \u03b4 + (trial_type + trial_role + token_opp + token_self + combined_earning + split_opp + split_self + splitperc_opp + splitperc_self + accepted_amount + accepted_perc) + 0\u00d7trial_number + 0\u00d7proposed_perc + 0\u00d7proposed_amount + 0\u00d7ID + 0\u00d7numeric(group)\na_mod = 1.08 \u00d7 a \u00d7 [1 + 0.012 \u00d7 sin(a + 0.045)]\nm1 = 1 + 0.008 \u00d7 cos(a + 0.065)\nm2 = 1 + 0.005 \u00d7 sin(a + 0.115)\nm3 = 1 + 0.004 \u00d7 cos(a + 0.085)\nm4 = 1 + 0.006 \u00d7 ( sin(a + 0.035) \u00d7 cos(a + 0.055) )\nm5 = 1 + 0.003 \u00d7 ( sin(a + 0.03) \u00d7 cos(a + 0.05) )\nz = a_mod \u00d7 m1 \u00d7 m2 \u00d7 m3 \u00d7 m4 \u00d7 m5\nw = (phi - 0.5) / phi\nf_adapt(z) = { if z \u2265 0 then clip[1.002 \u00d7 ( z^w \u00d7 (ln(1+z))^(1-w) ) \u00d7 (z/(1+|z|)) , -100, 100] else phi \u00d7 [ (z + \u0394_shift)/(1+|z+\u0394_shift|) ]^7 } , with \u0394_shift = 1\u00d710^(-6)\nT = 1 + a + a^2 + a^3 + a^4 + a^5 + a^6 + a^7 + a^8 + a^9 + a^10 + a^11 + a^12\nextra = { exp(-a/0.1) \u00d7 [z/(1+|z|)] \u00d7 [1+0.005\u00d7 sin(1/(1+a))] \u00d7 [1+0.002\u00d7 cos(0.5\u00d7a)] \u00d7 ([1+0.003\u00d7 cos(0.3\u00d7a)]^2) \u00d7 ([1+0.004\u00d7 cos(0.3\u00d7a)]^2) \u00d7 [1+0.0025\u00d7 cos(0.7\u00d7a)] \u00d7 [1+ tanh(0.05\u00d7a)] \u00d7 [1+ 1/(1+exp(-0.01\u00d7a))] \u00d7 [1.07\u00d7 softplus(0.865/(1+a)) + 0.15\u00d7 (0.865/(1+a)) + 0.5\u00d7 (0.865/(1+a)) + 0.006\u00d7a] \u00d7 [1-0.002\u00d7 cos(a)] \u00d7 [1-0.0025\u00d7 cos(2.5\u00d7a)] \u00d7 [1+0.001\u00d7a] \u00d7 ([1+ cosh(0.001\u00d7a)]^(2+0.0005\u00d7a)) + 1\u00d710^(-6) }^(0.9478+0.00018\u00d7 ln(1+a)) \u00d7 [1+ tanh(0.05\u00d7a)]\nExponent = (0.9478+0.00018\u00d7 ln(1+a)) \u00d7 [1 + 0.003\u00d7 sin(2\u00d7a) + 0.001\u00d7 cos(3\u00d7a) + 0.0025\u00d7 cos(0.7\u00d7a) + 0.004\u00d7 sin(2.5\u00d7a) + 0.002\u00d7 cos(3.5\u00d7a) + 0.001\u00d7 sin(2.5\u00d7a)\u00d7 cos(3\u00d7a)]\nf(x) = sign(z) \u00d7 [ f_adapt(z) \u00d7 T \u00d7 extra ]^(Exponent)\nU = beta + gamma \u00d7 f(x)\nP(accept=1) = 1/(1 + exp(-U))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"trial_type\": {\n      \"description\": \"The contribution type (1=equal, 2=opponent more, 3=participant more)\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": 3,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"discrete\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"trial_role\": {\n      \"description\": \"Role of the participant (1=responder, 2=proposer)\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": 2,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"discrete\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000\n      },\n      \"distribution\": {\n        \"type\": \"integer\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000\n      },\n      \"distribution\": {\n        \"type\": \"integer\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total amount of money earned (each token = \u00a33)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10000\n      },\n      \"distribution\": {\n        \"type\": \"integer\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_opp\": {\n      \"description\": \"Proposed share of the opponent (in \u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10000\n      },\n      \"distribution\": {\n        \"type\": \"float\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant (in \u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10000\n      },\n      \"distribution\": {\n        \"type\": \"float\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"splitperc_opp\": {\n      \"description\": \"Proposed share of the opponent (in %)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"distribution\": {\n        \"type\": \"integer\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"splitperc_self\": {\n      \"description\": \"Proposed share for the participant (in %)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"distribution\": {\n        \"type\": \"integer\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"accepted_amount\": {\n      \"description\": \"Amount gained if accepted (in \u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10000\n      },\n      \"distribution\": {\n        \"type\": \"float\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"accepted_perc\": {\n      \"description\": \"Accepted percentage (in %)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"distribution\": {\n        \"type\": \"float\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"trial_number\": {\n      \"description\": \"Trial index number\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": 36,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"integer\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"proposed_perc\": {\n      \"description\": \"Proposed percentage to the opponent (when proposer)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"distribution\": {\n        \"type\": \"float\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"proposed_amount\": {\n      \"description\": \"Proposed monetary amount to the opponent (in \u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10000\n      },\n      \"distribution\": {\n        \"type\": \"float\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"ID\": {\n      \"description\": \"Unique identifier for the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1e9\n      },\n      \"distribution\": {\n        \"type\": \"integer\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"group\": {\n      \"description\": \"Group assignment (categorical, converted to numeric internally)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10\n      },\n      \"distribution\": {\n        \"type\": \"integer\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"beta\": {\n      \"description\": \"Learnable base utility parameter\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": -10,\n          \"upper\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Learnable scaling parameter for the transformed signal\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": 0,\n          \"upper\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Learnable parameter governing adaptive transformation nonlinearity\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": 0.5,\n          \"upper\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA highly nonlinear binary choice model in which a latent \u201ccore\u201d signal a is computed as the sum of 11 fixed dataset\u2010derived components (with additional variables incorporated with zero weight), then transformed via successive sinusoidal and polynomial modulations to yield a composite signal z. This signal is adaptively transformed using a softsign\u2010based function with explicit clipping for nonnegative inputs and an exponentiated softsign for negative inputs, further scaled by a high\u2010order dynamic threshold T and an elaborate extra composite term featuring exponential, sigmoid, tanh, softplus, and trigonometric functions. The final exponent is modulated by additional sine\u2013cosine terms before combining with three learnable parameters (beta, gamma, phi) to determine the latent utility U, which is converted to an acceptance probability via a logistic function.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['beta', 'gamma', 'phi']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                \u03b4 = 1\u00d710^(-6)\na = \u03b4 + (trial_type + trial_role + token_opp + token_self + combined_earning + split_opp + split_self + splitperc_opp + splitperc_self + accepted_amount + accepted_perc) + 0\u00d7trial_number + 0\u00d7proposed_perc + 0\u00d7proposed_amount + 0\u00d7ID + 0\u00d7numeric(group)\na_mod = 1.08 \u00d7 a \u00d7 [1 + 0.012 \u00d7 sin(a + 0.045)]\nm1 = 1 + 0.008 \u00d7 cos(a + 0.065)\nm2 = 1 + 0.005 \u00d7 sin(a + 0.115)\nm3 = 1 + 0.004 \u00d7 cos(a + 0.085)\nm4 = 1 + 0.006 \u00d7 ( sin(a + 0.035) \u00d7 cos(a + 0.055) )\nm5 = 1 + 0.003 \u00d7 ( sin(a + 0.03) \u00d7 cos(a + 0.05) )\nz = a_mod \u00d7 m1 \u00d7 m2 \u00d7 m3 \u00d7 m4 \u00d7 m5\nw = (phi - 0.5) / phi\nf_adapt(z) = { if z \u2265 0 then clip[1.002 \u00d7 ( z^w \u00d7 (ln(1+z))^(1-w) ) \u00d7 (z/(1+|z|)) , -100, 100] else phi \u00d7 [ (z + \u0394_shift)/(1+|z+\u0394_shift|) ]^7 } , with \u0394_shift = 1\u00d710^(-6)\nT = 1 + a + a^2 + a^3 + a^4 + a^5 + a^6 + a^7 + a^8 + a^9 + a^10 + a^11 + a^12\nextra = { exp(-a/0.1) \u00d7 [z/(1+|z|)] \u00d7 [1+0.005\u00d7 sin(1/(1+a))] \u00d7 [1+0.002\u00d7 cos(0.5\u00d7a)] \u00d7 ([1+0.003\u00d7 cos(0.3\u00d7a)]^2) \u00d7 ([1+0.004\u00d7 cos(0.3\u00d7a)]^2) \u00d7 [1+0.0025\u00d7 cos(0.7\u00d7a)] \u00d7 [1+ tanh(0.05\u00d7a)] \u00d7 [1+ 1/(1+exp(-0.01\u00d7a))] \u00d7 [1.07\u00d7 softplus(0.865/(1+a)) + 0.15\u00d7 (0.865/(1+a)) + 0.5\u00d7 (0.865/(1+a)) + 0.006\u00d7a] \u00d7 [1-0.002\u00d7 cos(a)] \u00d7 [1-0.0025\u00d7 cos(2.5\u00d7a)] \u00d7 [1+0.001\u00d7a] \u00d7 ([1+ cosh(0.001\u00d7a)]^(2+0.0005\u00d7a)) + 1\u00d710^(-6) }^(0.9478+0.00018\u00d7 ln(1+a)) \u00d7 [1+ tanh(0.05\u00d7a)]\nExponent = (0.9478+0.00018\u00d7 ln(1+a)) \u00d7 [1 + 0.003\u00d7 sin(2\u00d7a) + 0.001\u00d7 cos(3\u00d7a) + 0.0025\u00d7 cos(0.7\u00d7a) + 0.004\u00d7 sin(2.5\u00d7a) + 0.002\u00d7 cos(3.5\u00d7a) + 0.001\u00d7 sin(2.5\u00d7a)\u00d7 cos(3\u00d7a)]\nf(x) = sign(z) \u00d7 [ f_adapt(z) \u00d7 T \u00d7 extra ]^(Exponent)\nU = beta + gamma \u00d7 f(x)\nP(accept=1) = 1/(1 + exp(-U))\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"trial_type\": {\n      \"description\": \"The contribution type (1=equal, 2=opponent more, 3=participant more)\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": 3,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"discrete\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"trial_role\": {\n      \"description\": \"Role of the participant (1=responder, 2=proposer)\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": 2,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"discrete\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"integer\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"integer\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total amount of money earned (each token = \\u00a33)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"integer\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_opp\": {\n      \"description\": \"Proposed share of the opponent (in \\u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"float\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant (in \\u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"float\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"splitperc_opp\": {\n      \"description\": \"Proposed share of the opponent (in %)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"integer\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"splitperc_self\": {\n      \"description\": \"Proposed share for the participant (in %)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"integer\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"accepted_amount\": {\n      \"description\": \"Amount gained if accepted (in \\u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"float\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"accepted_perc\": {\n      \"description\": \"Accepted percentage (in %)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"float\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"trial_number\": {\n      \"description\": \"Trial index number\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": 36,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"integer\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"proposed_perc\": {\n      \"description\": \"Proposed percentage to the opponent (when proposer)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"float\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"proposed_amount\": {\n      \"description\": \"Proposed monetary amount to the opponent (in \\u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"float\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"ID\": {\n      \"description\": \"Unique identifier for the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000000000.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"integer\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"group\": {\n      \"description\": \"Group assignment (categorical, converted to numeric internally)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"integer\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"beta\": {\n      \"description\": \"Learnable base utility parameter\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": -10,\n          \"upper\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Learnable scaling parameter for the transformed signal\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": 0,\n          \"upper\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Learnable parameter governing adaptive transformation nonlinearity\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": 0.5,\n          \"upper\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, beta=0, gamma=1, phi=1):\n    model_predictions = []\n    delta = 1e-06\n\n    def clip(x, min_val, max_val):\n        return max(min(x, max_val), min_val)\n\n    def softplus(x):\n        return math.log(1 + math.exp(x))\n\n    def f_adapt(z):\n        w = (phi - 0.5) / phi\n        delta_shift = 1e-06\n        if z >= 0:\n            return clip(1.002 * (z**w * (math.log(1 + z)**(1 - w))) * (z / (1 + abs(z))), -100, 100)\n        else:\n            return phi * ((z + delta_shift) / (1 + abs(z + delta_shift)))**7\n\n    def sign(x):\n        if x > 0:\n            return 1\n        elif x < 0:\n            return -1\n        else:\n            return 0\n\n    for trial in trial_data:\n        trial_type = trial.get(\"trial_type\", 0)\n        trial_role = trial.get(\"trial_role\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        token_self = trial.get(\"token_self\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n        split_opp = trial.get(\"split_opp\", 0)\n        split_self = trial.get(\"split_self\", 0)\n        splitperc_opp = trial.get(\"splitperc_opp\", 0)\n        splitperc_self = trial.get(\"splitperc_self\", 0)\n        accepted_amount = trial.get(\"accepted_amount\", 0)\n        accepted_perc = trial.get(\"accepted_perc\", 0)\n        trial_number = trial.get(\"trial_number\", 0) #Unused\n        proposed_perc = trial.get(\"proposed_perc\", 0) #Unused\n        proposed_amount = trial.get(\"proposed_amount\", 0) #Unused\n        ID = trial.get(\"ID\", 0) #Unused\n        group = trial.get(\"group\", 0) #Unused\n        a = delta + (trial_type + trial_role + token_opp + token_self + combined_earning + split_opp + split_self + splitperc_opp + splitperc_self + accepted_amount + accepted_perc)\n\n        a_mod = 1.08 * a * (1 + 0.012 * math.sin(a + 0.045))\n        m1 = 1 + 0.008 * math.cos(a + 0.065)\n        m2 = 1 + 0.005 * math.sin(a + 0.115)\n        m3 = 1 + 0.004 * math.cos(a + 0.085)\n        m4 = 1 + 0.006 * (math.sin(a + 0.035) * math.cos(a + 0.055))\n        m5 = 1 + 0.003 * (math.sin(a + 0.03) * math.cos(a + 0.05))\n        z = a_mod * m1 * m2 * m3 * m4 * m5\n\n        T = 1 + a + a**2 + a**3 + a**4 + a**5 + a**6 + a**7 + a**8 + a**9 + a**10 + a**11 + a**12\n\n        extra_base = math.exp(-a / 0.1) * (z / (1 + abs(z))) * (1 + 0.005 * math.sin(1 / (1 + a))) * (\n            1 + 0.002 * math.cos(0.5 * a)) * (1 + 0.003 * math.cos(0.3 * a))**2 * (\n            1 + 0.004 * math.cos(0.3 * a))**2 * (1 + 0.0025 * math.cos(0.7 * a)) * (1 + math.tanh(0.05 * a)) * (\n            1 + 1 / (1 + math.exp(-0.01 * a))) * (\n            1.07 * softplus(0.865 / (1 + a)) + 0.15 * (0.865 / (1 + a)) + 0.5 * (0.865 / (1 + a)) + 0.006 * a) * (\n            1 - 0.002 * math.cos(a)) * (1 - 0.0025 * math.cos(2.5 * a)) * (1 + 0.001 * a) * (\n            1 + math.cosh(0.001 * a))**(2 + 0.0005 * a) + 1e-06\n        extra = extra_base**(0.9478 + 0.00018 * math.log(1 + a)) * (1 + math.tanh(0.05 * a))\n\n        exponent = (0.9478 + 0.00018 * math.log(1 + a)) * (\n            1 + 0.003 * math.sin(2 * a) + 0.001 * math.cos(3 * a) + 0.0025 * math.cos(0.7 * a) + 0.004 * math.sin(\n                2.5 * a) + 0.002 * math.cos(3.5 * a) + 0.001 * math.sin(2.5 * a) * math.cos(3 * a))\n\n        fx = sign(z) * (f_adapt(z) * T * extra)**exponent\n\n        U = beta + gamma * fx\n        \n        try:\n            p_accept = 1 / (1 + math.exp(-U))\n        except OverflowError:\n            p_accept = 0.0 if U > 0 else 1.0\n\n        model_predictions.append(p_accept)\n\n    return model_predictions\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n```",
      "timestamp": 1743546785.4219441
    }
  ],
  "learnable_parameters": {
    "beta": {
      "description": "Learnable base utility parameter",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "lower": -10,
          "upper": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Learnable scaling parameter for the transformed signal",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "lower": 0,
          "upper": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "phi": {
      "description": "Learnable parameter governing adaptive transformation nonlinearity",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "lower": 0.5,
          "upper": 1.5
        }
      },
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "\u03b4 = 1\u00d710^(-6)\na = \u03b4 + (trial_type + trial_role + token_opp + token_self + combined_earning + split_opp + split_self + splitperc_opp + splitperc_self + accepted_amount + accepted_perc) + 0\u00d7trial_number + 0\u00d7proposed_perc + 0\u00d7proposed_amount + 0\u00d7ID + 0\u00d7numeric(group)\na_mod = 1.08 \u00d7 a \u00d7 [1 + 0.012 \u00d7 sin(a + 0.045)]\nm1 = 1 + 0.008 \u00d7 cos(a + 0.065)\nm2 = 1 + 0.005 \u00d7 sin(a + 0.115)\nm3 = 1 + 0.004 \u00d7 cos(a + 0.085)\nm4 = 1 + 0.006 \u00d7 ( sin(a + 0.035) \u00d7 cos(a + 0.055) )\nm5 = 1 + 0.003 \u00d7 ( sin(a + 0.03) \u00d7 cos(a + 0.05) )\nz = a_mod \u00d7 m1 \u00d7 m2 \u00d7 m3 \u00d7 m4 \u00d7 m5\nw = (phi - 0.5) / phi\nf_adapt(z) = { if z \u2265 0 then clip[1.002 \u00d7 ( z^w \u00d7 (ln(1+z))^(1-w) ) \u00d7 (z/(1+|z|)) , -100, 100] else phi \u00d7 [ (z + \u0394_shift)/(1+|z+\u0394_shift|) ]^7 } , with \u0394_shift = 1\u00d710^(-6)\nT = 1 + a + a^2 + a^3 + a^4 + a^5 + a^6 + a^7 + a^8 + a^9 + a^10 + a^11 + a^12\nextra = { exp(-a/0.1) \u00d7 [z/(1+|z|)] \u00d7 [1+0.005\u00d7 sin(1/(1+a))] \u00d7 [1+0.002\u00d7 cos(0.5\u00d7a)] \u00d7 ([1+0.003\u00d7 cos(0.3\u00d7a)]^2) \u00d7 ([1+0.004\u00d7 cos(0.3\u00d7a)]^2) \u00d7 [1+0.0025\u00d7 cos(0.7\u00d7a)] \u00d7 [1+ tanh(0.05\u00d7a)] \u00d7 [1+ 1/(1+exp(-0.01\u00d7a))] \u00d7 [1.07\u00d7 softplus(0.865/(1+a)) + 0.15\u00d7 (0.865/(1+a)) + 0.5\u00d7 (0.865/(1+a)) + 0.006\u00d7a] \u00d7 [1-0.002\u00d7 cos(a)] \u00d7 [1-0.0025\u00d7 cos(2.5\u00d7a)] \u00d7 [1+0.001\u00d7a] \u00d7 ([1+ cosh(0.001\u00d7a)]^(2+0.0005\u00d7a)) + 1\u00d710^(-6) }^(0.9478+0.00018\u00d7 ln(1+a)) \u00d7 [1+ tanh(0.05\u00d7a)]\nExponent = (0.9478+0.00018\u00d7 ln(1+a)) \u00d7 [1 + 0.003\u00d7 sin(2\u00d7a) + 0.001\u00d7 cos(3\u00d7a) + 0.0025\u00d7 cos(0.7\u00d7a) + 0.004\u00d7 sin(2.5\u00d7a) + 0.002\u00d7 cos(3.5\u00d7a) + 0.001\u00d7 sin(2.5\u00d7a)\u00d7 cos(3\u00d7a)]\nf(x) = sign(z) \u00d7 [ f_adapt(z) \u00d7 T \u00d7 extra ]^(Exponent)\nU = beta + gamma \u00d7 f(x)\nP(accept=1) = 1/(1 + exp(-U))",
  "variable_descriptions": {
    "trial_type": {
      "description": "The contribution type (1=equal, 2=opponent more, 3=participant more)",
      "range": {
        "min": 1,
        "max": 3,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "discrete",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "trial_role": {
      "description": "Role of the participant (1=responder, 2=proposer)",
      "range": {
        "min": 1,
        "max": 2,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "discrete",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent",
      "range": {
        "min": 0,
        "max": 1000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "integer",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Number of tokens found by the participant",
      "range": {
        "min": 0,
        "max": 1000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "integer",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "combined_earning": {
      "description": "Total amount of money earned (each token = \u00a33)",
      "range": {
        "min": 0,
        "max": 10000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "integer",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "split_opp": {
      "description": "Proposed share of the opponent (in \u00a3)",
      "range": {
        "min": 0,
        "max": 10000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "float",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "split_self": {
      "description": "Proposed share for the participant (in \u00a3)",
      "range": {
        "min": 0,
        "max": 10000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "float",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "splitperc_opp": {
      "description": "Proposed share of the opponent (in %)",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "integer",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "splitperc_self": {
      "description": "Proposed share for the participant (in %)",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "integer",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "accepted_amount": {
      "description": "Amount gained if accepted (in \u00a3)",
      "range": {
        "min": 0,
        "max": 10000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "float",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "accepted_perc": {
      "description": "Accepted percentage (in %)",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "float",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "trial_number": {
      "description": "Trial index number",
      "range": {
        "min": 1,
        "max": 36,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "integer",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "proposed_perc": {
      "description": "Proposed percentage to the opponent (when proposer)",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "float",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "proposed_amount": {
      "description": "Proposed monetary amount to the opponent (in \u00a3)",
      "range": {
        "min": 0,
        "max": 10000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "float",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "ID": {
      "description": "Unique identifier for the participant",
      "range": {
        "min": 0,
        "max": 1000000000.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "integer",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "group": {
      "description": "Group assignment (categorical, converted to numeric internally)",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "integer",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "beta": {
      "description": "Learnable base utility parameter",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "lower": -10,
          "upper": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Learnable scaling parameter for the transformed signal",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "lower": 0,
          "upper": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "phi": {
      "description": "Learnable parameter governing adaptive transformation nonlinearity",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "lower": 0.5,
          "upper": 1.5
        }
      },
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_summary": "A highly nonlinear binary choice model in which a latent \u201ccore\u201d signal a is computed as the sum of 11 fixed dataset\u2010derived components (with additional variables incorporated with zero weight), then transformed via successive sinusoidal and polynomial modulations to yield a composite signal z. This signal is adaptively transformed using a softsign\u2010based function with explicit clipping for nonnegative inputs and an exponentiated softsign for negative inputs, further scaled by a high\u2010order dynamic threshold T and an elaborate extra composite term featuring exponential, sigmoid, tanh, softplus, and trigonometric functions. The final exponent is modulated by additional sine\u2013cosine terms before combining with three learnable parameters (beta, gamma, phi) to determine the latent utility U, which is converted to an acceptance probability via a logistic function.",
  "target_variable": "accept",
  "full_reasoning": "<MODEL>\n\u03b4 = 1\u00d710^(-6)\na = \u03b4 + (trial_type + trial_role + token_opp + token_self + combined_earning + split_opp + split_self + splitperc_opp + splitperc_self + accepted_amount + accepted_perc) + 0\u00d7trial_number + 0\u00d7proposed_perc + 0\u00d7proposed_amount + 0\u00d7ID + 0\u00d7numeric(group)\na_mod = 1.08 \u00d7 a \u00d7 [1 + 0.012 \u00d7 sin(a + 0.045)]\nm1 = 1 + 0.008 \u00d7 cos(a + 0.065)\nm2 = 1 + 0.005 \u00d7 sin(a + 0.115)\nm3 = 1 + 0.004 \u00d7 cos(a + 0.085)\nm4 = 1 + 0.006 \u00d7 ( sin(a + 0.035) \u00d7 cos(a + 0.055) )\nm5 = 1 + 0.003 \u00d7 ( sin(a + 0.03) \u00d7 cos(a + 0.05) )\nz = a_mod \u00d7 m1 \u00d7 m2 \u00d7 m3 \u00d7 m4 \u00d7 m5\nw = (phi - 0.5) / phi\nf_adapt(z) = { if z \u2265 0 then clip[1.002 \u00d7 ( z^w \u00d7 (ln(1+z))^(1-w) ) \u00d7 (z/(1+|z|)) , -100, 100] else phi \u00d7 [ (z + \u0394_shift)/(1+|z+\u0394_shift|) ]^7 } , with \u0394_shift = 1\u00d710^(-6)\nT = 1 + a + a^2 + a^3 + a^4 + a^5 + a^6 + a^7 + a^8 + a^9 + a^10 + a^11 + a^12\nextra = { exp(-a/0.1) \u00d7 [z/(1+|z|)] \u00d7 [1+0.005\u00d7 sin(1/(1+a))] \u00d7 [1+0.002\u00d7 cos(0.5\u00d7a)] \u00d7 ([1+0.003\u00d7 cos(0.3\u00d7a)]^2) \u00d7 ([1+0.004\u00d7 cos(0.3\u00d7a)]^2) \u00d7 [1+0.0025\u00d7 cos(0.7\u00d7a)] \u00d7 [1+ tanh(0.05\u00d7a)] \u00d7 [1+ 1/(1+exp(-0.01\u00d7a))] \u00d7 [1.07\u00d7 softplus(0.865/(1+a)) + 0.15\u00d7 (0.865/(1+a)) + 0.5\u00d7 (0.865/(1+a)) + 0.006\u00d7a] \u00d7 [1-0.002\u00d7 cos(a)] \u00d7 [1-0.0025\u00d7 cos(2.5\u00d7a)] \u00d7 [1+0.001\u00d7a] \u00d7 ([1+ cosh(0.001\u00d7a)]^(2+0.0005\u00d7a)) + 1\u00d710^(-6) }^(0.9478+0.00018\u00d7 ln(1+a)) \u00d7 [1+ tanh(0.05\u00d7a)]\nExponent = (0.9478+0.00018\u00d7 ln(1+a)) \u00d7 [1 + 0.003\u00d7 sin(2\u00d7a) + 0.001\u00d7 cos(3\u00d7a) + 0.0025\u00d7 cos(0.7\u00d7a) + 0.004\u00d7 sin(2.5\u00d7a) + 0.002\u00d7 cos(3.5\u00d7a) + 0.001\u00d7 sin(2.5\u00d7a)\u00d7 cos(3\u00d7a)]\nf(x) = sign(z) \u00d7 [ f_adapt(z) \u00d7 T \u00d7 extra ]^(Exponent)\nU = beta + gamma \u00d7 f(x)\nP(accept=1) = 1/(1 + exp(-U))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"trial_type\": {\n      \"description\": \"The contribution type (1=equal, 2=opponent more, 3=participant more)\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": 3,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"discrete\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"trial_role\": {\n      \"description\": \"Role of the participant (1=responder, 2=proposer)\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": 2,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"discrete\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000\n      },\n      \"distribution\": {\n        \"type\": \"integer\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000\n      },\n      \"distribution\": {\n        \"type\": \"integer\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total amount of money earned (each token = \u00a33)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10000\n      },\n      \"distribution\": {\n        \"type\": \"integer\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_opp\": {\n      \"description\": \"Proposed share of the opponent (in \u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10000\n      },\n      \"distribution\": {\n        \"type\": \"float\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant (in \u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10000\n      },\n      \"distribution\": {\n        \"type\": \"float\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"splitperc_opp\": {\n      \"description\": \"Proposed share of the opponent (in %)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"distribution\": {\n        \"type\": \"integer\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"splitperc_self\": {\n      \"description\": \"Proposed share for the participant (in %)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"distribution\": {\n        \"type\": \"integer\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"accepted_amount\": {\n      \"description\": \"Amount gained if accepted (in \u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10000\n      },\n      \"distribution\": {\n        \"type\": \"float\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"accepted_perc\": {\n      \"description\": \"Accepted percentage (in %)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"distribution\": {\n        \"type\": \"float\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"trial_number\": {\n      \"description\": \"Trial index number\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": 36,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"integer\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"proposed_perc\": {\n      \"description\": \"Proposed percentage to the opponent (when proposer)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"distribution\": {\n        \"type\": \"float\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"proposed_amount\": {\n      \"description\": \"Proposed monetary amount to the opponent (in \u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10000\n      },\n      \"distribution\": {\n        \"type\": \"float\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"ID\": {\n      \"description\": \"Unique identifier for the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1e9\n      },\n      \"distribution\": {\n        \"type\": \"integer\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"group\": {\n      \"description\": \"Group assignment (categorical, converted to numeric internally)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10\n      },\n      \"distribution\": {\n        \"type\": \"integer\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"beta\": {\n      \"description\": \"Learnable base utility parameter\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": -10,\n          \"upper\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Learnable scaling parameter for the transformed signal\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": 0,\n          \"upper\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Learnable parameter governing adaptive transformation nonlinearity\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": 0.5,\n          \"upper\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA highly nonlinear binary choice model in which a latent \u201ccore\u201d signal a is computed as the sum of 11 fixed dataset\u2010derived components (with additional variables incorporated with zero weight), then transformed via successive sinusoidal and polynomial modulations to yield a composite signal z. This signal is adaptively transformed using a softsign\u2010based function with explicit clipping for nonnegative inputs and an exponentiated softsign for negative inputs, further scaled by a high\u2010order dynamic threshold T and an elaborate extra composite term featuring exponential, sigmoid, tanh, softplus, and trigonometric functions. The final exponent is modulated by additional sine\u2013cosine terms before combining with three learnable parameters (beta, gamma, phi) to determine the latent utility U, which is converted to an acceptance probability via a logistic function.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: \u03b4 = 1\u00d710^(-6)\na = \u03b4 + (trial_type + trial_role + token_opp + token_self + combined_earning + split_opp + split_self + splitperc_opp + splitperc_self + accepted_amount + accepted_perc) + 0\u00d7trial_number + 0\u00d7proposed_perc + 0\u00d7proposed_amount + 0\u00d7ID + 0\u00d7numeric(group)\na_mod = 1.08 \u00d7 a \u00d7 [1 + 0.012 \u00d7 sin(a + 0.045)]\nm1 = 1 + 0.008 \u00d7 cos(a + 0.065)\nm2 = 1 + 0.005 \u00d7 sin(a + 0.115)\nm3 = 1 + 0.004 \u00d7 cos(a + 0.085)\nm4 = 1 + 0.006 \u00d7 ( sin(a + 0.035) \u00d7 cos(a + 0.055) )\nm5 = 1 + 0.003 \u00d7 ( sin(a + 0.03) \u00d7 cos(a + 0.05) )\nz = a_mod \u00d7 m1 \u00d7 m2 \u00d7 m3 \u00d7 m4 \u00d7 m5\nw = (phi - 0.5) / phi\nf_adapt(z) = { if z \u2265 0 then clip[1.002 \u00d7 ( z^w \u00d7 (ln(1+z))^(1-w) ) \u00d7 (z/(1+|z|)) , -100, 100] else phi \u00d7 [ (z + \u0394_shift)/(1+|z+\u0394_shift|) ]^7 } , with \u0394_shift = 1\u00d710^(-6)\nT = 1 + a + a^2 + a^3 + a^4 + a^5 + a^6 + a^7 + a^8 + a^9 + a^10 + a^11 + a^12\nextra = { exp(-a/0.1) \u00d7 [z/(1+|z|)] \u00d7 [1+0.005\u00d7 sin(1/(1+a))] \u00d7 [1+0.002\u00d7 cos(0.5\u00d7a)] \u00d7 ([1+0.003\u00d7 cos(0.3\u00d7a)]^2) \u00d7 ([1+0.004\u00d7 cos(0.3\u00d7a)]^2) \u00d7 [1+0.0025\u00d7 cos(0.7\u00d7a)] \u00d7 [1+ tanh(0.05\u00d7a)] \u00d7 [1+ 1/(1+exp(-0.01\u00d7a))] \u00d7 [1.07\u00d7 softplus(0.865/(1+a)) + 0.15\u00d7 (0.865/(1+a)) + 0.5\u00d7 (0.865/(1+a)) + 0.006\u00d7a] \u00d7 [1-0.002\u00d7 cos(a)] \u00d7 [1-0.0025\u00d7 cos(2.5\u00d7a)] \u00d7 [1+0.001\u00d7a] \u00d7 ([1+ cosh(0.001\u00d7a)]^(2+0.0005\u00d7a)) + 1\u00d710^(-6) }^(0.9478+0.00018\u00d7 ln(1+a)) \u00d7 [1+ tanh(0.05\u00d7a)]\nExponent = (0.9478+0.00018\u00d7 ln(1+a)) \u00d7 [1 + 0.003\u00d7 sin(2\u00d7a) + 0.001\u00d7 cos(3\u00d7a) + 0.0025\u00d7 cos(0.7\u00d7a) + 0.004\u00d7 sin(2.5\u00d7a) + 0.002\u00d7 cos(3.5\u00d7a) + 0.001\u00d7 sin(2.5\u00d7a)\u00d7 cos(3\u00d7a)]\nf(x) = sign(z) \u00d7 [ f_adapt(z) \u00d7 T \u00d7 extra ]^(Exponent)\nU = beta + gamma \u00d7 f(x)\nP(accept=1) = 1/(1 + exp(-U))\nSummary: A highly nonlinear binary choice model in which a latent \u201ccore\u201d signal a is computed as the sum of 11 fixed dataset\u2010derived components (with additional variables incorporated with zero weight), then transformed via successive sinusoidal and polynomial modulations to yield a composite signal z. This signal is adaptively transformed using a softsign\u2010based function with explicit clipping for nonnegative inputs and an exponentiated softsign for negative inputs, further scaled by a high\u2010order dynamic threshold T and an elaborate extra composite term featuring exponential, sigmoid, tanh, softplus, and trigonometric functions. The final exponent is modulated by additional sine\u2013cosine terms before combining with three learnable parameters (beta, gamma, phi) to determine the latent utility U, which is converted to an acceptance probability via a logistic function.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, beta=0, gamma=1, phi=1):\n    model_predictions = []\n    delta = 1e-06\n\n    def clip(x, min_val, max_val):\n        return max(min(x, max_val), min_val)\n\n    def softplus(x):\n        return math.log(1 + math.exp(x))\n\n    def f_adapt(z):\n        w = (phi - 0.5) / phi\n        delta_shift = 1e-06\n        if z >= 0:\n            return clip(1.002 * (z**w * (math.log(1 + z)**(1 - w))) * (z / (1 + abs(z))), -100, 100)\n        else:\n            return phi * ((z + delta_shift) / (1 + abs(z + delta_shift)))**7\n\n    def sign(x):\n        if x > 0:\n            return 1\n        elif x < 0:\n            return -1\n        else:\n            return 0\n\n    for trial in trial_data:\n        trial_type = trial.get(\"trial_type\", 0)\n        trial_role = trial.get(\"trial_role\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        token_self = trial.get(\"token_self\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n        split_opp = trial.get(\"split_opp\", 0)\n        split_self = trial.get(\"split_self\", 0)\n        splitperc_opp = trial.get(\"splitperc_opp\", 0)\n        splitperc_self = trial.get(\"splitperc_self\", 0)\n        accepted_amount = trial.get(\"accepted_amount\", 0)\n        accepted_perc = trial.get(\"accepted_perc\", 0)\n        trial_number = trial.get(\"trial_number\", 0) #Unused\n        proposed_perc = trial.get(\"proposed_perc\", 0) #Unused\n        proposed_amount = trial.get(\"proposed_amount\", 0) #Unused\n        ID = trial.get(\"ID\", 0) #Unused\n        group = trial.get(\"group\", 0) #Unused\n        a = delta + (trial_type + trial_role + token_opp + token_self + combined_earning + split_opp + split_self + splitperc_opp + splitperc_self + accepted_amount + accepted_perc)\n\n        a_mod = 1.08 * a * (1 + 0.012 * math.sin(a + 0.045))\n        m1 = 1 + 0.008 * math.cos(a + 0.065)\n        m2 = 1 + 0.005 * math.sin(a + 0.115)\n        m3 = 1 + 0.004 * math.cos(a + 0.085)\n        m4 = 1 + 0.006 * (math.sin(a + 0.035) * math.cos(a + 0.055))\n        m5 = 1 + 0.003 * (math.sin(a + 0.03) * math.cos(a + 0.05))\n        z = a_mod * m1 * m2 * m3 * m4 * m5\n\n        T = 1 + a + a**2 + a**3 + a**4 + a**5 + a**6 + a**7 + a**8 + a**9 + a**10 + a**11 + a**12\n\n        extra_base = math.exp(-a / 0.1) * (z / (1 + abs(z))) * (1 + 0.005 * math.sin(1 / (1 + a))) * (\n            1 + 0.002 * math.cos(0.5 * a)) * (1 + 0.003 * math.cos(0.3 * a))**2 * (\n            1 + 0.004 * math.cos(0.3 * a))**2 * (1 + 0.0025 * math.cos(0.7 * a)) * (1 + math.tanh(0.05 * a)) * (\n            1 + 1 / (1 + math.exp(-0.01 * a))) * (\n            1.07 * softplus(0.865 / (1 + a)) + 0.15 * (0.865 / (1 + a)) + 0.5 * (0.865 / (1 + a)) + 0.006 * a) * (\n            1 - 0.002 * math.cos(a)) * (1 - 0.0025 * math.cos(2.5 * a)) * (1 + 0.001 * a) * (\n            1 + math.cosh(0.001 * a))**(2 + 0.0005 * a) + 1e-06\n        extra = extra_base**(0.9478 + 0.00018 * math.log(1 + a)) * (1 + math.tanh(0.05 * a))\n\n        exponent = (0.9478 + 0.00018 * math.log(1 + a)) * (\n            1 + 0.003 * math.sin(2 * a) + 0.001 * math.cos(3 * a) + 0.0025 * math.cos(0.7 * a) + 0.004 * math.sin(\n                2.5 * a) + 0.002 * math.cos(3.5 * a) + 0.001 * math.sin(2.5 * a) * math.cos(3 * a))\n\n        fx = sign(z) * (f_adapt(z) * T * extra)**exponent\n\n        U = beta + gamma * fx\n        \n        try:\n            p_accept = 1 / (1 + math.exp(-U))\n        except OverflowError:\n            p_accept = 0.0 if U > 0 else 1.0\n\n        model_predictions.append(p_accept)\n\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.5393772893772893,
  "fitting_results": [
    {
      "beta": 1.3223733125679242,
      "gamma": 1.368799539915131,
      "phi": 0.5450933251321004,
      "success": true,
      "log_likelihood": -44.277420737975305,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -9.671973640175914,
      "gamma": 7.11941749476103,
      "phi": 0.8770632525641069,
      "success": true,
      "log_likelihood": -29.27742074150091,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 6.0001528810655245,
      "gamma": 6.248407000141855,
      "phi": 0.7914869643686198,
      "success": true,
      "log_likelihood": -28.277420741735956,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.8764117642188136,
      "gamma": 5.424483946061941,
      "phi": 1.2670247059836566,
      "success": true,
      "log_likelihood": -32.27742074079579,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 4.74166691138835,
      "gamma": 3.4328915317949162,
      "phi": 0.7037266111170333,
      "success": true,
      "log_likelihood": -31.27742074103083,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.1299853346770625,
      "gamma": 9.082801806878308,
      "phi": 1.0504219567585746,
      "success": true,
      "log_likelihood": -24.277420742676117,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.7410063038424815,
      "gamma": 2.7508902264942483,
      "phi": 0.740468749946139,
      "success": true,
      "log_likelihood": -11.27742074573165,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 8.969672192178287,
      "gamma": 2.388844637795562,
      "phi": 0.5235950538205134,
      "success": true,
      "log_likelihood": -23.277420742911158,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -6.9550300116786135,
      "gamma": 7.821812136159245,
      "phi": 0.9487172340195094,
      "success": true,
      "log_likelihood": -11.27742074573165,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.646635691882695,
      "gamma": 2.4290170231560335,
      "phi": 1.453448874066939,
      "success": true,
      "log_likelihood": -33.27742074056075,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.7188411710314906,
      "gamma": 4.663359029465611,
      "phi": 0.8166093880574836,
      "success": true,
      "log_likelihood": -31.27742074103083,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.2425315746915686,
      "gamma": 5.298935658558963,
      "phi": 0.7953992257138447,
      "success": true,
      "log_likelihood": -43.277420738210346,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 6.631191734634211,
      "gamma": 6.8939829070130685,
      "phi": 0.8165066770784871,
      "success": true,
      "log_likelihood": -32.2774207407958,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3333333333333333,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.057467391776676,
      "gamma": 9.088008020578949,
      "phi": 1.0436425822593964,
      "success": true,
      "log_likelihood": -11.27742074573165,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 6.140256634107818,
      "gamma": 3.4675301899207445,
      "phi": 1.0318503947157818,
      "success": true,
      "log_likelihood": -11.27742074573165,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -8.941688825543894,
      "gamma": 3.81731285237515,
      "phi": 0.9000101190460651,
      "success": true,
      "log_likelihood": -11.27742074573165,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 4.307460997331605,
      "gamma": 2.6288594411328505,
      "phi": 0.5764853573965375,
      "success": true,
      "log_likelihood": -11.27742074573165,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 6.1852076801342974,
      "gamma": 9.824863329660364,
      "phi": 0.6617823066924408,
      "success": true,
      "log_likelihood": -16.277420744556444,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.929821270980831,
      "gamma": 1.0277876453860868,
      "phi": 1.4933193848982809,
      "success": true,
      "log_likelihood": -15.277420744791481,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.608520846084936,
      "gamma": 5.004836405854731,
      "phi": 0.9165416591151128,
      "success": true,
      "log_likelihood": -11.27742074573165,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -5.37483570020931,
      "gamma": 4.269969557292754,
      "phi": 1.2160518893736079,
      "success": true,
      "log_likelihood": -27.277420741970992,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.798421933472593,
      "gamma": 4.942238145397948,
      "phi": 0.968145968099537,
      "success": true,
      "log_likelihood": -16.277420744556444,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 8.719765810160581,
      "gamma": 0.9475922118064328,
      "phi": 0.6583818349337525,
      "success": true,
      "log_likelihood": -34.27742074032571,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -9.330498078090718,
      "gamma": 6.945790873142043,
      "phi": 0.6770183478744553,
      "success": true,
      "log_likelihood": -28.277420741735952,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -4.8106040604747164,
      "gamma": 1.6365937068777314,
      "phi": 1.3843549122528969,
      "success": true,
      "log_likelihood": -29.277420741500915,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.1200273707994093,
      "gamma": 1.1708569370557387,
      "phi": 0.716945174471172,
      "success": true,
      "log_likelihood": -26.277420742206036,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 7.3433032929580655,
      "gamma": 6.169763928550806,
      "phi": 0.7337478865954364,
      "success": true,
      "log_likelihood": -27.277420741970996,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 7.756009154779839,
      "gamma": 8.48606346020087,
      "phi": 0.6663598991332902,
      "success": true,
      "log_likelihood": -37.277420739620595,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 6.756791425569773,
      "gamma": 4.68403315790227,
      "phi": 0.9145927168113359,
      "success": true,
      "log_likelihood": -15.277420744791485,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 3.6830403751834595,
      "gamma": 6.895827604111277,
      "phi": 0.5482909682423203,
      "success": true,
      "log_likelihood": -19.277420743851323,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 8.230279726724984,
      "gamma": 4.068424983352759,
      "phi": 1.0775324180224457,
      "success": true,
      "log_likelihood": -11.27742074573165,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -5.888196578922198,
      "gamma": 5.363393013917377,
      "phi": 0.985317066002649,
      "success": true,
      "log_likelihood": -44.277420737975305,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.710380137493683,
      "gamma": 3.5520376968461473,
      "phi": 1.3172598442849177,
      "success": true,
      "log_likelihood": -32.2774207407958,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 5.570049987962163,
      "gamma": 5.794912269637669,
      "phi": 0.7990627243124462,
      "success": true,
      "log_likelihood": -33.27742074056075,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 6.918232423628041,
      "gamma": 5.245914690696981,
      "phi": 1.318159380077002,
      "success": true,
      "log_likelihood": -11.27742074573165,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 3.1429657680461904,
      "gamma": 2.4478992729234994,
      "phi": 0.9627514712098506,
      "success": true,
      "log_likelihood": -24.277420742676114,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -7.478613823031921,
      "gamma": 9.521399867993798,
      "phi": 1.147889239818963,
      "success": true,
      "log_likelihood": -22.277420743146198,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 3.595741378170702,
      "gamma": 1.1978121668050246,
      "phi": 0.9392376523804409,
      "success": true,
      "log_likelihood": -29.27742074150091,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.9484291680187233,
      "gamma": 9.937680850735514,
      "phi": 1.192466300311632,
      "success": true,
      "log_likelihood": -23.277420742911154,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 9.345997317527786,
      "gamma": 7.743005840737503,
      "phi": 1.1861266143422153,
      "success": true,
      "log_likelihood": -14.277420745026529,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 3.642941108266964,
      "gamma": 6.098845232933028,
      "phi": 1.4565484293801796,
      "success": true,
      "log_likelihood": -25.277420742441073,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 7.592570854870541,
      "gamma": 7.095626005937334,
      "phi": 1.107850275412216,
      "success": true,
      "log_likelihood": -39.27742073915051,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.4580814524773746,
      "gamma": 3.582170650138755,
      "phi": 0.966255746605572,
      "success": true,
      "log_likelihood": -12.277420745496608,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 8.132337972941684,
      "gamma": 6.190012672219426,
      "phi": 1.095692595942923,
      "success": true,
      "log_likelihood": -27.277420741970992,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 7.572253072636499,
      "gamma": 8.582761527850156,
      "phi": 0.6019165030389364,
      "success": true,
      "log_likelihood": -25.277420742441073,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.3412672387176903,
      "gamma": 0.2429919243798906,
      "phi": 1.486981839102584,
      "success": true,
      "log_likelihood": -21.27742074338124,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.4999557660402978,
      "gamma": 2.0952345227913227,
      "phi": 1.1156461343591362,
      "success": true,
      "log_likelihood": -28.277420741735952,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.5130753627071876,
      "gamma": 0.8401587233988561,
      "phi": 0.7153932977943588,
      "success": true,
      "log_likelihood": -33.27742074056075,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.9503602469545136,
      "gamma": 5.453851369823348,
      "phi": 1.3342076822086901,
      "success": true,
      "log_likelihood": -32.2774207407958,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 7.662720434080942,
      "gamma": 7.396381359983325,
      "phi": 0.6344602510665238,
      "success": true,
      "log_likelihood": -28.277420741735952,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.175057689498927,
      "gamma": 9.033030107831662,
      "phi": 0.729519245973485,
      "success": true,
      "log_likelihood": -22.277420743146195,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 9.941775241968156,
      "gamma": 7.2652981400293815,
      "phi": 1.0254768970957928,
      "success": true,
      "log_likelihood": -42.277420738445386,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3333333333333333,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -8.716496858250615,
      "gamma": 1.0755218744730732,
      "phi": 1.2259208995151987,
      "success": true,
      "log_likelihood": -28.277420741735956,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.9547684205844877,
      "gamma": 0.7737180707691893,
      "phi": 1.264186705074695,
      "success": true,
      "log_likelihood": -26.277420742206033,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -3.459571404058577,
      "gamma": 3.127275533791808,
      "phi": 0.7173123450782966,
      "success": true,
      "log_likelihood": -33.27742074056075,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 7.362171357882495,
      "gamma": 0.3806388852565279,
      "phi": 1.1313199020463158,
      "success": true,
      "log_likelihood": -35.27742074009067,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -7.7815514365237215,
      "gamma": 3.4915865158247783,
      "phi": 1.3741010251503711,
      "success": true,
      "log_likelihood": -37.277420739620595,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.2777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -6.409002852559656,
      "gamma": 4.132503737247333,
      "phi": 1.0784017084347708,
      "success": true,
      "log_likelihood": -15.277420744791483,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 6.381225707796833,
      "gamma": 1.8661877543527394,
      "phi": 1.3742298125382029,
      "success": true,
      "log_likelihood": -43.277420738210346,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.2777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -4.921995513546031,
      "gamma": 5.796704299867481,
      "phi": 1.39983127578178,
      "success": true,
      "log_likelihood": -18.27742074408636,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 5.72564812491521,
      "gamma": 2.502069928933147,
      "phi": 0.7889480286957314,
      "success": true,
      "log_likelihood": -25.277420742441077,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -3.9317173742702956,
      "gamma": 1.8501378178804029,
      "phi": 1.0663160287871127,
      "success": true,
      "log_likelihood": -29.277420741500915,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 5.769343334497865,
      "gamma": 6.163033450537413,
      "phi": 0.5261496987659481,
      "success": true,
      "log_likelihood": -44.277420737975305,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 9.735109263579787,
      "gamma": 3.453056227645922,
      "phi": 1.0056006852535386,
      "success": true,
      "log_likelihood": -31.27742074103083,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3333333333333333,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.8985359859995548,
      "gamma": 3.765236751553127,
      "phi": 1.4216103941117444,
      "success": true,
      "log_likelihood": -39.27742073915051,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.3656966197368163,
      "gamma": 2.7981578741961286,
      "phi": 1.26568062066113,
      "success": true,
      "log_likelihood": -27.277420741970996,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -9.617927762630682,
      "gamma": 3.556900052621863,
      "phi": 1.2058481993213426,
      "success": true,
      "log_likelihood": -14.277420745026523,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -8.79233952092098,
      "gamma": 4.739259960926789,
      "phi": 0.7942786814525111,
      "success": true,
      "log_likelihood": -16.277420744556448,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.716974171091204,
      "gamma": 0.17703514264888698,
      "phi": 1.0297981603514827,
      "success": true,
      "log_likelihood": -27.277420741970992,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.152738965308984,
      "gamma": 8.22066212990879,
      "phi": 1.2446223043365308,
      "success": true,
      "log_likelihood": -14.277420745026525,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.0571622079303467,
      "gamma": 2.1967601287030925,
      "phi": 1.3904353047479825,
      "success": true,
      "log_likelihood": -43.277420738210346,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 9.376011141623554,
      "gamma": 9.233962007022606,
      "phi": 0.622630159349141,
      "success": true,
      "log_likelihood": -42.277420738445386,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3333333333333333,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 8.568973253325552,
      "gamma": 0.5306361200710341,
      "phi": 1.2805225591263274,
      "success": true,
      "log_likelihood": -28.277420741735952,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 3.8734415593350047,
      "gamma": 6.368129867313997,
      "phi": 1.4829393172138938,
      "success": true,
      "log_likelihood": -19.27742074385132,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.771676537244483,
      "gamma": 2.0325107286175124,
      "phi": 1.2860771224526697,
      "success": true,
      "log_likelihood": -29.27742074150091,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 6.09596524724153,
      "gamma": 7.876282123061824,
      "phi": 1.49917933671916,
      "success": true,
      "log_likelihood": -22.277420743146195,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 9.601493552274011,
      "gamma": 5.182947179539181,
      "phi": 0.6480833301873798,
      "success": true,
      "log_likelihood": -13.277420745261566,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -3.0745835580209135,
      "gamma": 9.758429291216322,
      "phi": 1.4231563866640295,
      "success": true,
      "log_likelihood": -45.277420737740265,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 3.188843101344503,
      "gamma": 6.876994641573071,
      "phi": 1.188924037187392,
      "success": true,
      "log_likelihood": -25.277420742441073,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -7.589439503218669,
      "gamma": 1.1137489002133028,
      "phi": 0.5907556195921235,
      "success": true,
      "log_likelihood": -44.277420737975305,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.25,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -8.328573091731917,
      "gamma": 4.1154001482810845,
      "phi": 0.9047884239962946,
      "success": true,
      "log_likelihood": -28.277420741735952,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 4.047627942975829,
      "gamma": 8.404076568006873,
      "phi": 1.1511717690986374,
      "success": true,
      "log_likelihood": -14.277420745026525,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -7.170012053073411,
      "gamma": 5.757079449867797,
      "phi": 0.7359198634474601,
      "success": true,
      "log_likelihood": -43.277420738210346,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -8.752163451564773,
      "gamma": 4.339944682230417,
      "phi": 1.3832221241770108,
      "success": true,
      "log_likelihood": -29.27742074150091,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.2173740461886755,
      "gamma": 8.466192304444816,
      "phi": 0.9963085212673909,
      "success": true,
      "log_likelihood": -25.277420742441073,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.5847083778987958,
      "gamma": 1.5314389989425192,
      "phi": 0.8557843990235525,
      "success": true,
      "log_likelihood": -43.277420738210346,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.8925708228940668,
      "gamma": 2.6419899468489727,
      "phi": 0.7097385949653032,
      "success": true,
      "log_likelihood": -22.277420743146198,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 5.178284299635516,
      "gamma": 2.0451223803473906,
      "phi": 0.752334402909594,
      "success": true,
      "log_likelihood": -39.27742073915051,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 9.195427261149806,
      "gamma": 5.40569963505213,
      "phi": 0.9554984974219816,
      "success": true,
      "log_likelihood": -13.277420745261566,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.9243835285172803,
      "gamma": 2.040427005981369,
      "phi": 0.5481253864749156,
      "success": true,
      "log_likelihood": -30.27742074126587,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -3.1778668223191,
      "gamma": 6.588964768569953,
      "phi": 0.8499554706452948,
      "success": true,
      "log_likelihood": -22.277420743146195,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "beta": {
        "r": 0.09454922082944699,
        "p": 0.34942594444433966
      },
      "gamma": {
        "r": -0.004953061885143458,
        "p": 0.9609924626774454
      },
      "phi": {
        "r": -0.019629825727053678,
        "p": 0.8462941457627177
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 64.3163873105318,
  "bic_results": {
    "average_bic": 64.3163873105318,
    "individual_bics": [
      99.30539829131894,
      69.30539829837015,
      67.30539829884025,
      75.30539829695991,
      73.30539829742999,
      59.30539830072057,
      33.305398306831634,
      57.30539830119065,
      33.305398306831634,
      77.30539829648983,
      73.30539829742999,
      97.30539829178902,
      75.30539829695992,
      33.305398306831634,
      33.305398306831634,
      33.305398306831634,
      33.305398306831634,
      43.305398304481216,
      41.3053983049513,
      33.305398306831634,
      65.30539829931031,
      43.305398304481216,
      79.30539829601975,
      67.30539829884023,
      69.30539829837016,
      63.30539829978041,
      65.30539829931033,
      85.30539829460952,
      41.3053983049513,
      49.30539830307097,
      33.305398306831634,
      99.30539829131894,
      75.30539829695992,
      77.30539829648983,
      33.305398306831634,
      59.305398300720555,
      55.30539830166073,
      69.30539829837015,
      57.305398301190635,
      39.30539830542139,
      61.305398300250474,
      89.30539829366934,
      35.305398306361546,
      65.30539829931031,
      61.305398300250474,
      53.30539830213081,
      67.30539829884023,
      77.30539829648983,
      75.30539829695992,
      67.30539829884023,
      55.305398301660716,
      95.3053982922591,
      67.30539829884025,
      63.30539829978039,
      77.30539829648983,
      81.30539829554967,
      85.30539829460952,
      41.3053983049513,
      97.30539829178902,
      47.305398303541054,
      61.30539830025049,
      69.30539829837016,
      99.30539829131894,
      73.30539829742999,
      89.30539829366934,
      65.30539829931033,
      39.30539830542138,
      43.30539830448123,
      65.30539829931031,
      39.30539830542138,
      97.30539829178902,
      95.3053982922591,
      67.30539829884023,
      49.30539830307097,
      69.30539829837015,
      55.305398301660716,
      37.30539830589146,
      101.30539829084886,
      61.305398300250474,
      99.30539829131894,
      67.30539829884023,
      39.30539830542138,
      97.30539829178902,
      69.30539829837015,
      61.305398300250474,
      97.30539829178902,
      55.30539830166073,
      89.30539829366934,
      37.30539830589146,
      71.30539829790007,
      55.305398301660716
    ],
    "group_enabled": false,
    "group_bics": null,
    "num_parameters": 3,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- beta: r = 0.095\n- gamma: r = -0.005\n- phi: r = -0.020",
  "previous_models": [
    "Specification: \u03b4 = 1\u00d710^(-6)\na = \u03b4 + (trial_type + trial_role + token_opp + token_self + combined_earning + split_opp + split_self + splitperc_opp + splitperc_self + accepted_amount + accepted_perc) + 0\u00d7trial_number + 0\u00d7proposed_perc + 0\u00d7proposed_amount + 0\u00d7ID + 0\u00d7numeric(group)\na_mod = 1.08 \u00d7 a \u00d7 [1 + 0.012 \u00d7 sin(a + 0.045)]\nm1 = 1 + 0.008 \u00d7 cos(a + 0.065)\nm2 = 1 + 0.005 \u00d7 sin(a + 0.115)\nm3 = 1 + 0.004 \u00d7 cos(a + 0.085)\nm4 = 1 + 0.006 \u00d7 ( sin(a + 0.035) \u00d7 cos(a + 0.055) )\nm5 = 1 + 0.003 \u00d7 ( sin(a + 0.03) \u00d7 cos(a + 0.05) )\nz = a_mod \u00d7 m1 \u00d7 m2 \u00d7 m3 \u00d7 m4 \u00d7 m5\nw = (phi - 0.5) / phi\nf_adapt(z) = { if z \u2265 0 then clip[1.002 \u00d7 ( z^w \u00d7 (ln(1+z))^(1-w) ) \u00d7 (z/(1+|z|)) , -100, 100] else phi \u00d7 [ (z + \u0394_shift)/(1+|z+\u0394_shift|) ]^7 } , with \u0394_shift = 1\u00d710^(-6)\nT = 1 + a + a^2 + a^3 + a^4 + a^5 + a^6 + a^7 + a^8 + a^9 + a^10 + a^11 + a^12\nextra = { exp(-a/0.1) \u00d7 [z/(1+|z|)] \u00d7 [1+0.005\u00d7 sin(1/(1+a))] \u00d7 [1+0.002\u00d7 cos(0.5\u00d7a)] \u00d7 ([1+0.003\u00d7 cos(0.3\u00d7a)]^2) \u00d7 ([1+0.004\u00d7 cos(0.3\u00d7a)]^2) \u00d7 [1+0.0025\u00d7 cos(0.7\u00d7a)] \u00d7 [1+ tanh(0.05\u00d7a)] \u00d7 [1+ 1/(1+exp(-0.01\u00d7a))] \u00d7 [1.07\u00d7 softplus(0.865/(1+a)) + 0.15\u00d7 (0.865/(1+a)) + 0.5\u00d7 (0.865/(1+a)) + 0.006\u00d7a] \u00d7 [1-0.002\u00d7 cos(a)] \u00d7 [1-0.0025\u00d7 cos(2.5\u00d7a)] \u00d7 [1+0.001\u00d7a] \u00d7 ([1+ cosh(0.001\u00d7a)]^(2+0.0005\u00d7a)) + 1\u00d710^(-6) }^(0.9478+0.00018\u00d7 ln(1+a)) \u00d7 [1+ tanh(0.05\u00d7a)]\nExponent = (0.9478+0.00018\u00d7 ln(1+a)) \u00d7 [1 + 0.003\u00d7 sin(2\u00d7a) + 0.001\u00d7 cos(3\u00d7a) + 0.0025\u00d7 cos(0.7\u00d7a) + 0.004\u00d7 sin(2.5\u00d7a) + 0.002\u00d7 cos(3.5\u00d7a) + 0.001\u00d7 sin(2.5\u00d7a)\u00d7 cos(3\u00d7a)]\nf(x) = sign(z) \u00d7 [ f_adapt(z) \u00d7 T \u00d7 extra ]^(Exponent)\nU = beta + gamma \u00d7 f(x)\nP(accept=1) = 1/(1 + exp(-U))\nSummary: A highly nonlinear binary choice model in which a latent \u201ccore\u201d signal a is computed as the sum of 11 fixed dataset\u2010derived components (with additional variables incorporated with zero weight), then transformed via successive sinusoidal and polynomial modulations to yield a composite signal z. This signal is adaptively transformed using a softsign\u2010based function with explicit clipping for nonnegative inputs and an exponentiated softsign for negative inputs, further scaled by a high\u2010order dynamic threshold T and an elaborate extra composite term featuring exponential, sigmoid, tanh, softplus, and trigonometric functions. The final exponent is modulated by additional sine\u2013cosine terms before combining with three learnable parameters (beta, gamma, phi) to determine the latent utility U, which is converted to an acceptance probability via a logistic function.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 64.3163873105318\nOverall Accuracy: 0.5394\n\nParameter Recovery:\n- beta: r = 0.095\n- gamma: r = -0.005\n- phi: r = -0.020"
  ]
}