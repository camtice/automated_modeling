{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "<think>\nFor this run, we want to push the model further by adding additional softsign corrections and an explicit clipping mechanism on the adaptive transformation for positive z\u2010values, while for the negative branch we increase the exponent (from 7 to 8) after applying a softsign correction. In addition, we extend the dynamic threshold T (including extra polynomial terms up to a^12 as before) and add an extra sigmoid factor and an extra tanh multiplier in the extra composite component to dampen extreme values even more. Finally, we update the final exponent to include an extra sine\u2013cosine modulation term (e.g. an extra term with sin(2\u00d7a) or sin(2.5\u00d7a) plus a cosine term). Retain three learnable parameters (beta, gamma, phi) with bounds beta \u2208 [\u201310, 10], gamma \u2208 [0, 10], phi \u2208 [0.5, 1.5]. This additional flexibility should help boost accuracy, lower the BIC, and achieve improved parameter recovery.\n</think>\n\nNew Instructions for Run 129:\n1. Compute the core sum \u201ca\u201d as the sum of fixed components F1 through F11 plus a small constant \u03b4.\n2. Compute a_mod = 1.08 \u00d7 a \u00d7 [1 + 0.012 \u00d7 sin(a + 0.045)].\n3. Sequentially modulate a_mod with:\n\u2003\u2003\u2022 [1 + 0.008 \u00d7 cos(a + 0.065)]\n\u2003\u2003\u2022 [1 + 0.005 \u00d7 sin(a + 0.115)]\n\u2003\u2003\u2022 [1 + 0.004 \u00d7 cos(a + 0.085)]\n\u2003\u2003\u2022 [1 + 0.006 \u00d7 (sin(a + 0.035) \u00d7 cos(a + 0.055))]\n\u2003\u2003\u2022 [1 + 0.003 \u00d7 (sin(a + 0.03) \u00d7 cos(a + 0.05))]\nDefine the resulting product as z.\n4. Set the weight w = (phi \u2013 0.5) / phi.\n\u2003\u2003\u2022 For z \u2265 0, define the adaptive transformation as f_adapt(z) = 1.002 \u00d7 [z^w \u00d7 (ln(1+z))^(1\u2013w)] multiplied by softsign(z) defined as z/(1+|z|); then explicitly clip the result between \u2013100 and 100.\n\u2003\u2003\u2022 For z < 0, define f_adapt(z) = phi \u00d7 [softsign(z + \u0394_shift)]^8, where \u0394_shift = 1\u00d710^(-6).\n5. Define a dynamic threshold T as an extended polynomial in a including terms up to a^12.\n6. Define the extra composite term extra as:\n\u2003\u2003extra = { exp(\u2013a/0.1) \u00d7 [z/(1+|z|)] \u00d7 [1 + 0.005 \u00d7 sin(1/(1+a))] \u00d7 [1 + 0.002 \u00d7 cos(0.5\u00d7a)] \u00d7 ([1+0.003\u00d7cos(0.3\u00d7a)]\u00b2) \u00d7 ([1+0.004\u00d7cos(0.3\u00d7a)]\u00b2) \u00d7 [1 + 0.0025\u00d7cos(0.7\u00d7a)] \u00d7 [1 + tanh(0.05\u00d7a)] \u00d7 [1 + sigmoid(0.01\u00d7a)] \u00d7 [1.07\u00d7softplus(0.865/(1+a)) + 0.15\u00d7(0.865/(1+a)) + 0.5\u00d7(0.865/(1+a)) + 0.006\u00d7a] \u00d7 [1 \u2013 0.002\u00d7cos(a)] \u00d7 [1 \u2013 0.0025\u00d7cos(2.5\u00d7a)] \u00d7 [1 + 0.001\u00d7a] \u00d7 [1+cosh(0.001\u00d7a)]^(2+0.0005\u00d7a) + 1\u00d710^(-6) }^(0.9478 + 0.00018\u00d7ln(1+a)) multiplied by [1 + tanh(0.05\u00d7a)].\n7. Update the final exponent as:\n\u2003\u2003Exponent = [0.9478 + 0.00018\u00d7ln(1+a)] \u00d7 [1 + 0.003\u00d7sin(2\u00d7a) + 0.001\u00d7cos(3\u00d7a) + 0.0025\u00d7cos(0.7\u00d7a) + 0.004\u00d7sin(2.5\u00d7a) + 0.002\u00d7cos(3.5\u00d7a) + 0.001\u00d7sin(2.5\u00d7a)\u00d7cos(3\u00d7a)].\n8. Define the final transformed signal as:\n\u2003\u2003f(x) = sign(z) \u00d7 { [ f_adapt(z) \u00d7 T \u00d7 extra ]^(Exponent) }.\n9. Compute latent utility U = beta + gamma \u00d7 f(x) and compute the acceptance probability as P(accept=1) = 1/(1 + exp(\u2013U)).\n10. Retain exactly three learnable parameters with bounds: beta \u2208 [\u201310, 10], gamma \u2208 [0, 10], and phi \u2208 [0.5, 1.5].\n\nFeel free to explore out-of-the-box nonlinear functions and creative modulations if they may further improve performance.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: <think>\nFor this run, we want to push the model further by adding additional softsign corrections and an explicit clipping mechanism on the adaptive transformation for positive z\u2010values, while for the negative branch we increase the exponent (from 7 to 8) after applying a softsign correction. In addition, we extend the dynamic threshold T (including extra polynomial terms up to a^12 as before) and add an extra sigmoid factor and an extra tanh multiplier in the extra composite component to dampen extreme values even more. Finally, we update the final exponent to include an extra sine\u2013cosine modulation term (e.g. an extra term with sin(2\u00d7a) or sin(2.5\u00d7a) plus a cosine term). Retain three learnable parameters (beta, gamma, phi) with bounds beta \u2208 [\u201310, 10], gamma \u2208 [0, 10], phi \u2208 [0.5, 1.5]. This additional flexibility should help boost accuracy, lower the BIC, and achieve improved parameter recovery.\n</think>\n\nNew Instructions for Run 129:\n1. Compute the core sum \u201ca\u201d as the sum of fixed components F1 through F11 plus a small constant \u03b4.\n2. Compute a_mod = 1.08 \u00d7 a \u00d7 [1 + 0.012 \u00d7 sin(a + 0.045)].\n3. Sequentially modulate a_mod with:\n\u2003\u2003\u2022 [1 + 0.008 \u00d7 cos(a + 0.065)]\n\u2003\u2003\u2022 [1 + 0.005 \u00d7 sin(a + 0.115)]\n\u2003\u2003\u2022 [1 + 0.004 \u00d7 cos(a + 0.085)]\n\u2003\u2003\u2022 [1 + 0.006 \u00d7 (sin(a + 0.035) \u00d7 cos(a + 0.055))]\n\u2003\u2003\u2022 [1 + 0.003 \u00d7 (sin(a + 0.03) \u00d7 cos(a + 0.05))]\nDefine the resulting product as z.\n4. Set the weight w = (phi \u2013 0.5) / phi.\n\u2003\u2003\u2022 For z \u2265 0, define the adaptive transformation as f_adapt(z) = 1.002 \u00d7 [z^w \u00d7 (ln(1+z))^(1\u2013w)] multiplied by softsign(z) defined as z/(1+|z|); then explicitly clip the result between \u2013100 and 100.\n\u2003\u2003\u2022 For z < 0, define f_adapt(z) = phi \u00d7 [softsign(z + \u0394_shift)]^8, where \u0394_shift = 1\u00d710^(-6).\n5. Define a dynamic threshold T as an extended polynomial in a including terms up to a^12.\n6. Define the extra composite term extra as:\n\u2003\u2003extra = { exp(\u2013a/0.1) \u00d7 [z/(1+|z|)] \u00d7 [1 + 0.005 \u00d7 sin(1/(1+a))] \u00d7 [1 + 0.002 \u00d7 cos(0.5\u00d7a)] \u00d7 ([1+0.003\u00d7cos(0.3\u00d7a)]\u00b2) \u00d7 ([1+0.004\u00d7cos(0.3\u00d7a)]\u00b2) \u00d7 [1 + 0.0025\u00d7cos(0.7\u00d7a)] \u00d7 [1 + tanh(0.05\u00d7a)] \u00d7 [1 + sigmoid(0.01\u00d7a)] \u00d7 [1.07\u00d7softplus(0.865/(1+a)) + 0.15\u00d7(0.865/(1+a)) + 0.5\u00d7(0.865/(1+a)) + 0.006\u00d7a] \u00d7 [1 \u2013 0.002\u00d7cos(a)] \u00d7 [1 \u2013 0.0025\u00d7cos(2.5\u00d7a)] \u00d7 [1 + 0.001\u00d7a] \u00d7 [1+cosh(0.001\u00d7a)]^(2+0.0005\u00d7a) + 1\u00d710^(-6) }^(0.9478 + 0.00018\u00d7ln(1+a)) multiplied by [1 + tanh(0.05\u00d7a)].\n7. Update the final exponent as:\n\u2003\u2003Exponent = [0.9478 + 0.00018\u00d7ln(1+a)] \u00d7 [1 + 0.003\u00d7sin(2\u00d7a) + 0.001\u00d7cos(3\u00d7a) + 0.0025\u00d7cos(0.7\u00d7a) + 0.004\u00d7sin(2.5\u00d7a) + 0.002\u00d7cos(3.5\u00d7a) + 0.001\u00d7sin(2.5\u00d7a)\u00d7cos(3\u00d7a)].\n8. Define the final transformed signal as:\n\u2003\u2003f(x) = sign(z) \u00d7 { [ f_adapt(z) \u00d7 T \u00d7 extra ]^(Exponent) }.\n9. Compute latent utility U = beta + gamma \u00d7 f(x) and compute the acceptance probability as P(accept=1) = 1/(1 + exp(\u2013U)).\n10. Retain exactly three learnable parameters with bounds: beta \u2208 [\u201310, 10], gamma \u2208 [0, 10], and phi \u2208 [0.5, 1.5].\n\nFeel free to explore out-of-the-box nonlinear functions and creative modulations if they may further improve performance.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<MODEL>\na = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + delta\na_mod = 1.08 * a * (1 + 0.012 * sin(a + 0.045))\nz = a_mod * (1 + 0.008 * cos(a + 0.065)) * (1 + 0.005 * sin(a + 0.115)) * (1 + 0.004 * cos(a + 0.085)) * (1 + 0.006 * (sin(a + 0.035) * cos(a + 0.055))) * (1 + 0.003 * (sin(a + 0.03) * cos(a + 0.05)))\nw = (phi - 0.5) / phi\nf_adapt = {if z >= 0 then clip[1.002 * (z^w * (ln(1+z))^(1-w)) * (z/(1+abs(z))), -100, 100] else phi * ( ( (z + 1e-6)/(1+abs(z+1e-6)) )^8 )}\nT = K0 + K1*a + K2*a^2 + K3*a^3 + K4*a^4 + K5*a^5 + K6*a^6 + K7*a^7 + K8*a^8 + K9*a^9 + K10*a^10 + K11*a^11 + K12*a^12\nextra = { exp(-a/0.1) * (z/(1+abs(z))) * (1 + 0.005*sin(1/(1+a))) * (1 + 0.002*cos(0.5*a)) * (1+0.003*cos(0.3*a))^2 * (1+0.004*cos(0.3*a))^2 * (1+0.0025*cos(0.7*a)) * (1+tanh(0.05*a)) * (1+sigmoid(0.01*a)) * (1.07*softplus(0.865/(1+a)) + 0.15*(0.865/(1+a)) + 0.5*(0.865/(1+a)) + 0.006*a) * (1 - 0.002*cos(a)) * (1 - 0.0025*cos(2.5*a)) * (1+0.001*a) * (1+cosh(0.001*a))^(2+0.0005*a) + 1e-6 }^(0.9478+0.00018*ln(1+a)) * (1+tanh(0.05*a))\nExponent = (0.9478+0.00018*ln(1+a)) * (1 + 0.003*sin(2*a) + 0.001*cos(3*a) + 0.0025*cos(0.7*a) + 0.004*sin(2.5*a) + 0.002*cos(3.5*a) + 0.001*sin(2.5*a)*cos(3*a))\nf = sign(z) * ( ( f_adapt * T * extra )^Exponent )\nU = beta + gamma * f\nP_accept = 1 / (1 + exp(-U))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"F1\": {\n      \"description\": \"Fixed component 1 extracted from task-specific data\",\n      \"range\": {\"min\": \"-inf\", \"max\": \"inf\", \"inclusive_min\": true, \"inclusive_max\": true},\n      \"distribution\": {\"type\": \"empirical\", \"parameters\": {}},\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F2\": {\n      \"description\": \"Fixed component 2 extracted from task-specific data\",\n      \"range\": {\"min\": \"-inf\", \"max\": \"inf\", \"inclusive_min\": true, \"inclusive_max\": true},\n      \"distribution\": {\"type\": \"empirical\", \"parameters\": {}},\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F3\": {\n      \"description\": \"Fixed component 3 extracted from task-specific data\",\n      \"range\": {\"min\": \"-inf\", \"max\": \"inf\", \"inclusive_min\": true, \"inclusive_max\": true},\n      \"distribution\": {\"type\": \"empirical\", \"parameters\": {}},\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F4\": {\n      \"description\": \"Fixed component 4 extracted from task-specific data\",\n      \"range\": {\"min\": \"-inf\", \"max\": \"inf\", \"inclusive_min\": true, \"inclusive_max\": true},\n      \"distribution\": {\"type\": \"empirical\", \"parameters\": {}},\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F5\": {\n      \"description\": \"Fixed component 5 extracted from task-specific data\",\n      \"range\": {\"min\": \"-inf\", \"max\": \"inf\", \"inclusive_min\": true, \"inclusive_max\": true},\n      \"distribution\": {\"type\": \"empirical\", \"parameters\": {}},\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F6\": {\n      \"description\": \"Fixed component 6 extracted from task-specific data\",\n      \"range\": {\"min\": \"-inf\", \"max\": \"inf\", \"inclusive_min\": true, \"inclusive_max\": true},\n      \"distribution\": {\"type\": \"empirical\", \"parameters\": {}},\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F7\": {\n      \"description\": \"Fixed component 7 extracted from task-specific data\",\n      \"range\": {\"min\": \"-inf\", \"max\": \"inf\", \"inclusive_min\": true, \"inclusive_max\": true},\n      \"distribution\": {\"type\": \"empirical\", \"parameters\": {}},\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F8\": {\n      \"description\": \"Fixed component 8 extracted from task-specific data\",\n      \"range\": {\"min\": \"-inf\", \"max\": \"inf\", \"inclusive_min\": true, \"inclusive_max\": true},\n      \"distribution\": {\"type\": \"empirical\", \"parameters\": {}},\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F9\": {\n      \"description\": \"Fixed component 9 extracted from task-specific data\",\n      \"range\": {\"min\": \"-inf\", \"max\": \"inf\", \"inclusive_min\": true, \"inclusive_max\": true},\n      \"distribution\": {\"type\": \"empirical\", \"parameters\": {}},\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F10\": {\n      \"description\": \"Fixed component 10 extracted from task-specific data\",\n      \"range\": {\"min\": \"-inf\", \"max\": \"inf\", \"inclusive_min\": true, \"inclusive_max\": true},\n      \"distribution\": {\"type\": \"empirical\", \"parameters\": {}},\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F11\": {\n      \"description\": \"Fixed component 11 extracted from task-specific data\",\n      \"range\": {\"min\": \"-inf\", \"max\": \"inf\", \"inclusive_min\": true, \"inclusive_max\": true},\n      \"distribution\": {\"type\": \"empirical\", \"parameters\": {}},\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"delta\": {\n      \"description\": \"Small constant offset added to the core sum\",\n      \"range\": {\"min\": 1e-9, \"max\": 1e-3, \"inclusive_min\": true, \"inclusive_max\": true},\n      \"distribution\": {\"type\": \"constant\", \"parameters\": {\"value\": 1e-6}},\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a\": {\n      \"description\": \"Core sum of fixed components and delta\",\n      \"range\": {\"min\": \"-inf\", \"max\": \"inf\", \"inclusive_min\": true, \"inclusive_max\": true},\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a_mod\": {\n      \"description\": \"Modulated core sum with sinusoidal adjustment\",\n      \"range\": {\"min\": \"-inf\", \"max\": \"inf\", \"inclusive_min\": true, \"inclusive_max\": true},\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"z\": {\n      \"description\": \"Sequentially modulated signal after applying multiple cosine and sine factors\",\n      \"range\": {\"min\": \"-inf\", \"max\": \"inf\", \"inclusive_min\": true, \"inclusive_max\": true},\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"phi\": {\n      \"description\": \"Learnable parameter controlling the adaptive transformation weight\",\n      \"range\": {\"min\": 0.5, \"max\": 1.5, \"inclusive_min\": true, \"inclusive_max\": true},\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"w\": {\n      \"description\": \"Weight computed from phi for transformation balance\",\n      \"range\": {\"min\": \"-inf\", \"max\": \"inf\", \"inclusive_min\": true, \"inclusive_max\": true},\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_adapt\": {\n      \"description\": \"Adaptive transformation of z with explicit clipping for positive values and exponentiation for negative branch\",\n      \"range\": {\"min\": -100, \"max\": 100, \"inclusive_min\": true, \"inclusive_max\": true},\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"K0\": {\n      \"description\": \"Coefficient for a^0 in dynamic threshold polynomial T\",\n      \"range\": {\"min\": \"-inf\", \"max\": \"inf\", \"inclusive_min\": true, \"inclusive_max\": true},\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"K1\": {\n      \"description\": \"Coefficient for a^1 in dynamic threshold polynomial T\",\n      \"range\": {\"min\": \"-inf\", \"max\": \"inf\", \"inclusive_min\": true, \"inclusive_max\": true},\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"K2\": {\n      \"description\": \"Coefficient for a^2 in dynamic threshold polynomial T\",\n      \"range\": {\"min\": \"-inf\", \"max\": \"inf\", \"inclusive_min\": true, \"inclusive_max\": true},\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"K3\": {\n      \"description\": \"Coefficient for a^3 in dynamic threshold polynomial T\",\n      \"range\": {\"min\": \"-inf\", \"max\": \"inf\", \"inclusive_min\": true, \"inclusive_max\": true},\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"K4\": {\n      \"description\": \"Coefficient for a^4 in dynamic threshold polynomial T\",\n      \"range\": {\"min\": \"-inf\", \"max\": \"inf\", \"inclusive_min\": true, \"inclusive_max\": true},\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"K5\": {\n      \"description\": \"Coefficient for a^5 in dynamic threshold polynomial T\",\n      \"range\": {\"min\": \"-inf\", \"max\": \"inf\", \"inclusive_min\": true, \"inclusive_max\": true},\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"K6\": {\n      \"description\": \"Coefficient for a^6 in dynamic threshold polynomial T\",\n      \"range\": {\"min\": \"-inf\", \"max\": \"inf\", \"inclusive_min\": true, \"inclusive_max\": true},\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"K7\": {\n      \"description\": \"Coefficient for a^7 in dynamic threshold polynomial T\",\n      \"range\": {\"min\": \"-inf\", \"max\": \"inf\", \"inclusive_min\": true, \"inclusive_max\": true},\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"K8\": {\n      \"description\": \"Coefficient for a^8 in dynamic threshold polynomial T\",\n      \"range\": {\"min\": \"-inf\", \"max\": \"inf\", \"inclusive_min\": true, \"inclusive_max\": true},\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"K9\": {\n      \"description\": \"Coefficient for a^9 in dynamic threshold polynomial T\",\n      \"range\": {\"min\": \"-inf\", \"max\": \"inf\", \"inclusive_min\": true, \"inclusive_max\": true},\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"K10\": {\n      \"description\": \"Coefficient for a^10 in dynamic threshold polynomial T\",\n      \"range\": {\"min\": \"-inf\", \"max\": \"inf\", \"inclusive_min\": true, \"inclusive_max\": true},\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"K11\": {\n      \"description\": \"Coefficient for a^11 in dynamic threshold polynomial T\",\n      \"range\": {\"min\": \"-inf\", \"max\": \"inf\", \"inclusive_min\": true, \"inclusive_max\": true},\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"K12\": {\n      \"description\": \"Coefficient for a^12 in dynamic threshold polynomial T\",\n      \"range\": {\"min\": \"-inf\", \"max\": \"inf\", \"inclusive_min\": true, \"inclusive_max\": true},\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"T\": {\n      \"description\": \"Dynamic threshold computed as a polynomial in a up to the 12th power\",\n      \"range\": {\"min\": \"-inf\", \"max\": \"inf\", \"inclusive_min\": true, \"inclusive_max\": true},\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"extra\": {\n      \"description\": \"Extra composite term that dampens extreme values through multiple composite factors\",\n      \"range\": {\"min\": \"-inf\", \"max\": \"inf\", \"inclusive_min\": true, \"inclusive_max\": true},\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"Exponent\": {\n      \"description\": \"Final exponent modulating the transformed signal with additional sine\u2013cosine modulation\",\n      \"range\": {\"min\": \"-inf\", \"max\": \"inf\", \"inclusive_min\": true, \"inclusive_max\": true},\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f\": {\n      \"description\": \"Final transformed signal after applying adaptive transformation, threshold, extra term, and exponentiation\",\n      \"range\": {\"min\": \"-inf\", \"max\": \"inf\", \"inclusive_min\": true, \"inclusive_max\": true},\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Baseline utility parameter\",\n      \"range\": {\"min\": -10, \"max\": 10, \"inclusive_min\": true, \"inclusive_max\": true},\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Scaling parameter multiplying the transformed signal\",\n      \"range\": {\"min\": 0, \"max\": 10, \"inclusive_min\": true, \"inclusive_max\": true},\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed as baseline plus scaled transformed signal\",\n      \"range\": {\"min\": \"-inf\", \"max\": \"inf\", \"inclusive_min\": true, \"inclusive_max\": true},\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"P_accept\": {\n      \"description\": \"Probability of acceptance computed via logistic transformation of latent utility\",\n      \"range\": {\"min\": 0, \"max\": 1, \"inclusive_min\": true, \"inclusive_max\": true},\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"delta_shift\": {\n      \"description\": \"Small constant shift for negative branch in adaptive transformation (\u0394_shift)\",\n      \"range\": {\"min\": 1e-9, \"max\": 1e-3, \"inclusive_min\": true, \"inclusive_max\": true},\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA nonlinear utility model for binary acceptance that computes a core signal from eleven fixed data\u2010derived components, applies extensive sinusoidal and polynomial modulations, and performs an adaptive transformation with separate treatments for positive and negative signals. The final transformed value is scaled by two learnable parameters and offset by a baseline parameter to generate latent utility, which is mapped via a logistic function to predict responder accept/reject decisions.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['phi', 'beta', 'gamma']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                a = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + delta\na_mod = 1.08 * a * (1 + 0.012 * sin(a + 0.045))\nz = a_mod * (1 + 0.008 * cos(a + 0.065)) * (1 + 0.005 * sin(a + 0.115)) * (1 + 0.004 * cos(a + 0.085)) * (1 + 0.006 * (sin(a + 0.035) * cos(a + 0.055))) * (1 + 0.003 * (sin(a + 0.03) * cos(a + 0.05)))\nw = (phi - 0.5) / phi\nf_adapt = {if z >= 0 then clip[1.002 * (z^w * (ln(1+z))^(1-w)) * (z/(1+abs(z))), -100, 100] else phi * ( ( (z + 1e-6)/(1+abs(z+1e-6)) )^8 )}\nT = K0 + K1*a + K2*a^2 + K3*a^3 + K4*a^4 + K5*a^5 + K6*a^6 + K7*a^7 + K8*a^8 + K9*a^9 + K10*a^10 + K11*a^11 + K12*a^12\nextra = { exp(-a/0.1) * (z/(1+abs(z))) * (1 + 0.005*sin(1/(1+a))) * (1 + 0.002*cos(0.5*a)) * (1+0.003*cos(0.3*a))^2 * (1+0.004*cos(0.3*a))^2 * (1+0.0025*cos(0.7*a)) * (1+tanh(0.05*a)) * (1+sigmoid(0.01*a)) * (1.07*softplus(0.865/(1+a)) + 0.15*(0.865/(1+a)) + 0.5*(0.865/(1+a)) + 0.006*a) * (1 - 0.002*cos(a)) * (1 - 0.0025*cos(2.5*a)) * (1+0.001*a) * (1+cosh(0.001*a))^(2+0.0005*a) + 1e-6 }^(0.9478+0.00018*ln(1+a)) * (1+tanh(0.05*a))\nExponent = (0.9478+0.00018*ln(1+a)) * (1 + 0.003*sin(2*a) + 0.001*cos(3*a) + 0.0025*cos(0.7*a) + 0.004*sin(2.5*a) + 0.002*cos(3.5*a) + 0.001*sin(2.5*a)*cos(3*a))\nf = sign(z) * ( ( f_adapt * T * extra )^Exponent )\nU = beta + gamma * f\nP_accept = 1 / (1 + exp(-U))\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"F1\": {\n      \"description\": \"Fixed component 1 extracted from task-specific data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F2\": {\n      \"description\": \"Fixed component 2 extracted from task-specific data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F3\": {\n      \"description\": \"Fixed component 3 extracted from task-specific data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F4\": {\n      \"description\": \"Fixed component 4 extracted from task-specific data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F5\": {\n      \"description\": \"Fixed component 5 extracted from task-specific data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F6\": {\n      \"description\": \"Fixed component 6 extracted from task-specific data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F7\": {\n      \"description\": \"Fixed component 7 extracted from task-specific data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F8\": {\n      \"description\": \"Fixed component 8 extracted from task-specific data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F9\": {\n      \"description\": \"Fixed component 9 extracted from task-specific data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F10\": {\n      \"description\": \"Fixed component 10 extracted from task-specific data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F11\": {\n      \"description\": \"Fixed component 11 extracted from task-specific data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"delta\": {\n      \"description\": \"Small constant offset added to the core sum\",\n      \"range\": {\n        \"min\": 1e-09,\n        \"max\": 0.001,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"constant\",\n        \"parameters\": {\n          \"value\": 1e-06\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a\": {\n      \"description\": \"Core sum of fixed components and delta\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a_mod\": {\n      \"description\": \"Modulated core sum with sinusoidal adjustment\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"z\": {\n      \"description\": \"Sequentially modulated signal after applying multiple cosine and sine factors\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"phi\": {\n      \"description\": \"Learnable parameter controlling the adaptive transformation weight\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"w\": {\n      \"description\": \"Weight computed from phi for transformation balance\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_adapt\": {\n      \"description\": \"Adaptive transformation of z with explicit clipping for positive values and exponentiation for negative branch\",\n      \"range\": {\n        \"min\": -100,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"K0\": {\n      \"description\": \"Coefficient for a^0 in dynamic threshold polynomial T\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"K1\": {\n      \"description\": \"Coefficient for a^1 in dynamic threshold polynomial T\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"K2\": {\n      \"description\": \"Coefficient for a^2 in dynamic threshold polynomial T\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"K3\": {\n      \"description\": \"Coefficient for a^3 in dynamic threshold polynomial T\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"K4\": {\n      \"description\": \"Coefficient for a^4 in dynamic threshold polynomial T\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"K5\": {\n      \"description\": \"Coefficient for a^5 in dynamic threshold polynomial T\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"K6\": {\n      \"description\": \"Coefficient for a^6 in dynamic threshold polynomial T\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"K7\": {\n      \"description\": \"Coefficient for a^7 in dynamic threshold polynomial T\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"K8\": {\n      \"description\": \"Coefficient for a^8 in dynamic threshold polynomial T\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"K9\": {\n      \"description\": \"Coefficient for a^9 in dynamic threshold polynomial T\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"K10\": {\n      \"description\": \"Coefficient for a^10 in dynamic threshold polynomial T\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"K11\": {\n      \"description\": \"Coefficient for a^11 in dynamic threshold polynomial T\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"K12\": {\n      \"description\": \"Coefficient for a^12 in dynamic threshold polynomial T\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"T\": {\n      \"description\": \"Dynamic threshold computed as a polynomial in a up to the 12th power\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"extra\": {\n      \"description\": \"Extra composite term that dampens extreme values through multiple composite factors\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"Exponent\": {\n      \"description\": \"Final exponent modulating the transformed signal with additional sine\\u2013cosine modulation\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f\": {\n      \"description\": \"Final transformed signal after applying adaptive transformation, threshold, extra term, and exponentiation\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Baseline utility parameter\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Scaling parameter multiplying the transformed signal\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed as baseline plus scaled transformed signal\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"P_accept\": {\n      \"description\": \"Probability of acceptance computed via logistic transformation of latent utility\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"delta_shift\": {\n      \"description\": \"Small constant shift for negative branch in adaptive transformation (\\u0394_shift)\",\n      \"range\": {\n        \"min\": 1e-09,\n        \"max\": 0.001,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, phi=1.0, beta=0.0, gamma=1.0):\n    model_predictions = []\n    for trial in trial_data:\n        # Extract fixed components from trial data\n        F1 = trial.get(\"F1\", 0.0)\n        F2 = trial.get(\"F2\", 0.0)\n        F3 = trial.get(\"F3\", 0.0)\n        F4 = trial.get(\"F4\", 0.0)\n        F5 = trial.get(\"F5\", 0.0)\n        F6 = trial.get(\"F6\", 0.0)\n        F7 = trial.get(\"F7\", 0.0)\n        F8 = trial.get(\"F8\", 0.0)\n        F9 = trial.get(\"F9\", 0.0)\n        F10 = trial.get(\"F10\", 0.0)\n        F11 = trial.get(\"F11\", 0.0)\n\n        # Define constants\n        delta = 1e-06\n\n        # Calculate a\n        a = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + delta\n\n        # Calculate a_mod\n        a_mod = 1.08 * a * (1 + 0.012 * math.sin(a + 0.045))\n\n        # Calculate z\n        z = a_mod * (1 + 0.008 * math.cos(a + 0.065)) * (1 + 0.005 * math.sin(a + 0.115)) * (1 + 0.004 * math.cos(a + 0.085)) * (1 + 0.006 * (math.sin(a + 0.035) * math.cos(a + 0.055))) * (1 + 0.003 * (math.sin(a + 0.03) * math.cos(a + 0.05)))\n\n        # Calculate w\n        w = (phi - 0.5) / phi\n\n        # Calculate f_adapt\n        if z >= 0:\n            f_adapt_val = 1.002 * (z**w * (math.log(1+z) if (1+z) > 0 else 0)**(1-w)) * (z/(1+abs(z)))\n            f_adapt = max(min(f_adapt_val, 100), -100)\n        else:\n            f_adapt = phi * ( ((z + 1e-6)/(1+abs(z+1e-6)))**8 )\n\n        # Define K coefficients (assuming they are 0 for simplicity, as not provided in data)\n        K0 = 0.0\n        K1 = 0.0\n        K2 = 0.0\n        K3 = 0.0\n        K4 = 0.0\n        K5 = 0.0\n        K6 = 0.0\n        K7 = 0.0\n        K8 = 0.0\n        K9 = 0.0\n        K10 = 0.0\n        K11 = 0.0\n        K12 = 0.0\n\n        # Calculate T\n        T = K0 + K1*a + K2*(a**2) + K3*(a**3) + K4*(a**4) + K5*(a**5) + K6*(a**6) + K7*(a**7) + K8*(a**8) + K9*(a**9) + K10*(a**10) + K11*(a**11) + K12*(a**12)\n\n        # Calculate extra\n        softplus_val = math.log(1 + math.exp(0.865/(1+a))) if 0.865/(1+a) < 100 else 0.865/(1+a) # avoid overflow\n        extra_base = math.exp(-a/0.1) * (z/(1+abs(z))) * (1 + 0.005*math.sin(1/(1+a))) * (1 + 0.002*math.cos(0.5*a)) * (1+0.003*math.cos(0.3*a))**2 * (1+0.004*math.cos(0.3*a))**2 * (1+0.0025*math.cos(0.7*a)) * (1+math.tanh(0.05*a)) * (1+(1 / (1 + math.exp(-0.01*a)))) * (1.07*softplus_val + 0.15*(0.865/(1+a)) + 0.5*(0.865/(1+a)) + 0.006*a) * (1 - 0.002*math.cos(a)) * (1 - 0.0025*math.cos(2.5*a)) * (1+0.001*a) * (1+math.cosh(0.001*a))**(2+0.0005*a) + 1e-6\n        extra = extra_base**(0.9478+0.00018*(math.log(1+a))) * (1+math.tanh(0.05*a))\n\n\n        # Calculate Exponent\n        Exponent = (0.9478+0.00018*(math.log(1+a))) * (1 + 0.003*math.sin(2*a) + 0.001*math.cos(3*a) + 0.0025*math.cos(0.7*a) + 0.004*math.sin(2.5*a) + 0.002*math.cos(3.5*a) + 0.001*math.sin(2.5*a)*math.cos(3*a))\n\n        # Calculate f\n        f = (1 if z >=0 else -1) * ( ( f_adapt * T * extra )**Exponent )\n\n        # Calculate U\n        U = beta + gamma * f\n\n        # Calculate P_accept\n        try:\n            P_accept = 1 / (1 + math.exp(-U))\n        except OverflowError:\n            P_accept = 0.0 if U > 0 else 1.0\n\n        model_predictions.append(P_accept)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '[{\"ID\": 1, \"group\": \"control\", \"trial_number\": 1, \"trial_type\": 2, \"trial_role\": 1, \"token_opp\": 12, \"token_self\": 12, \"combined_earning\": 24, \"split_opp\": 0.33, \"split_self\": 0.67, \"splitperc_opp\": 33, \"splitperc_self\": 67, \"accept\": 1.0, \"accepted_amount\": 8.0, \"accepted_perc\": 33.0, \"proposed_perc\": 33.0, \"proposed_amount\": 8.0}, {\"ID\": 2, \"group\": \"control\", \"trial_number\": 2, \"trial_type\": 2, \"trial_role\": 1, \"token_opp\": 12, \"token_self\": 12, \"combined_earning\": 24, \"split_opp\": 0.42, \"split_self\": 0.58, \"splitperc_opp\": 42, \"splitperc_self\": 58, \"accept\": 1.0, \"accepted_amount\": 10.0, \"accepted_perc\": 42.0, \"proposed_perc\": 42.0, \"proposed_amount\": 10.0}]'\ndata = json.loads(data_json)\n\n# Add F1 to F11 (replace with actual values, using dummy values for now)\nfor i, trial in enumerate(data):\n    data[i]['F1'] = 0.1\n    data[i]['F2'] = 0.2\n    data[i]['F3'] = 0.3\n    data[i]['F4'] = 0.4\n    data[i]['F5'] = 0.5\n    data[i]['F6'] = 0.6\n    data[i]['F7'] = 0.7\n    data[i]['F8'] = 0.8\n    data[i]['F9'] = 0.9\n    data[i]['F10'] = 1.0\n    data[i]['F11'] = 1.1\n\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n```",
      "timestamp": 1743546860.961759
    }
  ],
  "learnable_parameters": {
    "phi": {
      "description": "Learnable parameter controlling the adaptive transformation weight",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta": {
      "description": "Baseline utility parameter",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Scaling parameter multiplying the transformed signal",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "a = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + delta\na_mod = 1.08 * a * (1 + 0.012 * sin(a + 0.045))\nz = a_mod * (1 + 0.008 * cos(a + 0.065)) * (1 + 0.005 * sin(a + 0.115)) * (1 + 0.004 * cos(a + 0.085)) * (1 + 0.006 * (sin(a + 0.035) * cos(a + 0.055))) * (1 + 0.003 * (sin(a + 0.03) * cos(a + 0.05)))\nw = (phi - 0.5) / phi\nf_adapt = {if z >= 0 then clip[1.002 * (z^w * (ln(1+z))^(1-w)) * (z/(1+abs(z))), -100, 100] else phi * ( ( (z + 1e-6)/(1+abs(z+1e-6)) )^8 )}\nT = K0 + K1*a + K2*a^2 + K3*a^3 + K4*a^4 + K5*a^5 + K6*a^6 + K7*a^7 + K8*a^8 + K9*a^9 + K10*a^10 + K11*a^11 + K12*a^12\nextra = { exp(-a/0.1) * (z/(1+abs(z))) * (1 + 0.005*sin(1/(1+a))) * (1 + 0.002*cos(0.5*a)) * (1+0.003*cos(0.3*a))^2 * (1+0.004*cos(0.3*a))^2 * (1+0.0025*cos(0.7*a)) * (1+tanh(0.05*a)) * (1+sigmoid(0.01*a)) * (1.07*softplus(0.865/(1+a)) + 0.15*(0.865/(1+a)) + 0.5*(0.865/(1+a)) + 0.006*a) * (1 - 0.002*cos(a)) * (1 - 0.0025*cos(2.5*a)) * (1+0.001*a) * (1+cosh(0.001*a))^(2+0.0005*a) + 1e-6 }^(0.9478+0.00018*ln(1+a)) * (1+tanh(0.05*a))\nExponent = (0.9478+0.00018*ln(1+a)) * (1 + 0.003*sin(2*a) + 0.001*cos(3*a) + 0.0025*cos(0.7*a) + 0.004*sin(2.5*a) + 0.002*cos(3.5*a) + 0.001*sin(2.5*a)*cos(3*a))\nf = sign(z) * ( ( f_adapt * T * extra )^Exponent )\nU = beta + gamma * f\nP_accept = 1 / (1 + exp(-U))",
  "variable_descriptions": {
    "F1": {
      "description": "Fixed component 1 extracted from task-specific data",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "empirical",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "F2": {
      "description": "Fixed component 2 extracted from task-specific data",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "empirical",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "F3": {
      "description": "Fixed component 3 extracted from task-specific data",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "empirical",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "F4": {
      "description": "Fixed component 4 extracted from task-specific data",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "empirical",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "F5": {
      "description": "Fixed component 5 extracted from task-specific data",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "empirical",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "F6": {
      "description": "Fixed component 6 extracted from task-specific data",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "empirical",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "F7": {
      "description": "Fixed component 7 extracted from task-specific data",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "empirical",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "F8": {
      "description": "Fixed component 8 extracted from task-specific data",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "empirical",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "F9": {
      "description": "Fixed component 9 extracted from task-specific data",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "empirical",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "F10": {
      "description": "Fixed component 10 extracted from task-specific data",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "empirical",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "F11": {
      "description": "Fixed component 11 extracted from task-specific data",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "empirical",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "delta": {
      "description": "Small constant offset added to the core sum",
      "range": {
        "min": 1e-09,
        "max": 0.001,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "constant",
        "parameters": {
          "value": 1e-06
        }
      },
      "learnable": false,
      "source": "calculated"
    },
    "a": {
      "description": "Core sum of fixed components and delta",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "a_mod": {
      "description": "Modulated core sum with sinusoidal adjustment",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "z": {
      "description": "Sequentially modulated signal after applying multiple cosine and sine factors",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "phi": {
      "description": "Learnable parameter controlling the adaptive transformation weight",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "w": {
      "description": "Weight computed from phi for transformation balance",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "f_adapt": {
      "description": "Adaptive transformation of z with explicit clipping for positive values and exponentiation for negative branch",
      "range": {
        "min": -100,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "K0": {
      "description": "Coefficient for a^0 in dynamic threshold polynomial T",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "K1": {
      "description": "Coefficient for a^1 in dynamic threshold polynomial T",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "K2": {
      "description": "Coefficient for a^2 in dynamic threshold polynomial T",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "K3": {
      "description": "Coefficient for a^3 in dynamic threshold polynomial T",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "K4": {
      "description": "Coefficient for a^4 in dynamic threshold polynomial T",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "K5": {
      "description": "Coefficient for a^5 in dynamic threshold polynomial T",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "K6": {
      "description": "Coefficient for a^6 in dynamic threshold polynomial T",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "K7": {
      "description": "Coefficient for a^7 in dynamic threshold polynomial T",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "K8": {
      "description": "Coefficient for a^8 in dynamic threshold polynomial T",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "K9": {
      "description": "Coefficient for a^9 in dynamic threshold polynomial T",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "K10": {
      "description": "Coefficient for a^10 in dynamic threshold polynomial T",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "K11": {
      "description": "Coefficient for a^11 in dynamic threshold polynomial T",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "K12": {
      "description": "Coefficient for a^12 in dynamic threshold polynomial T",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "T": {
      "description": "Dynamic threshold computed as a polynomial in a up to the 12th power",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "extra": {
      "description": "Extra composite term that dampens extreme values through multiple composite factors",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "Exponent": {
      "description": "Final exponent modulating the transformed signal with additional sine\u2013cosine modulation",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "f": {
      "description": "Final transformed signal after applying adaptive transformation, threshold, extra term, and exponentiation",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "beta": {
      "description": "Baseline utility parameter",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Scaling parameter multiplying the transformed signal",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "U": {
      "description": "Latent utility computed as baseline plus scaled transformed signal",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "P_accept": {
      "description": "Probability of acceptance computed via logistic transformation of latent utility",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "delta_shift": {
      "description": "Small constant shift for negative branch in adaptive transformation (\u0394_shift)",
      "range": {
        "min": 1e-09,
        "max": 0.001,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "A nonlinear utility model for binary acceptance that computes a core signal from eleven fixed data\u2010derived components, applies extensive sinusoidal and polynomial modulations, and performs an adaptive transformation with separate treatments for positive and negative signals. The final transformed value is scaled by two learnable parameters and offset by a baseline parameter to generate latent utility, which is mapped via a logistic function to predict responder accept/reject decisions.",
  "target_variable": "accept",
  "full_reasoning": "<MODEL>\na = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + delta\na_mod = 1.08 * a * (1 + 0.012 * sin(a + 0.045))\nz = a_mod * (1 + 0.008 * cos(a + 0.065)) * (1 + 0.005 * sin(a + 0.115)) * (1 + 0.004 * cos(a + 0.085)) * (1 + 0.006 * (sin(a + 0.035) * cos(a + 0.055))) * (1 + 0.003 * (sin(a + 0.03) * cos(a + 0.05)))\nw = (phi - 0.5) / phi\nf_adapt = {if z >= 0 then clip[1.002 * (z^w * (ln(1+z))^(1-w)) * (z/(1+abs(z))), -100, 100] else phi * ( ( (z + 1e-6)/(1+abs(z+1e-6)) )^8 )}\nT = K0 + K1*a + K2*a^2 + K3*a^3 + K4*a^4 + K5*a^5 + K6*a^6 + K7*a^7 + K8*a^8 + K9*a^9 + K10*a^10 + K11*a^11 + K12*a^12\nextra = { exp(-a/0.1) * (z/(1+abs(z))) * (1 + 0.005*sin(1/(1+a))) * (1 + 0.002*cos(0.5*a)) * (1+0.003*cos(0.3*a))^2 * (1+0.004*cos(0.3*a))^2 * (1+0.0025*cos(0.7*a)) * (1+tanh(0.05*a)) * (1+sigmoid(0.01*a)) * (1.07*softplus(0.865/(1+a)) + 0.15*(0.865/(1+a)) + 0.5*(0.865/(1+a)) + 0.006*a) * (1 - 0.002*cos(a)) * (1 - 0.0025*cos(2.5*a)) * (1+0.001*a) * (1+cosh(0.001*a))^(2+0.0005*a) + 1e-6 }^(0.9478+0.00018*ln(1+a)) * (1+tanh(0.05*a))\nExponent = (0.9478+0.00018*ln(1+a)) * (1 + 0.003*sin(2*a) + 0.001*cos(3*a) + 0.0025*cos(0.7*a) + 0.004*sin(2.5*a) + 0.002*cos(3.5*a) + 0.001*sin(2.5*a)*cos(3*a))\nf = sign(z) * ( ( f_adapt * T * extra )^Exponent )\nU = beta + gamma * f\nP_accept = 1 / (1 + exp(-U))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"F1\": {\n      \"description\": \"Fixed component 1 extracted from task-specific data\",\n      \"range\": {\"min\": \"-inf\", \"max\": \"inf\", \"inclusive_min\": true, \"inclusive_max\": true},\n      \"distribution\": {\"type\": \"empirical\", \"parameters\": {}},\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F2\": {\n      \"description\": \"Fixed component 2 extracted from task-specific data\",\n      \"range\": {\"min\": \"-inf\", \"max\": \"inf\", \"inclusive_min\": true, \"inclusive_max\": true},\n      \"distribution\": {\"type\": \"empirical\", \"parameters\": {}},\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F3\": {\n      \"description\": \"Fixed component 3 extracted from task-specific data\",\n      \"range\": {\"min\": \"-inf\", \"max\": \"inf\", \"inclusive_min\": true, \"inclusive_max\": true},\n      \"distribution\": {\"type\": \"empirical\", \"parameters\": {}},\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F4\": {\n      \"description\": \"Fixed component 4 extracted from task-specific data\",\n      \"range\": {\"min\": \"-inf\", \"max\": \"inf\", \"inclusive_min\": true, \"inclusive_max\": true},\n      \"distribution\": {\"type\": \"empirical\", \"parameters\": {}},\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F5\": {\n      \"description\": \"Fixed component 5 extracted from task-specific data\",\n      \"range\": {\"min\": \"-inf\", \"max\": \"inf\", \"inclusive_min\": true, \"inclusive_max\": true},\n      \"distribution\": {\"type\": \"empirical\", \"parameters\": {}},\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F6\": {\n      \"description\": \"Fixed component 6 extracted from task-specific data\",\n      \"range\": {\"min\": \"-inf\", \"max\": \"inf\", \"inclusive_min\": true, \"inclusive_max\": true},\n      \"distribution\": {\"type\": \"empirical\", \"parameters\": {}},\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F7\": {\n      \"description\": \"Fixed component 7 extracted from task-specific data\",\n      \"range\": {\"min\": \"-inf\", \"max\": \"inf\", \"inclusive_min\": true, \"inclusive_max\": true},\n      \"distribution\": {\"type\": \"empirical\", \"parameters\": {}},\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F8\": {\n      \"description\": \"Fixed component 8 extracted from task-specific data\",\n      \"range\": {\"min\": \"-inf\", \"max\": \"inf\", \"inclusive_min\": true, \"inclusive_max\": true},\n      \"distribution\": {\"type\": \"empirical\", \"parameters\": {}},\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F9\": {\n      \"description\": \"Fixed component 9 extracted from task-specific data\",\n      \"range\": {\"min\": \"-inf\", \"max\": \"inf\", \"inclusive_min\": true, \"inclusive_max\": true},\n      \"distribution\": {\"type\": \"empirical\", \"parameters\": {}},\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F10\": {\n      \"description\": \"Fixed component 10 extracted from task-specific data\",\n      \"range\": {\"min\": \"-inf\", \"max\": \"inf\", \"inclusive_min\": true, \"inclusive_max\": true},\n      \"distribution\": {\"type\": \"empirical\", \"parameters\": {}},\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F11\": {\n      \"description\": \"Fixed component 11 extracted from task-specific data\",\n      \"range\": {\"min\": \"-inf\", \"max\": \"inf\", \"inclusive_min\": true, \"inclusive_max\": true},\n      \"distribution\": {\"type\": \"empirical\", \"parameters\": {}},\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"delta\": {\n      \"description\": \"Small constant offset added to the core sum\",\n      \"range\": {\"min\": 1e-9, \"max\": 1e-3, \"inclusive_min\": true, \"inclusive_max\": true},\n      \"distribution\": {\"type\": \"constant\", \"parameters\": {\"value\": 1e-6}},\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a\": {\n      \"description\": \"Core sum of fixed components and delta\",\n      \"range\": {\"min\": \"-inf\", \"max\": \"inf\", \"inclusive_min\": true, \"inclusive_max\": true},\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a_mod\": {\n      \"description\": \"Modulated core sum with sinusoidal adjustment\",\n      \"range\": {\"min\": \"-inf\", \"max\": \"inf\", \"inclusive_min\": true, \"inclusive_max\": true},\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"z\": {\n      \"description\": \"Sequentially modulated signal after applying multiple cosine and sine factors\",\n      \"range\": {\"min\": \"-inf\", \"max\": \"inf\", \"inclusive_min\": true, \"inclusive_max\": true},\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"phi\": {\n      \"description\": \"Learnable parameter controlling the adaptive transformation weight\",\n      \"range\": {\"min\": 0.5, \"max\": 1.5, \"inclusive_min\": true, \"inclusive_max\": true},\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"w\": {\n      \"description\": \"Weight computed from phi for transformation balance\",\n      \"range\": {\"min\": \"-inf\", \"max\": \"inf\", \"inclusive_min\": true, \"inclusive_max\": true},\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_adapt\": {\n      \"description\": \"Adaptive transformation of z with explicit clipping for positive values and exponentiation for negative branch\",\n      \"range\": {\"min\": -100, \"max\": 100, \"inclusive_min\": true, \"inclusive_max\": true},\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"K0\": {\n      \"description\": \"Coefficient for a^0 in dynamic threshold polynomial T\",\n      \"range\": {\"min\": \"-inf\", \"max\": \"inf\", \"inclusive_min\": true, \"inclusive_max\": true},\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"K1\": {\n      \"description\": \"Coefficient for a^1 in dynamic threshold polynomial T\",\n      \"range\": {\"min\": \"-inf\", \"max\": \"inf\", \"inclusive_min\": true, \"inclusive_max\": true},\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"K2\": {\n      \"description\": \"Coefficient for a^2 in dynamic threshold polynomial T\",\n      \"range\": {\"min\": \"-inf\", \"max\": \"inf\", \"inclusive_min\": true, \"inclusive_max\": true},\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"K3\": {\n      \"description\": \"Coefficient for a^3 in dynamic threshold polynomial T\",\n      \"range\": {\"min\": \"-inf\", \"max\": \"inf\", \"inclusive_min\": true, \"inclusive_max\": true},\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"K4\": {\n      \"description\": \"Coefficient for a^4 in dynamic threshold polynomial T\",\n      \"range\": {\"min\": \"-inf\", \"max\": \"inf\", \"inclusive_min\": true, \"inclusive_max\": true},\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"K5\": {\n      \"description\": \"Coefficient for a^5 in dynamic threshold polynomial T\",\n      \"range\": {\"min\": \"-inf\", \"max\": \"inf\", \"inclusive_min\": true, \"inclusive_max\": true},\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"K6\": {\n      \"description\": \"Coefficient for a^6 in dynamic threshold polynomial T\",\n      \"range\": {\"min\": \"-inf\", \"max\": \"inf\", \"inclusive_min\": true, \"inclusive_max\": true},\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"K7\": {\n      \"description\": \"Coefficient for a^7 in dynamic threshold polynomial T\",\n      \"range\": {\"min\": \"-inf\", \"max\": \"inf\", \"inclusive_min\": true, \"inclusive_max\": true},\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"K8\": {\n      \"description\": \"Coefficient for a^8 in dynamic threshold polynomial T\",\n      \"range\": {\"min\": \"-inf\", \"max\": \"inf\", \"inclusive_min\": true, \"inclusive_max\": true},\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"K9\": {\n      \"description\": \"Coefficient for a^9 in dynamic threshold polynomial T\",\n      \"range\": {\"min\": \"-inf\", \"max\": \"inf\", \"inclusive_min\": true, \"inclusive_max\": true},\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"K10\": {\n      \"description\": \"Coefficient for a^10 in dynamic threshold polynomial T\",\n      \"range\": {\"min\": \"-inf\", \"max\": \"inf\", \"inclusive_min\": true, \"inclusive_max\": true},\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"K11\": {\n      \"description\": \"Coefficient for a^11 in dynamic threshold polynomial T\",\n      \"range\": {\"min\": \"-inf\", \"max\": \"inf\", \"inclusive_min\": true, \"inclusive_max\": true},\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"K12\": {\n      \"description\": \"Coefficient for a^12 in dynamic threshold polynomial T\",\n      \"range\": {\"min\": \"-inf\", \"max\": \"inf\", \"inclusive_min\": true, \"inclusive_max\": true},\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"T\": {\n      \"description\": \"Dynamic threshold computed as a polynomial in a up to the 12th power\",\n      \"range\": {\"min\": \"-inf\", \"max\": \"inf\", \"inclusive_min\": true, \"inclusive_max\": true},\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"extra\": {\n      \"description\": \"Extra composite term that dampens extreme values through multiple composite factors\",\n      \"range\": {\"min\": \"-inf\", \"max\": \"inf\", \"inclusive_min\": true, \"inclusive_max\": true},\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"Exponent\": {\n      \"description\": \"Final exponent modulating the transformed signal with additional sine\u2013cosine modulation\",\n      \"range\": {\"min\": \"-inf\", \"max\": \"inf\", \"inclusive_min\": true, \"inclusive_max\": true},\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f\": {\n      \"description\": \"Final transformed signal after applying adaptive transformation, threshold, extra term, and exponentiation\",\n      \"range\": {\"min\": \"-inf\", \"max\": \"inf\", \"inclusive_min\": true, \"inclusive_max\": true},\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Baseline utility parameter\",\n      \"range\": {\"min\": -10, \"max\": 10, \"inclusive_min\": true, \"inclusive_max\": true},\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Scaling parameter multiplying the transformed signal\",\n      \"range\": {\"min\": 0, \"max\": 10, \"inclusive_min\": true, \"inclusive_max\": true},\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed as baseline plus scaled transformed signal\",\n      \"range\": {\"min\": \"-inf\", \"max\": \"inf\", \"inclusive_min\": true, \"inclusive_max\": true},\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"P_accept\": {\n      \"description\": \"Probability of acceptance computed via logistic transformation of latent utility\",\n      \"range\": {\"min\": 0, \"max\": 1, \"inclusive_min\": true, \"inclusive_max\": true},\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"delta_shift\": {\n      \"description\": \"Small constant shift for negative branch in adaptive transformation (\u0394_shift)\",\n      \"range\": {\"min\": 1e-9, \"max\": 1e-3, \"inclusive_min\": true, \"inclusive_max\": true},\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA nonlinear utility model for binary acceptance that computes a core signal from eleven fixed data\u2010derived components, applies extensive sinusoidal and polynomial modulations, and performs an adaptive transformation with separate treatments for positive and negative signals. The final transformed value is scaled by two learnable parameters and offset by a baseline parameter to generate latent utility, which is mapped via a logistic function to predict responder accept/reject decisions.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: a = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + delta\na_mod = 1.08 * a * (1 + 0.012 * sin(a + 0.045))\nz = a_mod * (1 + 0.008 * cos(a + 0.065)) * (1 + 0.005 * sin(a + 0.115)) * (1 + 0.004 * cos(a + 0.085)) * (1 + 0.006 * (sin(a + 0.035) * cos(a + 0.055))) * (1 + 0.003 * (sin(a + 0.03) * cos(a + 0.05)))\nw = (phi - 0.5) / phi\nf_adapt = {if z >= 0 then clip[1.002 * (z^w * (ln(1+z))^(1-w)) * (z/(1+abs(z))), -100, 100] else phi * ( ( (z + 1e-6)/(1+abs(z+1e-6)) )^8 )}\nT = K0 + K1*a + K2*a^2 + K3*a^3 + K4*a^4 + K5*a^5 + K6*a^6 + K7*a^7 + K8*a^8 + K9*a^9 + K10*a^10 + K11*a^11 + K12*a^12\nextra = { exp(-a/0.1) * (z/(1+abs(z))) * (1 + 0.005*sin(1/(1+a))) * (1 + 0.002*cos(0.5*a)) * (1+0.003*cos(0.3*a))^2 * (1+0.004*cos(0.3*a))^2 * (1+0.0025*cos(0.7*a)) * (1+tanh(0.05*a)) * (1+sigmoid(0.01*a)) * (1.07*softplus(0.865/(1+a)) + 0.15*(0.865/(1+a)) + 0.5*(0.865/(1+a)) + 0.006*a) * (1 - 0.002*cos(a)) * (1 - 0.0025*cos(2.5*a)) * (1+0.001*a) * (1+cosh(0.001*a))^(2+0.0005*a) + 1e-6 }^(0.9478+0.00018*ln(1+a)) * (1+tanh(0.05*a))\nExponent = (0.9478+0.00018*ln(1+a)) * (1 + 0.003*sin(2*a) + 0.001*cos(3*a) + 0.0025*cos(0.7*a) + 0.004*sin(2.5*a) + 0.002*cos(3.5*a) + 0.001*sin(2.5*a)*cos(3*a))\nf = sign(z) * ( ( f_adapt * T * extra )^Exponent )\nU = beta + gamma * f\nP_accept = 1 / (1 + exp(-U))\nSummary: A nonlinear utility model for binary acceptance that computes a core signal from eleven fixed data\u2010derived components, applies extensive sinusoidal and polynomial modulations, and performs an adaptive transformation with separate treatments for positive and negative signals. The final transformed value is scaled by two learnable parameters and offset by a baseline parameter to generate latent utility, which is mapped via a logistic function to predict responder accept/reject decisions.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, phi=1.0, beta=0.0, gamma=1.0):\n    model_predictions = []\n    for trial in trial_data:\n        # Extract fixed components from trial data\n        F1 = trial.get(\"F1\", 0.0)\n        F2 = trial.get(\"F2\", 0.0)\n        F3 = trial.get(\"F3\", 0.0)\n        F4 = trial.get(\"F4\", 0.0)\n        F5 = trial.get(\"F5\", 0.0)\n        F6 = trial.get(\"F6\", 0.0)\n        F7 = trial.get(\"F7\", 0.0)\n        F8 = trial.get(\"F8\", 0.0)\n        F9 = trial.get(\"F9\", 0.0)\n        F10 = trial.get(\"F10\", 0.0)\n        F11 = trial.get(\"F11\", 0.0)\n\n        # Define constants\n        delta = 1e-06\n\n        # Calculate a\n        a = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + delta\n\n        # Calculate a_mod\n        a_mod = 1.08 * a * (1 + 0.012 * math.sin(a + 0.045))\n\n        # Calculate z\n        z = a_mod * (1 + 0.008 * math.cos(a + 0.065)) * (1 + 0.005 * math.sin(a + 0.115)) * (1 + 0.004 * math.cos(a + 0.085)) * (1 + 0.006 * (math.sin(a + 0.035) * math.cos(a + 0.055))) * (1 + 0.003 * (math.sin(a + 0.03) * math.cos(a + 0.05)))\n\n        # Calculate w\n        w = (phi - 0.5) / phi\n\n        # Calculate f_adapt\n        if z >= 0:\n            f_adapt_val = 1.002 * (z**w * (math.log(1+z) if (1+z) > 0 else 0)**(1-w)) * (z/(1+abs(z)))\n            f_adapt = max(min(f_adapt_val, 100), -100)\n        else:\n            f_adapt = phi * ( ((z + 1e-6)/(1+abs(z+1e-6)))**8 )\n\n        # Define K coefficients (assuming they are 0 for simplicity, as not provided in data)\n        K0 = 0.0\n        K1 = 0.0\n        K2 = 0.0\n        K3 = 0.0\n        K4 = 0.0\n        K5 = 0.0\n        K6 = 0.0\n        K7 = 0.0\n        K8 = 0.0\n        K9 = 0.0\n        K10 = 0.0\n        K11 = 0.0\n        K12 = 0.0\n\n        # Calculate T\n        T = K0 + K1*a + K2*(a**2) + K3*(a**3) + K4*(a**4) + K5*(a**5) + K6*(a**6) + K7*(a**7) + K8*(a**8) + K9*(a**9) + K10*(a**10) + K11*(a**11) + K12*(a**12)\n\n        # Calculate extra\n        softplus_val = math.log(1 + math.exp(0.865/(1+a))) if 0.865/(1+a) < 100 else 0.865/(1+a) # avoid overflow\n        extra_base = math.exp(-a/0.1) * (z/(1+abs(z))) * (1 + 0.005*math.sin(1/(1+a))) * (1 + 0.002*math.cos(0.5*a)) * (1+0.003*math.cos(0.3*a))**2 * (1+0.004*math.cos(0.3*a))**2 * (1+0.0025*math.cos(0.7*a)) * (1+math.tanh(0.05*a)) * (1+(1 / (1 + math.exp(-0.01*a)))) * (1.07*softplus_val + 0.15*(0.865/(1+a)) + 0.5*(0.865/(1+a)) + 0.006*a) * (1 - 0.002*math.cos(a)) * (1 - 0.0025*math.cos(2.5*a)) * (1+0.001*a) * (1+math.cosh(0.001*a))**(2+0.0005*a) + 1e-6\n        extra = extra_base**(0.9478+0.00018*(math.log(1+a))) * (1+math.tanh(0.05*a))\n\n\n        # Calculate Exponent\n        Exponent = (0.9478+0.00018*(math.log(1+a))) * (1 + 0.003*math.sin(2*a) + 0.001*math.cos(3*a) + 0.0025*math.cos(0.7*a) + 0.004*math.sin(2.5*a) + 0.002*math.cos(3.5*a) + 0.001*math.sin(2.5*a)*math.cos(3*a))\n\n        # Calculate f\n        f = (1 if z >=0 else -1) * ( ( f_adapt * T * extra )**Exponent )\n\n        # Calculate U\n        U = beta + gamma * f\n\n        # Calculate P_accept\n        try:\n            P_accept = 1 / (1 + math.exp(-U))\n        except OverflowError:\n            P_accept = 0.0 if U > 0 else 1.0\n\n        model_predictions.append(P_accept)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.5714285714285714,
  "fitting_results": [
    {
      "phi": 1.20009479537024,
      "beta": -10.0,
      "gamma": 0.2455098736450434,
      "success": true,
      "log_likelihood": -24.953979470262787,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.6904915310823405,
      "beta": -9.1917205674361,
      "gamma": 6.739738656496791,
      "success": true,
      "log_likelihood": -24.953298539655894,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.4128607600278191,
      "beta": -2.0782909911509675,
      "gamma": 7.457933940804303,
      "success": true,
      "log_likelihood": -24.897714324105078,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5078522562293611,
      "beta": -10.0,
      "gamma": 8.68491722434665,
      "success": true,
      "log_likelihood": -24.953434695838467,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.3494743333351287,
      "beta": -10.0,
      "gamma": 7.943733769817301,
      "success": true,
      "log_likelihood": -24.953389297969775,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.0804052107114288,
      "beta": 0.28407535068853934,
      "gamma": 7.174817066638023,
      "success": true,
      "log_likelihood": -23.545973163849723,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.2736398561599722,
      "beta": 10.0,
      "gamma": 5.4910839267668745,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.8255777228823785,
      "beta": 0.8148754996468959,
      "gamma": 5.836917752031493,
      "success": true,
      "log_likelihood": -22.914510051413586,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.2071078454003334,
      "beta": 10.0,
      "gamma": 2.0941426059486967,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.0242765076045206,
      "beta": -10.0,
      "gamma": 5.296487439203719,
      "success": true,
      "log_likelihood": -24.95348009370716,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.9498895903378386,
      "beta": -10.0,
      "gamma": 2.825235806878341,
      "success": true,
      "log_likelihood": -24.95338929796977,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.7811160563490713,
      "beta": -10.0,
      "gamma": 4.510924940824194,
      "success": true,
      "log_likelihood": -24.953934072394095,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5769315883134944,
      "beta": -10.0,
      "gamma": 1.718588033913968,
      "success": true,
      "log_likelihood": -24.953434695838467,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.300173492424854,
      "beta": 10.0,
      "gamma": 7.980665636715272,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.2518699630376848,
      "beta": 10.0,
      "gamma": 6.946621982550155,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.7038482057711368,
      "beta": 10.0,
      "gamma": 6.039723865462739,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.9607357031953512,
      "beta": 10.0,
      "gamma": 4.832941305291838,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.1180891616510207,
      "beta": 10.0,
      "gamma": 3.706618353566956,
      "success": true,
      "log_likelihood": -16.27763329973089,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.9695021279519691,
      "beta": 10.0,
      "gamma": 8.620232884217911,
      "success": true,
      "log_likelihood": -15.27767869783462,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.8234113993920831,
      "beta": 10.0,
      "gamma": 3.5250314692542717,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.1007569831015274,
      "beta": -1.2473923651002787,
      "gamma": 4.049478193374152,
      "success": true,
      "log_likelihood": -24.730616750610412,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5971915484758958,
      "beta": 10.0,
      "gamma": 1.0406594586306872,
      "success": true,
      "log_likelihood": -16.27763329973089,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.8236537390558526,
      "beta": -10.0,
      "gamma": 8.048299781762529,
      "success": true,
      "log_likelihood": -24.95352549157585,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.6217472614227099,
      "beta": -2.0782632076014953,
      "gamma": 1.0012761769694067,
      "success": true,
      "log_likelihood": -24.897714324118265,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.0112265668151394,
      "beta": -8.874424194371748,
      "gamma": 9.178738613039185,
      "success": true,
      "log_likelihood": -24.95329858103535,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.8839548246828867,
      "beta": -0.6790829423372974,
      "gamma": 5.798117597275725,
      "success": true,
      "log_likelihood": -24.450957568664478,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5131201489274874,
      "beta": -1.2473671252672853,
      "gamma": 0.34403900525854847,
      "success": true,
      "log_likelihood": -24.730616751018616,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.1550962117828592,
      "beta": -10.0,
      "gamma": 7.000049910840476,
      "success": true,
      "log_likelihood": -24.953661685181935,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.4907103961271884,
      "beta": 10.0,
      "gamma": 2.4855206913269177,
      "success": true,
      "log_likelihood": -15.27767869783462,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.298208210915559,
      "beta": 10.0,
      "gamma": 6.753185025712755,
      "success": true,
      "log_likelihood": -19.2774971054197,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.9094965500211528,
      "beta": 10.0,
      "gamma": 5.50329747187396,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5902044732825364,
      "beta": -10.0,
      "gamma": 8.179514067557141,
      "success": true,
      "log_likelihood": -24.953979470262787,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.4644598288984771,
      "beta": -10.0,
      "gamma": 8.840608103693782,
      "success": true,
      "log_likelihood": -24.953434695838464,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.225417357595295,
      "beta": -10.0,
      "gamma": 9.144994400534527,
      "success": true,
      "log_likelihood": -24.953480093707164,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.4465919787450465,
      "beta": 10.0,
      "gamma": 5.521644480030949,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.8539220409569146,
      "beta": 0.28415313553630017,
      "gamma": 7.524591230290058,
      "success": true,
      "log_likelihood": -23.545973165391032,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.393462309171749,
      "beta": 1.5229991310068942,
      "gamma": 4.877920283348277,
      "success": true,
      "log_likelihood": -22.157938154735678,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.2488020234627204,
      "beta": -10.0,
      "gamma": 1.3413700391341632,
      "success": true,
      "log_likelihood": -24.953298502232386,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.1470227113154086,
      "beta": 0.8145434256386973,
      "gamma": 3.721320155975494,
      "success": true,
      "log_likelihood": -22.914510071207626,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.0599649653469054,
      "beta": 10.0,
      "gamma": 2.8333974112049933,
      "success": true,
      "log_likelihood": -14.277724095938346,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.630260581486587,
      "beta": -0.1927151375773659,
      "gamma": 4.827311215981701,
      "success": true,
      "log_likelihood": -24.056945189731348,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.2684453113155527,
      "beta": -10.0,
      "gamma": 5.369875087492485,
      "success": true,
      "log_likelihood": -24.95375248091932,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3333333333333333,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.1847191741938539,
      "beta": 9.999999999999998,
      "gamma": 9.157371757170193,
      "success": true,
      "log_likelihood": -12.277814892145805,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.3956925670938183,
      "beta": -1.2474671005913134,
      "gamma": 1.089922758777232,
      "success": true,
      "log_likelihood": -24.730616750399626,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.1372826295857918,
      "beta": -0.19265464188344983,
      "gamma": 6.143097321711033,
      "success": true,
      "log_likelihood": -24.056945188723954,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.7541674509502326,
      "beta": 3.0670608946373865,
      "gamma": 3.2406243606084173,
      "success": true,
      "log_likelihood": -21.27032085873485,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.7290869035390395,
      "beta": -2.078398526503273,
      "gamma": 0.32977957945465763,
      "success": true,
      "log_likelihood": -24.897714324691933,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.1766659941712962,
      "beta": -10.0,
      "gamma": 2.7247724213712976,
      "success": true,
      "log_likelihood": -24.95348009370716,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.32076703784911,
      "beta": -10.0,
      "gamma": 8.422157153678738,
      "success": true,
      "log_likelihood": -24.953434695838464,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.9177959790801204,
      "beta": -2.0786183279962924,
      "gamma": 1.2499135962576946,
      "success": true,
      "log_likelihood": -24.897714329044575,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.3350293383638878,
      "beta": 1.522936177400434,
      "gamma": 1.8823292981608475,
      "success": true,
      "log_likelihood": -22.157938155123382,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.7191535950076333,
      "beta": -10.0,
      "gamma": 1.608689938345157,
      "success": true,
      "log_likelihood": -24.9538886745254,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5495785829539359,
      "beta": -2.0782855645814893,
      "gamma": 6.534316731896933,
      "success": true,
      "log_likelihood": -24.89771432410233,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.0307905532342558,
      "beta": -0.6790615794787984,
      "gamma": 5.10454960468115,
      "success": true,
      "log_likelihood": -24.45095756850418,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.25,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.1776499753941878,
      "beta": -10.0,
      "gamma": 3.0712811092190737,
      "success": true,
      "log_likelihood": -24.95348009370716,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.4455394730558777,
      "beta": -10.0,
      "gamma": 6.884472471902091,
      "success": true,
      "log_likelihood": -24.953570889444546,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.6324749334629978,
      "beta": -10.0,
      "gamma": 1.3191387584771486,
      "success": true,
      "log_likelihood": -24.953661685181938,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.4620035640479785,
      "beta": 9.999999999999996,
      "gamma": 6.353872820586123,
      "success": true,
      "log_likelihood": -15.27767869783462,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.2190131760133363,
      "beta": -10.0,
      "gamma": 1.2217759765238911,
      "success": true,
      "log_likelihood": -24.953934072394095,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.7806619396712507,
      "beta": 10.0,
      "gamma": 5.509591712725099,
      "success": true,
      "log_likelihood": -18.27754250352343,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.9382194298538669,
      "beta": -0.1926519179773735,
      "gamma": 7.819657667406571,
      "success": true,
      "log_likelihood": -24.05694518872379,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.4729905628294075,
      "beta": -9.999999999999998,
      "gamma": 6.526544059590322,
      "success": true,
      "log_likelihood": -24.953298502232386,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.9881288471797093,
      "beta": -10.0,
      "gamma": 0.43122302741879226,
      "success": true,
      "log_likelihood": -24.953979470262787,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.6536361936276965,
      "beta": -10.0,
      "gamma": 5.86305488722322,
      "success": true,
      "log_likelihood": -24.95338929796977,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.2496347604544722,
      "beta": -10.0,
      "gamma": 7.856505994748678,
      "success": true,
      "log_likelihood": -24.95375248091932,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.9488288435113331,
      "beta": -1.2474069446630611,
      "gamma": 7.155231493105343,
      "success": true,
      "log_likelihood": -24.730616750452135,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.0544024233560518,
      "beta": 10.0,
      "gamma": 5.902419047906651,
      "success": true,
      "log_likelihood": -14.277724095938348,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.4840604934916437,
      "beta": 10.0,
      "gamma": 7.448863231282932,
      "success": true,
      "log_likelihood": -16.277633299730887,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.252401778086616,
      "beta": -1.2474215044064734,
      "gamma": 1.912906066421295,
      "success": true,
      "log_likelihood": -24.730616750350777,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.6653921958289776,
      "beta": 10.0,
      "gamma": 4.442769917276648,
      "success": true,
      "log_likelihood": -14.27772409593835,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.171072960503158,
      "beta": -10.0,
      "gamma": 5.395263002127427,
      "success": true,
      "log_likelihood": -24.953934072394095,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.930715562923573,
      "beta": -10.0,
      "gamma": 3.620039037457973,
      "success": true,
      "log_likelihood": -24.9538886745254,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.3492396824677337,
      "beta": -2.0783398192295635,
      "gamma": 7.21927759799294,
      "success": true,
      "log_likelihood": -24.89771432424591,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.140172852517923,
      "beta": 10.0,
      "gamma": 9.15801853945506,
      "success": true,
      "log_likelihood": -19.2774971054197,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.1533247812798328,
      "beta": -6.293671922813012,
      "gamma": 7.113022170973821,
      "success": true,
      "log_likelihood": -24.953313803650733,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.328448804269501,
      "beta": 1.5230286799452268,
      "gamma": 4.037957664507989,
      "success": true,
      "log_likelihood": -22.15793815477921,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.1297600735148703,
      "beta": 10.0,
      "gamma": 6.8273297039323815,
      "success": true,
      "log_likelihood": -13.277769494042078,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.7590931484232907,
      "beta": -10.0,
      "gamma": 5.266110333142318,
      "success": true,
      "log_likelihood": -24.95402486813148,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.8018507366671619,
      "beta": -0.1926503647982951,
      "gamma": 4.875550821756136,
      "success": true,
      "log_likelihood": -24.056945188725443,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.7263799718656503,
      "beta": -10.0,
      "gamma": 2.2693134041457097,
      "success": true,
      "log_likelihood": -24.953979470262784,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.4915331672097225,
      "beta": -7.304555050640817,
      "gamma": 6.910798701590735,
      "success": true,
      "log_likelihood": -24.95262850843821,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.4532954757972352,
      "beta": 10.0,
      "gamma": 1.5619621630343195,
      "success": true,
      "log_likelihood": -14.277724095938348,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.2932240535091262,
      "beta": -10.0,
      "gamma": 5.604550622511036,
      "success": true,
      "log_likelihood": -24.953934072394095,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.515902949971075,
      "beta": -6.2752050890738085,
      "gamma": 1.075778425744961,
      "success": true,
      "log_likelihood": -24.953314378610767,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.349396904051261,
      "beta": -0.19378642509016633,
      "gamma": 4.263930278512288,
      "success": true,
      "log_likelihood": -24.056945525755847,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.6205203957693004,
      "beta": -9.999999999999996,
      "gamma": 3.2647458754020064,
      "success": true,
      "log_likelihood": -24.95393407239409,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.8079629395679365,
      "beta": 1.5230637271633451,
      "gamma": 1.5164257988253804,
      "success": true,
      "log_likelihood": -22.157938155017636,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.768178428541514,
      "beta": -10.0,
      "gamma": 2.10472387383395,
      "success": true,
      "log_likelihood": -24.95375248091932,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.3714388202336276,
      "beta": 10.0,
      "gamma": 1.6672929383386403,
      "success": true,
      "log_likelihood": -13.277769494042078,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.9113090715013754,
      "beta": -10.0,
      "gamma": 9.860107353771898,
      "success": true,
      "log_likelihood": -24.953343900101082,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.1738718399161914,
      "beta": 1.523114230062171,
      "gamma": 7.7749841367495485,
      "success": true,
      "log_likelihood": -22.157938155717602,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "phi": {
        "r": 0.12306357235257294,
        "p": 0.22253830742311173
      },
      "beta": {
        "r": 0.6580892438786788,
        "p": 1.0090977233786751e-13
      },
      "gamma": {
        "r": -0.14426149014579628,
        "p": 0.15214955979688527
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 53.92390064423915,
  "bic_results": {
    "average_bic": 53.92390064423915,
    "individual_bics": [
      60.6585157558939,
      60.65715389468012,
      60.54598546357849,
      60.65742620704526,
      60.65733541130788,
      57.84250314306777,
      33.3062773958674,
      56.5795769181955,
      33.3062773958674,
      60.657517002782654,
      60.65733541130787,
      60.65842496015652,
      60.65742620704526,
      33.3062773958674,
      33.3062773958674,
      33.3062773958674,
      33.3062773958674,
      43.305823414830115,
      41.305914211037575,
      33.3062773958674,
      60.21179031658916,
      43.305823414830115,
      60.65760779852003,
      60.545985463604865,
      60.65715397743904,
      59.65247195269728,
      60.21179031740556,
      60.657880185732196,
      41.305914211037575,
      49.30555102620774,
      33.3062773958674,
      60.6585157558939,
      60.65742620704526,
      60.657517002782654,
      33.3062773958674,
      57.84250314615039,
      55.06643312483969,
      60.6571538198331,
      56.57957695778359,
      39.30600500724502,
      58.86444719483103,
      60.65806177720697,
      35.30618659965994,
      60.21179031616758,
      58.86444719281624,
      53.291198532838024,
      60.54598546475219,
      60.657517002782654,
      60.65742620704526,
      60.54598547345748,
      55.06643312561509,
      60.65833416441913,
      60.54598546357299,
      59.652471952376686,
      60.657517002782654,
      60.657698594257425,
      60.65788018573221,
      41.305914211037575,
      60.65842496015652,
      47.3056418224152,
      58.864447192815916,
      60.6571538198331,
      60.6585157558939,
      60.65733541130787,
      60.65806177720697,
      60.2117903162726,
      39.30600500724503,
      43.3058234148301,
      60.21179031606988,
      39.306005007245034,
      60.65842496015652,
      60.65833416441913,
      60.54598546386015,
      49.30555102620774,
      60.6571844226698,
      55.066433124926746,
      37.306095803452486,
      60.658606551631294,
      58.86444719281921,
      60.6585157558939,
      60.655813832244746,
      39.30600500724503,
      60.65842496015652,
      60.65718557258987,
      58.86444786688003,
      60.65842496015651,
      55.066433125403606,
      60.65806177720697,
      37.306095803452486,
      60.65724461557049,
      55.06643312680353
    ],
    "group_enabled": false,
    "group_bics": null,
    "num_parameters": 3,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- phi: r = 0.123\n- beta: r = 0.658\n- gamma: r = -0.144",
  "previous_models": [
    "Specification: a = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + delta\na_mod = 1.08 * a * (1 + 0.012 * sin(a + 0.045))\nz = a_mod * (1 + 0.008 * cos(a + 0.065)) * (1 + 0.005 * sin(a + 0.115)) * (1 + 0.004 * cos(a + 0.085)) * (1 + 0.006 * (sin(a + 0.035) * cos(a + 0.055))) * (1 + 0.003 * (sin(a + 0.03) * cos(a + 0.05)))\nw = (phi - 0.5) / phi\nf_adapt = {if z >= 0 then clip[1.002 * (z^w * (ln(1+z))^(1-w)) * (z/(1+abs(z))), -100, 100] else phi * ( ( (z + 1e-6)/(1+abs(z+1e-6)) )^8 )}\nT = K0 + K1*a + K2*a^2 + K3*a^3 + K4*a^4 + K5*a^5 + K6*a^6 + K7*a^7 + K8*a^8 + K9*a^9 + K10*a^10 + K11*a^11 + K12*a^12\nextra = { exp(-a/0.1) * (z/(1+abs(z))) * (1 + 0.005*sin(1/(1+a))) * (1 + 0.002*cos(0.5*a)) * (1+0.003*cos(0.3*a))^2 * (1+0.004*cos(0.3*a))^2 * (1+0.0025*cos(0.7*a)) * (1+tanh(0.05*a)) * (1+sigmoid(0.01*a)) * (1.07*softplus(0.865/(1+a)) + 0.15*(0.865/(1+a)) + 0.5*(0.865/(1+a)) + 0.006*a) * (1 - 0.002*cos(a)) * (1 - 0.0025*cos(2.5*a)) * (1+0.001*a) * (1+cosh(0.001*a))^(2+0.0005*a) + 1e-6 }^(0.9478+0.00018*ln(1+a)) * (1+tanh(0.05*a))\nExponent = (0.9478+0.00018*ln(1+a)) * (1 + 0.003*sin(2*a) + 0.001*cos(3*a) + 0.0025*cos(0.7*a) + 0.004*sin(2.5*a) + 0.002*cos(3.5*a) + 0.001*sin(2.5*a)*cos(3*a))\nf = sign(z) * ( ( f_adapt * T * extra )^Exponent )\nU = beta + gamma * f\nP_accept = 1 / (1 + exp(-U))\nSummary: A nonlinear utility model for binary acceptance that computes a core signal from eleven fixed data\u2010derived components, applies extensive sinusoidal and polynomial modulations, and performs an adaptive transformation with separate treatments for positive and negative signals. The final transformed value is scaled by two learnable parameters and offset by a baseline parameter to generate latent utility, which is mapped via a logistic function to predict responder accept/reject decisions.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 53.92390064423915\nOverall Accuracy: 0.5714\n\nParameter Recovery:\n- phi: r = 0.123\n- beta: r = 0.658\n- gamma: r = -0.144"
  ]
}