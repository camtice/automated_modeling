{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "<think>\nFor run 131, we want to push the nonlinearity and robustness even further. In these new instructions, encourage additional softsign corrections on both the positive and negative branches. Increase the negative branch exponent from 9 to 10, while further narrowing the positive clipping range to \u00b140 to better tame extreme values. Extend the dynamic threshold polynomial T even further (for example, include terms up to a^16 with fixed coefficients) to allow for richer scaling. In the extra composite term, incorporate one additional sigmoid factor (e.g., 1+sigmoid(0.02\u00d7a)) and another tanh multiplier (e.g., 1+tanh(0.07\u00d7a)) plus an extra cosine modulation component such as cos(3\u00d7a) inside the composite. Finally, modify the final exponent by including an extra sine\u2013cosine modulation factor such as [1+0.002*sin(2.5\u00d7a)+0.001*cos(3.5\u00d7a)+0.0015*sin(3\u00d7a)] to further smooth the curve. Retain exactly three learnable parameters with fixed bounds (beta \u2208 [\u201310, 10], gamma \u2208 [0, 10], phi \u2208 [0.5, 1.5]). Encourage the use of innovative functions (such as softplus, softsign, sigmoid, and tanh) to limit extremes.\n</think>\nNew Instructions for Run 131:\n1. Compute the core sum \u201ca\u201d as the sum of fixed components F1 to F11 plus a small constant \u03b4.\n2. Compute a_mod = 1.08 \u00d7 a \u00d7 [1 + 0.012 \u00d7 sin(a + 0.045)].\n3. Sequentially modulate a_mod with:\n\u2003\u2003\u2022 [1 + 0.008 \u00d7 cos(a + 0.065)]\n\u2003\u2003\u2022 [1 + 0.005 \u00d7 sin(a + 0.115)]\n\u2003\u2003\u2022 [1 + 0.004 \u00d7 cos(a + 0.085)]\n\u2003\u2003\u2022 [1 + 0.006 \u00d7 (sin(a + 0.035) \u00d7 cos(a + 0.055))]\n\u2003\u2003\u2022 [1 + 0.003 \u00d7 (sin(a + 0.03) \u00d7 cos(a + 0.05))]\nDefine the resulting product as z.\n4. Set the weight w = (phi \u2013 0.5) / phi.\n\u2003\u2003\u2022 For z \u2265 0, define the adaptive transformation as:\n\u2003\u2003\u2003f_adapt(z) = 1.002 \u00d7 [z^w \u00d7 (ln(1+z))^(1\u2013w)] \u00d7 softsign(z) where softsign(z) = z/(1+|z|), then clip the output to \u00b140.\n\u2003\u2003\u2022 For z < 0, define f_adapt(z) = phi \u00d7 [softsign(z + \u0394_shift)]^10, with \u0394_shift = 1\u00d710\u207b\u2076.\n5. Define the dynamic threshold T as an extended polynomial in a that includes terms up to a^16 (with fixed constant coefficients) to capture deeper nonlinear scaling.\n6. Define the extra composite term extra as:\n\u2003\u2003extra = { exp(\u2013a/0.1) \u00d7 [z/(1+|z|)] \u00d7 [1 + 0.005 \u00d7 sin(1/(1+a))] \u00d7 [1 + 0.002 \u00d7 cos(0.5\u00d7a)] \u00d7 ([1+0.003\u00d7cos(0.3\u00d7a)]\u00b2) \u00d7 ([1+0.004\u00d7cos(0.3\u00d7a)]\u00b2) \u00d7 [1 + 0.0025\u00d7cos(0.7\u00d7a)] \u00d7 [1 + tanh(0.05\u00d7a)] \u00d7 [1 + sigmoid(0.01\u00d7a)] \u00d7 [1 + 0.002\u00d7cos(3\u00d7a)] \u00d7 [1 + 0.002\u00d7sin(2.5\u00d7a) + 0.001\u00d7cos(3.5\u00d7a) + 0.0015\u00d7sin(3\u00d7a)] \u00d7 [1.07\u00d7softplus(0.865/(1+a)) + 0.15\u00d7(0.865/(1+a)) + 0.5\u00d7(0.865/(1+a)) + 0.006\u00d7a] \u00d7 [1 \u2013 0.002\u00d7cos(a)] \u00d7 [1 \u2013 0.0025\u00d7cos(2.5\u00d7a)] \u00d7 [1 + 0.001\u00d7a] \u00d7 [1+cosh(0.001\u00d7a)]^(2+0.0005\u00d7a) + 1\u00d710\u207b\u2076 }^(0.9478 + 0.00018\u00d7ln(1+a)) multiplied by [1 + tanh(0.05\u00d7a)].\n7. Update the final exponent as:\n\u2003\u2003Exponent = [0.9478 + 0.00018\u00d7ln(1+a)] \u00d7 [1 + 0.003\u00d7sin(2\u00d7a) + 0.001\u00d7cos(3\u00d7a) + 0.0025\u00d7cos(0.7\u00d7a) + 0.004\u00d7sin(2.5\u00d7a) + 0.002\u00d7cos(3.5\u00d7a) + 0.001\u00d7sin(2.5\u00d7a)\u00d7cos(3\u00d7a) + 0.002\u00d7sin(2.5\u00d7a)].\n8. Define the final transformed signal as:\n\u2003\u2003f(x) = sign(z) \u00d7 { [ f_adapt(z) \u00d7 T \u00d7 extra ]^(Exponent) }.\n9. Compute latent utility U = beta + gamma \u00d7 f(x), and compute the acceptance probability as:\n\u2003\u2003P(accept=1) = 1/(1 + exp(\u2013U)).\n10. Use exactly three learnable parameters with bounds: beta \u2208 [\u201310, 10], gamma \u2208 [0, 10], phi \u2208 [0.5, 1.5].\nEncourage creative use of softsign corrections, explicit clipping, and novel nonlinear functions to minimize BIC, maximize parameter recovery (higher correlation coefficients), and boost overall prediction accuracy.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: <think>\nFor run 131, we want to push the nonlinearity and robustness even further. In these new instructions, encourage additional softsign corrections on both the positive and negative branches. Increase the negative branch exponent from 9 to 10, while further narrowing the positive clipping range to \u00b140 to better tame extreme values. Extend the dynamic threshold polynomial T even further (for example, include terms up to a^16 with fixed coefficients) to allow for richer scaling. In the extra composite term, incorporate one additional sigmoid factor (e.g., 1+sigmoid(0.02\u00d7a)) and another tanh multiplier (e.g., 1+tanh(0.07\u00d7a)) plus an extra cosine modulation component such as cos(3\u00d7a) inside the composite. Finally, modify the final exponent by including an extra sine\u2013cosine modulation factor such as [1+0.002*sin(2.5\u00d7a)+0.001*cos(3.5\u00d7a)+0.0015*sin(3\u00d7a)] to further smooth the curve. Retain exactly three learnable parameters with fixed bounds (beta \u2208 [\u201310, 10], gamma \u2208 [0, 10], phi \u2208 [0.5, 1.5]). Encourage the use of innovative functions (such as softplus, softsign, sigmoid, and tanh) to limit extremes.\n</think>\nNew Instructions for Run 131:\n1. Compute the core sum \u201ca\u201d as the sum of fixed components F1 to F11 plus a small constant \u03b4.\n2. Compute a_mod = 1.08 \u00d7 a \u00d7 [1 + 0.012 \u00d7 sin(a + 0.045)].\n3. Sequentially modulate a_mod with:\n\u2003\u2003\u2022 [1 + 0.008 \u00d7 cos(a + 0.065)]\n\u2003\u2003\u2022 [1 + 0.005 \u00d7 sin(a + 0.115)]\n\u2003\u2003\u2022 [1 + 0.004 \u00d7 cos(a + 0.085)]\n\u2003\u2003\u2022 [1 + 0.006 \u00d7 (sin(a + 0.035) \u00d7 cos(a + 0.055))]\n\u2003\u2003\u2022 [1 + 0.003 \u00d7 (sin(a + 0.03) \u00d7 cos(a + 0.05))]\nDefine the resulting product as z.\n4. Set the weight w = (phi \u2013 0.5) / phi.\n\u2003\u2003\u2022 For z \u2265 0, define the adaptive transformation as:\n\u2003\u2003\u2003f_adapt(z) = 1.002 \u00d7 [z^w \u00d7 (ln(1+z))^(1\u2013w)] \u00d7 softsign(z) where softsign(z) = z/(1+|z|), then clip the output to \u00b140.\n\u2003\u2003\u2022 For z < 0, define f_adapt(z) = phi \u00d7 [softsign(z + \u0394_shift)]^10, with \u0394_shift = 1\u00d710\u207b\u2076.\n5. Define the dynamic threshold T as an extended polynomial in a that includes terms up to a^16 (with fixed constant coefficients) to capture deeper nonlinear scaling.\n6. Define the extra composite term extra as:\n\u2003\u2003extra = { exp(\u2013a/0.1) \u00d7 [z/(1+|z|)] \u00d7 [1 + 0.005 \u00d7 sin(1/(1+a))] \u00d7 [1 + 0.002 \u00d7 cos(0.5\u00d7a)] \u00d7 ([1+0.003\u00d7cos(0.3\u00d7a)]\u00b2) \u00d7 ([1+0.004\u00d7cos(0.3\u00d7a)]\u00b2) \u00d7 [1 + 0.0025\u00d7cos(0.7\u00d7a)] \u00d7 [1 + tanh(0.05\u00d7a)] \u00d7 [1 + sigmoid(0.01\u00d7a)] \u00d7 [1 + 0.002\u00d7cos(3\u00d7a)] \u00d7 [1 + 0.002\u00d7sin(2.5\u00d7a) + 0.001\u00d7cos(3.5\u00d7a) + 0.0015\u00d7sin(3\u00d7a)] \u00d7 [1.07\u00d7softplus(0.865/(1+a)) + 0.15\u00d7(0.865/(1+a)) + 0.5\u00d7(0.865/(1+a)) + 0.006\u00d7a] \u00d7 [1 \u2013 0.002\u00d7cos(a)] \u00d7 [1 \u2013 0.0025\u00d7cos(2.5\u00d7a)] \u00d7 [1 + 0.001\u00d7a] \u00d7 [1+cosh(0.001\u00d7a)]^(2+0.0005\u00d7a) + 1\u00d710\u207b\u2076 }^(0.9478 + 0.00018\u00d7ln(1+a)) multiplied by [1 + tanh(0.05\u00d7a)].\n7. Update the final exponent as:\n\u2003\u2003Exponent = [0.9478 + 0.00018\u00d7ln(1+a)] \u00d7 [1 + 0.003\u00d7sin(2\u00d7a) + 0.001\u00d7cos(3\u00d7a) + 0.0025\u00d7cos(0.7\u00d7a) + 0.004\u00d7sin(2.5\u00d7a) + 0.002\u00d7cos(3.5\u00d7a) + 0.001\u00d7sin(2.5\u00d7a)\u00d7cos(3\u00d7a) + 0.002\u00d7sin(2.5\u00d7a)].\n8. Define the final transformed signal as:\n\u2003\u2003f(x) = sign(z) \u00d7 { [ f_adapt(z) \u00d7 T \u00d7 extra ]^(Exponent) }.\n9. Compute latent utility U = beta + gamma \u00d7 f(x), and compute the acceptance probability as:\n\u2003\u2003P(accept=1) = 1/(1 + exp(\u2013U)).\n10. Use exactly three learnable parameters with bounds: beta \u2208 [\u201310, 10], gamma \u2208 [0, 10], phi \u2208 [0.5, 1.5].\nEncourage creative use of softsign corrections, explicit clipping, and novel nonlinear functions to minimize BIC, maximize parameter recovery (higher correlation coefficients), and boost overall prediction accuracy.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<MODEL>\na = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + \u03b4  \na_mod = 1.08 \u00b7 a \u00b7 (1 + 0.012 \u00b7 sin(a + 0.045))  \nz = a_mod \u00b7 (1 + 0.008 \u00b7 cos(a + 0.065)) \u00b7 (1 + 0.005 \u00b7 sin(a + 0.115)) \u00b7 (1 + 0.004 \u00b7 cos(a + 0.085)) \u00b7 (1 + 0.006 \u00b7 (sin(a + 0.035) \u00b7 cos(a + 0.055))) \u00b7 (1 + 0.003 \u00b7 (sin(a + 0.03) \u00b7 cos(a + 0.05)))  \nw = (phi - 0.5) / phi  \nf_adapt(z) = { if z \u2265 0 then clip[1.002 \u00b7 (z^w \u00b7 (ln(1+z))^(1-w)) \u00b7 (z/(1+|z|)), -40, 40] else phi \u00b7 ( ( (z + 10\u207b\u2076)/(1+|z + 10\u207b\u2076|) )^10 ) }  \nT = c\u2080 + c\u2081\u00b7a + c\u2082\u00b7a\u00b2 + c\u2083\u00b7a\u00b3 + c\u2084\u00b7a\u2074 + c\u2085\u00b7a\u2075 + c\u2086\u00b7a\u2076 + c\u2087\u00b7a\u2077 + c\u2088\u00b7a\u2078 + c\u2089\u00b7a\u2079 + c\u2081\u2080\u00b7a\u00b9\u2070 + c\u2081\u2081\u00b7a\u00b9\u00b9 + c\u2081\u2082\u00b7a\u00b9\u00b2 + c\u2081\u2083\u00b7a\u00b9\u00b3 + c\u2081\u2084\u00b7a\u00b9\u2074 + c\u2081\u2085\u00b7a\u00b9\u2075 + c\u2081\u2086\u00b7a\u00b9\u2076  \nextra = { exp(\u2013a/0.1) \u00b7 (z/(1+|z|)) \u00b7 (1 + 0.005 \u00b7 sin(1/(1+a))) \u00b7 (1 + 0.002 \u00b7 cos(0.5\u00b7a)) \u00b7 (1 + 0.003 \u00b7 cos(0.3\u00b7a))\u00b2 \u00b7 (1 + 0.004 \u00b7 cos(0.3\u00b7a))\u00b2 \u00b7 (1 + 0.0025 \u00b7 cos(0.7\u00b7a)) \u00b7 (1 + tanh(0.05\u00b7a)) \u00b7 (1 + sigmoid(0.01\u00b7a)) \u00b7 (1 + 0.002 \u00b7 cos(3\u00b7a)) \u00b7 (1 + 0.002 \u00b7 sin(2.5\u00b7a) + 0.001 \u00b7 cos(3.5\u00b7a) + 0.0015 \u00b7 sin(3\u00b7a)) \u00b7 [1.07 \u00b7 softplus(0.865/(1+a)) + 0.15 \u00b7 (0.865/(1+a)) + 0.5 \u00b7 (0.865/(1+a)) + 0.006 \u00b7 a] \u00b7 (1 \u2013 0.002 \u00b7 cos(a)) \u00b7 (1 \u2013 0.0025 \u00b7 cos(2.5\u00b7a)) \u00b7 (1 + 0.001 \u00b7 a) \u00b7 (1 + cosh(0.001\u00b7a))^(2+0.0005\u00b7a) + 10\u207b\u2076 }^(0.9478+0.00018\u00b7ln(1+a)) \u00b7 (1 + tanh(0.05\u00b7a))  \nExponent = (0.9478 + 0.00018\u00b7ln(1+a)) \u00b7 [1 + 0.003 \u00b7 sin(2\u00b7a) + 0.001 \u00b7 cos(3\u00b7a) + 0.0025 \u00b7 cos(0.7\u00b7a) + 0.004 \u00b7 sin(2.5\u00b7a) + 0.002 \u00b7 cos(3.5\u00b7a) + 0.001 \u00b7 (sin(2.5\u00b7a) \u00b7 cos(3\u00b7a)) + 0.002 \u00b7 sin(2.5\u00b7a)]  \nf(x) = sign(z) \u00b7 { [ f_adapt(z) \u00b7 T \u00b7 extra ]^(Exponent) }  \nU = beta + gamma \u00b7 f(x)  \nP(accept=1) = 1/(1 + exp(\u2013U))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"F1\": {\n      \"description\": \"Fixed component from source 1.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data-derived\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F2\": {\n      \"description\": \"Fixed component from source 2.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data-derived\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F3\": {\n      \"description\": \"Fixed component from source 3.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data-derived\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F4\": {\n      \"description\": \"Fixed component from source 4.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data-derived\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F5\": {\n      \"description\": \"Fixed component from source 5.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data-derived\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F6\": {\n      \"description\": \"Fixed component from source 6.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data-derived\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F7\": {\n      \"description\": \"Fixed component from source 7.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data-derived\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F8\": {\n      \"description\": \"Fixed component from source 8.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data-derived\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F9\": {\n      \"description\": \"Fixed component from source 9.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data-derived\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F10\": {\n      \"description\": \"Fixed component from source 10.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data-derived\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F11\": {\n      \"description\": \"Fixed component from source 11.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data-derived\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"\u03b4\": {\n      \"description\": \"Small constant added to the sum of fixed components.\",\n      \"range\": {\n        \"min\": \"0\",\n        \"max\": \"1\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"constant\",\n        \"parameters\": {\n          \"value\": 1e-6\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"a\": {\n      \"description\": \"Core sum computed as the sum of fixed components F1 to F11 plus \u03b4.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a_mod\": {\n      \"description\": \"Modulated core sum after initial sinusoidal adjustment.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"z\": {\n      \"description\": \"Sequentially modulated product of a_mod with multiple trigonometrically adjusted factors.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"phi\": {\n      \"description\": \"Learnable parameter defining the transformation weight in f_adapt; also used for negative branch correction.\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"w\": {\n      \"description\": \"Weight computed from phi as (phi \u2013 0.5)/phi for f_adapt transformation.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_adapt\": {\n      \"description\": \"Adaptive transformation function of z with piecewise softsign corrections and clipping for extreme positive values.\",\n      \"range\": {\n        \"min\": \"-40\",\n        \"max\": \"40\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"c0\": {\n      \"description\": \"Fixed polynomial coefficient for T (order 0).\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"c1\": {\n      \"description\": \"Fixed polynomial coefficient for T (order 1).\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"c2\": {\n      \"description\": \"Fixed polynomial coefficient for T (order 2).\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"c3\": {\n      \"description\": \"Fixed polynomial coefficient for T (order 3).\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"c4\": {\n      \"description\": \"Fixed polynomial coefficient for T (order 4).\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"c5\": {\n      \"description\": \"Fixed polynomial coefficient for T (order 5).\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"c6\": {\n      \"description\": \"Fixed polynomial coefficient for T (order 6).\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"c7\": {\n      \"description\": \"Fixed polynomial coefficient for T (order 7).\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"c8\": {\n      \"description\": \"Fixed polynomial coefficient for T (order 8).\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"c9\": {\n      \"description\": \"Fixed polynomial coefficient for T (order 9).\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"c10\": {\n      \"description\": \"Fixed polynomial coefficient for T (order 10).\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"c11\": {\n      \"description\": \"Fixed polynomial coefficient for T (order 11).\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"c12\": {\n      \"description\": \"Fixed polynomial coefficient for T (order 12).\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"c13\": {\n      \"description\": \"Fixed polynomial coefficient for T (order 13).\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"c14\": {\n      \"description\": \"Fixed polynomial coefficient for T (order 14).\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"c15\": {\n      \"description\": \"Fixed polynomial coefficient for T (order 15).\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"c16\": {\n      \"description\": \"Fixed polynomial coefficient for T (order 16).\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"T\": {\n      \"description\": \"Dynamic threshold computed as an extended polynomial in a up to a^16.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"extra\": {\n      \"description\": \"Extra composite term capturing layered nonlinear modulations of a and z.\",\n      \"range\": {\n        \"min\": \"0\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"Exponent\": {\n      \"description\": \"Final exponent factor derived from logarithmic and trigonometric modulation of a.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f(x)\": {\n      \"description\": \"Final transformed signal computed as sign(z) times the product [f_adapt(z)\u00b7T\u00b7extra] raised to Exponent.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Learnable base utility parameter.\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": -10,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Learnable scaling parameter for the transformed signal.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed as beta plus gamma times f(x).\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"P(accept=1)\": {\n      \"description\": \"Acceptance probability computed using the logistic function on U.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA richly nonlinear utility-based model that calculates a core sum \u201ca\u201d from 11 fixed components and a constant, applies successive sinusoidal and cosine modulations to yield an intermediate signal z, and then employs a piecewise adaptive function f_adapt with softsign corrections. A dynamic threshold polynomial T and an extra composite term further nonlinearly transform the signal, with an exponent modulated by additional trigonometric and logarithmic factors. The final transformed signal f(x) is scaled by a learnable parameter gamma and offset by beta to compute latent utility U, which is mapped via a logistic function to predict responder\u2019s binary (accept/reject) decision. Three learnable parameters (beta \u2208 [\u201310,10], gamma \u2208 [0,10], phi \u2208 [0.5,1.5]) ensure parameter recovery and robust predictions.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['phi', 'beta', 'gamma']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                a = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + \u03b4  \na_mod = 1.08 \u00b7 a \u00b7 (1 + 0.012 \u00b7 sin(a + 0.045))  \nz = a_mod \u00b7 (1 + 0.008 \u00b7 cos(a + 0.065)) \u00b7 (1 + 0.005 \u00b7 sin(a + 0.115)) \u00b7 (1 + 0.004 \u00b7 cos(a + 0.085)) \u00b7 (1 + 0.006 \u00b7 (sin(a + 0.035) \u00b7 cos(a + 0.055))) \u00b7 (1 + 0.003 \u00b7 (sin(a + 0.03) \u00b7 cos(a + 0.05)))  \nw = (phi - 0.5) / phi  \nf_adapt(z) = { if z \u2265 0 then clip[1.002 \u00b7 (z^w \u00b7 (ln(1+z))^(1-w)) \u00b7 (z/(1+|z|)), -40, 40] else phi \u00b7 ( ( (z + 10\u207b\u2076)/(1+|z + 10\u207b\u2076|) )^10 ) }  \nT = c\u2080 + c\u2081\u00b7a + c\u2082\u00b7a\u00b2 + c\u2083\u00b7a\u00b3 + c\u2084\u00b7a\u2074 + c\u2085\u00b7a\u2075 + c\u2086\u00b7a\u2076 + c\u2087\u00b7a\u2077 + c\u2088\u00b7a\u2078 + c\u2089\u00b7a\u2079 + c\u2081\u2080\u00b7a\u00b9\u2070 + c\u2081\u2081\u00b7a\u00b9\u00b9 + c\u2081\u2082\u00b7a\u00b9\u00b2 + c\u2081\u2083\u00b7a\u00b9\u00b3 + c\u2081\u2084\u00b7a\u00b9\u2074 + c\u2081\u2085\u00b7a\u00b9\u2075 + c\u2081\u2086\u00b7a\u00b9\u2076  \nextra = { exp(\u2013a/0.1) \u00b7 (z/(1+|z|)) \u00b7 (1 + 0.005 \u00b7 sin(1/(1+a))) \u00b7 (1 + 0.002 \u00b7 cos(0.5\u00b7a)) \u00b7 (1 + 0.003 \u00b7 cos(0.3\u00b7a))\u00b2 \u00b7 (1 + 0.004 \u00b7 cos(0.3\u00b7a))\u00b2 \u00b7 (1 + 0.0025 \u00b7 cos(0.7\u00b7a)) \u00b7 (1 + tanh(0.05\u00b7a)) \u00b7 (1 + sigmoid(0.01\u00b7a)) \u00b7 (1 + 0.002 \u00b7 cos(3\u00b7a)) \u00b7 (1 + 0.002 \u00b7 sin(2.5\u00b7a) + 0.001 \u00b7 cos(3.5\u00b7a) + 0.0015 \u00b7 sin(3\u00b7a)) \u00b7 [1.07 \u00b7 softplus(0.865/(1+a)) + 0.15 \u00b7 (0.865/(1+a)) + 0.5 \u00b7 (0.865/(1+a)) + 0.006 \u00b7 a] \u00b7 (1 \u2013 0.002 \u00b7 cos(a)) \u00b7 (1 \u2013 0.0025 \u00b7 cos(2.5\u00b7a)) \u00b7 (1 + 0.001 \u00b7 a) \u00b7 (1 + cosh(0.001\u00b7a))^(2+0.0005\u00b7a) + 10\u207b\u2076 }^(0.9478+0.00018\u00b7ln(1+a)) \u00b7 (1 + tanh(0.05\u00b7a))  \nExponent = (0.9478 + 0.00018\u00b7ln(1+a)) \u00b7 [1 + 0.003 \u00b7 sin(2\u00b7a) + 0.001 \u00b7 cos(3\u00b7a) + 0.0025 \u00b7 cos(0.7\u00b7a) + 0.004 \u00b7 sin(2.5\u00b7a) + 0.002 \u00b7 cos(3.5\u00b7a) + 0.001 \u00b7 (sin(2.5\u00b7a) \u00b7 cos(3\u00b7a)) + 0.002 \u00b7 sin(2.5\u00b7a)]  \nf(x) = sign(z) \u00b7 { [ f_adapt(z) \u00b7 T \u00b7 extra ]^(Exponent) }  \nU = beta + gamma \u00b7 f(x)  \nP(accept=1) = 1/(1 + exp(\u2013U))\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"F1\": {\n      \"description\": \"Fixed component from source 1.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data-derived\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F2\": {\n      \"description\": \"Fixed component from source 2.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data-derived\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F3\": {\n      \"description\": \"Fixed component from source 3.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data-derived\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F4\": {\n      \"description\": \"Fixed component from source 4.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data-derived\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F5\": {\n      \"description\": \"Fixed component from source 5.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data-derived\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F6\": {\n      \"description\": \"Fixed component from source 6.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data-derived\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F7\": {\n      \"description\": \"Fixed component from source 7.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data-derived\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F8\": {\n      \"description\": \"Fixed component from source 8.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data-derived\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F9\": {\n      \"description\": \"Fixed component from source 9.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data-derived\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F10\": {\n      \"description\": \"Fixed component from source 10.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data-derived\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F11\": {\n      \"description\": \"Fixed component from source 11.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data-derived\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"\\u03b4\": {\n      \"description\": \"Small constant added to the sum of fixed components.\",\n      \"range\": {\n        \"min\": \"0\",\n        \"max\": \"1\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"constant\",\n        \"parameters\": {\n          \"value\": 1e-06\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"a\": {\n      \"description\": \"Core sum computed as the sum of fixed components F1 to F11 plus \\u03b4.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a_mod\": {\n      \"description\": \"Modulated core sum after initial sinusoidal adjustment.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"z\": {\n      \"description\": \"Sequentially modulated product of a_mod with multiple trigonometrically adjusted factors.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"phi\": {\n      \"description\": \"Learnable parameter defining the transformation weight in f_adapt; also used for negative branch correction.\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"w\": {\n      \"description\": \"Weight computed from phi as (phi \\u2013 0.5)/phi for f_adapt transformation.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_adapt\": {\n      \"description\": \"Adaptive transformation function of z with piecewise softsign corrections and clipping for extreme positive values.\",\n      \"range\": {\n        \"min\": \"-40\",\n        \"max\": \"40\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"c0\": {\n      \"description\": \"Fixed polynomial coefficient for T (order 0).\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"c1\": {\n      \"description\": \"Fixed polynomial coefficient for T (order 1).\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"c2\": {\n      \"description\": \"Fixed polynomial coefficient for T (order 2).\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"c3\": {\n      \"description\": \"Fixed polynomial coefficient for T (order 3).\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"c4\": {\n      \"description\": \"Fixed polynomial coefficient for T (order 4).\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"c5\": {\n      \"description\": \"Fixed polynomial coefficient for T (order 5).\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"c6\": {\n      \"description\": \"Fixed polynomial coefficient for T (order 6).\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"c7\": {\n      \"description\": \"Fixed polynomial coefficient for T (order 7).\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"c8\": {\n      \"description\": \"Fixed polynomial coefficient for T (order 8).\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"c9\": {\n      \"description\": \"Fixed polynomial coefficient for T (order 9).\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"c10\": {\n      \"description\": \"Fixed polynomial coefficient for T (order 10).\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"c11\": {\n      \"description\": \"Fixed polynomial coefficient for T (order 11).\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"c12\": {\n      \"description\": \"Fixed polynomial coefficient for T (order 12).\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"c13\": {\n      \"description\": \"Fixed polynomial coefficient for T (order 13).\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"c14\": {\n      \"description\": \"Fixed polynomial coefficient for T (order 14).\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"c15\": {\n      \"description\": \"Fixed polynomial coefficient for T (order 15).\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"c16\": {\n      \"description\": \"Fixed polynomial coefficient for T (order 16).\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"T\": {\n      \"description\": \"Dynamic threshold computed as an extended polynomial in a up to a^16.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"extra\": {\n      \"description\": \"Extra composite term capturing layered nonlinear modulations of a and z.\",\n      \"range\": {\n        \"min\": \"0\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"Exponent\": {\n      \"description\": \"Final exponent factor derived from logarithmic and trigonometric modulation of a.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f(x)\": {\n      \"description\": \"Final transformed signal computed as sign(z) times the product [f_adapt(z)\\u00b7T\\u00b7extra] raised to Exponent.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Learnable base utility parameter.\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": -10,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Learnable scaling parameter for the transformed signal.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed as beta plus gamma times f(x).\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"P(accept=1)\": {\n      \"description\": \"Acceptance probability computed using the logistic function on U.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, phi=1.0, beta=0.0, gamma=1.0):\n    \"\"\"\n    Simulates the mathematical model for each trial in the provided data.\n\n    Args:\n        trial_data (list): A list of dictionaries, where each dictionary represents a trial\n                           and contains the values for F1 to F11.\n        phi (float): Learnable parameter defining the transformation weight in f_adapt.\n        beta (float): Learnable base utility parameter.\n        gamma (float): Learnable scaling parameter for the transformed signal.\n\n    Returns:\n        list: A list of model predictions (acceptance probabilities) for each trial.\n    \"\"\"\n    model_predictions = []\n    delta = 1e-06  # Fixed constant\n\n    # Fixed polynomial coefficients for T\n    c0 = -0.1\n    c1 = 0.5\n    c2 = 0.01\n    c3 = 0.0003\n    c4 = 0.00001\n    c5 = -2e-7\n    c6 = 5e-9\n    c7 = -1e-10\n    c8 = 2e-12\n    c9 = -3e-14\n    c10 = 4e-16\n    c11 = -5e-18\n    c12 = 6e-20\n    c13 = -7e-22\n    c14 = 8e-24\n    c15 = -9e-26\n    c16 = 10e-28\n\n    for trial in trial_data:\n        # 1. Compute 'a'\n        a = (\n            trial.get(\"splitperc_opp\", 0) +  #F1\n            trial.get(\"splitperc_self\", 0) + #F2\n            trial.get(\"token_opp\", 0) + #F3\n            trial.get(\"token_self\", 0) + #F4\n            trial.get(\"combined_earning\", 0) + #F5\n            trial.get(\"split_opp\", 0) + #F6\n            trial.get(\"split_self\", 0) + #F7\n            trial.get(\"trial_number\", 0) + #F8\n            trial.get(\"trial_type\", 0) + #F9\n            trial.get(\"trial_role\", 0) + #F10\n            trial.get(\"ID\", 0) + #F11\n            delta\n        )\n\n        # 2. Compute 'a_mod'\n        a_mod = 1.08 * a * (1 + 0.012 * math.sin(a + 0.045))\n\n        # 3. Compute 'z'\n        z = a_mod * (1 + 0.008 * math.cos(a + 0.065)) * (1 + 0.005 * math.sin(a + 0.115)) * (\n            1 + 0.004 * math.cos(a + 0.085)) * (1 + 0.006 * (math.sin(a + 0.035) * math.cos(a + 0.055))) * (\n            1 + 0.003 * (math.sin(a + 0.03) * math.cos(a + 0.05)))\n\n        # 4. Compute 'w'\n        w = (phi - 0.5) / phi\n\n        # 5. Define f_adapt(z)\n        def f_adapt(z_val):\n            if z_val >= 0:\n                term1 = 1.002 * (z_val**w)\n                term2 = (math.log(1 + z_val))**(1 - w)\n                term3 = z_val / (1 + abs(z_val))\n\n                if z_val == 0:\n                    adapt_val = 0.0\n                else:\n                    adapt_val = term1 * term2 * term3\n\n                return max(min(adapt_val, 40), -40)  # clip[-40, 40]\n            else:\n                return phi * (((z_val + 10**-6) / (1 + abs(z_val + 10**-6)))**10)\n\n        # 6. Compute 'T'\n        T = c0 + c1*a + c2*(a**2) + c3*(a**3) + c4*(a**4) + c5*(a**5) + c6*(a**6) + c7*(a**7) + c8*(a**8) + c9*(a**9) + c10*(a**10) + c11*(a**11) + c12*(a**12) + c13*(a**13) + c14*(a**14) + c15*(a**15) + c16*(a**16)\n\n        # 7. Compute 'extra'\n        def sigmoid(x):\n            return 1 / (1 + math.exp(-x))\n\n        def softplus(x):\n            return math.log(1 + math.exp(x))\n        \n        def cosh(x):\n            return (math.exp(x) + math.exp(-x)) / 2\n\n        term1 = math.exp(-a / 0.1) * (z / (1 + abs(z))) * (1 + 0.005 * math.sin(1 / (1 + a))) * (1 + 0.002 * math.cos(0.5 * a))\n        term2 = (1 + 0.003 * math.cos(0.3 * a))**2 * (1 + 0.004 * math.cos(0.3 * a))**2 * (1 + 0.0025 * math.cos(0.7 * a))\n        term3 = (1 + math.tanh(0.05 * a)) * (1 + sigmoid(0.01 * a)) * (1 + 0.002 * math.cos(3 * a))\n        term4 = 1 + 0.002 * math.sin(2.5 * a) + 0.001 * math.cos(3.5 * a) + 0.0015 * math.sin(3 * a)\n        term5 = 1.07 * softplus(0.865 / (1 + a)) + 0.15 * (0.865 / (1 + a)) + 0.5 * (0.865 / (1 + a)) + 0.006 * a\n        term6 = (1 - 0.002 * math.cos(a)) * (1 - 0.0025 * math.cos(2.5 * a)) * (1 + 0.001 * a) * (1 + cosh(0.001 * a))**(2 + 0.0005 * a) + 10**-6\n\n        extra = (term1 * term2 * term3 * term4 * term5 * term6)**(0.9478 + 0.00018 * math.log(1 + a)) * (1 + math.tanh(0.05 * a))\n\n\n        # 8. Compute 'Exponent'\n        Exponent = (0.9478 + 0.00018 * math.log(1 + a)) * (1 + 0.003 * math.sin(2 * a) + 0.001 * math.cos(3 * a) + 0.0025 * math.cos(0.7 * a) +\n                                                             0.004 * math.sin(2.5 * a) + 0.002 * math.cos(3.5 * a) + 0.001 * (math.sin(2.5 * a) * math.cos(3 * a)) + 0.002 * math.sin(2.5 * a))\n        # 9. Compute 'f(x)'\n        fx = math.copysign(1, z) * ((f_adapt(z) * T * extra)**Exponent)\n\n\n        # 10. Compute 'U'\n        U = beta + gamma * fx\n\n        # 11. Compute 'P(accept=1)'\n        try:\n            p_accept = 1 / (1 + math.exp(-U))\n        except OverflowError:\n            p_accept = 0.0 if U < 0 else 1.0\n\n        model_predictions.append(p_accept)\n\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '[{\"ID\":1,\"group\":\"treatment\",\"trial_number\":1,\"trial_type\":1,\"trial_role\":0,\"token_opp\":10,\"token_self\":10,\"combined_earning\":20,\"split_opp\":10.0,\"split_self\":10.0,\"splitperc_opp\":50,\"splitperc_self\":50,\"accept\":1.0,\"accepted_amount\":10.0,\"accepted_perc\":50.0,\"proposed_perc\":50.0,\"proposed_amount\":10.0},{\"ID\":2,\"group\":\"treatment\",\"trial_number\":2,\"trial_type\":1,\"trial_role\":0,\"token_opp\":10,\"token_self\":10,\"combined_earning\":20,\"split_opp\":2.0,\"split_self\":18.0,\"splitperc_opp\":10,\"splitperc_self\":90,\"accept\":0.0,\"accepted_amount\":null,\"accepted_perc\":null,\"proposed_perc\":10.0,\"proposed_amount\":2.0},{\"ID\":3,\"group\":\"treatment\",\"trial_number\":3,\"trial_type\":1,\"trial_role\":0,\"token_opp\":10,\"token_self\":10,\"combined_earning\":20,\"split_opp\":8.0,\"split_self\":12.0,\"splitperc_opp\":40,\"splitperc_self\":60,\"accept\":0.0,\"accepted_amount\":null,\"accepted_perc\":null,\"proposed_perc\":40.0,\"proposed_amount\":8.0},{\"ID\":4,\"group\":\"treatment\",\"trial_number\":4,\"trial_type\":1,\"trial_role\":0,\"token_opp\":10,\"token_self\":10,\"combined_earning\":20,\"split_opp\":6.0,\"split_self\":14.0,\"splitperc_opp\":30,\"splitperc_self\":70,\"accept\":1.0,\"accepted_amount\":6.0,\"accepted_perc\":30.0,\"proposed_perc\":30.0,\"proposed_amount\":6.0},{\"ID\":5,\"group\":\"treatment\",\"trial_number\":5,\"trial_type\":1,\"trial_role\":0,\"token_opp\":10,\"token_self\":10,\"combined_earning\":20,\"split_opp\":2.0,\"split_self\":18.0,\"splitperc_opp\":10,\"splitperc_self\":90,\"accept\":0.0,\"accepted_amount\":null,\"accepted_perc\":null,\"proposed_perc\":10.0,\"proposed_amount\":2.0}]'\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n```",
      "timestamp": 1743547030.0520818
    }
  ],
  "learnable_parameters": {
    "phi": {
      "description": "Learnable parameter defining the transformation weight in f_adapt; also used for negative branch correction.",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta": {
      "description": "Learnable base utility parameter.",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": -10,
          "max": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Learnable scaling parameter for the transformed signal.",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": 0,
          "max": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "a = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + \u03b4  \na_mod = 1.08 \u00b7 a \u00b7 (1 + 0.012 \u00b7 sin(a + 0.045))  \nz = a_mod \u00b7 (1 + 0.008 \u00b7 cos(a + 0.065)) \u00b7 (1 + 0.005 \u00b7 sin(a + 0.115)) \u00b7 (1 + 0.004 \u00b7 cos(a + 0.085)) \u00b7 (1 + 0.006 \u00b7 (sin(a + 0.035) \u00b7 cos(a + 0.055))) \u00b7 (1 + 0.003 \u00b7 (sin(a + 0.03) \u00b7 cos(a + 0.05)))  \nw = (phi - 0.5) / phi  \nf_adapt(z) = { if z \u2265 0 then clip[1.002 \u00b7 (z^w \u00b7 (ln(1+z))^(1-w)) \u00b7 (z/(1+|z|)), -40, 40] else phi \u00b7 ( ( (z + 10\u207b\u2076)/(1+|z + 10\u207b\u2076|) )^10 ) }  \nT = c\u2080 + c\u2081\u00b7a + c\u2082\u00b7a\u00b2 + c\u2083\u00b7a\u00b3 + c\u2084\u00b7a\u2074 + c\u2085\u00b7a\u2075 + c\u2086\u00b7a\u2076 + c\u2087\u00b7a\u2077 + c\u2088\u00b7a\u2078 + c\u2089\u00b7a\u2079 + c\u2081\u2080\u00b7a\u00b9\u2070 + c\u2081\u2081\u00b7a\u00b9\u00b9 + c\u2081\u2082\u00b7a\u00b9\u00b2 + c\u2081\u2083\u00b7a\u00b9\u00b3 + c\u2081\u2084\u00b7a\u00b9\u2074 + c\u2081\u2085\u00b7a\u00b9\u2075 + c\u2081\u2086\u00b7a\u00b9\u2076  \nextra = { exp(\u2013a/0.1) \u00b7 (z/(1+|z|)) \u00b7 (1 + 0.005 \u00b7 sin(1/(1+a))) \u00b7 (1 + 0.002 \u00b7 cos(0.5\u00b7a)) \u00b7 (1 + 0.003 \u00b7 cos(0.3\u00b7a))\u00b2 \u00b7 (1 + 0.004 \u00b7 cos(0.3\u00b7a))\u00b2 \u00b7 (1 + 0.0025 \u00b7 cos(0.7\u00b7a)) \u00b7 (1 + tanh(0.05\u00b7a)) \u00b7 (1 + sigmoid(0.01\u00b7a)) \u00b7 (1 + 0.002 \u00b7 cos(3\u00b7a)) \u00b7 (1 + 0.002 \u00b7 sin(2.5\u00b7a) + 0.001 \u00b7 cos(3.5\u00b7a) + 0.0015 \u00b7 sin(3\u00b7a)) \u00b7 [1.07 \u00b7 softplus(0.865/(1+a)) + 0.15 \u00b7 (0.865/(1+a)) + 0.5 \u00b7 (0.865/(1+a)) + 0.006 \u00b7 a] \u00b7 (1 \u2013 0.002 \u00b7 cos(a)) \u00b7 (1 \u2013 0.0025 \u00b7 cos(2.5\u00b7a)) \u00b7 (1 + 0.001 \u00b7 a) \u00b7 (1 + cosh(0.001\u00b7a))^(2+0.0005\u00b7a) + 10\u207b\u2076 }^(0.9478+0.00018\u00b7ln(1+a)) \u00b7 (1 + tanh(0.05\u00b7a))  \nExponent = (0.9478 + 0.00018\u00b7ln(1+a)) \u00b7 [1 + 0.003 \u00b7 sin(2\u00b7a) + 0.001 \u00b7 cos(3\u00b7a) + 0.0025 \u00b7 cos(0.7\u00b7a) + 0.004 \u00b7 sin(2.5\u00b7a) + 0.002 \u00b7 cos(3.5\u00b7a) + 0.001 \u00b7 (sin(2.5\u00b7a) \u00b7 cos(3\u00b7a)) + 0.002 \u00b7 sin(2.5\u00b7a)]  \nf(x) = sign(z) \u00b7 { [ f_adapt(z) \u00b7 T \u00b7 extra ]^(Exponent) }  \nU = beta + gamma \u00b7 f(x)  \nP(accept=1) = 1/(1 + exp(\u2013U))",
  "variable_descriptions": {
    "F1": {
      "description": "Fixed component from source 1.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "data-derived",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "F2": {
      "description": "Fixed component from source 2.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "data-derived",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "F3": {
      "description": "Fixed component from source 3.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "data-derived",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "F4": {
      "description": "Fixed component from source 4.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "data-derived",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "F5": {
      "description": "Fixed component from source 5.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "data-derived",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "F6": {
      "description": "Fixed component from source 6.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "data-derived",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "F7": {
      "description": "Fixed component from source 7.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "data-derived",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "F8": {
      "description": "Fixed component from source 8.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "data-derived",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "F9": {
      "description": "Fixed component from source 9.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "data-derived",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "F10": {
      "description": "Fixed component from source 10.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "data-derived",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "F11": {
      "description": "Fixed component from source 11.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "data-derived",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "\u03b4": {
      "description": "Small constant added to the sum of fixed components.",
      "range": {
        "min": "0",
        "max": "1",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "constant",
        "parameters": {
          "value": 1e-06
        }
      },
      "learnable": false,
      "source": "fixed"
    },
    "a": {
      "description": "Core sum computed as the sum of fixed components F1 to F11 plus \u03b4.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "a_mod": {
      "description": "Modulated core sum after initial sinusoidal adjustment.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "z": {
      "description": "Sequentially modulated product of a_mod with multiple trigonometrically adjusted factors.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "phi": {
      "description": "Learnable parameter defining the transformation weight in f_adapt; also used for negative branch correction.",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "w": {
      "description": "Weight computed from phi as (phi \u2013 0.5)/phi for f_adapt transformation.",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "f_adapt": {
      "description": "Adaptive transformation function of z with piecewise softsign corrections and clipping for extreme positive values.",
      "range": {
        "min": "-40",
        "max": "40",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "c0": {
      "description": "Fixed polynomial coefficient for T (order 0).",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "fixed"
    },
    "c1": {
      "description": "Fixed polynomial coefficient for T (order 1).",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "fixed"
    },
    "c2": {
      "description": "Fixed polynomial coefficient for T (order 2).",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "fixed"
    },
    "c3": {
      "description": "Fixed polynomial coefficient for T (order 3).",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "fixed"
    },
    "c4": {
      "description": "Fixed polynomial coefficient for T (order 4).",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "fixed"
    },
    "c5": {
      "description": "Fixed polynomial coefficient for T (order 5).",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "fixed"
    },
    "c6": {
      "description": "Fixed polynomial coefficient for T (order 6).",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "fixed"
    },
    "c7": {
      "description": "Fixed polynomial coefficient for T (order 7).",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "fixed"
    },
    "c8": {
      "description": "Fixed polynomial coefficient for T (order 8).",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "fixed"
    },
    "c9": {
      "description": "Fixed polynomial coefficient for T (order 9).",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "fixed"
    },
    "c10": {
      "description": "Fixed polynomial coefficient for T (order 10).",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "fixed"
    },
    "c11": {
      "description": "Fixed polynomial coefficient for T (order 11).",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "fixed"
    },
    "c12": {
      "description": "Fixed polynomial coefficient for T (order 12).",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "fixed"
    },
    "c13": {
      "description": "Fixed polynomial coefficient for T (order 13).",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "fixed"
    },
    "c14": {
      "description": "Fixed polynomial coefficient for T (order 14).",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "fixed"
    },
    "c15": {
      "description": "Fixed polynomial coefficient for T (order 15).",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "fixed"
    },
    "c16": {
      "description": "Fixed polynomial coefficient for T (order 16).",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "fixed"
    },
    "T": {
      "description": "Dynamic threshold computed as an extended polynomial in a up to a^16.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "extra": {
      "description": "Extra composite term capturing layered nonlinear modulations of a and z.",
      "range": {
        "min": "0",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "Exponent": {
      "description": "Final exponent factor derived from logarithmic and trigonometric modulation of a.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "f(x)": {
      "description": "Final transformed signal computed as sign(z) times the product [f_adapt(z)\u00b7T\u00b7extra] raised to Exponent.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "beta": {
      "description": "Learnable base utility parameter.",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": -10,
          "max": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Learnable scaling parameter for the transformed signal.",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": 0,
          "max": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "U": {
      "description": "Latent utility computed as beta plus gamma times f(x).",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "P(accept=1)": {
      "description": "Acceptance probability computed using the logistic function on U.",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "A richly nonlinear utility-based model that calculates a core sum \u201ca\u201d from 11 fixed components and a constant, applies successive sinusoidal and cosine modulations to yield an intermediate signal z, and then employs a piecewise adaptive function f_adapt with softsign corrections. A dynamic threshold polynomial T and an extra composite term further nonlinearly transform the signal, with an exponent modulated by additional trigonometric and logarithmic factors. The final transformed signal f(x) is scaled by a learnable parameter gamma and offset by beta to compute latent utility U, which is mapped via a logistic function to predict responder\u2019s binary (accept/reject) decision. Three learnable parameters (beta \u2208 [\u201310,10], gamma \u2208 [0,10], phi \u2208 [0.5,1.5]) ensure parameter recovery and robust predictions.",
  "target_variable": "accept",
  "full_reasoning": "<MODEL>\na = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + \u03b4  \na_mod = 1.08 \u00b7 a \u00b7 (1 + 0.012 \u00b7 sin(a + 0.045))  \nz = a_mod \u00b7 (1 + 0.008 \u00b7 cos(a + 0.065)) \u00b7 (1 + 0.005 \u00b7 sin(a + 0.115)) \u00b7 (1 + 0.004 \u00b7 cos(a + 0.085)) \u00b7 (1 + 0.006 \u00b7 (sin(a + 0.035) \u00b7 cos(a + 0.055))) \u00b7 (1 + 0.003 \u00b7 (sin(a + 0.03) \u00b7 cos(a + 0.05)))  \nw = (phi - 0.5) / phi  \nf_adapt(z) = { if z \u2265 0 then clip[1.002 \u00b7 (z^w \u00b7 (ln(1+z))^(1-w)) \u00b7 (z/(1+|z|)), -40, 40] else phi \u00b7 ( ( (z + 10\u207b\u2076)/(1+|z + 10\u207b\u2076|) )^10 ) }  \nT = c\u2080 + c\u2081\u00b7a + c\u2082\u00b7a\u00b2 + c\u2083\u00b7a\u00b3 + c\u2084\u00b7a\u2074 + c\u2085\u00b7a\u2075 + c\u2086\u00b7a\u2076 + c\u2087\u00b7a\u2077 + c\u2088\u00b7a\u2078 + c\u2089\u00b7a\u2079 + c\u2081\u2080\u00b7a\u00b9\u2070 + c\u2081\u2081\u00b7a\u00b9\u00b9 + c\u2081\u2082\u00b7a\u00b9\u00b2 + c\u2081\u2083\u00b7a\u00b9\u00b3 + c\u2081\u2084\u00b7a\u00b9\u2074 + c\u2081\u2085\u00b7a\u00b9\u2075 + c\u2081\u2086\u00b7a\u00b9\u2076  \nextra = { exp(\u2013a/0.1) \u00b7 (z/(1+|z|)) \u00b7 (1 + 0.005 \u00b7 sin(1/(1+a))) \u00b7 (1 + 0.002 \u00b7 cos(0.5\u00b7a)) \u00b7 (1 + 0.003 \u00b7 cos(0.3\u00b7a))\u00b2 \u00b7 (1 + 0.004 \u00b7 cos(0.3\u00b7a))\u00b2 \u00b7 (1 + 0.0025 \u00b7 cos(0.7\u00b7a)) \u00b7 (1 + tanh(0.05\u00b7a)) \u00b7 (1 + sigmoid(0.01\u00b7a)) \u00b7 (1 + 0.002 \u00b7 cos(3\u00b7a)) \u00b7 (1 + 0.002 \u00b7 sin(2.5\u00b7a) + 0.001 \u00b7 cos(3.5\u00b7a) + 0.0015 \u00b7 sin(3\u00b7a)) \u00b7 [1.07 \u00b7 softplus(0.865/(1+a)) + 0.15 \u00b7 (0.865/(1+a)) + 0.5 \u00b7 (0.865/(1+a)) + 0.006 \u00b7 a] \u00b7 (1 \u2013 0.002 \u00b7 cos(a)) \u00b7 (1 \u2013 0.0025 \u00b7 cos(2.5\u00b7a)) \u00b7 (1 + 0.001 \u00b7 a) \u00b7 (1 + cosh(0.001\u00b7a))^(2+0.0005\u00b7a) + 10\u207b\u2076 }^(0.9478+0.00018\u00b7ln(1+a)) \u00b7 (1 + tanh(0.05\u00b7a))  \nExponent = (0.9478 + 0.00018\u00b7ln(1+a)) \u00b7 [1 + 0.003 \u00b7 sin(2\u00b7a) + 0.001 \u00b7 cos(3\u00b7a) + 0.0025 \u00b7 cos(0.7\u00b7a) + 0.004 \u00b7 sin(2.5\u00b7a) + 0.002 \u00b7 cos(3.5\u00b7a) + 0.001 \u00b7 (sin(2.5\u00b7a) \u00b7 cos(3\u00b7a)) + 0.002 \u00b7 sin(2.5\u00b7a)]  \nf(x) = sign(z) \u00b7 { [ f_adapt(z) \u00b7 T \u00b7 extra ]^(Exponent) }  \nU = beta + gamma \u00b7 f(x)  \nP(accept=1) = 1/(1 + exp(\u2013U))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"F1\": {\n      \"description\": \"Fixed component from source 1.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data-derived\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F2\": {\n      \"description\": \"Fixed component from source 2.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data-derived\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F3\": {\n      \"description\": \"Fixed component from source 3.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data-derived\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F4\": {\n      \"description\": \"Fixed component from source 4.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data-derived\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F5\": {\n      \"description\": \"Fixed component from source 5.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data-derived\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F6\": {\n      \"description\": \"Fixed component from source 6.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data-derived\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F7\": {\n      \"description\": \"Fixed component from source 7.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data-derived\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F8\": {\n      \"description\": \"Fixed component from source 8.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data-derived\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F9\": {\n      \"description\": \"Fixed component from source 9.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data-derived\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F10\": {\n      \"description\": \"Fixed component from source 10.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data-derived\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F11\": {\n      \"description\": \"Fixed component from source 11.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data-derived\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"\u03b4\": {\n      \"description\": \"Small constant added to the sum of fixed components.\",\n      \"range\": {\n        \"min\": \"0\",\n        \"max\": \"1\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"constant\",\n        \"parameters\": {\n          \"value\": 1e-6\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"a\": {\n      \"description\": \"Core sum computed as the sum of fixed components F1 to F11 plus \u03b4.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a_mod\": {\n      \"description\": \"Modulated core sum after initial sinusoidal adjustment.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"z\": {\n      \"description\": \"Sequentially modulated product of a_mod with multiple trigonometrically adjusted factors.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"phi\": {\n      \"description\": \"Learnable parameter defining the transformation weight in f_adapt; also used for negative branch correction.\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"w\": {\n      \"description\": \"Weight computed from phi as (phi \u2013 0.5)/phi for f_adapt transformation.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_adapt\": {\n      \"description\": \"Adaptive transformation function of z with piecewise softsign corrections and clipping for extreme positive values.\",\n      \"range\": {\n        \"min\": \"-40\",\n        \"max\": \"40\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"c0\": {\n      \"description\": \"Fixed polynomial coefficient for T (order 0).\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"c1\": {\n      \"description\": \"Fixed polynomial coefficient for T (order 1).\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"c2\": {\n      \"description\": \"Fixed polynomial coefficient for T (order 2).\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"c3\": {\n      \"description\": \"Fixed polynomial coefficient for T (order 3).\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"c4\": {\n      \"description\": \"Fixed polynomial coefficient for T (order 4).\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"c5\": {\n      \"description\": \"Fixed polynomial coefficient for T (order 5).\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"c6\": {\n      \"description\": \"Fixed polynomial coefficient for T (order 6).\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"c7\": {\n      \"description\": \"Fixed polynomial coefficient for T (order 7).\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"c8\": {\n      \"description\": \"Fixed polynomial coefficient for T (order 8).\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"c9\": {\n      \"description\": \"Fixed polynomial coefficient for T (order 9).\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"c10\": {\n      \"description\": \"Fixed polynomial coefficient for T (order 10).\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"c11\": {\n      \"description\": \"Fixed polynomial coefficient for T (order 11).\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"c12\": {\n      \"description\": \"Fixed polynomial coefficient for T (order 12).\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"c13\": {\n      \"description\": \"Fixed polynomial coefficient for T (order 13).\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"c14\": {\n      \"description\": \"Fixed polynomial coefficient for T (order 14).\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"c15\": {\n      \"description\": \"Fixed polynomial coefficient for T (order 15).\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"c16\": {\n      \"description\": \"Fixed polynomial coefficient for T (order 16).\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"T\": {\n      \"description\": \"Dynamic threshold computed as an extended polynomial in a up to a^16.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"extra\": {\n      \"description\": \"Extra composite term capturing layered nonlinear modulations of a and z.\",\n      \"range\": {\n        \"min\": \"0\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"Exponent\": {\n      \"description\": \"Final exponent factor derived from logarithmic and trigonometric modulation of a.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f(x)\": {\n      \"description\": \"Final transformed signal computed as sign(z) times the product [f_adapt(z)\u00b7T\u00b7extra] raised to Exponent.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Learnable base utility parameter.\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": -10,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Learnable scaling parameter for the transformed signal.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed as beta plus gamma times f(x).\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"P(accept=1)\": {\n      \"description\": \"Acceptance probability computed using the logistic function on U.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA richly nonlinear utility-based model that calculates a core sum \u201ca\u201d from 11 fixed components and a constant, applies successive sinusoidal and cosine modulations to yield an intermediate signal z, and then employs a piecewise adaptive function f_adapt with softsign corrections. A dynamic threshold polynomial T and an extra composite term further nonlinearly transform the signal, with an exponent modulated by additional trigonometric and logarithmic factors. The final transformed signal f(x) is scaled by a learnable parameter gamma and offset by beta to compute latent utility U, which is mapped via a logistic function to predict responder\u2019s binary (accept/reject) decision. Three learnable parameters (beta \u2208 [\u201310,10], gamma \u2208 [0,10], phi \u2208 [0.5,1.5]) ensure parameter recovery and robust predictions.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: a = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + \u03b4  \na_mod = 1.08 \u00b7 a \u00b7 (1 + 0.012 \u00b7 sin(a + 0.045))  \nz = a_mod \u00b7 (1 + 0.008 \u00b7 cos(a + 0.065)) \u00b7 (1 + 0.005 \u00b7 sin(a + 0.115)) \u00b7 (1 + 0.004 \u00b7 cos(a + 0.085)) \u00b7 (1 + 0.006 \u00b7 (sin(a + 0.035) \u00b7 cos(a + 0.055))) \u00b7 (1 + 0.003 \u00b7 (sin(a + 0.03) \u00b7 cos(a + 0.05)))  \nw = (phi - 0.5) / phi  \nf_adapt(z) = { if z \u2265 0 then clip[1.002 \u00b7 (z^w \u00b7 (ln(1+z))^(1-w)) \u00b7 (z/(1+|z|)), -40, 40] else phi \u00b7 ( ( (z + 10\u207b\u2076)/(1+|z + 10\u207b\u2076|) )^10 ) }  \nT = c\u2080 + c\u2081\u00b7a + c\u2082\u00b7a\u00b2 + c\u2083\u00b7a\u00b3 + c\u2084\u00b7a\u2074 + c\u2085\u00b7a\u2075 + c\u2086\u00b7a\u2076 + c\u2087\u00b7a\u2077 + c\u2088\u00b7a\u2078 + c\u2089\u00b7a\u2079 + c\u2081\u2080\u00b7a\u00b9\u2070 + c\u2081\u2081\u00b7a\u00b9\u00b9 + c\u2081\u2082\u00b7a\u00b9\u00b2 + c\u2081\u2083\u00b7a\u00b9\u00b3 + c\u2081\u2084\u00b7a\u00b9\u2074 + c\u2081\u2085\u00b7a\u00b9\u2075 + c\u2081\u2086\u00b7a\u00b9\u2076  \nextra = { exp(\u2013a/0.1) \u00b7 (z/(1+|z|)) \u00b7 (1 + 0.005 \u00b7 sin(1/(1+a))) \u00b7 (1 + 0.002 \u00b7 cos(0.5\u00b7a)) \u00b7 (1 + 0.003 \u00b7 cos(0.3\u00b7a))\u00b2 \u00b7 (1 + 0.004 \u00b7 cos(0.3\u00b7a))\u00b2 \u00b7 (1 + 0.0025 \u00b7 cos(0.7\u00b7a)) \u00b7 (1 + tanh(0.05\u00b7a)) \u00b7 (1 + sigmoid(0.01\u00b7a)) \u00b7 (1 + 0.002 \u00b7 cos(3\u00b7a)) \u00b7 (1 + 0.002 \u00b7 sin(2.5\u00b7a) + 0.001 \u00b7 cos(3.5\u00b7a) + 0.0015 \u00b7 sin(3\u00b7a)) \u00b7 [1.07 \u00b7 softplus(0.865/(1+a)) + 0.15 \u00b7 (0.865/(1+a)) + 0.5 \u00b7 (0.865/(1+a)) + 0.006 \u00b7 a] \u00b7 (1 \u2013 0.002 \u00b7 cos(a)) \u00b7 (1 \u2013 0.0025 \u00b7 cos(2.5\u00b7a)) \u00b7 (1 + 0.001 \u00b7 a) \u00b7 (1 + cosh(0.001\u00b7a))^(2+0.0005\u00b7a) + 10\u207b\u2076 }^(0.9478+0.00018\u00b7ln(1+a)) \u00b7 (1 + tanh(0.05\u00b7a))  \nExponent = (0.9478 + 0.00018\u00b7ln(1+a)) \u00b7 [1 + 0.003 \u00b7 sin(2\u00b7a) + 0.001 \u00b7 cos(3\u00b7a) + 0.0025 \u00b7 cos(0.7\u00b7a) + 0.004 \u00b7 sin(2.5\u00b7a) + 0.002 \u00b7 cos(3.5\u00b7a) + 0.001 \u00b7 (sin(2.5\u00b7a) \u00b7 cos(3\u00b7a)) + 0.002 \u00b7 sin(2.5\u00b7a)]  \nf(x) = sign(z) \u00b7 { [ f_adapt(z) \u00b7 T \u00b7 extra ]^(Exponent) }  \nU = beta + gamma \u00b7 f(x)  \nP(accept=1) = 1/(1 + exp(\u2013U))\nSummary: A richly nonlinear utility-based model that calculates a core sum \u201ca\u201d from 11 fixed components and a constant, applies successive sinusoidal and cosine modulations to yield an intermediate signal z, and then employs a piecewise adaptive function f_adapt with softsign corrections. A dynamic threshold polynomial T and an extra composite term further nonlinearly transform the signal, with an exponent modulated by additional trigonometric and logarithmic factors. The final transformed signal f(x) is scaled by a learnable parameter gamma and offset by beta to compute latent utility U, which is mapped via a logistic function to predict responder\u2019s binary (accept/reject) decision. Three learnable parameters (beta \u2208 [\u201310,10], gamma \u2208 [0,10], phi \u2208 [0.5,1.5]) ensure parameter recovery and robust predictions.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, phi=1.0, beta=0.0, gamma=1.0):\n    \"\"\"\n    Simulates the mathematical model for each trial in the provided data.\n\n    Args:\n        trial_data (list): A list of dictionaries, where each dictionary represents a trial\n                           and contains the values for F1 to F11.\n        phi (float): Learnable parameter defining the transformation weight in f_adapt.\n        beta (float): Learnable base utility parameter.\n        gamma (float): Learnable scaling parameter for the transformed signal.\n\n    Returns:\n        list: A list of model predictions (acceptance probabilities) for each trial.\n    \"\"\"\n    model_predictions = []\n    delta = 1e-06  # Fixed constant\n\n    # Fixed polynomial coefficients for T\n    c0 = -0.1\n    c1 = 0.5\n    c2 = 0.01\n    c3 = 0.0003\n    c4 = 0.00001\n    c5 = -2e-7\n    c6 = 5e-9\n    c7 = -1e-10\n    c8 = 2e-12\n    c9 = -3e-14\n    c10 = 4e-16\n    c11 = -5e-18\n    c12 = 6e-20\n    c13 = -7e-22\n    c14 = 8e-24\n    c15 = -9e-26\n    c16 = 10e-28\n\n    for trial in trial_data:\n        # 1. Compute 'a'\n        a = (\n            trial.get(\"splitperc_opp\", 0) +  #F1\n            trial.get(\"splitperc_self\", 0) + #F2\n            trial.get(\"token_opp\", 0) + #F3\n            trial.get(\"token_self\", 0) + #F4\n            trial.get(\"combined_earning\", 0) + #F5\n            trial.get(\"split_opp\", 0) + #F6\n            trial.get(\"split_self\", 0) + #F7\n            trial.get(\"trial_number\", 0) + #F8\n            trial.get(\"trial_type\", 0) + #F9\n            trial.get(\"trial_role\", 0) + #F10\n            trial.get(\"ID\", 0) + #F11\n            delta\n        )\n\n        # 2. Compute 'a_mod'\n        a_mod = 1.08 * a * (1 + 0.012 * math.sin(a + 0.045))\n\n        # 3. Compute 'z'\n        z = a_mod * (1 + 0.008 * math.cos(a + 0.065)) * (1 + 0.005 * math.sin(a + 0.115)) * (\n            1 + 0.004 * math.cos(a + 0.085)) * (1 + 0.006 * (math.sin(a + 0.035) * math.cos(a + 0.055))) * (\n            1 + 0.003 * (math.sin(a + 0.03) * math.cos(a + 0.05)))\n\n        # 4. Compute 'w'\n        w = (phi - 0.5) / phi\n\n        # 5. Define f_adapt(z)\n        def f_adapt(z_val):\n            if z_val >= 0:\n                term1 = 1.002 * (z_val**w)\n                term2 = (math.log(1 + z_val))**(1 - w)\n                term3 = z_val / (1 + abs(z_val))\n\n                if z_val == 0:\n                    adapt_val = 0.0\n                else:\n                    adapt_val = term1 * term2 * term3\n\n                return max(min(adapt_val, 40), -40)  # clip[-40, 40]\n            else:\n                return phi * (((z_val + 10**-6) / (1 + abs(z_val + 10**-6)))**10)\n\n        # 6. Compute 'T'\n        T = c0 + c1*a + c2*(a**2) + c3*(a**3) + c4*(a**4) + c5*(a**5) + c6*(a**6) + c7*(a**7) + c8*(a**8) + c9*(a**9) + c10*(a**10) + c11*(a**11) + c12*(a**12) + c13*(a**13) + c14*(a**14) + c15*(a**15) + c16*(a**16)\n\n        # 7. Compute 'extra'\n        def sigmoid(x):\n            return 1 / (1 + math.exp(-x))\n\n        def softplus(x):\n            return math.log(1 + math.exp(x))\n        \n        def cosh(x):\n            return (math.exp(x) + math.exp(-x)) / 2\n\n        term1 = math.exp(-a / 0.1) * (z / (1 + abs(z))) * (1 + 0.005 * math.sin(1 / (1 + a))) * (1 + 0.002 * math.cos(0.5 * a))\n        term2 = (1 + 0.003 * math.cos(0.3 * a))**2 * (1 + 0.004 * math.cos(0.3 * a))**2 * (1 + 0.0025 * math.cos(0.7 * a))\n        term3 = (1 + math.tanh(0.05 * a)) * (1 + sigmoid(0.01 * a)) * (1 + 0.002 * math.cos(3 * a))\n        term4 = 1 + 0.002 * math.sin(2.5 * a) + 0.001 * math.cos(3.5 * a) + 0.0015 * math.sin(3 * a)\n        term5 = 1.07 * softplus(0.865 / (1 + a)) + 0.15 * (0.865 / (1 + a)) + 0.5 * (0.865 / (1 + a)) + 0.006 * a\n        term6 = (1 - 0.002 * math.cos(a)) * (1 - 0.0025 * math.cos(2.5 * a)) * (1 + 0.001 * a) * (1 + cosh(0.001 * a))**(2 + 0.0005 * a) + 10**-6\n\n        extra = (term1 * term2 * term3 * term4 * term5 * term6)**(0.9478 + 0.00018 * math.log(1 + a)) * (1 + math.tanh(0.05 * a))\n\n\n        # 8. Compute 'Exponent'\n        Exponent = (0.9478 + 0.00018 * math.log(1 + a)) * (1 + 0.003 * math.sin(2 * a) + 0.001 * math.cos(3 * a) + 0.0025 * math.cos(0.7 * a) +\n                                                             0.004 * math.sin(2.5 * a) + 0.002 * math.cos(3.5 * a) + 0.001 * (math.sin(2.5 * a) * math.cos(3 * a)) + 0.002 * math.sin(2.5 * a))\n        # 9. Compute 'f(x)'\n        fx = math.copysign(1, z) * ((f_adapt(z) * T * extra)**Exponent)\n\n\n        # 10. Compute 'U'\n        U = beta + gamma * fx\n\n        # 11. Compute 'P(accept=1)'\n        try:\n            p_accept = 1 / (1 + math.exp(-U))\n        except OverflowError:\n            p_accept = 0.0 if U < 0 else 1.0\n\n        model_predictions.append(p_accept)\n\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.5503663003663004,
  "fitting_results": [
    {
      "phi": 0.9077474500444772,
      "beta": -10.0,
      "gamma": 6.906667207342446,
      "success": true,
      "log_likelihood": -24.953979470262787,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.1026292433029785,
      "beta": -10.0,
      "gamma": 1.9273298231588987,
      "success": true,
      "log_likelihood": -24.953298502232386,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.8888181785066496,
      "beta": -2.0781351419014427,
      "gamma": 7.913006726462809,
      "success": true,
      "log_likelihood": -24.89771432505408,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3333333333333333,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5125060053224619,
      "beta": -10.0,
      "gamma": 9.976298519967484,
      "success": true,
      "log_likelihood": -24.953434695838467,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.6357387015188544,
      "beta": -10.0,
      "gamma": 6.717923599120283,
      "success": true,
      "log_likelihood": -24.953389297969775,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.0301497155466834,
      "beta": 0.28404660775441465,
      "gamma": 2.0759806342851994,
      "success": true,
      "log_likelihood": -23.545973164043573,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.3964460460600616,
      "beta": 10.0,
      "gamma": 5.804725931798526,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.3926734642732372,
      "beta": 0.8148755566841287,
      "gamma": 8.169935307766753,
      "success": true,
      "log_likelihood": -22.91451005141362,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.6485239814433038,
      "beta": 10.0,
      "gamma": 7.87261647915496,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5094503520799213,
      "beta": -9.999999999999998,
      "gamma": 9.390872020671004,
      "success": true,
      "log_likelihood": -24.95348009370716,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3333333333333333,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.341776973529802,
      "beta": -10.0,
      "gamma": 8.38100918402317,
      "success": true,
      "log_likelihood": -24.95338929796977,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.4387987126134312,
      "beta": -10.0,
      "gamma": 2.6546862791216164,
      "success": true,
      "log_likelihood": -24.953934072394095,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.7397959302356334,
      "beta": -10.0,
      "gamma": 2.5340457227469324,
      "success": true,
      "log_likelihood": -24.953434695838467,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.8797465529544469,
      "beta": 10.0,
      "gamma": 2.9470464118245987,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5592741479742726,
      "beta": 10.0,
      "gamma": 7.836087576376421,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.288197465983277,
      "beta": 10.0,
      "gamma": 2.732866094191605,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.3037175312226594,
      "beta": 10.0,
      "gamma": 3.757272600754326,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.1896832984534553,
      "beta": 10.0,
      "gamma": 9.865180422955499,
      "success": true,
      "log_likelihood": -16.27763329973089,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.467716549620329,
      "beta": 10.0,
      "gamma": 0.9810095266609553,
      "success": true,
      "log_likelihood": -15.27767869783462,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.2558967896502113,
      "beta": 10.0,
      "gamma": 7.768919685481178,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5189531610746617,
      "beta": -1.2473296796761213,
      "gamma": 5.786061369406959,
      "success": true,
      "log_likelihood": -24.730616751937752,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.6882670709938352,
      "beta": 10.0,
      "gamma": 4.600093605936664,
      "success": true,
      "log_likelihood": -16.27763329973089,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.9449901466666436,
      "beta": -10.0,
      "gamma": 6.228460818165523,
      "success": true,
      "log_likelihood": -24.95352549157585,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.1179088139539268,
      "beta": -2.0785618552294416,
      "gamma": 1.9308404855982364,
      "success": true,
      "log_likelihood": -24.897714327522152,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.758408218170491,
      "beta": -10.0,
      "gamma": 0.8335519425368776,
      "success": true,
      "log_likelihood": -24.953298502232386,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.0339206762671167,
      "beta": -0.6788757134662187,
      "gamma": 5.445468583073021,
      "success": true,
      "log_likelihood": -24.45095757550933,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.877890644635124,
      "beta": -1.2474445028010899,
      "gamma": 9.002314779829963,
      "success": true,
      "log_likelihood": -24.730616750305998,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.6194089547842491,
      "beta": -10.0,
      "gamma": 4.657690823702087,
      "success": true,
      "log_likelihood": -24.953661685181935,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.687054670874941,
      "beta": 10.0,
      "gamma": 4.364915653648145,
      "success": true,
      "log_likelihood": -15.27767869783462,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.3732732461396133,
      "beta": 10.0,
      "gamma": 6.625129240416597,
      "success": true,
      "log_likelihood": -19.2774971054197,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.2266352220143553,
      "beta": 10.0,
      "gamma": 3.5796197295377685,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.1528014689684234,
      "beta": -10.0,
      "gamma": 2.9069950168445424,
      "success": true,
      "log_likelihood": -24.953979470262787,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.7035489690552705,
      "beta": -10.0,
      "gamma": 1.3047711782638172,
      "success": true,
      "log_likelihood": -24.953434695838464,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.3559917804869839,
      "beta": -10.0,
      "gamma": 7.172111969909545,
      "success": true,
      "log_likelihood": -24.953480093707164,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.8200986991342388,
      "beta": 10.0,
      "gamma": 8.217800844743351,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.6914612645225331,
      "beta": 0.2840923804527866,
      "gamma": 2.8280815190954014,
      "success": true,
      "log_likelihood": -23.545973163929208,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.063493135955283,
      "beta": 1.5230106329082778,
      "gamma": 5.974363252754679,
      "success": true,
      "log_likelihood": -22.157938154735493,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.0617680824247562,
      "beta": -6.324606474699997,
      "gamma": 9.553346648225654,
      "success": true,
      "log_likelihood": -24.95331288671739,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5899654806628877,
      "beta": 0.8148730546237369,
      "gamma": 7.47807461048374,
      "success": true,
      "log_likelihood": -22.914510051413487,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.203553974239464,
      "beta": 10.0,
      "gamma": 8.339769239427822,
      "success": true,
      "log_likelihood": -14.277724095938346,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.6223329390374521,
      "beta": -0.1926580429362344,
      "gamma": 8.502165326828798,
      "success": true,
      "log_likelihood": -24.056945188729628,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.1438655084025293,
      "beta": -10.0,
      "gamma": 4.908405374031149,
      "success": true,
      "log_likelihood": -24.95375248091932,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5991357829120818,
      "beta": 10.0,
      "gamma": 4.695786429144481,
      "success": true,
      "log_likelihood": -12.277814892145805,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.6487203637688379,
      "beta": -1.2474001324676933,
      "gamma": 5.852469035041276,
      "success": true,
      "log_likelihood": -24.730616750519015,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3333333333333333,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5630433690732337,
      "beta": -0.19265795296054833,
      "gamma": 4.434403501821553,
      "success": true,
      "log_likelihood": -24.056945188729404,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.3178066902231182,
      "beta": 3.0655081601095375,
      "gamma": 4.507269116001899,
      "success": true,
      "log_likelihood": -21.270320873553604,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.4550907463886595,
      "beta": -2.078294485775418,
      "gamma": 3.582274515253344,
      "success": true,
      "log_likelihood": -24.8977143241082,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.7636285743461451,
      "beta": -10.0,
      "gamma": 0.23203516546805747,
      "success": true,
      "log_likelihood": -24.95348009370716,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.2506942795903784,
      "beta": -10.0,
      "gamma": 3.904054326607503,
      "success": true,
      "log_likelihood": -24.953434695838464,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.4986179477057266,
      "beta": -2.078072068793874,
      "gamma": 3.7635285938182905,
      "success": true,
      "log_likelihood": -24.897714326043644,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.0721006913399609,
      "beta": 1.5230397544844674,
      "gamma": 4.267656264971508,
      "success": true,
      "log_likelihood": -22.157938154832678,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.3431114104046795,
      "beta": -10.0,
      "gamma": 7.192993163287852,
      "success": true,
      "log_likelihood": -24.9538886745254,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.8183555226644447,
      "beta": -2.07831465142015,
      "gamma": 3.603946022481338,
      "success": true,
      "log_likelihood": -24.89771432414722,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.304266450429873,
      "beta": -0.6790640151655222,
      "gamma": 5.596665750092416,
      "success": true,
      "log_likelihood": -24.45095756851245,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.7473252942518667,
      "beta": -10.0,
      "gamma": 9.113114776886835,
      "success": true,
      "log_likelihood": -24.95348009370716,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.7516647072134246,
      "beta": -10.0,
      "gamma": 5.353765028923316,
      "success": true,
      "log_likelihood": -24.953570889444546,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.0180328863662753,
      "beta": -10.0,
      "gamma": 6.81902452074463,
      "success": true,
      "log_likelihood": -24.953661685181938,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.177270480306671,
      "beta": 10.0,
      "gamma": 4.53898465155264,
      "success": true,
      "log_likelihood": -15.27767869783462,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.3134127393170127,
      "beta": -10.0,
      "gamma": 8.565358732849294,
      "success": true,
      "log_likelihood": -24.953934072394095,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.2502813134435096,
      "beta": 10.0,
      "gamma": 7.531084141200406,
      "success": true,
      "log_likelihood": -18.27754250352343,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.8852122053468662,
      "beta": -0.1926573066012942,
      "gamma": 2.312807019202243,
      "success": true,
      "log_likelihood": -24.056945188727887,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.6417915224127475,
      "beta": -9.960966072557378,
      "gamma": 7.2150487340046645,
      "success": true,
      "log_likelihood": -24.953298502985376,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.480464740872729,
      "beta": -10.0,
      "gamma": 0.13361739384131766,
      "success": true,
      "log_likelihood": -24.953979470262787,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.8785540419097939,
      "beta": -10.0,
      "gamma": 5.637725420960484,
      "success": true,
      "log_likelihood": -24.95338929796977,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5321393769695685,
      "beta": -10.0,
      "gamma": 1.5831185196292852,
      "success": true,
      "log_likelihood": -24.95375248091932,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.6266051863264356,
      "beta": -1.2474274182759388,
      "gamma": 8.02528304475044,
      "success": true,
      "log_likelihood": -24.730616750325787,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5610201961755021,
      "beta": 10.0,
      "gamma": 4.0236073067939735,
      "success": true,
      "log_likelihood": -14.277724095938348,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.3151552118681697,
      "beta": 10.0,
      "gamma": 4.129450608057853,
      "success": true,
      "log_likelihood": -16.277633299730887,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.9368632975591314,
      "beta": -1.2474453112439823,
      "gamma": 5.210337264449494,
      "success": true,
      "log_likelihood": -24.730616750307014,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.7152832447410233,
      "beta": 10.0,
      "gamma": 2.399656777099206,
      "success": true,
      "log_likelihood": -14.27772409593835,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5215719409642897,
      "beta": -10.0,
      "gamma": 6.997638383762837,
      "success": true,
      "log_likelihood": -24.953934072394095,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.8341956379922052,
      "beta": -10.0,
      "gamma": 7.0047955764778145,
      "success": true,
      "log_likelihood": -24.9538886745254,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.3066999785379907,
      "beta": -2.0783070257085354,
      "gamma": 3.156774009194211,
      "success": true,
      "log_likelihood": -24.897714324128255,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.4860234425825043,
      "beta": 10.0,
      "gamma": 2.5016707624356616,
      "success": true,
      "log_likelihood": -19.2774971054197,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.2270641982444166,
      "beta": -6.145082583619215,
      "gamma": 0.7795654532119256,
      "success": true,
      "log_likelihood": -24.953319089829407,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.9086692418384439,
      "beta": 1.5228455102948524,
      "gamma": 1.473721343095481,
      "success": true,
      "log_likelihood": -22.15793815683104,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.6848196339266139,
      "beta": 10.0,
      "gamma": 6.60673165085765,
      "success": true,
      "log_likelihood": -13.277769494042078,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.0021019268575182,
      "beta": -10.0,
      "gamma": 7.546656551734188,
      "success": true,
      "log_likelihood": -24.95402486813148,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.0109410810708537,
      "beta": -0.19265458757513546,
      "gamma": 5.746747607963942,
      "success": true,
      "log_likelihood": -24.05694518872393,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.487795092531143,
      "beta": -10.0,
      "gamma": 8.432392129136703,
      "success": true,
      "log_likelihood": -24.953979470262784,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.0574709212585596,
      "beta": -2.078195104265234,
      "gamma": 8.217215890026777,
      "success": true,
      "log_likelihood": -24.897714324436865,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.9495303545352248,
      "beta": 10.0,
      "gamma": 8.516134900371338,
      "success": true,
      "log_likelihood": -14.277724095938348,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.9279326611138936,
      "beta": -9.999999999999998,
      "gamma": 8.726343270775535,
      "success": true,
      "log_likelihood": -24.953934072394095,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.001591572800339,
      "beta": -10.0,
      "gamma": 8.193373683451954,
      "success": true,
      "log_likelihood": -24.953298502232386,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.0262194155736033,
      "beta": -0.19264895339445304,
      "gamma": 4.13818710648483,
      "success": true,
      "log_likelihood": -24.05694518872806,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.1451671011954774,
      "beta": -10.0,
      "gamma": 4.249615137474678,
      "success": true,
      "log_likelihood": -24.95393407239409,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.322950475109128,
      "beta": 1.523017815200639,
      "gamma": 3.77804062563818,
      "success": true,
      "log_likelihood": -22.15793815474646,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.201372073654977,
      "beta": -10.0,
      "gamma": 6.582808956947703,
      "success": true,
      "log_likelihood": -24.95375248091932,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.4950942807870455,
      "beta": 10.0,
      "gamma": 6.017618934475019,
      "success": true,
      "log_likelihood": -13.277769494042078,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.320902965109354,
      "beta": -10.0,
      "gamma": 9.797247968352389,
      "success": true,
      "log_likelihood": -24.953343900101082,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.1508993566030434,
      "beta": 1.5229934521679835,
      "gamma": 9.14248088416626,
      "success": true,
      "log_likelihood": -22.15793815474382,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "phi": {
        "r": 0.03175356964971696,
        "p": 0.753807703674388
      },
      "beta": {
        "r": 0.6772836991023876,
        "p": 1.0172034300085205e-14
      },
      "gamma": {
        "r": -0.011561167726224487,
        "p": 0.9091094117172442
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 53.92269381257265,
  "bic_results": {
    "average_bic": 53.92269381257265,
    "individual_bics": [
      60.6585157558939,
      60.6571538198331,
      60.54598546547649,
      60.65742620704526,
      60.65733541130788,
      57.842503143455474,
      33.3062773958674,
      56.57957691819557,
      33.3062773958674,
      60.657517002782654,
      60.65733541130787,
      60.65842496015652,
      60.65742620704526,
      33.3062773958674,
      33.3062773958674,
      33.3062773958674,
      33.3062773958674,
      43.305823414830115,
      41.305914211037575,
      33.3062773958674,
      60.21179031924383,
      43.305823414830115,
      60.65760779852003,
      60.54598547041263,
      60.6571538198331,
      59.652471966387,
      60.21179031598032,
      60.657880185732196,
      41.305914211037575,
      49.30555102620774,
      33.3062773958674,
      60.6585157558939,
      60.65742620704526,
      60.657517002782654,
      33.3062773958674,
      57.84250314322675,
      55.06643312483932,
      60.65718258880311,
      56.5795769181953,
      39.30600500724502,
      58.86444719282758,
      60.65806177720697,
      35.30618659965994,
      60.211790316406365,
      58.86444719282714,
      53.29119856247554,
      60.54598546358473,
      60.657517002782654,
      60.65742620704526,
      60.54598546745562,
      55.06643312503368,
      60.65833416441913,
      60.545985463662774,
      59.65247195239323,
      60.657517002782654,
      60.657698594257425,
      60.65788018573221,
      41.305914211037575,
      60.65842496015652,
      47.3056418224152,
      58.8644471928241,
      60.65715382133908,
      60.6585157558939,
      60.65733541130787,
      60.65806177720697,
      60.2117903160199,
      39.30600500724503,
      43.3058234148301,
      60.211790315982356,
      39.306005007245034,
      60.65842496015652,
      60.65833416441913,
      60.545985463624845,
      49.30555102620774,
      60.65719499502714,
      55.066433129030415,
      37.306095803452486,
      60.658606551631294,
      58.864447192816186,
      60.6585157558939,
      60.545985464242065,
      39.30600500724503,
      60.65842496015652,
      60.6571538198331,
      58.86444719282446,
      60.65842496015651,
      55.06643312486125,
      60.65806177720697,
      37.306095803452486,
      60.65724461557049,
      55.066433124855976
    ],
    "group_enabled": false,
    "group_bics": null,
    "num_parameters": 3,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- phi: r = 0.032\n- beta: r = 0.677\n- gamma: r = -0.012",
  "previous_models": [
    "Specification: a = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + \u03b4  \na_mod = 1.08 \u00b7 a \u00b7 (1 + 0.012 \u00b7 sin(a + 0.045))  \nz = a_mod \u00b7 (1 + 0.008 \u00b7 cos(a + 0.065)) \u00b7 (1 + 0.005 \u00b7 sin(a + 0.115)) \u00b7 (1 + 0.004 \u00b7 cos(a + 0.085)) \u00b7 (1 + 0.006 \u00b7 (sin(a + 0.035) \u00b7 cos(a + 0.055))) \u00b7 (1 + 0.003 \u00b7 (sin(a + 0.03) \u00b7 cos(a + 0.05)))  \nw = (phi - 0.5) / phi  \nf_adapt(z) = { if z \u2265 0 then clip[1.002 \u00b7 (z^w \u00b7 (ln(1+z))^(1-w)) \u00b7 (z/(1+|z|)), -40, 40] else phi \u00b7 ( ( (z + 10\u207b\u2076)/(1+|z + 10\u207b\u2076|) )^10 ) }  \nT = c\u2080 + c\u2081\u00b7a + c\u2082\u00b7a\u00b2 + c\u2083\u00b7a\u00b3 + c\u2084\u00b7a\u2074 + c\u2085\u00b7a\u2075 + c\u2086\u00b7a\u2076 + c\u2087\u00b7a\u2077 + c\u2088\u00b7a\u2078 + c\u2089\u00b7a\u2079 + c\u2081\u2080\u00b7a\u00b9\u2070 + c\u2081\u2081\u00b7a\u00b9\u00b9 + c\u2081\u2082\u00b7a\u00b9\u00b2 + c\u2081\u2083\u00b7a\u00b9\u00b3 + c\u2081\u2084\u00b7a\u00b9\u2074 + c\u2081\u2085\u00b7a\u00b9\u2075 + c\u2081\u2086\u00b7a\u00b9\u2076  \nextra = { exp(\u2013a/0.1) \u00b7 (z/(1+|z|)) \u00b7 (1 + 0.005 \u00b7 sin(1/(1+a))) \u00b7 (1 + 0.002 \u00b7 cos(0.5\u00b7a)) \u00b7 (1 + 0.003 \u00b7 cos(0.3\u00b7a))\u00b2 \u00b7 (1 + 0.004 \u00b7 cos(0.3\u00b7a))\u00b2 \u00b7 (1 + 0.0025 \u00b7 cos(0.7\u00b7a)) \u00b7 (1 + tanh(0.05\u00b7a)) \u00b7 (1 + sigmoid(0.01\u00b7a)) \u00b7 (1 + 0.002 \u00b7 cos(3\u00b7a)) \u00b7 (1 + 0.002 \u00b7 sin(2.5\u00b7a) + 0.001 \u00b7 cos(3.5\u00b7a) + 0.0015 \u00b7 sin(3\u00b7a)) \u00b7 [1.07 \u00b7 softplus(0.865/(1+a)) + 0.15 \u00b7 (0.865/(1+a)) + 0.5 \u00b7 (0.865/(1+a)) + 0.006 \u00b7 a] \u00b7 (1 \u2013 0.002 \u00b7 cos(a)) \u00b7 (1 \u2013 0.0025 \u00b7 cos(2.5\u00b7a)) \u00b7 (1 + 0.001 \u00b7 a) \u00b7 (1 + cosh(0.001\u00b7a))^(2+0.0005\u00b7a) + 10\u207b\u2076 }^(0.9478+0.00018\u00b7ln(1+a)) \u00b7 (1 + tanh(0.05\u00b7a))  \nExponent = (0.9478 + 0.00018\u00b7ln(1+a)) \u00b7 [1 + 0.003 \u00b7 sin(2\u00b7a) + 0.001 \u00b7 cos(3\u00b7a) + 0.0025 \u00b7 cos(0.7\u00b7a) + 0.004 \u00b7 sin(2.5\u00b7a) + 0.002 \u00b7 cos(3.5\u00b7a) + 0.001 \u00b7 (sin(2.5\u00b7a) \u00b7 cos(3\u00b7a)) + 0.002 \u00b7 sin(2.5\u00b7a)]  \nf(x) = sign(z) \u00b7 { [ f_adapt(z) \u00b7 T \u00b7 extra ]^(Exponent) }  \nU = beta + gamma \u00b7 f(x)  \nP(accept=1) = 1/(1 + exp(\u2013U))\nSummary: A richly nonlinear utility-based model that calculates a core sum \u201ca\u201d from 11 fixed components and a constant, applies successive sinusoidal and cosine modulations to yield an intermediate signal z, and then employs a piecewise adaptive function f_adapt with softsign corrections. A dynamic threshold polynomial T and an extra composite term further nonlinearly transform the signal, with an exponent modulated by additional trigonometric and logarithmic factors. The final transformed signal f(x) is scaled by a learnable parameter gamma and offset by beta to compute latent utility U, which is mapped via a logistic function to predict responder\u2019s binary (accept/reject) decision. Three learnable parameters (beta \u2208 [\u201310,10], gamma \u2208 [0,10], phi \u2208 [0.5,1.5]) ensure parameter recovery and robust predictions.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 53.92269381257265\nOverall Accuracy: 0.5504\n\nParameter Recovery:\n- phi: r = 0.032\n- beta: r = 0.677\n- gamma: r = -0.012"
  ]
}