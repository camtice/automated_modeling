{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "<think>\nFor run 132, further push the nonlinearity\u2019s complexity and robustness. In these instructions, narrow the positive clipping range further (from \u00b140 to \u00b135) to better constrain extreme values and increase the negative branch exponent from 10 to 11. Extend the dynamic threshold polynomial T to include terms up to a^20 with appropriate fixed coefficients to capture more subtle nonlinear scaling. In the extra composite term, add an additional sigmoid factor (for example, 1 + sigmoid(0.03\u00d7a)) and an extra tanh multiplier (e.g., 1 + tanh(0.08\u00d7a)). Also incorporate an additional cosine modulation component, such as cos(3.1\u00d7a), within the composite function to capture oscillatory behavior. Finally, modify the final exponent by incorporating an extra sine\u2013cosine modulation factor like [1 + 0.002\u00d7sin(2.5\u00d7a) + 0.001\u00d7cos(3.5\u00d7a) + 0.0017\u00d7sin(3.1\u00d7a)] to further smooth the final mapping. Retain exactly three learnable parameters with bounds: beta in [\u201310, 10], gamma in [0, 10], and phi in [0.5, 1.5]. Be creative and incorporate innovative functions (softplus, softsign, sigmoid, tanh, cosine) to yield better BIC, improved parameter recovery, and higher accuracy.\n</think>\nNew Instructions for Run 132:\n1. Compute the core sum \u201ca\u201d as the sum of fixed components F1 through F11 plus a small constant \u03b4.\n2. Compute a_mod = 1.08 \u00d7 a \u00d7 [1 + 0.012 \u00d7 sin(a + 0.045)].\n3. Sequentially modulate a_mod with:\n\u2003\u2003\u2022 [1 + 0.008 \u00d7 cos(a + 0.065)]\n\u2003\u2003\u2022 [1 + 0.005 \u00d7 sin(a + 0.115)]\n\u2003\u2003\u2022 [1 + 0.004 \u00d7 cos(a + 0.085)]\n\u2003\u2003\u2022 [1 + 0.006 \u00d7 (sin(a + 0.035) \u00d7 cos(a + 0.055))]\n\u2003\u2003\u2022 [1 + 0.003 \u00d7 (sin(a + 0.03) \u00d7 cos(a + 0.05))]\nDefine the resulting product as z.\n4. Compute w = (phi \u2013 0.5)/phi.\n\u2003\u2003\u2022 For z \u2265 0, define the adaptive transformation as:  \n\u2003\u2003\u2003f_adapt(z) = 1.002 \u00d7 [z^w \u00d7 (ln(1+z))^(1\u2013w)] \u00d7 softsign(z), where softsign(z) = z/(1+|z|); then clip the output to \u00b135.\n\u2003\u2003\u2022 For z < 0, define f_adapt(z) = phi \u00d7 [softsign(z + \u0394_shift)]^11, with \u0394_shift = 1\u00d710\u207b\u2076.\n5. Define the dynamic threshold T as a fixed polynomial in a with terms up to a^20 (use fixed coefficients, e.g., c\u2080 through c\u2082\u2080) to allow richer scaling.\n6. Define the extra composite term extra as:\n\u2003\u2003extra = { exp(\u2013a/0.1) \u00d7 [z/(1+|z|)] \u00d7 [1 + 0.005\u00d7sin(1/(1+a))] \u00d7 [1 + 0.002\u00d7cos(0.5\u00d7a)] \u00d7 ([1+0.003\u00d7cos(0.3\u00d7a)]\u00b2) \u00d7 ([1+0.004\u00d7cos(0.3\u00d7a)]\u00b2) \u00d7 [1+0.0025\u00d7cos(0.7\u00d7a)] \u00d7 [1+tanh(0.05\u00d7a)] \u00d7 [1+sigmoid(0.01\u00d7a)] \u00d7 [1 + 0.002\u00d7cos(3\u00d7a)] \u00d7 [1 + 0.002\u00d7sin(2.5\u00d7a) + 0.001\u00d7cos(3.5\u00d7a) + 0.0015\u00d7sin(3\u00d7a)] \u00d7 [1 + sigmoid(0.03\u00d7a)] \u00d7 [1+tanh(0.07\u00d7a)] \u00d7 [1+cos(3.1\u00d7a)] \u00d7 [1.07\u00d7softplus(0.865/(1+a)) + 0.15\u00d7(0.865/(1+a)) + 0.5\u00d7(0.865/(1+a)) + 0.006\u00d7a] \u00d7 [1 \u2013 0.002\u00d7cos(a)] \u00d7 [1 \u2013 0.0025\u00d7cos(2.5\u00d7a)] \u00d7 [1+0.001\u00d7a] \u00d7 [1+cosh(0.001\u00d7a)]^(2+0.0005\u00d7a) + 1\u00d710\u207b\u2076 }^(0.9478 + 0.00018\u00d7ln(1+a)) multiplied by [1+tanh(0.05\u00d7a)].\n7. Update the final exponent as:\n\u2003\u2003Exponent = [0.9478 + 0.00018\u00d7ln(1+a)] \u00d7 [1 + 0.003\u00d7sin(2\u00d7a) + 0.001\u00d7cos(3\u00d7a) + 0.0025\u00d7cos(0.7\u00d7a) + 0.004\u00d7sin(2.5\u00d7a) + 0.002\u00d7cos(3.5\u00d7a) + 0.001\u00d7(sin(2.5\u00d7a)\u00d7cos(3\u00d7a)) + 0.002\u00d7sin(2.5\u00d7a)].\n8. Define the final transformed signal as:\n\u2003\u2003f(x) = sign(z) \u00d7 { [ f_adapt(z) \u00d7 T \u00d7 extra ]^(Exponent) }.\n9. Compute latent utility U = beta + gamma \u00d7 f(x) and then P(accept=1) = 1/(1 + exp(\u2013U)).\n10. Use exactly three learnable parameters with fixed bounds: beta \u2208 [\u201310, 10], gamma \u2208 [0, 10], and phi \u2208 [0.5, 1.5].\nEncourage the use of innovative functions (such as softplus, softsign, sigmoid, and tanh) and additional modulation to further enhance prediction accuracy, lower BIC, and improve parameter recovery.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: <think>\nFor run 132, further push the nonlinearity\u2019s complexity and robustness. In these instructions, narrow the positive clipping range further (from \u00b140 to \u00b135) to better constrain extreme values and increase the negative branch exponent from 10 to 11. Extend the dynamic threshold polynomial T to include terms up to a^20 with appropriate fixed coefficients to capture more subtle nonlinear scaling. In the extra composite term, add an additional sigmoid factor (for example, 1 + sigmoid(0.03\u00d7a)) and an extra tanh multiplier (e.g., 1 + tanh(0.08\u00d7a)). Also incorporate an additional cosine modulation component, such as cos(3.1\u00d7a), within the composite function to capture oscillatory behavior. Finally, modify the final exponent by incorporating an extra sine\u2013cosine modulation factor like [1 + 0.002\u00d7sin(2.5\u00d7a) + 0.001\u00d7cos(3.5\u00d7a) + 0.0017\u00d7sin(3.1\u00d7a)] to further smooth the final mapping. Retain exactly three learnable parameters with bounds: beta in [\u201310, 10], gamma in [0, 10], and phi in [0.5, 1.5]. Be creative and incorporate innovative functions (softplus, softsign, sigmoid, tanh, cosine) to yield better BIC, improved parameter recovery, and higher accuracy.\n</think>\nNew Instructions for Run 132:\n1. Compute the core sum \u201ca\u201d as the sum of fixed components F1 through F11 plus a small constant \u03b4.\n2. Compute a_mod = 1.08 \u00d7 a \u00d7 [1 + 0.012 \u00d7 sin(a + 0.045)].\n3. Sequentially modulate a_mod with:\n\u2003\u2003\u2022 [1 + 0.008 \u00d7 cos(a + 0.065)]\n\u2003\u2003\u2022 [1 + 0.005 \u00d7 sin(a + 0.115)]\n\u2003\u2003\u2022 [1 + 0.004 \u00d7 cos(a + 0.085)]\n\u2003\u2003\u2022 [1 + 0.006 \u00d7 (sin(a + 0.035) \u00d7 cos(a + 0.055))]\n\u2003\u2003\u2022 [1 + 0.003 \u00d7 (sin(a + 0.03) \u00d7 cos(a + 0.05))]\nDefine the resulting product as z.\n4. Compute w = (phi \u2013 0.5)/phi.\n\u2003\u2003\u2022 For z \u2265 0, define the adaptive transformation as:  \n\u2003\u2003\u2003f_adapt(z) = 1.002 \u00d7 [z^w \u00d7 (ln(1+z))^(1\u2013w)] \u00d7 softsign(z), where softsign(z) = z/(1+|z|); then clip the output to \u00b135.\n\u2003\u2003\u2022 For z < 0, define f_adapt(z) = phi \u00d7 [softsign(z + \u0394_shift)]^11, with \u0394_shift = 1\u00d710\u207b\u2076.\n5. Define the dynamic threshold T as a fixed polynomial in a with terms up to a^20 (use fixed coefficients, e.g., c\u2080 through c\u2082\u2080) to allow richer scaling.\n6. Define the extra composite term extra as:\n\u2003\u2003extra = { exp(\u2013a/0.1) \u00d7 [z/(1+|z|)] \u00d7 [1 + 0.005\u00d7sin(1/(1+a))] \u00d7 [1 + 0.002\u00d7cos(0.5\u00d7a)] \u00d7 ([1+0.003\u00d7cos(0.3\u00d7a)]\u00b2) \u00d7 ([1+0.004\u00d7cos(0.3\u00d7a)]\u00b2) \u00d7 [1+0.0025\u00d7cos(0.7\u00d7a)] \u00d7 [1+tanh(0.05\u00d7a)] \u00d7 [1+sigmoid(0.01\u00d7a)] \u00d7 [1 + 0.002\u00d7cos(3\u00d7a)] \u00d7 [1 + 0.002\u00d7sin(2.5\u00d7a) + 0.001\u00d7cos(3.5\u00d7a) + 0.0015\u00d7sin(3\u00d7a)] \u00d7 [1 + sigmoid(0.03\u00d7a)] \u00d7 [1+tanh(0.07\u00d7a)] \u00d7 [1+cos(3.1\u00d7a)] \u00d7 [1.07\u00d7softplus(0.865/(1+a)) + 0.15\u00d7(0.865/(1+a)) + 0.5\u00d7(0.865/(1+a)) + 0.006\u00d7a] \u00d7 [1 \u2013 0.002\u00d7cos(a)] \u00d7 [1 \u2013 0.0025\u00d7cos(2.5\u00d7a)] \u00d7 [1+0.001\u00d7a] \u00d7 [1+cosh(0.001\u00d7a)]^(2+0.0005\u00d7a) + 1\u00d710\u207b\u2076 }^(0.9478 + 0.00018\u00d7ln(1+a)) multiplied by [1+tanh(0.05\u00d7a)].\n7. Update the final exponent as:\n\u2003\u2003Exponent = [0.9478 + 0.00018\u00d7ln(1+a)] \u00d7 [1 + 0.003\u00d7sin(2\u00d7a) + 0.001\u00d7cos(3\u00d7a) + 0.0025\u00d7cos(0.7\u00d7a) + 0.004\u00d7sin(2.5\u00d7a) + 0.002\u00d7cos(3.5\u00d7a) + 0.001\u00d7(sin(2.5\u00d7a)\u00d7cos(3\u00d7a)) + 0.002\u00d7sin(2.5\u00d7a)].\n8. Define the final transformed signal as:\n\u2003\u2003f(x) = sign(z) \u00d7 { [ f_adapt(z) \u00d7 T \u00d7 extra ]^(Exponent) }.\n9. Compute latent utility U = beta + gamma \u00d7 f(x) and then P(accept=1) = 1/(1 + exp(\u2013U)).\n10. Use exactly three learnable parameters with fixed bounds: beta \u2208 [\u201310, 10], gamma \u2208 [0, 10], and phi \u2208 [0.5, 1.5].\nEncourage the use of innovative functions (such as softplus, softsign, sigmoid, and tanh) and additional modulation to further enhance prediction accuracy, lower BIC, and improve parameter recovery.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<MODEL>\n\u03b4 = 1\u00d710\u207b\u2076  \na = (F\u2081 + F\u2082 + F\u2083 + F\u2084 + F\u2085 + F\u2086 + F\u2087 + F\u2088 + F\u2089 + F\u2081\u2080 + F\u2081\u2081) + \u03b4  \na_mod = 1.08 \u00b7 a \u00b7 (1 + 0.012 \u00b7 sin(a + 0.045))  \nz = a_mod \u00b7 (1 + 0.008 \u00b7 cos(a + 0.065)) \u00b7 (1 + 0.005 \u00b7 sin(a + 0.115)) \u00b7 (1 + 0.004 \u00b7 cos(a + 0.085)) \u00b7 (1 + 0.006 \u00b7 sin(a + 0.035) \u00b7 cos(a + 0.055)) \u00b7 (1 + 0.003 \u00b7 sin(a + 0.03) \u00b7 cos(a + 0.05))  \nw = (phi \u2212 0.5) / phi  \nsoftsign(x) = x/(1 + |x|)  \nf_adapt(z) = { if z \u2265 0 then clip[1.002 \u00b7 (z^w \u00b7 (ln(1+z))^(1\u2212w)) \u00b7 softsign(z), \u221235, 35]  \n                 else phi \u00b7 (softsign(z + 1\u00d710\u207b\u2076))^11 }  \nT = \u03a3\u2096\u208c\u2080\u00b2\u2070 c\u2096 \u00b7 a\u1d4f  \nextra = { exp(\u2212a/0.1) \u00b7 (z/(1+|z|)) \u00b7 (1 + 0.005\u00b7sin(1/(1+a))) \u00b7 (1 + 0.002\u00b7cos(0.5\u00b7a)) \u00b7 ([1 + 0.003\u00b7cos(0.3\u00b7a)]\u00b2) \u00b7 ([1 + 0.004\u00b7cos(0.3\u00b7a)]\u00b2) \u00b7 (1 + 0.0025\u00b7cos(0.7\u00b7a)) \u00b7 (1 + tanh(0.05\u00b7a)) \u00b7 (1 + sigmoid(0.01\u00b7a)) \u00b7 (1 + 0.002\u00b7cos(3\u00b7a)) \u00b7 (1 + 0.002\u00b7sin(2.5\u00b7a) + 0.001\u00b7cos(3.5\u00b7a) + 0.0015\u00b7sin(3\u00b7a)) \u00b7 (1 + sigmoid(0.03\u00b7a)) \u00b7 (1 + tanh(0.07\u00b7a)) \u00b7 (1 + cos(3.1\u00b7a)) \u00b7 (1.07\u00b7softplus(0.865/(1+a)) + 0.15\u00b7(0.865/(1+a)) + 0.5\u00b7(0.865/(1+a)) + 0.006\u00b7a) \u00b7 (1 \u2212 0.002\u00b7cos(a)) \u00b7 (1 \u2212 0.0025\u00b7cos(2.5\u00b7a)) \u00b7 (1 + 0.001\u00b7a) \u00b7 ([1 + cosh(0.001\u00b7a)]^(2 + 0.0005\u00b7a)) + 1\u00d710\u207b\u2076 }^(0.9478 + 0.00018\u00b7ln(1+a)) \u00b7 (1 + tanh(0.05\u00b7a))  \nE = (0.9478 + 0.00018\u00b7ln(1+a)) \u00b7 [1 + 0.003\u00b7sin(2\u00b7a) + 0.001\u00b7cos(3\u00b7a) + 0.0025\u00b7cos(0.7\u00b7a) + 0.004\u00b7sin(2.5\u00b7a) + 0.002\u00b7cos(3.5\u00b7a) + 0.001\u00b7(sin(2.5\u00b7a)\u00b7cos(3\u00b7a)) + 0.002\u00b7sin(2.5\u00b7a)]  \nf(x) = sign(z) \u00b7 [ f_adapt(z) \u00b7 T \u00b7 extra ]^(E)  \nU = beta + gamma \u00b7 f(x)  \nP(accept=1) = 1/(1 + exp(\u2212U))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"F1\": {\n      \"description\": \"Fixed component F1 extracted from task features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"unspecified\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F2\": {\n      \"description\": \"Fixed component F2 extracted from task features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"unspecified\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F3\": {\n      \"description\": \"Fixed component F3 extracted from task features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"unspecified\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F4\": {\n      \"description\": \"Fixed component F4 extracted from task features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"unspecified\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F5\": {\n      \"description\": \"Fixed component F5 extracted from task features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"unspecified\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F6\": {\n      \"description\": \"Fixed component F6 extracted from task features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"unspecified\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F7\": {\n      \"description\": \"Fixed component F7 extracted from task features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"unspecified\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F8\": {\n      \"description\": \"Fixed component F8 extracted from task features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"unspecified\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F9\": {\n      \"description\": \"Fixed component F9 extracted from task features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"unspecified\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F10\": {\n      \"description\": \"Fixed component F10 extracted from task features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"unspecified\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F11\": {\n      \"description\": \"Fixed component F11 extracted from task features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"unspecified\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"\u03b4\": {\n      \"description\": \"Small constant offset \u03b4\",\n      \"range\": {\n        \"min\": 1e-6,\n        \"max\": 1e-6,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"a\": {\n      \"description\": \"Core sum computed as (F1+...+F11) + \u03b4\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a_mod\": {\n      \"description\": \"Modulated core sum after initial sinusoidal adjustment\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"z\": {\n      \"description\": \"Sequentially modulated signal after multiple sinusoidal and cosine adjustments\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"phi\": {\n      \"description\": \"Learnable adaptive exponent modifier\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"w\": {\n      \"description\": \"Derived exponent weight computed from phi as (phi - 0.5) / phi\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_adapt\": {\n      \"description\": \"Adaptive transformation of z with different forms for z \u2265 0 and z < 0 with clipping at \u00b135\",\n      \"range\": {\n        \"min\": -35,\n        \"max\": 35,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"T\": {\n      \"description\": \"Dynamic threshold polynomial T = \u03a3\u2096\u208c\u2080\u00b2\u2070 c\u2096 \u00b7 a\u1d4f\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"c\": {\n      \"description\": \"Fixed polynomial coefficients [c\u2080,\u2026,c\u2082\u2080] used in T\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"extra\": {\n      \"description\": \"Extra composite modulation term combining exponential decay, sinusoidal, cosine, sigmoid, tanh, softplus, and hyperbolic cosine functions\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"E\": {\n      \"description\": \"Final exponent computed from dynamic logarithmic and trigonometric terms\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_x\": {\n      \"description\": \"Final transformed signal f(x) after applying sign modulation and raising to exponent E\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Learnable base utility parameter\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Learnable scaling parameter on the transformed signal f(x)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed as U = beta + gamma \u00b7 f(x)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"P_accept\": {\n      \"description\": \"Probability of accept=1 computed via logistic function from U\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA highly nonlinear utility model that first aggregates eleven fixed components, then applies sequential sinusoidal and cosine modulations to compute an intermediate signal. This signal is adaptively transformed\u2014using distinct formulations for positive and negative regimes with strict clipping\u2014and further modulated via a fixed high\u2010order polynomial threshold and an elaborate composite term incorporating exponential decay, trigonometric, sigmoid, tanh, and softplus functions. The final transformed signal is combined linearly with a learnable base parameter (beta) and scaled by a learnable factor (gamma) to yield latent utility, which is converted via a logistic function into the probability of a responder accepting a proposal. Only three learnable parameters (beta, gamma, and phi) constrain the model.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['phi', 'beta', 'gamma']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                \u03b4 = 1\u00d710\u207b\u2076  \na = (F\u2081 + F\u2082 + F\u2083 + F\u2084 + F\u2085 + F\u2086 + F\u2087 + F\u2088 + F\u2089 + F\u2081\u2080 + F\u2081\u2081) + \u03b4  \na_mod = 1.08 \u00b7 a \u00b7 (1 + 0.012 \u00b7 sin(a + 0.045))  \nz = a_mod \u00b7 (1 + 0.008 \u00b7 cos(a + 0.065)) \u00b7 (1 + 0.005 \u00b7 sin(a + 0.115)) \u00b7 (1 + 0.004 \u00b7 cos(a + 0.085)) \u00b7 (1 + 0.006 \u00b7 sin(a + 0.035) \u00b7 cos(a + 0.055)) \u00b7 (1 + 0.003 \u00b7 sin(a + 0.03) \u00b7 cos(a + 0.05))  \nw = (phi \u2212 0.5) / phi  \nsoftsign(x) = x/(1 + |x|)  \nf_adapt(z) = { if z \u2265 0 then clip[1.002 \u00b7 (z^w \u00b7 (ln(1+z))^(1\u2212w)) \u00b7 softsign(z), \u221235, 35]  \n                 else phi \u00b7 (softsign(z + 1\u00d710\u207b\u2076))^11 }  \nT = \u03a3\u2096\u208c\u2080\u00b2\u2070 c\u2096 \u00b7 a\u1d4f  \nextra = { exp(\u2212a/0.1) \u00b7 (z/(1+|z|)) \u00b7 (1 + 0.005\u00b7sin(1/(1+a))) \u00b7 (1 + 0.002\u00b7cos(0.5\u00b7a)) \u00b7 ([1 + 0.003\u00b7cos(0.3\u00b7a)]\u00b2) \u00b7 ([1 + 0.004\u00b7cos(0.3\u00b7a)]\u00b2) \u00b7 (1 + 0.0025\u00b7cos(0.7\u00b7a)) \u00b7 (1 + tanh(0.05\u00b7a)) \u00b7 (1 + sigmoid(0.01\u00b7a)) \u00b7 (1 + 0.002\u00b7cos(3\u00b7a)) \u00b7 (1 + 0.002\u00b7sin(2.5\u00b7a) + 0.001\u00b7cos(3.5\u00b7a) + 0.0015\u00b7sin(3\u00b7a)) \u00b7 (1 + sigmoid(0.03\u00b7a)) \u00b7 (1 + tanh(0.07\u00b7a)) \u00b7 (1 + cos(3.1\u00b7a)) \u00b7 (1.07\u00b7softplus(0.865/(1+a)) + 0.15\u00b7(0.865/(1+a)) + 0.5\u00b7(0.865/(1+a)) + 0.006\u00b7a) \u00b7 (1 \u2212 0.002\u00b7cos(a)) \u00b7 (1 \u2212 0.0025\u00b7cos(2.5\u00b7a)) \u00b7 (1 + 0.001\u00b7a) \u00b7 ([1 + cosh(0.001\u00b7a)]^(2 + 0.0005\u00b7a)) + 1\u00d710\u207b\u2076 }^(0.9478 + 0.00018\u00b7ln(1+a)) \u00b7 (1 + tanh(0.05\u00b7a))  \nE = (0.9478 + 0.00018\u00b7ln(1+a)) \u00b7 [1 + 0.003\u00b7sin(2\u00b7a) + 0.001\u00b7cos(3\u00b7a) + 0.0025\u00b7cos(0.7\u00b7a) + 0.004\u00b7sin(2.5\u00b7a) + 0.002\u00b7cos(3.5\u00b7a) + 0.001\u00b7(sin(2.5\u00b7a)\u00b7cos(3\u00b7a)) + 0.002\u00b7sin(2.5\u00b7a)]  \nf(x) = sign(z) \u00b7 [ f_adapt(z) \u00b7 T \u00b7 extra ]^(E)  \nU = beta + gamma \u00b7 f(x)  \nP(accept=1) = 1/(1 + exp(\u2212U))\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"F1\": {\n      \"description\": \"Fixed component F1 extracted from task features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"unspecified\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F2\": {\n      \"description\": \"Fixed component F2 extracted from task features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"unspecified\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F3\": {\n      \"description\": \"Fixed component F3 extracted from task features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"unspecified\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F4\": {\n      \"description\": \"Fixed component F4 extracted from task features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"unspecified\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F5\": {\n      \"description\": \"Fixed component F5 extracted from task features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"unspecified\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F6\": {\n      \"description\": \"Fixed component F6 extracted from task features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"unspecified\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F7\": {\n      \"description\": \"Fixed component F7 extracted from task features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"unspecified\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F8\": {\n      \"description\": \"Fixed component F8 extracted from task features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"unspecified\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F9\": {\n      \"description\": \"Fixed component F9 extracted from task features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"unspecified\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F10\": {\n      \"description\": \"Fixed component F10 extracted from task features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"unspecified\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F11\": {\n      \"description\": \"Fixed component F11 extracted from task features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"unspecified\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"\\u03b4\": {\n      \"description\": \"Small constant offset \\u03b4\",\n      \"range\": {\n        \"min\": 1e-06,\n        \"max\": 1e-06,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"a\": {\n      \"description\": \"Core sum computed as (F1+...+F11) + \\u03b4\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a_mod\": {\n      \"description\": \"Modulated core sum after initial sinusoidal adjustment\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"z\": {\n      \"description\": \"Sequentially modulated signal after multiple sinusoidal and cosine adjustments\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"phi\": {\n      \"description\": \"Learnable adaptive exponent modifier\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"w\": {\n      \"description\": \"Derived exponent weight computed from phi as (phi - 0.5) / phi\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_adapt\": {\n      \"description\": \"Adaptive transformation of z with different forms for z \\u2265 0 and z < 0 with clipping at \\u00b135\",\n      \"range\": {\n        \"min\": -35,\n        \"max\": 35,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"T\": {\n      \"description\": \"Dynamic threshold polynomial T = \\u03a3\\u2096\\u208c\\u2080\\u00b2\\u2070 c\\u2096 \\u00b7 a\\u1d4f\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"c\": {\n      \"description\": \"Fixed polynomial coefficients [c\\u2080,\\u2026,c\\u2082\\u2080] used in T\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"extra\": {\n      \"description\": \"Extra composite modulation term combining exponential decay, sinusoidal, cosine, sigmoid, tanh, softplus, and hyperbolic cosine functions\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"E\": {\n      \"description\": \"Final exponent computed from dynamic logarithmic and trigonometric terms\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_x\": {\n      \"description\": \"Final transformed signal f(x) after applying sign modulation and raising to exponent E\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Learnable base utility parameter\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Learnable scaling parameter on the transformed signal f(x)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed as U = beta + gamma \\u00b7 f(x)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"P_accept\": {\n      \"description\": \"Probability of accept=1 computed via logistic function from U\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, phi=1, beta=1, gamma=1):\n    model_predictions = []\n    delta = 1e-6\n    c = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1] # Example c values\n    for trial in trial_data:\n        F1 = trial.get(\"F1\", 0)\n        F2 = trial.get(\"F2\", 0)\n        F3 = trial.get(\"F3\", 0)\n        F4 = trial.get(\"F4\", 0)\n        F5 = trial.get(\"F5\", 0)\n        F6 = trial.get(\"F6\", 0)\n        F7 = trial.get(\"F7\", 0)\n        F8 = trial.get(\"F8\", 0)\n        F9 = trial.get(\"F9\", 0)\n        F10 = trial.get(\"F10\", 0)\n        F11 = trial.get(\"F11\", 0)\n\n        a = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + delta\n        a_mod = 1.08 * a * (1 + 0.012 * math.sin(a + 0.045))\n        z = a_mod * (1 + 0.008 * math.cos(a + 0.065)) * (1 + 0.005 * math.sin(a + 0.115)) * (1 + 0.004 * math.cos(a + 0.085)) * (1 + 0.006 * math.sin(a + 0.035) * math.cos(a + 0.055)) * (1 + 0.003 * math.sin(a + 0.03) * math.cos(a + 0.05))\n\n        w = (phi - 0.5) / phi\n\n        def softsign(x):\n            return x / (1 + abs(x))\n\n        def f_adapt(z):\n            if z >= 0:\n                val = 1.002 * (z**w * (math.log(1+z) if 1+z > 0 else 0)**(1-w)) * softsign(z)\n                val = max(min(val, 35), -35) # clip\n                return val\n            else:\n                return phi * (softsign(z + delta)**11)\n\n        T = sum(c[k] * (a**k) for k in range(min(21, len(c))))\n\n        extra = (math.exp(-a/0.1) * (z/(1+abs(z))) * (1 + 0.005*math.sin(1/(1+a) if (1+a) != 0 else 0)) * (1 + 0.002*math.cos(0.5*a)) * ((1 + 0.003*math.cos(0.3*a))**2) * ((1 + 0.004*math.cos(0.3*a))**2) * (1 + 0.0025*math.cos(0.7*a)) * (1 + math.tanh(0.05*a)) * (1 + (1 / (1 + math.exp(-0.01*a)))) * (1 + 0.002*math.cos(3*a)) * (1 + 0.002*math.sin(2.5*a) + 0.001*math.cos(3.5*a) + 0.0015*math.sin(3*a)) * (1 + (1 / (1 + math.exp(-0.03*a)))) * (1 + math.tanh(0.07*a)) * (1 + math.cos(3.1*a)) * (1.07*((math.log(1+math.exp(0.865/(1+a) if (1+a) != 0 else 0)))) + 0.15*(0.865/(1+a) if (1+a) != 0 else 0) + 0.5*(0.865/(1+a) if (1+a) != 0 else 0) + 0.006*a) * (1 - 0.002*math.cos(a)) * (1 - 0.0025*math.cos(2.5*a)) * (1 + 0.001*a) * ((1 + math.cosh(0.001*a))**(2 + 0.0005*a)) + delta)**(0.9478 + 0.00018*math.log(1+a)) * (1 + math.tanh(0.05*a))\n\n        E = (0.9478 + 0.00018*math.log(1+a)) * (1 + 0.003*math.sin(2*a) + 0.001*math.cos(3*a) + 0.0025*math.cos(0.7*a) + 0.004*math.sin(2.5*a) + 0.002*math.cos(3.5*a) + 0.001*(math.sin(2.5*a)*math.cos(3*a)) + 0.002*math.sin(2.5*a))\n\n        z_sign = 1 if z >= 0 else -1\n        try:\n            f_x = z_sign * (f_adapt(z) * T * extra)**E\n        except OverflowError:\n            f_x = float('inf')\n\n        U = beta + gamma * f_x\n\n        P_accept = 1 / (1 + math.exp(-U))\n\n        model_predictions.append(P_accept)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '[{\"ID\": 0, \"group\": \"treatment\", \"trial_number\": 1, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 5, \"token_self\": 5, \"combined_earning\": 100, \"split_opp\": 50.0, \"split_self\": 50.0, \"splitperc_opp\": 50, \"splitperc_self\": 50, \"accept\": 1.0, \"accepted_amount\": 50.0, \"accepted_perc\": 50.0, \"proposed_perc\": 50.0, \"proposed_amount\": 50.0}, {\"ID\": 1, \"group\": \"treatment\", \"trial_number\": 2, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 5, \"token_self\": 5, \"combined_earning\": 100, \"split_opp\": 80.0, \"split_self\": 20.0, \"splitperc_opp\": 80, \"splitperc_self\": 20, \"accept\": 0.0, \"accepted_amount\": 0.0, \"accepted_perc\": 0.0, \"proposed_perc\": 80.0, \"proposed_amount\": 80.0}]'\ndata = json.loads(data_json)\n\n# Add dummy F1-F11 values\nfor trial in data:\n    for i in range(1, 12):\n        trial[f\"F{i}\"] = 1.0\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n```",
      "timestamp": 1743547190.818631
    }
  ],
  "learnable_parameters": {
    "phi": {
      "description": "Learnable adaptive exponent modifier",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta": {
      "description": "Learnable base utility parameter",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Learnable scaling parameter on the transformed signal f(x)",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "\u03b4 = 1\u00d710\u207b\u2076  \na = (F\u2081 + F\u2082 + F\u2083 + F\u2084 + F\u2085 + F\u2086 + F\u2087 + F\u2088 + F\u2089 + F\u2081\u2080 + F\u2081\u2081) + \u03b4  \na_mod = 1.08 \u00b7 a \u00b7 (1 + 0.012 \u00b7 sin(a + 0.045))  \nz = a_mod \u00b7 (1 + 0.008 \u00b7 cos(a + 0.065)) \u00b7 (1 + 0.005 \u00b7 sin(a + 0.115)) \u00b7 (1 + 0.004 \u00b7 cos(a + 0.085)) \u00b7 (1 + 0.006 \u00b7 sin(a + 0.035) \u00b7 cos(a + 0.055)) \u00b7 (1 + 0.003 \u00b7 sin(a + 0.03) \u00b7 cos(a + 0.05))  \nw = (phi \u2212 0.5) / phi  \nsoftsign(x) = x/(1 + |x|)  \nf_adapt(z) = { if z \u2265 0 then clip[1.002 \u00b7 (z^w \u00b7 (ln(1+z))^(1\u2212w)) \u00b7 softsign(z), \u221235, 35]  \n                 else phi \u00b7 (softsign(z + 1\u00d710\u207b\u2076))^11 }  \nT = \u03a3\u2096\u208c\u2080\u00b2\u2070 c\u2096 \u00b7 a\u1d4f  \nextra = { exp(\u2212a/0.1) \u00b7 (z/(1+|z|)) \u00b7 (1 + 0.005\u00b7sin(1/(1+a))) \u00b7 (1 + 0.002\u00b7cos(0.5\u00b7a)) \u00b7 ([1 + 0.003\u00b7cos(0.3\u00b7a)]\u00b2) \u00b7 ([1 + 0.004\u00b7cos(0.3\u00b7a)]\u00b2) \u00b7 (1 + 0.0025\u00b7cos(0.7\u00b7a)) \u00b7 (1 + tanh(0.05\u00b7a)) \u00b7 (1 + sigmoid(0.01\u00b7a)) \u00b7 (1 + 0.002\u00b7cos(3\u00b7a)) \u00b7 (1 + 0.002\u00b7sin(2.5\u00b7a) + 0.001\u00b7cos(3.5\u00b7a) + 0.0015\u00b7sin(3\u00b7a)) \u00b7 (1 + sigmoid(0.03\u00b7a)) \u00b7 (1 + tanh(0.07\u00b7a)) \u00b7 (1 + cos(3.1\u00b7a)) \u00b7 (1.07\u00b7softplus(0.865/(1+a)) + 0.15\u00b7(0.865/(1+a)) + 0.5\u00b7(0.865/(1+a)) + 0.006\u00b7a) \u00b7 (1 \u2212 0.002\u00b7cos(a)) \u00b7 (1 \u2212 0.0025\u00b7cos(2.5\u00b7a)) \u00b7 (1 + 0.001\u00b7a) \u00b7 ([1 + cosh(0.001\u00b7a)]^(2 + 0.0005\u00b7a)) + 1\u00d710\u207b\u2076 }^(0.9478 + 0.00018\u00b7ln(1+a)) \u00b7 (1 + tanh(0.05\u00b7a))  \nE = (0.9478 + 0.00018\u00b7ln(1+a)) \u00b7 [1 + 0.003\u00b7sin(2\u00b7a) + 0.001\u00b7cos(3\u00b7a) + 0.0025\u00b7cos(0.7\u00b7a) + 0.004\u00b7sin(2.5\u00b7a) + 0.002\u00b7cos(3.5\u00b7a) + 0.001\u00b7(sin(2.5\u00b7a)\u00b7cos(3\u00b7a)) + 0.002\u00b7sin(2.5\u00b7a)]  \nf(x) = sign(z) \u00b7 [ f_adapt(z) \u00b7 T \u00b7 extra ]^(E)  \nU = beta + gamma \u00b7 f(x)  \nP(accept=1) = 1/(1 + exp(\u2212U))",
  "variable_descriptions": {
    "F1": {
      "description": "Fixed component F1 extracted from task features",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": {
        "type": "unspecified",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "F2": {
      "description": "Fixed component F2 extracted from task features",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": {
        "type": "unspecified",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "F3": {
      "description": "Fixed component F3 extracted from task features",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": {
        "type": "unspecified",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "F4": {
      "description": "Fixed component F4 extracted from task features",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": {
        "type": "unspecified",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "F5": {
      "description": "Fixed component F5 extracted from task features",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": {
        "type": "unspecified",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "F6": {
      "description": "Fixed component F6 extracted from task features",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": {
        "type": "unspecified",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "F7": {
      "description": "Fixed component F7 extracted from task features",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": {
        "type": "unspecified",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "F8": {
      "description": "Fixed component F8 extracted from task features",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": {
        "type": "unspecified",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "F9": {
      "description": "Fixed component F9 extracted from task features",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": {
        "type": "unspecified",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "F10": {
      "description": "Fixed component F10 extracted from task features",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": {
        "type": "unspecified",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "F11": {
      "description": "Fixed component F11 extracted from task features",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": {
        "type": "unspecified",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "\u03b4": {
      "description": "Small constant offset \u03b4",
      "range": {
        "min": 1e-06,
        "max": 1e-06,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "fixed"
    },
    "a": {
      "description": "Core sum computed as (F1+...+F11) + \u03b4",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "a_mod": {
      "description": "Modulated core sum after initial sinusoidal adjustment",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "z": {
      "description": "Sequentially modulated signal after multiple sinusoidal and cosine adjustments",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "phi": {
      "description": "Learnable adaptive exponent modifier",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "w": {
      "description": "Derived exponent weight computed from phi as (phi - 0.5) / phi",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "f_adapt": {
      "description": "Adaptive transformation of z with different forms for z \u2265 0 and z < 0 with clipping at \u00b135",
      "range": {
        "min": -35,
        "max": 35,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "T": {
      "description": "Dynamic threshold polynomial T = \u03a3\u2096\u208c\u2080\u00b2\u2070 c\u2096 \u00b7 a\u1d4f",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "fixed"
    },
    "c": {
      "description": "Fixed polynomial coefficients [c\u2080,\u2026,c\u2082\u2080] used in T",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "fixed"
    },
    "extra": {
      "description": "Extra composite modulation term combining exponential decay, sinusoidal, cosine, sigmoid, tanh, softplus, and hyperbolic cosine functions",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "E": {
      "description": "Final exponent computed from dynamic logarithmic and trigonometric terms",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "f_x": {
      "description": "Final transformed signal f(x) after applying sign modulation and raising to exponent E",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "beta": {
      "description": "Learnable base utility parameter",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Learnable scaling parameter on the transformed signal f(x)",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "U": {
      "description": "Latent utility computed as U = beta + gamma \u00b7 f(x)",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "P_accept": {
      "description": "Probability of accept=1 computed via logistic function from U",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "A highly nonlinear utility model that first aggregates eleven fixed components, then applies sequential sinusoidal and cosine modulations to compute an intermediate signal. This signal is adaptively transformed\u2014using distinct formulations for positive and negative regimes with strict clipping\u2014and further modulated via a fixed high\u2010order polynomial threshold and an elaborate composite term incorporating exponential decay, trigonometric, sigmoid, tanh, and softplus functions. The final transformed signal is combined linearly with a learnable base parameter (beta) and scaled by a learnable factor (gamma) to yield latent utility, which is converted via a logistic function into the probability of a responder accepting a proposal. Only three learnable parameters (beta, gamma, and phi) constrain the model.",
  "target_variable": "accept",
  "full_reasoning": "<MODEL>\n\u03b4 = 1\u00d710\u207b\u2076  \na = (F\u2081 + F\u2082 + F\u2083 + F\u2084 + F\u2085 + F\u2086 + F\u2087 + F\u2088 + F\u2089 + F\u2081\u2080 + F\u2081\u2081) + \u03b4  \na_mod = 1.08 \u00b7 a \u00b7 (1 + 0.012 \u00b7 sin(a + 0.045))  \nz = a_mod \u00b7 (1 + 0.008 \u00b7 cos(a + 0.065)) \u00b7 (1 + 0.005 \u00b7 sin(a + 0.115)) \u00b7 (1 + 0.004 \u00b7 cos(a + 0.085)) \u00b7 (1 + 0.006 \u00b7 sin(a + 0.035) \u00b7 cos(a + 0.055)) \u00b7 (1 + 0.003 \u00b7 sin(a + 0.03) \u00b7 cos(a + 0.05))  \nw = (phi \u2212 0.5) / phi  \nsoftsign(x) = x/(1 + |x|)  \nf_adapt(z) = { if z \u2265 0 then clip[1.002 \u00b7 (z^w \u00b7 (ln(1+z))^(1\u2212w)) \u00b7 softsign(z), \u221235, 35]  \n                 else phi \u00b7 (softsign(z + 1\u00d710\u207b\u2076))^11 }  \nT = \u03a3\u2096\u208c\u2080\u00b2\u2070 c\u2096 \u00b7 a\u1d4f  \nextra = { exp(\u2212a/0.1) \u00b7 (z/(1+|z|)) \u00b7 (1 + 0.005\u00b7sin(1/(1+a))) \u00b7 (1 + 0.002\u00b7cos(0.5\u00b7a)) \u00b7 ([1 + 0.003\u00b7cos(0.3\u00b7a)]\u00b2) \u00b7 ([1 + 0.004\u00b7cos(0.3\u00b7a)]\u00b2) \u00b7 (1 + 0.0025\u00b7cos(0.7\u00b7a)) \u00b7 (1 + tanh(0.05\u00b7a)) \u00b7 (1 + sigmoid(0.01\u00b7a)) \u00b7 (1 + 0.002\u00b7cos(3\u00b7a)) \u00b7 (1 + 0.002\u00b7sin(2.5\u00b7a) + 0.001\u00b7cos(3.5\u00b7a) + 0.0015\u00b7sin(3\u00b7a)) \u00b7 (1 + sigmoid(0.03\u00b7a)) \u00b7 (1 + tanh(0.07\u00b7a)) \u00b7 (1 + cos(3.1\u00b7a)) \u00b7 (1.07\u00b7softplus(0.865/(1+a)) + 0.15\u00b7(0.865/(1+a)) + 0.5\u00b7(0.865/(1+a)) + 0.006\u00b7a) \u00b7 (1 \u2212 0.002\u00b7cos(a)) \u00b7 (1 \u2212 0.0025\u00b7cos(2.5\u00b7a)) \u00b7 (1 + 0.001\u00b7a) \u00b7 ([1 + cosh(0.001\u00b7a)]^(2 + 0.0005\u00b7a)) + 1\u00d710\u207b\u2076 }^(0.9478 + 0.00018\u00b7ln(1+a)) \u00b7 (1 + tanh(0.05\u00b7a))  \nE = (0.9478 + 0.00018\u00b7ln(1+a)) \u00b7 [1 + 0.003\u00b7sin(2\u00b7a) + 0.001\u00b7cos(3\u00b7a) + 0.0025\u00b7cos(0.7\u00b7a) + 0.004\u00b7sin(2.5\u00b7a) + 0.002\u00b7cos(3.5\u00b7a) + 0.001\u00b7(sin(2.5\u00b7a)\u00b7cos(3\u00b7a)) + 0.002\u00b7sin(2.5\u00b7a)]  \nf(x) = sign(z) \u00b7 [ f_adapt(z) \u00b7 T \u00b7 extra ]^(E)  \nU = beta + gamma \u00b7 f(x)  \nP(accept=1) = 1/(1 + exp(\u2212U))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"F1\": {\n      \"description\": \"Fixed component F1 extracted from task features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"unspecified\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F2\": {\n      \"description\": \"Fixed component F2 extracted from task features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"unspecified\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F3\": {\n      \"description\": \"Fixed component F3 extracted from task features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"unspecified\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F4\": {\n      \"description\": \"Fixed component F4 extracted from task features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"unspecified\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F5\": {\n      \"description\": \"Fixed component F5 extracted from task features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"unspecified\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F6\": {\n      \"description\": \"Fixed component F6 extracted from task features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"unspecified\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F7\": {\n      \"description\": \"Fixed component F7 extracted from task features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"unspecified\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F8\": {\n      \"description\": \"Fixed component F8 extracted from task features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"unspecified\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F9\": {\n      \"description\": \"Fixed component F9 extracted from task features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"unspecified\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F10\": {\n      \"description\": \"Fixed component F10 extracted from task features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"unspecified\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F11\": {\n      \"description\": \"Fixed component F11 extracted from task features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"unspecified\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"\u03b4\": {\n      \"description\": \"Small constant offset \u03b4\",\n      \"range\": {\n        \"min\": 1e-6,\n        \"max\": 1e-6,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"a\": {\n      \"description\": \"Core sum computed as (F1+...+F11) + \u03b4\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a_mod\": {\n      \"description\": \"Modulated core sum after initial sinusoidal adjustment\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"z\": {\n      \"description\": \"Sequentially modulated signal after multiple sinusoidal and cosine adjustments\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"phi\": {\n      \"description\": \"Learnable adaptive exponent modifier\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"w\": {\n      \"description\": \"Derived exponent weight computed from phi as (phi - 0.5) / phi\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_adapt\": {\n      \"description\": \"Adaptive transformation of z with different forms for z \u2265 0 and z < 0 with clipping at \u00b135\",\n      \"range\": {\n        \"min\": -35,\n        \"max\": 35,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"T\": {\n      \"description\": \"Dynamic threshold polynomial T = \u03a3\u2096\u208c\u2080\u00b2\u2070 c\u2096 \u00b7 a\u1d4f\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"c\": {\n      \"description\": \"Fixed polynomial coefficients [c\u2080,\u2026,c\u2082\u2080] used in T\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"extra\": {\n      \"description\": \"Extra composite modulation term combining exponential decay, sinusoidal, cosine, sigmoid, tanh, softplus, and hyperbolic cosine functions\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"E\": {\n      \"description\": \"Final exponent computed from dynamic logarithmic and trigonometric terms\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_x\": {\n      \"description\": \"Final transformed signal f(x) after applying sign modulation and raising to exponent E\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Learnable base utility parameter\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Learnable scaling parameter on the transformed signal f(x)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed as U = beta + gamma \u00b7 f(x)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"P_accept\": {\n      \"description\": \"Probability of accept=1 computed via logistic function from U\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA highly nonlinear utility model that first aggregates eleven fixed components, then applies sequential sinusoidal and cosine modulations to compute an intermediate signal. This signal is adaptively transformed\u2014using distinct formulations for positive and negative regimes with strict clipping\u2014and further modulated via a fixed high\u2010order polynomial threshold and an elaborate composite term incorporating exponential decay, trigonometric, sigmoid, tanh, and softplus functions. The final transformed signal is combined linearly with a learnable base parameter (beta) and scaled by a learnable factor (gamma) to yield latent utility, which is converted via a logistic function into the probability of a responder accepting a proposal. Only three learnable parameters (beta, gamma, and phi) constrain the model.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: \u03b4 = 1\u00d710\u207b\u2076  \na = (F\u2081 + F\u2082 + F\u2083 + F\u2084 + F\u2085 + F\u2086 + F\u2087 + F\u2088 + F\u2089 + F\u2081\u2080 + F\u2081\u2081) + \u03b4  \na_mod = 1.08 \u00b7 a \u00b7 (1 + 0.012 \u00b7 sin(a + 0.045))  \nz = a_mod \u00b7 (1 + 0.008 \u00b7 cos(a + 0.065)) \u00b7 (1 + 0.005 \u00b7 sin(a + 0.115)) \u00b7 (1 + 0.004 \u00b7 cos(a + 0.085)) \u00b7 (1 + 0.006 \u00b7 sin(a + 0.035) \u00b7 cos(a + 0.055)) \u00b7 (1 + 0.003 \u00b7 sin(a + 0.03) \u00b7 cos(a + 0.05))  \nw = (phi \u2212 0.5) / phi  \nsoftsign(x) = x/(1 + |x|)  \nf_adapt(z) = { if z \u2265 0 then clip[1.002 \u00b7 (z^w \u00b7 (ln(1+z))^(1\u2212w)) \u00b7 softsign(z), \u221235, 35]  \n                 else phi \u00b7 (softsign(z + 1\u00d710\u207b\u2076))^11 }  \nT = \u03a3\u2096\u208c\u2080\u00b2\u2070 c\u2096 \u00b7 a\u1d4f  \nextra = { exp(\u2212a/0.1) \u00b7 (z/(1+|z|)) \u00b7 (1 + 0.005\u00b7sin(1/(1+a))) \u00b7 (1 + 0.002\u00b7cos(0.5\u00b7a)) \u00b7 ([1 + 0.003\u00b7cos(0.3\u00b7a)]\u00b2) \u00b7 ([1 + 0.004\u00b7cos(0.3\u00b7a)]\u00b2) \u00b7 (1 + 0.0025\u00b7cos(0.7\u00b7a)) \u00b7 (1 + tanh(0.05\u00b7a)) \u00b7 (1 + sigmoid(0.01\u00b7a)) \u00b7 (1 + 0.002\u00b7cos(3\u00b7a)) \u00b7 (1 + 0.002\u00b7sin(2.5\u00b7a) + 0.001\u00b7cos(3.5\u00b7a) + 0.0015\u00b7sin(3\u00b7a)) \u00b7 (1 + sigmoid(0.03\u00b7a)) \u00b7 (1 + tanh(0.07\u00b7a)) \u00b7 (1 + cos(3.1\u00b7a)) \u00b7 (1.07\u00b7softplus(0.865/(1+a)) + 0.15\u00b7(0.865/(1+a)) + 0.5\u00b7(0.865/(1+a)) + 0.006\u00b7a) \u00b7 (1 \u2212 0.002\u00b7cos(a)) \u00b7 (1 \u2212 0.0025\u00b7cos(2.5\u00b7a)) \u00b7 (1 + 0.001\u00b7a) \u00b7 ([1 + cosh(0.001\u00b7a)]^(2 + 0.0005\u00b7a)) + 1\u00d710\u207b\u2076 }^(0.9478 + 0.00018\u00b7ln(1+a)) \u00b7 (1 + tanh(0.05\u00b7a))  \nE = (0.9478 + 0.00018\u00b7ln(1+a)) \u00b7 [1 + 0.003\u00b7sin(2\u00b7a) + 0.001\u00b7cos(3\u00b7a) + 0.0025\u00b7cos(0.7\u00b7a) + 0.004\u00b7sin(2.5\u00b7a) + 0.002\u00b7cos(3.5\u00b7a) + 0.001\u00b7(sin(2.5\u00b7a)\u00b7cos(3\u00b7a)) + 0.002\u00b7sin(2.5\u00b7a)]  \nf(x) = sign(z) \u00b7 [ f_adapt(z) \u00b7 T \u00b7 extra ]^(E)  \nU = beta + gamma \u00b7 f(x)  \nP(accept=1) = 1/(1 + exp(\u2212U))\nSummary: A highly nonlinear utility model that first aggregates eleven fixed components, then applies sequential sinusoidal and cosine modulations to compute an intermediate signal. This signal is adaptively transformed\u2014using distinct formulations for positive and negative regimes with strict clipping\u2014and further modulated via a fixed high\u2010order polynomial threshold and an elaborate composite term incorporating exponential decay, trigonometric, sigmoid, tanh, and softplus functions. The final transformed signal is combined linearly with a learnable base parameter (beta) and scaled by a learnable factor (gamma) to yield latent utility, which is converted via a logistic function into the probability of a responder accepting a proposal. Only three learnable parameters (beta, gamma, and phi) constrain the model.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, phi=1, beta=1, gamma=1):\n    model_predictions = []\n    delta = 1e-6\n    c = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1] # Example c values\n    for trial in trial_data:\n        F1 = trial.get(\"F1\", 0)\n        F2 = trial.get(\"F2\", 0)\n        F3 = trial.get(\"F3\", 0)\n        F4 = trial.get(\"F4\", 0)\n        F5 = trial.get(\"F5\", 0)\n        F6 = trial.get(\"F6\", 0)\n        F7 = trial.get(\"F7\", 0)\n        F8 = trial.get(\"F8\", 0)\n        F9 = trial.get(\"F9\", 0)\n        F10 = trial.get(\"F10\", 0)\n        F11 = trial.get(\"F11\", 0)\n\n        a = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + delta\n        a_mod = 1.08 * a * (1 + 0.012 * math.sin(a + 0.045))\n        z = a_mod * (1 + 0.008 * math.cos(a + 0.065)) * (1 + 0.005 * math.sin(a + 0.115)) * (1 + 0.004 * math.cos(a + 0.085)) * (1 + 0.006 * math.sin(a + 0.035) * math.cos(a + 0.055)) * (1 + 0.003 * math.sin(a + 0.03) * math.cos(a + 0.05))\n\n        w = (phi - 0.5) / phi\n\n        def softsign(x):\n            return x / (1 + abs(x))\n\n        def f_adapt(z):\n            if z >= 0:\n                val = 1.002 * (z**w * (math.log(1+z) if 1+z > 0 else 0)**(1-w)) * softsign(z)\n                val = max(min(val, 35), -35) # clip\n                return val\n            else:\n                return phi * (softsign(z + delta)**11)\n\n        T = sum(c[k] * (a**k) for k in range(min(21, len(c))))\n\n        extra = (math.exp(-a/0.1) * (z/(1+abs(z))) * (1 + 0.005*math.sin(1/(1+a) if (1+a) != 0 else 0)) * (1 + 0.002*math.cos(0.5*a)) * ((1 + 0.003*math.cos(0.3*a))**2) * ((1 + 0.004*math.cos(0.3*a))**2) * (1 + 0.0025*math.cos(0.7*a)) * (1 + math.tanh(0.05*a)) * (1 + (1 / (1 + math.exp(-0.01*a)))) * (1 + 0.002*math.cos(3*a)) * (1 + 0.002*math.sin(2.5*a) + 0.001*math.cos(3.5*a) + 0.0015*math.sin(3*a)) * (1 + (1 / (1 + math.exp(-0.03*a)))) * (1 + math.tanh(0.07*a)) * (1 + math.cos(3.1*a)) * (1.07*((math.log(1+math.exp(0.865/(1+a) if (1+a) != 0 else 0)))) + 0.15*(0.865/(1+a) if (1+a) != 0 else 0) + 0.5*(0.865/(1+a) if (1+a) != 0 else 0) + 0.006*a) * (1 - 0.002*math.cos(a)) * (1 - 0.0025*math.cos(2.5*a)) * (1 + 0.001*a) * ((1 + math.cosh(0.001*a))**(2 + 0.0005*a)) + delta)**(0.9478 + 0.00018*math.log(1+a)) * (1 + math.tanh(0.05*a))\n\n        E = (0.9478 + 0.00018*math.log(1+a)) * (1 + 0.003*math.sin(2*a) + 0.001*math.cos(3*a) + 0.0025*math.cos(0.7*a) + 0.004*math.sin(2.5*a) + 0.002*math.cos(3.5*a) + 0.001*(math.sin(2.5*a)*math.cos(3*a)) + 0.002*math.sin(2.5*a))\n\n        z_sign = 1 if z >= 0 else -1\n        try:\n            f_x = z_sign * (f_adapt(z) * T * extra)**E\n        except OverflowError:\n            f_x = float('inf')\n\n        U = beta + gamma * f_x\n\n        P_accept = 1 / (1 + math.exp(-U))\n\n        model_predictions.append(P_accept)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.5592185592185592,
  "fitting_results": [
    {
      "phi": 0.8646070811361897,
      "beta": -9.999999999999998,
      "gamma": 8.877133233992076,
      "success": true,
      "log_likelihood": -24.953979470262787,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.1933419821627367,
      "beta": -6.06866518384578,
      "gamma": 8.186886583225801,
      "success": true,
      "log_likelihood": -24.953322482888833,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.2292391307417918,
      "beta": -2.07857816635639,
      "gamma": 3.4538408671871013,
      "success": true,
      "log_likelihood": -24.897714327933187,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.0825967529779907,
      "beta": -10.0,
      "gamma": 4.158258296721161,
      "success": true,
      "log_likelihood": -24.953434695838467,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.7704131261321905,
      "beta": -10.0,
      "gamma": 8.871305954909767,
      "success": true,
      "log_likelihood": -24.953389297969775,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.2631844575186686,
      "beta": 0.2840671615770462,
      "gamma": 5.307769734917636,
      "success": true,
      "log_likelihood": -23.545973163862982,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.817188651156693,
      "beta": 10.0,
      "gamma": 1.555164754818662,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.7671499820233239,
      "beta": 0.8150359651679007,
      "gamma": 8.723805784254875,
      "success": true,
      "log_likelihood": -22.914510056151578,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.9065857238839772,
      "beta": 10.0,
      "gamma": 9.363062463225141,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.918569706339444,
      "beta": -10.0,
      "gamma": 8.477468144144689,
      "success": true,
      "log_likelihood": -24.95348009370716,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.1431354100173579,
      "beta": -10.0,
      "gamma": 1.5726544314187496,
      "success": true,
      "log_likelihood": -24.95338929796977,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.2192399548464343,
      "beta": -10.0,
      "gamma": 0.022093592987062483,
      "success": true,
      "log_likelihood": -24.953934072394095,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.1192869544979986,
      "beta": -10.0,
      "gamma": 4.686423427491243,
      "success": true,
      "log_likelihood": -24.953434695838467,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.1794724483272037,
      "beta": 10.0,
      "gamma": 5.127748021431402,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.2483688049955723,
      "beta": 10.0,
      "gamma": 5.7108411662762055,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.3913740050060768,
      "beta": 10.0,
      "gamma": 0.05833232205906702,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.3380285236359395,
      "beta": 10.0,
      "gamma": 7.370140317970192,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.3614886111758802,
      "beta": 10.0,
      "gamma": 7.106713682936087,
      "success": true,
      "log_likelihood": -16.27763329973089,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.3881763204911257,
      "beta": 10.0,
      "gamma": 5.517611446840584,
      "success": true,
      "log_likelihood": -15.27767869783462,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5750933844586544,
      "beta": 10.0,
      "gamma": 0.2704320078118094,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.7507650599481539,
      "beta": -1.2467244382015477,
      "gamma": 3.1868888434380604,
      "success": true,
      "log_likelihood": -24.7306168187711,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.8482531838799576,
      "beta": 10.0,
      "gamma": 7.279929073235318,
      "success": true,
      "log_likelihood": -16.27763329973089,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.7423768389601358,
      "beta": -9.999999999999998,
      "gamma": 8.64780001895579,
      "success": true,
      "log_likelihood": -24.95352549157585,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3333333333333333,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.041116578356693,
      "beta": -2.0783829972332004,
      "gamma": 7.625122002038602,
      "success": true,
      "log_likelihood": -24.897714324544577,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.801638136522005,
      "beta": -10.0,
      "gamma": 6.522096914030133,
      "success": true,
      "log_likelihood": -24.953298502232386,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.7761054506760651,
      "beta": -0.6790577284139707,
      "gamma": 3.130954627618431,
      "success": true,
      "log_likelihood": -24.45095756849648,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.0785539078929984,
      "beta": -1.2474389160585624,
      "gamma": 1.9457476615775637,
      "success": true,
      "log_likelihood": -24.730616750303902,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.4836603946223617,
      "beta": -10.0,
      "gamma": 0.9967756579715115,
      "success": true,
      "log_likelihood": -24.953661685181935,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.3773401590642878,
      "beta": 10.0,
      "gamma": 8.193450073410117,
      "success": true,
      "log_likelihood": -15.27767869783462,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.0391761970326967,
      "beta": 10.0,
      "gamma": 9.288556278608086,
      "success": true,
      "log_likelihood": -19.2774971054197,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.4175155834637359,
      "beta": 10.0,
      "gamma": 9.497905589237543,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.9207756055209757,
      "beta": -10.0,
      "gamma": 5.8380946072085225,
      "success": true,
      "log_likelihood": -24.953979470262787,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.8103182712029229,
      "beta": -10.0,
      "gamma": 0.46842921320100817,
      "success": true,
      "log_likelihood": -24.953434695838464,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.8887364934126543,
      "beta": -10.0,
      "gamma": 5.248191445384124,
      "success": true,
      "log_likelihood": -24.953480093707164,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.1486785954878416,
      "beta": 10.0,
      "gamma": 4.285395551010518,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.0444077137344332,
      "beta": 0.28407394858979745,
      "gamma": 8.069744738804143,
      "success": true,
      "log_likelihood": -23.54597316384961,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.1869871464419801,
      "beta": 1.5229468621121467,
      "gamma": 0.8349288313818637,
      "success": true,
      "log_likelihood": -22.157938155011482,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.335019601172374,
      "beta": -6.0882218671525345,
      "gamma": 3.1294185881824763,
      "success": true,
      "log_likelihood": -24.953321564738996,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.9207985511650792,
      "beta": 0.8148746140361319,
      "gamma": 6.846891333587871,
      "success": true,
      "log_likelihood": -22.9145100514133,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.6668423800884762,
      "beta": 10.0,
      "gamma": 2.2172419417068525,
      "success": true,
      "log_likelihood": -14.277724095938346,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.712270960803244,
      "beta": -0.1926538626340801,
      "gamma": 9.583705608812139,
      "success": true,
      "log_likelihood": -24.05694518872353,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.3808137655832153,
      "beta": -10.0,
      "gamma": 6.538368461074842,
      "success": true,
      "log_likelihood": -24.95375248091932,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.4033722683453598,
      "beta": 10.0,
      "gamma": 6.442903200833616,
      "success": true,
      "log_likelihood": -12.277814892145805,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.0986352122628493,
      "beta": -1.2474590437932553,
      "gamma": 7.3550637808024755,
      "success": true,
      "log_likelihood": -24.7306167503506,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.349016875153819,
      "beta": -0.19265306216759462,
      "gamma": 4.987117539310988,
      "success": true,
      "log_likelihood": -24.056945188723383,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.2130053723245098,
      "beta": 3.0657838381227935,
      "gamma": 8.997521778329835,
      "success": true,
      "log_likelihood": -21.270320868619617,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5210137099370047,
      "beta": -5.6248008872811655,
      "gamma": 1.2832274658761222,
      "success": true,
      "log_likelihood": -24.94976231328616,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.0877819510826936,
      "beta": -10.0,
      "gamma": 4.013770686634587,
      "success": true,
      "log_likelihood": -24.95348009370716,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.2042961678150785,
      "beta": -10.0,
      "gamma": 8.240223903626982,
      "success": true,
      "log_likelihood": -24.953434695838464,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.7366092009913175,
      "beta": -2.0782962865154517,
      "gamma": 1.796251010282135,
      "success": true,
      "log_likelihood": -24.897714324110233,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.446562297459396,
      "beta": 1.5226839459955213,
      "gamma": 0.5032465549266496,
      "success": true,
      "log_likelihood": -22.157938163237333,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5315819169127511,
      "beta": -10.0,
      "gamma": 0.28652404814126897,
      "success": true,
      "log_likelihood": -24.9538886745254,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.9805725391180087,
      "beta": -2.0784026851974464,
      "gamma": 2.05302419473714,
      "success": true,
      "log_likelihood": -24.89771432473502,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.205725205471451,
      "beta": -0.6790540424935282,
      "gamma": 2.266559297308718,
      "success": true,
      "log_likelihood": -24.450957568495166,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.8556675739190573,
      "beta": -10.0,
      "gamma": 0.45004972462708626,
      "success": true,
      "log_likelihood": -24.95348009370716,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.3742929247167894,
      "beta": -10.0,
      "gamma": 6.073627228073262,
      "success": true,
      "log_likelihood": -24.953570889444546,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3333333333333333,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.3514890133818362,
      "beta": -10.0,
      "gamma": 7.788194588030567,
      "success": true,
      "log_likelihood": -24.953661685181938,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.4423062554116304,
      "beta": 10.0,
      "gamma": 2.933986805494518,
      "success": true,
      "log_likelihood": -15.27767869783462,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.7105468659563887,
      "beta": -10.0,
      "gamma": 6.29141766721151,
      "success": true,
      "log_likelihood": -24.953934072394095,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.3776944594967742,
      "beta": 10.0,
      "gamma": 6.451554974064732,
      "success": true,
      "log_likelihood": -18.27754250352343,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.1557254867858218,
      "beta": -0.19265388398515326,
      "gamma": 9.060262894713402,
      "success": true,
      "log_likelihood": -24.056945188723528,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.0876081672886824,
      "beta": -9.139050338594593,
      "gamma": 1.8292968700321555,
      "success": true,
      "log_likelihood": -24.95329854484293,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.7072707175104711,
      "beta": -10.0,
      "gamma": 4.436112741807165,
      "success": true,
      "log_likelihood": -24.953979470262787,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.3675682355620302,
      "beta": -10.0,
      "gamma": 4.344607396535967,
      "success": true,
      "log_likelihood": -24.95338929796977,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.0382784206577769,
      "beta": -10.0,
      "gamma": 5.630212259289113,
      "success": true,
      "log_likelihood": -24.95375248091932,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.7043225401260794,
      "beta": -1.2474088444291545,
      "gamma": 4.158468719866447,
      "success": true,
      "log_likelihood": -24.730616750435704,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.8103525831821033,
      "beta": 10.0,
      "gamma": 1.0829332563470973,
      "success": true,
      "log_likelihood": -14.277724095938348,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.0791386177894968,
      "beta": 10.0,
      "gamma": 0.853925391251753,
      "success": true,
      "log_likelihood": -16.277633299730887,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.2881426278533912,
      "beta": -1.2475033161745885,
      "gamma": 9.882672391856397,
      "success": true,
      "log_likelihood": -24.730616750834137,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.4780786433783342,
      "beta": 10.0,
      "gamma": 0.8856518852956297,
      "success": true,
      "log_likelihood": -14.27772409593835,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.8960820006543329,
      "beta": -10.0,
      "gamma": 7.903873550213225,
      "success": true,
      "log_likelihood": -24.953934072394095,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.7200925156350723,
      "beta": -10.0,
      "gamma": 5.246944959310732,
      "success": true,
      "log_likelihood": -24.9538886745254,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.7991586521286245,
      "beta": -7.232687090838738,
      "gamma": 9.695801346318655,
      "success": true,
      "log_likelihood": -24.95257878420962,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.37389071742427,
      "beta": 10.0,
      "gamma": 6.040489487184031,
      "success": true,
      "log_likelihood": -19.2774971054197,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.4737960313723888,
      "beta": -7.123101604082773,
      "gamma": 3.7314570083943375,
      "success": true,
      "log_likelihood": -24.953301413510637,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.0625479554464814,
      "beta": 8.436531147448013,
      "gamma": 7.607778789743507,
      "success": true,
      "log_likelihood": -22.277135204186415,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.0358659354331645,
      "beta": 10.0,
      "gamma": 5.615996935563835,
      "success": true,
      "log_likelihood": -13.277769494042078,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.135113223358287,
      "beta": -10.0,
      "gamma": 1.693340420956757,
      "success": true,
      "log_likelihood": -24.95402486813148,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.8005712774516348,
      "beta": -0.19266230006723237,
      "gamma": 4.750759472544611,
      "success": true,
      "log_likelihood": -24.056945188745274,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.3607008993418914,
      "beta": -10.0,
      "gamma": 8.346140129769354,
      "success": true,
      "log_likelihood": -24.953979470262784,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.765519049841501,
      "beta": -2.0876104416643164,
      "gamma": 6.262697517997765,
      "success": true,
      "log_likelihood": -24.89771811106088,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.2189852219197777,
      "beta": 10.0,
      "gamma": 8.623732326137327,
      "success": true,
      "log_likelihood": -14.277724095938348,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.007991069728973,
      "beta": -9.999999999999998,
      "gamma": 5.443078980367452,
      "success": true,
      "log_likelihood": -24.953934072394095,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.7025930330339045,
      "beta": -9.40851314512253,
      "gamma": 7.482231736902435,
      "success": true,
      "log_likelihood": -24.953298523227904,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5929856196753035,
      "beta": -0.19270158900648282,
      "gamma": 8.110864866292186,
      "success": true,
      "log_likelihood": -24.056945189338784,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.6835947468913193,
      "beta": -10.0,
      "gamma": 1.6547608230941857,
      "success": true,
      "log_likelihood": -24.95393407239409,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.1717073962574327,
      "beta": 1.52302169354169,
      "gamma": 1.0902696268063405,
      "success": true,
      "log_likelihood": -22.157938154755918,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.4731860857994565,
      "beta": -10.0,
      "gamma": 3.648758829345913,
      "success": true,
      "log_likelihood": -24.95375248091932,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.6619599938411465,
      "beta": 10.0,
      "gamma": 1.6474215808264658,
      "success": true,
      "log_likelihood": -13.277769494042078,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.2457262401051536,
      "beta": -6.685171920844668,
      "gamma": 0.8815892668989578,
      "success": true,
      "log_likelihood": -24.95455323996991,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.8402148464986761,
      "beta": 1.522894620417077,
      "gamma": 5.697906121087353,
      "success": true,
      "log_likelihood": -22.15793815573765,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "phi": {
        "r": -0.04501897890709298,
        "p": 0.6564965323346726
      },
      "beta": {
        "r": 0.6736296352293962,
        "p": 1.595325876172043e-14
      },
      "gamma": {
        "r": -0.09676945620786706,
        "p": 0.33817450611284167
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 53.92769024635262,
  "bic_results": {
    "average_bic": 53.92769024635262,
    "individual_bics": [
      60.6585157558939,
      60.657201781146,
      60.5459854712347,
      60.65742620704526,
      60.65733541130788,
      57.84250314309429,
      33.3062773958674,
      56.57957692767148,
      33.3062773958674,
      60.657517002782654,
      60.65733541130787,
      60.65842496015652,
      60.65742620704526,
      33.3062773958674,
      33.3062773958674,
      33.3062773958674,
      33.3062773958674,
      43.305823414830115,
      41.305914211037575,
      33.3062773958674,
      60.211790452910535,
      43.305823414830115,
      60.65760779852003,
      60.54598546445749,
      60.6571538198331,
      59.652471952361296,
      60.21179031597613,
      60.657880185732196,
      41.305914211037575,
      49.30555102620774,
      33.3062773958674,
      60.6585157558939,
      60.65742620704526,
      60.657517002782654,
      33.3062773958674,
      57.842503143067546,
      55.0664331253913,
      60.657199944846326,
      56.57957691819493,
      39.30600500724502,
      58.86444719281539,
      60.65806177720697,
      35.30618659965994,
      60.211790316069525,
      58.86444719281509,
      53.29119855260757,
      60.65008144194066,
      60.657517002782654,
      60.65742620704526,
      60.54598546358879,
      55.06643314184299,
      60.65833416441913,
      60.54598546483837,
      59.65247195235867,
      60.657517002782654,
      60.657698594257425,
      60.65788018573221,
      41.305914211037575,
      60.65842496015652,
      47.3056418224152,
      58.86444719281539,
      60.65715390505419,
      60.6585157558939,
      60.65733541130787,
      60.65806177720697,
      60.21179031623974,
      39.30600500724503,
      43.3058234148301,
      60.2117903170366,
      39.306005007245034,
      60.65842496015652,
      60.65833416441913,
      60.65571438378757,
      49.30555102620774,
      60.6571596423896,
      55.30482722374116,
      37.306095803452486,
      60.658606551631294,
      58.864447192858876,
      60.6585157558939,
      60.54599303749009,
      39.30600500724503,
      60.65842496015652,
      60.65715386182414,
      58.864447194045894,
      60.65842496015651,
      55.06643312488016,
      60.65806177720697,
      37.306095803452486,
      60.65966329530815,
      55.066433126843634
    ],
    "group_enabled": false,
    "group_bics": null,
    "num_parameters": 3,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- phi: r = -0.045\n- beta: r = 0.674\n- gamma: r = -0.097",
  "previous_models": [
    "Specification: \u03b4 = 1\u00d710\u207b\u2076  \na = (F\u2081 + F\u2082 + F\u2083 + F\u2084 + F\u2085 + F\u2086 + F\u2087 + F\u2088 + F\u2089 + F\u2081\u2080 + F\u2081\u2081) + \u03b4  \na_mod = 1.08 \u00b7 a \u00b7 (1 + 0.012 \u00b7 sin(a + 0.045))  \nz = a_mod \u00b7 (1 + 0.008 \u00b7 cos(a + 0.065)) \u00b7 (1 + 0.005 \u00b7 sin(a + 0.115)) \u00b7 (1 + 0.004 \u00b7 cos(a + 0.085)) \u00b7 (1 + 0.006 \u00b7 sin(a + 0.035) \u00b7 cos(a + 0.055)) \u00b7 (1 + 0.003 \u00b7 sin(a + 0.03) \u00b7 cos(a + 0.05))  \nw = (phi \u2212 0.5) / phi  \nsoftsign(x) = x/(1 + |x|)  \nf_adapt(z) = { if z \u2265 0 then clip[1.002 \u00b7 (z^w \u00b7 (ln(1+z))^(1\u2212w)) \u00b7 softsign(z), \u221235, 35]  \n                 else phi \u00b7 (softsign(z + 1\u00d710\u207b\u2076))^11 }  \nT = \u03a3\u2096\u208c\u2080\u00b2\u2070 c\u2096 \u00b7 a\u1d4f  \nextra = { exp(\u2212a/0.1) \u00b7 (z/(1+|z|)) \u00b7 (1 + 0.005\u00b7sin(1/(1+a))) \u00b7 (1 + 0.002\u00b7cos(0.5\u00b7a)) \u00b7 ([1 + 0.003\u00b7cos(0.3\u00b7a)]\u00b2) \u00b7 ([1 + 0.004\u00b7cos(0.3\u00b7a)]\u00b2) \u00b7 (1 + 0.0025\u00b7cos(0.7\u00b7a)) \u00b7 (1 + tanh(0.05\u00b7a)) \u00b7 (1 + sigmoid(0.01\u00b7a)) \u00b7 (1 + 0.002\u00b7cos(3\u00b7a)) \u00b7 (1 + 0.002\u00b7sin(2.5\u00b7a) + 0.001\u00b7cos(3.5\u00b7a) + 0.0015\u00b7sin(3\u00b7a)) \u00b7 (1 + sigmoid(0.03\u00b7a)) \u00b7 (1 + tanh(0.07\u00b7a)) \u00b7 (1 + cos(3.1\u00b7a)) \u00b7 (1.07\u00b7softplus(0.865/(1+a)) + 0.15\u00b7(0.865/(1+a)) + 0.5\u00b7(0.865/(1+a)) + 0.006\u00b7a) \u00b7 (1 \u2212 0.002\u00b7cos(a)) \u00b7 (1 \u2212 0.0025\u00b7cos(2.5\u00b7a)) \u00b7 (1 + 0.001\u00b7a) \u00b7 ([1 + cosh(0.001\u00b7a)]^(2 + 0.0005\u00b7a)) + 1\u00d710\u207b\u2076 }^(0.9478 + 0.00018\u00b7ln(1+a)) \u00b7 (1 + tanh(0.05\u00b7a))  \nE = (0.9478 + 0.00018\u00b7ln(1+a)) \u00b7 [1 + 0.003\u00b7sin(2\u00b7a) + 0.001\u00b7cos(3\u00b7a) + 0.0025\u00b7cos(0.7\u00b7a) + 0.004\u00b7sin(2.5\u00b7a) + 0.002\u00b7cos(3.5\u00b7a) + 0.001\u00b7(sin(2.5\u00b7a)\u00b7cos(3\u00b7a)) + 0.002\u00b7sin(2.5\u00b7a)]  \nf(x) = sign(z) \u00b7 [ f_adapt(z) \u00b7 T \u00b7 extra ]^(E)  \nU = beta + gamma \u00b7 f(x)  \nP(accept=1) = 1/(1 + exp(\u2212U))\nSummary: A highly nonlinear utility model that first aggregates eleven fixed components, then applies sequential sinusoidal and cosine modulations to compute an intermediate signal. This signal is adaptively transformed\u2014using distinct formulations for positive and negative regimes with strict clipping\u2014and further modulated via a fixed high\u2010order polynomial threshold and an elaborate composite term incorporating exponential decay, trigonometric, sigmoid, tanh, and softplus functions. The final transformed signal is combined linearly with a learnable base parameter (beta) and scaled by a learnable factor (gamma) to yield latent utility, which is converted via a logistic function into the probability of a responder accepting a proposal. Only three learnable parameters (beta, gamma, and phi) constrain the model.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 53.92769024635262\nOverall Accuracy: 0.5592\n\nParameter Recovery:\n- phi: r = -0.045\n- beta: r = 0.674\n- gamma: r = -0.097"
  ]
}