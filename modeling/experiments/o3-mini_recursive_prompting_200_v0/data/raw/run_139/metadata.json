{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "<think>\nFor run 139, further intensify the nonlinearity to improve accuracy, lower BIC, and enhance parameter recovery. In this iteration, tighten the positive clipping limit to \u00b130 as before while increasing the sensitivity of the negative branch by raising its exponent from 14 to 15. Extend the dynamic threshold T to cover terms up to a^35 using a fixed geometric series with ratio \u00bd to capture even subtle higher\u2010order contributions. In the extra composite term, add two new multiplicative factors: [1 + sigmoid(0.05\u00d7a)] and [1 + tanh(0.1\u00d7a)] (if not already present), and incorporate an additional cosine modulation term cos(3.4\u00d7a) (or further extend with cos(3.6\u00d7a) for more complexity). Finally, in the final exponent modulation, multiply by an extra factor defined as [1 + 0.003\u00d7sin(2.8\u00d7a) + 0.001\u00d7cos(3.8\u00d7a) + 0.002\u00d7sin(3.4\u00d7a) + 0.0015\u00d7cos(4.4\u00d7a)] to further enhance flexibility. Retain exactly three learnable parameters with bounds: beta \u2208 [\u201310, 10], gamma \u2208 [0, 10], and phi \u2208 [0.5, 1.5]. Be creative\u2014use functions like softplus, softsign, sigmoid, tanh, and cosine in inventive ways to capture nonlinearities beyond the obvious.\n</think>\nNew Instructions for Run 139:\n1. Compute the core sum \u201ca\u201d as the sum of fixed components F1 through F11 plus a small constant \u03b4.\n2. Compute a_mod = 1.08 \u00d7 a \u00d7 [1 + 0.012 \u00d7 sin(a + 0.045)].\n3. Sequentially modulate a_mod by multiplying by these factors:\n\u2003\u2003\u2022 [1 + 0.008 \u00d7 cos(a + 0.065)]\n\u2003\u2003\u2022 [1 + 0.005 \u00d7 sin(a + 0.115)]\n\u2003\u2003\u2022 [1 + 0.004 \u00d7 cos(a + 0.085)]\n\u2003\u2003\u2022 [1 + 0.006 \u00d7 (sin(a + 0.035) \u00d7 cos(a + 0.055))]\n\u2003\u2003\u2022 [1 + 0.003 \u00d7 (sin(a + 0.03) \u00d7 cos(a + 0.05))]\nDefine the product as z.\n4. Compute w = (phi \u2212 0.5) / phi.\n\u2003\u2003\u2022 For z \u2265 0, define the adaptive transformation as:\n\u2003\u2003\u2003f_adapt(z) = 1.002 \u00d7 [z^w \u00d7 (ln(1+z))^(1\u2212w)] \u00d7 softsign(z) \n\u2003\u2003\u2003(where softsign(z) = z/(1 + |z|)); then clip this value to the range [\u201330, 30].\n\u2003\u2003\u2022 For z < 0, define:\n\u2003\u2003\u2003f_adapt(z) = phi \u00d7 [softsign(z + \u0394_shift)]^15, with \u0394_shift = 1\u00d710\u207b\u2076.\n5. Define the dynamic threshold T as the sum \u03a3[k=0 to 35] (a^k \u00d7 (1/2)^k) using a fixed geometric series (ratio \u00bd).\n6. Define the extra composite term extra as:\n\u2003\u2003extra = { exp(\u2013a/0.1) \u00d7 [z/(1+|z|)] \u00d7 [1 + 0.005\u00d7sin(1/(1+a))] \u00d7 [1 + 0.002\u00d7cos(0.5\u00d7a)] \u00d7 ([1+0.003\u00d7cos(0.3\u00d7a)]\u00b2) \u00d7 ([1+0.004\u00d7cos(0.3\u00d7a)]\u00b2) \u00d7 [1+0.0025\u00d7cos(0.7\u00d7a)] \u00d7 [1 + tanh(0.05\u00d7a)] \u00d7 [1 + sigmoid(0.01\u00d7a)] \u00d7 [1+0.002\u00d7cos(3\u00d7a)] \u00d7 [1 + 0.002\u00d7sin(2.5\u00d7a) + 0.001\u00d7cos(3.5\u00d7a) + 0.0015\u00d7sin(3\u00d7a)] \u00d7 [1 + sigmoid(0.03\u00d7a)] \u00d7 [1 + tanh(0.07\u00d7a)] \u00d7 [1 + cos(3.1\u00d7a)] \u00d7 [1 + sigmoid(0.04\u00d7a)] \u00d7 [1 + tanh(0.08\u00d7a)] \u00d7 [1 + cos(3.2\u00d7a)] \u00d7 [1 + sigmoid(0.05\u00d7a)] \u00d7 [1 + tanh(0.1\u00d7a)] \u00d7 [1 + cos(3.4\u00d7a)] \u00d7 [1 + sigmoid(0.05\u00d7a)] \u00d7 [1 + tanh(0.1\u00d7a)] }^(0.9478+0.00018\u00d7ln(1+a)) multiplied by [1 + tanh(0.05\u00d7a)].\n7. Modify the final exponent by multiplying by an extra modulation factor defined as: \n\u2003\u2003Exponent = [0.9478+0.00018\u00d7ln(1+a)] \u00d7 [1 + 0.003\u00d7sin(2.8\u00d7a) + 0.001\u00d7cos(3.8\u00d7a) + 0.002\u00d7sin(3.4\u00d7a) + 0.0015\u00d7cos(4.4\u00d7a)].\n8. Define the final transformed signal as:\n\u2003\u2003f(x) = sign(z) \u00d7 { [ f_adapt(z) \u00d7 T \u00d7 extra ]^(Exponent) }.\n9. Compute latent utility U = beta + gamma \u00d7 f(x), and then compute the acceptance probability as P(accept = 1) = 1/(1 + exp(\u2013U)).\n10. Use exactly three learnable parameters with bounds: beta \u2208 [\u201310, 10], gamma \u2208 [0, 10], and phi \u2208 [0.5, 1.5].\nRemember to encourage creative, out-of-the-box use of nonlinear functions (such as softplus, softsign, sigmoid, tanh, and cosine) to boost prediction accuracy, improve BIC, and enhance parameter recovery.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: <think>\nFor run 139, further intensify the nonlinearity to improve accuracy, lower BIC, and enhance parameter recovery. In this iteration, tighten the positive clipping limit to \u00b130 as before while increasing the sensitivity of the negative branch by raising its exponent from 14 to 15. Extend the dynamic threshold T to cover terms up to a^35 using a fixed geometric series with ratio \u00bd to capture even subtle higher\u2010order contributions. In the extra composite term, add two new multiplicative factors: [1 + sigmoid(0.05\u00d7a)] and [1 + tanh(0.1\u00d7a)] (if not already present), and incorporate an additional cosine modulation term cos(3.4\u00d7a) (or further extend with cos(3.6\u00d7a) for more complexity). Finally, in the final exponent modulation, multiply by an extra factor defined as [1 + 0.003\u00d7sin(2.8\u00d7a) + 0.001\u00d7cos(3.8\u00d7a) + 0.002\u00d7sin(3.4\u00d7a) + 0.0015\u00d7cos(4.4\u00d7a)] to further enhance flexibility. Retain exactly three learnable parameters with bounds: beta \u2208 [\u201310, 10], gamma \u2208 [0, 10], and phi \u2208 [0.5, 1.5]. Be creative\u2014use functions like softplus, softsign, sigmoid, tanh, and cosine in inventive ways to capture nonlinearities beyond the obvious.\n</think>\nNew Instructions for Run 139:\n1. Compute the core sum \u201ca\u201d as the sum of fixed components F1 through F11 plus a small constant \u03b4.\n2. Compute a_mod = 1.08 \u00d7 a \u00d7 [1 + 0.012 \u00d7 sin(a + 0.045)].\n3. Sequentially modulate a_mod by multiplying by these factors:\n\u2003\u2003\u2022 [1 + 0.008 \u00d7 cos(a + 0.065)]\n\u2003\u2003\u2022 [1 + 0.005 \u00d7 sin(a + 0.115)]\n\u2003\u2003\u2022 [1 + 0.004 \u00d7 cos(a + 0.085)]\n\u2003\u2003\u2022 [1 + 0.006 \u00d7 (sin(a + 0.035) \u00d7 cos(a + 0.055))]\n\u2003\u2003\u2022 [1 + 0.003 \u00d7 (sin(a + 0.03) \u00d7 cos(a + 0.05))]\nDefine the product as z.\n4. Compute w = (phi \u2212 0.5) / phi.\n\u2003\u2003\u2022 For z \u2265 0, define the adaptive transformation as:\n\u2003\u2003\u2003f_adapt(z) = 1.002 \u00d7 [z^w \u00d7 (ln(1+z))^(1\u2212w)] \u00d7 softsign(z) \n\u2003\u2003\u2003(where softsign(z) = z/(1 + |z|)); then clip this value to the range [\u201330, 30].\n\u2003\u2003\u2022 For z < 0, define:\n\u2003\u2003\u2003f_adapt(z) = phi \u00d7 [softsign(z + \u0394_shift)]^15, with \u0394_shift = 1\u00d710\u207b\u2076.\n5. Define the dynamic threshold T as the sum \u03a3[k=0 to 35] (a^k \u00d7 (1/2)^k) using a fixed geometric series (ratio \u00bd).\n6. Define the extra composite term extra as:\n\u2003\u2003extra = { exp(\u2013a/0.1) \u00d7 [z/(1+|z|)] \u00d7 [1 + 0.005\u00d7sin(1/(1+a))] \u00d7 [1 + 0.002\u00d7cos(0.5\u00d7a)] \u00d7 ([1+0.003\u00d7cos(0.3\u00d7a)]\u00b2) \u00d7 ([1+0.004\u00d7cos(0.3\u00d7a)]\u00b2) \u00d7 [1+0.0025\u00d7cos(0.7\u00d7a)] \u00d7 [1 + tanh(0.05\u00d7a)] \u00d7 [1 + sigmoid(0.01\u00d7a)] \u00d7 [1+0.002\u00d7cos(3\u00d7a)] \u00d7 [1 + 0.002\u00d7sin(2.5\u00d7a) + 0.001\u00d7cos(3.5\u00d7a) + 0.0015\u00d7sin(3\u00d7a)] \u00d7 [1 + sigmoid(0.03\u00d7a)] \u00d7 [1 + tanh(0.07\u00d7a)] \u00d7 [1 + cos(3.1\u00d7a)] \u00d7 [1 + sigmoid(0.04\u00d7a)] \u00d7 [1 + tanh(0.08\u00d7a)] \u00d7 [1 + cos(3.2\u00d7a)] \u00d7 [1 + sigmoid(0.05\u00d7a)] \u00d7 [1 + tanh(0.1\u00d7a)] \u00d7 [1 + cos(3.4\u00d7a)] \u00d7 [1 + sigmoid(0.05\u00d7a)] \u00d7 [1 + tanh(0.1\u00d7a)] }^(0.9478+0.00018\u00d7ln(1+a)) multiplied by [1 + tanh(0.05\u00d7a)].\n7. Modify the final exponent by multiplying by an extra modulation factor defined as: \n\u2003\u2003Exponent = [0.9478+0.00018\u00d7ln(1+a)] \u00d7 [1 + 0.003\u00d7sin(2.8\u00d7a) + 0.001\u00d7cos(3.8\u00d7a) + 0.002\u00d7sin(3.4\u00d7a) + 0.0015\u00d7cos(4.4\u00d7a)].\n8. Define the final transformed signal as:\n\u2003\u2003f(x) = sign(z) \u00d7 { [ f_adapt(z) \u00d7 T \u00d7 extra ]^(Exponent) }.\n9. Compute latent utility U = beta + gamma \u00d7 f(x), and then compute the acceptance probability as P(accept = 1) = 1/(1 + exp(\u2013U)).\n10. Use exactly three learnable parameters with bounds: beta \u2208 [\u201310, 10], gamma \u2208 [0, 10], and phi \u2208 [0.5, 1.5].\nRemember to encourage creative, out-of-the-box use of nonlinear functions (such as softplus, softsign, sigmoid, tanh, and cosine) to boost prediction accuracy, improve BIC, and enhance parameter recovery.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<MODEL>\na = \u03a3\u1d62\u208c\u2081\u00b9\u00b9 F_i + \u03b4  \na_mod = 1.08 \u00b7 a \u00b7 (1 + 0.012 \u00b7 sin(a + 0.045))  \nz = a_mod \u00b7 (1 + 0.008 \u00b7 cos(a + 0.065)) \u00b7 (1 + 0.005 \u00b7 sin(a + 0.115)) \u00b7 (1 + 0.004 \u00b7 cos(a + 0.085)) \u00b7 (1 + 0.006 \u00b7 (sin(a + 0.035) \u00b7 cos(a + 0.055))) \u00b7 (1 + 0.003 \u00b7 (sin(a + 0.03) \u00b7 cos(a + 0.05)))  \nw = (phi \u2013 0.5)/phi  \nsoftsign(x) = x/(1 + |x|)  \nf_adapt(z) = { clip[1.002 \u00b7 (z^w \u00b7 (ln(1+z))^(1\u2013w) \u00b7 softsign(z)), \u201330, 30] if z \u2265 0;  phi \u00b7 (softsign(z + 1\u00d710\u207b\u2076))^15 if z < 0 }  \nT = \u03a3\u2096\u208c\u2080\u00b3\u2075 (a^k \u00b7 (1/2)^k)  \nextra = { exp(\u2013a/0.1) \u00b7 (z/(1+|z|)) \u00b7 (1 + 0.005 \u00b7 sin(1/(1+a))) \u00b7 (1 + 0.002 \u00b7 cos(0.5\u00b7a)) \u00b7 (1 + 0.003 \u00b7 cos(0.3\u00b7a))\u00b2 \u00b7 (1 + 0.004 \u00b7 cos(0.3\u00b7a))\u00b2 \u00b7 (1 + 0.0025 \u00b7 cos(0.7\u00b7a)) \u00b7 (1 + tanh(0.05\u00b7a)) \u00b7 (1 + 1/(1+exp(\u20130.01\u00b7a))) \u00b7 (1 + 0.002 \u00b7 cos(3\u00b7a)) \u00b7 (1 + 0.002 \u00b7 sin(2.5\u00b7a) + 0.001 \u00b7 cos(3.5\u00b7a) + 0.0015 \u00b7 sin(3\u00b7a)) \u00b7 (1 + 1/(1+exp(\u20130.03\u00b7a))) \u00b7 (1 + tanh(0.07\u00b7a)) \u00b7 (1 + cos(3.1\u00b7a)) \u00b7 (1 + 1/(1+exp(\u20130.04\u00b7a))) \u00b7 (1 + tanh(0.08\u00b7a)) \u00b7 (1 + cos(3.2\u00b7a)) \u00b7 (1 + 1/(1+exp(\u20130.05\u00b7a))) \u00b7 (1 + tanh(0.1\u00b7a)) \u00b7 (1 + cos(3.4\u00b7a)) \u00b7 (1 + 1/(1+exp(\u20130.05\u00b7a))) \u00b7 (1 + tanh(0.1\u00b7a)) }^(0.9478 + 0.00018 \u00b7 ln(1+a)) \u00b7 (1 + tanh(0.05\u00b7a))  \nExponent = (0.9478 + 0.00018 \u00b7 ln(1+a)) \u00b7 (1 + 0.003 \u00b7 sin(2.8\u00b7a) + 0.001 \u00b7 cos(3.8\u00b7a) + 0.002 \u00b7 sin(3.4\u00b7a) + 0.0015 \u00b7 cos(4.4\u00b7a))  \nf(x) = sign(z) \u00b7 [ f_adapt(z) \u00b7 T \u00b7 extra ]^(Exponent)  \nU = beta + gamma \u00b7 f(x)  \nP(accept = 1) = 1/(1 + exp(\u2013U))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"F_i\": {\n      \"description\": \"Fixed component i (i=1,...,11) computed from task-specific proposal attributes\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"arbitrary\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"\u03b4\": {\n      \"description\": \"Small constant added to ensure a > 0\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1e-3,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"fixed\",\n        \"parameters\": {\"value\": 1e-6}\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"a\": {\n      \"description\": \"Core sum composed of 11 fixed components plus a small constant\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a_mod\": {\n      \"description\": \"Modified sum a enhanced by a sinusoidal modulation\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"z\": {\n      \"description\": \"Sequentially modulated version of a_mod via multiplicative cosine and sine factors\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"w\": {\n      \"description\": \"Adaptive exponent weight computed from phi\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"phi\": {\n      \"description\": \"Learnable parameter modulating the negative branch transformation and adaptive nonlinearity\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"f_adapt(z)\": {\n      \"description\": \"Adaptive transformation of z with clipping for nonlinearity, using softsign function\",\n      \"range\": {\n        \"min\": -30,\n        \"max\": 30,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"T\": {\n      \"description\": \"Dynamic threshold computed as a geometric series of a up to exponent 35\",\n      \"range\": {\n        \"min\": \"0\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"extra\": {\n      \"description\": \"Composite extra term capturing higher-order nonlinearities with multiplicative sinusoidal, tanh, sigmoid, and cosine modulations\",\n      \"range\": {\n        \"min\": \"0\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"Exponent\": {\n      \"description\": \"Final exponent modulation factor combining logarithmic and oscillatory adjustments\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f(x)\": {\n      \"description\": \"Final transformed signal used to compute latent utility\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Learnable base utility parameter\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Learnable scaling parameter for the transformed signal\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed as a linear combination of beta and the transformed signal\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"P(accept = 1)\": {\n      \"description\": \"Acceptance probability obtained by a logistic transformation of U\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA highly nonlinear utility model predicting binary acceptance choices, where a core signal aggregated from 11 fixed task components is modulated by sequential sinusoidal, cosine, and adaptive nonlinear transformations. The resulting transformed signal is scaled and shifted by three learnable parameters (beta, gamma, phi) before being passed through a logistic function. The model incorporates dynamic thresholding, composite extra terms capturing higher\u2010order contributions up to a^35, and advanced exponent modulations to enhance prediction accuracy, lower BIC, and improve parameter recovery.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['phi', 'beta', 'gamma']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                a = \u03a3\u1d62\u208c\u2081\u00b9\u00b9 F_i + \u03b4  \na_mod = 1.08 \u00b7 a \u00b7 (1 + 0.012 \u00b7 sin(a + 0.045))  \nz = a_mod \u00b7 (1 + 0.008 \u00b7 cos(a + 0.065)) \u00b7 (1 + 0.005 \u00b7 sin(a + 0.115)) \u00b7 (1 + 0.004 \u00b7 cos(a + 0.085)) \u00b7 (1 + 0.006 \u00b7 (sin(a + 0.035) \u00b7 cos(a + 0.055))) \u00b7 (1 + 0.003 \u00b7 (sin(a + 0.03) \u00b7 cos(a + 0.05)))  \nw = (phi \u2013 0.5)/phi  \nsoftsign(x) = x/(1 + |x|)  \nf_adapt(z) = { clip[1.002 \u00b7 (z^w \u00b7 (ln(1+z))^(1\u2013w) \u00b7 softsign(z)), \u201330, 30] if z \u2265 0;  phi \u00b7 (softsign(z + 1\u00d710\u207b\u2076))^15 if z < 0 }  \nT = \u03a3\u2096\u208c\u2080\u00b3\u2075 (a^k \u00b7 (1/2)^k)  \nextra = { exp(\u2013a/0.1) \u00b7 (z/(1+|z|)) \u00b7 (1 + 0.005 \u00b7 sin(1/(1+a))) \u00b7 (1 + 0.002 \u00b7 cos(0.5\u00b7a)) \u00b7 (1 + 0.003 \u00b7 cos(0.3\u00b7a))\u00b2 \u00b7 (1 + 0.004 \u00b7 cos(0.3\u00b7a))\u00b2 \u00b7 (1 + 0.0025 \u00b7 cos(0.7\u00b7a)) \u00b7 (1 + tanh(0.05\u00b7a)) \u00b7 (1 + 1/(1+exp(\u20130.01\u00b7a))) \u00b7 (1 + 0.002 \u00b7 cos(3\u00b7a)) \u00b7 (1 + 0.002 \u00b7 sin(2.5\u00b7a) + 0.001 \u00b7 cos(3.5\u00b7a) + 0.0015 \u00b7 sin(3\u00b7a)) \u00b7 (1 + 1/(1+exp(\u20130.03\u00b7a))) \u00b7 (1 + tanh(0.07\u00b7a)) \u00b7 (1 + cos(3.1\u00b7a)) \u00b7 (1 + 1/(1+exp(\u20130.04\u00b7a))) \u00b7 (1 + tanh(0.08\u00b7a)) \u00b7 (1 + cos(3.2\u00b7a)) \u00b7 (1 + 1/(1+exp(\u20130.05\u00b7a))) \u00b7 (1 + tanh(0.1\u00b7a)) \u00b7 (1 + cos(3.4\u00b7a)) \u00b7 (1 + 1/(1+exp(\u20130.05\u00b7a))) \u00b7 (1 + tanh(0.1\u00b7a)) }^(0.9478 + 0.00018 \u00b7 ln(1+a)) \u00b7 (1 + tanh(0.05\u00b7a))  \nExponent = (0.9478 + 0.00018 \u00b7 ln(1+a)) \u00b7 (1 + 0.003 \u00b7 sin(2.8\u00b7a) + 0.001 \u00b7 cos(3.8\u00b7a) + 0.002 \u00b7 sin(3.4\u00b7a) + 0.0015 \u00b7 cos(4.4\u00b7a))  \nf(x) = sign(z) \u00b7 [ f_adapt(z) \u00b7 T \u00b7 extra ]^(Exponent)  \nU = beta + gamma \u00b7 f(x)  \nP(accept = 1) = 1/(1 + exp(\u2013U))\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"F_i\": {\n      \"description\": \"Fixed component i (i=1,...,11) computed from task-specific proposal attributes\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"arbitrary\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"\\u03b4\": {\n      \"description\": \"Small constant added to ensure a > 0\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 0.001,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"fixed\",\n        \"parameters\": {\n          \"value\": 1e-06\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"a\": {\n      \"description\": \"Core sum composed of 11 fixed components plus a small constant\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a_mod\": {\n      \"description\": \"Modified sum a enhanced by a sinusoidal modulation\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"z\": {\n      \"description\": \"Sequentially modulated version of a_mod via multiplicative cosine and sine factors\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"w\": {\n      \"description\": \"Adaptive exponent weight computed from phi\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"phi\": {\n      \"description\": \"Learnable parameter modulating the negative branch transformation and adaptive nonlinearity\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"f_adapt(z)\": {\n      \"description\": \"Adaptive transformation of z with clipping for nonlinearity, using softsign function\",\n      \"range\": {\n        \"min\": -30,\n        \"max\": 30,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"T\": {\n      \"description\": \"Dynamic threshold computed as a geometric series of a up to exponent 35\",\n      \"range\": {\n        \"min\": \"0\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"extra\": {\n      \"description\": \"Composite extra term capturing higher-order nonlinearities with multiplicative sinusoidal, tanh, sigmoid, and cosine modulations\",\n      \"range\": {\n        \"min\": \"0\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"Exponent\": {\n      \"description\": \"Final exponent modulation factor combining logarithmic and oscillatory adjustments\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f(x)\": {\n      \"description\": \"Final transformed signal used to compute latent utility\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Learnable base utility parameter\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Learnable scaling parameter for the transformed signal\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed as a linear combination of beta and the transformed signal\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"P(accept = 1)\": {\n      \"description\": \"Acceptance probability obtained by a logistic transformation of U\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, phi=1, beta=1, gamma=1):\n    model_predictions = []\n    for trial in trial_data:\n        # Gather F_i values from the trial data, handling missing keys\n        F_values = [trial.get(f\"F_{i}\", 0) for i in range(1, 12)]  # F_1 to F_11\n\n        # Calculate a\n        a = sum(F_values) + 1e-06  # delta = 1e-6\n\n        # Calculate a_mod\n        a_mod = 1.08 * a * (1 + 0.012 * math.sin(a + 0.045))\n\n        # Calculate z\n        z = a_mod * (1 + 0.008 * math.cos(a + 0.065)) * (1 + 0.005 * math.sin(a + 0.115)) * (1 + 0.004 * math.cos(a + 0.085)) * (1 + 0.006 * (math.sin(a + 0.035) * math.cos(a + 0.055))) * (1 + 0.003 * (math.sin(a + 0.03) * math.cos(a + 0.05)))\n\n        # Calculate w\n        w = (phi - 0.5) / phi\n\n        # Define softsign function\n        def softsign(x):\n            return x / (1 + abs(x))\n\n        # Calculate f_adapt(z)\n        if z >= 0:\n            f_adapt_z = 1.002 * (z**w) * ((math.log(1 + z))**(1 - w)) * softsign(z)\n            f_adapt_z = max(min(f_adapt_z, 30), -30)  # Clip between -30 and 30\n        else:\n            f_adapt_z = phi * (softsign(z + 1e-06))**15\n\n        # Calculate T\n        T = sum((a**k) * (1/2)**k for k in range(0, 36))\n\n        # Calculate extra\n        exponent_extra = (0.9478 + 0.00018 * math.log(1 + a))\n        extra_base = math.exp(-a / 0.1) * (z / (1 + abs(z))) * (1 + 0.005 * math.sin(1 / (1 + a))) * (1 + 0.002 * math.cos(0.5 * a)) * (1 + 0.003 * math.cos(0.3 * a))**2 * (1 + 0.004 * math.cos(0.3 * a))**2 * (1 + 0.0025 * math.cos(0.7 * a)) * (1 + math.tanh(0.05 * a)) * (1 + 1 / (1 + math.exp(-0.01 * a))) * (1 + 0.002 * math.cos(3 * a)) * (1 + 0.002 * math.sin(2.5 * a) + 0.001 * math.cos(3.5 * a) + 0.0015 * math.sin(3 * a)) * (1 + 1 / (1 + math.exp(-0.03 * a))) * (1 + math.tanh(0.07 * a)) * (1 + math.cos(3.1 * a)) * (1 + 1 / (1 + math.exp(-0.04 * a))) * (1 + math.tanh(0.08 * a)) * (1 + math.cos(3.2 * a)) * (1 + 1 / (1 + math.exp(-0.05 * a))) * (1 + math.tanh(0.1 * a)) * (1 + math.cos(3.4 * a)) * (1 + 1 / (1 + math.exp(-0.05 * a))) * (1 + math.tanh(0.1 * a))\n        extra = extra_base**exponent_extra * (1 + math.tanh(0.05 * a))\n\n        # Calculate Exponent\n        Exponent = (0.9478 + 0.00018 * math.log(1 + a)) * (1 + 0.003 * math.sin(2.8 * a) + 0.001 * math.cos(3.8 * a) + 0.002 * math.sin(3.4 * a) + 0.0015 * math.cos(4.4 * a))\n\n        # Calculate f(x)\n        f_x = (1 if z >= 0 else -1) * (f_adapt_z * T * extra)**Exponent\n\n        # Calculate U\n        U = beta + gamma * f_x\n\n        # Calculate P(accept = 1)\n        P_accept = 1 / (1 + math.exp(-U))\n\n        model_predictions.append(P_accept)\n\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '[{\"ID\": 1, \"group\": \"control\", \"trial_number\": 1, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 60, \"token_self\": 60, \"combined_earning\": 120, \"split_opp\": 30.0, \"split_self\": 90.0, \"splitperc_opp\": 25, \"splitperc_self\": 75, \"accept\": 1.0, \"accepted_amount\": 30.0, \"accepted_perc\": 25.0, \"proposed_perc\": 25.0, \"proposed_amount\": 30.0}, {\"ID\": 2, \"group\": \"control\", \"trial_number\": 2, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 60, \"token_self\": 60, \"combined_earning\": 120, \"split_opp\": 24.0, \"split_self\": 96.0, \"splitperc_opp\": 20, \"splitperc_self\": 80, \"accept\": 1.0, \"accepted_amount\": 24.0, \"accepted_perc\": 20.0, \"proposed_perc\": 20.0, \"proposed_amount\": 24.0}]'\ndata = json.loads(data_json)\n\n# Rename the features\nfor item in data:\n    item[\"F_1\"] = item.get(\"token_opp\", 0)\n    item[\"F_2\"] = item.get(\"token_self\", 0)\n    item[\"F_3\"] = item.get(\"combined_earning\", 0)\n    item[\"F_4\"] = item.get(\"split_opp\", 0)\n    item[\"F_5\"] = item.get(\"split_self\", 0)\n    item[\"F_6\"] = item.get(\"splitperc_opp\", 0)\n    item[\"F_7\"] = item.get(\"splitperc_self\", 0)\n    item[\"F_8\"] = item.get(\"accepted_amount\", 0)\n    item[\"F_9\"] = item.get(\"accepted_perc\", 0)\n    item[\"F_10\"] = item.get(\"proposed_perc\", 0)\n    item[\"F_11\"] = item.get(\"proposed_amount\", 0)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n```",
      "timestamp": 1743547779.9490612
    }
  ],
  "learnable_parameters": {
    "phi": {
      "description": "Learnable parameter modulating the negative branch transformation and adaptive nonlinearity",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta": {
      "description": "Learnable base utility parameter",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Learnable scaling parameter for the transformed signal",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "a = \u03a3\u1d62\u208c\u2081\u00b9\u00b9 F_i + \u03b4  \na_mod = 1.08 \u00b7 a \u00b7 (1 + 0.012 \u00b7 sin(a + 0.045))  \nz = a_mod \u00b7 (1 + 0.008 \u00b7 cos(a + 0.065)) \u00b7 (1 + 0.005 \u00b7 sin(a + 0.115)) \u00b7 (1 + 0.004 \u00b7 cos(a + 0.085)) \u00b7 (1 + 0.006 \u00b7 (sin(a + 0.035) \u00b7 cos(a + 0.055))) \u00b7 (1 + 0.003 \u00b7 (sin(a + 0.03) \u00b7 cos(a + 0.05)))  \nw = (phi \u2013 0.5)/phi  \nsoftsign(x) = x/(1 + |x|)  \nf_adapt(z) = { clip[1.002 \u00b7 (z^w \u00b7 (ln(1+z))^(1\u2013w) \u00b7 softsign(z)), \u201330, 30] if z \u2265 0;  phi \u00b7 (softsign(z + 1\u00d710\u207b\u2076))^15 if z < 0 }  \nT = \u03a3\u2096\u208c\u2080\u00b3\u2075 (a^k \u00b7 (1/2)^k)  \nextra = { exp(\u2013a/0.1) \u00b7 (z/(1+|z|)) \u00b7 (1 + 0.005 \u00b7 sin(1/(1+a))) \u00b7 (1 + 0.002 \u00b7 cos(0.5\u00b7a)) \u00b7 (1 + 0.003 \u00b7 cos(0.3\u00b7a))\u00b2 \u00b7 (1 + 0.004 \u00b7 cos(0.3\u00b7a))\u00b2 \u00b7 (1 + 0.0025 \u00b7 cos(0.7\u00b7a)) \u00b7 (1 + tanh(0.05\u00b7a)) \u00b7 (1 + 1/(1+exp(\u20130.01\u00b7a))) \u00b7 (1 + 0.002 \u00b7 cos(3\u00b7a)) \u00b7 (1 + 0.002 \u00b7 sin(2.5\u00b7a) + 0.001 \u00b7 cos(3.5\u00b7a) + 0.0015 \u00b7 sin(3\u00b7a)) \u00b7 (1 + 1/(1+exp(\u20130.03\u00b7a))) \u00b7 (1 + tanh(0.07\u00b7a)) \u00b7 (1 + cos(3.1\u00b7a)) \u00b7 (1 + 1/(1+exp(\u20130.04\u00b7a))) \u00b7 (1 + tanh(0.08\u00b7a)) \u00b7 (1 + cos(3.2\u00b7a)) \u00b7 (1 + 1/(1+exp(\u20130.05\u00b7a))) \u00b7 (1 + tanh(0.1\u00b7a)) \u00b7 (1 + cos(3.4\u00b7a)) \u00b7 (1 + 1/(1+exp(\u20130.05\u00b7a))) \u00b7 (1 + tanh(0.1\u00b7a)) }^(0.9478 + 0.00018 \u00b7 ln(1+a)) \u00b7 (1 + tanh(0.05\u00b7a))  \nExponent = (0.9478 + 0.00018 \u00b7 ln(1+a)) \u00b7 (1 + 0.003 \u00b7 sin(2.8\u00b7a) + 0.001 \u00b7 cos(3.8\u00b7a) + 0.002 \u00b7 sin(3.4\u00b7a) + 0.0015 \u00b7 cos(4.4\u00b7a))  \nf(x) = sign(z) \u00b7 [ f_adapt(z) \u00b7 T \u00b7 extra ]^(Exponent)  \nU = beta + gamma \u00b7 f(x)  \nP(accept = 1) = 1/(1 + exp(\u2013U))",
  "variable_descriptions": {
    "F_i": {
      "description": "Fixed component i (i=1,...,11) computed from task-specific proposal attributes",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "arbitrary",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "\u03b4": {
      "description": "Small constant added to ensure a > 0",
      "range": {
        "min": 0,
        "max": 0.001,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "fixed",
        "parameters": {
          "value": 1e-06
        }
      },
      "learnable": false,
      "source": "fixed"
    },
    "a": {
      "description": "Core sum composed of 11 fixed components plus a small constant",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "a_mod": {
      "description": "Modified sum a enhanced by a sinusoidal modulation",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "z": {
      "description": "Sequentially modulated version of a_mod via multiplicative cosine and sine factors",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "w": {
      "description": "Adaptive exponent weight computed from phi",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "phi": {
      "description": "Learnable parameter modulating the negative branch transformation and adaptive nonlinearity",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "f_adapt(z)": {
      "description": "Adaptive transformation of z with clipping for nonlinearity, using softsign function",
      "range": {
        "min": -30,
        "max": 30,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "T": {
      "description": "Dynamic threshold computed as a geometric series of a up to exponent 35",
      "range": {
        "min": "0",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "extra": {
      "description": "Composite extra term capturing higher-order nonlinearities with multiplicative sinusoidal, tanh, sigmoid, and cosine modulations",
      "range": {
        "min": "0",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "Exponent": {
      "description": "Final exponent modulation factor combining logarithmic and oscillatory adjustments",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "f(x)": {
      "description": "Final transformed signal used to compute latent utility",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "beta": {
      "description": "Learnable base utility parameter",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Learnable scaling parameter for the transformed signal",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "U": {
      "description": "Latent utility computed as a linear combination of beta and the transformed signal",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "P(accept = 1)": {
      "description": "Acceptance probability obtained by a logistic transformation of U",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "A highly nonlinear utility model predicting binary acceptance choices, where a core signal aggregated from 11 fixed task components is modulated by sequential sinusoidal, cosine, and adaptive nonlinear transformations. The resulting transformed signal is scaled and shifted by three learnable parameters (beta, gamma, phi) before being passed through a logistic function. The model incorporates dynamic thresholding, composite extra terms capturing higher\u2010order contributions up to a^35, and advanced exponent modulations to enhance prediction accuracy, lower BIC, and improve parameter recovery.",
  "target_variable": "accept",
  "full_reasoning": "<MODEL>\na = \u03a3\u1d62\u208c\u2081\u00b9\u00b9 F_i + \u03b4  \na_mod = 1.08 \u00b7 a \u00b7 (1 + 0.012 \u00b7 sin(a + 0.045))  \nz = a_mod \u00b7 (1 + 0.008 \u00b7 cos(a + 0.065)) \u00b7 (1 + 0.005 \u00b7 sin(a + 0.115)) \u00b7 (1 + 0.004 \u00b7 cos(a + 0.085)) \u00b7 (1 + 0.006 \u00b7 (sin(a + 0.035) \u00b7 cos(a + 0.055))) \u00b7 (1 + 0.003 \u00b7 (sin(a + 0.03) \u00b7 cos(a + 0.05)))  \nw = (phi \u2013 0.5)/phi  \nsoftsign(x) = x/(1 + |x|)  \nf_adapt(z) = { clip[1.002 \u00b7 (z^w \u00b7 (ln(1+z))^(1\u2013w) \u00b7 softsign(z)), \u201330, 30] if z \u2265 0;  phi \u00b7 (softsign(z + 1\u00d710\u207b\u2076))^15 if z < 0 }  \nT = \u03a3\u2096\u208c\u2080\u00b3\u2075 (a^k \u00b7 (1/2)^k)  \nextra = { exp(\u2013a/0.1) \u00b7 (z/(1+|z|)) \u00b7 (1 + 0.005 \u00b7 sin(1/(1+a))) \u00b7 (1 + 0.002 \u00b7 cos(0.5\u00b7a)) \u00b7 (1 + 0.003 \u00b7 cos(0.3\u00b7a))\u00b2 \u00b7 (1 + 0.004 \u00b7 cos(0.3\u00b7a))\u00b2 \u00b7 (1 + 0.0025 \u00b7 cos(0.7\u00b7a)) \u00b7 (1 + tanh(0.05\u00b7a)) \u00b7 (1 + 1/(1+exp(\u20130.01\u00b7a))) \u00b7 (1 + 0.002 \u00b7 cos(3\u00b7a)) \u00b7 (1 + 0.002 \u00b7 sin(2.5\u00b7a) + 0.001 \u00b7 cos(3.5\u00b7a) + 0.0015 \u00b7 sin(3\u00b7a)) \u00b7 (1 + 1/(1+exp(\u20130.03\u00b7a))) \u00b7 (1 + tanh(0.07\u00b7a)) \u00b7 (1 + cos(3.1\u00b7a)) \u00b7 (1 + 1/(1+exp(\u20130.04\u00b7a))) \u00b7 (1 + tanh(0.08\u00b7a)) \u00b7 (1 + cos(3.2\u00b7a)) \u00b7 (1 + 1/(1+exp(\u20130.05\u00b7a))) \u00b7 (1 + tanh(0.1\u00b7a)) \u00b7 (1 + cos(3.4\u00b7a)) \u00b7 (1 + 1/(1+exp(\u20130.05\u00b7a))) \u00b7 (1 + tanh(0.1\u00b7a)) }^(0.9478 + 0.00018 \u00b7 ln(1+a)) \u00b7 (1 + tanh(0.05\u00b7a))  \nExponent = (0.9478 + 0.00018 \u00b7 ln(1+a)) \u00b7 (1 + 0.003 \u00b7 sin(2.8\u00b7a) + 0.001 \u00b7 cos(3.8\u00b7a) + 0.002 \u00b7 sin(3.4\u00b7a) + 0.0015 \u00b7 cos(4.4\u00b7a))  \nf(x) = sign(z) \u00b7 [ f_adapt(z) \u00b7 T \u00b7 extra ]^(Exponent)  \nU = beta + gamma \u00b7 f(x)  \nP(accept = 1) = 1/(1 + exp(\u2013U))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"F_i\": {\n      \"description\": \"Fixed component i (i=1,...,11) computed from task-specific proposal attributes\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"arbitrary\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"\u03b4\": {\n      \"description\": \"Small constant added to ensure a > 0\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1e-3,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"fixed\",\n        \"parameters\": {\"value\": 1e-6}\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"a\": {\n      \"description\": \"Core sum composed of 11 fixed components plus a small constant\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a_mod\": {\n      \"description\": \"Modified sum a enhanced by a sinusoidal modulation\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"z\": {\n      \"description\": \"Sequentially modulated version of a_mod via multiplicative cosine and sine factors\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"w\": {\n      \"description\": \"Adaptive exponent weight computed from phi\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"phi\": {\n      \"description\": \"Learnable parameter modulating the negative branch transformation and adaptive nonlinearity\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"f_adapt(z)\": {\n      \"description\": \"Adaptive transformation of z with clipping for nonlinearity, using softsign function\",\n      \"range\": {\n        \"min\": -30,\n        \"max\": 30,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"T\": {\n      \"description\": \"Dynamic threshold computed as a geometric series of a up to exponent 35\",\n      \"range\": {\n        \"min\": \"0\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"extra\": {\n      \"description\": \"Composite extra term capturing higher-order nonlinearities with multiplicative sinusoidal, tanh, sigmoid, and cosine modulations\",\n      \"range\": {\n        \"min\": \"0\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"Exponent\": {\n      \"description\": \"Final exponent modulation factor combining logarithmic and oscillatory adjustments\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f(x)\": {\n      \"description\": \"Final transformed signal used to compute latent utility\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Learnable base utility parameter\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Learnable scaling parameter for the transformed signal\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed as a linear combination of beta and the transformed signal\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"P(accept = 1)\": {\n      \"description\": \"Acceptance probability obtained by a logistic transformation of U\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA highly nonlinear utility model predicting binary acceptance choices, where a core signal aggregated from 11 fixed task components is modulated by sequential sinusoidal, cosine, and adaptive nonlinear transformations. The resulting transformed signal is scaled and shifted by three learnable parameters (beta, gamma, phi) before being passed through a logistic function. The model incorporates dynamic thresholding, composite extra terms capturing higher\u2010order contributions up to a^35, and advanced exponent modulations to enhance prediction accuracy, lower BIC, and improve parameter recovery.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: a = \u03a3\u1d62\u208c\u2081\u00b9\u00b9 F_i + \u03b4  \na_mod = 1.08 \u00b7 a \u00b7 (1 + 0.012 \u00b7 sin(a + 0.045))  \nz = a_mod \u00b7 (1 + 0.008 \u00b7 cos(a + 0.065)) \u00b7 (1 + 0.005 \u00b7 sin(a + 0.115)) \u00b7 (1 + 0.004 \u00b7 cos(a + 0.085)) \u00b7 (1 + 0.006 \u00b7 (sin(a + 0.035) \u00b7 cos(a + 0.055))) \u00b7 (1 + 0.003 \u00b7 (sin(a + 0.03) \u00b7 cos(a + 0.05)))  \nw = (phi \u2013 0.5)/phi  \nsoftsign(x) = x/(1 + |x|)  \nf_adapt(z) = { clip[1.002 \u00b7 (z^w \u00b7 (ln(1+z))^(1\u2013w) \u00b7 softsign(z)), \u201330, 30] if z \u2265 0;  phi \u00b7 (softsign(z + 1\u00d710\u207b\u2076))^15 if z < 0 }  \nT = \u03a3\u2096\u208c\u2080\u00b3\u2075 (a^k \u00b7 (1/2)^k)  \nextra = { exp(\u2013a/0.1) \u00b7 (z/(1+|z|)) \u00b7 (1 + 0.005 \u00b7 sin(1/(1+a))) \u00b7 (1 + 0.002 \u00b7 cos(0.5\u00b7a)) \u00b7 (1 + 0.003 \u00b7 cos(0.3\u00b7a))\u00b2 \u00b7 (1 + 0.004 \u00b7 cos(0.3\u00b7a))\u00b2 \u00b7 (1 + 0.0025 \u00b7 cos(0.7\u00b7a)) \u00b7 (1 + tanh(0.05\u00b7a)) \u00b7 (1 + 1/(1+exp(\u20130.01\u00b7a))) \u00b7 (1 + 0.002 \u00b7 cos(3\u00b7a)) \u00b7 (1 + 0.002 \u00b7 sin(2.5\u00b7a) + 0.001 \u00b7 cos(3.5\u00b7a) + 0.0015 \u00b7 sin(3\u00b7a)) \u00b7 (1 + 1/(1+exp(\u20130.03\u00b7a))) \u00b7 (1 + tanh(0.07\u00b7a)) \u00b7 (1 + cos(3.1\u00b7a)) \u00b7 (1 + 1/(1+exp(\u20130.04\u00b7a))) \u00b7 (1 + tanh(0.08\u00b7a)) \u00b7 (1 + cos(3.2\u00b7a)) \u00b7 (1 + 1/(1+exp(\u20130.05\u00b7a))) \u00b7 (1 + tanh(0.1\u00b7a)) \u00b7 (1 + cos(3.4\u00b7a)) \u00b7 (1 + 1/(1+exp(\u20130.05\u00b7a))) \u00b7 (1 + tanh(0.1\u00b7a)) }^(0.9478 + 0.00018 \u00b7 ln(1+a)) \u00b7 (1 + tanh(0.05\u00b7a))  \nExponent = (0.9478 + 0.00018 \u00b7 ln(1+a)) \u00b7 (1 + 0.003 \u00b7 sin(2.8\u00b7a) + 0.001 \u00b7 cos(3.8\u00b7a) + 0.002 \u00b7 sin(3.4\u00b7a) + 0.0015 \u00b7 cos(4.4\u00b7a))  \nf(x) = sign(z) \u00b7 [ f_adapt(z) \u00b7 T \u00b7 extra ]^(Exponent)  \nU = beta + gamma \u00b7 f(x)  \nP(accept = 1) = 1/(1 + exp(\u2013U))\nSummary: A highly nonlinear utility model predicting binary acceptance choices, where a core signal aggregated from 11 fixed task components is modulated by sequential sinusoidal, cosine, and adaptive nonlinear transformations. The resulting transformed signal is scaled and shifted by three learnable parameters (beta, gamma, phi) before being passed through a logistic function. The model incorporates dynamic thresholding, composite extra terms capturing higher\u2010order contributions up to a^35, and advanced exponent modulations to enhance prediction accuracy, lower BIC, and improve parameter recovery.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, phi=1, beta=1, gamma=1):\n    model_predictions = []\n    for trial in trial_data:\n        # Gather F_i values from the trial data, handling missing keys\n        F_values = [trial.get(f\"F_{i}\", 0) for i in range(1, 12)]  # F_1 to F_11\n\n        # Calculate a\n        a = sum(F_values) + 1e-06  # delta = 1e-6\n\n        # Calculate a_mod\n        a_mod = 1.08 * a * (1 + 0.012 * math.sin(a + 0.045))\n\n        # Calculate z\n        z = a_mod * (1 + 0.008 * math.cos(a + 0.065)) * (1 + 0.005 * math.sin(a + 0.115)) * (1 + 0.004 * math.cos(a + 0.085)) * (1 + 0.006 * (math.sin(a + 0.035) * math.cos(a + 0.055))) * (1 + 0.003 * (math.sin(a + 0.03) * math.cos(a + 0.05)))\n\n        # Calculate w\n        w = (phi - 0.5) / phi\n\n        # Define softsign function\n        def softsign(x):\n            return x / (1 + abs(x))\n\n        # Calculate f_adapt(z)\n        if z >= 0:\n            f_adapt_z = 1.002 * (z**w) * ((math.log(1 + z))**(1 - w)) * softsign(z)\n            f_adapt_z = max(min(f_adapt_z, 30), -30)  # Clip between -30 and 30\n        else:\n            f_adapt_z = phi * (softsign(z + 1e-06))**15\n\n        # Calculate T\n        T = sum((a**k) * (1/2)**k for k in range(0, 36))\n\n        # Calculate extra\n        exponent_extra = (0.9478 + 0.00018 * math.log(1 + a))\n        extra_base = math.exp(-a / 0.1) * (z / (1 + abs(z))) * (1 + 0.005 * math.sin(1 / (1 + a))) * (1 + 0.002 * math.cos(0.5 * a)) * (1 + 0.003 * math.cos(0.3 * a))**2 * (1 + 0.004 * math.cos(0.3 * a))**2 * (1 + 0.0025 * math.cos(0.7 * a)) * (1 + math.tanh(0.05 * a)) * (1 + 1 / (1 + math.exp(-0.01 * a))) * (1 + 0.002 * math.cos(3 * a)) * (1 + 0.002 * math.sin(2.5 * a) + 0.001 * math.cos(3.5 * a) + 0.0015 * math.sin(3 * a)) * (1 + 1 / (1 + math.exp(-0.03 * a))) * (1 + math.tanh(0.07 * a)) * (1 + math.cos(3.1 * a)) * (1 + 1 / (1 + math.exp(-0.04 * a))) * (1 + math.tanh(0.08 * a)) * (1 + math.cos(3.2 * a)) * (1 + 1 / (1 + math.exp(-0.05 * a))) * (1 + math.tanh(0.1 * a)) * (1 + math.cos(3.4 * a)) * (1 + 1 / (1 + math.exp(-0.05 * a))) * (1 + math.tanh(0.1 * a))\n        extra = extra_base**exponent_extra * (1 + math.tanh(0.05 * a))\n\n        # Calculate Exponent\n        Exponent = (0.9478 + 0.00018 * math.log(1 + a)) * (1 + 0.003 * math.sin(2.8 * a) + 0.001 * math.cos(3.8 * a) + 0.002 * math.sin(3.4 * a) + 0.0015 * math.cos(4.4 * a))\n\n        # Calculate f(x)\n        f_x = (1 if z >= 0 else -1) * (f_adapt_z * T * extra)**Exponent\n\n        # Calculate U\n        U = beta + gamma * f_x\n\n        # Calculate P(accept = 1)\n        P_accept = 1 / (1 + math.exp(-U))\n\n        model_predictions.append(P_accept)\n\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.5543345543345544,
  "fitting_results": [
    {
      "phi": 1.117007586284226,
      "beta": -10.0,
      "gamma": 3.89760231965375,
      "success": true,
      "log_likelihood": -24.953979470262787,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.121502551951985,
      "beta": -7.076645894640214,
      "gamma": 8.96326890235487,
      "success": true,
      "log_likelihood": -24.953301697623303,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.0022031912573355,
      "beta": -2.0785337181583365,
      "gamma": 9.227845388056855,
      "success": true,
      "log_likelihood": -24.897714326867906,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.6823335957391599,
      "beta": -10.0,
      "gamma": 9.11517130084142,
      "success": true,
      "log_likelihood": -24.953434695838467,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.9022488216911636,
      "beta": -10.0,
      "gamma": 1.5347411607445716,
      "success": true,
      "log_likelihood": -24.953389297969775,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.7927765287312579,
      "beta": 0.2840750950854363,
      "gamma": 7.899697946145531,
      "success": true,
      "log_likelihood": -23.54597316384964,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.135866324081514,
      "beta": 10.0,
      "gamma": 5.028940833701516,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.2290250508927953,
      "beta": 0.8149370368780781,
      "gamma": 7.608720392464257,
      "success": true,
      "log_likelihood": -22.914510052129067,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.7574154099775855,
      "beta": 10.0,
      "gamma": 4.5229934134397,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.8166392457557621,
      "beta": -10.0,
      "gamma": 4.392555812641693,
      "success": true,
      "log_likelihood": -24.95348009370716,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.6882355520969524,
      "beta": -10.0,
      "gamma": 3.903095060640216,
      "success": true,
      "log_likelihood": -24.95338929796977,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.4651383861539404,
      "beta": -10.0,
      "gamma": 8.133001943770571,
      "success": true,
      "log_likelihood": -24.953934072394095,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.6236305715045055,
      "beta": -10.0,
      "gamma": 8.126095358396125,
      "success": true,
      "log_likelihood": -24.953434695838467,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.4743293868593643,
      "beta": 10.0,
      "gamma": 5.195839331120048,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.0123325449634324,
      "beta": 10.0,
      "gamma": 3.346031089977429,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.7511824815799742,
      "beta": 10.0,
      "gamma": 6.161664223119336,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.7799870880125318,
      "beta": 10.0,
      "gamma": 1.3289885860431794,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.9317865371659966,
      "beta": 10.0,
      "gamma": 4.147844500409351,
      "success": true,
      "log_likelihood": -16.27763329973089,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.076494066725058,
      "beta": 10.0,
      "gamma": 5.784555110331432,
      "success": true,
      "log_likelihood": -15.27767869783462,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.9149621393022083,
      "beta": 10.0,
      "gamma": 0.8410152719884245,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5485410457190212,
      "beta": -1.2473694038429626,
      "gamma": 7.361477976198955,
      "success": true,
      "log_likelihood": -24.73061675097477,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.1807172573502054,
      "beta": 10.0,
      "gamma": 1.707489625874865,
      "success": true,
      "log_likelihood": -16.27763329973089,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.05100119978998,
      "beta": -10.0,
      "gamma": 4.688104566254399,
      "success": true,
      "log_likelihood": -24.95352549157585,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.3256560552358516,
      "beta": -2.07809694871408,
      "gamma": 9.833028363087333,
      "success": true,
      "log_likelihood": -24.89771432561162,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.2940211029695208,
      "beta": -10.0,
      "gamma": 6.243060829064378,
      "success": true,
      "log_likelihood": -24.953298502232386,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.697098343476483,
      "beta": -0.6790515009899898,
      "gamma": 6.320789826197907,
      "success": true,
      "log_likelihood": -24.450957568497678,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.9268241887359118,
      "beta": -1.2474247598306956,
      "gamma": 8.167869107135491,
      "success": true,
      "log_likelihood": -24.73061675033586,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.2777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.9900549827360028,
      "beta": -10.0,
      "gamma": 8.05573750695844,
      "success": true,
      "log_likelihood": -24.953661685181935,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.3974124842190963,
      "beta": 10.0,
      "gamma": 3.541447465276326,
      "success": true,
      "log_likelihood": -15.27767869783462,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.8442379082791615,
      "beta": 10.0,
      "gamma": 2.789532392139329,
      "success": true,
      "log_likelihood": -19.2774971054197,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.9468498417801845,
      "beta": 10.0,
      "gamma": 1.0920868998848599,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.0237699221126895,
      "beta": -10.0,
      "gamma": 1.7853107796838463,
      "success": true,
      "log_likelihood": -24.953979470262787,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.2310916156804934,
      "beta": -10.0,
      "gamma": 6.1009682237319165,
      "success": true,
      "log_likelihood": -24.953434695838464,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.45576418618367,
      "beta": -10.0,
      "gamma": 3.800267303661422,
      "success": true,
      "log_likelihood": -24.953480093707164,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5248052549840325,
      "beta": 10.0,
      "gamma": 4.815749830748194,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.0192908576355395,
      "beta": 0.28392687609438566,
      "gamma": 4.885421550189482,
      "success": true,
      "log_likelihood": -23.54597316928332,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5106735848250918,
      "beta": 1.5229695495447966,
      "gamma": 0.61261842450413,
      "success": true,
      "log_likelihood": -22.15793815483639,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.809480426335651,
      "beta": -7.9557722380423375,
      "gamma": 4.815517441397663,
      "success": true,
      "log_likelihood": -24.95329904581405,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.9515606518663936,
      "beta": 0.8148840292658844,
      "gamma": 4.22958906165335,
      "success": true,
      "log_likelihood": -22.914510051430955,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.0343384855837303,
      "beta": 10.0,
      "gamma": 0.7174005502765846,
      "success": true,
      "log_likelihood": -14.277724095938346,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.0579661774816391,
      "beta": -0.19265729369500956,
      "gamma": 4.776651208443753,
      "success": true,
      "log_likelihood": -24.056945188727852,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.1039329465192476,
      "beta": -10.0,
      "gamma": 4.0676690139726155,
      "success": true,
      "log_likelihood": -24.95375248091932,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.6991311196552086,
      "beta": 10.0,
      "gamma": 6.4520923226084905,
      "success": true,
      "log_likelihood": -12.277814892145805,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.3715568850189779,
      "beta": -1.24756777361438,
      "gamma": 8.775501297303869,
      "success": true,
      "log_likelihood": -24.730616752474063,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5313458994735373,
      "beta": -0.19265764620602543,
      "gamma": 0.016517642826404666,
      "success": true,
      "log_likelihood": -24.056945188728665,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.9304975632088285,
      "beta": 3.0682388989743954,
      "gamma": 6.448697097909645,
      "success": true,
      "log_likelihood": -21.27032086848811,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.9485851593099884,
      "beta": -2.0783086962488855,
      "gamma": 2.5565623274200844,
      "success": true,
      "log_likelihood": -24.897714324131982,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.38967192204837,
      "beta": -10.0,
      "gamma": 8.485834027472581,
      "success": true,
      "log_likelihood": -24.95348009370716,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.2481138620394279,
      "beta": -10.0,
      "gamma": 1.9077488749178695,
      "success": true,
      "log_likelihood": -24.953434695838464,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.6299550631077301,
      "beta": -2.074663023801631,
      "gamma": 8.52039168355561,
      "success": true,
      "log_likelihood": -24.897714900039748,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.1861511293243527,
      "beta": 1.523001173965209,
      "gamma": 9.871862939162654,
      "success": true,
      "log_likelihood": -22.157938154734072,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.6369220773056403,
      "beta": -10.0,
      "gamma": 6.11860349684077,
      "success": true,
      "log_likelihood": -24.9538886745254,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.1679020767531298,
      "beta": -2.0783963114486985,
      "gamma": 5.191882543550223,
      "success": true,
      "log_likelihood": -24.897714324669632,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.7585901188290873,
      "beta": -0.6790544805639983,
      "gamma": 4.283967518625835,
      "success": true,
      "log_likelihood": -24.450957568494985,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.947704422839002,
      "beta": -9.999999999999998,
      "gamma": 9.874578700410176,
      "success": true,
      "log_likelihood": -24.95348009370716,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.7439733720913517,
      "beta": -10.0,
      "gamma": 5.002199695063466,
      "success": true,
      "log_likelihood": -24.953570889444546,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.9430071752976033,
      "beta": -10.0,
      "gamma": 9.678501629557012,
      "success": true,
      "log_likelihood": -24.953661685181938,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.4378429389553689,
      "beta": 10.0,
      "gamma": 2.7812319110619708,
      "success": true,
      "log_likelihood": -15.27767869783462,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.8063578300539794,
      "beta": -10.0,
      "gamma": 5.965685433858106,
      "success": true,
      "log_likelihood": -24.953934072394095,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5438312419196352,
      "beta": 10.0,
      "gamma": 6.100923134548185,
      "success": true,
      "log_likelihood": -18.27754250352343,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.085544128705756,
      "beta": -0.19265513553824795,
      "gamma": 4.002016430208986,
      "success": true,
      "log_likelihood": -24.05694518872441,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.6702355919184502,
      "beta": -6.9284918586161615,
      "gamma": 3.37480390752647,
      "success": true,
      "log_likelihood": -24.95330280170098,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.4180811088574021,
      "beta": -10.0,
      "gamma": 0.8054861603082886,
      "success": true,
      "log_likelihood": -24.953979470262787,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.2252804242610256,
      "beta": -10.0,
      "gamma": 9.698096565316268,
      "success": true,
      "log_likelihood": -24.95338929796977,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.8344829300782751,
      "beta": -10.0,
      "gamma": 3.7197251026523936,
      "success": true,
      "log_likelihood": -24.95375248091932,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.3548796770987428,
      "beta": -1.2475681945902821,
      "gamma": 3.517750163926171,
      "success": true,
      "log_likelihood": -24.73061675248843,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.1755450486487473,
      "beta": 10.0,
      "gamma": 4.6513764714590184,
      "success": true,
      "log_likelihood": -14.277724095938348,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.1727269748339015,
      "beta": 10.0,
      "gamma": 3.106809474388511,
      "success": true,
      "log_likelihood": -16.277633299730887,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.4153745138601739,
      "beta": -1.2474387621869054,
      "gamma": 5.340027803441688,
      "success": true,
      "log_likelihood": -24.73061675030396,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.0472025301491779,
      "beta": 10.0,
      "gamma": 7.0710193758171,
      "success": true,
      "log_likelihood": -14.27772409593835,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5936722861050995,
      "beta": -10.0,
      "gamma": 4.048687207408141,
      "success": true,
      "log_likelihood": -24.953934072394095,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.1488901736074784,
      "beta": -10.0,
      "gamma": 6.728422965171747,
      "success": true,
      "log_likelihood": -24.9538886745254,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5171256282584269,
      "beta": -2.077202879935418,
      "gamma": 8.468552973678644,
      "success": true,
      "log_likelihood": -24.897714375243623,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.6059543848894695,
      "beta": 10.0,
      "gamma": 9.542450343104353,
      "success": true,
      "log_likelihood": -19.2774971054197,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.4452792980011986,
      "beta": -9.0962996212416,
      "gamma": 4.896800146854084,
      "success": true,
      "log_likelihood": -24.953298549473818,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5059122053494404,
      "beta": 7.187537865883807,
      "gamma": 7.596361070300375,
      "success": true,
      "log_likelihood": -22.276427093563928,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.6247653848293403,
      "beta": 10.0,
      "gamma": 1.7539663297924324,
      "success": true,
      "log_likelihood": -13.277769494042078,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.1568506943429804,
      "beta": -10.0,
      "gamma": 4.584776201296118,
      "success": true,
      "log_likelihood": -24.95402486813148,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.1287626327279823,
      "beta": -0.1926458916336883,
      "gamma": 0.6450373341198978,
      "success": true,
      "log_likelihood": -24.05694518873729,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.6270266412691876,
      "beta": -10.0,
      "gamma": 6.896784378161885,
      "success": true,
      "log_likelihood": -24.953979470262784,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.3313356799057314,
      "beta": -6.241642806444767,
      "gamma": 8.872672422212137,
      "success": true,
      "log_likelihood": -24.951372606537802,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.2430180286343009,
      "beta": 10.0,
      "gamma": 7.602985728734369,
      "success": true,
      "log_likelihood": -14.277724095938348,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.508942566162362,
      "beta": -10.0,
      "gamma": 1.2951821979520706,
      "success": true,
      "log_likelihood": -24.953934072394095,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.6808780099931631,
      "beta": -10.0,
      "gamma": 2.866577130542792,
      "success": true,
      "log_likelihood": -24.953298502232386,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5765573257398174,
      "beta": -0.19265275660761336,
      "gamma": 9.013191316602107,
      "success": true,
      "log_likelihood": -24.056945188723436,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.757166877810274,
      "beta": -10.0,
      "gamma": 9.400990921895279,
      "success": true,
      "log_likelihood": -24.95393407239409,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.6099727261676681,
      "beta": 1.5230019137836077,
      "gamma": 0.46200680487796686,
      "success": true,
      "log_likelihood": -22.157938154733625,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.4884125652707554,
      "beta": -10.0,
      "gamma": 0.05598479493047259,
      "success": true,
      "log_likelihood": -24.95375248091932,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5321933819670008,
      "beta": 10.0,
      "gamma": 4.167330725886068,
      "success": true,
      "log_likelihood": -13.277769494042078,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5427383052427563,
      "beta": -10.0,
      "gamma": 5.36195965461606,
      "success": true,
      "log_likelihood": -24.953343900101082,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.8822726545149489,
      "beta": 1.5229393406420373,
      "gamma": 6.396827966938535,
      "success": true,
      "log_likelihood": -22.15793815508827,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "phi": {
        "r": -0.1124157693359731,
        "p": 0.265468747672404
      },
      "beta": {
        "r": 0.5952766258414897,
        "p": 6.495796003572019e-11
      },
      "gamma": {
        "r": 0.0941329401793834,
        "p": 0.3515612755126289
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 53.92647669069483,
  "bic_results": {
    "average_bic": 53.92647669069483,
    "individual_bics": [
      60.6585157558939,
      60.65716021061493,
      60.54598546910414,
      60.65742620704526,
      60.65733541130788,
      57.84250314306762,
      33.3062773958674,
      56.57957691962646,
      33.3062773958674,
      60.657517002782654,
      60.65733541130787,
      60.65842496015652,
      60.65742620704526,
      33.3062773958674,
      33.3062773958674,
      33.3062773958674,
      33.3062773958674,
      43.305823414830115,
      41.305914211037575,
      33.3062773958674,
      60.21179031731788,
      43.305823414830115,
      60.65760779852003,
      60.545985466591574,
      60.6571538198331,
      59.65247195236368,
      60.21179031604005,
      60.657880185732196,
      41.305914211037575,
      49.30555102620774,
      33.3062773958674,
      60.6585157558939,
      60.65742620704526,
      60.657517002782654,
      33.3062773958674,
      57.84250315393497,
      55.066433125041115,
      60.657154906996425,
      56.579576918230245,
      39.30600500724502,
      58.86444719282403,
      60.65806177720697,
      35.30618659965994,
      60.21179032031645,
      58.864447192825665,
      53.291198552344554,
      60.54598546363229,
      60.657517002782654,
      60.65742620704526,
      60.54598661544783,
      55.06643312483648,
      60.65833416441913,
      60.5459854647076,
      59.6524719523583,
      60.657517002782654,
      60.657698594257425,
      60.65788018573221,
      41.305914211037575,
      60.65842496015652,
      47.3056418224152,
      58.86444719281715,
      60.657162418770284,
      60.6585157558939,
      60.65733541130787,
      60.65806177720697,
      60.21179032034519,
      39.30600500724503,
      43.3058234148301,
      60.211790315976245,
      39.306005007245034,
      60.65842496015652,
      60.65833416441913,
      60.545985565855574,
      49.30555102620774,
      60.65715391431597,
      55.30341100249619,
      37.306095803452486,
      60.658606551631294,
      58.86444719284292,
      60.6585157558939,
      60.65330202844393,
      39.30600500724503,
      60.65842496015652,
      60.6571538198331,
      58.864447192815206,
      60.65842496015651,
      55.066433124835584,
      60.65806177720697,
      37.306095803452486,
      60.65724461557049,
      55.066433125544876
    ],
    "group_enabled": false,
    "group_bics": null,
    "num_parameters": 3,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- phi: r = -0.112\n- beta: r = 0.595\n- gamma: r = 0.094",
  "previous_models": [
    "Specification: a = \u03a3\u1d62\u208c\u2081\u00b9\u00b9 F_i + \u03b4  \na_mod = 1.08 \u00b7 a \u00b7 (1 + 0.012 \u00b7 sin(a + 0.045))  \nz = a_mod \u00b7 (1 + 0.008 \u00b7 cos(a + 0.065)) \u00b7 (1 + 0.005 \u00b7 sin(a + 0.115)) \u00b7 (1 + 0.004 \u00b7 cos(a + 0.085)) \u00b7 (1 + 0.006 \u00b7 (sin(a + 0.035) \u00b7 cos(a + 0.055))) \u00b7 (1 + 0.003 \u00b7 (sin(a + 0.03) \u00b7 cos(a + 0.05)))  \nw = (phi \u2013 0.5)/phi  \nsoftsign(x) = x/(1 + |x|)  \nf_adapt(z) = { clip[1.002 \u00b7 (z^w \u00b7 (ln(1+z))^(1\u2013w) \u00b7 softsign(z)), \u201330, 30] if z \u2265 0;  phi \u00b7 (softsign(z + 1\u00d710\u207b\u2076))^15 if z < 0 }  \nT = \u03a3\u2096\u208c\u2080\u00b3\u2075 (a^k \u00b7 (1/2)^k)  \nextra = { exp(\u2013a/0.1) \u00b7 (z/(1+|z|)) \u00b7 (1 + 0.005 \u00b7 sin(1/(1+a))) \u00b7 (1 + 0.002 \u00b7 cos(0.5\u00b7a)) \u00b7 (1 + 0.003 \u00b7 cos(0.3\u00b7a))\u00b2 \u00b7 (1 + 0.004 \u00b7 cos(0.3\u00b7a))\u00b2 \u00b7 (1 + 0.0025 \u00b7 cos(0.7\u00b7a)) \u00b7 (1 + tanh(0.05\u00b7a)) \u00b7 (1 + 1/(1+exp(\u20130.01\u00b7a))) \u00b7 (1 + 0.002 \u00b7 cos(3\u00b7a)) \u00b7 (1 + 0.002 \u00b7 sin(2.5\u00b7a) + 0.001 \u00b7 cos(3.5\u00b7a) + 0.0015 \u00b7 sin(3\u00b7a)) \u00b7 (1 + 1/(1+exp(\u20130.03\u00b7a))) \u00b7 (1 + tanh(0.07\u00b7a)) \u00b7 (1 + cos(3.1\u00b7a)) \u00b7 (1 + 1/(1+exp(\u20130.04\u00b7a))) \u00b7 (1 + tanh(0.08\u00b7a)) \u00b7 (1 + cos(3.2\u00b7a)) \u00b7 (1 + 1/(1+exp(\u20130.05\u00b7a))) \u00b7 (1 + tanh(0.1\u00b7a)) \u00b7 (1 + cos(3.4\u00b7a)) \u00b7 (1 + 1/(1+exp(\u20130.05\u00b7a))) \u00b7 (1 + tanh(0.1\u00b7a)) }^(0.9478 + 0.00018 \u00b7 ln(1+a)) \u00b7 (1 + tanh(0.05\u00b7a))  \nExponent = (0.9478 + 0.00018 \u00b7 ln(1+a)) \u00b7 (1 + 0.003 \u00b7 sin(2.8\u00b7a) + 0.001 \u00b7 cos(3.8\u00b7a) + 0.002 \u00b7 sin(3.4\u00b7a) + 0.0015 \u00b7 cos(4.4\u00b7a))  \nf(x) = sign(z) \u00b7 [ f_adapt(z) \u00b7 T \u00b7 extra ]^(Exponent)  \nU = beta + gamma \u00b7 f(x)  \nP(accept = 1) = 1/(1 + exp(\u2013U))\nSummary: A highly nonlinear utility model predicting binary acceptance choices, where a core signal aggregated from 11 fixed task components is modulated by sequential sinusoidal, cosine, and adaptive nonlinear transformations. The resulting transformed signal is scaled and shifted by three learnable parameters (beta, gamma, phi) before being passed through a logistic function. The model incorporates dynamic thresholding, composite extra terms capturing higher\u2010order contributions up to a^35, and advanced exponent modulations to enhance prediction accuracy, lower BIC, and improve parameter recovery.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 53.92647669069483\nOverall Accuracy: 0.5543\n\nParameter Recovery:\n- phi: r = -0.112\n- beta: r = 0.595\n- gamma: r = 0.094"
  ]
}