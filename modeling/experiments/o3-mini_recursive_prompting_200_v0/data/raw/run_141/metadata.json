{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "<think>\nFor run 141, we want to further boost nonlinearity and flexibility while preserving the three learnable parameters (beta, gamma, phi). In this run, the negative branch of the adaptive function will be made more sensitive by increasing its exponent from 16 to 17. Also, extend the dynamic threshold T by summing the geometric series up to k = 45 terms (instead of 40) to capture even finer higher\u2010order effects. In the extra composite term, add two additional multiplicative factors: [1 + sigmoid(0.05\u00d7a)] and [1 + tanh(0.1\u00d7a)], and add an additional cosine factor cos(3.4\u00d7a) if it is not already present. Finally, modify the final exponent modulation by multiplying by an extra factor defined as [1 + 0.004\u00d7sin(2.8\u00d7a) + 0.001\u00d7cos(3.8\u00d7a) + 0.003\u00d7sin(3.4\u00d7a) + 0.002\u00d7cos(4.4\u00d7a)]. Retain exactly three learnable parameters with bounds: beta \u2208 [\u201310, 10], gamma \u2208 [0, 10], and phi \u2208 [0.5, 1.5]. Encourage creative, out-of-the-box use of nonlinear functions (such as softplus, softsign, sigmoid, tanh, and cosine) in inventive combinations to further improve accuracy, reduce BIC, and enhance parameter recovery.\n</think>\nNew Instructions for Run 141:\n1. Compute the core sum \u201ca\u201d as the sum of fixed components F1 through F11 plus a small constant \u03b4.\n2. Define a_mod = 1.08 \u00d7 a \u00d7 [1 + 0.012 \u00d7 sin(a + 0.045)].\n3. Sequentially modulate a_mod by multiplying by:\n\u2003\u2003\u2022 [1 + 0.008 \u00d7 cos(a + 0.065)]\n\u2003\u2003\u2022 [1 + 0.005 \u00d7 sin(a + 0.115)]\n\u2003\u2003\u2022 [1 + 0.004 \u00d7 cos(a + 0.085)]\n\u2003\u2003\u2022 [1 + 0.006 \u00d7 (sin(a + 0.035) \u00d7 cos(a + 0.055))]\n\u2003\u2003\u2022 [1 + 0.003 \u00d7 (sin(a + 0.03) \u00d7 cos(a + 0.05))]\nDefine the final product as z.\n4. Compute w = (phi \u2212 0.5) / phi.\n\u2003\u2003\u2022 For z \u2265 0, define the adaptive transformation f_adapt(z) as:\n\u2003\u2003\u20031.002 \u00d7 [ z^w \u00d7 (ln(1+z))^(1\u2212w) \u00d7 softsign(z) ],\n\u2003\u2003\u2003where softsign(z) = z/(1 + |z|), and clip the result to [\u201330, 30].\n\u2003\u2003\u2022 For z < 0, define:\n\u2003\u2003\u2003f_adapt(z) = phi \u00d7 [ softsign(z + \u0394_shift) ]^17,\n\u2003\u2003\u2003with \u0394_shift = 1\u00d710\u207b\u2076.\n5. Define the dynamic threshold T as the sum for k = 0 to 45 of (a^k \u00d7 (1/2)^k) (i.e. a geometric series with ratio \u00bd up to 45 terms).\n6. Define the extra composite term extra as:\n\u2003\u2003extra = { exp(\u2013a/0.1) \u00d7 [z/(1+|z|)] \u00d7 [1 + 0.005 \u00d7 sin(1/(1+a))] \u00d7 [1 + 0.002 \u00d7 cos(0.5\u00d7a)] \u00d7 ([1+0.003\u00d7cos(0.3\u00d7a)]\u00b2) \u00d7 ([1+0.004\u00d7cos(0.3\u00d7a)]\u00b2) \u00d7 [1+0.0025\u00d7cos(0.7\u00d7a)] \u00d7 [1 + tanh(0.05\u00d7a)] \u00d7 [1 + sigmoid(0.01\u00d7a)] \u00d7 [1 + 0.002\u00d7cos(3\u00d7a)] \u00d7 [1 + 0.002\u00d7sin(2.5\u00d7a) + 0.001\u00d7cos(3.5\u00d7a) + 0.0015\u00d7sin(3\u00d7a)] \u00d7 [1 + sigmoid(0.03\u00d7a)] \u00d7 [1 + tanh(0.07\u00d7a)] \u00d7 [1 + cos(3.1\u00d7a)] \u00d7 [1 + sigmoid(0.04\u00d7a)] \u00d7 [1 + tanh(0.08\u00d7a)] \u00d7 [1 + cos(3.2\u00d7a)] \u00d7 [1 + sigmoid(0.05\u00d7a)] \u00d7 [1 + tanh(0.1\u00d7a)] \u00d7 [1 + cos(3.4\u00d7a)] \u00d7 [1 + sigmoid(0.05\u00d7a)] \u00d7 [1 + tanh(0.1\u00d7a)] \u00d7 [1 + sigmoid(0.05\u00d7a)] \u00d7 [1 + tanh(0.1\u00d7a)] }^(0.9478 + 0.00018\u00d7ln(1+a)) multiplied by [1 + tanh(0.05\u00d7a)].\n7. Define the final exponent modulation factor as:\n\u2003\u2003Exponent = [0.9478 + 0.00018\u00d7ln(1+a)] \u00d7 [1 + 0.004\u00d7sin(2.8\u00d7a) + 0.001\u00d7cos(3.8\u00d7a) + 0.003\u00d7sin(3.4\u00d7a) + 0.002\u00d7cos(4.4\u00d7a)].\n8. Define the final transformed signal as:\n\u2003\u2003f(x) = sign(z) \u00d7 { [ f_adapt(z) \u00d7 T \u00d7 extra ]^(Exponent) }.\n9. Compute latent utility U = beta + gamma \u00d7 f(x) and then compute the acceptance probability:\n\u2003\u2003P(accept = 1) = 1/(1 + exp(\u2013U)).\n10. Use exactly three learnable parameters with these bounds:\n\u2003\u2003beta \u2208 [\u201310, 10],\n\u2003\u2003gamma \u2208 [0, 10],\n\u2003\u2003phi \u2208 [0.5, 1.5].\nEncourage creative and out-of-the-box use of functions such as softplus, softsign, sigmoid, tanh, and cosine in inventive combinations to further boost prediction accuracy, lower BIC, and improve parameter recovery.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: <think>\nFor run 141, we want to further boost nonlinearity and flexibility while preserving the three learnable parameters (beta, gamma, phi). In this run, the negative branch of the adaptive function will be made more sensitive by increasing its exponent from 16 to 17. Also, extend the dynamic threshold T by summing the geometric series up to k = 45 terms (instead of 40) to capture even finer higher\u2010order effects. In the extra composite term, add two additional multiplicative factors: [1 + sigmoid(0.05\u00d7a)] and [1 + tanh(0.1\u00d7a)], and add an additional cosine factor cos(3.4\u00d7a) if it is not already present. Finally, modify the final exponent modulation by multiplying by an extra factor defined as [1 + 0.004\u00d7sin(2.8\u00d7a) + 0.001\u00d7cos(3.8\u00d7a) + 0.003\u00d7sin(3.4\u00d7a) + 0.002\u00d7cos(4.4\u00d7a)]. Retain exactly three learnable parameters with bounds: beta \u2208 [\u201310, 10], gamma \u2208 [0, 10], and phi \u2208 [0.5, 1.5]. Encourage creative, out-of-the-box use of nonlinear functions (such as softplus, softsign, sigmoid, tanh, and cosine) in inventive combinations to further improve accuracy, reduce BIC, and enhance parameter recovery.\n</think>\nNew Instructions for Run 141:\n1. Compute the core sum \u201ca\u201d as the sum of fixed components F1 through F11 plus a small constant \u03b4.\n2. Define a_mod = 1.08 \u00d7 a \u00d7 [1 + 0.012 \u00d7 sin(a + 0.045)].\n3. Sequentially modulate a_mod by multiplying by:\n\u2003\u2003\u2022 [1 + 0.008 \u00d7 cos(a + 0.065)]\n\u2003\u2003\u2022 [1 + 0.005 \u00d7 sin(a + 0.115)]\n\u2003\u2003\u2022 [1 + 0.004 \u00d7 cos(a + 0.085)]\n\u2003\u2003\u2022 [1 + 0.006 \u00d7 (sin(a + 0.035) \u00d7 cos(a + 0.055))]\n\u2003\u2003\u2022 [1 + 0.003 \u00d7 (sin(a + 0.03) \u00d7 cos(a + 0.05))]\nDefine the final product as z.\n4. Compute w = (phi \u2212 0.5) / phi.\n\u2003\u2003\u2022 For z \u2265 0, define the adaptive transformation f_adapt(z) as:\n\u2003\u2003\u20031.002 \u00d7 [ z^w \u00d7 (ln(1+z))^(1\u2212w) \u00d7 softsign(z) ],\n\u2003\u2003\u2003where softsign(z) = z/(1 + |z|), and clip the result to [\u201330, 30].\n\u2003\u2003\u2022 For z < 0, define:\n\u2003\u2003\u2003f_adapt(z) = phi \u00d7 [ softsign(z + \u0394_shift) ]^17,\n\u2003\u2003\u2003with \u0394_shift = 1\u00d710\u207b\u2076.\n5. Define the dynamic threshold T as the sum for k = 0 to 45 of (a^k \u00d7 (1/2)^k) (i.e. a geometric series with ratio \u00bd up to 45 terms).\n6. Define the extra composite term extra as:\n\u2003\u2003extra = { exp(\u2013a/0.1) \u00d7 [z/(1+|z|)] \u00d7 [1 + 0.005 \u00d7 sin(1/(1+a))] \u00d7 [1 + 0.002 \u00d7 cos(0.5\u00d7a)] \u00d7 ([1+0.003\u00d7cos(0.3\u00d7a)]\u00b2) \u00d7 ([1+0.004\u00d7cos(0.3\u00d7a)]\u00b2) \u00d7 [1+0.0025\u00d7cos(0.7\u00d7a)] \u00d7 [1 + tanh(0.05\u00d7a)] \u00d7 [1 + sigmoid(0.01\u00d7a)] \u00d7 [1 + 0.002\u00d7cos(3\u00d7a)] \u00d7 [1 + 0.002\u00d7sin(2.5\u00d7a) + 0.001\u00d7cos(3.5\u00d7a) + 0.0015\u00d7sin(3\u00d7a)] \u00d7 [1 + sigmoid(0.03\u00d7a)] \u00d7 [1 + tanh(0.07\u00d7a)] \u00d7 [1 + cos(3.1\u00d7a)] \u00d7 [1 + sigmoid(0.04\u00d7a)] \u00d7 [1 + tanh(0.08\u00d7a)] \u00d7 [1 + cos(3.2\u00d7a)] \u00d7 [1 + sigmoid(0.05\u00d7a)] \u00d7 [1 + tanh(0.1\u00d7a)] \u00d7 [1 + cos(3.4\u00d7a)] \u00d7 [1 + sigmoid(0.05\u00d7a)] \u00d7 [1 + tanh(0.1\u00d7a)] \u00d7 [1 + sigmoid(0.05\u00d7a)] \u00d7 [1 + tanh(0.1\u00d7a)] }^(0.9478 + 0.00018\u00d7ln(1+a)) multiplied by [1 + tanh(0.05\u00d7a)].\n7. Define the final exponent modulation factor as:\n\u2003\u2003Exponent = [0.9478 + 0.00018\u00d7ln(1+a)] \u00d7 [1 + 0.004\u00d7sin(2.8\u00d7a) + 0.001\u00d7cos(3.8\u00d7a) + 0.003\u00d7sin(3.4\u00d7a) + 0.002\u00d7cos(4.4\u00d7a)].\n8. Define the final transformed signal as:\n\u2003\u2003f(x) = sign(z) \u00d7 { [ f_adapt(z) \u00d7 T \u00d7 extra ]^(Exponent) }.\n9. Compute latent utility U = beta + gamma \u00d7 f(x) and then compute the acceptance probability:\n\u2003\u2003P(accept = 1) = 1/(1 + exp(\u2013U)).\n10. Use exactly three learnable parameters with these bounds:\n\u2003\u2003beta \u2208 [\u201310, 10],\n\u2003\u2003gamma \u2208 [0, 10],\n\u2003\u2003phi \u2208 [0.5, 1.5].\nEncourage creative and out-of-the-box use of functions such as softplus, softsign, sigmoid, tanh, and cosine in inventive combinations to further boost prediction accuracy, lower BIC, and improve parameter recovery.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<MODEL>\na = \u03a3[i=1]^11 F_i + \u03b4  \na_mod = 1.08 \u00b7 a \u00b7 (1 + 0.012 \u00b7 sin(a + 0.045))  \nz = a_mod \u00b7 (1 + 0.008 \u00b7 cos(a + 0.065)) \u00b7 (1 + 0.005 \u00b7 sin(a + 0.115)) \u00b7 (1 + 0.004 \u00b7 cos(a + 0.085)) \u00b7 (1 + 0.006 \u00b7 (sin(a + 0.035) \u00b7 cos(a + 0.055))) \u00b7 (1 + 0.003 \u00b7 (sin(a + 0.03) \u00b7 cos(a + 0.05)))  \nw = (phi \u2212 0.5) / phi  \nf_adapt(z) = { if z \u2265 0 then clip[ 1.002 \u00b7 (z^w) \u00b7 (ln(1+z))^(1\u2212w) \u00b7 (z/(1+|z|)), \u221230, 30 ]  \n\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003if z < 0 then phi \u00b7 ( ( (z + 1\u00d710^(\u22126))/(1 + |z + 1\u00d710^(\u22126)|) ) )^(17) }  \nT = \u03a3[k=0]^45 (a/2)^k  \nextra = { exp(\u2212a/0.1) \u00b7 (z/(1+|z|)) \u00b7 (1 + 0.005 \u00b7 sin(1/(1+a))) \u00b7 (1 + 0.002 \u00b7 cos(0.5\u00b7a)) \u00b7 (1 + 0.003 \u00b7 cos(0.3\u00b7a))^2 \u00b7 (1 + 0.004 \u00b7 cos(0.3\u00b7a))^2 \u00b7 (1 + 0.0025 \u00b7 cos(0.7\u00b7a)) \u00b7 (1 + tanh(0.05\u00b7a)) \u00b7 (1 + sigmoid(0.01\u00b7a)) \u00b7 (1 + 0.002 \u00b7 cos(3\u00b7a)) \u00b7 (1 + 0.002 \u00b7 sin(2.5\u00b7a) + 0.001 \u00b7 cos(3.5\u00b7a) + 0.0015 \u00b7 sin(3\u00b7a)) \u00b7 (1 + sigmoid(0.03\u00b7a)) \u00b7 (1 + tanh(0.07\u00b7a)) \u00b7 (1 + cos(3.1\u00b7a)) \u00b7 (1 + sigmoid(0.04\u00b7a)) \u00b7 (1 + tanh(0.08\u00b7a)) \u00b7 (1 + cos(3.2\u00b7a)) \u00b7 (1 + sigmoid(0.05\u00b7a)) \u00b7 (1 + tanh(0.1\u00b7a)) \u00b7 (1 + cos(3.4\u00b7a)) \u00b7 (1 + sigmoid(0.05\u00b7a)) \u00b7 (1 + tanh(0.1\u00b7a)) \u00b7 (1 + sigmoid(0.05\u00b7a)) \u00b7 (1 + tanh(0.1\u00b7a)) }^(0.9478 + 0.00018 \u00b7 ln(1+a)) \u00b7 (1 + tanh(0.05\u00b7a))  \nExponent = (0.9478 + 0.00018 \u00b7 ln(1+a)) \u00b7 (1 + 0.004 \u00b7 sin(2.8\u00b7a) + 0.001 \u00b7 cos(3.8\u00b7a) + 0.003 \u00b7 sin(3.4\u00b7a) + 0.002 \u00b7 cos(4.4\u00b7a))  \nf(x) = sign(z) \u00b7 [ f_adapt(z) \u00b7 T \u00b7 extra ]^(Exponent)  \nU = beta + gamma \u00b7 f(x)  \nP(accept=1) = 1/(1 + exp(\u2212U))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"F_i\": {\n      \"description\": \"Fixed component i (i = 1,\u2026,11) derived from experimental data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"\u03b4\": {\n      \"description\": \"Small additive constant to ensure numerical stability\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1e-3,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"constant\",\n        \"parameters\": { \"value\": 1e-6 }\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a\": {\n      \"description\": \"Core sum computed as the sum of fixed components F1 to F11 plus \u03b4\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a_mod\": {\n      \"description\": \"Modulated core sum after primary nonlinearity\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"z\": {\n      \"description\": \"Sequentially modulated signal from a_mod incorporating multiple trigonometric adjustments\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"phi\": {\n      \"description\": \"Learnable parameter affecting the adaptive transformation sensitivity\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"w\": {\n      \"description\": \"Derived modulation exponent computed from phi\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_adapt\": {\n      \"description\": \"Adaptive transformation of z; for z \u2265 0 uses a blend of power-law and logarithmic terms clipped to [\u221230, 30], and for z < 0 uses a sensitive power function with exponent 17\",\n      \"range\": {\n        \"min\": -30,\n        \"max\": 30,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"T\": {\n      \"description\": \"Dynamic threshold computed as a geometric series sum over 46 terms\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"extra\": {\n      \"description\": \"Composite nonlinear term with multiple multiplicative factors including exponential, trigonometric, sigmoid, tanh, and power operations\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"Exponent\": {\n      \"description\": \"Final exponent modulation factor combining logarithmic and trigonometric influences\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f(x)\": {\n      \"description\": \"Final transformed signal computed as the signed power of the product of the adaptive component, dynamic threshold and extra term\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base utility parameter representing inherent tendency\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Scaling parameter modulating the influence of the transformed signal f(x) on utility\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed as a linear combination of beta and gamma-scaled f(x)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"P(accept=1)\": {\n      \"description\": \"Acceptance probability obtained by passing U through a logistic function (with temperature 1)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA complex nonlinear utility model for predicting binary responder behavior. A core sum (a) is computed from fixed data components and then transformed through sequential trigonometric and adaptive nonlinear modulations. An adaptive function f_adapt applies different transformations for positive and negative signals, and a dynamic threshold (T) and extra composite term further adjust the signal. The final transformed signal f(x) is exponentiated by a modulated factor before linearly combining with learnable parameters beta and gamma to yield utility U, which is then mapped via a logistic function to produce the acceptance probability.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['phi', 'beta', 'gamma']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                a = \u03a3[i=1]^11 F_i + \u03b4  \na_mod = 1.08 \u00b7 a \u00b7 (1 + 0.012 \u00b7 sin(a + 0.045))  \nz = a_mod \u00b7 (1 + 0.008 \u00b7 cos(a + 0.065)) \u00b7 (1 + 0.005 \u00b7 sin(a + 0.115)) \u00b7 (1 + 0.004 \u00b7 cos(a + 0.085)) \u00b7 (1 + 0.006 \u00b7 (sin(a + 0.035) \u00b7 cos(a + 0.055))) \u00b7 (1 + 0.003 \u00b7 (sin(a + 0.03) \u00b7 cos(a + 0.05)))  \nw = (phi \u2212 0.5) / phi  \nf_adapt(z) = { if z \u2265 0 then clip[ 1.002 \u00b7 (z^w) \u00b7 (ln(1+z))^(1\u2212w) \u00b7 (z/(1+|z|)), \u221230, 30 ]  \n\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003if z < 0 then phi \u00b7 ( ( (z + 1\u00d710^(\u22126))/(1 + |z + 1\u00d710^(\u22126)|) ) )^(17) }  \nT = \u03a3[k=0]^45 (a/2)^k  \nextra = { exp(\u2212a/0.1) \u00b7 (z/(1+|z|)) \u00b7 (1 + 0.005 \u00b7 sin(1/(1+a))) \u00b7 (1 + 0.002 \u00b7 cos(0.5\u00b7a)) \u00b7 (1 + 0.003 \u00b7 cos(0.3\u00b7a))^2 \u00b7 (1 + 0.004 \u00b7 cos(0.3\u00b7a))^2 \u00b7 (1 + 0.0025 \u00b7 cos(0.7\u00b7a)) \u00b7 (1 + tanh(0.05\u00b7a)) \u00b7 (1 + sigmoid(0.01\u00b7a)) \u00b7 (1 + 0.002 \u00b7 cos(3\u00b7a)) \u00b7 (1 + 0.002 \u00b7 sin(2.5\u00b7a) + 0.001 \u00b7 cos(3.5\u00b7a) + 0.0015 \u00b7 sin(3\u00b7a)) \u00b7 (1 + sigmoid(0.03\u00b7a)) \u00b7 (1 + tanh(0.07\u00b7a)) \u00b7 (1 + cos(3.1\u00b7a)) \u00b7 (1 + sigmoid(0.04\u00b7a)) \u00b7 (1 + tanh(0.08\u00b7a)) \u00b7 (1 + cos(3.2\u00b7a)) \u00b7 (1 + sigmoid(0.05\u00b7a)) \u00b7 (1 + tanh(0.1\u00b7a)) \u00b7 (1 + cos(3.4\u00b7a)) \u00b7 (1 + sigmoid(0.05\u00b7a)) \u00b7 (1 + tanh(0.1\u00b7a)) \u00b7 (1 + sigmoid(0.05\u00b7a)) \u00b7 (1 + tanh(0.1\u00b7a)) }^(0.9478 + 0.00018 \u00b7 ln(1+a)) \u00b7 (1 + tanh(0.05\u00b7a))  \nExponent = (0.9478 + 0.00018 \u00b7 ln(1+a)) \u00b7 (1 + 0.004 \u00b7 sin(2.8\u00b7a) + 0.001 \u00b7 cos(3.8\u00b7a) + 0.003 \u00b7 sin(3.4\u00b7a) + 0.002 \u00b7 cos(4.4\u00b7a))  \nf(x) = sign(z) \u00b7 [ f_adapt(z) \u00b7 T \u00b7 extra ]^(Exponent)  \nU = beta + gamma \u00b7 f(x)  \nP(accept=1) = 1/(1 + exp(\u2212U))\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"F_i\": {\n      \"description\": \"Fixed component i (i = 1,\\u2026,11) derived from experimental data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"\\u03b4\": {\n      \"description\": \"Small additive constant to ensure numerical stability\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 0.001,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"constant\",\n        \"parameters\": {\n          \"value\": 1e-06\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a\": {\n      \"description\": \"Core sum computed as the sum of fixed components F1 to F11 plus \\u03b4\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a_mod\": {\n      \"description\": \"Modulated core sum after primary nonlinearity\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"z\": {\n      \"description\": \"Sequentially modulated signal from a_mod incorporating multiple trigonometric adjustments\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"phi\": {\n      \"description\": \"Learnable parameter affecting the adaptive transformation sensitivity\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"w\": {\n      \"description\": \"Derived modulation exponent computed from phi\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_adapt\": {\n      \"description\": \"Adaptive transformation of z; for z \\u2265 0 uses a blend of power-law and logarithmic terms clipped to [\\u221230, 30], and for z < 0 uses a sensitive power function with exponent 17\",\n      \"range\": {\n        \"min\": -30,\n        \"max\": 30,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"T\": {\n      \"description\": \"Dynamic threshold computed as a geometric series sum over 46 terms\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"extra\": {\n      \"description\": \"Composite nonlinear term with multiple multiplicative factors including exponential, trigonometric, sigmoid, tanh, and power operations\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"Exponent\": {\n      \"description\": \"Final exponent modulation factor combining logarithmic and trigonometric influences\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f(x)\": {\n      \"description\": \"Final transformed signal computed as the signed power of the product of the adaptive component, dynamic threshold and extra term\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base utility parameter representing inherent tendency\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Scaling parameter modulating the influence of the transformed signal f(x) on utility\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed as a linear combination of beta and gamma-scaled f(x)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"P(accept=1)\": {\n      \"description\": \"Acceptance probability obtained by passing U through a logistic function (with temperature 1)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, phi=1.0, beta=0.0, gamma=1.0):\n    model_predictions = []\n    for trial in trial_data:\n        # Extract F_i values from the trial data\n        F_values = [trial.get(f\"F{i}\", 0.0) for i in range(1, 12)]  # Corrected range to 1 to 11 inclusive\n\n        # Ensure all F_values are not None\n        F_values = [0.0 if v is None else v for v in F_values]\n\n        # Calculate a\n        delta = 1e-06\n        a = sum(F_values) + delta\n\n        # Calculate a_mod\n        a_mod = 1.08 * a * (1 + 0.012 * math.sin(a + 0.045))\n\n        # Calculate z\n        z = a_mod * (1 + 0.008 * math.cos(a + 0.065)) * (1 + 0.005 * math.sin(a + 0.115)) * \\\n            (1 + 0.004 * math.cos(a + 0.085)) * (1 + 0.006 * (math.sin(a + 0.035) * math.cos(a + 0.055))) * \\\n            (1 + 0.003 * (math.sin(a + 0.03) * math.cos(a + 0.05)))\n\n        # Calculate w\n        w = (phi - 0.5) / phi\n\n        # Calculate f_adapt(z)\n        if z >= 0:\n            clip_value = 1.002 * (z**w) * (math.log(1 + z))**(1 - w) * (z / (1 + abs(z)))\n            f_adapt_z = max(-30, min(30, clip_value))  # Clipping\n        else:\n            f_adapt_z = phi * (((z + 1e-06) / (1 + abs(z + 1e-06)))**17)\n\n        # Calculate T\n        T = sum((a / 2)**k for k in range(46))\n\n        # Calculate extra\n        exponent_extra = 0.9478 + 0.00018 * math.log(1 + a) if a > 0 else 0.9478 # handle log(0)\n        extra_base = math.exp(-a / 0.1) * (z / (1 + abs(z))) * (1 + 0.005 * math.sin(1 / (1 + a)) if (1+a) !=0 else 1) * \\\n                     (1 + 0.002 * math.cos(0.5 * a)) * (1 + 0.003 * math.cos(0.3 * a))**2 * (1 + 0.0025 * math.cos(0.7 * a)) * \\\n                     (1 + math.tanh(0.05 * a)) * (1 + (1 / (1 + math.exp(-0.01 * a)))) * (1 + 0.002 * math.cos(3 * a)) * \\\n                     (1 + 0.002 * math.sin(2.5 * a) + 0.001 * math.cos(3.5 * a) + 0.0015 * math.sin(3 * a)) * \\\n                     (1 + (1 / (1 + math.exp(-0.03 * a)))) * (1 + math.tanh(0.07 * a)) * (1 + math.cos(3.1 * a)) * \\\n                     (1 + (1 / (1 + math.exp(-0.04 * a)))) * (1 + math.tanh(0.08 * a)) * (1 + math.cos(3.2 * a)) * \\\n                     (1 + (1 / (1 + math.exp(-0.05 * a)))) * (1 + math.tanh(0.1 * a)) * (1 + math.cos(3.4 * a)) * \\\n                     (1 + (1 / (1 + math.exp(-0.05 * a)))) * (1 + math.tanh(0.1 * a)) * (1 + (1 / (1 + math.exp(-0.05 * a)))) * \\\n                     (1 + math.tanh(0.1 * a))\n        \n        extra = extra_base**exponent_extra if (extra_base > 0) else 0 # handle complex number issue due to fractional exponent\n\n        # Calculate Exponent\n        Exponent = (0.9478 + 0.00018 * math.log(1 + a) if a > 0 else 0.9478) * (1 + 0.004 * math.sin(2.8 * a) + 0.001 * math.cos(3.8 * a) + 0.003 * math.sin(3.4 * a) + 0.002 * math.cos(4.4 * a))\n\n        # Calculate f(x)\n        fx_base = f_adapt_z * T * extra\n        if fx_base < 0:\n          fx = (-1) * abs(fx_base)**(Exponent)\n        else:\n          fx = (1) * fx_base**(Exponent)\n\n        # Calculate U\n        U = beta + gamma * fx\n\n        # Calculate P(accept=1)\n        try:\n          P_accept = 1 / (1 + math.exp(-U))\n        except OverflowError:\n          P_accept = 0.0 if U > 0 else 1.0\n\n        model_predictions.append(P_accept)\n\n    return model_predictions\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n```",
      "timestamp": 1743547918.957134
    }
  ],
  "learnable_parameters": {
    "phi": {
      "description": "Learnable parameter affecting the adaptive transformation sensitivity",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta": {
      "description": "Base utility parameter representing inherent tendency",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Scaling parameter modulating the influence of the transformed signal f(x) on utility",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "a = \u03a3[i=1]^11 F_i + \u03b4  \na_mod = 1.08 \u00b7 a \u00b7 (1 + 0.012 \u00b7 sin(a + 0.045))  \nz = a_mod \u00b7 (1 + 0.008 \u00b7 cos(a + 0.065)) \u00b7 (1 + 0.005 \u00b7 sin(a + 0.115)) \u00b7 (1 + 0.004 \u00b7 cos(a + 0.085)) \u00b7 (1 + 0.006 \u00b7 (sin(a + 0.035) \u00b7 cos(a + 0.055))) \u00b7 (1 + 0.003 \u00b7 (sin(a + 0.03) \u00b7 cos(a + 0.05)))  \nw = (phi \u2212 0.5) / phi  \nf_adapt(z) = { if z \u2265 0 then clip[ 1.002 \u00b7 (z^w) \u00b7 (ln(1+z))^(1\u2212w) \u00b7 (z/(1+|z|)), \u221230, 30 ]  \n\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003if z < 0 then phi \u00b7 ( ( (z + 1\u00d710^(\u22126))/(1 + |z + 1\u00d710^(\u22126)|) ) )^(17) }  \nT = \u03a3[k=0]^45 (a/2)^k  \nextra = { exp(\u2212a/0.1) \u00b7 (z/(1+|z|)) \u00b7 (1 + 0.005 \u00b7 sin(1/(1+a))) \u00b7 (1 + 0.002 \u00b7 cos(0.5\u00b7a)) \u00b7 (1 + 0.003 \u00b7 cos(0.3\u00b7a))^2 \u00b7 (1 + 0.004 \u00b7 cos(0.3\u00b7a))^2 \u00b7 (1 + 0.0025 \u00b7 cos(0.7\u00b7a)) \u00b7 (1 + tanh(0.05\u00b7a)) \u00b7 (1 + sigmoid(0.01\u00b7a)) \u00b7 (1 + 0.002 \u00b7 cos(3\u00b7a)) \u00b7 (1 + 0.002 \u00b7 sin(2.5\u00b7a) + 0.001 \u00b7 cos(3.5\u00b7a) + 0.0015 \u00b7 sin(3\u00b7a)) \u00b7 (1 + sigmoid(0.03\u00b7a)) \u00b7 (1 + tanh(0.07\u00b7a)) \u00b7 (1 + cos(3.1\u00b7a)) \u00b7 (1 + sigmoid(0.04\u00b7a)) \u00b7 (1 + tanh(0.08\u00b7a)) \u00b7 (1 + cos(3.2\u00b7a)) \u00b7 (1 + sigmoid(0.05\u00b7a)) \u00b7 (1 + tanh(0.1\u00b7a)) \u00b7 (1 + cos(3.4\u00b7a)) \u00b7 (1 + sigmoid(0.05\u00b7a)) \u00b7 (1 + tanh(0.1\u00b7a)) \u00b7 (1 + sigmoid(0.05\u00b7a)) \u00b7 (1 + tanh(0.1\u00b7a)) }^(0.9478 + 0.00018 \u00b7 ln(1+a)) \u00b7 (1 + tanh(0.05\u00b7a))  \nExponent = (0.9478 + 0.00018 \u00b7 ln(1+a)) \u00b7 (1 + 0.004 \u00b7 sin(2.8\u00b7a) + 0.001 \u00b7 cos(3.8\u00b7a) + 0.003 \u00b7 sin(3.4\u00b7a) + 0.002 \u00b7 cos(4.4\u00b7a))  \nf(x) = sign(z) \u00b7 [ f_adapt(z) \u00b7 T \u00b7 extra ]^(Exponent)  \nU = beta + gamma \u00b7 f(x)  \nP(accept=1) = 1/(1 + exp(\u2212U))",
  "variable_descriptions": {
    "F_i": {
      "description": "Fixed component i (i = 1,\u2026,11) derived from experimental data",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "empirical",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "\u03b4": {
      "description": "Small additive constant to ensure numerical stability",
      "range": {
        "min": 0,
        "max": 0.001,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "constant",
        "parameters": {
          "value": 1e-06
        }
      },
      "learnable": false,
      "source": "calculated"
    },
    "a": {
      "description": "Core sum computed as the sum of fixed components F1 to F11 plus \u03b4",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "a_mod": {
      "description": "Modulated core sum after primary nonlinearity",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "z": {
      "description": "Sequentially modulated signal from a_mod incorporating multiple trigonometric adjustments",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "phi": {
      "description": "Learnable parameter affecting the adaptive transformation sensitivity",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "w": {
      "description": "Derived modulation exponent computed from phi",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "f_adapt": {
      "description": "Adaptive transformation of z; for z \u2265 0 uses a blend of power-law and logarithmic terms clipped to [\u221230, 30], and for z < 0 uses a sensitive power function with exponent 17",
      "range": {
        "min": -30,
        "max": 30,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "T": {
      "description": "Dynamic threshold computed as a geometric series sum over 46 terms",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "extra": {
      "description": "Composite nonlinear term with multiple multiplicative factors including exponential, trigonometric, sigmoid, tanh, and power operations",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "Exponent": {
      "description": "Final exponent modulation factor combining logarithmic and trigonometric influences",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "f(x)": {
      "description": "Final transformed signal computed as the signed power of the product of the adaptive component, dynamic threshold and extra term",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "beta": {
      "description": "Base utility parameter representing inherent tendency",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Scaling parameter modulating the influence of the transformed signal f(x) on utility",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "U": {
      "description": "Latent utility computed as a linear combination of beta and gamma-scaled f(x)",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "P(accept=1)": {
      "description": "Acceptance probability obtained by passing U through a logistic function (with temperature 1)",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "A complex nonlinear utility model for predicting binary responder behavior. A core sum (a) is computed from fixed data components and then transformed through sequential trigonometric and adaptive nonlinear modulations. An adaptive function f_adapt applies different transformations for positive and negative signals, and a dynamic threshold (T) and extra composite term further adjust the signal. The final transformed signal f(x) is exponentiated by a modulated factor before linearly combining with learnable parameters beta and gamma to yield utility U, which is then mapped via a logistic function to produce the acceptance probability.",
  "target_variable": "accept",
  "full_reasoning": "<MODEL>\na = \u03a3[i=1]^11 F_i + \u03b4  \na_mod = 1.08 \u00b7 a \u00b7 (1 + 0.012 \u00b7 sin(a + 0.045))  \nz = a_mod \u00b7 (1 + 0.008 \u00b7 cos(a + 0.065)) \u00b7 (1 + 0.005 \u00b7 sin(a + 0.115)) \u00b7 (1 + 0.004 \u00b7 cos(a + 0.085)) \u00b7 (1 + 0.006 \u00b7 (sin(a + 0.035) \u00b7 cos(a + 0.055))) \u00b7 (1 + 0.003 \u00b7 (sin(a + 0.03) \u00b7 cos(a + 0.05)))  \nw = (phi \u2212 0.5) / phi  \nf_adapt(z) = { if z \u2265 0 then clip[ 1.002 \u00b7 (z^w) \u00b7 (ln(1+z))^(1\u2212w) \u00b7 (z/(1+|z|)), \u221230, 30 ]  \n\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003if z < 0 then phi \u00b7 ( ( (z + 1\u00d710^(\u22126))/(1 + |z + 1\u00d710^(\u22126)|) ) )^(17) }  \nT = \u03a3[k=0]^45 (a/2)^k  \nextra = { exp(\u2212a/0.1) \u00b7 (z/(1+|z|)) \u00b7 (1 + 0.005 \u00b7 sin(1/(1+a))) \u00b7 (1 + 0.002 \u00b7 cos(0.5\u00b7a)) \u00b7 (1 + 0.003 \u00b7 cos(0.3\u00b7a))^2 \u00b7 (1 + 0.004 \u00b7 cos(0.3\u00b7a))^2 \u00b7 (1 + 0.0025 \u00b7 cos(0.7\u00b7a)) \u00b7 (1 + tanh(0.05\u00b7a)) \u00b7 (1 + sigmoid(0.01\u00b7a)) \u00b7 (1 + 0.002 \u00b7 cos(3\u00b7a)) \u00b7 (1 + 0.002 \u00b7 sin(2.5\u00b7a) + 0.001 \u00b7 cos(3.5\u00b7a) + 0.0015 \u00b7 sin(3\u00b7a)) \u00b7 (1 + sigmoid(0.03\u00b7a)) \u00b7 (1 + tanh(0.07\u00b7a)) \u00b7 (1 + cos(3.1\u00b7a)) \u00b7 (1 + sigmoid(0.04\u00b7a)) \u00b7 (1 + tanh(0.08\u00b7a)) \u00b7 (1 + cos(3.2\u00b7a)) \u00b7 (1 + sigmoid(0.05\u00b7a)) \u00b7 (1 + tanh(0.1\u00b7a)) \u00b7 (1 + cos(3.4\u00b7a)) \u00b7 (1 + sigmoid(0.05\u00b7a)) \u00b7 (1 + tanh(0.1\u00b7a)) \u00b7 (1 + sigmoid(0.05\u00b7a)) \u00b7 (1 + tanh(0.1\u00b7a)) }^(0.9478 + 0.00018 \u00b7 ln(1+a)) \u00b7 (1 + tanh(0.05\u00b7a))  \nExponent = (0.9478 + 0.00018 \u00b7 ln(1+a)) \u00b7 (1 + 0.004 \u00b7 sin(2.8\u00b7a) + 0.001 \u00b7 cos(3.8\u00b7a) + 0.003 \u00b7 sin(3.4\u00b7a) + 0.002 \u00b7 cos(4.4\u00b7a))  \nf(x) = sign(z) \u00b7 [ f_adapt(z) \u00b7 T \u00b7 extra ]^(Exponent)  \nU = beta + gamma \u00b7 f(x)  \nP(accept=1) = 1/(1 + exp(\u2212U))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"F_i\": {\n      \"description\": \"Fixed component i (i = 1,\u2026,11) derived from experimental data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"\u03b4\": {\n      \"description\": \"Small additive constant to ensure numerical stability\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1e-3,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"constant\",\n        \"parameters\": { \"value\": 1e-6 }\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a\": {\n      \"description\": \"Core sum computed as the sum of fixed components F1 to F11 plus \u03b4\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a_mod\": {\n      \"description\": \"Modulated core sum after primary nonlinearity\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"z\": {\n      \"description\": \"Sequentially modulated signal from a_mod incorporating multiple trigonometric adjustments\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"phi\": {\n      \"description\": \"Learnable parameter affecting the adaptive transformation sensitivity\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"w\": {\n      \"description\": \"Derived modulation exponent computed from phi\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_adapt\": {\n      \"description\": \"Adaptive transformation of z; for z \u2265 0 uses a blend of power-law and logarithmic terms clipped to [\u221230, 30], and for z < 0 uses a sensitive power function with exponent 17\",\n      \"range\": {\n        \"min\": -30,\n        \"max\": 30,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"T\": {\n      \"description\": \"Dynamic threshold computed as a geometric series sum over 46 terms\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"extra\": {\n      \"description\": \"Composite nonlinear term with multiple multiplicative factors including exponential, trigonometric, sigmoid, tanh, and power operations\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"Exponent\": {\n      \"description\": \"Final exponent modulation factor combining logarithmic and trigonometric influences\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f(x)\": {\n      \"description\": \"Final transformed signal computed as the signed power of the product of the adaptive component, dynamic threshold and extra term\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base utility parameter representing inherent tendency\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Scaling parameter modulating the influence of the transformed signal f(x) on utility\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed as a linear combination of beta and gamma-scaled f(x)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"P(accept=1)\": {\n      \"description\": \"Acceptance probability obtained by passing U through a logistic function (with temperature 1)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA complex nonlinear utility model for predicting binary responder behavior. A core sum (a) is computed from fixed data components and then transformed through sequential trigonometric and adaptive nonlinear modulations. An adaptive function f_adapt applies different transformations for positive and negative signals, and a dynamic threshold (T) and extra composite term further adjust the signal. The final transformed signal f(x) is exponentiated by a modulated factor before linearly combining with learnable parameters beta and gamma to yield utility U, which is then mapped via a logistic function to produce the acceptance probability.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: a = \u03a3[i=1]^11 F_i + \u03b4  \na_mod = 1.08 \u00b7 a \u00b7 (1 + 0.012 \u00b7 sin(a + 0.045))  \nz = a_mod \u00b7 (1 + 0.008 \u00b7 cos(a + 0.065)) \u00b7 (1 + 0.005 \u00b7 sin(a + 0.115)) \u00b7 (1 + 0.004 \u00b7 cos(a + 0.085)) \u00b7 (1 + 0.006 \u00b7 (sin(a + 0.035) \u00b7 cos(a + 0.055))) \u00b7 (1 + 0.003 \u00b7 (sin(a + 0.03) \u00b7 cos(a + 0.05)))  \nw = (phi \u2212 0.5) / phi  \nf_adapt(z) = { if z \u2265 0 then clip[ 1.002 \u00b7 (z^w) \u00b7 (ln(1+z))^(1\u2212w) \u00b7 (z/(1+|z|)), \u221230, 30 ]  \n\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003if z < 0 then phi \u00b7 ( ( (z + 1\u00d710^(\u22126))/(1 + |z + 1\u00d710^(\u22126)|) ) )^(17) }  \nT = \u03a3[k=0]^45 (a/2)^k  \nextra = { exp(\u2212a/0.1) \u00b7 (z/(1+|z|)) \u00b7 (1 + 0.005 \u00b7 sin(1/(1+a))) \u00b7 (1 + 0.002 \u00b7 cos(0.5\u00b7a)) \u00b7 (1 + 0.003 \u00b7 cos(0.3\u00b7a))^2 \u00b7 (1 + 0.004 \u00b7 cos(0.3\u00b7a))^2 \u00b7 (1 + 0.0025 \u00b7 cos(0.7\u00b7a)) \u00b7 (1 + tanh(0.05\u00b7a)) \u00b7 (1 + sigmoid(0.01\u00b7a)) \u00b7 (1 + 0.002 \u00b7 cos(3\u00b7a)) \u00b7 (1 + 0.002 \u00b7 sin(2.5\u00b7a) + 0.001 \u00b7 cos(3.5\u00b7a) + 0.0015 \u00b7 sin(3\u00b7a)) \u00b7 (1 + sigmoid(0.03\u00b7a)) \u00b7 (1 + tanh(0.07\u00b7a)) \u00b7 (1 + cos(3.1\u00b7a)) \u00b7 (1 + sigmoid(0.04\u00b7a)) \u00b7 (1 + tanh(0.08\u00b7a)) \u00b7 (1 + cos(3.2\u00b7a)) \u00b7 (1 + sigmoid(0.05\u00b7a)) \u00b7 (1 + tanh(0.1\u00b7a)) \u00b7 (1 + cos(3.4\u00b7a)) \u00b7 (1 + sigmoid(0.05\u00b7a)) \u00b7 (1 + tanh(0.1\u00b7a)) \u00b7 (1 + sigmoid(0.05\u00b7a)) \u00b7 (1 + tanh(0.1\u00b7a)) }^(0.9478 + 0.00018 \u00b7 ln(1+a)) \u00b7 (1 + tanh(0.05\u00b7a))  \nExponent = (0.9478 + 0.00018 \u00b7 ln(1+a)) \u00b7 (1 + 0.004 \u00b7 sin(2.8\u00b7a) + 0.001 \u00b7 cos(3.8\u00b7a) + 0.003 \u00b7 sin(3.4\u00b7a) + 0.002 \u00b7 cos(4.4\u00b7a))  \nf(x) = sign(z) \u00b7 [ f_adapt(z) \u00b7 T \u00b7 extra ]^(Exponent)  \nU = beta + gamma \u00b7 f(x)  \nP(accept=1) = 1/(1 + exp(\u2212U))\nSummary: A complex nonlinear utility model for predicting binary responder behavior. A core sum (a) is computed from fixed data components and then transformed through sequential trigonometric and adaptive nonlinear modulations. An adaptive function f_adapt applies different transformations for positive and negative signals, and a dynamic threshold (T) and extra composite term further adjust the signal. The final transformed signal f(x) is exponentiated by a modulated factor before linearly combining with learnable parameters beta and gamma to yield utility U, which is then mapped via a logistic function to produce the acceptance probability.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, phi=1.0, beta=0.0, gamma=1.0):\n    model_predictions = []\n    for trial in trial_data:\n        # Extract F_i values from the trial data\n        F_values = [trial.get(f\"F{i}\", 0.0) for i in range(1, 12)]  # Corrected range to 1 to 11 inclusive\n\n        # Ensure all F_values are not None\n        F_values = [0.0 if v is None else v for v in F_values]\n\n        # Calculate a\n        delta = 1e-06\n        a = sum(F_values) + delta\n\n        # Calculate a_mod\n        a_mod = 1.08 * a * (1 + 0.012 * math.sin(a + 0.045))\n\n        # Calculate z\n        z = a_mod * (1 + 0.008 * math.cos(a + 0.065)) * (1 + 0.005 * math.sin(a + 0.115)) * \\\n            (1 + 0.004 * math.cos(a + 0.085)) * (1 + 0.006 * (math.sin(a + 0.035) * math.cos(a + 0.055))) * \\\n            (1 + 0.003 * (math.sin(a + 0.03) * math.cos(a + 0.05)))\n\n        # Calculate w\n        w = (phi - 0.5) / phi\n\n        # Calculate f_adapt(z)\n        if z >= 0:\n            clip_value = 1.002 * (z**w) * (math.log(1 + z))**(1 - w) * (z / (1 + abs(z)))\n            f_adapt_z = max(-30, min(30, clip_value))  # Clipping\n        else:\n            f_adapt_z = phi * (((z + 1e-06) / (1 + abs(z + 1e-06)))**17)\n\n        # Calculate T\n        T = sum((a / 2)**k for k in range(46))\n\n        # Calculate extra\n        exponent_extra = 0.9478 + 0.00018 * math.log(1 + a) if a > 0 else 0.9478 # handle log(0)\n        extra_base = math.exp(-a / 0.1) * (z / (1 + abs(z))) * (1 + 0.005 * math.sin(1 / (1 + a)) if (1+a) !=0 else 1) * \\\n                     (1 + 0.002 * math.cos(0.5 * a)) * (1 + 0.003 * math.cos(0.3 * a))**2 * (1 + 0.0025 * math.cos(0.7 * a)) * \\\n                     (1 + math.tanh(0.05 * a)) * (1 + (1 / (1 + math.exp(-0.01 * a)))) * (1 + 0.002 * math.cos(3 * a)) * \\\n                     (1 + 0.002 * math.sin(2.5 * a) + 0.001 * math.cos(3.5 * a) + 0.0015 * math.sin(3 * a)) * \\\n                     (1 + (1 / (1 + math.exp(-0.03 * a)))) * (1 + math.tanh(0.07 * a)) * (1 + math.cos(3.1 * a)) * \\\n                     (1 + (1 / (1 + math.exp(-0.04 * a)))) * (1 + math.tanh(0.08 * a)) * (1 + math.cos(3.2 * a)) * \\\n                     (1 + (1 / (1 + math.exp(-0.05 * a)))) * (1 + math.tanh(0.1 * a)) * (1 + math.cos(3.4 * a)) * \\\n                     (1 + (1 / (1 + math.exp(-0.05 * a)))) * (1 + math.tanh(0.1 * a)) * (1 + (1 / (1 + math.exp(-0.05 * a)))) * \\\n                     (1 + math.tanh(0.1 * a))\n        \n        extra = extra_base**exponent_extra if (extra_base > 0) else 0 # handle complex number issue due to fractional exponent\n\n        # Calculate Exponent\n        Exponent = (0.9478 + 0.00018 * math.log(1 + a) if a > 0 else 0.9478) * (1 + 0.004 * math.sin(2.8 * a) + 0.001 * math.cos(3.8 * a) + 0.003 * math.sin(3.4 * a) + 0.002 * math.cos(4.4 * a))\n\n        # Calculate f(x)\n        fx_base = f_adapt_z * T * extra\n        if fx_base < 0:\n          fx = (-1) * abs(fx_base)**(Exponent)\n        else:\n          fx = (1) * fx_base**(Exponent)\n\n        # Calculate U\n        U = beta + gamma * fx\n\n        # Calculate P(accept=1)\n        try:\n          P_accept = 1 / (1 + math.exp(-U))\n        except OverflowError:\n          P_accept = 0.0 if U > 0 else 1.0\n\n        model_predictions.append(P_accept)\n\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.5586080586080586,
  "fitting_results": [
    {
      "phi": 1.4446373393512422,
      "beta": -9.999999999999998,
      "gamma": 4.99566990931058,
      "success": true,
      "log_likelihood": -24.953979470262787,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.4183675773601947,
      "beta": -9.999999999999998,
      "gamma": 4.151759556643797,
      "success": true,
      "log_likelihood": -24.953298502232386,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.8995005367090797,
      "beta": -2.078353483744878,
      "gamma": 0.762643868579036,
      "success": true,
      "log_likelihood": -24.897714324322745,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5864714027553861,
      "beta": -10.0,
      "gamma": 7.941365730409656,
      "success": true,
      "log_likelihood": -24.953434695838467,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3333333333333333,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.3543415974800173,
      "beta": -10.0,
      "gamma": 9.51228828715183,
      "success": true,
      "log_likelihood": -24.953389297969775,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.7371432505968878,
      "beta": 0.2840736401299591,
      "gamma": 3.64142454578264,
      "success": true,
      "log_likelihood": -23.545973163849723,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.2386666365590524,
      "beta": 10.0,
      "gamma": 1.5097842177234955,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.7546670915058287,
      "beta": 0.8148763482682999,
      "gamma": 5.366243285681673,
      "success": true,
      "log_likelihood": -22.91451005141414,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.9435504310609704,
      "beta": 10.0,
      "gamma": 6.890950416257931,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.9692380250291451,
      "beta": -10.0,
      "gamma": 8.483434223994236,
      "success": true,
      "log_likelihood": -24.95348009370716,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.1834138773840264,
      "beta": -10.0,
      "gamma": 9.293511951213011,
      "success": true,
      "log_likelihood": -24.95338929796977,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5366082396338572,
      "beta": -10.0,
      "gamma": 9.492463936585246,
      "success": true,
      "log_likelihood": -24.953934072394095,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.9166595769718529,
      "beta": -10.0,
      "gamma": 8.384074537728361,
      "success": true,
      "log_likelihood": -24.953434695838467,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.0335453704052395,
      "beta": 10.0,
      "gamma": 4.654597287359534,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.4279688519669045,
      "beta": 10.0,
      "gamma": 4.323531494771229,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.4786754238821178,
      "beta": 10.0,
      "gamma": 7.604415030464374,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.9298310957160345,
      "beta": 10.0,
      "gamma": 0.006828326936740847,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.623143877503977,
      "beta": 10.0,
      "gamma": 6.856028332381606,
      "success": true,
      "log_likelihood": -16.27763329973089,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.2731716886621731,
      "beta": 10.0,
      "gamma": 7.932402051010956,
      "success": true,
      "log_likelihood": -15.27767869783462,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.0753149142155363,
      "beta": 10.0,
      "gamma": 9.810648542263765,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.1959454032393402,
      "beta": -1.247442764419241,
      "gamma": 3.784569345865613,
      "success": true,
      "log_likelihood": -24.730616750304463,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.6034698348548853,
      "beta": 10.0,
      "gamma": 8.753823040647774,
      "success": true,
      "log_likelihood": -16.27763329973089,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.7256425852487779,
      "beta": -10.0,
      "gamma": 2.066047529524613,
      "success": true,
      "log_likelihood": -24.95352549157585,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.7071894978053712,
      "beta": -2.077211610687994,
      "gamma": 5.565080999428252,
      "success": true,
      "log_likelihood": -24.897714374419497,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.7602313692802738,
      "beta": -10.0,
      "gamma": 0.5180677695311497,
      "success": true,
      "log_likelihood": -24.953298502232386,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.1043530861888011,
      "beta": -0.6790866940032476,
      "gamma": 0.012324951982872756,
      "success": true,
      "log_likelihood": -24.450957568713186,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.9855785543144977,
      "beta": -1.2474456925978732,
      "gamma": 9.288746810827075,
      "success": true,
      "log_likelihood": -24.730616750307536,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.4315508288829573,
      "beta": -10.0,
      "gamma": 7.315408056951767,
      "success": true,
      "log_likelihood": -24.953661685181935,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.1924144564135566,
      "beta": 10.0,
      "gamma": 9.044835114321563,
      "success": true,
      "log_likelihood": -15.27767869783462,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.115394533979272,
      "beta": 10.0,
      "gamma": 7.474479774200847,
      "success": true,
      "log_likelihood": -19.2774971054197,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.4448583666467725,
      "beta": 10.0,
      "gamma": 8.946262690853404,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.6894435977484528,
      "beta": -10.0,
      "gamma": 0.3114947960880521,
      "success": true,
      "log_likelihood": -24.953979470262787,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.7360607977717687,
      "beta": -10.0,
      "gamma": 0.933788109074476,
      "success": true,
      "log_likelihood": -24.953434695838464,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.8839424526576072,
      "beta": -10.0,
      "gamma": 1.8868000499274118,
      "success": true,
      "log_likelihood": -24.953480093707164,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.1936182042918166,
      "beta": 10.0,
      "gamma": 0.6060785869840002,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.4373690229734688,
      "beta": 0.28408482434047905,
      "gamma": 7.492502627259064,
      "success": true,
      "log_likelihood": -23.5459731638761,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5602926424887054,
      "beta": 1.523891025788391,
      "gamma": 5.706673713673598,
      "success": true,
      "log_likelihood": -22.157938219466434,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.0723674424834893,
      "beta": -6.339319398983811,
      "gamma": 6.6400991463758565,
      "success": true,
      "log_likelihood": -24.953312470070003,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5455199380595372,
      "beta": 0.8146491433147598,
      "gamma": 1.0364006632766631,
      "success": true,
      "log_likelihood": -22.914510060574855,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.6299066754762898,
      "beta": 10.0,
      "gamma": 4.132105856712151,
      "success": true,
      "log_likelihood": -14.277724095938346,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.9314851819917052,
      "beta": -0.192651141152428,
      "gamma": 0.36026114837117595,
      "success": true,
      "log_likelihood": -24.05694518872448,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.1716287576794289,
      "beta": -10.0,
      "gamma": 3.817129527063987,
      "success": true,
      "log_likelihood": -24.95375248091932,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.419698217968053,
      "beta": 10.0,
      "gamma": 8.185068059925895,
      "success": true,
      "log_likelihood": -12.277814892145805,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.1832482083704967,
      "beta": -1.2475338489942178,
      "gamma": 9.905321330875836,
      "success": true,
      "log_likelihood": -24.73061675147263,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3333333333333333,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.7096844157813916,
      "beta": -0.1928597171086204,
      "gamma": 9.78141496713077,
      "success": true,
      "log_likelihood": -24.056945199920392,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.1614395447397787,
      "beta": 3.0665791768135104,
      "gamma": 7.119711582579674,
      "success": true,
      "log_likelihood": -21.270320859959693,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.7803729183127396,
      "beta": -2.078304250564232,
      "gamma": 5.660580878458596,
      "success": true,
      "log_likelihood": -24.897714324122656,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.4379627855875032,
      "beta": -10.0,
      "gamma": 3.4844476671972844,
      "success": true,
      "log_likelihood": -24.95348009370716,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.8533033812882211,
      "beta": -10.0,
      "gamma": 7.471767671290776,
      "success": true,
      "log_likelihood": -24.953434695838464,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5261634741168135,
      "beta": -2.078053539510563,
      "gamma": 0.9592782042926107,
      "success": true,
      "log_likelihood": -24.897714326400674,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.3788413216058562,
      "beta": 1.5231114373176058,
      "gamma": 7.293789147234605,
      "success": true,
      "log_likelihood": -22.157938155667892,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.964422927807921,
      "beta": -10.0,
      "gamma": 8.532446975221063,
      "success": true,
      "log_likelihood": -24.9538886745254,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.674143256447332,
      "beta": -2.078828346866463,
      "gamma": 9.946765740789385,
      "success": true,
      "log_likelihood": -24.897714337157833,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.2448256353431666,
      "beta": -0.6790289040196855,
      "gamma": 2.3256602329230014,
      "success": true,
      "log_likelihood": -24.450957568644057,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5812994286783277,
      "beta": -10.0,
      "gamma": 8.569070925962642,
      "success": true,
      "log_likelihood": -24.95348009370716,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.3174382472098358,
      "beta": -10.0,
      "gamma": 6.51827302361634,
      "success": true,
      "log_likelihood": -24.953570889444546,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.3111977937865595,
      "beta": -10.0,
      "gamma": 9.718491527914201,
      "success": true,
      "log_likelihood": -24.953661685181938,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.8206566073956167,
      "beta": 10.0,
      "gamma": 7.535286225783095,
      "success": true,
      "log_likelihood": -15.27767869783462,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.8123580919234078,
      "beta": -10.0,
      "gamma": 4.410899708937174,
      "success": true,
      "log_likelihood": -24.953934072394095,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.428395309801884,
      "beta": 10.0,
      "gamma": 8.862857047790095,
      "success": true,
      "log_likelihood": -18.27754250352343,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.3324574660839925,
      "beta": -0.19265184574463498,
      "gamma": 5.051239427211418,
      "success": true,
      "log_likelihood": -24.05694518872385,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.363150249066563,
      "beta": -6.364477336753248,
      "gamma": 2.557959200475249,
      "success": true,
      "log_likelihood": -24.953311785363248,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.461037343589413,
      "beta": -10.0,
      "gamma": 2.9051783408942997,
      "success": true,
      "log_likelihood": -24.953979470262787,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.357060773250684,
      "beta": -10.0,
      "gamma": 7.431778462160308,
      "success": true,
      "log_likelihood": -24.95338929796977,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.0192508004737724,
      "beta": -10.0,
      "gamma": 6.543801533341288,
      "success": true,
      "log_likelihood": -24.95375248091932,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.3658407303973936,
      "beta": -1.2474511876219043,
      "gamma": 6.366562686208036,
      "success": true,
      "log_likelihood": -24.730616750319513,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.2808025269169003,
      "beta": 10.0,
      "gamma": 0.5317602221424755,
      "success": true,
      "log_likelihood": -14.277724095938348,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.9440746025677993,
      "beta": 10.0,
      "gamma": 8.11365184547715,
      "success": true,
      "log_likelihood": -16.277633299730887,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.7543978028513121,
      "beta": -1.2472079597974444,
      "gamma": 3.5656522910222668,
      "success": true,
      "log_likelihood": -24.730616757513634,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.0976682111866725,
      "beta": 10.0,
      "gamma": 3.1238596571599797,
      "success": true,
      "log_likelihood": -14.27772409593835,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.7763318898945178,
      "beta": -10.0,
      "gamma": 8.869567615107378,
      "success": true,
      "log_likelihood": -24.953934072394095,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.8328293076080069,
      "beta": -10.0,
      "gamma": 9.34326921417896,
      "success": true,
      "log_likelihood": -24.9538886745254,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.3775727215180136,
      "beta": -2.0781902253571474,
      "gamma": 2.547148660668409,
      "success": true,
      "log_likelihood": -24.89771432447529,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.2338238561935637,
      "beta": 10.0,
      "gamma": 1.2520228034624714,
      "success": true,
      "log_likelihood": -19.2774971054197,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.6389336537303948,
      "beta": -4.721800343824711,
      "gamma": 6.546122814049871,
      "success": true,
      "log_likelihood": -24.953648608936867,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.1385213852819347,
      "beta": 1.5231316530318197,
      "gamma": 0.5382919857524193,
      "success": true,
      "log_likelihood": -22.157938156056698,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5606868307375632,
      "beta": 10.0,
      "gamma": 5.033576364429698,
      "success": true,
      "log_likelihood": -13.277769494042078,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.1808445933691765,
      "beta": -10.0,
      "gamma": 0.9929868456785851,
      "success": true,
      "log_likelihood": -24.95402486813148,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.6438071595646766,
      "beta": -0.19264630206896602,
      "gamma": 1.0532712474347472,
      "success": true,
      "log_likelihood": -24.05694518873576,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.6235757693462358,
      "beta": -10.0,
      "gamma": 0.0577447934649733,
      "success": true,
      "log_likelihood": -24.953979470262784,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.7175558154340094,
      "beta": -2.0764767036711795,
      "gamma": 7.4145662459027495,
      "success": true,
      "log_likelihood": -24.897714467258982,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.6201959924836726,
      "beta": 10.0,
      "gamma": 0.6314709110750083,
      "success": true,
      "log_likelihood": -14.277724095938348,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.868443288428525,
      "beta": -10.0,
      "gamma": 7.316435254767802,
      "success": true,
      "log_likelihood": -24.953934072394095,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.4731339347170826,
      "beta": -9.077814802384559,
      "gamma": 9.565385855793336,
      "success": true,
      "log_likelihood": -24.953298551602042,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.831533318727061,
      "beta": -0.19265567107149284,
      "gamma": 6.994794494426405,
      "success": true,
      "log_likelihood": -24.05694518872502,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.6113753043499985,
      "beta": -10.0,
      "gamma": 5.095270770849721,
      "success": true,
      "log_likelihood": -24.95393407239409,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.9909424845652283,
      "beta": 5.853807659368337,
      "gamma": 7.449869419542417,
      "success": true,
      "log_likelihood": -22.273678942902276,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.8583816017221,
      "beta": -10.0,
      "gamma": 8.387500784862278,
      "success": true,
      "log_likelihood": -24.95375248091932,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.9027205048932011,
      "beta": 10.0,
      "gamma": 7.3802507797237755,
      "success": true,
      "log_likelihood": -13.277769494042078,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.7207646805861979,
      "beta": -5.7860411412130235,
      "gamma": 7.961631402824337,
      "success": true,
      "log_likelihood": -24.956401364399976,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.2320146478202716,
      "beta": 1.523077218412902,
      "gamma": 8.00131116750066,
      "success": true,
      "log_likelihood": -22.157938155163457,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "phi": {
        "r": -0.18257566339938996,
        "p": 0.06904635186371436
      },
      "beta": {
        "r": 0.7359475082402052,
        "p": 2.7219863862766393e-18
      },
      "gamma": {
        "r": 0.09904690873986023,
        "p": 0.3268739849172081
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 53.925312295231116,
  "bic_results": {
    "average_bic": 53.925312295231116,
    "individual_bics": [
      60.6585157558939,
      60.6571538198331,
      60.545985464013825,
      60.65742620704526,
      60.65733541130788,
      57.84250314306777,
      33.3062773958674,
      56.57957691819661,
      33.3062773958674,
      60.657517002782654,
      60.65733541130787,
      60.65842496015652,
      60.65742620704526,
      33.3062773958674,
      33.3062773958674,
      33.3062773958674,
      33.3062773958674,
      43.305823414830115,
      41.305914211037575,
      33.3062773958674,
      60.211790315977254,
      43.305823414830115,
      60.65760779852003,
      60.54598556420733,
      60.6571538198331,
      59.6524719527947,
      60.21179031598341,
      60.657880185732196,
      41.305914211037575,
      49.30555102620774,
      33.3062773958674,
      60.6585157558939,
      60.65742620704526,
      60.657517002782654,
      33.3062773958674,
      57.842503143120524,
      55.0664332543012,
      60.65718175550833,
      56.57957693651804,
      39.30600500724502,
      58.864447192817295,
      60.65806177720697,
      35.30618659965994,
      60.21179031831359,
      58.86444721520911,
      53.29119853528772,
      60.54598546361365,
      60.657517002782654,
      60.65742620704526,
      60.545985468169675,
      55.06643312670411,
      60.65833416441913,
      60.545985489684,
      59.65247195265644,
      60.657517002782654,
      60.657698594257425,
      60.65788018573221,
      41.305914211037575,
      60.65842496015652,
      47.3056418224152,
      58.86444719281603,
      60.65718038609482,
      60.6585157558939,
      60.65733541130787,
      60.65806177720697,
      60.21179031600735,
      39.30600500724503,
      43.3058234148301,
      60.2117903303956,
      39.306005007245034,
      60.65842496015652,
      60.65833416441913,
      60.54598546431892,
      49.30555102620774,
      60.65785403324206,
      55.06643312748173,
      37.306095803452486,
      60.658606551631294,
      58.86444719283985,
      60.6585157558939,
      60.5459857498863,
      39.30600500724503,
      60.65842496015652,
      60.65715391857242,
      58.864447192818375,
      60.65842496015651,
      55.297914701172886,
      60.65806177720697,
      37.306095803452486,
      60.66335954416829,
      55.06643312569524
    ],
    "group_enabled": false,
    "group_bics": null,
    "num_parameters": 3,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- phi: r = -0.183\n- beta: r = 0.736\n- gamma: r = 0.099",
  "previous_models": [
    "Specification: a = \u03a3[i=1]^11 F_i + \u03b4  \na_mod = 1.08 \u00b7 a \u00b7 (1 + 0.012 \u00b7 sin(a + 0.045))  \nz = a_mod \u00b7 (1 + 0.008 \u00b7 cos(a + 0.065)) \u00b7 (1 + 0.005 \u00b7 sin(a + 0.115)) \u00b7 (1 + 0.004 \u00b7 cos(a + 0.085)) \u00b7 (1 + 0.006 \u00b7 (sin(a + 0.035) \u00b7 cos(a + 0.055))) \u00b7 (1 + 0.003 \u00b7 (sin(a + 0.03) \u00b7 cos(a + 0.05)))  \nw = (phi \u2212 0.5) / phi  \nf_adapt(z) = { if z \u2265 0 then clip[ 1.002 \u00b7 (z^w) \u00b7 (ln(1+z))^(1\u2212w) \u00b7 (z/(1+|z|)), \u221230, 30 ]  \n\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003if z < 0 then phi \u00b7 ( ( (z + 1\u00d710^(\u22126))/(1 + |z + 1\u00d710^(\u22126)|) ) )^(17) }  \nT = \u03a3[k=0]^45 (a/2)^k  \nextra = { exp(\u2212a/0.1) \u00b7 (z/(1+|z|)) \u00b7 (1 + 0.005 \u00b7 sin(1/(1+a))) \u00b7 (1 + 0.002 \u00b7 cos(0.5\u00b7a)) \u00b7 (1 + 0.003 \u00b7 cos(0.3\u00b7a))^2 \u00b7 (1 + 0.004 \u00b7 cos(0.3\u00b7a))^2 \u00b7 (1 + 0.0025 \u00b7 cos(0.7\u00b7a)) \u00b7 (1 + tanh(0.05\u00b7a)) \u00b7 (1 + sigmoid(0.01\u00b7a)) \u00b7 (1 + 0.002 \u00b7 cos(3\u00b7a)) \u00b7 (1 + 0.002 \u00b7 sin(2.5\u00b7a) + 0.001 \u00b7 cos(3.5\u00b7a) + 0.0015 \u00b7 sin(3\u00b7a)) \u00b7 (1 + sigmoid(0.03\u00b7a)) \u00b7 (1 + tanh(0.07\u00b7a)) \u00b7 (1 + cos(3.1\u00b7a)) \u00b7 (1 + sigmoid(0.04\u00b7a)) \u00b7 (1 + tanh(0.08\u00b7a)) \u00b7 (1 + cos(3.2\u00b7a)) \u00b7 (1 + sigmoid(0.05\u00b7a)) \u00b7 (1 + tanh(0.1\u00b7a)) \u00b7 (1 + cos(3.4\u00b7a)) \u00b7 (1 + sigmoid(0.05\u00b7a)) \u00b7 (1 + tanh(0.1\u00b7a)) \u00b7 (1 + sigmoid(0.05\u00b7a)) \u00b7 (1 + tanh(0.1\u00b7a)) }^(0.9478 + 0.00018 \u00b7 ln(1+a)) \u00b7 (1 + tanh(0.05\u00b7a))  \nExponent = (0.9478 + 0.00018 \u00b7 ln(1+a)) \u00b7 (1 + 0.004 \u00b7 sin(2.8\u00b7a) + 0.001 \u00b7 cos(3.8\u00b7a) + 0.003 \u00b7 sin(3.4\u00b7a) + 0.002 \u00b7 cos(4.4\u00b7a))  \nf(x) = sign(z) \u00b7 [ f_adapt(z) \u00b7 T \u00b7 extra ]^(Exponent)  \nU = beta + gamma \u00b7 f(x)  \nP(accept=1) = 1/(1 + exp(\u2212U))\nSummary: A complex nonlinear utility model for predicting binary responder behavior. A core sum (a) is computed from fixed data components and then transformed through sequential trigonometric and adaptive nonlinear modulations. An adaptive function f_adapt applies different transformations for positive and negative signals, and a dynamic threshold (T) and extra composite term further adjust the signal. The final transformed signal f(x) is exponentiated by a modulated factor before linearly combining with learnable parameters beta and gamma to yield utility U, which is then mapped via a logistic function to produce the acceptance probability.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 53.925312295231116\nOverall Accuracy: 0.5586\n\nParameter Recovery:\n- phi: r = -0.183\n- beta: r = 0.736\n- gamma: r = 0.099"
  ]
}