{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "<think>\nFor run 148, we will boost nonlinearity further and allow even richer complexity while still only using the three learnable parameters (beta, gamma, phi). In the negative branch of f_adapt, increase the exponent from 26 to 28 to further emphasize extreme deviations. In the extra composite term, include three additional multiplicative factors: one for [1 + sigmoid(0.06\u00d7a)], one for [1 + tanh(0.12\u00d7a)], and one for [1 + cos(3.6\u00d7a)]. Also, nest an additional softplus function inside extra by multiplying the previous product by softplus(softplus(0.865/(1+a))). Extend the dynamic threshold T by summing from k = 0 to 60 instead of 55 to allow more flexibility in higher powers of a. Finally, amplify the final exponent modulation by including an extra multiplicative factor [1 + 0.005\u00d7sin(2.8\u00d7a) + 0.001\u00d7cos(3.8\u00d7a) + 0.003\u00d7sin(3.4\u00d7a) + 0.002\u00d7cos(4.4\u00d7a) + 0.001\u00d7sin(2.9\u00d7a) + 0.0005\u00d7cos(4.1\u00d7a) + 0.001\u00d7(sin(2.5\u00d7a)\u00d7cos(3.2\u00d7a)) + 0.002\u00d7cos(3.6\u00d7a)]. This extra factor should be multiplied with the previously specified exponent modulation. These modifications aim to capture even more subtle nonlinearities and complex behaviors, preserving the learnable parameters beta \u2208 [\u201310,10], gamma \u2208 [0,10], and phi \u2208 [0.5,1.5]. Be creative in interleaving the nonlinear functions and maintain clarity in your specification.\n</think>\nNew Instructions for Run 148:\n1. Compute the core sum a as the sum of fixed components F1 through F11 plus a small constant \u03b4.\n2. Define a_mod = 1.08 \u00d7 a \u00d7 [1 + 0.012 \u00d7 sin(a + 0.045)].\n3. Sequentially modulate a_mod by multiplying by:\n\u2003\u2022 [1 + 0.008 \u00d7 cos(a + 0.065)]\n\u2003\u2022 [1 + 0.005 \u00d7 sin(a + 0.115)]\n\u2003\u2022 [1 + 0.004 \u00d7 cos(a + 0.085)]\n\u2003\u2022 [1 + 0.006 \u00d7 (sin(a + 0.035) \u00d7 cos(a + 0.055))]\n\u2003\u2022 [1 + 0.003 \u00d7 (sin(a + 0.03) \u00d7 cos(a + 0.05))]\nLet z be the resulting product.\n4. Compute w = (phi \u2212 0.5) / phi.\n\u2003\u2022 For z \u2265 0, define f_adapt(z) = clip[1.002 \u00d7 (z^w \u00d7 (ln(1+z))^(1\u2212w) \u00d7 softsign(z)), \u221230, 30], where softsign(z) = z/(1+|z|).\n\u2003\u2022 For z < 0, set f_adapt(z) = phi \u00d7 [softsign(z + \u0394_shift)]^(28) with \u0394_shift = 1\u00d710\u207b\u2076.\n5. Define the dynamic threshold T as the sum for k = 0 to 60 of [a^k \u00d7 (\u00bd)^k].\n6. Define the extra composite term extra as the product of the following factors:\n\u2003\u2022 exp(\u2212a/0.1)\n\u2003\u2022 [z/(1+|z|)]\n\u2003\u2022 [1 + 0.005 \u00d7 sin(1/(1+a))]\n\u2003\u2022 [1 + 0.002 \u00d7 cos(0.5\u00d7a)]\n\u2003\u2022 ([1 + 0.003 \u00d7 cos(0.3\u00d7a)]\u00b2)\n\u2003\u2022 ([1 + 0.004 \u00d7 cos(0.3\u00d7a)]\u00b2)\n\u2003\u2022 [1 + 0.0025 \u00d7 cos(0.7\u00d7a)]\n\u2003\u2022 [1 + tanh(0.05\u00d7a)]\n\u2003\u2022 [1 + sigmoid(0.01\u00d7a)]\n\u2003\u2022 [1 + 0.002 \u00d7 cos(3\u00d7a)]\n\u2003\u2022 [1 + 0.002 \u00d7 sin(2.5\u00d7a) + 0.001 \u00d7 cos(3.5\u00d7a) + 0.0015 \u00d7 sin(3\u00d7a)]\n\u2003\u2022 [1 + sigmoid(0.03\u00d7a)]\n\u2003\u2022 [1 + tanh(0.07\u00d7a)]\n\u2003\u2022 [1 + cos(3.1\u00d7a)]\n\u2003\u2022 [1 + sigmoid(0.04\u00d7a)]\n\u2003\u2022 [1 + tanh(0.08\u00d7a)]\n\u2003\u2022 [1 + cos(3.2\u00d7a)]\n\u2003\u2022 [1 + sigmoid(0.05\u00d7a)]\n\u2003\u2022 [1 + tanh(0.1\u00d7a)]\n\u2003\u2022 [1 + cos(3.4\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(added factor)\\n\u2003\u2022 [1 + sigmoid(0.05\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(added factor)\\n\u2003\u2022 [1 + tanh(0.1\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(added factor)\\n\u2003\u2022 [1 + cos(3.6\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(added factor)\\n\u2003\u2022 Multiply by softplus( softplus(0.865/(1+a)) )\\nRaise the entire product to the power [0.9478 + 0.00018\u00d7ln(1+a)].\n7. Define the final exponent modulation factor as:\n\u2003\u2003Exponent = [0.9478 + 0.00018\u00d7ln(1+a)] \u00d7 [1 + 0.005\u00d7sin(2.8\u00d7a) + 0.001\u00d7cos(3.8\u00d7a) + 0.003\u00d7sin(3.4\u00d7a) + 0.002\u00d7cos(4.4\u00d7a) + 0.001\u00d7sin(2.9\u00d7a) + 0.0005\u00d7cos(4.1\u00d7a) + 0.001\u00d7(sin(2.5\u00d7a)\u00d7cos(3.2\u00d7a)) + 0.002\u00d7cos(3.6\u00d7a)].\n8. Compute the final transformed signal f(x) = sign(z) \u00d7 { [ f_adapt(z) \u00d7 T \u00d7 extra ]^(Exponent) }.\n9. Compute latent utility U = beta + gamma \u00d7 f(x) and obtain the acceptance probability P(accept = 1) = 1/(1 + exp(\u2013U)).\n10. Retain exactly three learnable parameters with the following bounds:\n\u2003\u2003\u2022 beta \u2208 [\u201310, 10]\n\u2003\u2003\u2022 gamma \u2208 [0, 10]\n\u2003\u2003\u2022 phi \u2208 [0.5, 1.5]\nEncourage creative interleaving of nonlinear functions throughout the model.\n<SUMMARY>\nA highly nonlinear utility model for binary acceptance that aggregates 11 fixed components with a stability constant. The model applies sequential trigonometric modulations, an adaptive transformation (with a further increased exponent for negative outputs), an extended dynamic threshold (summing powers up to k = 60), and an augmented extra composite term with additional [1+sigmoid(0.06\u00d7a)], [1+tanh(0.12\u00d7a)], and [1+cos(3.6\u00d7a)] factors as well as an additional nested softplus. A final exponent modulation incorporates an extra multiplicative factor capturing nuanced oscillatory behavior. The resulting transformed signal is linearly scaled by beta and gamma, and passed through a logistic function to yield acceptance probability.\n</SUMMARY>",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: <think>\nFor run 148, we will boost nonlinearity further and allow even richer complexity while still only using the three learnable parameters (beta, gamma, phi). In the negative branch of f_adapt, increase the exponent from 26 to 28 to further emphasize extreme deviations. In the extra composite term, include three additional multiplicative factors: one for [1 + sigmoid(0.06\u00d7a)], one for [1 + tanh(0.12\u00d7a)], and one for [1 + cos(3.6\u00d7a)]. Also, nest an additional softplus function inside extra by multiplying the previous product by softplus(softplus(0.865/(1+a))). Extend the dynamic threshold T by summing from k = 0 to 60 instead of 55 to allow more flexibility in higher powers of a. Finally, amplify the final exponent modulation by including an extra multiplicative factor [1 + 0.005\u00d7sin(2.8\u00d7a) + 0.001\u00d7cos(3.8\u00d7a) + 0.003\u00d7sin(3.4\u00d7a) + 0.002\u00d7cos(4.4\u00d7a) + 0.001\u00d7sin(2.9\u00d7a) + 0.0005\u00d7cos(4.1\u00d7a) + 0.001\u00d7(sin(2.5\u00d7a)\u00d7cos(3.2\u00d7a)) + 0.002\u00d7cos(3.6\u00d7a)]. This extra factor should be multiplied with the previously specified exponent modulation. These modifications aim to capture even more subtle nonlinearities and complex behaviors, preserving the learnable parameters beta \u2208 [\u201310,10], gamma \u2208 [0,10], and phi \u2208 [0.5,1.5]. Be creative in interleaving the nonlinear functions and maintain clarity in your specification.\n</think>\nNew Instructions for Run 148:\n1. Compute the core sum a as the sum of fixed components F1 through F11 plus a small constant \u03b4.\n2. Define a_mod = 1.08 \u00d7 a \u00d7 [1 + 0.012 \u00d7 sin(a + 0.045)].\n3. Sequentially modulate a_mod by multiplying by:\n\u2003\u2022 [1 + 0.008 \u00d7 cos(a + 0.065)]\n\u2003\u2022 [1 + 0.005 \u00d7 sin(a + 0.115)]\n\u2003\u2022 [1 + 0.004 \u00d7 cos(a + 0.085)]\n\u2003\u2022 [1 + 0.006 \u00d7 (sin(a + 0.035) \u00d7 cos(a + 0.055))]\n\u2003\u2022 [1 + 0.003 \u00d7 (sin(a + 0.03) \u00d7 cos(a + 0.05))]\nLet z be the resulting product.\n4. Compute w = (phi \u2212 0.5) / phi.\n\u2003\u2022 For z \u2265 0, define f_adapt(z) = clip[1.002 \u00d7 (z^w \u00d7 (ln(1+z))^(1\u2212w) \u00d7 softsign(z)), \u221230, 30], where softsign(z) = z/(1+|z|).\n\u2003\u2022 For z < 0, set f_adapt(z) = phi \u00d7 [softsign(z + \u0394_shift)]^(28) with \u0394_shift = 1\u00d710\u207b\u2076.\n5. Define the dynamic threshold T as the sum for k = 0 to 60 of [a^k \u00d7 (\u00bd)^k].\n6. Define the extra composite term extra as the product of the following factors:\n\u2003\u2022 exp(\u2212a/0.1)\n\u2003\u2022 [z/(1+|z|)]\n\u2003\u2022 [1 + 0.005 \u00d7 sin(1/(1+a))]\n\u2003\u2022 [1 + 0.002 \u00d7 cos(0.5\u00d7a)]\n\u2003\u2022 ([1 + 0.003 \u00d7 cos(0.3\u00d7a)]\u00b2)\n\u2003\u2022 ([1 + 0.004 \u00d7 cos(0.3\u00d7a)]\u00b2)\n\u2003\u2022 [1 + 0.0025 \u00d7 cos(0.7\u00d7a)]\n\u2003\u2022 [1 + tanh(0.05\u00d7a)]\n\u2003\u2022 [1 + sigmoid(0.01\u00d7a)]\n\u2003\u2022 [1 + 0.002 \u00d7 cos(3\u00d7a)]\n\u2003\u2022 [1 + 0.002 \u00d7 sin(2.5\u00d7a) + 0.001 \u00d7 cos(3.5\u00d7a) + 0.0015 \u00d7 sin(3\u00d7a)]\n\u2003\u2022 [1 + sigmoid(0.03\u00d7a)]\n\u2003\u2022 [1 + tanh(0.07\u00d7a)]\n\u2003\u2022 [1 + cos(3.1\u00d7a)]\n\u2003\u2022 [1 + sigmoid(0.04\u00d7a)]\n\u2003\u2022 [1 + tanh(0.08\u00d7a)]\n\u2003\u2022 [1 + cos(3.2\u00d7a)]\n\u2003\u2022 [1 + sigmoid(0.05\u00d7a)]\n\u2003\u2022 [1 + tanh(0.1\u00d7a)]\n\u2003\u2022 [1 + cos(3.4\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(added factor)\\n\u2003\u2022 [1 + sigmoid(0.05\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(added factor)\\n\u2003\u2022 [1 + tanh(0.1\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(added factor)\\n\u2003\u2022 [1 + cos(3.6\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(added factor)\\n\u2003\u2022 Multiply by softplus( softplus(0.865/(1+a)) )\\nRaise the entire product to the power [0.9478 + 0.00018\u00d7ln(1+a)].\n7. Define the final exponent modulation factor as:\n\u2003\u2003Exponent = [0.9478 + 0.00018\u00d7ln(1+a)] \u00d7 [1 + 0.005\u00d7sin(2.8\u00d7a) + 0.001\u00d7cos(3.8\u00d7a) + 0.003\u00d7sin(3.4\u00d7a) + 0.002\u00d7cos(4.4\u00d7a) + 0.001\u00d7sin(2.9\u00d7a) + 0.0005\u00d7cos(4.1\u00d7a) + 0.001\u00d7(sin(2.5\u00d7a)\u00d7cos(3.2\u00d7a)) + 0.002\u00d7cos(3.6\u00d7a)].\n8. Compute the final transformed signal f(x) = sign(z) \u00d7 { [ f_adapt(z) \u00d7 T \u00d7 extra ]^(Exponent) }.\n9. Compute latent utility U = beta + gamma \u00d7 f(x) and obtain the acceptance probability P(accept = 1) = 1/(1 + exp(\u2013U)).\n10. Retain exactly three learnable parameters with the following bounds:\n\u2003\u2003\u2022 beta \u2208 [\u201310, 10]\n\u2003\u2003\u2022 gamma \u2208 [0, 10]\n\u2003\u2003\u2022 phi \u2208 [0.5, 1.5]\nEncourage creative interleaving of nonlinear functions throughout the model.\n<SUMMARY>\nA highly nonlinear utility model for binary acceptance that aggregates 11 fixed components with a stability constant. The model applies sequential trigonometric modulations, an adaptive transformation (with a further increased exponent for negative outputs), an extended dynamic threshold (summing powers up to k = 60), and an augmented extra composite term with additional [1+sigmoid(0.06\u00d7a)], [1+tanh(0.12\u00d7a)], and [1+cos(3.6\u00d7a)] factors as well as an additional nested softplus. A final exponent modulation incorporates an extra multiplicative factor capturing nuanced oscillatory behavior. The resulting transformed signal is linearly scaled by beta and gamma, and passed through a logistic function to yield acceptance probability.\n</SUMMARY>\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<MODEL>\na = F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11 + \u03b4;\na_mod = 1.08 * a * (1 + 0.012 * sin(a + 0.045));\nz = a_mod * (1 + 0.008 * cos(a + 0.065)) * (1 + 0.005 * sin(a + 0.115)) * (1 + 0.004 * cos(a + 0.085)) * (1 + 0.006 * sin(a + 0.035) * cos(a + 0.055)) * (1 + 0.003 * sin(a + 0.03) * cos(a + 0.05));\nw = (phi - 0.5) / phi;\nf_adapt = { z \u2265 0 : clip( 1.002 * ( z^w * (ln(1+z))^(1-w) * ( z/(1+|z|) ) ), -30, 30 ) ;\n             z < 0  : phi * ( (z + 1e-6)/(1+|z+1e-6|) )^28 };\nT = \u03a3[k=0 to 60] ( a^k * (1/2)^k );\nextra_product = exp(-a/0.1) * ( z/(1+|z|) ) * (1 + 0.005 * sin(1/(1+a))) * (1 + 0.002 * cos(0.5 * a)) * (1 + 0.003 * cos(0.3 * a))^2 * (1 + 0.004 * cos(0.3 * a))^2 * (1 + 0.0025 * cos(0.7 * a)) * (1 + tanh(0.05 * a)) * (1 + sigmoid(0.01 * a)) * (1 + 0.002 * cos(3 * a)) * (1 + 0.002 * sin(2.5 * a) + 0.001 * cos(3.5 * a) + 0.0015 * sin(3 * a)) * (1 + sigmoid(0.03 * a)) * (1 + tanh(0.07 * a)) * (1 + cos(3.1 * a)) * (1 + sigmoid(0.04 * a)) * (1 + tanh(0.08 * a)) * (1 + cos(3.2 * a)) * (1 + sigmoid(0.05 * a)) * (1 + tanh(0.1 * a)) * (1 + cos(3.4 * a)) * (1 + cos(3.6 * a)) * (1 + sigmoid(0.05 * a)) * (1 + tanh(0.1 * a)) * (1 + cos(3.6 * a)) * softplus( softplus(0.865/(1+a)) );\nextra = ( extra_product )^( 0.9478 + 0.00018 * ln(1+a) );\nExponent = ( 0.9478 + 0.00018 * ln(1+a) ) * ( 1 + 0.005 * sin(2.8 * a) + 0.001 * cos(3.8 * a) + 0.003 * sin(3.4 * a) + 0.002 * cos(4.4 * a) + 0.001 * sin(2.9 * a) + 0.0005 * cos(4.1 * a) + 0.001 * ( sin(2.5 * a) * cos(3.2 * a) ) + 0.002 * cos(3.6 * a) );\nf = sign(z) * ( ( f_adapt * T * extra )^(Exponent) );\nU = beta + gamma * f;\nP_accept = 1/(1 + exp(-U))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"beta\": {\n      \"description\": \"Baseline utility parameter reflecting inherent bias towards acceptance.\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Scaling parameter modulating the influence of the transformed signal f on utility.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0,\n          \"high\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Adaptive nonlinearity parameter governing transformation in f_adapt for negative z values.\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0.5,\n          \"high\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"F1\": {\n      \"description\": \"Fixed component 1 contributing to the core sum a.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F2\": {\n      \"description\": \"Fixed component 2 contributing to the core sum a.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F3\": {\n      \"description\": \"Fixed component 3 contributing to the core sum a.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F4\": {\n      \"description\": \"Fixed component 4 contributing to the core sum a.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F5\": {\n      \"description\": \"Fixed component 5 contributing to the core sum a.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F6\": {\n      \"description\": \"Fixed component 6 contributing to the core sum a.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F7\": {\n      \"description\": \"Fixed component 7 contributing to the core sum a.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F8\": {\n      \"description\": \"Fixed component 8 contributing to the core sum a.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F9\": {\n      \"description\": \"Fixed component 9 contributing to the core sum a.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F10\": {\n      \"description\": \"Fixed component 10 contributing to the core sum a.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F11\": {\n      \"description\": \"Fixed component 11 contributing to the core sum a.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"\u03b4\": {\n      \"description\": \"A small constant offset added to the core sum a.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a\": {\n      \"description\": \"Core sum computed as the sum of fixed components F1 to F11 plus \u03b4.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a_mod\": {\n      \"description\": \"Intermediate modulated value of a using a multiplicative sine adjustment.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"z\": {\n      \"description\": \"Sequentially modulated signal derived from a_mod with multiple trigonometric factors.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"w\": {\n      \"description\": \"Nonlinearity weight computed from the learnable parameter phi.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_adapt\": {\n      \"description\": \"Adaptive transformation of z with a conditional definition for z \u2265 0 and z < 0.\",\n      \"range\": {\n        \"min\": -30,\n        \"max\": 30,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"T\": {\n      \"description\": \"Dynamic threshold computed as the sum of a^k scaled by (1/2)^k for k from 0 to 60.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"extra\": {\n      \"description\": \"Composite extra term aggregating multiple nonlinear multiplicative factors and nested softplus, raised to a power.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"Exponent\": {\n      \"description\": \"Final exponent modulation factor combining a logarithmic term with additional oscillatory multipliers.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f\": {\n      \"description\": \"Final transformed signal computed from f_adapt, T, extra, and modulated by Exponent and the sign of z.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed as a linear combination of beta and the transformed signal f scaled by gamma.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"P_accept\": {\n      \"description\": \"Acceptance probability derived from the logistic transformation of the latent utility U.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"sin\": {\n      \"description\": \"Sine function.\",\n      \"learnable\": false,\n      \"source\": \"function\"\n    },\n    \"cos\": {\n      \"description\": \"Cosine function.\",\n      \"learnable\": false,\n      \"source\": \"function\"\n    },\n    \"tanh\": {\n      \"description\": \"Hyperbolic tangent function.\",\n      \"learnable\": false,\n      \"source\": \"function\"\n    },\n    \"ln\": {\n      \"description\": \"Natural logarithm function.\",\n      \"learnable\": false,\n      \"source\": \"function\"\n    },\n    \"exp\": {\n      \"description\": \"Exponential function.\",\n      \"learnable\": false,\n      \"source\": \"function\"\n    },\n    \"sigmoid\": {\n      \"description\": \"Sigmoid function defined as 1/(1+exp(-x)).\",\n      \"learnable\": false,\n      \"source\": \"function\"\n    },\n    \"softplus\": {\n      \"description\": \"Softplus function defined as ln(1+exp(x)).\",\n      \"learnable\": false,\n      \"source\": \"function\"\n    },\n    \"clip\": {\n      \"description\": \"Clipping function that limits a value between specified bounds.\",\n      \"learnable\": false,\n      \"source\": \"function\"\n    },\n    \"sign\": {\n      \"description\": \"Sign function returning -1, 0, or 1 based on the sign of the input.\",\n      \"learnable\": false,\n      \"source\": \"function\"\n    },\n    \"softsign\": {\n      \"description\": \"Softsign function defined as x/(1+|x|).\",\n      \"learnable\": false,\n      \"source\": \"function\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA highly nonlinear utility model for binary acceptance that aggregates 11 fixed components with an offset, applies sequential trigonometric modulations to construct a signal z, and uses an adaptive transformation f_adapt with a steeper exponent for negative outcomes. The dynamic threshold T and an extensively composite extra term (with additional sigmoid, tanh, cosine factors and a nested softplus) are computed and combined, then raised to an exponent modulated by further oscillatory terms. The final transformed signal f is linearly scaled by beta and gamma to yield latent utility U, which passes through a logistic function to yield the acceptance probability.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['beta', 'gamma', 'phi']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                a = F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11 + \u03b4;\na_mod = 1.08 * a * (1 + 0.012 * sin(a + 0.045));\nz = a_mod * (1 + 0.008 * cos(a + 0.065)) * (1 + 0.005 * sin(a + 0.115)) * (1 + 0.004 * cos(a + 0.085)) * (1 + 0.006 * sin(a + 0.035) * cos(a + 0.055)) * (1 + 0.003 * sin(a + 0.03) * cos(a + 0.05));\nw = (phi - 0.5) / phi;\nf_adapt = { z \u2265 0 : clip( 1.002 * ( z^w * (ln(1+z))^(1-w) * ( z/(1+|z|) ) ), -30, 30 ) ;\n             z < 0  : phi * ( (z + 1e-6)/(1+|z+1e-6|) )^28 };\nT = \u03a3[k=0 to 60] ( a^k * (1/2)^k );\nextra_product = exp(-a/0.1) * ( z/(1+|z|) ) * (1 + 0.005 * sin(1/(1+a))) * (1 + 0.002 * cos(0.5 * a)) * (1 + 0.003 * cos(0.3 * a))^2 * (1 + 0.004 * cos(0.3 * a))^2 * (1 + 0.0025 * cos(0.7 * a)) * (1 + tanh(0.05 * a)) * (1 + sigmoid(0.01 * a)) * (1 + 0.002 * cos(3 * a)) * (1 + 0.002 * sin(2.5 * a) + 0.001 * cos(3.5 * a) + 0.0015 * sin(3 * a)) * (1 + sigmoid(0.03 * a)) * (1 + tanh(0.07 * a)) * (1 + cos(3.1 * a)) * (1 + sigmoid(0.04 * a)) * (1 + tanh(0.08 * a)) * (1 + cos(3.2 * a)) * (1 + sigmoid(0.05 * a)) * (1 + tanh(0.1 * a)) * (1 + cos(3.4 * a)) * (1 + cos(3.6 * a)) * (1 + sigmoid(0.05 * a)) * (1 + tanh(0.1 * a)) * (1 + cos(3.6 * a)) * softplus( softplus(0.865/(1+a)) );\nextra = ( extra_product )^( 0.9478 + 0.00018 * ln(1+a) );\nExponent = ( 0.9478 + 0.00018 * ln(1+a) ) * ( 1 + 0.005 * sin(2.8 * a) + 0.001 * cos(3.8 * a) + 0.003 * sin(3.4 * a) + 0.002 * cos(4.4 * a) + 0.001 * sin(2.9 * a) + 0.0005 * cos(4.1 * a) + 0.001 * ( sin(2.5 * a) * cos(3.2 * a) ) + 0.002 * cos(3.6 * a) );\nf = sign(z) * ( ( f_adapt * T * extra )^(Exponent) );\nU = beta + gamma * f;\nP_accept = 1/(1 + exp(-U))\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"beta\": {\n      \"description\": \"Baseline utility parameter reflecting inherent bias towards acceptance.\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Scaling parameter modulating the influence of the transformed signal f on utility.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0,\n          \"high\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Adaptive nonlinearity parameter governing transformation in f_adapt for negative z values.\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0.5,\n          \"high\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"F1\": {\n      \"description\": \"Fixed component 1 contributing to the core sum a.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F2\": {\n      \"description\": \"Fixed component 2 contributing to the core sum a.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F3\": {\n      \"description\": \"Fixed component 3 contributing to the core sum a.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F4\": {\n      \"description\": \"Fixed component 4 contributing to the core sum a.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F5\": {\n      \"description\": \"Fixed component 5 contributing to the core sum a.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F6\": {\n      \"description\": \"Fixed component 6 contributing to the core sum a.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F7\": {\n      \"description\": \"Fixed component 7 contributing to the core sum a.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F8\": {\n      \"description\": \"Fixed component 8 contributing to the core sum a.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F9\": {\n      \"description\": \"Fixed component 9 contributing to the core sum a.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F10\": {\n      \"description\": \"Fixed component 10 contributing to the core sum a.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F11\": {\n      \"description\": \"Fixed component 11 contributing to the core sum a.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"\\u03b4\": {\n      \"description\": \"A small constant offset added to the core sum a.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a\": {\n      \"description\": \"Core sum computed as the sum of fixed components F1 to F11 plus \\u03b4.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a_mod\": {\n      \"description\": \"Intermediate modulated value of a using a multiplicative sine adjustment.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"z\": {\n      \"description\": \"Sequentially modulated signal derived from a_mod with multiple trigonometric factors.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"w\": {\n      \"description\": \"Nonlinearity weight computed from the learnable parameter phi.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_adapt\": {\n      \"description\": \"Adaptive transformation of z with a conditional definition for z \\u2265 0 and z < 0.\",\n      \"range\": {\n        \"min\": -30,\n        \"max\": 30,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"T\": {\n      \"description\": \"Dynamic threshold computed as the sum of a^k scaled by (1/2)^k for k from 0 to 60.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"extra\": {\n      \"description\": \"Composite extra term aggregating multiple nonlinear multiplicative factors and nested softplus, raised to a power.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"Exponent\": {\n      \"description\": \"Final exponent modulation factor combining a logarithmic term with additional oscillatory multipliers.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f\": {\n      \"description\": \"Final transformed signal computed from f_adapt, T, extra, and modulated by Exponent and the sign of z.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed as a linear combination of beta and the transformed signal f scaled by gamma.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"P_accept\": {\n      \"description\": \"Acceptance probability derived from the logistic transformation of the latent utility U.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"sin\": {\n      \"description\": \"Sine function.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"function\"\n    },\n    \"cos\": {\n      \"description\": \"Cosine function.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"function\"\n    },\n    \"tanh\": {\n      \"description\": \"Hyperbolic tangent function.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"function\"\n    },\n    \"ln\": {\n      \"description\": \"Natural logarithm function.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"function\"\n    },\n    \"exp\": {\n      \"description\": \"Exponential function.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"function\"\n    },\n    \"sigmoid\": {\n      \"description\": \"Sigmoid function defined as 1/(1+exp(-x)).\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"function\"\n    },\n    \"softplus\": {\n      \"description\": \"Softplus function defined as ln(1+exp(x)).\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"function\"\n    },\n    \"clip\": {\n      \"description\": \"Clipping function that limits a value between specified bounds.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"function\"\n    },\n    \"sign\": {\n      \"description\": \"Sign function returning -1, 0, or 1 based on the sign of the input.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"function\"\n    },\n    \"softsign\": {\n      \"description\": \"Softsign function defined as x/(1+|x|).\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"function\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, beta=0, gamma=1, phi=1):\n    model_predictions = []\n    for trial in trial_data:\n        F1 = trial.get(\"F1\", 0)\n        F2 = trial.get(\"F2\", 0)\n        F3 = trial.get(\"F3\", 0)\n        F4 = trial.get(\"F4\", 0)\n        F5 = trial.get(\"F5\", 0)\n        F6 = trial.get(\"F6\", 0)\n        F7 = trial.get(\"F7\", 0)\n        F8 = trial.get(\"F8\", 0)\n        F9 = trial.get(\"F9\", 0)\n        F10 = trial.get(\"F10\", 0)\n        F11 = trial.get(\"F11\", 0)\n        delta = 0.01  # Assuming a small offset, e.g., 0.01\n        a = F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11 + delta\n        a_mod = 1.08 * a * (1 + 0.012 * math.sin(a + 0.045))\n        z = a_mod * (1 + 0.008 * math.cos(a + 0.065)) * (1 + 0.005 * math.sin(a + 0.115)) * (1 + 0.004 * math.cos(a + 0.085)) * (1 + 0.006 * math.sin(a + 0.035) * math.cos(a + 0.055)) * (1 + 0.003 * math.sin(a + 0.03) * math.cos(a + 0.05))\n        w = (phi - 0.5) / phi\n\n        if z >= 0:\n            f_adapt = min(max(1.002 * (z**w * (math.log(1+z))**(1-w) * (z/(1+abs(z)))), -30), 30)\n        else:\n            f_adapt = phi * (((z + 1e-6)/(1+abs(z+1e-6)))**28)\n\n        T = sum(a**k * (1/2)**k for k in range(61))\n\n        def sigmoid(x):\n            return 1 / (1 + math.exp(-x))\n\n        def softplus(x):\n            return math.log(1 + math.exp(x))\n\n        def tanh(x):\n            return (math.exp(x) - math.exp(-x)) / (math.exp(x) + math.exp(-x))\n\n        extra_product = math.exp(-a/0.1) * ( z/(1+abs(z)) ) * (1 + 0.005 * math.sin(1/(1+a))) * (1 + 0.002 * math.cos(0.5 * a)) * (1 + 0.003 * math.cos(0.3 * a))**2 * (1 + 0.004 * math.cos(0.3 * a))**2 * (1 + 0.0025 * math.cos(0.7 * a)) * (1 + tanh(0.05 * a)) * (1 + sigmoid(0.01 * a)) * (1 + 0.002 * math.cos(3 * a)) * (1 + 0.002 * math.sin(2.5 * a) + 0.001 * math.cos(3.5 * a) + 0.0015 * math.sin(3 * a)) * (1 + sigmoid(0.03 * a)) * (1 + tanh(0.07 * a)) * (1 + math.cos(3.1 * a)) * (1 + sigmoid(0.04 * a)) * (1 + tanh(0.08 * a)) * (1 + math.cos(3.2 * a)) * (1 + sigmoid(0.05 * a)) * (1 + tanh(0.1 * a)) * (1 + math.cos(3.4 * a)) * (1 + math.cos(3.6 * a)) * (1 + sigmoid(0.05 * a)) * (1 + tanh(0.1 * a)) * (1 + math.cos(3.6 * a)) * softplus( softplus(0.865/(1+a)) )\n        extra = ( extra_product )**( 0.9478 + 0.00018 * math.log(1+a) )\n\n        Exponent = ( 0.9478 + 0.00018 * math.log(1+a) ) * ( 1 + 0.005 * math.sin(2.8 * a) + 0.001 * math.cos(3.8 * a) + 0.003 * math.sin(3.4 * a) + 0.002 * math.cos(4.4 * a) + 0.001 * math.sin(2.9 * a) + 0.0005 * math.cos(4.1 * a) + 0.001 * ( math.sin(2.5 * a) * math.cos(3.2 * a) ) + 0.002 * math.cos(3.6 * a) )\n\n        f = (1 if z >=0 else -1) * ( ( f_adapt * T * extra )**(Exponent) )\n\n        U = beta + gamma * f\n        P_accept = 1/(1 + math.exp(-U))\n\n        model_predictions.append(P_accept)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '[{\"ID\": 0, \"group\": \"treatment\", \"trial_number\": 1, \"trial_type\": 0, \"trial_role\": 1, \"token_opp\": 10, \"token_self\": 0, \"combined_earning\": 10, \"split_opp\": 7.0, \"split_self\": 3.0, \"splitperc_opp\": 70, \"splitperc_self\": 30, \"accept\": 0.0, \"accepted_amount\": 0.0, \"accepted_perc\": 0.0, \"proposed_perc\": 30.0, \"proposed_amount\": 3.0, \"F1\": 1, \"F2\": 1, \"F3\": 1, \"F4\": 1, \"F5\": 1, \"F6\": 1, \"F7\": 1, \"F8\": 1, \"F9\": 1, \"F10\": 1, \"F11\": 1}, {\"ID\": 1, \"group\": \"treatment\", \"trial_number\": 2, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 10, \"token_self\": 0, \"combined_earning\": 10, \"split_opp\": 7.0, \"split_self\": 3.0, \"splitperc_opp\": 70, \"splitperc_self\": 30, \"accept\": 0.0, \"accepted_amount\": 0.0, \"accepted_perc\": 0.0, \"proposed_perc\": 30.0, \"proposed_amount\": 3.0, \"F1\": 1, \"F2\": 1, \"F3\": 1, \"F4\": 1, \"F5\": 1, \"F6\": 1, \"F7\": 1, \"F8\": 1, \"F9\": 1, \"F10\": 1, \"F11\": 1}]'\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))\n```",
      "timestamp": 1743548559.6751769
    }
  ],
  "learnable_parameters": {
    "beta": {
      "description": "Baseline utility parameter reflecting inherent bias towards acceptance.",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -10,
          "high": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Scaling parameter modulating the influence of the transformed signal f on utility.",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0,
          "high": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "phi": {
      "description": "Adaptive nonlinearity parameter governing transformation in f_adapt for negative z values.",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0.5,
          "high": 1.5
        }
      },
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "a = F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11 + \u03b4;\na_mod = 1.08 * a * (1 + 0.012 * sin(a + 0.045));\nz = a_mod * (1 + 0.008 * cos(a + 0.065)) * (1 + 0.005 * sin(a + 0.115)) * (1 + 0.004 * cos(a + 0.085)) * (1 + 0.006 * sin(a + 0.035) * cos(a + 0.055)) * (1 + 0.003 * sin(a + 0.03) * cos(a + 0.05));\nw = (phi - 0.5) / phi;\nf_adapt = { z \u2265 0 : clip( 1.002 * ( z^w * (ln(1+z))^(1-w) * ( z/(1+|z|) ) ), -30, 30 ) ;\n             z < 0  : phi * ( (z + 1e-6)/(1+|z+1e-6|) )^28 };\nT = \u03a3[k=0 to 60] ( a^k * (1/2)^k );\nextra_product = exp(-a/0.1) * ( z/(1+|z|) ) * (1 + 0.005 * sin(1/(1+a))) * (1 + 0.002 * cos(0.5 * a)) * (1 + 0.003 * cos(0.3 * a))^2 * (1 + 0.004 * cos(0.3 * a))^2 * (1 + 0.0025 * cos(0.7 * a)) * (1 + tanh(0.05 * a)) * (1 + sigmoid(0.01 * a)) * (1 + 0.002 * cos(3 * a)) * (1 + 0.002 * sin(2.5 * a) + 0.001 * cos(3.5 * a) + 0.0015 * sin(3 * a)) * (1 + sigmoid(0.03 * a)) * (1 + tanh(0.07 * a)) * (1 + cos(3.1 * a)) * (1 + sigmoid(0.04 * a)) * (1 + tanh(0.08 * a)) * (1 + cos(3.2 * a)) * (1 + sigmoid(0.05 * a)) * (1 + tanh(0.1 * a)) * (1 + cos(3.4 * a)) * (1 + cos(3.6 * a)) * (1 + sigmoid(0.05 * a)) * (1 + tanh(0.1 * a)) * (1 + cos(3.6 * a)) * softplus( softplus(0.865/(1+a)) );\nextra = ( extra_product )^( 0.9478 + 0.00018 * ln(1+a) );\nExponent = ( 0.9478 + 0.00018 * ln(1+a) ) * ( 1 + 0.005 * sin(2.8 * a) + 0.001 * cos(3.8 * a) + 0.003 * sin(3.4 * a) + 0.002 * cos(4.4 * a) + 0.001 * sin(2.9 * a) + 0.0005 * cos(4.1 * a) + 0.001 * ( sin(2.5 * a) * cos(3.2 * a) ) + 0.002 * cos(3.6 * a) );\nf = sign(z) * ( ( f_adapt * T * extra )^(Exponent) );\nU = beta + gamma * f;\nP_accept = 1/(1 + exp(-U))",
  "variable_descriptions": {
    "beta": {
      "description": "Baseline utility parameter reflecting inherent bias towards acceptance.",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -10,
          "high": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Scaling parameter modulating the influence of the transformed signal f on utility.",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0,
          "high": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "phi": {
      "description": "Adaptive nonlinearity parameter governing transformation in f_adapt for negative z values.",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0.5,
          "high": 1.5
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "F1": {
      "description": "Fixed component 1 contributing to the core sum a.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "F2": {
      "description": "Fixed component 2 contributing to the core sum a.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "F3": {
      "description": "Fixed component 3 contributing to the core sum a.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "F4": {
      "description": "Fixed component 4 contributing to the core sum a.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "F5": {
      "description": "Fixed component 5 contributing to the core sum a.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "F6": {
      "description": "Fixed component 6 contributing to the core sum a.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "F7": {
      "description": "Fixed component 7 contributing to the core sum a.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "F8": {
      "description": "Fixed component 8 contributing to the core sum a.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "F9": {
      "description": "Fixed component 9 contributing to the core sum a.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "F10": {
      "description": "Fixed component 10 contributing to the core sum a.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "F11": {
      "description": "Fixed component 11 contributing to the core sum a.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "\u03b4": {
      "description": "A small constant offset added to the core sum a.",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "a": {
      "description": "Core sum computed as the sum of fixed components F1 to F11 plus \u03b4.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "a_mod": {
      "description": "Intermediate modulated value of a using a multiplicative sine adjustment.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "z": {
      "description": "Sequentially modulated signal derived from a_mod with multiple trigonometric factors.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "w": {
      "description": "Nonlinearity weight computed from the learnable parameter phi.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "f_adapt": {
      "description": "Adaptive transformation of z with a conditional definition for z \u2265 0 and z < 0.",
      "range": {
        "min": -30,
        "max": 30,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "T": {
      "description": "Dynamic threshold computed as the sum of a^k scaled by (1/2)^k for k from 0 to 60.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "extra": {
      "description": "Composite extra term aggregating multiple nonlinear multiplicative factors and nested softplus, raised to a power.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "Exponent": {
      "description": "Final exponent modulation factor combining a logarithmic term with additional oscillatory multipliers.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "f": {
      "description": "Final transformed signal computed from f_adapt, T, extra, and modulated by Exponent and the sign of z.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "U": {
      "description": "Latent utility computed as a linear combination of beta and the transformed signal f scaled by gamma.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "P_accept": {
      "description": "Acceptance probability derived from the logistic transformation of the latent utility U.",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "sin": {
      "description": "Sine function.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "function"
    },
    "cos": {
      "description": "Cosine function.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "function"
    },
    "tanh": {
      "description": "Hyperbolic tangent function.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "function"
    },
    "ln": {
      "description": "Natural logarithm function.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "function"
    },
    "exp": {
      "description": "Exponential function.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "function"
    },
    "sigmoid": {
      "description": "Sigmoid function defined as 1/(1+exp(-x)).",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "function"
    },
    "softplus": {
      "description": "Softplus function defined as ln(1+exp(x)).",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "function"
    },
    "clip": {
      "description": "Clipping function that limits a value between specified bounds.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "function"
    },
    "sign": {
      "description": "Sign function returning -1, 0, or 1 based on the sign of the input.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "function"
    },
    "softsign": {
      "description": "Softsign function defined as x/(1+|x|).",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "function"
    }
  },
  "model_summary": "A highly nonlinear utility model for binary acceptance that aggregates 11 fixed components with an offset, applies sequential trigonometric modulations to construct a signal z, and uses an adaptive transformation f_adapt with a steeper exponent for negative outcomes. The dynamic threshold T and an extensively composite extra term (with additional sigmoid, tanh, cosine factors and a nested softplus) are computed and combined, then raised to an exponent modulated by further oscillatory terms. The final transformed signal f is linearly scaled by beta and gamma to yield latent utility U, which passes through a logistic function to yield the acceptance probability.",
  "target_variable": "accept",
  "full_reasoning": "<MODEL>\na = F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11 + \u03b4;\na_mod = 1.08 * a * (1 + 0.012 * sin(a + 0.045));\nz = a_mod * (1 + 0.008 * cos(a + 0.065)) * (1 + 0.005 * sin(a + 0.115)) * (1 + 0.004 * cos(a + 0.085)) * (1 + 0.006 * sin(a + 0.035) * cos(a + 0.055)) * (1 + 0.003 * sin(a + 0.03) * cos(a + 0.05));\nw = (phi - 0.5) / phi;\nf_adapt = { z \u2265 0 : clip( 1.002 * ( z^w * (ln(1+z))^(1-w) * ( z/(1+|z|) ) ), -30, 30 ) ;\n             z < 0  : phi * ( (z + 1e-6)/(1+|z+1e-6|) )^28 };\nT = \u03a3[k=0 to 60] ( a^k * (1/2)^k );\nextra_product = exp(-a/0.1) * ( z/(1+|z|) ) * (1 + 0.005 * sin(1/(1+a))) * (1 + 0.002 * cos(0.5 * a)) * (1 + 0.003 * cos(0.3 * a))^2 * (1 + 0.004 * cos(0.3 * a))^2 * (1 + 0.0025 * cos(0.7 * a)) * (1 + tanh(0.05 * a)) * (1 + sigmoid(0.01 * a)) * (1 + 0.002 * cos(3 * a)) * (1 + 0.002 * sin(2.5 * a) + 0.001 * cos(3.5 * a) + 0.0015 * sin(3 * a)) * (1 + sigmoid(0.03 * a)) * (1 + tanh(0.07 * a)) * (1 + cos(3.1 * a)) * (1 + sigmoid(0.04 * a)) * (1 + tanh(0.08 * a)) * (1 + cos(3.2 * a)) * (1 + sigmoid(0.05 * a)) * (1 + tanh(0.1 * a)) * (1 + cos(3.4 * a)) * (1 + cos(3.6 * a)) * (1 + sigmoid(0.05 * a)) * (1 + tanh(0.1 * a)) * (1 + cos(3.6 * a)) * softplus( softplus(0.865/(1+a)) );\nextra = ( extra_product )^( 0.9478 + 0.00018 * ln(1+a) );\nExponent = ( 0.9478 + 0.00018 * ln(1+a) ) * ( 1 + 0.005 * sin(2.8 * a) + 0.001 * cos(3.8 * a) + 0.003 * sin(3.4 * a) + 0.002 * cos(4.4 * a) + 0.001 * sin(2.9 * a) + 0.0005 * cos(4.1 * a) + 0.001 * ( sin(2.5 * a) * cos(3.2 * a) ) + 0.002 * cos(3.6 * a) );\nf = sign(z) * ( ( f_adapt * T * extra )^(Exponent) );\nU = beta + gamma * f;\nP_accept = 1/(1 + exp(-U))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"beta\": {\n      \"description\": \"Baseline utility parameter reflecting inherent bias towards acceptance.\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Scaling parameter modulating the influence of the transformed signal f on utility.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0,\n          \"high\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Adaptive nonlinearity parameter governing transformation in f_adapt for negative z values.\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0.5,\n          \"high\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"F1\": {\n      \"description\": \"Fixed component 1 contributing to the core sum a.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F2\": {\n      \"description\": \"Fixed component 2 contributing to the core sum a.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F3\": {\n      \"description\": \"Fixed component 3 contributing to the core sum a.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F4\": {\n      \"description\": \"Fixed component 4 contributing to the core sum a.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F5\": {\n      \"description\": \"Fixed component 5 contributing to the core sum a.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F6\": {\n      \"description\": \"Fixed component 6 contributing to the core sum a.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F7\": {\n      \"description\": \"Fixed component 7 contributing to the core sum a.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F8\": {\n      \"description\": \"Fixed component 8 contributing to the core sum a.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F9\": {\n      \"description\": \"Fixed component 9 contributing to the core sum a.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F10\": {\n      \"description\": \"Fixed component 10 contributing to the core sum a.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F11\": {\n      \"description\": \"Fixed component 11 contributing to the core sum a.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"\u03b4\": {\n      \"description\": \"A small constant offset added to the core sum a.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a\": {\n      \"description\": \"Core sum computed as the sum of fixed components F1 to F11 plus \u03b4.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a_mod\": {\n      \"description\": \"Intermediate modulated value of a using a multiplicative sine adjustment.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"z\": {\n      \"description\": \"Sequentially modulated signal derived from a_mod with multiple trigonometric factors.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"w\": {\n      \"description\": \"Nonlinearity weight computed from the learnable parameter phi.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_adapt\": {\n      \"description\": \"Adaptive transformation of z with a conditional definition for z \u2265 0 and z < 0.\",\n      \"range\": {\n        \"min\": -30,\n        \"max\": 30,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"T\": {\n      \"description\": \"Dynamic threshold computed as the sum of a^k scaled by (1/2)^k for k from 0 to 60.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"extra\": {\n      \"description\": \"Composite extra term aggregating multiple nonlinear multiplicative factors and nested softplus, raised to a power.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"Exponent\": {\n      \"description\": \"Final exponent modulation factor combining a logarithmic term with additional oscillatory multipliers.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f\": {\n      \"description\": \"Final transformed signal computed from f_adapt, T, extra, and modulated by Exponent and the sign of z.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed as a linear combination of beta and the transformed signal f scaled by gamma.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"P_accept\": {\n      \"description\": \"Acceptance probability derived from the logistic transformation of the latent utility U.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"sin\": {\n      \"description\": \"Sine function.\",\n      \"learnable\": false,\n      \"source\": \"function\"\n    },\n    \"cos\": {\n      \"description\": \"Cosine function.\",\n      \"learnable\": false,\n      \"source\": \"function\"\n    },\n    \"tanh\": {\n      \"description\": \"Hyperbolic tangent function.\",\n      \"learnable\": false,\n      \"source\": \"function\"\n    },\n    \"ln\": {\n      \"description\": \"Natural logarithm function.\",\n      \"learnable\": false,\n      \"source\": \"function\"\n    },\n    \"exp\": {\n      \"description\": \"Exponential function.\",\n      \"learnable\": false,\n      \"source\": \"function\"\n    },\n    \"sigmoid\": {\n      \"description\": \"Sigmoid function defined as 1/(1+exp(-x)).\",\n      \"learnable\": false,\n      \"source\": \"function\"\n    },\n    \"softplus\": {\n      \"description\": \"Softplus function defined as ln(1+exp(x)).\",\n      \"learnable\": false,\n      \"source\": \"function\"\n    },\n    \"clip\": {\n      \"description\": \"Clipping function that limits a value between specified bounds.\",\n      \"learnable\": false,\n      \"source\": \"function\"\n    },\n    \"sign\": {\n      \"description\": \"Sign function returning -1, 0, or 1 based on the sign of the input.\",\n      \"learnable\": false,\n      \"source\": \"function\"\n    },\n    \"softsign\": {\n      \"description\": \"Softsign function defined as x/(1+|x|).\",\n      \"learnable\": false,\n      \"source\": \"function\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA highly nonlinear utility model for binary acceptance that aggregates 11 fixed components with an offset, applies sequential trigonometric modulations to construct a signal z, and uses an adaptive transformation f_adapt with a steeper exponent for negative outcomes. The dynamic threshold T and an extensively composite extra term (with additional sigmoid, tanh, cosine factors and a nested softplus) are computed and combined, then raised to an exponent modulated by further oscillatory terms. The final transformed signal f is linearly scaled by beta and gamma to yield latent utility U, which passes through a logistic function to yield the acceptance probability.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: a = F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11 + \u03b4;\na_mod = 1.08 * a * (1 + 0.012 * sin(a + 0.045));\nz = a_mod * (1 + 0.008 * cos(a + 0.065)) * (1 + 0.005 * sin(a + 0.115)) * (1 + 0.004 * cos(a + 0.085)) * (1 + 0.006 * sin(a + 0.035) * cos(a + 0.055)) * (1 + 0.003 * sin(a + 0.03) * cos(a + 0.05));\nw = (phi - 0.5) / phi;\nf_adapt = { z \u2265 0 : clip( 1.002 * ( z^w * (ln(1+z))^(1-w) * ( z/(1+|z|) ) ), -30, 30 ) ;\n             z < 0  : phi * ( (z + 1e-6)/(1+|z+1e-6|) )^28 };\nT = \u03a3[k=0 to 60] ( a^k * (1/2)^k );\nextra_product = exp(-a/0.1) * ( z/(1+|z|) ) * (1 + 0.005 * sin(1/(1+a))) * (1 + 0.002 * cos(0.5 * a)) * (1 + 0.003 * cos(0.3 * a))^2 * (1 + 0.004 * cos(0.3 * a))^2 * (1 + 0.0025 * cos(0.7 * a)) * (1 + tanh(0.05 * a)) * (1 + sigmoid(0.01 * a)) * (1 + 0.002 * cos(3 * a)) * (1 + 0.002 * sin(2.5 * a) + 0.001 * cos(3.5 * a) + 0.0015 * sin(3 * a)) * (1 + sigmoid(0.03 * a)) * (1 + tanh(0.07 * a)) * (1 + cos(3.1 * a)) * (1 + sigmoid(0.04 * a)) * (1 + tanh(0.08 * a)) * (1 + cos(3.2 * a)) * (1 + sigmoid(0.05 * a)) * (1 + tanh(0.1 * a)) * (1 + cos(3.4 * a)) * (1 + cos(3.6 * a)) * (1 + sigmoid(0.05 * a)) * (1 + tanh(0.1 * a)) * (1 + cos(3.6 * a)) * softplus( softplus(0.865/(1+a)) );\nextra = ( extra_product )^( 0.9478 + 0.00018 * ln(1+a) );\nExponent = ( 0.9478 + 0.00018 * ln(1+a) ) * ( 1 + 0.005 * sin(2.8 * a) + 0.001 * cos(3.8 * a) + 0.003 * sin(3.4 * a) + 0.002 * cos(4.4 * a) + 0.001 * sin(2.9 * a) + 0.0005 * cos(4.1 * a) + 0.001 * ( sin(2.5 * a) * cos(3.2 * a) ) + 0.002 * cos(3.6 * a) );\nf = sign(z) * ( ( f_adapt * T * extra )^(Exponent) );\nU = beta + gamma * f;\nP_accept = 1/(1 + exp(-U))\nSummary: A highly nonlinear utility model for binary acceptance that aggregates 11 fixed components with an offset, applies sequential trigonometric modulations to construct a signal z, and uses an adaptive transformation f_adapt with a steeper exponent for negative outcomes. The dynamic threshold T and an extensively composite extra term (with additional sigmoid, tanh, cosine factors and a nested softplus) are computed and combined, then raised to an exponent modulated by further oscillatory terms. The final transformed signal f is linearly scaled by beta and gamma to yield latent utility U, which passes through a logistic function to yield the acceptance probability.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, beta=0, gamma=1, phi=1):\n    model_predictions = []\n    for trial in trial_data:\n        F1 = trial.get(\"F1\", 0)\n        F2 = trial.get(\"F2\", 0)\n        F3 = trial.get(\"F3\", 0)\n        F4 = trial.get(\"F4\", 0)\n        F5 = trial.get(\"F5\", 0)\n        F6 = trial.get(\"F6\", 0)\n        F7 = trial.get(\"F7\", 0)\n        F8 = trial.get(\"F8\", 0)\n        F9 = trial.get(\"F9\", 0)\n        F10 = trial.get(\"F10\", 0)\n        F11 = trial.get(\"F11\", 0)\n        delta = 0.01  # Assuming a small offset, e.g., 0.01\n        a = F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11 + delta\n        a_mod = 1.08 * a * (1 + 0.012 * math.sin(a + 0.045))\n        z = a_mod * (1 + 0.008 * math.cos(a + 0.065)) * (1 + 0.005 * math.sin(a + 0.115)) * (1 + 0.004 * math.cos(a + 0.085)) * (1 + 0.006 * math.sin(a + 0.035) * math.cos(a + 0.055)) * (1 + 0.003 * math.sin(a + 0.03) * math.cos(a + 0.05))\n        w = (phi - 0.5) / phi\n\n        if z >= 0:\n            f_adapt = min(max(1.002 * (z**w * (math.log(1+z))**(1-w) * (z/(1+abs(z)))), -30), 30)\n        else:\n            f_adapt = phi * (((z + 1e-6)/(1+abs(z+1e-6)))**28)\n\n        T = sum(a**k * (1/2)**k for k in range(61))\n\n        def sigmoid(x):\n            return 1 / (1 + math.exp(-x))\n\n        def softplus(x):\n            return math.log(1 + math.exp(x))\n\n        def tanh(x):\n            return (math.exp(x) - math.exp(-x)) / (math.exp(x) + math.exp(-x))\n\n        extra_product = math.exp(-a/0.1) * ( z/(1+abs(z)) ) * (1 + 0.005 * math.sin(1/(1+a))) * (1 + 0.002 * math.cos(0.5 * a)) * (1 + 0.003 * math.cos(0.3 * a))**2 * (1 + 0.004 * math.cos(0.3 * a))**2 * (1 + 0.0025 * math.cos(0.7 * a)) * (1 + tanh(0.05 * a)) * (1 + sigmoid(0.01 * a)) * (1 + 0.002 * math.cos(3 * a)) * (1 + 0.002 * math.sin(2.5 * a) + 0.001 * math.cos(3.5 * a) + 0.0015 * math.sin(3 * a)) * (1 + sigmoid(0.03 * a)) * (1 + tanh(0.07 * a)) * (1 + math.cos(3.1 * a)) * (1 + sigmoid(0.04 * a)) * (1 + tanh(0.08 * a)) * (1 + math.cos(3.2 * a)) * (1 + sigmoid(0.05 * a)) * (1 + tanh(0.1 * a)) * (1 + math.cos(3.4 * a)) * (1 + math.cos(3.6 * a)) * (1 + sigmoid(0.05 * a)) * (1 + tanh(0.1 * a)) * (1 + math.cos(3.6 * a)) * softplus( softplus(0.865/(1+a)) )\n        extra = ( extra_product )**( 0.9478 + 0.00018 * math.log(1+a) )\n\n        Exponent = ( 0.9478 + 0.00018 * math.log(1+a) ) * ( 1 + 0.005 * math.sin(2.8 * a) + 0.001 * math.cos(3.8 * a) + 0.003 * math.sin(3.4 * a) + 0.002 * math.cos(4.4 * a) + 0.001 * math.sin(2.9 * a) + 0.0005 * math.cos(4.1 * a) + 0.001 * ( math.sin(2.5 * a) * math.cos(3.2 * a) ) + 0.002 * math.cos(3.6 * a) )\n\n        f = (1 if z >=0 else -1) * ( ( f_adapt * T * extra )**(Exponent) )\n\n        U = beta + gamma * f\n        P_accept = 1/(1 + math.exp(-U))\n\n        model_predictions.append(P_accept)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.5671550671550671,
  "fitting_results": [
    {
      "beta": -10.0,
      "gamma": 1.1326763364252608,
      "phi": 0.7629148735176189,
      "success": true,
      "log_likelihood": -24.95397991618758,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -7.53656873636437,
      "gamma": 2.5251594028583395,
      "phi": 1.4465166789797117,
      "success": true,
      "log_likelihood": -24.953299774810546,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.081161393386867,
      "gamma": 5.179878967470464,
      "phi": 1.3531838733989872,
      "success": true,
      "log_likelihood": -24.897714324725968,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 7.939782608030242,
      "phi": 1.446881762530216,
      "success": true,
      "log_likelihood": -24.953435323314267,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 4.142790475845694,
      "phi": 1.0987842919884538,
      "success": true,
      "log_likelihood": -24.953389515888617,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.28164812402685885,
      "gamma": 4.304427518129703,
      "phi": 0.6479533167735749,
      "success": true,
      "log_likelihood": -23.54597316474371,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 9.999999999999998,
      "gamma": 3.5415396438969555,
      "phi": 0.8421947218975375,
      "success": true,
      "log_likelihood": -11.277859391224164,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.8111448378086179,
      "gamma": 6.4449843041445645,
      "phi": 1.4943957651529258,
      "success": true,
      "log_likelihood": -22.914510051413856,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 2.632776326748942,
      "phi": 1.0550651024105133,
      "success": true,
      "log_likelihood": -11.277859621323838,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 2.3511700307184698,
      "phi": 0.8148817920641842,
      "success": true,
      "log_likelihood": -24.953480340702285,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.8594669969427535,
      "phi": 1.276916909739366,
      "success": true,
      "log_likelihood": -24.953389343151372,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 5.257956874848138,
      "phi": 1.3684654891496537,
      "success": true,
      "log_likelihood": -24.95393600963461,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 1.8153546579623592,
      "phi": 0.928980358221836,
      "success": true,
      "log_likelihood": -24.953434838907192,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 2.529248177110536,
      "phi": 1.3744205726288155,
      "success": true,
      "log_likelihood": -11.277859647241206,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 9.414310068610623,
      "phi": 0.5585198560635218,
      "success": true,
      "log_likelihood": -11.277857908186993,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 2.6414011389243037,
      "phi": 1.127947026956621,
      "success": true,
      "log_likelihood": -11.277859619027483,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 9.699859006225841,
      "phi": 0.6431920045886548,
      "success": true,
      "log_likelihood": -11.27785783463923,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 1.801641837946806,
      "phi": 0.6915065275689429,
      "success": true,
      "log_likelihood": -16.27763307859896,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 9.650178260470271,
      "phi": 0.9212776406726118,
      "success": true,
      "log_likelihood": -15.277677262324348,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 2.7375233946390933,
      "phi": 1.1473159901952417,
      "success": true,
      "log_likelihood": -11.277859594593604,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.250273339231899,
      "gamma": 4.888255233412827,
      "phi": 1.2558578506584916,
      "success": true,
      "log_likelihood": -24.730616750305852,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 2.959059589042239,
      "phi": 0.9781950134933786,
      "success": true,
      "log_likelihood": -16.277632936260353,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 1.89972897468757,
      "phi": 1.2127959316935824,
      "success": true,
      "log_likelihood": -24.953525741262236,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.0804801081169355,
      "gamma": 4.554216878426703,
      "phi": 1.0689456195479985,
      "success": true,
      "log_likelihood": -24.897714332480703,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -6.06565458626907,
      "gamma": 6.650458601692971,
      "phi": 0.6832684044349888,
      "success": true,
      "log_likelihood": -24.953322813173713,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.6837619936911391,
      "gamma": 8.133720271594317,
      "phi": 1.2782126892032544,
      "success": true,
      "log_likelihood": -24.450957568494974,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.2486208468035462,
      "gamma": 1.9586661986680693,
      "phi": 0.8444159537583494,
      "success": true,
      "log_likelihood": -24.73061675061344,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 2.4168126979203293,
      "phi": 1.0322453235901414,
      "success": true,
      "log_likelihood": -24.953662193288825,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 9.091535813824107,
      "phi": 1.429677590018762,
      "success": true,
      "log_likelihood": -15.277677343853652,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 8.498439534235173,
      "phi": 0.873327309005628,
      "success": true,
      "log_likelihood": -19.277496731092985,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 7.300306423337826,
      "phi": 1.4903237996648184,
      "success": true,
      "log_likelihood": -11.277858436587461,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 5.707991785308186,
      "phi": 0.7190836552315688,
      "success": true,
      "log_likelihood": -24.95398171995567,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 1.9748280506326072,
      "phi": 1.2992269368814824,
      "success": true,
      "log_likelihood": -24.95343485160664,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -8.322788496240792,
      "gamma": 7.9052229964713865,
      "phi": 0.640847758149554,
      "success": true,
      "log_likelihood": -24.95427463953953,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 9.073389469038869,
      "phi": 1.2048498105462264,
      "success": true,
      "log_likelihood": -11.277857988503204,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.28260981496156506,
      "gamma": 2.522682727740651,
      "phi": 1.3242777287570715,
      "success": true,
      "log_likelihood": -23.545973163854775,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.5218215407403692,
      "gamma": 3.107135006458833,
      "phi": 0.7469997955132344,
      "success": true,
      "log_likelihood": -22.15793818564365,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 3.517626071932917,
      "phi": 1.0380689931724703,
      "success": true,
      "log_likelihood": -24.9532985022702,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.8097307741732427,
      "gamma": 8.899441796104146,
      "phi": 0.6023027268398495,
      "success": true,
      "log_likelihood": -22.914510051417004,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 6.40497491565818,
      "phi": 1.2571070887628957,
      "success": true,
      "log_likelihood": -14.277722973597195,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.19544799608368132,
      "gamma": 4.833194787274287,
      "phi": 1.0129582753045492,
      "success": true,
      "log_likelihood": -24.056945188723606,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 4.353739545660973,
      "phi": 1.0284356605163418,
      "success": true,
      "log_likelihood": -24.95375362569249,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 7.655010221650909,
      "phi": 0.8374227795726336,
      "success": true,
      "log_likelihood": -12.27781315171126,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.250270281717244,
      "gamma": 4.869279896347135,
      "phi": 0.7081191712677096,
      "success": true,
      "log_likelihood": -24.73061675034001,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.1974764266552228,
      "gamma": 8.350887698397644,
      "phi": 0.6657231770053263,
      "success": true,
      "log_likelihood": -24.056945188723546,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 3.0631821242605466,
      "gamma": 7.115041829717819,
      "phi": 0.9282230349063291,
      "success": true,
      "log_likelihood": -21.270320859239817,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.0814870850086606,
      "gamma": 1.041204558032001,
      "phi": 0.6641109905250313,
      "success": true,
      "log_likelihood": -24.89771462056536,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 6.538180136902448,
      "phi": 0.8115512831851939,
      "success": true,
      "log_likelihood": -24.953480781379238,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 2.609193663892809,
      "phi": 1.3221179540505401,
      "success": true,
      "log_likelihood": -24.953434901688347,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.079008148037034,
      "gamma": 1.325538953531208,
      "phi": 0.7875558348797217,
      "success": true,
      "log_likelihood": -24.897714324173986,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.5220216455256816,
      "gamma": 1.767183219119389,
      "phi": 0.9764691605009663,
      "success": true,
      "log_likelihood": -22.157938154856986,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 7.618462397716183,
      "phi": 1.1089340618344692,
      "success": true,
      "log_likelihood": -24.95389128160129,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.080729724509672,
      "gamma": 3.513334918047317,
      "phi": 1.1186552906101457,
      "success": true,
      "log_likelihood": -24.897714331630187,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.6831983137825389,
      "gamma": 7.1787579071321606,
      "phi": 1.417078188427776,
      "success": true,
      "log_likelihood": -24.450957568527784,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 7.973031841038624,
      "phi": 0.6816728871661777,
      "success": true,
      "log_likelihood": -24.95348093212945,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 1.9814717877262074,
      "phi": 0.6428696791713,
      "success": true,
      "log_likelihood": -24.953571201370657,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 3.198298152640078,
      "phi": 0.6867358794234009,
      "success": true,
      "log_likelihood": -24.953662356887524,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 4.926375635632459,
      "phi": 1.4026510915546604,
      "success": true,
      "log_likelihood": -15.277677963302427,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 2.671821120361426,
      "phi": 0.7068746521846241,
      "success": true,
      "log_likelihood": -24.95393505431539,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 5.42390771502933,
      "phi": 0.8942217362926527,
      "success": true,
      "log_likelihood": -18.277542122236206,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.19281138980272933,
      "gamma": 0.2678038982685284,
      "phi": 1.0979904901790378,
      "success": true,
      "log_likelihood": -24.056945188726218,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -6.387744127958529,
      "gamma": 9.901123949512547,
      "phi": 0.5628173439617864,
      "success": true,
      "log_likelihood": -24.953311327627315,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -9.999999999999998,
      "gamma": 0.8501226717522788,
      "phi": 0.6328871119148481,
      "success": true,
      "log_likelihood": -24.953979804687286,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 2.236994380219992,
      "phi": 0.8717937631653817,
      "success": true,
      "log_likelihood": -24.95338941550274,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 7.418490182584671,
      "phi": 1.4737336869683615,
      "success": true,
      "log_likelihood": -24.95375443476296,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.2524536475977877,
      "gamma": 8.625941382950792,
      "phi": 0.6335466702736962,
      "success": true,
      "log_likelihood": -24.730616750435377,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 4.544483283691418,
      "phi": 0.8803239765058555,
      "success": true,
      "log_likelihood": -14.277723299885132,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 9.85421593605195,
      "phi": 1.0509801656723072,
      "success": true,
      "log_likelihood": -16.27763209149495,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.2474978759106288,
      "gamma": 0.10608091313501622,
      "phi": 1.4664790260894156,
      "success": true,
      "log_likelihood": -24.73061675030558,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 7.715845038943535,
      "phi": 0.7162322799823401,
      "success": true,
      "log_likelihood": -14.277722746508733,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 1.4828700529130505,
      "phi": 1.4610072422366298,
      "success": true,
      "log_likelihood": -24.953934618211317,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 3.3558204313422144,
      "phi": 0.8391519052098232,
      "success": true,
      "log_likelihood": -24.953889820623893,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.0827769916114423,
      "gamma": 7.786762816738244,
      "phi": 1.3526459370112662,
      "success": true,
      "log_likelihood": -24.897714324108875,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 9.316417603507405,
      "phi": 0.7187637096415417,
      "success": true,
      "log_likelihood": -19.27749669542242,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -6.218339509141672,
      "gamma": 8.946194397579378,
      "phi": 1.0380972659604173,
      "success": true,
      "log_likelihood": -24.953316472909805,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.520771341676183,
      "gamma": 0.6549821027269429,
      "phi": 1.3432722994508808,
      "success": true,
      "log_likelihood": -22.157938438828136,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 8.193544598593533,
      "phi": 0.8366156255563897,
      "success": true,
      "log_likelihood": -13.27776784599052,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 5.1657131403933985,
      "phi": 1.3563719939869228,
      "success": true,
      "log_likelihood": -24.954027043176293,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.19549397807941926,
      "gamma": 4.906254876284499,
      "phi": 1.2705648690292115,
      "success": true,
      "log_likelihood": -24.056945188723873,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 3.0797297656200926,
      "phi": 0.5179510731561701,
      "success": true,
      "log_likelihood": -24.953980681454567,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.0784670741533806,
      "gamma": 0.07185749358785666,
      "phi": 0.6787184261466062,
      "success": true,
      "log_likelihood": -24.89771432499895,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 9.218028704852186,
      "phi": 1.1884352840866879,
      "success": true,
      "log_likelihood": -14.277722482172353,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 5.49957027086869,
      "phi": 0.5012632739514811,
      "success": true,
      "log_likelihood": -24.953936092143007,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 4.489522689554127,
      "phi": 1.0788366462673116,
      "success": true,
      "log_likelihood": -24.95329850228068,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.1954931469900951,
      "gamma": 4.877414383983652,
      "phi": 0.6193912590826304,
      "success": true,
      "log_likelihood": -24.056945188865562,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 4.623716786490882,
      "phi": 1.4387069159845731,
      "success": true,
      "log_likelihood": -24.95393577580057,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.519349738485001,
      "gamma": 6.3338404077185935,
      "phi": 0.7798166833244202,
      "success": true,
      "log_likelihood": -22.157938154735547,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.6682805698730264,
      "phi": 0.9272105987057616,
      "success": true,
      "log_likelihood": -24.953752656401495,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 8.918472513322458,
      "phi": 0.7417651035174464,
      "success": true,
      "log_likelihood": -13.277767701263887,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 1.478905335708517,
      "phi": 0.6982783500959433,
      "success": true,
      "log_likelihood": -24.953343938922984,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.5211008247604347,
      "gamma": 3.330995329487492,
      "phi": 1.2065640510128002,
      "success": true,
      "log_likelihood": -22.15793815477817,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "beta": {
        "r": 0.6730196062926269,
        "p": 1.718728308167122e-14
      },
      "gamma": {
        "r": -0.03582997269608311,
        "p": 0.7234073186987884
      },
      "phi": {
        "r": 0.16895413780385057,
        "p": 0.0928789103189887
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 53.92271168361639,
  "bic_results": {
    "average_bic": 53.92271168361639,
    "individual_bics": [
      60.6585166477435,
      60.65715636498942,
      60.54598546482026,
      60.65742746199686,
      60.65733584714556,
      57.842503144855755,
      33.30627559781666,
      56.57957691819604,
      33.30627605801601,
      60.6575174967729,
      60.65733550167107,
      60.65842883463755,
      60.65742649318271,
      33.30627610985074,
      33.30627263174232,
      33.306276053423296,
      33.30627248464679,
      43.30582297256625,
      41.305911340017026,
      33.30627600455554,
      60.21179031598004,
      43.305822687889034,
      60.65760829789281,
      60.54598548032973,
      60.657202441715754,
      59.65247195235828,
      60.21179031659521,
      60.65788120194598,
      41.305911503075635,
      49.3055502775543,
      33.30627368854326,
      60.65852025527967,
      60.657426518581616,
      60.659106094447395,
      33.30627279237474,
      57.84250314307788,
      55.06643318665563,
      60.65715381990873,
      56.579576918202335,
      39.30600276256272,
      58.86444719281555,
      60.65806406675331,
      35.306183118790855,
      60.21179031604835,
      58.86444719281542,
      53.29119853384796,
      60.545986056499046,
      60.65751837812681,
      60.65742661874502,
      60.545985463716306,
      55.0664331250823,
      60.658339378570915,
      60.54598547862871,
      59.652471952423895,
      60.65751867962723,
      60.65769921810964,
      60.65788152914338,
      41.30591274197319,
      60.658426923999116,
      47.30564105984074,
      58.86444719282076,
      60.657179470622964,
      60.6585164247429,
      60.65733564637381,
      60.658065684894254,
      60.21179031623909,
      39.30600341513859,
      43.30582099835823,
      60.211790315979485,
      39.3060023083858,
      60.65842605179097,
      60.65833645661611,
      60.54598546358608,
      49.30555020621317,
      60.65718976118794,
      55.06643369302461,
      37.30609250734937,
      60.65861090172092,
      58.86444719281607,
      60.65851817827746,
      60.54598546536623,
      39.306001779713036,
      60.65842899965435,
      60.65715381992969,
      58.86444719309945,
      60.658428366969474,
      55.06643312483942,
      60.65806212817132,
      37.30609221789611,
      60.657244693214295,
      55.06643312492467
    ],
    "group_enabled": false,
    "group_bics": null,
    "num_parameters": 3,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- beta: r = 0.673\n- gamma: r = -0.036\n- phi: r = 0.169",
  "previous_models": [
    "Specification: a = F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11 + \u03b4;\na_mod = 1.08 * a * (1 + 0.012 * sin(a + 0.045));\nz = a_mod * (1 + 0.008 * cos(a + 0.065)) * (1 + 0.005 * sin(a + 0.115)) * (1 + 0.004 * cos(a + 0.085)) * (1 + 0.006 * sin(a + 0.035) * cos(a + 0.055)) * (1 + 0.003 * sin(a + 0.03) * cos(a + 0.05));\nw = (phi - 0.5) / phi;\nf_adapt = { z \u2265 0 : clip( 1.002 * ( z^w * (ln(1+z))^(1-w) * ( z/(1+|z|) ) ), -30, 30 ) ;\n             z < 0  : phi * ( (z + 1e-6)/(1+|z+1e-6|) )^28 };\nT = \u03a3[k=0 to 60] ( a^k * (1/2)^k );\nextra_product = exp(-a/0.1) * ( z/(1+|z|) ) * (1 + 0.005 * sin(1/(1+a))) * (1 + 0.002 * cos(0.5 * a)) * (1 + 0.003 * cos(0.3 * a))^2 * (1 + 0.004 * cos(0.3 * a))^2 * (1 + 0.0025 * cos(0.7 * a)) * (1 + tanh(0.05 * a)) * (1 + sigmoid(0.01 * a)) * (1 + 0.002 * cos(3 * a)) * (1 + 0.002 * sin(2.5 * a) + 0.001 * cos(3.5 * a) + 0.0015 * sin(3 * a)) * (1 + sigmoid(0.03 * a)) * (1 + tanh(0.07 * a)) * (1 + cos(3.1 * a)) * (1 + sigmoid(0.04 * a)) * (1 + tanh(0.08 * a)) * (1 + cos(3.2 * a)) * (1 + sigmoid(0.05 * a)) * (1 + tanh(0.1 * a)) * (1 + cos(3.4 * a)) * (1 + cos(3.6 * a)) * (1 + sigmoid(0.05 * a)) * (1 + tanh(0.1 * a)) * (1 + cos(3.6 * a)) * softplus( softplus(0.865/(1+a)) );\nextra = ( extra_product )^( 0.9478 + 0.00018 * ln(1+a) );\nExponent = ( 0.9478 + 0.00018 * ln(1+a) ) * ( 1 + 0.005 * sin(2.8 * a) + 0.001 * cos(3.8 * a) + 0.003 * sin(3.4 * a) + 0.002 * cos(4.4 * a) + 0.001 * sin(2.9 * a) + 0.0005 * cos(4.1 * a) + 0.001 * ( sin(2.5 * a) * cos(3.2 * a) ) + 0.002 * cos(3.6 * a) );\nf = sign(z) * ( ( f_adapt * T * extra )^(Exponent) );\nU = beta + gamma * f;\nP_accept = 1/(1 + exp(-U))\nSummary: A highly nonlinear utility model for binary acceptance that aggregates 11 fixed components with an offset, applies sequential trigonometric modulations to construct a signal z, and uses an adaptive transformation f_adapt with a steeper exponent for negative outcomes. The dynamic threshold T and an extensively composite extra term (with additional sigmoid, tanh, cosine factors and a nested softplus) are computed and combined, then raised to an exponent modulated by further oscillatory terms. The final transformed signal f is linearly scaled by beta and gamma to yield latent utility U, which passes through a logistic function to yield the acceptance probability.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 53.92271168361639\nOverall Accuracy: 0.5672\n\nParameter Recovery:\n- beta: r = 0.673\n- gamma: r = -0.036\n- phi: r = 0.169"
  ]
}