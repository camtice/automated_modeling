{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "<think>\nFor this run, further push the model\u2019s ability to capture complex nonlinear interactions by increasing the sensitivity of the negative branch and further enriching the extra composite transformation. In the negative branch of f_adapt, raise the exponent from 30 to 32 to allow for even steeper responses. In the extra composite term, add three new multiplicative factors: one for [1 + sigmoid(0.08\u00d7a)], one for [1 + tanh(0.2\u00d7a)], and one for [1 + cos(4.0\u00d7a)]. Also, nest an additional softplus function inside extra by multiplying the result by softplus(softplus(softplus(0.865/(1+a)))). Extend the dynamic threshold T by summing from k = 0 to 65. Finally, further enrich the final exponent modulation factor by including an extra oscillatory multiplier that incorporates additional terms\u2014for example, a factor of [1 + 0.0055\u00d7sin(2.9\u00d7a) + 0.0015\u00d7cos(3.9\u00d7a) + 0.0035\u00d7sin(3.5\u00d7a) + 0.0025\u00d7cos(4.5\u00d7a) + 0.0015\u00d7sin(3.0\u00d7a) + 0.0007\u00d7cos(4.2\u00d7a) + 0.0015\u00d7(sin(2.7\u00d7a)\u00d7cos(3.4\u00d7a)) + 0.0025\u00d7cos(3.8\u00d7a) + 0.0015\u00d7sin(2.8\u00d7a)]. Emphasize creative interleaving of functions and do not settle for the most obvious transformations.\n</think>\nNew Instructions for Run 150:\n\n1. Compute the core sum a as the sum of fixed components F1 through F11 plus a small constant \u03b4.\n2. Define a_mod = 1.08 \u00d7 a \u00d7 [1 + 0.012 \u00d7 sin(a + 0.045)].\n3. Sequentially multiply a_mod by:\n\u2003\u2003\u2022 [1 + 0.008 \u00d7 cos(a + 0.065)]\n\u2003\u2003\u2022 [1 + 0.005 \u00d7 sin(a + 0.115)]\n\u2003\u2003\u2022 [1 + 0.004 \u00d7 cos(a + 0.085)]\n\u2003\u2003\u2022 [1 + 0.006 \u00d7 (sin(a + 0.035) \u00d7 cos(a + 0.055))]\n\u2003\u2003\u2022 [1 + 0.003 \u00d7 (sin(a + 0.03) \u00d7 cos(a + 0.05))]\nLet z be the resulting product.\n4. Compute w = (phi \u2212 0.5) / phi.\n\u2003\u2003\u2022 For z \u2265 0, set f_adapt(z) = clip[1.002 \u00d7 (z^w \u00d7 (ln(1+z))^(1\u2212w) \u00d7 softsign(z)), \u221230, 30], with softsign(z) = z/(1+|z|).\n\u2003\u2003\u2022 For z < 0, set f_adapt(z) = phi \u00d7 [softsign(z + \u0394_shift)]^(32), with \u0394_shift = 1\u00d710\u207b\u2076.\n5. Define the dynamic threshold T as the sum of a^k \u00d7 (\u00bd)^k for k = 0 to 65.\n6. Define the extra composite term extra as the product of the following factors:\n\u2003\u2003\u2022 exp(\u2212a/0.1)\n\u2003\u2003\u2022 [z/(1+|z|)]\n\u2003\u2003\u2022 [1 + 0.005 \u00d7 sin(1/(1+a))]\n\u2003\u2003\u2022 [1 + 0.002 \u00d7 cos(0.5\u00d7a)]\n\u2003\u2003\u2022 ([1 + 0.003 \u00d7 cos(0.3\u00d7a)]\u00b2)\n\u2003\u2003\u2022 ([1 + 0.004 \u00d7 cos(0.3\u00d7a)]\u00b2)\n\u2003\u2003\u2022 [1 + 0.0025 \u00d7 cos(0.7\u00d7a)]\n\u2003\u2003\u2022 [1 + tanh(0.05\u00d7a)]\n\u2003\u2003\u2022 [1 + sigmoid(0.01\u00d7a)]\n\u2003\u2003\u2022 [1 + 0.002 \u00d7 cos(3\u00d7a)]\n\u2003\u2003\u2022 [1 + 0.002 \u00d7 (sin(2.5\u00d7a) + 0.001\u00d7cos(3.5\u00d7a) + 0.0015\u00d7sin(3\u00d7a))]\n\u2003\u2003\u2022 [1 + sigmoid(0.03\u00d7a)]\n\u2003\u2003\u2022 [1 + tanh(0.07\u00d7a)]\n\u2003\u2003\u2022 [1 + cos(3.1\u00d7a)]\n\u2003\u2003\u2022 [1 + sigmoid(0.04\u00d7a)]\n\u2003\u2003\u2022 [1 + tanh(0.08\u00d7a)]\n\u2003\u2003\u2022 [1 + cos(3.2\u00d7a)]\n\u2003\u2003\u2022 [1 + sigmoid(0.05\u00d7a)]\n\u2003\u2003\u2022 [1 + tanh(0.1\u00d7a)]\n\u2003\u2003\u2022 [1 + cos(3.4\u00d7a)]\n\u2003\u2003\u2022 [1 + sigmoid(0.06\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(added)\\n\u2003\u2003\u2022 [1 + tanh(0.12\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(added)\\n\u2003\u2003\u2022 [1 + cos(3.6\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(added)\\n\u2003\u2003\u2022 Multiply by softplus(softplus(softplus(0.865/(1+a))))\\nThen raise the product to the power [0.9478 + 0.00018\u00d7ln(1+a)].\n7. Define the final exponent modulation factor as:\\n\u2003\u2003Exponent = [0.9478 + 0.00018\u00d7ln(1+a)] \u00d7 [1 + 0.0055\u00d7sin(2.9\u00d7a) + 0.0015\u00d7cos(3.9\u00d7a) + 0.0035\u00d7sin(3.5\u00d7a) + 0.0025\u00d7cos(4.5\u00d7a) + 0.0015\u00d7sin(3.0\u00d7a) + 0.0007\u00d7cos(4.2\u00d7a) + 0.0015\u00d7(sin(2.7\u00d7a)\u00d7cos(3.4\u00d7a)) + 0.0025\u00d7cos(3.8\u00d7a) + 0.0015\u00d7sin(2.8\u00d7a)].\n8. Compute the final transformed signal f(x) = sign(z) \u00d7 { [ f_adapt(z) \u00d7 T \u00d7 extra ]^(Exponent) }.\n9. Compute latent utility U = beta + gamma \u00d7 f(x) and let P(accept = 1) = 1/(1 + exp(\u2013U)).\n10. Use exactly three learnable parameters with these finite bounds: beta \u2208 [\u201310, 10], gamma \u2208 [0, 10], phi \u2208 [0.5, 1.5].\n\nThese instructions encourage creative interleaving of nonlinear functions to capture richer response patterns and improve the model\u2019s predictive accuracy, BIC, and parameter recovery.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: <think>\nFor this run, further push the model\u2019s ability to capture complex nonlinear interactions by increasing the sensitivity of the negative branch and further enriching the extra composite transformation. In the negative branch of f_adapt, raise the exponent from 30 to 32 to allow for even steeper responses. In the extra composite term, add three new multiplicative factors: one for [1 + sigmoid(0.08\u00d7a)], one for [1 + tanh(0.2\u00d7a)], and one for [1 + cos(4.0\u00d7a)]. Also, nest an additional softplus function inside extra by multiplying the result by softplus(softplus(softplus(0.865/(1+a)))). Extend the dynamic threshold T by summing from k = 0 to 65. Finally, further enrich the final exponent modulation factor by including an extra oscillatory multiplier that incorporates additional terms\u2014for example, a factor of [1 + 0.0055\u00d7sin(2.9\u00d7a) + 0.0015\u00d7cos(3.9\u00d7a) + 0.0035\u00d7sin(3.5\u00d7a) + 0.0025\u00d7cos(4.5\u00d7a) + 0.0015\u00d7sin(3.0\u00d7a) + 0.0007\u00d7cos(4.2\u00d7a) + 0.0015\u00d7(sin(2.7\u00d7a)\u00d7cos(3.4\u00d7a)) + 0.0025\u00d7cos(3.8\u00d7a) + 0.0015\u00d7sin(2.8\u00d7a)]. Emphasize creative interleaving of functions and do not settle for the most obvious transformations.\n</think>\nNew Instructions for Run 150:\n\n1. Compute the core sum a as the sum of fixed components F1 through F11 plus a small constant \u03b4.\n2. Define a_mod = 1.08 \u00d7 a \u00d7 [1 + 0.012 \u00d7 sin(a + 0.045)].\n3. Sequentially multiply a_mod by:\n\u2003\u2003\u2022 [1 + 0.008 \u00d7 cos(a + 0.065)]\n\u2003\u2003\u2022 [1 + 0.005 \u00d7 sin(a + 0.115)]\n\u2003\u2003\u2022 [1 + 0.004 \u00d7 cos(a + 0.085)]\n\u2003\u2003\u2022 [1 + 0.006 \u00d7 (sin(a + 0.035) \u00d7 cos(a + 0.055))]\n\u2003\u2003\u2022 [1 + 0.003 \u00d7 (sin(a + 0.03) \u00d7 cos(a + 0.05))]\nLet z be the resulting product.\n4. Compute w = (phi \u2212 0.5) / phi.\n\u2003\u2003\u2022 For z \u2265 0, set f_adapt(z) = clip[1.002 \u00d7 (z^w \u00d7 (ln(1+z))^(1\u2212w) \u00d7 softsign(z)), \u221230, 30], with softsign(z) = z/(1+|z|).\n\u2003\u2003\u2022 For z < 0, set f_adapt(z) = phi \u00d7 [softsign(z + \u0394_shift)]^(32), with \u0394_shift = 1\u00d710\u207b\u2076.\n5. Define the dynamic threshold T as the sum of a^k \u00d7 (\u00bd)^k for k = 0 to 65.\n6. Define the extra composite term extra as the product of the following factors:\n\u2003\u2003\u2022 exp(\u2212a/0.1)\n\u2003\u2003\u2022 [z/(1+|z|)]\n\u2003\u2003\u2022 [1 + 0.005 \u00d7 sin(1/(1+a))]\n\u2003\u2003\u2022 [1 + 0.002 \u00d7 cos(0.5\u00d7a)]\n\u2003\u2003\u2022 ([1 + 0.003 \u00d7 cos(0.3\u00d7a)]\u00b2)\n\u2003\u2003\u2022 ([1 + 0.004 \u00d7 cos(0.3\u00d7a)]\u00b2)\n\u2003\u2003\u2022 [1 + 0.0025 \u00d7 cos(0.7\u00d7a)]\n\u2003\u2003\u2022 [1 + tanh(0.05\u00d7a)]\n\u2003\u2003\u2022 [1 + sigmoid(0.01\u00d7a)]\n\u2003\u2003\u2022 [1 + 0.002 \u00d7 cos(3\u00d7a)]\n\u2003\u2003\u2022 [1 + 0.002 \u00d7 (sin(2.5\u00d7a) + 0.001\u00d7cos(3.5\u00d7a) + 0.0015\u00d7sin(3\u00d7a))]\n\u2003\u2003\u2022 [1 + sigmoid(0.03\u00d7a)]\n\u2003\u2003\u2022 [1 + tanh(0.07\u00d7a)]\n\u2003\u2003\u2022 [1 + cos(3.1\u00d7a)]\n\u2003\u2003\u2022 [1 + sigmoid(0.04\u00d7a)]\n\u2003\u2003\u2022 [1 + tanh(0.08\u00d7a)]\n\u2003\u2003\u2022 [1 + cos(3.2\u00d7a)]\n\u2003\u2003\u2022 [1 + sigmoid(0.05\u00d7a)]\n\u2003\u2003\u2022 [1 + tanh(0.1\u00d7a)]\n\u2003\u2003\u2022 [1 + cos(3.4\u00d7a)]\n\u2003\u2003\u2022 [1 + sigmoid(0.06\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(added)\\n\u2003\u2003\u2022 [1 + tanh(0.12\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(added)\\n\u2003\u2003\u2022 [1 + cos(3.6\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(added)\\n\u2003\u2003\u2022 Multiply by softplus(softplus(softplus(0.865/(1+a))))\\nThen raise the product to the power [0.9478 + 0.00018\u00d7ln(1+a)].\n7. Define the final exponent modulation factor as:\\n\u2003\u2003Exponent = [0.9478 + 0.00018\u00d7ln(1+a)] \u00d7 [1 + 0.0055\u00d7sin(2.9\u00d7a) + 0.0015\u00d7cos(3.9\u00d7a) + 0.0035\u00d7sin(3.5\u00d7a) + 0.0025\u00d7cos(4.5\u00d7a) + 0.0015\u00d7sin(3.0\u00d7a) + 0.0007\u00d7cos(4.2\u00d7a) + 0.0015\u00d7(sin(2.7\u00d7a)\u00d7cos(3.4\u00d7a)) + 0.0025\u00d7cos(3.8\u00d7a) + 0.0015\u00d7sin(2.8\u00d7a)].\n8. Compute the final transformed signal f(x) = sign(z) \u00d7 { [ f_adapt(z) \u00d7 T \u00d7 extra ]^(Exponent) }.\n9. Compute latent utility U = beta + gamma \u00d7 f(x) and let P(accept = 1) = 1/(1 + exp(\u2013U)).\n10. Use exactly three learnable parameters with these finite bounds: beta \u2208 [\u201310, 10], gamma \u2208 [0, 10], phi \u2208 [0.5, 1.5].\n\nThese instructions encourage creative interleaving of nonlinear functions to capture richer response patterns and improve the model\u2019s predictive accuracy, BIC, and parameter recovery.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<MODEL>\na = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + delta\na_mod = 1.08 * a * (1 + 0.012*sin(a + 0.045))\nz = a_mod * (1 + 0.008*cos(a + 0.065)) * (1 + 0.005*sin(a + 0.115)) * (1 + 0.004*cos(a + 0.085)) * (1 + 0.006*sin(a + 0.035)*cos(a + 0.055)) * (1 + 0.003*sin(a + 0.03)*cos(a + 0.05))\nw = (phi - 0.5)/phi\nf_adapt = { z >= 0 : clip(1.002 * (z^w * (ln(1+z))^(1-w) * (z/(1+abs(z)))), -30, 30)\n            z < 0  : phi * ((z + 1e-6)/(1+abs(z+1e-6)))^(32) }\nT = \u03a3[k=0 to 65] (a/2)^k\nE_comp = exp(-a/0.1) * (z/(1+abs(z))) * (1+0.005*sin(1/(1+a))) * (1+0.002*cos(0.5*a)) * (1+0.003*cos(0.3*a))^2 * (1+0.004*cos(0.3*a))^2 * (1+0.0025*cos(0.7*a)) * (1+tanh(0.05*a)) * (1+1/(1+exp(-0.01*a))) * (1+0.002*cos(3*a)) * (1+0.002*(sin(2.5*a)+0.001*cos(3.5*a)+0.0015*sin(3*a))) * (1+1/(1+exp(-0.03*a))) * (1+tanh(0.07*a)) * (1+cos(3.1*a)) * (1+1/(1+exp(-0.04*a))) * (1+tanh(0.08*a)) * (1+cos(3.2*a)) * (1+1/(1+exp(-0.05*a))) * (1+tanh(0.1*a)) * (1+cos(3.4*a)) * (1+1/(1+exp(-0.06*a))) * (1+tanh(0.12*a)) * (1+cos(3.6*a)) * softplus(softplus(softplus(0.865/(1+a))))\nextra = (E_comp)^(0.9478 + 0.00018*ln(1+a))\nExponent = (0.9478 + 0.00018*ln(1+a)) * (1 + 0.0055*sin(2.9*a) + 0.0015*cos(3.9*a) + 0.0035*sin(3.5*a) + 0.0025*cos(4.5*a) + 0.0015*sin(3.0*a) + 0.0007*cos(4.2*a) + 0.0015*sin(2.7*a)*cos(3.4*a) + 0.0025*cos(3.8*a) + 0.0015*sin(2.8*a))\nf_x = sign(z) * ( (f_adapt * T * extra)^(Exponent) )\nU = beta + gamma * f_x\nP(accept=1) = 1/(1 + exp(-U))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"beta\": {\n      \"description\": \"Base intercept parameter for latent utility\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": -10,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Scaling parameter for the transformed signal in latent utility\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Parameter modulating the sensitivity of the negative branch in f_adapt\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0.5,\n          \"max\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"F1\": {\n      \"description\": \"Fixed component F1 derived from participant/design data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"F2\": {\n      \"description\": \"Fixed component F2 derived from participant/design data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"F3\": {\n      \"description\": \"Fixed component F3 derived from participant/design data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"F4\": {\n      \"description\": \"Fixed component F4 derived from participant/design data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"F5\": {\n      \"description\": \"Fixed component F5 derived from participant/design data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"F6\": {\n      \"description\": \"Fixed component F6 derived from participant/design data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"F7\": {\n      \"description\": \"Fixed component F7 derived from participant/design data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"F8\": {\n      \"description\": \"Fixed component F8 derived from participant/design data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"F9\": {\n      \"description\": \"Fixed component F9 derived from participant/design data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"F10\": {\n      \"description\": \"Fixed component F10 derived from participant/design data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"F11\": {\n      \"description\": \"Fixed component F11 derived from participant/design data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"delta\": {\n      \"description\": \"Small constant offset added to the sum of fixed components\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a\": {\n      \"description\": \"Core sum computed as the sum of F1 through F11 plus delta\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a_mod\": {\n      \"description\": \"Modified core sum a after nonlinear modulation\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"z\": {\n      \"description\": \"Composite transformed signal after sequential multiplicative factors\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"w\": {\n      \"description\": \"Exponent weight computed from phi\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_adapt\": {\n      \"description\": \"Adaptive transformation of z with piecewise function for positive and negative z\",\n      \"range\": {\n        \"min\": -30,\n        \"max\": 30\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"T\": {\n      \"description\": \"Dynamic threshold computed as the finite sum \u03a3[k=0 to 65] (a/2)^k\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"E_comp\": {\n      \"description\": \"Extra composite product from multiple nonlinear factors\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"extra\": {\n      \"description\": \"Extra composite term obtained by raising E_comp to the power (0.9478+0.00018*ln(1+a))\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"Exponent\": {\n      \"description\": \"Final exponent modulation factor combining a base exponent and oscillatory multipliers\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_x\": {\n      \"description\": \"Final transformed signal f(x) computed as sign(z)*[f_adapt*T*extra]^(Exponent)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed as beta + gamma*f(x)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"accept\": {\n      \"description\": \"Binary decision variable indicating acceptance (1) or rejection (0)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA nonlinear decision\u2010model in which a core signal a\u2014computed as the sum of 11 fixed components plus a small offset\u2014is modulated through a series of sinusoidal, exponential, and composite multiplicative factors. The transformed signal f(x) is obtained by an adaptive piecewise mapping (f_adapt), a dynamic threshold sum T, and an extra composite term enhanced with nested softplus and oscillatory multipliers, all raised to a modulated exponent. The latent utility U is then a linear combination of a baseline (beta) and the transformed signal scaled by gamma, with decision probabilities calculated through a logistic function.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['beta', 'gamma', 'phi']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                a = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + delta\na_mod = 1.08 * a * (1 + 0.012*sin(a + 0.045))\nz = a_mod * (1 + 0.008*cos(a + 0.065)) * (1 + 0.005*sin(a + 0.115)) * (1 + 0.004*cos(a + 0.085)) * (1 + 0.006*sin(a + 0.035)*cos(a + 0.055)) * (1 + 0.003*sin(a + 0.03)*cos(a + 0.05))\nw = (phi - 0.5)/phi\nf_adapt = { z >= 0 : clip(1.002 * (z^w * (ln(1+z))^(1-w) * (z/(1+abs(z)))), -30, 30)\n            z < 0  : phi * ((z + 1e-6)/(1+abs(z+1e-6)))^(32) }\nT = \u03a3[k=0 to 65] (a/2)^k\nE_comp = exp(-a/0.1) * (z/(1+abs(z))) * (1+0.005*sin(1/(1+a))) * (1+0.002*cos(0.5*a)) * (1+0.003*cos(0.3*a))^2 * (1+0.004*cos(0.3*a))^2 * (1+0.0025*cos(0.7*a)) * (1+tanh(0.05*a)) * (1+1/(1+exp(-0.01*a))) * (1+0.002*cos(3*a)) * (1+0.002*(sin(2.5*a)+0.001*cos(3.5*a)+0.0015*sin(3*a))) * (1+1/(1+exp(-0.03*a))) * (1+tanh(0.07*a)) * (1+cos(3.1*a)) * (1+1/(1+exp(-0.04*a))) * (1+tanh(0.08*a)) * (1+cos(3.2*a)) * (1+1/(1+exp(-0.05*a))) * (1+tanh(0.1*a)) * (1+cos(3.4*a)) * (1+1/(1+exp(-0.06*a))) * (1+tanh(0.12*a)) * (1+cos(3.6*a)) * softplus(softplus(softplus(0.865/(1+a))))\nextra = (E_comp)^(0.9478 + 0.00018*ln(1+a))\nExponent = (0.9478 + 0.00018*ln(1+a)) * (1 + 0.0055*sin(2.9*a) + 0.0015*cos(3.9*a) + 0.0035*sin(3.5*a) + 0.0025*cos(4.5*a) + 0.0015*sin(3.0*a) + 0.0007*cos(4.2*a) + 0.0015*sin(2.7*a)*cos(3.4*a) + 0.0025*cos(3.8*a) + 0.0015*sin(2.8*a))\nf_x = sign(z) * ( (f_adapt * T * extra)^(Exponent) )\nU = beta + gamma * f_x\nP(accept=1) = 1/(1 + exp(-U))\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"beta\": {\n      \"description\": \"Base intercept parameter for latent utility\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": -10,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Scaling parameter for the transformed signal in latent utility\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Parameter modulating the sensitivity of the negative branch in f_adapt\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0.5,\n          \"max\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"F1\": {\n      \"description\": \"Fixed component F1 derived from participant/design data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"F2\": {\n      \"description\": \"Fixed component F2 derived from participant/design data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"F3\": {\n      \"description\": \"Fixed component F3 derived from participant/design data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"F4\": {\n      \"description\": \"Fixed component F4 derived from participant/design data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"F5\": {\n      \"description\": \"Fixed component F5 derived from participant/design data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"F6\": {\n      \"description\": \"Fixed component F6 derived from participant/design data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"F7\": {\n      \"description\": \"Fixed component F7 derived from participant/design data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"F8\": {\n      \"description\": \"Fixed component F8 derived from participant/design data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"F9\": {\n      \"description\": \"Fixed component F9 derived from participant/design data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"F10\": {\n      \"description\": \"Fixed component F10 derived from participant/design data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"F11\": {\n      \"description\": \"Fixed component F11 derived from participant/design data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"delta\": {\n      \"description\": \"Small constant offset added to the sum of fixed components\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a\": {\n      \"description\": \"Core sum computed as the sum of F1 through F11 plus delta\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a_mod\": {\n      \"description\": \"Modified core sum a after nonlinear modulation\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"z\": {\n      \"description\": \"Composite transformed signal after sequential multiplicative factors\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"w\": {\n      \"description\": \"Exponent weight computed from phi\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_adapt\": {\n      \"description\": \"Adaptive transformation of z with piecewise function for positive and negative z\",\n      \"range\": {\n        \"min\": -30,\n        \"max\": 30,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"T\": {\n      \"description\": \"Dynamic threshold computed as the finite sum \\u03a3[k=0 to 65] (a/2)^k\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"E_comp\": {\n      \"description\": \"Extra composite product from multiple nonlinear factors\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"extra\": {\n      \"description\": \"Extra composite term obtained by raising E_comp to the power (0.9478+0.00018*ln(1+a))\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"Exponent\": {\n      \"description\": \"Final exponent modulation factor combining a base exponent and oscillatory multipliers\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_x\": {\n      \"description\": \"Final transformed signal f(x) computed as sign(z)*[f_adapt*T*extra]^(Exponent)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed as beta + gamma*f(x)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"accept\": {\n      \"description\": \"Binary decision variable indicating acceptance (1) or rejection (0)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, beta=0, gamma=1, phi=1):\n    model_predictions = []\n    for trial in trial_data:\n        F1 = trial.get(\"F1\", 0)\n        F2 = trial.get(\"F2\", 0)\n        F3 = trial.get(\"F3\", 0)\n        F4 = trial.get(\"F4\", 0)\n        F5 = trial.get(\"F5\", 0)\n        F6 = trial.get(\"F6\", 0)\n        F7 = trial.get(\"F7\", 0)\n        F8 = trial.get(\"F8\", 0)\n        F9 = trial.get(\"F9\", 0)\n        F10 = trial.get(\"F10\", 0)\n        F11 = trial.get(\"F11\", 0)\n        delta = trial.get(\"delta\", 0)\n\n        a = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + delta\n        a_mod = 1.08 * a * (1 + 0.012*math.sin(a + 0.045))\n        z = a_mod * (1 + 0.008*math.cos(a + 0.065)) * (1 + 0.005*math.sin(a + 0.115)) * (1 + 0.004*math.cos(a + 0.085)) * (1 + 0.006*math.sin(a + 0.035)*math.cos(a + 0.055)) * (1 + 0.003*math.sin(a + 0.03)*math.cos(a + 0.05))\n        w = (phi - 0.5)/phi\n\n        if z >= 0:\n            f_adapt = min(max(1.002 * (z**w * (math.log(1+z) if (1+z) > 0 else 0)**(1-w) * (z/(1+abs(z)))), -30), 30)\n        else:\n            f_adapt = phi * ((z + 1e-6)/(1+abs(z+1e-6)))**(32)\n\n        T = sum((a/2)**k for k in range(66))\n\n        E_comp = math.exp(-a/0.1) * (z/(1+abs(z))) * (1+0.005*math.sin(1/(1+a) if (1+a) > 0 else 0)) * (1+0.002*math.cos(0.5*a)) * (1+0.003*math.cos(0.3*a))**2 * (1+0.004*math.cos(0.3*a))**2 * (1+0.0025*math.cos(0.7*a)) * (1+math.tanh(0.05*a)) * (1+1/(1+math.exp(-0.01*a))) * (1+0.002*math.cos(3*a)) * (1+0.002*(math.sin(2.5*a)+0.001*math.cos(3.5*a)+0.0015*math.sin(3*a))) * (1+1/(1+math.exp(-0.03*a))) * (1+math.tanh(0.07*a)) * (1+math.cos(3.1*a)) * (1+1/(1+math.exp(-0.04*a))) * (1+math.tanh(0.08*a)) * (1+math.cos(3.2*a)) * (1+1/(1+math.exp(-0.05*a))) * (1+math.tanh(0.1*a)) * (1+math.cos(3.4*a)) * (1+1/(1+math.exp(-0.06*a))) * (1+math.tanh(0.12*a)) * (1+math.cos(3.6*a))\n\n        softplus_inner = 0.865/(1+a)\n        softplus_middle = math.log(1 + math.exp(softplus_inner))\n        softplus_outer = math.log(1 + math.exp(softplus_middle))\n        E_comp *= math.log(1 + math.exp(softplus_outer))\n\n\n        extra = (E_comp)**(0.9478 + 0.00018*math.log(1+a) if (1+a) > 0 else 0)\n        Exponent = (0.9478 + 0.00018*math.log(1+a) if (1+a) > 0 else 0) * (1 + 0.0055*math.sin(2.9*a) + 0.0015*math.cos(3.9*a) + 0.0035*math.sin(3.5*a) + 0.0025*math.cos(4.5*a) + 0.0015*math.sin(3.0*a) + 0.0007*math.cos(4.2*a) + 0.0015*math.sin(2.7*a)*math.cos(3.4*a) + 0.0025*math.cos(3.8*a) + 0.0015*math.sin(2.8*a))\n        \n        if (f_adapt * T * extra) >= 0:\n            f_x = (1 if z >=0 else -1) * ( (f_adapt * T * extra)**(Exponent) )\n        else:\n            f_x = (1 if z >=0 else -1) * (-1 * abs((f_adapt * T * extra))**(Exponent))\n        \n        U = beta + gamma * f_x\n        P_accept = 1/(1 + math.exp(-U))\n        \n        model_predictions.append(P_accept)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '[{\"ID\": 0, \"group\": \"treatment\", \"trial_number\": 1, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 6, \"token_self\": 6, \"combined_earning\": 12, \"split_opp\": 6.0, \"split_self\": 6.0, \"splitperc_opp\": 50, \"splitperc_self\": 50, \"accept\": 1.0, \"accepted_amount\": 6.0, \"accepted_perc\": 50.0, \"proposed_perc\": 50.0, \"proposed_amount\": 6.0}, {\"ID\": 1, \"group\": \"treatment\", \"trial_number\": 2, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 6, \"token_self\": 6, \"combined_earning\": 12, \"split_opp\": 6.0, \"split_self\": 6.0, \"splitperc_opp\": 50, \"splitperc_self\": 50, \"accept\": 1.0, \"accepted_amount\": 6.0, \"accepted_perc\": 50.0, \"proposed_perc\": 50.0, \"proposed_amount\": 6.0}, {\"ID\": 2, \"group\": \"treatment\", \"trial_number\": 3, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 6, \"token_self\": 6, \"combined_earning\": 12, \"split_opp\": 6.0, \"split_self\": 6.0, \"splitperc_opp\": 50, \"splitperc_self\": 50, \"accept\": 1.0, \"accepted_amount\": 6.0, \"accepted_perc\": 50.0, \"proposed_perc\": 50.0, \"proposed_amount\": 6.0}]'\n\nimport json\ndata = json.loads(data_json)\n\n# Add dummy F values and delta since they are needed for the calculations\nfor trial in data:\n    trial[\"F1\"] = 1\n    trial[\"F2\"] = 1\n    trial[\"F3\"] = 1\n    trial[\"F4\"] = 1\n    trial[\"F5\"] = 1\n    trial[\"F6\"] = 1\n    trial[\"F7\"] = 1\n    trial[\"F8\"] = 1\n    trial[\"F9\"] = 1\n    trial[\"F10\"] = 1\n    trial[\"F11\"] = 1\n    trial[\"delta\"] = 0.5\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n```",
      "timestamp": 1743548819.334075
    }
  ],
  "learnable_parameters": {
    "beta": {
      "description": "Base intercept parameter for latent utility",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": -10,
          "max": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Scaling parameter for the transformed signal in latent utility",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": 0,
          "max": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "phi": {
      "description": "Parameter modulating the sensitivity of the negative branch in f_adapt",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": 0.5,
          "max": 1.5
        }
      },
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "a = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + delta\na_mod = 1.08 * a * (1 + 0.012*sin(a + 0.045))\nz = a_mod * (1 + 0.008*cos(a + 0.065)) * (1 + 0.005*sin(a + 0.115)) * (1 + 0.004*cos(a + 0.085)) * (1 + 0.006*sin(a + 0.035)*cos(a + 0.055)) * (1 + 0.003*sin(a + 0.03)*cos(a + 0.05))\nw = (phi - 0.5)/phi\nf_adapt = { z >= 0 : clip(1.002 * (z^w * (ln(1+z))^(1-w) * (z/(1+abs(z)))), -30, 30)\n            z < 0  : phi * ((z + 1e-6)/(1+abs(z+1e-6)))^(32) }\nT = \u03a3[k=0 to 65] (a/2)^k\nE_comp = exp(-a/0.1) * (z/(1+abs(z))) * (1+0.005*sin(1/(1+a))) * (1+0.002*cos(0.5*a)) * (1+0.003*cos(0.3*a))^2 * (1+0.004*cos(0.3*a))^2 * (1+0.0025*cos(0.7*a)) * (1+tanh(0.05*a)) * (1+1/(1+exp(-0.01*a))) * (1+0.002*cos(3*a)) * (1+0.002*(sin(2.5*a)+0.001*cos(3.5*a)+0.0015*sin(3*a))) * (1+1/(1+exp(-0.03*a))) * (1+tanh(0.07*a)) * (1+cos(3.1*a)) * (1+1/(1+exp(-0.04*a))) * (1+tanh(0.08*a)) * (1+cos(3.2*a)) * (1+1/(1+exp(-0.05*a))) * (1+tanh(0.1*a)) * (1+cos(3.4*a)) * (1+1/(1+exp(-0.06*a))) * (1+tanh(0.12*a)) * (1+cos(3.6*a)) * softplus(softplus(softplus(0.865/(1+a))))\nextra = (E_comp)^(0.9478 + 0.00018*ln(1+a))\nExponent = (0.9478 + 0.00018*ln(1+a)) * (1 + 0.0055*sin(2.9*a) + 0.0015*cos(3.9*a) + 0.0035*sin(3.5*a) + 0.0025*cos(4.5*a) + 0.0015*sin(3.0*a) + 0.0007*cos(4.2*a) + 0.0015*sin(2.7*a)*cos(3.4*a) + 0.0025*cos(3.8*a) + 0.0015*sin(2.8*a))\nf_x = sign(z) * ( (f_adapt * T * extra)^(Exponent) )\nU = beta + gamma * f_x\nP(accept=1) = 1/(1 + exp(-U))",
  "variable_descriptions": {
    "beta": {
      "description": "Base intercept parameter for latent utility",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": -10,
          "max": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Scaling parameter for the transformed signal in latent utility",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": 0,
          "max": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "phi": {
      "description": "Parameter modulating the sensitivity of the negative branch in f_adapt",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": 0.5,
          "max": 1.5
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "F1": {
      "description": "Fixed component F1 derived from participant/design data",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "F2": {
      "description": "Fixed component F2 derived from participant/design data",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "F3": {
      "description": "Fixed component F3 derived from participant/design data",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "F4": {
      "description": "Fixed component F4 derived from participant/design data",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "F5": {
      "description": "Fixed component F5 derived from participant/design data",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "F6": {
      "description": "Fixed component F6 derived from participant/design data",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "F7": {
      "description": "Fixed component F7 derived from participant/design data",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "F8": {
      "description": "Fixed component F8 derived from participant/design data",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "F9": {
      "description": "Fixed component F9 derived from participant/design data",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "F10": {
      "description": "Fixed component F10 derived from participant/design data",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "F11": {
      "description": "Fixed component F11 derived from participant/design data",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "delta": {
      "description": "Small constant offset added to the sum of fixed components",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "a": {
      "description": "Core sum computed as the sum of F1 through F11 plus delta",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "a_mod": {
      "description": "Modified core sum a after nonlinear modulation",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "z": {
      "description": "Composite transformed signal after sequential multiplicative factors",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "w": {
      "description": "Exponent weight computed from phi",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "f_adapt": {
      "description": "Adaptive transformation of z with piecewise function for positive and negative z",
      "range": {
        "min": -30,
        "max": 30,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "T": {
      "description": "Dynamic threshold computed as the finite sum \u03a3[k=0 to 65] (a/2)^k",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "E_comp": {
      "description": "Extra composite product from multiple nonlinear factors",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "extra": {
      "description": "Extra composite term obtained by raising E_comp to the power (0.9478+0.00018*ln(1+a))",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "Exponent": {
      "description": "Final exponent modulation factor combining a base exponent and oscillatory multipliers",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "f_x": {
      "description": "Final transformed signal f(x) computed as sign(z)*[f_adapt*T*extra]^(Exponent)",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "U": {
      "description": "Latent utility computed as beta + gamma*f(x)",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "accept": {
      "description": "Binary decision variable indicating acceptance (1) or rejection (0)",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    }
  },
  "model_summary": "A nonlinear decision\u2010model in which a core signal a\u2014computed as the sum of 11 fixed components plus a small offset\u2014is modulated through a series of sinusoidal, exponential, and composite multiplicative factors. The transformed signal f(x) is obtained by an adaptive piecewise mapping (f_adapt), a dynamic threshold sum T, and an extra composite term enhanced with nested softplus and oscillatory multipliers, all raised to a modulated exponent. The latent utility U is then a linear combination of a baseline (beta) and the transformed signal scaled by gamma, with decision probabilities calculated through a logistic function.",
  "target_variable": "accept",
  "full_reasoning": "<MODEL>\na = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + delta\na_mod = 1.08 * a * (1 + 0.012*sin(a + 0.045))\nz = a_mod * (1 + 0.008*cos(a + 0.065)) * (1 + 0.005*sin(a + 0.115)) * (1 + 0.004*cos(a + 0.085)) * (1 + 0.006*sin(a + 0.035)*cos(a + 0.055)) * (1 + 0.003*sin(a + 0.03)*cos(a + 0.05))\nw = (phi - 0.5)/phi\nf_adapt = { z >= 0 : clip(1.002 * (z^w * (ln(1+z))^(1-w) * (z/(1+abs(z)))), -30, 30)\n            z < 0  : phi * ((z + 1e-6)/(1+abs(z+1e-6)))^(32) }\nT = \u03a3[k=0 to 65] (a/2)^k\nE_comp = exp(-a/0.1) * (z/(1+abs(z))) * (1+0.005*sin(1/(1+a))) * (1+0.002*cos(0.5*a)) * (1+0.003*cos(0.3*a))^2 * (1+0.004*cos(0.3*a))^2 * (1+0.0025*cos(0.7*a)) * (1+tanh(0.05*a)) * (1+1/(1+exp(-0.01*a))) * (1+0.002*cos(3*a)) * (1+0.002*(sin(2.5*a)+0.001*cos(3.5*a)+0.0015*sin(3*a))) * (1+1/(1+exp(-0.03*a))) * (1+tanh(0.07*a)) * (1+cos(3.1*a)) * (1+1/(1+exp(-0.04*a))) * (1+tanh(0.08*a)) * (1+cos(3.2*a)) * (1+1/(1+exp(-0.05*a))) * (1+tanh(0.1*a)) * (1+cos(3.4*a)) * (1+1/(1+exp(-0.06*a))) * (1+tanh(0.12*a)) * (1+cos(3.6*a)) * softplus(softplus(softplus(0.865/(1+a))))\nextra = (E_comp)^(0.9478 + 0.00018*ln(1+a))\nExponent = (0.9478 + 0.00018*ln(1+a)) * (1 + 0.0055*sin(2.9*a) + 0.0015*cos(3.9*a) + 0.0035*sin(3.5*a) + 0.0025*cos(4.5*a) + 0.0015*sin(3.0*a) + 0.0007*cos(4.2*a) + 0.0015*sin(2.7*a)*cos(3.4*a) + 0.0025*cos(3.8*a) + 0.0015*sin(2.8*a))\nf_x = sign(z) * ( (f_adapt * T * extra)^(Exponent) )\nU = beta + gamma * f_x\nP(accept=1) = 1/(1 + exp(-U))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"beta\": {\n      \"description\": \"Base intercept parameter for latent utility\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": -10,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Scaling parameter for the transformed signal in latent utility\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Parameter modulating the sensitivity of the negative branch in f_adapt\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0.5,\n          \"max\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"F1\": {\n      \"description\": \"Fixed component F1 derived from participant/design data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"F2\": {\n      \"description\": \"Fixed component F2 derived from participant/design data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"F3\": {\n      \"description\": \"Fixed component F3 derived from participant/design data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"F4\": {\n      \"description\": \"Fixed component F4 derived from participant/design data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"F5\": {\n      \"description\": \"Fixed component F5 derived from participant/design data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"F6\": {\n      \"description\": \"Fixed component F6 derived from participant/design data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"F7\": {\n      \"description\": \"Fixed component F7 derived from participant/design data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"F8\": {\n      \"description\": \"Fixed component F8 derived from participant/design data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"F9\": {\n      \"description\": \"Fixed component F9 derived from participant/design data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"F10\": {\n      \"description\": \"Fixed component F10 derived from participant/design data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"F11\": {\n      \"description\": \"Fixed component F11 derived from participant/design data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"delta\": {\n      \"description\": \"Small constant offset added to the sum of fixed components\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a\": {\n      \"description\": \"Core sum computed as the sum of F1 through F11 plus delta\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a_mod\": {\n      \"description\": \"Modified core sum a after nonlinear modulation\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"z\": {\n      \"description\": \"Composite transformed signal after sequential multiplicative factors\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"w\": {\n      \"description\": \"Exponent weight computed from phi\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_adapt\": {\n      \"description\": \"Adaptive transformation of z with piecewise function for positive and negative z\",\n      \"range\": {\n        \"min\": -30,\n        \"max\": 30\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"T\": {\n      \"description\": \"Dynamic threshold computed as the finite sum \u03a3[k=0 to 65] (a/2)^k\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"E_comp\": {\n      \"description\": \"Extra composite product from multiple nonlinear factors\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"extra\": {\n      \"description\": \"Extra composite term obtained by raising E_comp to the power (0.9478+0.00018*ln(1+a))\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"Exponent\": {\n      \"description\": \"Final exponent modulation factor combining a base exponent and oscillatory multipliers\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_x\": {\n      \"description\": \"Final transformed signal f(x) computed as sign(z)*[f_adapt*T*extra]^(Exponent)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed as beta + gamma*f(x)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"accept\": {\n      \"description\": \"Binary decision variable indicating acceptance (1) or rejection (0)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA nonlinear decision\u2010model in which a core signal a\u2014computed as the sum of 11 fixed components plus a small offset\u2014is modulated through a series of sinusoidal, exponential, and composite multiplicative factors. The transformed signal f(x) is obtained by an adaptive piecewise mapping (f_adapt), a dynamic threshold sum T, and an extra composite term enhanced with nested softplus and oscillatory multipliers, all raised to a modulated exponent. The latent utility U is then a linear combination of a baseline (beta) and the transformed signal scaled by gamma, with decision probabilities calculated through a logistic function.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: a = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + delta\na_mod = 1.08 * a * (1 + 0.012*sin(a + 0.045))\nz = a_mod * (1 + 0.008*cos(a + 0.065)) * (1 + 0.005*sin(a + 0.115)) * (1 + 0.004*cos(a + 0.085)) * (1 + 0.006*sin(a + 0.035)*cos(a + 0.055)) * (1 + 0.003*sin(a + 0.03)*cos(a + 0.05))\nw = (phi - 0.5)/phi\nf_adapt = { z >= 0 : clip(1.002 * (z^w * (ln(1+z))^(1-w) * (z/(1+abs(z)))), -30, 30)\n            z < 0  : phi * ((z + 1e-6)/(1+abs(z+1e-6)))^(32) }\nT = \u03a3[k=0 to 65] (a/2)^k\nE_comp = exp(-a/0.1) * (z/(1+abs(z))) * (1+0.005*sin(1/(1+a))) * (1+0.002*cos(0.5*a)) * (1+0.003*cos(0.3*a))^2 * (1+0.004*cos(0.3*a))^2 * (1+0.0025*cos(0.7*a)) * (1+tanh(0.05*a)) * (1+1/(1+exp(-0.01*a))) * (1+0.002*cos(3*a)) * (1+0.002*(sin(2.5*a)+0.001*cos(3.5*a)+0.0015*sin(3*a))) * (1+1/(1+exp(-0.03*a))) * (1+tanh(0.07*a)) * (1+cos(3.1*a)) * (1+1/(1+exp(-0.04*a))) * (1+tanh(0.08*a)) * (1+cos(3.2*a)) * (1+1/(1+exp(-0.05*a))) * (1+tanh(0.1*a)) * (1+cos(3.4*a)) * (1+1/(1+exp(-0.06*a))) * (1+tanh(0.12*a)) * (1+cos(3.6*a)) * softplus(softplus(softplus(0.865/(1+a))))\nextra = (E_comp)^(0.9478 + 0.00018*ln(1+a))\nExponent = (0.9478 + 0.00018*ln(1+a)) * (1 + 0.0055*sin(2.9*a) + 0.0015*cos(3.9*a) + 0.0035*sin(3.5*a) + 0.0025*cos(4.5*a) + 0.0015*sin(3.0*a) + 0.0007*cos(4.2*a) + 0.0015*sin(2.7*a)*cos(3.4*a) + 0.0025*cos(3.8*a) + 0.0015*sin(2.8*a))\nf_x = sign(z) * ( (f_adapt * T * extra)^(Exponent) )\nU = beta + gamma * f_x\nP(accept=1) = 1/(1 + exp(-U))\nSummary: A nonlinear decision\u2010model in which a core signal a\u2014computed as the sum of 11 fixed components plus a small offset\u2014is modulated through a series of sinusoidal, exponential, and composite multiplicative factors. The transformed signal f(x) is obtained by an adaptive piecewise mapping (f_adapt), a dynamic threshold sum T, and an extra composite term enhanced with nested softplus and oscillatory multipliers, all raised to a modulated exponent. The latent utility U is then a linear combination of a baseline (beta) and the transformed signal scaled by gamma, with decision probabilities calculated through a logistic function.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, beta=0, gamma=1, phi=1):\n    model_predictions = []\n    for trial in trial_data:\n        F1 = trial.get(\"F1\", 0)\n        F2 = trial.get(\"F2\", 0)\n        F3 = trial.get(\"F3\", 0)\n        F4 = trial.get(\"F4\", 0)\n        F5 = trial.get(\"F5\", 0)\n        F6 = trial.get(\"F6\", 0)\n        F7 = trial.get(\"F7\", 0)\n        F8 = trial.get(\"F8\", 0)\n        F9 = trial.get(\"F9\", 0)\n        F10 = trial.get(\"F10\", 0)\n        F11 = trial.get(\"F11\", 0)\n        delta = trial.get(\"delta\", 0)\n\n        a = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + delta\n        a_mod = 1.08 * a * (1 + 0.012*math.sin(a + 0.045))\n        z = a_mod * (1 + 0.008*math.cos(a + 0.065)) * (1 + 0.005*math.sin(a + 0.115)) * (1 + 0.004*math.cos(a + 0.085)) * (1 + 0.006*math.sin(a + 0.035)*math.cos(a + 0.055)) * (1 + 0.003*math.sin(a + 0.03)*math.cos(a + 0.05))\n        w = (phi - 0.5)/phi\n\n        if z >= 0:\n            f_adapt = min(max(1.002 * (z**w * (math.log(1+z) if (1+z) > 0 else 0)**(1-w) * (z/(1+abs(z)))), -30), 30)\n        else:\n            f_adapt = phi * ((z + 1e-6)/(1+abs(z+1e-6)))**(32)\n\n        T = sum((a/2)**k for k in range(66))\n\n        E_comp = math.exp(-a/0.1) * (z/(1+abs(z))) * (1+0.005*math.sin(1/(1+a) if (1+a) > 0 else 0)) * (1+0.002*math.cos(0.5*a)) * (1+0.003*math.cos(0.3*a))**2 * (1+0.004*math.cos(0.3*a))**2 * (1+0.0025*math.cos(0.7*a)) * (1+math.tanh(0.05*a)) * (1+1/(1+math.exp(-0.01*a))) * (1+0.002*math.cos(3*a)) * (1+0.002*(math.sin(2.5*a)+0.001*math.cos(3.5*a)+0.0015*math.sin(3*a))) * (1+1/(1+math.exp(-0.03*a))) * (1+math.tanh(0.07*a)) * (1+math.cos(3.1*a)) * (1+1/(1+math.exp(-0.04*a))) * (1+math.tanh(0.08*a)) * (1+math.cos(3.2*a)) * (1+1/(1+math.exp(-0.05*a))) * (1+math.tanh(0.1*a)) * (1+math.cos(3.4*a)) * (1+1/(1+math.exp(-0.06*a))) * (1+math.tanh(0.12*a)) * (1+math.cos(3.6*a))\n\n        softplus_inner = 0.865/(1+a)\n        softplus_middle = math.log(1 + math.exp(softplus_inner))\n        softplus_outer = math.log(1 + math.exp(softplus_middle))\n        E_comp *= math.log(1 + math.exp(softplus_outer))\n\n\n        extra = (E_comp)**(0.9478 + 0.00018*math.log(1+a) if (1+a) > 0 else 0)\n        Exponent = (0.9478 + 0.00018*math.log(1+a) if (1+a) > 0 else 0) * (1 + 0.0055*math.sin(2.9*a) + 0.0015*math.cos(3.9*a) + 0.0035*math.sin(3.5*a) + 0.0025*math.cos(4.5*a) + 0.0015*math.sin(3.0*a) + 0.0007*math.cos(4.2*a) + 0.0015*math.sin(2.7*a)*math.cos(3.4*a) + 0.0025*math.cos(3.8*a) + 0.0015*math.sin(2.8*a))\n        \n        if (f_adapt * T * extra) >= 0:\n            f_x = (1 if z >=0 else -1) * ( (f_adapt * T * extra)**(Exponent) )\n        else:\n            f_x = (1 if z >=0 else -1) * (-1 * abs((f_adapt * T * extra))**(Exponent))\n        \n        U = beta + gamma * f_x\n        P_accept = 1/(1 + math.exp(-U))\n        \n        model_predictions.append(P_accept)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.5656288156288156,
  "fitting_results": [
    {
      "beta": -10.0,
      "gamma": 5.110687279990097,
      "phi": 0.9921708631940098,
      "success": true,
      "log_likelihood": -24.953979470262787,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 5.873165758494653,
      "phi": 1.1305932333158886,
      "success": true,
      "log_likelihood": -24.953298502232386,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.07851528211228,
      "gamma": 6.196634599006915,
      "phi": 1.4796758741701037,
      "success": true,
      "log_likelihood": -24.897714326476844,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.039294060739659686,
      "phi": 1.4015018195192606,
      "success": true,
      "log_likelihood": -24.953434695838467,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 6.390985505782786,
      "phi": 1.1984547029286494,
      "success": true,
      "log_likelihood": -24.953389297969775,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.28407410436627617,
      "gamma": 2.2297321120127114,
      "phi": 0.5336375226621349,
      "success": true,
      "log_likelihood": -23.54597316384957,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 1.1543386581269843,
      "phi": 1.037335411074252,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.8149608764325786,
      "gamma": 2.3360692132701044,
      "phi": 1.2810177860507717,
      "success": true,
      "log_likelihood": -22.91451005277453,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 3.7797521985060545,
      "phi": 0.8326385606926078,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 6.757365611519134,
      "phi": 0.9277832461495095,
      "success": true,
      "log_likelihood": -24.95348009370716,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 2.408090415211621,
      "phi": 1.1502412259820134,
      "success": true,
      "log_likelihood": -24.95338929796977,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.8681537921263527,
      "phi": 1.299996037980946,
      "success": true,
      "log_likelihood": -24.953934072394095,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 7.2467623300105855,
      "phi": 0.8748331293392511,
      "success": true,
      "log_likelihood": -24.953434695838467,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.5817104807376416,
      "phi": 0.5170429598771806,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 2.0628496233788995,
      "phi": 1.3614616735091827,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 8.973886136993904,
      "phi": 1.3879560640916557,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 8.31116375954634,
      "phi": 1.1329407258634978,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 3.5751121599717814,
      "phi": 1.3034792958162036,
      "success": true,
      "log_likelihood": -16.27763329973089,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 1.1328455611015587,
      "phi": 0.9223325964160953,
      "success": true,
      "log_likelihood": -15.27767869783462,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 4.275928118130611,
      "phi": 0.831229134012058,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 7.093546059371603,
      "gamma": 8.988953122823553,
      "phi": 1.1949633425833843,
      "success": true,
      "log_likelihood": -27.27218067595244,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 9.196595096905273,
      "phi": 1.4877554862283247,
      "success": true,
      "log_likelihood": -16.27763329973089,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 6.839291906009912,
      "phi": 1.458453899126606,
      "success": true,
      "log_likelihood": -24.95352549157585,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.0774996421172327,
      "gamma": 4.228205248840351,
      "phi": 1.0691035217148592,
      "success": true,
      "log_likelihood": -24.89771435098641,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -9.05699933839623,
      "gamma": 4.158870821169829,
      "phi": 0.7767439846868684,
      "success": true,
      "log_likelihood": -24.95329855409467,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.6790600254497802,
      "gamma": 5.8922646201017645,
      "phi": 0.7350424519036396,
      "success": true,
      "log_likelihood": -24.4509575685003,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.2474519918731901,
      "gamma": 1.8043738449496527,
      "phi": 1.389978592238248,
      "success": true,
      "log_likelihood": -24.730616750321936,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.5437933803804818,
      "phi": 0.7564808502187519,
      "success": true,
      "log_likelihood": -24.953661685181935,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 5.564154808348767,
      "phi": 0.8880664951311343,
      "success": true,
      "log_likelihood": -15.27767869783462,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 5.256836664788316,
      "phi": 1.4894788037479854,
      "success": true,
      "log_likelihood": -19.2774971054197,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 4.116543364456758,
      "phi": 0.5046070575631151,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -9.999999999999998,
      "gamma": 0.5128020730646321,
      "phi": 0.8407443803652535,
      "success": true,
      "log_likelihood": -24.953979470262787,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 4.205404759302025,
      "phi": 1.4372379010619312,
      "success": true,
      "log_likelihood": -24.953434695838464,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 3.405071206066621,
      "phi": 1.4570118522448574,
      "success": true,
      "log_likelihood": -24.953480093707164,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 2.3739413291563602,
      "phi": 0.855330163397312,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.28406849899116515,
      "gamma": 4.9588640300318865,
      "phi": 1.4014614389274789,
      "success": true,
      "log_likelihood": -23.545973163858545,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.5230080748476753,
      "gamma": 2.652716554946238,
      "phi": 0.8276600397244799,
      "success": true,
      "log_likelihood": -22.157938154733642,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 6.6083250440616315,
      "phi": 0.9573608342967069,
      "success": true,
      "log_likelihood": -24.953298502232386,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.8147054967124711,
      "gamma": 0.8530386124822797,
      "phi": 0.6241070150402354,
      "success": true,
      "log_likelihood": -22.91451005656019,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 5.945431384315039,
      "phi": 1.258624105886395,
      "success": true,
      "log_likelihood": -14.277724095938346,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.1926488001492878,
      "gamma": 2.5447859760786273,
      "phi": 1.2101391909013235,
      "success": true,
      "log_likelihood": -24.056945188728402,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 1.7797693638366086,
      "phi": 0.5946632272240923,
      "success": true,
      "log_likelihood": -24.95375248091932,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.5094731886261927,
      "phi": 1.312203803121974,
      "success": true,
      "log_likelihood": -12.277814892145805,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -9.438285326031691,
      "gamma": 8.859846118741357,
      "phi": 1.1407292752812572,
      "success": true,
      "log_likelihood": -24.953139300538062,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.19265127640189925,
      "gamma": 5.275601092232444,
      "phi": 1.112704569660261,
      "success": true,
      "log_likelihood": -24.05694518872432,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 3.0692547351770605,
      "gamma": 3.460460293066392,
      "phi": 1.4013780719545759,
      "success": true,
      "log_likelihood": -21.270320891394405,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.0809113465928744,
      "gamma": 4.761792966952372,
      "phi": 0.5696623082933739,
      "success": true,
      "log_likelihood": -24.89771462644834,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.16480483942427848,
      "phi": 0.9747647225528898,
      "success": true,
      "log_likelihood": -24.95348009370716,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 2.2960758931675684,
      "phi": 1.2668290973859335,
      "success": true,
      "log_likelihood": -24.953434695838464,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.077563233617536,
      "gamma": 7.464383944503627,
      "phi": 1.1812963770858274,
      "success": true,
      "log_likelihood": -24.89771434679507,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.5229962546097477,
      "gamma": 0.08087846595275283,
      "phi": 0.9551669011850074,
      "success": true,
      "log_likelihood": -22.157938154739124,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 8.318131985861946,
      "phi": 0.8978484105201313,
      "success": true,
      "log_likelihood": -24.9538886745254,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.0803595446489735,
      "gamma": 4.8505176814200635,
      "phi": 0.5484282911422336,
      "success": true,
      "log_likelihood": -24.897714512923322,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.6790780375241693,
      "gamma": 1.475591558332885,
      "phi": 0.6134893193878067,
      "success": true,
      "log_likelihood": -24.450957568610104,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 7.924995844629203,
      "phi": 1.022384018917391,
      "success": true,
      "log_likelihood": -24.95348009370716,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 8.359693891915743,
      "phi": 0.911045812001462,
      "success": true,
      "log_likelihood": -24.953570889444546,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 1.103269103615171,
      "phi": 0.6192236307980795,
      "success": true,
      "log_likelihood": -24.953661685181938,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 1.919900852928692,
      "phi": 1.0025235534098862,
      "success": true,
      "log_likelihood": -15.27767869783462,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 3.076355385169406,
      "phi": 1.4330389336878049,
      "success": true,
      "log_likelihood": -24.953934072394095,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 6.0895226162932055,
      "phi": 0.9113492581940389,
      "success": true,
      "log_likelihood": -18.27754250352343,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.1926012687693204,
      "gamma": 7.733799475402271,
      "phi": 0.8696118854001662,
      "success": true,
      "log_likelihood": -24.056945189430245,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3333333333333333,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.7157693125209064,
      "phi": 1.2835126055115023,
      "success": true,
      "log_likelihood": -24.953298502232386,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 4.833463477448476,
      "phi": 1.390309257572113,
      "success": true,
      "log_likelihood": -24.953979470262787,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 7.331422086534686,
      "phi": 1.0005488950961396,
      "success": true,
      "log_likelihood": -24.95338929796977,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 7.251499870653724,
      "phi": 1.2286827629138326,
      "success": true,
      "log_likelihood": -24.95375248091932,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.2474330506706475,
      "gamma": 0.7541359424063843,
      "phi": 1.1188611518192744,
      "success": true,
      "log_likelihood": -24.730616750310638,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 9.56104647629196,
      "gamma": 7.542271404413675,
      "phi": 0.8211568690652838,
      "success": true,
      "log_likelihood": -14.27789126199152,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 9.866265956470293,
      "phi": 1.2349750239138808,
      "success": true,
      "log_likelihood": -16.277633299730887,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.2476022946821463,
      "gamma": 1.4205452959060039,
      "phi": 1.0265083894663776,
      "success": true,
      "log_likelihood": -24.730616753808615,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 9.999999999999998,
      "gamma": 8.820195985760277,
      "phi": 0.7807907586644043,
      "success": true,
      "log_likelihood": -14.27772409593835,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 7.17271504731815,
      "phi": 0.927778390185093,
      "success": true,
      "log_likelihood": -24.953934072394095,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 3.1433180338883426,
      "phi": 1.0153687762985928,
      "success": true,
      "log_likelihood": -24.9538886745254,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.0782945405594484,
      "gamma": 7.942687297003511,
      "phi": 0.5945919766004967,
      "success": true,
      "log_likelihood": -24.897714324108254,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 9.734281364041857,
      "phi": 1.1393631278773402,
      "success": true,
      "log_likelihood": -19.2774971054197,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -6.226511484023862,
      "gamma": 8.023797173503842,
      "phi": 1.3436878458538097,
      "success": true,
      "log_likelihood": -24.95331600022511,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.522990645972975,
      "gamma": 3.241788685009097,
      "phi": 1.0196624380597261,
      "success": true,
      "log_likelihood": -22.157938154749793,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 8.927659392596933,
      "phi": 0.9883331842193779,
      "success": true,
      "log_likelihood": -13.277769494042078,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 1.3417201394469858,
      "phi": 0.7611344283926655,
      "success": true,
      "log_likelihood": -24.95402486813148,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.19265370317226466,
      "gamma": 9.88266670088817,
      "phi": 0.7426536710384269,
      "success": true,
      "log_likelihood": -24.05694518872346,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 1.7660887076251386,
      "phi": 0.7155926022506287,
      "success": true,
      "log_likelihood": -24.953979470262784,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.079629106507261,
      "gamma": 2.9673590871234277,
      "phi": 1.4264134173460574,
      "success": true,
      "log_likelihood": -24.897714403513746,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 2.687035011943647,
      "phi": 0.9846545269454001,
      "success": true,
      "log_likelihood": -14.277724095938348,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 7.641454049647514,
      "phi": 1.0629061839573266,
      "success": true,
      "log_likelihood": -24.953934072394095,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 1.9852037719158144,
      "phi": 1.1528180571950581,
      "success": true,
      "log_likelihood": -24.953298502232386,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.19265419959872546,
      "gamma": 6.974566366422694,
      "phi": 1.0119271595935069,
      "success": true,
      "log_likelihood": -24.05694518872369,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 3.532423059266694,
      "phi": 1.4180928627316012,
      "success": true,
      "log_likelihood": -24.95393407239409,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.5230377896176852,
      "gamma": 3.2680987250509705,
      "phi": 0.6837752732601168,
      "success": true,
      "log_likelihood": -22.1579381548217,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 9.279789996142087,
      "phi": 0.60070429488202,
      "success": true,
      "log_likelihood": -24.95375248091932,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 4.748818429077638,
      "phi": 0.5799230626684333,
      "success": true,
      "log_likelihood": -13.277769494042078,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.16749239425109308,
      "phi": 0.620609899045389,
      "success": true,
      "log_likelihood": -24.953343900101082,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.5230281568284172,
      "gamma": 7.6458770738144235,
      "phi": 1.3955418715373789,
      "success": true,
      "log_likelihood": -22.157938154777206,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "beta": {
        "r": 0.7450060484575982,
        "p": 6.27562967496303e-19
      },
      "gamma": {
        "r": 0.1438645235569872,
        "p": 0.15329244593215988
      },
      "phi": {
        "r": -0.021168930771809577,
        "p": 0.8344082223864371
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 53.98344627086312,
  "bic_results": {
    "average_bic": 53.98344627086312,
    "individual_bics": [
      60.6585157558939,
      60.6571538198331,
      60.545985468322016,
      60.65742620704526,
      60.65733541130788,
      57.842503143067475,
      33.3062773958674,
      56.57957692091739,
      33.3062773958674,
      60.657517002782654,
      60.65733541130787,
      60.65842496015652,
      60.65742620704526,
      33.3062773958674,
      33.3062773958674,
      33.3062773958674,
      33.3062773958674,
      43.305823414830115,
      41.305914211037575,
      33.3062773958674,
      65.29491816727321,
      43.305823414830115,
      60.65760779852003,
      60.54598551734115,
      60.65715392355767,
      59.65247195236893,
      60.2117903160122,
      60.657880185732196,
      41.305914211037575,
      49.30555102620774,
      33.3062773958674,
      60.6585157558939,
      60.65742620704526,
      60.657517002782654,
      33.3062773958674,
      57.84250314308542,
      55.06643312483561,
      60.6571538198331,
      56.579576928488706,
      39.30600500724502,
      58.86444719282514,
      60.65806177720697,
      35.30618659965994,
      60.65683541644445,
      58.86444719281697,
      53.29119859815714,
      60.54598606826501,
      60.657517002782654,
      60.65742620704526,
      60.545985508958466,
      55.06643312484658,
      60.65833416441913,
      60.54598584121497,
      59.65247195258854,
      60.657517002782654,
      60.657698594257425,
      60.65788018573221,
      41.305914211037575,
      60.65842496015652,
      47.3056418224152,
      58.864447194228816,
      60.6571538198331,
      60.6585157558939,
      60.65733541130787,
      60.65806177720697,
      60.2117903159896,
      39.30633933935137,
      43.3058234148301,
      60.211790322985564,
      39.306005007245034,
      60.65842496015652,
      60.65833416441913,
      60.54598546358484,
      49.30555102620774,
      60.65718881581856,
      55.06643312486791,
      37.306095803452486,
      60.658606551631294,
      58.86444719281525,
      60.6585157558939,
      60.54598562239582,
      39.30600500724503,
      60.65842496015652,
      60.6571538198331,
      58.86444719281572,
      60.65842496015651,
      55.06643312501173,
      60.65806177720697,
      37.306095803452486,
      60.65724461557049,
      55.06643312492274
    ],
    "group_enabled": false,
    "group_bics": null,
    "num_parameters": 3,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- beta: r = 0.745\n- gamma: r = 0.144\n- phi: r = -0.021",
  "previous_models": [
    "Specification: a = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + delta\na_mod = 1.08 * a * (1 + 0.012*sin(a + 0.045))\nz = a_mod * (1 + 0.008*cos(a + 0.065)) * (1 + 0.005*sin(a + 0.115)) * (1 + 0.004*cos(a + 0.085)) * (1 + 0.006*sin(a + 0.035)*cos(a + 0.055)) * (1 + 0.003*sin(a + 0.03)*cos(a + 0.05))\nw = (phi - 0.5)/phi\nf_adapt = { z >= 0 : clip(1.002 * (z^w * (ln(1+z))^(1-w) * (z/(1+abs(z)))), -30, 30)\n            z < 0  : phi * ((z + 1e-6)/(1+abs(z+1e-6)))^(32) }\nT = \u03a3[k=0 to 65] (a/2)^k\nE_comp = exp(-a/0.1) * (z/(1+abs(z))) * (1+0.005*sin(1/(1+a))) * (1+0.002*cos(0.5*a)) * (1+0.003*cos(0.3*a))^2 * (1+0.004*cos(0.3*a))^2 * (1+0.0025*cos(0.7*a)) * (1+tanh(0.05*a)) * (1+1/(1+exp(-0.01*a))) * (1+0.002*cos(3*a)) * (1+0.002*(sin(2.5*a)+0.001*cos(3.5*a)+0.0015*sin(3*a))) * (1+1/(1+exp(-0.03*a))) * (1+tanh(0.07*a)) * (1+cos(3.1*a)) * (1+1/(1+exp(-0.04*a))) * (1+tanh(0.08*a)) * (1+cos(3.2*a)) * (1+1/(1+exp(-0.05*a))) * (1+tanh(0.1*a)) * (1+cos(3.4*a)) * (1+1/(1+exp(-0.06*a))) * (1+tanh(0.12*a)) * (1+cos(3.6*a)) * softplus(softplus(softplus(0.865/(1+a))))\nextra = (E_comp)^(0.9478 + 0.00018*ln(1+a))\nExponent = (0.9478 + 0.00018*ln(1+a)) * (1 + 0.0055*sin(2.9*a) + 0.0015*cos(3.9*a) + 0.0035*sin(3.5*a) + 0.0025*cos(4.5*a) + 0.0015*sin(3.0*a) + 0.0007*cos(4.2*a) + 0.0015*sin(2.7*a)*cos(3.4*a) + 0.0025*cos(3.8*a) + 0.0015*sin(2.8*a))\nf_x = sign(z) * ( (f_adapt * T * extra)^(Exponent) )\nU = beta + gamma * f_x\nP(accept=1) = 1/(1 + exp(-U))\nSummary: A nonlinear decision\u2010model in which a core signal a\u2014computed as the sum of 11 fixed components plus a small offset\u2014is modulated through a series of sinusoidal, exponential, and composite multiplicative factors. The transformed signal f(x) is obtained by an adaptive piecewise mapping (f_adapt), a dynamic threshold sum T, and an extra composite term enhanced with nested softplus and oscillatory multipliers, all raised to a modulated exponent. The latent utility U is then a linear combination of a baseline (beta) and the transformed signal scaled by gamma, with decision probabilities calculated through a logistic function.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 53.98344627086312\nOverall Accuracy: 0.5656\n\nParameter Recovery:\n- beta: r = 0.745\n- gamma: r = 0.144\n- phi: r = -0.021"
  ]
}