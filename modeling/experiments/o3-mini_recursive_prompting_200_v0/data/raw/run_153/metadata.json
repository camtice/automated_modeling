{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "<think>\nFor run 153, we want to further boost the model\u2019s nonlinear flexibility while improving parameter recovery and lowering BIC. In particular, increase the negative branch exponent from 34 to 36. In the extra composite term, add three new multiplicative factors: one of the form [1 + sigmoid(0.08 * a)], one [1 + tanh(0.2 * a)], and one [1 + cos(4.0 * a)]. Also, nest an additional softplus layer within the extra term so that softplus is applied four times. We then extend the dynamic threshold T by summing from k = 0 to 80, and augment the final exponent modulation by multiplying it by an extra oscillatory term, for example [1 + 0.005 * tanh(0.5 * a)]. These modifications should encourage out\u2010of\u2010the\u2010box interactions that capture subtler nonlinearities.\n</think>\nNew Instructions for Run 153:\n\n1. Compute the core sum a as the sum of fixed components F1 through F11 plus a small constant \u03b4.\n2. Define a_mod = 1.08 \u00d7 a \u00d7 [1 + 0.012 \u00d7 sin(a + 0.045)].\n3. Sequentially multiply a_mod by:\n\u2003\u2003\u2022 [1 + 0.008 \u00d7 cos(a + 0.065)]\n\u2003\u2003\u2022 [1 + 0.005 \u00d7 sin(a + 0.115)]\n\u2003\u2003\u2022 [1 + 0.004 \u00d7 cos(a + 0.085)]\n\u2003\u2003\u2022 [1 + 0.006 \u00d7 (sin(a + 0.035) \u00d7 cos(a + 0.055))]\n\u2003\u2003\u2022 [1 + 0.003 \u00d7 (sin(a + 0.03) \u00d7 cos(a + 0.05))]\nLet z be the resulting product.\n4. Compute w = (phi \u2212 0.5) / phi.\n\u2003\u2003\u2022 For z \u2265 0, set f_adapt(z) = clip[1.002 \u00d7 (z^w \u00d7 (ln(1+z))^(1\u2212w) \u00d7 softsign(z)), \u221230, 30], where softsign(x) = x/(1+|x|).\n\u2003\u2003\u2022 For z < 0, set f_adapt(z) = phi \u00d7 [softsign(z + \u0394_shift)]^(36), with \u0394_shift = 1\u00d710\u207b\u2076.\n5. Define the dynamic threshold T as the sum for k = 0 to 80 of (a^k \u00d7 (\u00bd)^k.\n6. Define the extra composite term extra as the product of the following factors:\n\u2003\u2003\u2022 exp(\u2013a/0.1)\n\u2003\u2003\u2022 [z/(1+|z|)]\n\u2003\u2003\u2022 [1 + 0.005 \u00d7 sin(1/(1+a))]\n\u2003\u2003\u2022 [1 + 0.002 \u00d7 cos(0.5\u00d7a)]\n\u2003\u2003\u2022 ([1 + 0.003 \u00d7 cos(0.3\u00d7a)]\u00b2)\n\u2003\u2003\u2022 ([1 + 0.004 \u00d7 cos(0.3\u00d7a)]\u00b2)\n\u2003\u2003\u2022 [1 + 0.0025 \u00d7 cos(0.7\u00d7a)]\n\u2003\u2003\u2022 [1 + tanh(0.05\u00d7a)]\n\u2003\u2003\u2022 [1 + sigmoid(0.01\u00d7a)]\n\u2003\u2003\u2022 [1 + 0.002 \u00d7 cos(3\u00d7a)]\n\u2003\u2003\u2022 [1 + 0.002 \u00d7 (sin(2.5\u00d7a) + 0.001\u00d7cos(3.5\u00d7a) + 0.0015\u00d7sin(3\u00d7a))]\n\u2003\u2003\u2022 [1 + sigmoid(0.03\u00d7a)]\n\u2003\u2003\u2022 [1 + tanh(0.07\u00d7a)]\n\u2003\u2003\u2022 [1 + cos(3.1\u00d7a)]\n\u2003\u2003\u2022 [1 + sigmoid(0.04\u00d7a)]\n\u2003\u2003\u2022 [1 + tanh(0.08\u00d7a)]\n\u2003\u2003\u2022 [1 + cos(3.2\u00d7a)]\n\u2003\u2003\u2022 [1 + sigmoid(0.05\u00d7a)]\n\u2003\u2003\u2022 [1 + tanh(0.1\u00d7a)]\n\u2003\u2003\u2022 [1 + cos(3.4\u00d7a)]\n\u2003\u2003\u2022 [1 + sigmoid(0.06\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new)\\n\u2003\u2003\u2022 [1 + tanh(0.12\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new)\\n\u2003\u2003\u2022 [1 + cos(3.6\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new)\\n\u2003\u2003\u2022 [1 + sigmoid(0.08\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new)\\n\u2003\u2003\u2022 [1 + tanh(0.2\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new)\\n\u2003\u2003\u2022 [1 + cos(4.0\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new)\\n\u2003\u2003\u2022 Nest an additional softplus layer, i.e. use softplus(softplus(softplus(softplus(softplus(0.865/(1+a)))))).\\nThen raise the product to the power [0.9478 + 0.00018\u00d7ln(1+a)].\\n7. Define the final exponent modulation factor as:\\n\u2003\u2003Exponent = [0.9478 + 0.00018\u00d7ln(1+a)] \u00d7 [1 + 0.0055\u00d7sin(2.9\u00d7a) + 0.0015\u00d7cos(3.9\u00d7a) + 0.0035\u00d7sin(3.5\u00d7a) + 0.0025\u00d7cos(4.5\u00d7a) + 0.0015\u00d7sin(3.0\u00d7a) + 0.0007\u00d7cos(4.2\u00d7a) + 0.0015\u00d7(sin(2.7\u00d7a)\u00d7cos(3.4\u00d7a)) + 0.0025\u00d7cos(3.8\u00d7a) + 0.0015\u00d7sin(2.8\u00d7a) + 0.005\u00d7tanh(0.5\u00d7a)]\\n8. Compute the final transformed signal f(x) = sign(z) \u00d7 { [ f_adapt(z) \u00d7 T \u00d7 extra ]^(Exponent) }.\\n9. Compute latent utility U = beta + gamma \u00d7 f(x) and then let P(accept = 1) = 1/(1 + exp(\u2013U)).\\n10. Use exactly three learnable parameters with the following finite bounds: beta \u2208 [\u201310, 10], gamma \u2208 [0, 10], and phi \u2208 [0.5, 1.5].\\n</MODEL>\\n\\n<VARIABLES>\\n{\\n  \\\"variables\\\": {\\n    \\\"F1\\\": {\\n      \\\"description\\\": \\\"Fixed component 1 extracted from data\\\",\\n      \\\"range\\\": { \\\"min\\\": \\\"-inf\\\", \\\"max\\\": \\\"inf\\\", \\\"inclusive_min\\\": true, \\\"inclusive_max\\\": true },\\n      \\\"distribution\\\": { \\\"type\\\": \\\"empirical\\\" },\\n      \\\"learnable\\\": false,\\n      \\\"source\\\": \\\"data\\\"\\n    },\\n    \\\"F2\\\": { \\\"description\\\": \\\"Fixed component 2 extracted from data\\\", \\\"range\\\": { \\\"min\\\": \\\"-inf\\\", \\\"max\\\": \\\"inf\\\", \\\"inclusive_min\\\": true, \\\"inclusive_max\\\": true }, \\\"distribution\\\": { \\\"type\\\": \\\"empirical\\\" }, \\\"learnable\\\": false, \\\"source\\\": \\\"data\\\" },\\n    \\\"F3\\\": { \\\"description\\\": \\\"Fixed component 3 extracted from data\\\", \\\"range\\\": { \\\"min\\\": \\\"-inf\\\", \\\"max\\\": \\\"inf\\\", \\\"inclusive_min\\\": true, \\\"inclusive_max\\\": true }, \\\"distribution\\\": { \\\"type\\\": \\\"empirical\\\" }, \\\"learnable\\\": false, \\\"source\\\": \\\"data\\\" },\\n    \\\"F4\\\": { \\\"description\\\": \\\"Fixed component 4 extracted from data\\\", \\\"range\\\": { \\\"min\\\": \\\"-inf\\\", \\\"max\\\": \\\"inf\\\", \\\"inclusive_min\\\": true, \\\"inclusive_max\\\": true }, \\\"distribution\\\": { \\\"type\\\": \\\"empirical\\\" }, \\\"learnable\\\": false, \\\"source\\\": \\\"data\\\" },\\n    \\\"F5\\\": { \\\"description\\\": \\\"Fixed component 5 extracted from data\\\", \\\"range\\\": { \\\"min\\\": \\\"-inf\\\", \\\"max\\\": \\\"inf\\\", \\\"inclusive_min\\\": true, \\\"inclusive_max\\\": true }, \\\"distribution\\\": { \\\"type\\\": \\\"empirical\\\" }, \\\"learnable\\\": false, \\\"source\\\": \\\"data\\\" },\\n    \\\"F6\\\": { \\\"description\\\": \\\"Fixed component 6 extracted from data\\\", \\\"range\\\": { \\\"min\\\": \\\"-inf\\\", \\\"max\\\": \\\"inf\\\", \\\"inclusive_min\\\": true, \\\"inclusive_max\\\": true }, \\\"distribution\\\": { \\\"type\\\": \\\"empirical\\\" }, \\\"learnable\\\": false, \\\"source\\\": \\\"data\\\" },\\n    \\\"F7\\\": { \\\"description\\\": \\\"Fixed component 7 extracted from data\\\", \\\"range\\\": { \\\"min\\\": \\\"-inf\\\", \\\"max\\\": \\\"inf\\\", \\\"inclusive_min\\\": true, \\\"inclusive_max\\\": true }, \\\"distribution\\\": { \\\"type\\\": \\\"empirical\\\" }, \\\"learnable\\\": false, \\\"source\\\": \\\"data\\\" },\\n    \\\"F8\\\": { \\\"description\\\": \\\"Fixed component 8 extracted from data\\\", \\\"range\\\": { \\\"min\\\": \\\"-inf\\\", \\\"max\\\": \\\"inf\\\", \\\"inclusive_min\\\": true, \\\"inclusive_max\\\": true }, \\\"distribution\\\": { \\\"type\\\": \\\"empirical\\\" }, \\\"learnable\\\": false, \\\"source\\\": \\\"data\\\" },\\n    \\\"F9\\\": { \\\"description\\\": \\\"Fixed component 9 extracted from data\\\", \\\"range\\\": { \\\"min\\\": \\\"-inf\\\", \\\"max\\\": \\\"inf\\\", \\\"inclusive_min\\\": true, \\\"inclusive_max\\\": true }, \\\"distribution\\\": { \\\"type\\\": \\\"empirical\\\" }, \\\"learnable\\\": false, \\\"source\\\": \\\"data\\\" },\\n    \\\"F10\\\": { \\\"description\\\": \\\"Fixed component 10 extracted from data\\\", \\\"range\\\": { \\\"min\\\": \\\"-inf\\\", \\\"max\\\": \\\"inf\\\", \\\"inclusive_min\\\": true, \\\"inclusive_max\\\": true }, \\\"distribution\\\": { \\\"type\\\": \\\"empirical\\\" }, \\\"learnable\\\": false, \\\"source\\\": \\\"data\\\" },\\n    \\\"F11\\\": { \\\"description\\\": \\\"Fixed component 11 extracted from data\\\", \\\"range\\\": { \\\"min\\\": \\\"-inf\\\", \\\"max\\\": \\\"inf\\\", \\\"inclusive_min\\\": true, \\\"inclusive_max\\\": true }, \\\"distribution\\\": { \\\"type\\\": \\\"empirical\\\" }, \\\"learnable\\\": false, \\\"source\\\": \\\"data\\\" },\\n    \\\"\u03b4\\\": { \\\"description\\\": \\\"Small constant offset added to the sum of fixed components\\\", \\\"range\\\": { \\\"min\\\": 1e-9, \\\"max\\\": 0.001, \\\"inclusive_min\\\": true, \\\"inclusive_max\\\": true }, \\\"distribution\\\": { \\\"type\\\": \\\"constant\\\", \\\"parameters\\\": { \\\"value\\\": 1e-6 } }, \\\"learnable\\\": false, \\\"source\\\": \\\"calculated\\\" },\\n    \\\"beta\\\": { \\\"description\\\": \\\"Learnable intercept parameter (base bias) for latent utility\\\", \\\"range\\\": { \\\"min\\\": -10, \\\"max\\\": 10, \\\"inclusive_min\\\": true, \\\"inclusive_max\\\": true }, \\\"distribution\\\": { \\\"type\\\": \\\"uniform\\\", \\\"parameters\\\": { \\\"low\\\": -10, \\\"high\\\": 10 } }, \\\"learnable\\\": true, \\\"source\\\": \\\"learnable\\\" },\\n    \\\"gamma\\\": { \\\"description\\\": \\\"Learnable scaling parameter for the transformed signal\\\", \\\"range\\\": { \\\"min\\\": 0, \\\"max\\\": 10, \\\"inclusive_min\\\": true, \\\"inclusive_max\\\": true }, \\\"distribution\\\": { \\\"type\\\": \\\"uniform\\\", \\\"parameters\\\": { \\\"low\\\": 0, \\\"high\\\": 10 } }, \\\"learnable\\\": true, \\\"source\\\": \\\"learnable\\\" },\\n    \\\"phi\\\": { \\\"description\\\": \\\"Learnable parameter governing the adaptive nonlinearity (especially in the negative branch)\\\", \\\"range\\\": { \\\"min\\\": 0.5, \\\"max\\\": 1.5, \\\"inclusive_min\\\": true, \\\"inclusive_max\\\": true }, \\\"distribution\\\": { \\\"type\\\": \\\"uniform\\\", \\\"parameters\\\": { \\\"low\\\": 0.5, \\\"high\\\": 1.5 } }, \\\"learnable\\\": true, \\\"source\\\": \\\"learnable\\\" },\\n    \\\"a\\\": { \\\"description\\\": \\\"Core sum computed from fixed components and \u03b4\\\", \\\"range\\\": { \\\"min\\\": \\\"-inf\\\", \\\"max\\\": \\\"inf\\\" }, \\\"learnable\\\": false, \\\"source\\\": \\\"calculated\\\" },\\n    \\\"a_mod\\\": { \\\"description\\\": \\\"Modified core sum after the first nonlinear transformation\\\", \\\"range\\\": { \\\"min\\\": \\\"-inf\\\", \\\"max\\\": \\\"inf\\\" }, \\\"learnable\\\": false, \\\"source\\\": \\\"calculated\\\" },\\n    \\\"z\\\": { \\\"description\\\": \\\"Intermediate signal after sequential nonlinear modulation\\\", \\\"range\\\": { \\\"min\\\": \\\"-inf\\\", \\\"max\\\": \\\"inf\\\" }, \\\"learnable\\\": false, \\\"source\\\": \\\"calculated\\\" },\\n    \\\"w\\\": { \\\"description\\\": \\\"Exponent weight computed from phi\\\", \\\"range\\\": { \\\"min\\\": \\\"-inf\\\", \\\"max\\\": \\\"inf\\\" }, \\\"learnable\\\": false, \\\"source\\\": \\\"calculated\\\" },\\n    \\\"f_adapt\\\": { \\\"description\\\": \\\"Adaptive transformed value from z; uses a power of 34 in the negative branch\\\", \\\"range\\\": { \\\"min\\\": -30, \\\"max\\\": 30 }, \\\"learnable\\\": false, \\\"source\\\": \\\"calculated\\\" },\\n    \\\"T\\\": { \\\"description\\\": \\\"Dynamic threshold computed as the sum from k = 0 to 70 of (a^k*(1/2)^k\\\", \\\"range\\\": { \\\"min\\\": 0, \\\"max\\\": \\\"inf\\\" }, \\\"learnable\\\": false, \\\"source\\\": \\\"calculated\\\" },\\n    \\\"extra\\\": { \\\"description\\\": \\\"Composite extra term from multiple multiplicative nonlinear functions including an extra nested softplus layer\\\", \\\"range\\\": { \\\"min\\\": 0, \\\"max\\\": \\\"inf\\\" }, \\\"learnable\\\": false, \\\"source\\\": \\\"calculated\\\" },\\n    \\\"Exponent\\\": { \\\"description\\\": \\\"Final exponent modulation factor including extra oscillatory multipliers\\\", \\\"range\\\": { \\\"min\\\": \\\"-inf\\\", \\\"max\\\": \\\"inf\\\" }, \\\"learnable\\\": false, \\\"source\\\": \\\"calculated\\\" },\\n    \\\"f\\\": { \\\"description\\\": \\\"Final transformed signal computed from f_adapt, T, and extra\\\", \\\"range\\\": { \\\"min\\\": \\\"-inf\\\", \\\"max\\\": \\\"inf\\\" }, \\\"learnable\\\": false, \\\"source\\\": \\\"calculated\\\" },\\n    \\\"U\\\": { \\\"description\\\": \\\"Latent utility computed as a linear combination of f with parameters beta and gamma\\\", \\\"range\\\": { \\\"min\\\": \\\"-inf\\\", \\\"max\\\": \\\"inf\\\" }, \\\"learnable\\\": false, \\\"source\\\": \\\"calculated\\\" },\\n    \\\"P(accept=1)\\\": { \\\"description\\\": \\\"Predicted probability of acceptance computed by applying the logistic function to U\\\", \\\"range\\\": { \\\"min\\\": 0, \\\"max\\\": 1 }, \\\"learnable\\\": false, \\\"source\\\": \\\"calculated\\\" }\\n  }\\n}\\n</VARIABLES>\\n\\n<target_variable>accept</target_variable>\\n\\n<SUMMARY>\\nA highly nonlinear binary choice model that aggregates fixed components into a core sum and processes it through a sequence of multiplicative trigonometric and adaptive transformations. The negative branch sensitivity is increased (exponent 34), and the extra composite term is enriched with additional factors including sigmoid, tanh, and cosine terms, as well as an extra nested softplus. The dynamic threshold sums from k = 0 to 70, and the final exponent modulation is fortified with an extra [1 + 0.005\u00d7tanh(0.5\u00d7a)] term. The latent utility is computed as U = beta + gamma * f(x) and mapped via a logistic function to predict acceptance.\\n</SUMMARY>",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: <think>\nFor run 153, we want to further boost the model\u2019s nonlinear flexibility while improving parameter recovery and lowering BIC. In particular, increase the negative branch exponent from 34 to 36. In the extra composite term, add three new multiplicative factors: one of the form [1 + sigmoid(0.08 * a)], one [1 + tanh(0.2 * a)], and one [1 + cos(4.0 * a)]. Also, nest an additional softplus layer within the extra term so that softplus is applied four times. We then extend the dynamic threshold T by summing from k = 0 to 80, and augment the final exponent modulation by multiplying it by an extra oscillatory term, for example [1 + 0.005 * tanh(0.5 * a)]. These modifications should encourage out\u2010of\u2010the\u2010box interactions that capture subtler nonlinearities.\n</think>\nNew Instructions for Run 153:\n\n1. Compute the core sum a as the sum of fixed components F1 through F11 plus a small constant \u03b4.\n2. Define a_mod = 1.08 \u00d7 a \u00d7 [1 + 0.012 \u00d7 sin(a + 0.045)].\n3. Sequentially multiply a_mod by:\n\u2003\u2003\u2022 [1 + 0.008 \u00d7 cos(a + 0.065)]\n\u2003\u2003\u2022 [1 + 0.005 \u00d7 sin(a + 0.115)]\n\u2003\u2003\u2022 [1 + 0.004 \u00d7 cos(a + 0.085)]\n\u2003\u2003\u2022 [1 + 0.006 \u00d7 (sin(a + 0.035) \u00d7 cos(a + 0.055))]\n\u2003\u2003\u2022 [1 + 0.003 \u00d7 (sin(a + 0.03) \u00d7 cos(a + 0.05))]\nLet z be the resulting product.\n4. Compute w = (phi \u2212 0.5) / phi.\n\u2003\u2003\u2022 For z \u2265 0, set f_adapt(z) = clip[1.002 \u00d7 (z^w \u00d7 (ln(1+z))^(1\u2212w) \u00d7 softsign(z)), \u221230, 30], where softsign(x) = x/(1+|x|).\n\u2003\u2003\u2022 For z < 0, set f_adapt(z) = phi \u00d7 [softsign(z + \u0394_shift)]^(36), with \u0394_shift = 1\u00d710\u207b\u2076.\n5. Define the dynamic threshold T as the sum for k = 0 to 80 of (a^k \u00d7 (\u00bd)^k.\n6. Define the extra composite term extra as the product of the following factors:\n\u2003\u2003\u2022 exp(\u2013a/0.1)\n\u2003\u2003\u2022 [z/(1+|z|)]\n\u2003\u2003\u2022 [1 + 0.005 \u00d7 sin(1/(1+a))]\n\u2003\u2003\u2022 [1 + 0.002 \u00d7 cos(0.5\u00d7a)]\n\u2003\u2003\u2022 ([1 + 0.003 \u00d7 cos(0.3\u00d7a)]\u00b2)\n\u2003\u2003\u2022 ([1 + 0.004 \u00d7 cos(0.3\u00d7a)]\u00b2)\n\u2003\u2003\u2022 [1 + 0.0025 \u00d7 cos(0.7\u00d7a)]\n\u2003\u2003\u2022 [1 + tanh(0.05\u00d7a)]\n\u2003\u2003\u2022 [1 + sigmoid(0.01\u00d7a)]\n\u2003\u2003\u2022 [1 + 0.002 \u00d7 cos(3\u00d7a)]\n\u2003\u2003\u2022 [1 + 0.002 \u00d7 (sin(2.5\u00d7a) + 0.001\u00d7cos(3.5\u00d7a) + 0.0015\u00d7sin(3\u00d7a))]\n\u2003\u2003\u2022 [1 + sigmoid(0.03\u00d7a)]\n\u2003\u2003\u2022 [1 + tanh(0.07\u00d7a)]\n\u2003\u2003\u2022 [1 + cos(3.1\u00d7a)]\n\u2003\u2003\u2022 [1 + sigmoid(0.04\u00d7a)]\n\u2003\u2003\u2022 [1 + tanh(0.08\u00d7a)]\n\u2003\u2003\u2022 [1 + cos(3.2\u00d7a)]\n\u2003\u2003\u2022 [1 + sigmoid(0.05\u00d7a)]\n\u2003\u2003\u2022 [1 + tanh(0.1\u00d7a)]\n\u2003\u2003\u2022 [1 + cos(3.4\u00d7a)]\n\u2003\u2003\u2022 [1 + sigmoid(0.06\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new)\\n\u2003\u2003\u2022 [1 + tanh(0.12\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new)\\n\u2003\u2003\u2022 [1 + cos(3.6\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new)\\n\u2003\u2003\u2022 [1 + sigmoid(0.08\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new)\\n\u2003\u2003\u2022 [1 + tanh(0.2\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new)\\n\u2003\u2003\u2022 [1 + cos(4.0\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new)\\n\u2003\u2003\u2022 Nest an additional softplus layer, i.e. use softplus(softplus(softplus(softplus(softplus(0.865/(1+a)))))).\\nThen raise the product to the power [0.9478 + 0.00018\u00d7ln(1+a)].\\n7. Define the final exponent modulation factor as:\\n\u2003\u2003Exponent = [0.9478 + 0.00018\u00d7ln(1+a)] \u00d7 [1 + 0.0055\u00d7sin(2.9\u00d7a) + 0.0015\u00d7cos(3.9\u00d7a) + 0.0035\u00d7sin(3.5\u00d7a) + 0.0025\u00d7cos(4.5\u00d7a) + 0.0015\u00d7sin(3.0\u00d7a) + 0.0007\u00d7cos(4.2\u00d7a) + 0.0015\u00d7(sin(2.7\u00d7a)\u00d7cos(3.4\u00d7a)) + 0.0025\u00d7cos(3.8\u00d7a) + 0.0015\u00d7sin(2.8\u00d7a) + 0.005\u00d7tanh(0.5\u00d7a)]\\n8. Compute the final transformed signal f(x) = sign(z) \u00d7 { [ f_adapt(z) \u00d7 T \u00d7 extra ]^(Exponent) }.\\n9. Compute latent utility U = beta + gamma \u00d7 f(x) and then let P(accept = 1) = 1/(1 + exp(\u2013U)).\\n10. Use exactly three learnable parameters with the following finite bounds: beta \u2208 [\u201310, 10], gamma \u2208 [0, 10], and phi \u2208 [0.5, 1.5].\\n</MODEL>\\n\\n<VARIABLES>\\n{\\n  \\\"variables\\\": {\\n    \\\"F1\\\": {\\n      \\\"description\\\": \\\"Fixed component 1 extracted from data\\\",\\n      \\\"range\\\": { \\\"min\\\": \\\"-inf\\\", \\\"max\\\": \\\"inf\\\", \\\"inclusive_min\\\": true, \\\"inclusive_max\\\": true },\\n      \\\"distribution\\\": { \\\"type\\\": \\\"empirical\\\" },\\n      \\\"learnable\\\": false,\\n      \\\"source\\\": \\\"data\\\"\\n    },\\n    \\\"F2\\\": { \\\"description\\\": \\\"Fixed component 2 extracted from data\\\", \\\"range\\\": { \\\"min\\\": \\\"-inf\\\", \\\"max\\\": \\\"inf\\\", \\\"inclusive_min\\\": true, \\\"inclusive_max\\\": true }, \\\"distribution\\\": { \\\"type\\\": \\\"empirical\\\" }, \\\"learnable\\\": false, \\\"source\\\": \\\"data\\\" },\\n    \\\"F3\\\": { \\\"description\\\": \\\"Fixed component 3 extracted from data\\\", \\\"range\\\": { \\\"min\\\": \\\"-inf\\\", \\\"max\\\": \\\"inf\\\", \\\"inclusive_min\\\": true, \\\"inclusive_max\\\": true }, \\\"distribution\\\": { \\\"type\\\": \\\"empirical\\\" }, \\\"learnable\\\": false, \\\"source\\\": \\\"data\\\" },\\n    \\\"F4\\\": { \\\"description\\\": \\\"Fixed component 4 extracted from data\\\", \\\"range\\\": { \\\"min\\\": \\\"-inf\\\", \\\"max\\\": \\\"inf\\\", \\\"inclusive_min\\\": true, \\\"inclusive_max\\\": true }, \\\"distribution\\\": { \\\"type\\\": \\\"empirical\\\" }, \\\"learnable\\\": false, \\\"source\\\": \\\"data\\\" },\\n    \\\"F5\\\": { \\\"description\\\": \\\"Fixed component 5 extracted from data\\\", \\\"range\\\": { \\\"min\\\": \\\"-inf\\\", \\\"max\\\": \\\"inf\\\", \\\"inclusive_min\\\": true, \\\"inclusive_max\\\": true }, \\\"distribution\\\": { \\\"type\\\": \\\"empirical\\\" }, \\\"learnable\\\": false, \\\"source\\\": \\\"data\\\" },\\n    \\\"F6\\\": { \\\"description\\\": \\\"Fixed component 6 extracted from data\\\", \\\"range\\\": { \\\"min\\\": \\\"-inf\\\", \\\"max\\\": \\\"inf\\\", \\\"inclusive_min\\\": true, \\\"inclusive_max\\\": true }, \\\"distribution\\\": { \\\"type\\\": \\\"empirical\\\" }, \\\"learnable\\\": false, \\\"source\\\": \\\"data\\\" },\\n    \\\"F7\\\": { \\\"description\\\": \\\"Fixed component 7 extracted from data\\\", \\\"range\\\": { \\\"min\\\": \\\"-inf\\\", \\\"max\\\": \\\"inf\\\", \\\"inclusive_min\\\": true, \\\"inclusive_max\\\": true }, \\\"distribution\\\": { \\\"type\\\": \\\"empirical\\\" }, \\\"learnable\\\": false, \\\"source\\\": \\\"data\\\" },\\n    \\\"F8\\\": { \\\"description\\\": \\\"Fixed component 8 extracted from data\\\", \\\"range\\\": { \\\"min\\\": \\\"-inf\\\", \\\"max\\\": \\\"inf\\\", \\\"inclusive_min\\\": true, \\\"inclusive_max\\\": true }, \\\"distribution\\\": { \\\"type\\\": \\\"empirical\\\" }, \\\"learnable\\\": false, \\\"source\\\": \\\"data\\\" },\\n    \\\"F9\\\": { \\\"description\\\": \\\"Fixed component 9 extracted from data\\\", \\\"range\\\": { \\\"min\\\": \\\"-inf\\\", \\\"max\\\": \\\"inf\\\", \\\"inclusive_min\\\": true, \\\"inclusive_max\\\": true }, \\\"distribution\\\": { \\\"type\\\": \\\"empirical\\\" }, \\\"learnable\\\": false, \\\"source\\\": \\\"data\\\" },\\n    \\\"F10\\\": { \\\"description\\\": \\\"Fixed component 10 extracted from data\\\", \\\"range\\\": { \\\"min\\\": \\\"-inf\\\", \\\"max\\\": \\\"inf\\\", \\\"inclusive_min\\\": true, \\\"inclusive_max\\\": true }, \\\"distribution\\\": { \\\"type\\\": \\\"empirical\\\" }, \\\"learnable\\\": false, \\\"source\\\": \\\"data\\\" },\\n    \\\"F11\\\": { \\\"description\\\": \\\"Fixed component 11 extracted from data\\\", \\\"range\\\": { \\\"min\\\": \\\"-inf\\\", \\\"max\\\": \\\"inf\\\", \\\"inclusive_min\\\": true, \\\"inclusive_max\\\": true }, \\\"distribution\\\": { \\\"type\\\": \\\"empirical\\\" }, \\\"learnable\\\": false, \\\"source\\\": \\\"data\\\" },\\n    \\\"\u03b4\\\": { \\\"description\\\": \\\"Small constant offset added to the sum of fixed components\\\", \\\"range\\\": { \\\"min\\\": 1e-9, \\\"max\\\": 0.001, \\\"inclusive_min\\\": true, \\\"inclusive_max\\\": true }, \\\"distribution\\\": { \\\"type\\\": \\\"constant\\\", \\\"parameters\\\": { \\\"value\\\": 1e-6 } }, \\\"learnable\\\": false, \\\"source\\\": \\\"calculated\\\" },\\n    \\\"beta\\\": { \\\"description\\\": \\\"Learnable intercept parameter (base bias) for latent utility\\\", \\\"range\\\": { \\\"min\\\": -10, \\\"max\\\": 10, \\\"inclusive_min\\\": true, \\\"inclusive_max\\\": true }, \\\"distribution\\\": { \\\"type\\\": \\\"uniform\\\", \\\"parameters\\\": { \\\"low\\\": -10, \\\"high\\\": 10 } }, \\\"learnable\\\": true, \\\"source\\\": \\\"learnable\\\" },\\n    \\\"gamma\\\": { \\\"description\\\": \\\"Learnable scaling parameter for the transformed signal\\\", \\\"range\\\": { \\\"min\\\": 0, \\\"max\\\": 10, \\\"inclusive_min\\\": true, \\\"inclusive_max\\\": true }, \\\"distribution\\\": { \\\"type\\\": \\\"uniform\\\", \\\"parameters\\\": { \\\"low\\\": 0, \\\"high\\\": 10 } }, \\\"learnable\\\": true, \\\"source\\\": \\\"learnable\\\" },\\n    \\\"phi\\\": { \\\"description\\\": \\\"Learnable parameter governing the adaptive nonlinearity (especially in the negative branch)\\\", \\\"range\\\": { \\\"min\\\": 0.5, \\\"max\\\": 1.5, \\\"inclusive_min\\\": true, \\\"inclusive_max\\\": true }, \\\"distribution\\\": { \\\"type\\\": \\\"uniform\\\", \\\"parameters\\\": { \\\"low\\\": 0.5, \\\"high\\\": 1.5 } }, \\\"learnable\\\": true, \\\"source\\\": \\\"learnable\\\" },\\n    \\\"a\\\": { \\\"description\\\": \\\"Core sum computed from fixed components and \u03b4\\\", \\\"range\\\": { \\\"min\\\": \\\"-inf\\\", \\\"max\\\": \\\"inf\\\" }, \\\"learnable\\\": false, \\\"source\\\": \\\"calculated\\\" },\\n    \\\"a_mod\\\": { \\\"description\\\": \\\"Modified core sum after the first nonlinear transformation\\\", \\\"range\\\": { \\\"min\\\": \\\"-inf\\\", \\\"max\\\": \\\"inf\\\" }, \\\"learnable\\\": false, \\\"source\\\": \\\"calculated\\\" },\\n    \\\"z\\\": { \\\"description\\\": \\\"Intermediate signal after sequential nonlinear modulation\\\", \\\"range\\\": { \\\"min\\\": \\\"-inf\\\", \\\"max\\\": \\\"inf\\\" }, \\\"learnable\\\": false, \\\"source\\\": \\\"calculated\\\" },\\n    \\\"w\\\": { \\\"description\\\": \\\"Exponent weight computed from phi\\\", \\\"range\\\": { \\\"min\\\": \\\"-inf\\\", \\\"max\\\": \\\"inf\\\" }, \\\"learnable\\\": false, \\\"source\\\": \\\"calculated\\\" },\\n    \\\"f_adapt\\\": { \\\"description\\\": \\\"Adaptive transformed value from z; uses a power of 34 in the negative branch\\\", \\\"range\\\": { \\\"min\\\": -30, \\\"max\\\": 30 }, \\\"learnable\\\": false, \\\"source\\\": \\\"calculated\\\" },\\n    \\\"T\\\": { \\\"description\\\": \\\"Dynamic threshold computed as the sum from k = 0 to 70 of (a^k*(1/2)^k\\\", \\\"range\\\": { \\\"min\\\": 0, \\\"max\\\": \\\"inf\\\" }, \\\"learnable\\\": false, \\\"source\\\": \\\"calculated\\\" },\\n    \\\"extra\\\": { \\\"description\\\": \\\"Composite extra term from multiple multiplicative nonlinear functions including an extra nested softplus layer\\\", \\\"range\\\": { \\\"min\\\": 0, \\\"max\\\": \\\"inf\\\" }, \\\"learnable\\\": false, \\\"source\\\": \\\"calculated\\\" },\\n    \\\"Exponent\\\": { \\\"description\\\": \\\"Final exponent modulation factor including extra oscillatory multipliers\\\", \\\"range\\\": { \\\"min\\\": \\\"-inf\\\", \\\"max\\\": \\\"inf\\\" }, \\\"learnable\\\": false, \\\"source\\\": \\\"calculated\\\" },\\n    \\\"f\\\": { \\\"description\\\": \\\"Final transformed signal computed from f_adapt, T, and extra\\\", \\\"range\\\": { \\\"min\\\": \\\"-inf\\\", \\\"max\\\": \\\"inf\\\" }, \\\"learnable\\\": false, \\\"source\\\": \\\"calculated\\\" },\\n    \\\"U\\\": { \\\"description\\\": \\\"Latent utility computed as a linear combination of f with parameters beta and gamma\\\", \\\"range\\\": { \\\"min\\\": \\\"-inf\\\", \\\"max\\\": \\\"inf\\\" }, \\\"learnable\\\": false, \\\"source\\\": \\\"calculated\\\" },\\n    \\\"P(accept=1)\\\": { \\\"description\\\": \\\"Predicted probability of acceptance computed by applying the logistic function to U\\\", \\\"range\\\": { \\\"min\\\": 0, \\\"max\\\": 1 }, \\\"learnable\\\": false, \\\"source\\\": \\\"calculated\\\" }\\n  }\\n}\\n</VARIABLES>\\n\\n<target_variable>accept</target_variable>\\n\\n<SUMMARY>\\nA highly nonlinear binary choice model that aggregates fixed components into a core sum and processes it through a sequence of multiplicative trigonometric and adaptive transformations. The negative branch sensitivity is increased (exponent 34), and the extra composite term is enriched with additional factors including sigmoid, tanh, and cosine terms, as well as an extra nested softplus. The dynamic threshold sums from k = 0 to 70, and the final exponent modulation is fortified with an extra [1 + 0.005\u00d7tanh(0.5\u00d7a)] term. The latent utility is computed as U = beta + gamma * f(x) and mapped via a logistic function to predict acceptance.\\n</SUMMARY>\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<MODEL>\na = F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11 + \u03b4;\na_mod = 1.08 * a * (1 + 0.012 * sin(a + 0.045));\nz = a_mod * (1 + 0.008 * cos(a + 0.065)) * (1 + 0.005 * sin(a + 0.115)) * (1 + 0.004 * cos(a + 0.085)) * (1 + 0.006 * (sin(a + 0.035) * cos(a + 0.055))) * (1 + 0.003 * (sin(a + 0.03) * cos(a + 0.05)));\nw = (phi - 0.5) / phi;\nf_adapt = { z \u2265 0 : clip(1.002 * ( (z)^w * (ln(1+z))^(1-w) * (z/(1+abs(z))) ), -30, 30) ,\n             z < 0  : phi * ( ( (z + 1e-6)/(1+abs(z + 1e-6)) )^36 ) };\nT = \u03a3\u2096\u208c\u2080^(80) (a^k * (1/2)^k);\nP_extra = exp(-a/0.1) * (z/(1+abs(z))) * (1+0.005*sin(1/(1+a))) * (1+0.002*cos(0.5*a)) * (1+0.003*cos(0.3*a))^2 * (1+0.004*cos(0.3*a))^2 * (1+0.0025*cos(0.7*a)) * (1+tanh(0.05*a)) * (1+1/(1+exp(-0.01*a))) * (1+0.002*cos(3*a)) * (1+0.002*(sin(2.5*a)+0.001*cos(3.5*a)+0.0015*sin(3*a))) * (1+1/(1+exp(-0.03*a))) * (1+tanh(0.07*a)) * (1+cos(3.1*a)) * (1+1/(1+exp(-0.04*a))) * (1+tanh(0.08*a)) * (1+cos(3.2*a)) * (1+1/(1+exp(-0.05*a))) * (1+tanh(0.1*a)) * (1+cos(3.4*a)) * (1+1/(1+exp(-0.06*a))) * (1+tanh(0.12*a)) * (1+cos(3.6*a)) * (1+1/(1+exp(-0.08*a))) * (1+tanh(0.2*a)) * (1+cos(4.0*a)) * softplus(softplus(softplus(softplus(softplus(0.865/(1+a)))));\nextra = (P_extra)^(0.9478 + 0.00018 * ln(1+a));\nExponent = (0.9478 + 0.00018 * ln(1+a)) * (1 + 0.0055*sin(2.9*a) + 0.0015*cos(3.9*a) + 0.0035*sin(3.5*a) + 0.0025*cos(4.5*a) + 0.0015*sin(3.0*a) + 0.0007*cos(4.2*a) + 0.0015*(sin(2.7*a)*cos(3.4*a)) + 0.0025*cos(3.8*a) + 0.0015*sin(2.8*a) + 0.005*tanh(0.5*a));\nf = sign(z) * (f_adapt * T * extra)^Exponent;\nU = beta + gamma * f;\nP(accept=1) = 1 / (1 + exp(-U))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"F1\": {\n      \"description\": \"Fixed component 1 extracted from data\",\n      \"range\": { \"min\": \"-inf\", \"max\": \"inf\", \"inclusive_min\": true, \"inclusive_max\": true },\n      \"distribution\": { \"type\": \"empirical\", \"parameters\": {} },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F2\": {\n      \"description\": \"Fixed component 2 extracted from data\",\n      \"range\": { \"min\": \"-inf\", \"max\": \"inf\", \"inclusive_min\": true, \"inclusive_max\": true },\n      \"distribution\": { \"type\": \"empirical\", \"parameters\": {} },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F3\": {\n      \"description\": \"Fixed component 3 extracted from data\",\n      \"range\": { \"min\": \"-inf\", \"max\": \"inf\", \"inclusive_min\": true, \"inclusive_max\": true },\n      \"distribution\": { \"type\": \"empirical\", \"parameters\": {} },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F4\": {\n      \"description\": \"Fixed component 4 extracted from data\",\n      \"range\": { \"min\": \"-inf\", \"max\": \"inf\", \"inclusive_min\": true, \"inclusive_max\": true },\n      \"distribution\": { \"type\": \"empirical\", \"parameters\": {} },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F5\": {\n      \"description\": \"Fixed component 5 extracted from data\",\n      \"range\": { \"min\": \"-inf\", \"max\": \"inf\", \"inclusive_min\": true, \"inclusive_max\": true },\n      \"distribution\": { \"type\": \"empirical\", \"parameters\": {} },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F6\": {\n      \"description\": \"Fixed component 6 extracted from data\",\n      \"range\": { \"min\": \"-inf\", \"max\": \"inf\", \"inclusive_min\": true, \"inclusive_max\": true },\n      \"distribution\": { \"type\": \"empirical\", \"parameters\": {} },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F7\": {\n      \"description\": \"Fixed component 7 extracted from data\",\n      \"range\": { \"min\": \"-inf\", \"max\": \"inf\", \"inclusive_min\": true, \"inclusive_max\": true },\n      \"distribution\": { \"type\": \"empirical\", \"parameters\": {} },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F8\": {\n      \"description\": \"Fixed component 8 extracted from data\",\n      \"range\": { \"min\": \"-inf\", \"max\": \"inf\", \"inclusive_min\": true, \"inclusive_max\": true },\n      \"distribution\": { \"type\": \"empirical\", \"parameters\": {} },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F9\": {\n      \"description\": \"Fixed component 9 extracted from data\",\n      \"range\": { \"min\": \"-inf\", \"max\": \"inf\", \"inclusive_min\": true, \"inclusive_max\": true },\n      \"distribution\": { \"type\": \"empirical\", \"parameters\": {} },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F10\": {\n      \"description\": \"Fixed component 10 extracted from data\",\n      \"range\": { \"min\": \"-inf\", \"max\": \"inf\", \"inclusive_min\": true, \"inclusive_max\": true },\n      \"distribution\": { \"type\": \"empirical\", \"parameters\": {} },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F11\": {\n      \"description\": \"Fixed component 11 extracted from data\",\n      \"range\": { \"min\": \"-inf\", \"max\": \"inf\", \"inclusive_min\": true, \"inclusive_max\": true },\n      \"distribution\": { \"type\": \"empirical\", \"parameters\": {} },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"\u03b4\": {\n      \"description\": \"Small constant offset added to the sum of fixed components\",\n      \"range\": { \"min\": 1e-9, \"max\": 0.001, \"inclusive_min\": true, \"inclusive_max\": true },\n      \"distribution\": { \"type\": \"constant\", \"parameters\": { \"value\": 1e-6 } },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Learnable intercept parameter (base bias) for latent utility\",\n      \"range\": { \"min\": -10, \"max\": 10, \"inclusive_min\": true, \"inclusive_max\": true },\n      \"distribution\": { \"type\": \"uniform\", \"parameters\": { \"low\": -10, \"high\": 10 } },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Learnable scaling parameter for the transformed signal\",\n      \"range\": { \"min\": 0, \"max\": 10, \"inclusive_min\": true, \"inclusive_max\": true },\n      \"distribution\": { \"type\": \"uniform\", \"parameters\": { \"low\": 0, \"high\": 10 } },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Learnable parameter governing the adaptive nonlinearity (especially in the negative branch)\",\n      \"range\": { \"min\": 0.5, \"max\": 1.5, \"inclusive_min\": true, \"inclusive_max\": true },\n      \"distribution\": { \"type\": \"uniform\", \"parameters\": { \"low\": 0.5, \"high\": 1.5 } },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"a\": {\n      \"description\": \"Core sum computed from fixed components and \u03b4\",\n      \"range\": { \"min\": \"-inf\", \"max\": \"inf\" },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a_mod\": {\n      \"description\": \"Modified core sum after the first nonlinear transformation\",\n      \"range\": { \"min\": \"-inf\", \"max\": \"inf\" },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"z\": {\n      \"description\": \"Intermediate signal after sequential nonlinear modulation\",\n      \"range\": { \"min\": \"-inf\", \"max\": \"inf\" },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"w\": {\n      \"description\": \"Exponent weight computed from phi\",\n      \"range\": { \"min\": \"-inf\", \"max\": \"inf\" },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_adapt\": {\n      \"description\": \"Adaptive transformed value from z; for z\u22650 it is clipped to [-30,30] and for z<0 uses an exponent of 36\",\n      \"range\": { \"min\": -30, \"max\": 30 },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"T\": {\n      \"description\": \"Dynamic threshold computed as the sum from k = 0 to 80 of (a^k * (1/2)^k)\",\n      \"range\": { \"min\": 0, \"max\": \"inf\" },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"extra\": {\n      \"description\": \"Composite extra term from multiple multiplicative nonlinear functions including an extra nested softplus layer, raised to a power\",\n      \"range\": { \"min\": 0, \"max\": \"inf\" },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"Exponent\": {\n      \"description\": \"Final exponent modulation factor including an extra oscillatory term\",\n      \"range\": { \"min\": \"-inf\", \"max\": \"inf\" },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f\": {\n      \"description\": \"Final transformed signal computed from f_adapt, T, and extra, with the sign of z\",\n      \"range\": { \"min\": \"-inf\", \"max\": \"inf\" },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed as beta plus gamma times f\",\n      \"range\": { \"min\": \"-inf\", \"max\": \"inf\" },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"P(accept=1)\": {\n      \"description\": \"Predicted probability of acceptance computed by applying the logistic function to U\",\n      \"range\": { \"min\": 0, \"max\": 1 },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA highly nonlinear binary choice model that first aggregates eleven fixed components with a small offset into a core sum, which is then nonlinearly transformed via multiplicative trigonometric modulations and an adaptive function with differentiated treatments for positive and negative signals (the latter raised to the power of 36). A dynamic threshold is computed via a finite series and an extra composite term further enriches the transformation with additional oscillatory and nested softplus factors. The final signal is exponentiated by a modulated factor and combined with learnable parameters beta and gamma to yield a latent utility that is converted through a logistic function to predict acceptance.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['beta', 'gamma', 'phi']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                a = F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11 + \u03b4;\na_mod = 1.08 * a * (1 + 0.012 * sin(a + 0.045));\nz = a_mod * (1 + 0.008 * cos(a + 0.065)) * (1 + 0.005 * sin(a + 0.115)) * (1 + 0.004 * cos(a + 0.085)) * (1 + 0.006 * (sin(a + 0.035) * cos(a + 0.055))) * (1 + 0.003 * (sin(a + 0.03) * cos(a + 0.05)));\nw = (phi - 0.5) / phi;\nf_adapt = { z \u2265 0 : clip(1.002 * ( (z)^w * (ln(1+z))^(1-w) * (z/(1+abs(z))) ), -30, 30) ,\n             z < 0  : phi * ( ( (z + 1e-6)/(1+abs(z + 1e-6)) )^36 ) };\nT = \u03a3\u2096\u208c\u2080^(80) (a^k * (1/2)^k);\nP_extra = exp(-a/0.1) * (z/(1+abs(z))) * (1+0.005*sin(1/(1+a))) * (1+0.002*cos(0.5*a)) * (1+0.003*cos(0.3*a))^2 * (1+0.004*cos(0.3*a))^2 * (1+0.0025*cos(0.7*a)) * (1+tanh(0.05*a)) * (1+1/(1+exp(-0.01*a))) * (1+0.002*cos(3*a)) * (1+0.002*(sin(2.5*a)+0.001*cos(3.5*a)+0.0015*sin(3*a))) * (1+1/(1+exp(-0.03*a))) * (1+tanh(0.07*a)) * (1+cos(3.1*a)) * (1+1/(1+exp(-0.04*a))) * (1+tanh(0.08*a)) * (1+cos(3.2*a)) * (1+1/(1+exp(-0.05*a))) * (1+tanh(0.1*a)) * (1+cos(3.4*a)) * (1+1/(1+exp(-0.06*a))) * (1+tanh(0.12*a)) * (1+cos(3.6*a)) * (1+1/(1+exp(-0.08*a))) * (1+tanh(0.2*a)) * (1+cos(4.0*a)) * softplus(softplus(softplus(softplus(softplus(0.865/(1+a)))));\nextra = (P_extra)^(0.9478 + 0.00018 * ln(1+a));\nExponent = (0.9478 + 0.00018 * ln(1+a)) * (1 + 0.0055*sin(2.9*a) + 0.0015*cos(3.9*a) + 0.0035*sin(3.5*a) + 0.0025*cos(4.5*a) + 0.0015*sin(3.0*a) + 0.0007*cos(4.2*a) + 0.0015*(sin(2.7*a)*cos(3.4*a)) + 0.0025*cos(3.8*a) + 0.0015*sin(2.8*a) + 0.005*tanh(0.5*a));\nf = sign(z) * (f_adapt * T * extra)^Exponent;\nU = beta + gamma * f;\nP(accept=1) = 1 / (1 + exp(-U))\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"F1\": {\n      \"description\": \"Fixed component 1 extracted from data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F2\": {\n      \"description\": \"Fixed component 2 extracted from data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F3\": {\n      \"description\": \"Fixed component 3 extracted from data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F4\": {\n      \"description\": \"Fixed component 4 extracted from data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F5\": {\n      \"description\": \"Fixed component 5 extracted from data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F6\": {\n      \"description\": \"Fixed component 6 extracted from data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F7\": {\n      \"description\": \"Fixed component 7 extracted from data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F8\": {\n      \"description\": \"Fixed component 8 extracted from data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F9\": {\n      \"description\": \"Fixed component 9 extracted from data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F10\": {\n      \"description\": \"Fixed component 10 extracted from data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F11\": {\n      \"description\": \"Fixed component 11 extracted from data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"\\u03b4\": {\n      \"description\": \"Small constant offset added to the sum of fixed components\",\n      \"range\": {\n        \"min\": 1e-09,\n        \"max\": 0.001,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"constant\",\n        \"parameters\": {\n          \"value\": 1e-06\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Learnable intercept parameter (base bias) for latent utility\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Learnable scaling parameter for the transformed signal\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0,\n          \"high\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Learnable parameter governing the adaptive nonlinearity (especially in the negative branch)\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0.5,\n          \"high\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"a\": {\n      \"description\": \"Core sum computed from fixed components and \\u03b4\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a_mod\": {\n      \"description\": \"Modified core sum after the first nonlinear transformation\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"z\": {\n      \"description\": \"Intermediate signal after sequential nonlinear modulation\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"w\": {\n      \"description\": \"Exponent weight computed from phi\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_adapt\": {\n      \"description\": \"Adaptive transformed value from z; for z\\u22650 it is clipped to [-30,30] and for z<0 uses an exponent of 36\",\n      \"range\": {\n        \"min\": -30,\n        \"max\": 30,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"T\": {\n      \"description\": \"Dynamic threshold computed as the sum from k = 0 to 80 of (a^k * (1/2)^k)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"extra\": {\n      \"description\": \"Composite extra term from multiple multiplicative nonlinear functions including an extra nested softplus layer, raised to a power\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"Exponent\": {\n      \"description\": \"Final exponent modulation factor including an extra oscillatory term\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f\": {\n      \"description\": \"Final transformed signal computed from f_adapt, T, and extra, with the sign of z\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed as beta plus gamma times f\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"P(accept=1)\": {\n      \"description\": \"Predicted probability of acceptance computed by applying the logistic function to U\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, beta=0, gamma=1, phi=1):\n    model_predictions = []\n    delta = 1e-06\n\n    def clip(x, lower, upper):\n        return max(lower, min(x, upper))\n\n    def sign(x):\n        if x > 0:\n            return 1\n        elif x < 0:\n            return -1\n        else:\n            return 0\n\n    def softplus(x):\n        return math.log(1 + math.exp(x))\n\n    def tanh(x):\n        return (math.exp(x) - math.exp(-x)) / (math.exp(x) + math.exp(-x))\n\n    def exp(x):\n        try:\n            return math.exp(x)\n        except OverflowError:\n            return float('inf')\n\n\n    for trial in trial_data:\n        F1 = trial.get(\"F1\", 0)\n        F2 = trial.get(\"F2\", 0)\n        F3 = trial.get(\"F3\", 0)\n        F4 = trial.get(\"F4\", 0)\n        F5 = trial.get(\"F5\", 0)\n        F6 = trial.get(\"F6\", 0)\n        F7 = trial.get(\"F7\", 0)\n        F8 = trial.get(\"F8\", 0)\n        F9 = trial.get(\"F9\", 0)\n        F10 = trial.get(\"F10\", 0)\n        F11 = trial.get(\"F11\", 0)\n\n        a = F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11 + delta\n        a_mod = 1.08 * a * (1 + 0.012 * math.sin(a + 0.045))\n        z = a_mod * (1 + 0.008 * math.cos(a + 0.065)) * (1 + 0.005 * math.sin(a + 0.115)) * (1 + 0.004 * math.cos(a + 0.085)) * (1 + 0.006 * (math.sin(a + 0.035) * math.cos(a + 0.055))) * (1 + 0.003 * (math.sin(a + 0.03) * math.cos(a + 0.05)))\n        w = (phi - 0.5) / phi\n\n        if z >= 0:\n            f_adapt = clip(1.002 * ((z)**w * (math.log(1+z))**(1-w) * (z/(1+abs(z)))), -30, 30)\n        else:\n            f_adapt = phi * (((z + 1e-6)/(1+abs(z + 1e-6)))**36)\n\n        T = sum(a**k * (1/2)**k for k in range(81))\n\n        P_extra = exp(-a/0.1) * (z/(1+abs(z))) * (1+0.005*math.sin(1/(1+a))) * (1+0.002*math.cos(0.5*a)) * (1+0.003*math.cos(0.3*a))**2 * (1+0.004*math.cos(0.3*a))**2 * (1+0.0025*math.cos(0.7*a)) * (1+tanh(0.05*a)) * (1+1/(1+exp(-0.01*a))) * (1+0.002*math.cos(3*a)) * (1+0.002*(math.sin(2.5*a)+0.001*math.cos(3.5*a)+0.0015*math.sin(3*a))) * (1+1/(1+exp(-0.03*a))) * (1+tanh(0.07*a)) * (1+math.cos(3.1*a)) * (1+1/(1+exp(-0.04*a))) * (1+tanh(0.08*a)) * (1+math.cos(3.2*a)) * (1+1/(1+exp(-0.05*a))) * (1+tanh(0.1*a)) * (1+math.cos(3.4*a)) * (1+1/(1+exp(-0.06*a))) * (1+tanh(0.12*a)) * (1+math.cos(3.6*a)) * (1+1/(1+exp(-0.08*a))) * (1+tanh(0.2*a)) * (1+math.cos(4.0*a)) * softplus(softplus(softplus(softplus(softplus(0.865/(1+a))))))\n        extra = (P_extra)**(0.9478 + 0.00018 * math.log(1+a))\n        Exponent = (0.9478 + 0.00018 * math.log(1+a)) * (1 + 0.0055*math.sin(2.9*a) + 0.0015*math.cos(3.9*a) + 0.0035*math.sin(3.5*a) + 0.0025*math.cos(4.5*a) + 0.0015*math.sin(3.0*a) + 0.0007*math.cos(4.2*a) + 0.0015*(math.sin(2.7*a)*math.cos(3.4*a)) + 0.0025*math.cos(3.8*a) + 0.0015*math.sin(2.8*a) + 0.005*tanh(0.5*a))\n        f = sign(z) * (f_adapt * T * extra)**Exponent\n        U = beta + gamma * f\n        P_accept = 1 / (1 + exp(-U))\n\n        model_predictions.append(P_accept)\n\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '[{\"ID\": 0, \"group\": \"treatment\", \"trial_number\": 1, \"trial_type\": 2, \"trial_role\": 1, \"token_opp\": 3, \"token_self\": 7, \"combined_earning\": 10, \"split_opp\": 3.0, \"split_self\": 7.0, \"splitperc_opp\": 30, \"splitperc_self\": 70, \"accept\": 1.0, \"accepted_amount\": 3.0, \"accepted_perc\": 30.0, \"proposed_perc\": 30.0, \"proposed_amount\": 3.0, \"F1\": 1, \"F2\": 1, \"F3\": 1, \"F4\": 1, \"F5\": 1, \"F6\": 1, \"F7\": 1, \"F8\": 1, \"F9\": 1, \"F10\": 1, \"F11\": 1}, {\"ID\": 1, \"group\": \"treatment\", \"trial_number\": 2, \"trial_type\": 2, \"trial_role\": 1, \"token_opp\": 3, \"token_self\": 7, \"combined_earning\": 10, \"split_opp\": 3.0, \"split_self\": 7.0, \"splitperc_opp\": 30, \"splitperc_self\": 70, \"accept\": 1.0, \"accepted_amount\": 3.0, \"accepted_perc\": 30.0, \"proposed_perc\": 30.0, \"proposed_amount\": 3.0, \"F1\": 1, \"F2\": 1, \"F3\": 1, \"F4\": 1, \"F5\": 1, \"F6\": 1, \"F7\": 1, \"F8\": 1, \"F9\": 1, \"F10\": 1, \"F11\": 1}]'\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n```",
      "timestamp": 1743548997.7456582
    }
  ],
  "learnable_parameters": {
    "beta": {
      "description": "Learnable intercept parameter (base bias) for latent utility",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -10,
          "high": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Learnable scaling parameter for the transformed signal",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0,
          "high": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "phi": {
      "description": "Learnable parameter governing the adaptive nonlinearity (especially in the negative branch)",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0.5,
          "high": 1.5
        }
      },
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "a = F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11 + \u03b4;\na_mod = 1.08 * a * (1 + 0.012 * sin(a + 0.045));\nz = a_mod * (1 + 0.008 * cos(a + 0.065)) * (1 + 0.005 * sin(a + 0.115)) * (1 + 0.004 * cos(a + 0.085)) * (1 + 0.006 * (sin(a + 0.035) * cos(a + 0.055))) * (1 + 0.003 * (sin(a + 0.03) * cos(a + 0.05)));\nw = (phi - 0.5) / phi;\nf_adapt = { z \u2265 0 : clip(1.002 * ( (z)^w * (ln(1+z))^(1-w) * (z/(1+abs(z))) ), -30, 30) ,\n             z < 0  : phi * ( ( (z + 1e-6)/(1+abs(z + 1e-6)) )^36 ) };\nT = \u03a3\u2096\u208c\u2080^(80) (a^k * (1/2)^k);\nP_extra = exp(-a/0.1) * (z/(1+abs(z))) * (1+0.005*sin(1/(1+a))) * (1+0.002*cos(0.5*a)) * (1+0.003*cos(0.3*a))^2 * (1+0.004*cos(0.3*a))^2 * (1+0.0025*cos(0.7*a)) * (1+tanh(0.05*a)) * (1+1/(1+exp(-0.01*a))) * (1+0.002*cos(3*a)) * (1+0.002*(sin(2.5*a)+0.001*cos(3.5*a)+0.0015*sin(3*a))) * (1+1/(1+exp(-0.03*a))) * (1+tanh(0.07*a)) * (1+cos(3.1*a)) * (1+1/(1+exp(-0.04*a))) * (1+tanh(0.08*a)) * (1+cos(3.2*a)) * (1+1/(1+exp(-0.05*a))) * (1+tanh(0.1*a)) * (1+cos(3.4*a)) * (1+1/(1+exp(-0.06*a))) * (1+tanh(0.12*a)) * (1+cos(3.6*a)) * (1+1/(1+exp(-0.08*a))) * (1+tanh(0.2*a)) * (1+cos(4.0*a)) * softplus(softplus(softplus(softplus(softplus(0.865/(1+a)))));\nextra = (P_extra)^(0.9478 + 0.00018 * ln(1+a));\nExponent = (0.9478 + 0.00018 * ln(1+a)) * (1 + 0.0055*sin(2.9*a) + 0.0015*cos(3.9*a) + 0.0035*sin(3.5*a) + 0.0025*cos(4.5*a) + 0.0015*sin(3.0*a) + 0.0007*cos(4.2*a) + 0.0015*(sin(2.7*a)*cos(3.4*a)) + 0.0025*cos(3.8*a) + 0.0015*sin(2.8*a) + 0.005*tanh(0.5*a));\nf = sign(z) * (f_adapt * T * extra)^Exponent;\nU = beta + gamma * f;\nP(accept=1) = 1 / (1 + exp(-U))",
  "variable_descriptions": {
    "F1": {
      "description": "Fixed component 1 extracted from data",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "empirical",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "F2": {
      "description": "Fixed component 2 extracted from data",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "empirical",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "F3": {
      "description": "Fixed component 3 extracted from data",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "empirical",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "F4": {
      "description": "Fixed component 4 extracted from data",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "empirical",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "F5": {
      "description": "Fixed component 5 extracted from data",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "empirical",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "F6": {
      "description": "Fixed component 6 extracted from data",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "empirical",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "F7": {
      "description": "Fixed component 7 extracted from data",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "empirical",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "F8": {
      "description": "Fixed component 8 extracted from data",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "empirical",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "F9": {
      "description": "Fixed component 9 extracted from data",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "empirical",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "F10": {
      "description": "Fixed component 10 extracted from data",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "empirical",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "F11": {
      "description": "Fixed component 11 extracted from data",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "empirical",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "\u03b4": {
      "description": "Small constant offset added to the sum of fixed components",
      "range": {
        "min": 1e-09,
        "max": 0.001,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "constant",
        "parameters": {
          "value": 1e-06
        }
      },
      "learnable": false,
      "source": "calculated"
    },
    "beta": {
      "description": "Learnable intercept parameter (base bias) for latent utility",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -10,
          "high": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Learnable scaling parameter for the transformed signal",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0,
          "high": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "phi": {
      "description": "Learnable parameter governing the adaptive nonlinearity (especially in the negative branch)",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0.5,
          "high": 1.5
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "a": {
      "description": "Core sum computed from fixed components and \u03b4",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "a_mod": {
      "description": "Modified core sum after the first nonlinear transformation",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "z": {
      "description": "Intermediate signal after sequential nonlinear modulation",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "w": {
      "description": "Exponent weight computed from phi",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "f_adapt": {
      "description": "Adaptive transformed value from z; for z\u22650 it is clipped to [-30,30] and for z<0 uses an exponent of 36",
      "range": {
        "min": -30,
        "max": 30,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "T": {
      "description": "Dynamic threshold computed as the sum from k = 0 to 80 of (a^k * (1/2)^k)",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "extra": {
      "description": "Composite extra term from multiple multiplicative nonlinear functions including an extra nested softplus layer, raised to a power",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "Exponent": {
      "description": "Final exponent modulation factor including an extra oscillatory term",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "f": {
      "description": "Final transformed signal computed from f_adapt, T, and extra, with the sign of z",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "U": {
      "description": "Latent utility computed as beta plus gamma times f",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "P(accept=1)": {
      "description": "Predicted probability of acceptance computed by applying the logistic function to U",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "A highly nonlinear binary choice model that first aggregates eleven fixed components with a small offset into a core sum, which is then nonlinearly transformed via multiplicative trigonometric modulations and an adaptive function with differentiated treatments for positive and negative signals (the latter raised to the power of 36). A dynamic threshold is computed via a finite series and an extra composite term further enriches the transformation with additional oscillatory and nested softplus factors. The final signal is exponentiated by a modulated factor and combined with learnable parameters beta and gamma to yield a latent utility that is converted through a logistic function to predict acceptance.",
  "target_variable": "accept",
  "full_reasoning": "<MODEL>\na = F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11 + \u03b4;\na_mod = 1.08 * a * (1 + 0.012 * sin(a + 0.045));\nz = a_mod * (1 + 0.008 * cos(a + 0.065)) * (1 + 0.005 * sin(a + 0.115)) * (1 + 0.004 * cos(a + 0.085)) * (1 + 0.006 * (sin(a + 0.035) * cos(a + 0.055))) * (1 + 0.003 * (sin(a + 0.03) * cos(a + 0.05)));\nw = (phi - 0.5) / phi;\nf_adapt = { z \u2265 0 : clip(1.002 * ( (z)^w * (ln(1+z))^(1-w) * (z/(1+abs(z))) ), -30, 30) ,\n             z < 0  : phi * ( ( (z + 1e-6)/(1+abs(z + 1e-6)) )^36 ) };\nT = \u03a3\u2096\u208c\u2080^(80) (a^k * (1/2)^k);\nP_extra = exp(-a/0.1) * (z/(1+abs(z))) * (1+0.005*sin(1/(1+a))) * (1+0.002*cos(0.5*a)) * (1+0.003*cos(0.3*a))^2 * (1+0.004*cos(0.3*a))^2 * (1+0.0025*cos(0.7*a)) * (1+tanh(0.05*a)) * (1+1/(1+exp(-0.01*a))) * (1+0.002*cos(3*a)) * (1+0.002*(sin(2.5*a)+0.001*cos(3.5*a)+0.0015*sin(3*a))) * (1+1/(1+exp(-0.03*a))) * (1+tanh(0.07*a)) * (1+cos(3.1*a)) * (1+1/(1+exp(-0.04*a))) * (1+tanh(0.08*a)) * (1+cos(3.2*a)) * (1+1/(1+exp(-0.05*a))) * (1+tanh(0.1*a)) * (1+cos(3.4*a)) * (1+1/(1+exp(-0.06*a))) * (1+tanh(0.12*a)) * (1+cos(3.6*a)) * (1+1/(1+exp(-0.08*a))) * (1+tanh(0.2*a)) * (1+cos(4.0*a)) * softplus(softplus(softplus(softplus(softplus(0.865/(1+a)))));\nextra = (P_extra)^(0.9478 + 0.00018 * ln(1+a));\nExponent = (0.9478 + 0.00018 * ln(1+a)) * (1 + 0.0055*sin(2.9*a) + 0.0015*cos(3.9*a) + 0.0035*sin(3.5*a) + 0.0025*cos(4.5*a) + 0.0015*sin(3.0*a) + 0.0007*cos(4.2*a) + 0.0015*(sin(2.7*a)*cos(3.4*a)) + 0.0025*cos(3.8*a) + 0.0015*sin(2.8*a) + 0.005*tanh(0.5*a));\nf = sign(z) * (f_adapt * T * extra)^Exponent;\nU = beta + gamma * f;\nP(accept=1) = 1 / (1 + exp(-U))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"F1\": {\n      \"description\": \"Fixed component 1 extracted from data\",\n      \"range\": { \"min\": \"-inf\", \"max\": \"inf\", \"inclusive_min\": true, \"inclusive_max\": true },\n      \"distribution\": { \"type\": \"empirical\", \"parameters\": {} },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F2\": {\n      \"description\": \"Fixed component 2 extracted from data\",\n      \"range\": { \"min\": \"-inf\", \"max\": \"inf\", \"inclusive_min\": true, \"inclusive_max\": true },\n      \"distribution\": { \"type\": \"empirical\", \"parameters\": {} },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F3\": {\n      \"description\": \"Fixed component 3 extracted from data\",\n      \"range\": { \"min\": \"-inf\", \"max\": \"inf\", \"inclusive_min\": true, \"inclusive_max\": true },\n      \"distribution\": { \"type\": \"empirical\", \"parameters\": {} },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F4\": {\n      \"description\": \"Fixed component 4 extracted from data\",\n      \"range\": { \"min\": \"-inf\", \"max\": \"inf\", \"inclusive_min\": true, \"inclusive_max\": true },\n      \"distribution\": { \"type\": \"empirical\", \"parameters\": {} },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F5\": {\n      \"description\": \"Fixed component 5 extracted from data\",\n      \"range\": { \"min\": \"-inf\", \"max\": \"inf\", \"inclusive_min\": true, \"inclusive_max\": true },\n      \"distribution\": { \"type\": \"empirical\", \"parameters\": {} },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F6\": {\n      \"description\": \"Fixed component 6 extracted from data\",\n      \"range\": { \"min\": \"-inf\", \"max\": \"inf\", \"inclusive_min\": true, \"inclusive_max\": true },\n      \"distribution\": { \"type\": \"empirical\", \"parameters\": {} },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F7\": {\n      \"description\": \"Fixed component 7 extracted from data\",\n      \"range\": { \"min\": \"-inf\", \"max\": \"inf\", \"inclusive_min\": true, \"inclusive_max\": true },\n      \"distribution\": { \"type\": \"empirical\", \"parameters\": {} },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F8\": {\n      \"description\": \"Fixed component 8 extracted from data\",\n      \"range\": { \"min\": \"-inf\", \"max\": \"inf\", \"inclusive_min\": true, \"inclusive_max\": true },\n      \"distribution\": { \"type\": \"empirical\", \"parameters\": {} },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F9\": {\n      \"description\": \"Fixed component 9 extracted from data\",\n      \"range\": { \"min\": \"-inf\", \"max\": \"inf\", \"inclusive_min\": true, \"inclusive_max\": true },\n      \"distribution\": { \"type\": \"empirical\", \"parameters\": {} },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F10\": {\n      \"description\": \"Fixed component 10 extracted from data\",\n      \"range\": { \"min\": \"-inf\", \"max\": \"inf\", \"inclusive_min\": true, \"inclusive_max\": true },\n      \"distribution\": { \"type\": \"empirical\", \"parameters\": {} },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F11\": {\n      \"description\": \"Fixed component 11 extracted from data\",\n      \"range\": { \"min\": \"-inf\", \"max\": \"inf\", \"inclusive_min\": true, \"inclusive_max\": true },\n      \"distribution\": { \"type\": \"empirical\", \"parameters\": {} },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"\u03b4\": {\n      \"description\": \"Small constant offset added to the sum of fixed components\",\n      \"range\": { \"min\": 1e-9, \"max\": 0.001, \"inclusive_min\": true, \"inclusive_max\": true },\n      \"distribution\": { \"type\": \"constant\", \"parameters\": { \"value\": 1e-6 } },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Learnable intercept parameter (base bias) for latent utility\",\n      \"range\": { \"min\": -10, \"max\": 10, \"inclusive_min\": true, \"inclusive_max\": true },\n      \"distribution\": { \"type\": \"uniform\", \"parameters\": { \"low\": -10, \"high\": 10 } },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Learnable scaling parameter for the transformed signal\",\n      \"range\": { \"min\": 0, \"max\": 10, \"inclusive_min\": true, \"inclusive_max\": true },\n      \"distribution\": { \"type\": \"uniform\", \"parameters\": { \"low\": 0, \"high\": 10 } },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Learnable parameter governing the adaptive nonlinearity (especially in the negative branch)\",\n      \"range\": { \"min\": 0.5, \"max\": 1.5, \"inclusive_min\": true, \"inclusive_max\": true },\n      \"distribution\": { \"type\": \"uniform\", \"parameters\": { \"low\": 0.5, \"high\": 1.5 } },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"a\": {\n      \"description\": \"Core sum computed from fixed components and \u03b4\",\n      \"range\": { \"min\": \"-inf\", \"max\": \"inf\" },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a_mod\": {\n      \"description\": \"Modified core sum after the first nonlinear transformation\",\n      \"range\": { \"min\": \"-inf\", \"max\": \"inf\" },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"z\": {\n      \"description\": \"Intermediate signal after sequential nonlinear modulation\",\n      \"range\": { \"min\": \"-inf\", \"max\": \"inf\" },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"w\": {\n      \"description\": \"Exponent weight computed from phi\",\n      \"range\": { \"min\": \"-inf\", \"max\": \"inf\" },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_adapt\": {\n      \"description\": \"Adaptive transformed value from z; for z\u22650 it is clipped to [-30,30] and for z<0 uses an exponent of 36\",\n      \"range\": { \"min\": -30, \"max\": 30 },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"T\": {\n      \"description\": \"Dynamic threshold computed as the sum from k = 0 to 80 of (a^k * (1/2)^k)\",\n      \"range\": { \"min\": 0, \"max\": \"inf\" },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"extra\": {\n      \"description\": \"Composite extra term from multiple multiplicative nonlinear functions including an extra nested softplus layer, raised to a power\",\n      \"range\": { \"min\": 0, \"max\": \"inf\" },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"Exponent\": {\n      \"description\": \"Final exponent modulation factor including an extra oscillatory term\",\n      \"range\": { \"min\": \"-inf\", \"max\": \"inf\" },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f\": {\n      \"description\": \"Final transformed signal computed from f_adapt, T, and extra, with the sign of z\",\n      \"range\": { \"min\": \"-inf\", \"max\": \"inf\" },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed as beta plus gamma times f\",\n      \"range\": { \"min\": \"-inf\", \"max\": \"inf\" },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"P(accept=1)\": {\n      \"description\": \"Predicted probability of acceptance computed by applying the logistic function to U\",\n      \"range\": { \"min\": 0, \"max\": 1 },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA highly nonlinear binary choice model that first aggregates eleven fixed components with a small offset into a core sum, which is then nonlinearly transformed via multiplicative trigonometric modulations and an adaptive function with differentiated treatments for positive and negative signals (the latter raised to the power of 36). A dynamic threshold is computed via a finite series and an extra composite term further enriches the transformation with additional oscillatory and nested softplus factors. The final signal is exponentiated by a modulated factor and combined with learnable parameters beta and gamma to yield a latent utility that is converted through a logistic function to predict acceptance.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: a = F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11 + \u03b4;\na_mod = 1.08 * a * (1 + 0.012 * sin(a + 0.045));\nz = a_mod * (1 + 0.008 * cos(a + 0.065)) * (1 + 0.005 * sin(a + 0.115)) * (1 + 0.004 * cos(a + 0.085)) * (1 + 0.006 * (sin(a + 0.035) * cos(a + 0.055))) * (1 + 0.003 * (sin(a + 0.03) * cos(a + 0.05)));\nw = (phi - 0.5) / phi;\nf_adapt = { z \u2265 0 : clip(1.002 * ( (z)^w * (ln(1+z))^(1-w) * (z/(1+abs(z))) ), -30, 30) ,\n             z < 0  : phi * ( ( (z + 1e-6)/(1+abs(z + 1e-6)) )^36 ) };\nT = \u03a3\u2096\u208c\u2080^(80) (a^k * (1/2)^k);\nP_extra = exp(-a/0.1) * (z/(1+abs(z))) * (1+0.005*sin(1/(1+a))) * (1+0.002*cos(0.5*a)) * (1+0.003*cos(0.3*a))^2 * (1+0.004*cos(0.3*a))^2 * (1+0.0025*cos(0.7*a)) * (1+tanh(0.05*a)) * (1+1/(1+exp(-0.01*a))) * (1+0.002*cos(3*a)) * (1+0.002*(sin(2.5*a)+0.001*cos(3.5*a)+0.0015*sin(3*a))) * (1+1/(1+exp(-0.03*a))) * (1+tanh(0.07*a)) * (1+cos(3.1*a)) * (1+1/(1+exp(-0.04*a))) * (1+tanh(0.08*a)) * (1+cos(3.2*a)) * (1+1/(1+exp(-0.05*a))) * (1+tanh(0.1*a)) * (1+cos(3.4*a)) * (1+1/(1+exp(-0.06*a))) * (1+tanh(0.12*a)) * (1+cos(3.6*a)) * (1+1/(1+exp(-0.08*a))) * (1+tanh(0.2*a)) * (1+cos(4.0*a)) * softplus(softplus(softplus(softplus(softplus(0.865/(1+a)))));\nextra = (P_extra)^(0.9478 + 0.00018 * ln(1+a));\nExponent = (0.9478 + 0.00018 * ln(1+a)) * (1 + 0.0055*sin(2.9*a) + 0.0015*cos(3.9*a) + 0.0035*sin(3.5*a) + 0.0025*cos(4.5*a) + 0.0015*sin(3.0*a) + 0.0007*cos(4.2*a) + 0.0015*(sin(2.7*a)*cos(3.4*a)) + 0.0025*cos(3.8*a) + 0.0015*sin(2.8*a) + 0.005*tanh(0.5*a));\nf = sign(z) * (f_adapt * T * extra)^Exponent;\nU = beta + gamma * f;\nP(accept=1) = 1 / (1 + exp(-U))\nSummary: A highly nonlinear binary choice model that first aggregates eleven fixed components with a small offset into a core sum, which is then nonlinearly transformed via multiplicative trigonometric modulations and an adaptive function with differentiated treatments for positive and negative signals (the latter raised to the power of 36). A dynamic threshold is computed via a finite series and an extra composite term further enriches the transformation with additional oscillatory and nested softplus factors. The final signal is exponentiated by a modulated factor and combined with learnable parameters beta and gamma to yield a latent utility that is converted through a logistic function to predict acceptance.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, beta=0, gamma=1, phi=1):\n    model_predictions = []\n    delta = 1e-06\n\n    def clip(x, lower, upper):\n        return max(lower, min(x, upper))\n\n    def sign(x):\n        if x > 0:\n            return 1\n        elif x < 0:\n            return -1\n        else:\n            return 0\n\n    def softplus(x):\n        return math.log(1 + math.exp(x))\n\n    def tanh(x):\n        return (math.exp(x) - math.exp(-x)) / (math.exp(x) + math.exp(-x))\n\n    def exp(x):\n        try:\n            return math.exp(x)\n        except OverflowError:\n            return float('inf')\n\n\n    for trial in trial_data:\n        F1 = trial.get(\"F1\", 0)\n        F2 = trial.get(\"F2\", 0)\n        F3 = trial.get(\"F3\", 0)\n        F4 = trial.get(\"F4\", 0)\n        F5 = trial.get(\"F5\", 0)\n        F6 = trial.get(\"F6\", 0)\n        F7 = trial.get(\"F7\", 0)\n        F8 = trial.get(\"F8\", 0)\n        F9 = trial.get(\"F9\", 0)\n        F10 = trial.get(\"F10\", 0)\n        F11 = trial.get(\"F11\", 0)\n\n        a = F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11 + delta\n        a_mod = 1.08 * a * (1 + 0.012 * math.sin(a + 0.045))\n        z = a_mod * (1 + 0.008 * math.cos(a + 0.065)) * (1 + 0.005 * math.sin(a + 0.115)) * (1 + 0.004 * math.cos(a + 0.085)) * (1 + 0.006 * (math.sin(a + 0.035) * math.cos(a + 0.055))) * (1 + 0.003 * (math.sin(a + 0.03) * math.cos(a + 0.05)))\n        w = (phi - 0.5) / phi\n\n        if z >= 0:\n            f_adapt = clip(1.002 * ((z)**w * (math.log(1+z))**(1-w) * (z/(1+abs(z)))), -30, 30)\n        else:\n            f_adapt = phi * (((z + 1e-6)/(1+abs(z + 1e-6)))**36)\n\n        T = sum(a**k * (1/2)**k for k in range(81))\n\n        P_extra = exp(-a/0.1) * (z/(1+abs(z))) * (1+0.005*math.sin(1/(1+a))) * (1+0.002*math.cos(0.5*a)) * (1+0.003*math.cos(0.3*a))**2 * (1+0.004*math.cos(0.3*a))**2 * (1+0.0025*math.cos(0.7*a)) * (1+tanh(0.05*a)) * (1+1/(1+exp(-0.01*a))) * (1+0.002*math.cos(3*a)) * (1+0.002*(math.sin(2.5*a)+0.001*math.cos(3.5*a)+0.0015*math.sin(3*a))) * (1+1/(1+exp(-0.03*a))) * (1+tanh(0.07*a)) * (1+math.cos(3.1*a)) * (1+1/(1+exp(-0.04*a))) * (1+tanh(0.08*a)) * (1+math.cos(3.2*a)) * (1+1/(1+exp(-0.05*a))) * (1+tanh(0.1*a)) * (1+math.cos(3.4*a)) * (1+1/(1+exp(-0.06*a))) * (1+tanh(0.12*a)) * (1+math.cos(3.6*a)) * (1+1/(1+exp(-0.08*a))) * (1+tanh(0.2*a)) * (1+math.cos(4.0*a)) * softplus(softplus(softplus(softplus(softplus(0.865/(1+a))))))\n        extra = (P_extra)**(0.9478 + 0.00018 * math.log(1+a))\n        Exponent = (0.9478 + 0.00018 * math.log(1+a)) * (1 + 0.0055*math.sin(2.9*a) + 0.0015*math.cos(3.9*a) + 0.0035*math.sin(3.5*a) + 0.0025*math.cos(4.5*a) + 0.0015*math.sin(3.0*a) + 0.0007*math.cos(4.2*a) + 0.0015*(math.sin(2.7*a)*math.cos(3.4*a)) + 0.0025*math.cos(3.8*a) + 0.0015*math.sin(2.8*a) + 0.005*tanh(0.5*a))\n        f = sign(z) * (f_adapt * T * extra)**Exponent\n        U = beta + gamma * f\n        P_accept = 1 / (1 + exp(-U))\n\n        model_predictions.append(P_accept)\n\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.5567765567765568,
  "fitting_results": [
    {
      "beta": -10.0,
      "gamma": 6.379126896452681,
      "phi": 1.104525091430091,
      "success": true,
      "log_likelihood": -24.953979470262787,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 8.750036042511091,
      "phi": 1.4635222082577393,
      "success": true,
      "log_likelihood": -24.953298502232386,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.078203432618677,
      "gamma": 8.54958038337135,
      "phi": 1.2892639557135168,
      "success": true,
      "log_likelihood": -24.89771432437607,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.5555675268135563,
      "phi": 0.6541943907303317,
      "success": true,
      "log_likelihood": -24.953434695838467,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 7.373282599998669,
      "phi": 1.096695251353005,
      "success": true,
      "log_likelihood": -24.953389297969775,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.2840697761840924,
      "gamma": 2.0736127746678665,
      "phi": 1.4425098576896673,
      "success": true,
      "log_likelihood": -23.545973163855095,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 3.1735961774815404,
      "phi": 1.0149063563008398,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.8148731401664425,
      "gamma": 1.1095822429595714,
      "phi": 0.8818353652864787,
      "success": true,
      "log_likelihood": -22.914510051413455,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 2.9910104784714706,
      "phi": 1.1392555696113904,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 3.1456370076363926,
      "phi": 1.4206629765708132,
      "success": true,
      "log_likelihood": -24.95348009370716,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 9.18222414491771,
      "phi": 0.7204740165771165,
      "success": true,
      "log_likelihood": -24.95338929796977,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 5.550971470234006,
      "phi": 1.0559765244441919,
      "success": true,
      "log_likelihood": -24.953934072394095,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 6.128208077940681,
      "phi": 1.3317034437018962,
      "success": true,
      "log_likelihood": -24.953434695838467,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.2650800265778952,
      "phi": 0.8124830767701882,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 2.3029463107171555,
      "phi": 1.15356328340431,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 9.999999999999998,
      "gamma": 1.4342328542150562,
      "phi": 0.6554727385040894,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 5.609261582385553,
      "phi": 1.153571890389043,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 8.203774305323751,
      "phi": 0.7011516107173285,
      "success": true,
      "log_likelihood": -16.27763329973089,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 7.029146635936989,
      "phi": 1.0401012076290708,
      "success": true,
      "log_likelihood": -15.27767869783462,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 6.377178911432785,
      "phi": 0.6427760121416073,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.2472850699793807,
      "gamma": 0.8614003680229532,
      "phi": 1.3700467935010092,
      "success": true,
      "log_likelihood": -24.730616753521744,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 2.129665841162245,
      "phi": 0.7895336228488945,
      "success": true,
      "log_likelihood": -16.27763329973089,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.3618155953356028,
      "phi": 0.5458870824231113,
      "success": true,
      "log_likelihood": -24.95352549157585,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.078193968774192,
      "gamma": 6.281180658579121,
      "phi": 0.8453727831749309,
      "success": true,
      "log_likelihood": -24.897714324445598,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -7.621584822252865,
      "gamma": 8.875868066959393,
      "phi": 0.5880613018277719,
      "success": true,
      "log_likelihood": -24.953299571315483,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.6790489718345648,
      "gamma": 5.472896723386421,
      "phi": 0.5610740544756504,
      "success": true,
      "log_likelihood": -24.450957568503004,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.2473241190357534,
      "gamma": 5.77763243713255,
      "phi": 0.8622358140077385,
      "success": true,
      "log_likelihood": -24.73061675210621,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -9.999999999999998,
      "gamma": 4.191835840664194,
      "phi": 1.2567743419033617,
      "success": true,
      "log_likelihood": -24.953661685181935,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 6.092725730675549,
      "phi": 0.9733530468547335,
      "success": true,
      "log_likelihood": -15.27767869783462,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 8.10141689443731,
      "phi": 1.4275558069416705,
      "success": true,
      "log_likelihood": -19.2774971054197,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 4.835958941486789,
      "phi": 1.4672023576166497,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 6.130110336801531,
      "phi": 0.7260926529031192,
      "success": true,
      "log_likelihood": -24.953979470262787,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -9.12638379867808,
      "gamma": 8.866844139663403,
      "phi": 1.4638408824416622,
      "success": true,
      "log_likelihood": -24.95362478519157,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.16173425701568878,
      "phi": 1.1836811610976816,
      "success": true,
      "log_likelihood": -24.953480093707164,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 6.62931000786294,
      "phi": 0.752031472873629,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.28410826136120054,
      "gamma": 2.2124726707582743,
      "phi": 0.7631458756507884,
      "success": true,
      "log_likelihood": -23.545973164133652,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.5232753320700285,
      "gamma": 0.9813586476888625,
      "phi": 1.4827762370236934,
      "success": true,
      "log_likelihood": -22.15793816076213,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -9.091469006839276,
      "gamma": 5.343204620324461,
      "phi": 0.5144166424990071,
      "success": true,
      "log_likelihood": -24.9532985500224,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.8148650929658997,
      "gamma": 3.7371675607327215,
      "phi": 0.9618520345519533,
      "success": true,
      "log_likelihood": -22.91451005142806,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 6.975632161722646,
      "phi": 0.5546628876941364,
      "success": true,
      "log_likelihood": -14.277724095938346,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.19265011070431756,
      "gamma": 0.4139513468177358,
      "phi": 1.1144253490372078,
      "success": true,
      "log_likelihood": -24.056945188725837,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 6.277108556901138,
      "phi": 1.0748531662614882,
      "success": true,
      "log_likelihood": -24.95375248091932,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 6.783866592173503,
      "phi": 1.0147100198346775,
      "success": true,
      "log_likelihood": -12.277814892145805,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.2474848614803795,
      "gamma": 2.603626693054405,
      "phi": 1.0985733178499055,
      "success": true,
      "log_likelihood": -24.730616750568956,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.19265448957906703,
      "gamma": 5.952469278072538,
      "phi": 1.0417073313338943,
      "success": true,
      "log_likelihood": -24.056945188723855,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 3.06064639029783,
      "gamma": 9.318337201171088,
      "phi": 0.8282197848265423,
      "success": true,
      "log_likelihood": -21.27032112492012,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.075668544807929,
      "gamma": 3.256611809757244,
      "phi": 0.7794244832555589,
      "success": true,
      "log_likelihood": -24.897714624254807,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 9.667832178197877,
      "phi": 1.388883164438616,
      "success": true,
      "log_likelihood": -24.95348009370716,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 4.537425981860636,
      "phi": 1.0016922240837476,
      "success": true,
      "log_likelihood": -24.953434695838464,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.0782966789024986,
      "gamma": 1.8766964316776158,
      "phi": 1.1649162738656698,
      "success": true,
      "log_likelihood": -24.897714324110705,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.5235063142182386,
      "gamma": 7.679397962979233,
      "phi": 0.8334435026290206,
      "success": true,
      "log_likelihood": -22.157938175462224,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 1.370714809757616,
      "phi": 0.6074695661266918,
      "success": true,
      "log_likelihood": -24.9538886745254,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.0774991096259043,
      "gamma": 9.174073467694521,
      "phi": 0.6577595701600648,
      "success": true,
      "log_likelihood": -24.897714351023012,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.679055927315108,
      "gamma": 2.2982614701946202,
      "phi": 0.8106902666018391,
      "success": true,
      "log_likelihood": -24.450957568495102,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 1.7688760782353163,
      "phi": 1.271944107818733,
      "success": true,
      "log_likelihood": -24.95348009370716,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 7.870336162255576,
      "phi": 1.4184040794778343,
      "success": true,
      "log_likelihood": -24.953570889444546,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 9.757128523163745,
      "phi": 1.343622369898465,
      "success": true,
      "log_likelihood": -24.953661685181938,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 9.999999999999998,
      "gamma": 7.921112961103962,
      "phi": 1.2128775361057151,
      "success": true,
      "log_likelihood": -15.27767869783462,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 3.286453091163045,
      "phi": 1.089852977140834,
      "success": true,
      "log_likelihood": -24.953934072394095,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 2.2659153250343964,
      "phi": 1.409417936343952,
      "success": true,
      "log_likelihood": -18.27754250352343,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.19265442210632558,
      "gamma": 3.328070355803164,
      "phi": 1.113704247807786,
      "success": true,
      "log_likelihood": -24.056945188723812,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 2.6541790548347954,
      "phi": 0.5837541300771768,
      "success": true,
      "log_likelihood": -24.953298502232386,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 1.4786113750352725,
      "phi": 1.2270572148040184,
      "success": true,
      "log_likelihood": -24.953979470262787,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 3.7864753656275285,
      "phi": 0.7482800273039998,
      "success": true,
      "log_likelihood": -24.95338929796977,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 9.24813899112394,
      "phi": 0.6559340375395587,
      "success": true,
      "log_likelihood": -24.95375248091932,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.2482841594049436,
      "gamma": 1.0876250453591219,
      "phi": 1.0271241284265902,
      "success": true,
      "log_likelihood": -24.730616845367962,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 9.999999999999998,
      "gamma": 2.9038764967964017,
      "phi": 0.8097862460701989,
      "success": true,
      "log_likelihood": -14.277724095938348,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.41990596931034685,
      "phi": 1.2605406251971862,
      "success": true,
      "log_likelihood": -16.277633299730887,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.2474438523736486,
      "gamma": 1.757473641060765,
      "phi": 0.6651196112041337,
      "success": true,
      "log_likelihood": -24.73061675030533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 1.127834168042584,
      "phi": 1.1699901876372114,
      "success": true,
      "log_likelihood": -14.27772409593835,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 4.661778228139073,
      "phi": 0.989452201571341,
      "success": true,
      "log_likelihood": -24.953934072394095,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 3.553381052937219,
      "phi": 0.7287093635512857,
      "success": true,
      "log_likelihood": -24.9538886745254,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.07809830938689,
      "gamma": 8.370307715822856,
      "phi": 0.7047390841545688,
      "success": true,
      "log_likelihood": -24.897714325589554,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 1.8935841960951572,
      "phi": 1.3645850656337049,
      "success": true,
      "log_likelihood": -19.2774971054197,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -6.22172267803918,
      "gamma": 2.5675887315703716,
      "phi": 1.1971086976156635,
      "success": true,
      "log_likelihood": -24.95331616837372,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 9.16130571908506,
      "gamma": 2.4572947641385454,
      "phi": 0.7843594322594023,
      "success": true,
      "log_likelihood": -22.27728236144439,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.5492361515329813,
      "phi": 0.9728007250607791,
      "success": true,
      "log_likelihood": -13.277769494042078,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.13202387455687137,
      "phi": 0.9157927726903569,
      "success": true,
      "log_likelihood": -24.95402486813148,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.1926507724150513,
      "gamma": 3.9286136011662487,
      "phi": 1.125042202848622,
      "success": true,
      "log_likelihood": -24.056945188724892,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 8.55418835935641,
      "phi": 1.0636027032494344,
      "success": true,
      "log_likelihood": -24.953979470262784,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.0783118857526923,
      "gamma": 9.352357304300106,
      "phi": 1.1755354212168179,
      "success": true,
      "log_likelihood": -24.897714324139734,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 7.3999404616315365,
      "phi": 0.8499580387765507,
      "success": true,
      "log_likelihood": -14.277724095938348,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 1.7878932169531037,
      "phi": 1.2369273453451832,
      "success": true,
      "log_likelihood": -24.953934072394095,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -6.073532747765203,
      "gamma": 4.665011558308191,
      "phi": 0.8696282484052099,
      "success": true,
      "log_likelihood": -24.953322251009666,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.19265295719401382,
      "gamma": 2.505720518222443,
      "phi": 1.2849535286525686,
      "success": true,
      "log_likelihood": -24.056945188723418,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 9.802934139026094,
      "phi": 1.1411622757163888,
      "success": true,
      "log_likelihood": -24.95393407239409,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.5230214806228697,
      "gamma": 3.06313726191233,
      "phi": 1.1043884076393293,
      "success": true,
      "log_likelihood": -22.157938154755357,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 3.2152987273660507,
      "phi": 1.1396407057425062,
      "success": true,
      "log_likelihood": -24.95375248091932,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.7624868591865686,
      "phi": 0.7154726971561441,
      "success": true,
      "log_likelihood": -13.277769494042078,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 4.97534233215549,
      "phi": 0.5947146054144613,
      "success": true,
      "log_likelihood": -24.953343900101082,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 5.747883278729155,
      "gamma": 7.818073358662976,
      "phi": 0.8000585654076308,
      "success": true,
      "log_likelihood": -22.273265760266074,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "beta": {
        "r": 0.7250128721252687,
        "p": 1.4796794749190795e-17
      },
      "gamma": {
        "r": 0.009528657235266032,
        "p": 0.9250371019058593
      },
      "phi": {
        "r": -0.11351232114980826,
        "p": 0.2608048605492066
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 53.92785579390101,
  "bic_results": {
    "average_bic": 53.92785579390101,
    "individual_bics": [
      60.6585157558939,
      60.6571538198331,
      60.54598546412048,
      60.65742620704526,
      60.65733541130788,
      57.84250314307852,
      33.3062773958674,
      56.579576918195244,
      33.3062773958674,
      60.657517002782654,
      60.65733541130787,
      60.65842496015652,
      60.65742620704526,
      33.3062773958674,
      33.3062773958674,
      33.3062773958674,
      33.3062773958674,
      43.305823414830115,
      41.305914211037575,
      33.3062773958674,
      60.211790322411815,
      43.305823414830115,
      60.65760779852003,
      60.54598546425953,
      60.657155957999294,
      59.65247195237434,
      60.21179031958076,
      60.657880185732196,
      41.305914211037575,
      49.30555102620774,
      33.3062773958674,
      60.6585157558939,
      60.65780638575147,
      60.657517002782654,
      33.3062773958674,
      57.84250314363564,
      55.066433136892584,
      60.65715391541313,
      56.57957691822445,
      39.30600500724502,
      58.86444719282001,
      60.65806177720697,
      35.30618659965994,
      60.21179031650624,
      58.864447192816044,
      53.29119906520857,
      60.54598606387795,
      60.657517002782654,
      60.65742620704526,
      60.545985463589744,
      55.06643316629278,
      60.65833416441913,
      60.54598551741435,
      59.65247195235854,
      60.657517002782654,
      60.657698594257425,
      60.65788018573221,
      41.305914211037575,
      60.65842496015652,
      47.3056418224152,
      58.86444719281596,
      60.6571538198331,
      60.6585157558939,
      60.65733541130787,
      60.65806177720697,
      60.21179050610425,
      39.30600500724503,
      43.3058234148301,
      60.21179031597899,
      39.306005007245034,
      60.65842496015652,
      60.65833416441913,
      60.545985466547435,
      49.30555102620774,
      60.65718915211578,
      55.30512153825711,
      37.306095803452486,
      60.658606551631294,
      58.86444719281812,
      60.6585157558939,
      60.545985463647796,
      39.30600500724503,
      60.65842496015652,
      60.65720131738766,
      58.86444719281516,
      60.65842496015651,
      55.06643312487904,
      60.65806177720697,
      37.306095803452486,
      60.65724461557049,
      55.29708833590048
    ],
    "group_enabled": false,
    "group_bics": null,
    "num_parameters": 3,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- beta: r = 0.725\n- gamma: r = 0.010\n- phi: r = -0.114",
  "previous_models": [
    "Specification: a = F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11 + \u03b4;\na_mod = 1.08 * a * (1 + 0.012 * sin(a + 0.045));\nz = a_mod * (1 + 0.008 * cos(a + 0.065)) * (1 + 0.005 * sin(a + 0.115)) * (1 + 0.004 * cos(a + 0.085)) * (1 + 0.006 * (sin(a + 0.035) * cos(a + 0.055))) * (1 + 0.003 * (sin(a + 0.03) * cos(a + 0.05)));\nw = (phi - 0.5) / phi;\nf_adapt = { z \u2265 0 : clip(1.002 * ( (z)^w * (ln(1+z))^(1-w) * (z/(1+abs(z))) ), -30, 30) ,\n             z < 0  : phi * ( ( (z + 1e-6)/(1+abs(z + 1e-6)) )^36 ) };\nT = \u03a3\u2096\u208c\u2080^(80) (a^k * (1/2)^k);\nP_extra = exp(-a/0.1) * (z/(1+abs(z))) * (1+0.005*sin(1/(1+a))) * (1+0.002*cos(0.5*a)) * (1+0.003*cos(0.3*a))^2 * (1+0.004*cos(0.3*a))^2 * (1+0.0025*cos(0.7*a)) * (1+tanh(0.05*a)) * (1+1/(1+exp(-0.01*a))) * (1+0.002*cos(3*a)) * (1+0.002*(sin(2.5*a)+0.001*cos(3.5*a)+0.0015*sin(3*a))) * (1+1/(1+exp(-0.03*a))) * (1+tanh(0.07*a)) * (1+cos(3.1*a)) * (1+1/(1+exp(-0.04*a))) * (1+tanh(0.08*a)) * (1+cos(3.2*a)) * (1+1/(1+exp(-0.05*a))) * (1+tanh(0.1*a)) * (1+cos(3.4*a)) * (1+1/(1+exp(-0.06*a))) * (1+tanh(0.12*a)) * (1+cos(3.6*a)) * (1+1/(1+exp(-0.08*a))) * (1+tanh(0.2*a)) * (1+cos(4.0*a)) * softplus(softplus(softplus(softplus(softplus(0.865/(1+a)))));\nextra = (P_extra)^(0.9478 + 0.00018 * ln(1+a));\nExponent = (0.9478 + 0.00018 * ln(1+a)) * (1 + 0.0055*sin(2.9*a) + 0.0015*cos(3.9*a) + 0.0035*sin(3.5*a) + 0.0025*cos(4.5*a) + 0.0015*sin(3.0*a) + 0.0007*cos(4.2*a) + 0.0015*(sin(2.7*a)*cos(3.4*a)) + 0.0025*cos(3.8*a) + 0.0015*sin(2.8*a) + 0.005*tanh(0.5*a));\nf = sign(z) * (f_adapt * T * extra)^Exponent;\nU = beta + gamma * f;\nP(accept=1) = 1 / (1 + exp(-U))\nSummary: A highly nonlinear binary choice model that first aggregates eleven fixed components with a small offset into a core sum, which is then nonlinearly transformed via multiplicative trigonometric modulations and an adaptive function with differentiated treatments for positive and negative signals (the latter raised to the power of 36). A dynamic threshold is computed via a finite series and an extra composite term further enriches the transformation with additional oscillatory and nested softplus factors. The final signal is exponentiated by a modulated factor and combined with learnable parameters beta and gamma to yield a latent utility that is converted through a logistic function to predict acceptance.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 53.92785579390101\nOverall Accuracy: 0.5568\n\nParameter Recovery:\n- beta: r = 0.725\n- gamma: r = 0.010\n- phi: r = -0.114"
  ]
}