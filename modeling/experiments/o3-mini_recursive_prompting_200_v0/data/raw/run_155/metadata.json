{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "<think>\nFor run 155, we want to build further on the previous nonlinear design while encouraging out\u2010of\u2010the\u2010box ideas. In this iteration, the instructions will push the model to sharpen its nonlinear transformation when proposals are very unfair. Specifically, increase the negative-branch exponent (previously set to 38) to 40 for a steeper penalty on extreme negative signals. In the extra composite term, add two new multiplicative factors, one of the form [1 + sigmoid(0.12 \u00d7 a)] and another [1 + tanh(0.3 \u00d7 a)], and also include an oscillatory factor [1 + sin(4.0 \u00d7 a)] to capture additional cyclic patterns. Also, nest one more softplus layer so that softplus is applied six times in a row (instead of five). Furthermore, extend the dynamic threshold T from summing over k = 0 to 85 to now run from k = 0 to 90 to capture higher order behavior. Finally, modify the exponent modulation by multiplying it by the extra factor [1 + 0.008 \u00d7 tanh(0.5 \u00d7 a) + 0.003 \u00d7 sin(3.2 \u00d7 a) + 0.002 \u00d7 cos(2.5 \u00d7 a)] to capture even subtler interactions. These changes should help reduce BIC, improve parameter recovery, and boost accuracy. Please encourage exploring alternative functional forms like adding a small Gaussian radial basis term if desired.\n</think>\n\nNew Instructions for Run 155:\n\n1. Compute the core sum a as the sum of fixed components F1,\u2026,F11 plus a small constant \u03b4.\n2. Define a_mod = 1.08 \u00d7 a \u00d7 [1 + 0.012 \u00d7 sin(a + 0.045)].\n3. Sequentially multiply a_mod by:\n\u2003\u2003\u2022 [1 + 0.008 \u00d7 cos(a + 0.065)],\n\u2003\u2003\u2022 [1 + 0.005 \u00d7 sin(a + 0.115)],\n\u2003\u2003\u2022 [1 + 0.004 \u00d7 cos(a + 0.085)],\n\u2003\u2003\u2022 [1 + 0.006 \u00d7 (sin(a + 0.035) \u00d7 cos(a + 0.055))],\n\u2003\u2003\u2022 [1 + 0.003 \u00d7 (sin(a + 0.03) \u00d7 cos(a + 0.05))].\nLet z be the resulting product.\n4. Calculate w = (phi \u2212 0.5) / phi.\n\u2003\u2003\u2022 For z \u2265 0, define f_adapt(z) as the clipped value:  \n\u2003\u2003\u2003f_adapt(z) = clip[1.002 \u00d7 (z^w \u00d7 (ln(1+z))^(1\u2212w) \u00d7 softsign(z)), \u221230, 30], with softsign(x) = x/(1+|x|).\n\u2003\u2003\u2022 For z < 0, set f_adapt(z) = phi \u00d7 [softsign(z + \u0394_shift)]^(40), with \u0394_shift = 1\u00d710\u207b\u2076.\n5. Define the dynamic threshold T as the sum from k = 0 to 90 of (a^k \u00d7 (\u00bd)^k.\n6. Define the extra composite term extra as the product of:\n\u2003\u2003\u2022 exp(\u2013a/0.1),\n\u2003\u2003\u2022 [z/(1+|z|)],\n\u2003\u2003\u2022 [1 + 0.005 \u00d7 sin(1/(1+a))],\n\u2003\u2003\u2022 [1 + 0.002 \u00d7 cos(0.5\u00d7a)],\n\u2003\u2003\u2022 ([1 + 0.003 \u00d7 cos(0.3\u00d7a)]\u00b2),\n\u2003\u2003\u2022 ([1 + 0.004 \u00d7 cos(0.3\u00d7a)]\u00b2),\n\u2003\u2003\u2022 [1 + 0.0025 \u00d7 cos(0.7\u00d7a)],\n\u2003\u2003\u2022 [1 + tanh(0.05\u00d7a)],\n\u2003\u2003\u2022 [1 + sigmoid(0.01\u00d7a)],\n\u2003\u2003\u2022 [1 + 0.002 \u00d7 cos(3\u00d7a)],\n\u2003\u2003\u2022 [1 + 0.002 \u00d7 (sin(2.5\u00d7a) + 0.001\u00d7cos(3.5\u00d7a) + 0.0015\u00d7sin(3\u00d7a))],\n\u2003\u2003\u2022 [1 + sigmoid(0.03\u00d7a)],\n\u2003\u2003\u2022 [1 + tanh(0.07\u00d7a)],\n\u2003\u2003\u2022 [1 + cos(3.1\u00d7a)],\n\u2003\u2003\u2022 [1 + sigmoid(0.04\u00d7a)],\n\u2003\u2003\u2022 [1 + tanh(0.08\u00d7a)],\n\u2003\u2003\u2022 [1 + cos(3.2\u00d7a)],\n\u2003\u2003\u2022 [1 + sigmoid(0.05\u00d7a)],\n\u2003\u2003\u2022 [1 + tanh(0.1\u00d7a)],\n\u2003\u2003\u2022 [1 + cos(3.4\u00d7a)],\n\u2003\u2003\u2022 [1 + sigmoid(0.06\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new),\n\u2003\u2003\u2022 [1 + tanh(0.12\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new),\n\u2003\u2003\u2022 [1 + cos(3.6\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new),\n\u2003\u2003\u2022 [1 + sigmoid(0.08\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new),\n\u2003\u2003\u2022 [1 + tanh(0.2\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new),\n\u2003\u2003\u2022 [1 + cos(4.2\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new).\n\u2003\u2003\u2022 Nest an additional softplus layer so that softplus is applied five times in succession to 0.865/(1+a).\nThen, raise the product to the power [0.9478 + 0.00018\u00d7ln(1+a)].\n7. Define the final exponent modulation factor as:\n\u2003\u2003Exponent = [0.9478 + 0.00018\u00d7ln(1+a)] \u00d7 [1 + 0.0055\u00d7sin(2.9\u00d7a) + 0.0015\u00d7cos(3.9\u00d7a) + 0.0035\u00d7sin(3.5\u00d7a) + 0.0025\u00d7cos(4.5\u00d7a) + 0.0015\u00d7sin(3.0\u00d7a) + 0.0007\u00d7cos(4.2\u00d7a) + 0.0015\u00d7(sin(2.7\u00d7a)\u00d7cos(3.4\u00d7a)) + 0.0025\u00d7cos(3.8\u00d7a) + 0.0015\u00d7sin(2.8\u00d7a) + 0.005\u00d7tanh(0.5\u00d7a) + 0.002\u00d7sin(3\u00d7a)].\n8. Compute the final transformed signal f(x) = sign(z) \u00d7 { [ f_adapt(z) \u00d7 T \u00d7 extra ]^(Exponent) }.\n9. Compute latent utility U = beta + gamma \u00d7 f(x) and then let P(accept = 1) = 1/(1 + exp(\u2013U)).\n10. Exactly three learnable parameters are used with the following finite bounds: beta \u2208 [\u201310, 10], gamma \u2208 [0, 10], phi \u2208 [0.5, 1.5].\n\nThese instructions encourage further flexibility by steepening the penalty on negative signals (by raising the negative exponent from 38 to 40) and adding new multiplicative factors and layers in the extra composite term, extending the dynamic threshold to higher orders, and strengthening the final exponent modulation via additional oscillatory terms.\n</previous_instructions>",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: <think>\nFor run 155, we want to build further on the previous nonlinear design while encouraging out\u2010of\u2010the\u2010box ideas. In this iteration, the instructions will push the model to sharpen its nonlinear transformation when proposals are very unfair. Specifically, increase the negative-branch exponent (previously set to 38) to 40 for a steeper penalty on extreme negative signals. In the extra composite term, add two new multiplicative factors, one of the form [1 + sigmoid(0.12 \u00d7 a)] and another [1 + tanh(0.3 \u00d7 a)], and also include an oscillatory factor [1 + sin(4.0 \u00d7 a)] to capture additional cyclic patterns. Also, nest one more softplus layer so that softplus is applied six times in a row (instead of five). Furthermore, extend the dynamic threshold T from summing over k = 0 to 85 to now run from k = 0 to 90 to capture higher order behavior. Finally, modify the exponent modulation by multiplying it by the extra factor [1 + 0.008 \u00d7 tanh(0.5 \u00d7 a) + 0.003 \u00d7 sin(3.2 \u00d7 a) + 0.002 \u00d7 cos(2.5 \u00d7 a)] to capture even subtler interactions. These changes should help reduce BIC, improve parameter recovery, and boost accuracy. Please encourage exploring alternative functional forms like adding a small Gaussian radial basis term if desired.\n</think>\n\nNew Instructions for Run 155:\n\n1. Compute the core sum a as the sum of fixed components F1,\u2026,F11 plus a small constant \u03b4.\n2. Define a_mod = 1.08 \u00d7 a \u00d7 [1 + 0.012 \u00d7 sin(a + 0.045)].\n3. Sequentially multiply a_mod by:\n\u2003\u2003\u2022 [1 + 0.008 \u00d7 cos(a + 0.065)],\n\u2003\u2003\u2022 [1 + 0.005 \u00d7 sin(a + 0.115)],\n\u2003\u2003\u2022 [1 + 0.004 \u00d7 cos(a + 0.085)],\n\u2003\u2003\u2022 [1 + 0.006 \u00d7 (sin(a + 0.035) \u00d7 cos(a + 0.055))],\n\u2003\u2003\u2022 [1 + 0.003 \u00d7 (sin(a + 0.03) \u00d7 cos(a + 0.05))].\nLet z be the resulting product.\n4. Calculate w = (phi \u2212 0.5) / phi.\n\u2003\u2003\u2022 For z \u2265 0, define f_adapt(z) as the clipped value:  \n\u2003\u2003\u2003f_adapt(z) = clip[1.002 \u00d7 (z^w \u00d7 (ln(1+z))^(1\u2212w) \u00d7 softsign(z)), \u221230, 30], with softsign(x) = x/(1+|x|).\n\u2003\u2003\u2022 For z < 0, set f_adapt(z) = phi \u00d7 [softsign(z + \u0394_shift)]^(40), with \u0394_shift = 1\u00d710\u207b\u2076.\n5. Define the dynamic threshold T as the sum from k = 0 to 90 of (a^k \u00d7 (\u00bd)^k.\n6. Define the extra composite term extra as the product of:\n\u2003\u2003\u2022 exp(\u2013a/0.1),\n\u2003\u2003\u2022 [z/(1+|z|)],\n\u2003\u2003\u2022 [1 + 0.005 \u00d7 sin(1/(1+a))],\n\u2003\u2003\u2022 [1 + 0.002 \u00d7 cos(0.5\u00d7a)],\n\u2003\u2003\u2022 ([1 + 0.003 \u00d7 cos(0.3\u00d7a)]\u00b2),\n\u2003\u2003\u2022 ([1 + 0.004 \u00d7 cos(0.3\u00d7a)]\u00b2),\n\u2003\u2003\u2022 [1 + 0.0025 \u00d7 cos(0.7\u00d7a)],\n\u2003\u2003\u2022 [1 + tanh(0.05\u00d7a)],\n\u2003\u2003\u2022 [1 + sigmoid(0.01\u00d7a)],\n\u2003\u2003\u2022 [1 + 0.002 \u00d7 cos(3\u00d7a)],\n\u2003\u2003\u2022 [1 + 0.002 \u00d7 (sin(2.5\u00d7a) + 0.001\u00d7cos(3.5\u00d7a) + 0.0015\u00d7sin(3\u00d7a))],\n\u2003\u2003\u2022 [1 + sigmoid(0.03\u00d7a)],\n\u2003\u2003\u2022 [1 + tanh(0.07\u00d7a)],\n\u2003\u2003\u2022 [1 + cos(3.1\u00d7a)],\n\u2003\u2003\u2022 [1 + sigmoid(0.04\u00d7a)],\n\u2003\u2003\u2022 [1 + tanh(0.08\u00d7a)],\n\u2003\u2003\u2022 [1 + cos(3.2\u00d7a)],\n\u2003\u2003\u2022 [1 + sigmoid(0.05\u00d7a)],\n\u2003\u2003\u2022 [1 + tanh(0.1\u00d7a)],\n\u2003\u2003\u2022 [1 + cos(3.4\u00d7a)],\n\u2003\u2003\u2022 [1 + sigmoid(0.06\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new),\n\u2003\u2003\u2022 [1 + tanh(0.12\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new),\n\u2003\u2003\u2022 [1 + cos(3.6\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new),\n\u2003\u2003\u2022 [1 + sigmoid(0.08\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new),\n\u2003\u2003\u2022 [1 + tanh(0.2\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new),\n\u2003\u2003\u2022 [1 + cos(4.2\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new).\n\u2003\u2003\u2022 Nest an additional softplus layer so that softplus is applied five times in succession to 0.865/(1+a).\nThen, raise the product to the power [0.9478 + 0.00018\u00d7ln(1+a)].\n7. Define the final exponent modulation factor as:\n\u2003\u2003Exponent = [0.9478 + 0.00018\u00d7ln(1+a)] \u00d7 [1 + 0.0055\u00d7sin(2.9\u00d7a) + 0.0015\u00d7cos(3.9\u00d7a) + 0.0035\u00d7sin(3.5\u00d7a) + 0.0025\u00d7cos(4.5\u00d7a) + 0.0015\u00d7sin(3.0\u00d7a) + 0.0007\u00d7cos(4.2\u00d7a) + 0.0015\u00d7(sin(2.7\u00d7a)\u00d7cos(3.4\u00d7a)) + 0.0025\u00d7cos(3.8\u00d7a) + 0.0015\u00d7sin(2.8\u00d7a) + 0.005\u00d7tanh(0.5\u00d7a) + 0.002\u00d7sin(3\u00d7a)].\n8. Compute the final transformed signal f(x) = sign(z) \u00d7 { [ f_adapt(z) \u00d7 T \u00d7 extra ]^(Exponent) }.\n9. Compute latent utility U = beta + gamma \u00d7 f(x) and then let P(accept = 1) = 1/(1 + exp(\u2013U)).\n10. Exactly three learnable parameters are used with the following finite bounds: beta \u2208 [\u201310, 10], gamma \u2208 [0, 10], phi \u2208 [0.5, 1.5].\n\nThese instructions encourage further flexibility by steepening the penalty on negative signals (by raising the negative exponent from 38 to 40) and adding new multiplicative factors and layers in the extra composite term, extending the dynamic threshold to higher orders, and strengthening the final exponent modulation via additional oscillatory terms.\n</previous_instructions>\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<MODEL>\na = \u2211(i=1,11) F_i + \u03b4\na_mod = 1.08 * a * (1 + 0.012 * sin(a + 0.045))\nz = a_mod * (1 + 0.008 * cos(a + 0.065)) * (1 + 0.005 * sin(a + 0.115)) * (1 + 0.004 * cos(a + 0.085)) * (1 + 0.006 * (sin(a + 0.035) * cos(a + 0.055))) * (1 + 0.003 * (sin(a + 0.03) * cos(a + 0.05)))\nw = (phi - 0.5) / phi\nf_adapt(z) = { if z \u2265 0: clip[ 1.002 * (z^w * (ln(1+z))^(1-w) * (z/(1+|z|)) ) , -30, 30] ; if z < 0: phi * ( (z + 1e-6)/(1 + |z + 1e-6|) )^40 }\nT = \u2211(k=0,90) (a^k * (\u00bd)^k)\nnested_SP = softplus( softplus( softplus( softplus( softplus(0.865/(1+a)) ) ) ) )\nP_extra = exp(\u2013a/0.1) * (z/(1+|z|)) * (1 + 0.005 * sin(1/(1+a))) * (1 + 0.002 * cos(0.5*a)) * (1 + 0.003 * cos(0.3*a))^2 * (1 + 0.004 * cos(0.3*a))^2 * (1 + 0.0025 * cos(0.7*a)) * (1 + tanh(0.05*a)) * (1 + sigmoid(0.01*a)) * (1 + 0.002 * cos(3*a)) * (1 + 0.002*( sin(2.5*a) + 0.001*cos(3.5*a) + 0.0015*sin(3*a) )) * (1 + sigmoid(0.03*a)) * (1 + tanh(0.07*a)) * (1 + cos(3.1*a)) * (1 + sigmoid(0.04*a)) * (1 + tanh(0.08*a)) * (1 + cos(3.2*a)) * (1 + sigmoid(0.05*a)) * (1 + tanh(0.1*a)) * (1 + cos(3.4*a)) * (1 + sigmoid(0.06*a)) * (1 + tanh(0.12*a)) * (1 + cos(3.6*a)) * (1 + sigmoid(0.08*a)) * (1 + tanh(0.2*a)) * (1 + cos(4.2*a)) * nested_SP\nextra = (P_extra)^(0.9478 + 0.00018 * ln(1+a))\nExponent = (0.9478 + 0.00018 * ln(1+a)) * (1 + 0.0055*sin(2.9*a) + 0.0015*cos(3.9*a) + 0.0035*sin(3.5*a) + 0.0025*cos(4.5*a) + 0.0015*sin(3.0*a) + 0.0007*cos(4.2*a) + 0.0015*(sin(2.7*a)*cos(3.4*a)) + 0.0025*cos(3.8*a) + 0.0015*sin(2.8*a) + 0.005*tanh(0.5*a) + 0.002*sin(3*a))\nf(x) = sign(z) * ( (f_adapt(z) * T * extra)^(Exponent) )\nU = beta + gamma * f(x)\nP_accept = 1/(1 + exp(\u2013U))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"F_i\": {\n      \"description\": \"Fixed component i (for i=1,\u2026,11) derived from task stimuli and participant contributions\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"\u03b4\": {\n      \"description\": \"A small constant offset added to the sum of fixed components\",\n      \"range\": {\n        \"min\": -1e-3,\n        \"max\": 1e-3,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"constant\",\n        \"parameters\": {\"value\": 1e-6}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a\": {\n      \"description\": \"Core sum computed as the sum of the fixed components F1,\u2026,F11 plus \u03b4\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"calculated\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a_mod\": {\n      \"description\": \"Nonlinear modulation of a\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"calculated\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"z\": {\n      \"description\": \"Composite signal after sequential multiplicative nonlinear transformations\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"calculated\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"phi\": {\n      \"description\": \"Learnable parameter modulating the adaptive exponent and negative-branch penalty\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\"min\": 0.5, \"max\": 1.5}\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"w\": {\n      \"description\": \"Adaptive exponent weight computed from phi\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"calculated\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_adapt\": {\n      \"description\": \"Nonlinear, adapted transformation of z with a piecewise definition and steep penalty for extreme negatives\",\n      \"range\": {\n        \"min\": -30,\n        \"max\": 30,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"piecewise\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"T\": {\n      \"description\": \"Dynamic threshold computed as the sum over k=0 to 90 of (a^k * (1/2)^k)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"discrete summation\",\n        \"parameters\": {\"k_min\": 0, \"k_max\": 90}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"nested_SP\": {\n      \"description\": \"Additional nested softplus transform applied five times to 0.865/(1+a)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"transformation\",\n        \"parameters\": {\"function\": \"softplus\", \"nesting\": 5}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"P_extra\": {\n      \"description\": \"Product of extra composite multiplicative factors capturing oscillatory, exponential and sigmoidal modulations\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"product\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"extra\": {\n      \"description\": \"Extra composite term: P_extra raised to the power (0.9478 + 0.00018 * ln(1+a))\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"exponential power\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"Exponent\": {\n      \"description\": \"Final exponent modulation factor combining a baseline power of (0.9478 + 0.00018*ln(1+a)) with additional oscillatory adjustments\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"oscillatory modulation\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f(x)\": {\n      \"description\": \"Final transformed signal after applying sign(z) and raising the product (f_adapt(z) * T * extra) to the Exponent\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"nonlinear transformation\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Learnable base tendency parameter for latent utility\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\"min\": -10, \"max\": 10}\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Learnable scaling parameter modulating the impact of the transformed signal f(x) on utility\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\"min\": 0, \"max\": 10}\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed as a linear combination of beta and the scaled transformed signal f(x)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"linear\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"P_accept\": {\n      \"description\": \"Probability of accepting the proposal, computed via a logistic transformation of U\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"logistic\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA highly nonlinear utility model that aggregates 11 fixed task\u2010components with a constant offset and subjects the sum to multiple nested nonlinear transformations including sinusoidal, exponential, sigmoidal, and softplus layers. A piecewise adaptation function with a steep penalty for extreme negative signals is applied to a composite product, which is then modulated by an extended dynamic threshold and an extra composite term raised to an oscillatory exponent. The latent utility is computed via three learnable parameters (beta, gamma, phi) and transformed by a logistic function to predict responder accept/reject behavior.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['phi', 'beta', 'gamma']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                a = \u2211(i=1,11) F_i + \u03b4\na_mod = 1.08 * a * (1 + 0.012 * sin(a + 0.045))\nz = a_mod * (1 + 0.008 * cos(a + 0.065)) * (1 + 0.005 * sin(a + 0.115)) * (1 + 0.004 * cos(a + 0.085)) * (1 + 0.006 * (sin(a + 0.035) * cos(a + 0.055))) * (1 + 0.003 * (sin(a + 0.03) * cos(a + 0.05)))\nw = (phi - 0.5) / phi\nf_adapt(z) = { if z \u2265 0: clip[ 1.002 * (z^w * (ln(1+z))^(1-w) * (z/(1+|z|)) ) , -30, 30] ; if z < 0: phi * ( (z + 1e-6)/(1 + |z + 1e-6|) )^40 }\nT = \u2211(k=0,90) (a^k * (\u00bd)^k)\nnested_SP = softplus( softplus( softplus( softplus( softplus(0.865/(1+a)) ) ) ) )\nP_extra = exp(\u2013a/0.1) * (z/(1+|z|)) * (1 + 0.005 * sin(1/(1+a))) * (1 + 0.002 * cos(0.5*a)) * (1 + 0.003 * cos(0.3*a))^2 * (1 + 0.004 * cos(0.3*a))^2 * (1 + 0.0025 * cos(0.7*a)) * (1 + tanh(0.05*a)) * (1 + sigmoid(0.01*a)) * (1 + 0.002 * cos(3*a)) * (1 + 0.002*( sin(2.5*a) + 0.001*cos(3.5*a) + 0.0015*sin(3*a) )) * (1 + sigmoid(0.03*a)) * (1 + tanh(0.07*a)) * (1 + cos(3.1*a)) * (1 + sigmoid(0.04*a)) * (1 + tanh(0.08*a)) * (1 + cos(3.2*a)) * (1 + sigmoid(0.05*a)) * (1 + tanh(0.1*a)) * (1 + cos(3.4*a)) * (1 + sigmoid(0.06*a)) * (1 + tanh(0.12*a)) * (1 + cos(3.6*a)) * (1 + sigmoid(0.08*a)) * (1 + tanh(0.2*a)) * (1 + cos(4.2*a)) * nested_SP\nextra = (P_extra)^(0.9478 + 0.00018 * ln(1+a))\nExponent = (0.9478 + 0.00018 * ln(1+a)) * (1 + 0.0055*sin(2.9*a) + 0.0015*cos(3.9*a) + 0.0035*sin(3.5*a) + 0.0025*cos(4.5*a) + 0.0015*sin(3.0*a) + 0.0007*cos(4.2*a) + 0.0015*(sin(2.7*a)*cos(3.4*a)) + 0.0025*cos(3.8*a) + 0.0015*sin(2.8*a) + 0.005*tanh(0.5*a) + 0.002*sin(3*a))\nf(x) = sign(z) * ( (f_adapt(z) * T * extra)^(Exponent) )\nU = beta + gamma * f(x)\nP_accept = 1/(1 + exp(\u2013U))\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"F_i\": {\n      \"description\": \"Fixed component i (for i=1,\\u2026,11) derived from task stimuli and participant contributions\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"\\u03b4\": {\n      \"description\": \"A small constant offset added to the sum of fixed components\",\n      \"range\": {\n        \"min\": -0.001,\n        \"max\": 0.001,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"constant\",\n        \"parameters\": {\n          \"value\": 1e-06\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a\": {\n      \"description\": \"Core sum computed as the sum of the fixed components F1,\\u2026,F11 plus \\u03b4\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"calculated\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a_mod\": {\n      \"description\": \"Nonlinear modulation of a\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"calculated\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"z\": {\n      \"description\": \"Composite signal after sequential multiplicative nonlinear transformations\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"calculated\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"phi\": {\n      \"description\": \"Learnable parameter modulating the adaptive exponent and negative-branch penalty\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0.5,\n          \"max\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"w\": {\n      \"description\": \"Adaptive exponent weight computed from phi\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"calculated\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_adapt\": {\n      \"description\": \"Nonlinear, adapted transformation of z with a piecewise definition and steep penalty for extreme negatives\",\n      \"range\": {\n        \"min\": -30,\n        \"max\": 30,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"piecewise\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"T\": {\n      \"description\": \"Dynamic threshold computed as the sum over k=0 to 90 of (a^k * (1/2)^k)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"discrete summation\",\n        \"parameters\": {\n          \"k_min\": 0,\n          \"k_max\": 90\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"nested_SP\": {\n      \"description\": \"Additional nested softplus transform applied five times to 0.865/(1+a)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"transformation\",\n        \"parameters\": {\n          \"function\": \"softplus\",\n          \"nesting\": 5\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"P_extra\": {\n      \"description\": \"Product of extra composite multiplicative factors capturing oscillatory, exponential and sigmoidal modulations\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"product\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"extra\": {\n      \"description\": \"Extra composite term: P_extra raised to the power (0.9478 + 0.00018 * ln(1+a))\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"exponential power\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"Exponent\": {\n      \"description\": \"Final exponent modulation factor combining a baseline power of (0.9478 + 0.00018*ln(1+a)) with additional oscillatory adjustments\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"oscillatory modulation\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f(x)\": {\n      \"description\": \"Final transformed signal after applying sign(z) and raising the product (f_adapt(z) * T * extra) to the Exponent\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"nonlinear transformation\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Learnable base tendency parameter for latent utility\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": -10,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Learnable scaling parameter modulating the impact of the transformed signal f(x) on utility\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed as a linear combination of beta and the scaled transformed signal f(x)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"linear\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"P_accept\": {\n      \"description\": \"Probability of accepting the proposal, computed via a logistic transformation of U\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"logistic\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, phi=1, beta=0, gamma=1):\n    model_predictions = []\n    for trial in trial_data:\n        # Get F_i values from trial data (assuming F1 to F11 are present)\n        F_values = [trial.get(f\"F{i}\", 0) for i in range(1, 12)]\n        \n        #If 'F_values' does not exist in the trial dictionary or can't be derived, use trial.get(\"proposed_perc\", 0) as a default value\n        if len(F_values) == 0:\n            F_values = [trial.get(\"proposed_perc\", 0)] * 11\n        \n        # 1. a = \u2211(i=1,11) F_i + \u03b4\n        delta = 1e-06\n        a = sum(F_values) + delta\n\n        # 2. a_mod = 1.08 * a * (1 + 0.012 * sin(a + 0.045))\n        a_mod = 1.08 * a * (1 + 0.012 * math.sin(a + 0.045))\n\n        # 3. z = a_mod * (1 + 0.008 * cos(a + 0.065)) * (1 + 0.005 * sin(a + 0.115)) * (1 + 0.004 * cos(a + 0.085)) * (1 + 0.006 * (sin(a + 0.035) * cos(a + 0.055))) * (1 + 0.003 * (sin(a + 0.03) * cos(a + 0.05)))\n        z = a_mod * (1 + 0.008 * math.cos(a + 0.065)) * (1 + 0.005 * math.sin(a + 0.115)) * (1 + 0.004 * math.cos(a + 0.085)) * (1 + 0.006 * (math.sin(a + 0.035) * math.cos(a + 0.055))) * (1 + 0.003 * (math.sin(a + 0.03) * math.cos(a + 0.05)))\n\n        # 4. w = (phi - 0.5) / phi\n        w = (phi - 0.5) / phi\n\n        # 5. f_adapt(z)\n        def f_adapt(z):\n            if z >= 0:\n                val = 1.002 * (z**w * (math.log(1 + z) ** (1 - w)) * (z / (1 + abs(z))))\n                return max(-30, min(val, 30))  # clip[-30, 30]\n            else:\n                return phi * ((z + 1e-6) / (1 + abs(z + 1e-6)))**40\n\n        # 6. T = \u2211(k=0,90) (a^k * (\u00bd)^k)\n        T = sum(a**k * (0.5)**k for k in range(0, 91))\n\n        # 7. nested_SP = softplus( softplus( softplus( softplus( softplus(0.865/(1+a)) ) ) ) )\n        def softplus(x):\n            return math.log(1 + math.exp(x))\n\n        nested_SP = 0.865 / (1 + a)\n        for _ in range(5):\n            nested_SP = softplus(nested_SP)\n\n        # 8. P_extra = exp(\u2013a/0.1) * (z/(1+|z|)) * (1 + 0.005 * sin(1/(1+a))) * (1 + 0.002 * cos(0.5*a)) * (1 + 0.003 * cos(0.3*a))^2 * (1 + 0.004 * cos(0.3*a))^2 * (1 + 0.0025 * cos(0.7*a)) * (1 + tanh(0.05*a)) * (1 + sigmoid(0.01*a)) * (1 + 0.002 * cos(3*a)) * (1 + 0.002*( sin(2.5*a) + 0.001*cos(3.5*a) + 0.0015*sin(3*a) )) * (1 + sigmoid(0.03*a)) * (1 + tanh(0.07*a)) * (1 + cos(3.1*a)) * (1 + sigmoid(0.04*a)) * (1 + tanh(0.08*a)) * (1 + cos(3.2*a)) * (1 + sigmoid(0.05*a)) * (1 + tanh(0.1*a)) * (1 + cos(3.4*a)) * (1 + sigmoid(0.06*a)) * (1 + tanh(0.12*a)) * (1 + cos(3.6*a)) * (1 + sigmoid(0.08*a)) * (1 + tanh(0.2*a)) * (1 + cos(4.2*a)) * nested_SP\n        def sigmoid(x):\n            return 1 / (1 + math.exp(-x))\n\n        P_extra = math.exp(-a / 0.1) * (z / (1 + abs(z))) * (1 + 0.005 * math.sin(1 / (1 + a))) * (1 + 0.002 * math.cos(0.5 * a)) * (1 + 0.003 * math.cos(0.3 * a))**2 * (1 + 0.004 * math.cos(0.3 * a))**2 * (1 + 0.0025 * math.cos(0.7 * a)) * (1 + math.tanh(0.05 * a)) * (1 + sigmoid(0.01 * a)) * (1 + 0.002 * math.cos(3 * a)) * (1 + 0.002 * (math.sin(2.5 * a) + 0.001 * math.cos(3.5 * a) + 0.0015 * math.sin(3 * a))) * (1 + sigmoid(0.03 * a)) * (1 + math.tanh(0.07 * a)) * (1 + math.cos(3.1 * a)) * (1 + sigmoid(0.04 * a)) * (1 + math.tanh(0.08 * a)) * (1 + math.cos(3.2 * a)) * (1 + sigmoid(0.05 * a)) * (1 + math.tanh(0.1 * a)) * (1 + math.cos(3.4 * a)) * (1 + sigmoid(0.06 * a)) * (1 + math.tanh(0.12 * a)) * (1 + math.cos(3.6 * a)) * (1 + sigmoid(0.08 * a)) * (1 + math.tanh(0.2 * a)) * (1 + math.cos(4.2 * a)) * nested_SP\n\n        # 9. extra = (P_extra)^(0.9478 + 0.00018 * ln(1+a))\n        extra = P_extra**(0.9478 + 0.00018 * math.log(1 + a))\n\n        # 10. Exponent = (0.9478 + 0.00018 * ln(1+a)) * (1 + 0.0055*sin(2.9*a) + 0.0015*cos(3.9*a) + 0.0035*sin(3.5*a) + 0.0025*cos(4.5*a) + 0.0015*sin(3.0*a) + 0.0007*cos(4.2*a) + 0.0015*(sin(2.7*a)*cos(3.4*a)) + 0.0025*cos(3.8*a) + 0.0015*sin(2.8*a) + 0.005*tanh(0.5*a) + 0.002*sin(3*a))\n        Exponent = (0.9478 + 0.00018 * math.log(1 + a)) * (1 + 0.0055 * math.sin(2.9 * a) + 0.0015 * math.cos(3.9 * a) + 0.0035 * math.sin(3.5 * a) + 0.0025 * math.cos(4.5 * a) + 0.0015 * math.sin(3.0 * a) + 0.0007 * math.cos(4.2 * a) + 0.0015 * (math.sin(2.7 * a) * math.cos(3.4 * a)) + 0.0025 * math.cos(3.8 * a) + 0.0015 * math.sin(2.8 * a) + 0.005 * math.tanh(0.5 * a) + 0.002 * math.sin(3 * a))\n\n        # 11. f(x) = sign(z) * ( (f_adapt(z) * T * extra)^(Exponent) )\n        f_x = math.copysign(1, z) * ((f_adapt(z) * T * extra)**(Exponent))\n\n        # 12. U = beta + gamma * f(x)\n        U = beta + gamma * f_x\n\n        # 13. P_accept = 1/(1 + exp(\u2013U))\n        P_accept = 1 / (1 + math.exp(-U))\n\n        model_predictions.append(P_accept)\n\n    return model_predictions\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n```",
      "timestamp": 1743549191.78255
    }
  ],
  "learnable_parameters": {
    "phi": {
      "description": "Learnable parameter modulating the adaptive exponent and negative-branch penalty",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": 0.5,
          "max": 1.5
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "beta": {
      "description": "Learnable base tendency parameter for latent utility",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": -10,
          "max": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Learnable scaling parameter modulating the impact of the transformed signal f(x) on utility",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": 0,
          "max": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "a = \u2211(i=1,11) F_i + \u03b4\na_mod = 1.08 * a * (1 + 0.012 * sin(a + 0.045))\nz = a_mod * (1 + 0.008 * cos(a + 0.065)) * (1 + 0.005 * sin(a + 0.115)) * (1 + 0.004 * cos(a + 0.085)) * (1 + 0.006 * (sin(a + 0.035) * cos(a + 0.055))) * (1 + 0.003 * (sin(a + 0.03) * cos(a + 0.05)))\nw = (phi - 0.5) / phi\nf_adapt(z) = { if z \u2265 0: clip[ 1.002 * (z^w * (ln(1+z))^(1-w) * (z/(1+|z|)) ) , -30, 30] ; if z < 0: phi * ( (z + 1e-6)/(1 + |z + 1e-6|) )^40 }\nT = \u2211(k=0,90) (a^k * (\u00bd)^k)\nnested_SP = softplus( softplus( softplus( softplus( softplus(0.865/(1+a)) ) ) ) )\nP_extra = exp(\u2013a/0.1) * (z/(1+|z|)) * (1 + 0.005 * sin(1/(1+a))) * (1 + 0.002 * cos(0.5*a)) * (1 + 0.003 * cos(0.3*a))^2 * (1 + 0.004 * cos(0.3*a))^2 * (1 + 0.0025 * cos(0.7*a)) * (1 + tanh(0.05*a)) * (1 + sigmoid(0.01*a)) * (1 + 0.002 * cos(3*a)) * (1 + 0.002*( sin(2.5*a) + 0.001*cos(3.5*a) + 0.0015*sin(3*a) )) * (1 + sigmoid(0.03*a)) * (1 + tanh(0.07*a)) * (1 + cos(3.1*a)) * (1 + sigmoid(0.04*a)) * (1 + tanh(0.08*a)) * (1 + cos(3.2*a)) * (1 + sigmoid(0.05*a)) * (1 + tanh(0.1*a)) * (1 + cos(3.4*a)) * (1 + sigmoid(0.06*a)) * (1 + tanh(0.12*a)) * (1 + cos(3.6*a)) * (1 + sigmoid(0.08*a)) * (1 + tanh(0.2*a)) * (1 + cos(4.2*a)) * nested_SP\nextra = (P_extra)^(0.9478 + 0.00018 * ln(1+a))\nExponent = (0.9478 + 0.00018 * ln(1+a)) * (1 + 0.0055*sin(2.9*a) + 0.0015*cos(3.9*a) + 0.0035*sin(3.5*a) + 0.0025*cos(4.5*a) + 0.0015*sin(3.0*a) + 0.0007*cos(4.2*a) + 0.0015*(sin(2.7*a)*cos(3.4*a)) + 0.0025*cos(3.8*a) + 0.0015*sin(2.8*a) + 0.005*tanh(0.5*a) + 0.002*sin(3*a))\nf(x) = sign(z) * ( (f_adapt(z) * T * extra)^(Exponent) )\nU = beta + gamma * f(x)\nP_accept = 1/(1 + exp(\u2013U))",
  "variable_descriptions": {
    "F_i": {
      "description": "Fixed component i (for i=1,\u2026,11) derived from task stimuli and participant contributions",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "empirical",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "\u03b4": {
      "description": "A small constant offset added to the sum of fixed components",
      "range": {
        "min": -0.001,
        "max": 0.001,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "constant",
        "parameters": {
          "value": 1e-06
        }
      },
      "learnable": false,
      "source": "calculated"
    },
    "a": {
      "description": "Core sum computed as the sum of the fixed components F1,\u2026,F11 plus \u03b4",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "calculated",
        "parameters": {}
      },
      "learnable": false,
      "source": "calculated"
    },
    "a_mod": {
      "description": "Nonlinear modulation of a",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "calculated",
        "parameters": {}
      },
      "learnable": false,
      "source": "calculated"
    },
    "z": {
      "description": "Composite signal after sequential multiplicative nonlinear transformations",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "calculated",
        "parameters": {}
      },
      "learnable": false,
      "source": "calculated"
    },
    "phi": {
      "description": "Learnable parameter modulating the adaptive exponent and negative-branch penalty",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": 0.5,
          "max": 1.5
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "w": {
      "description": "Adaptive exponent weight computed from phi",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "calculated",
        "parameters": {}
      },
      "learnable": false,
      "source": "calculated"
    },
    "f_adapt": {
      "description": "Nonlinear, adapted transformation of z with a piecewise definition and steep penalty for extreme negatives",
      "range": {
        "min": -30,
        "max": 30,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "piecewise",
        "parameters": {}
      },
      "learnable": false,
      "source": "calculated"
    },
    "T": {
      "description": "Dynamic threshold computed as the sum over k=0 to 90 of (a^k * (1/2)^k)",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "discrete summation",
        "parameters": {
          "k_min": 0,
          "k_max": 90
        }
      },
      "learnable": false,
      "source": "calculated"
    },
    "nested_SP": {
      "description": "Additional nested softplus transform applied five times to 0.865/(1+a)",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": {
        "type": "transformation",
        "parameters": {
          "function": "softplus",
          "nesting": 5
        }
      },
      "learnable": false,
      "source": "calculated"
    },
    "P_extra": {
      "description": "Product of extra composite multiplicative factors capturing oscillatory, exponential and sigmoidal modulations",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "product",
        "parameters": {}
      },
      "learnable": false,
      "source": "calculated"
    },
    "extra": {
      "description": "Extra composite term: P_extra raised to the power (0.9478 + 0.00018 * ln(1+a))",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": {
        "type": "exponential power",
        "parameters": {}
      },
      "learnable": false,
      "source": "calculated"
    },
    "Exponent": {
      "description": "Final exponent modulation factor combining a baseline power of (0.9478 + 0.00018*ln(1+a)) with additional oscillatory adjustments",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "oscillatory modulation",
        "parameters": {}
      },
      "learnable": false,
      "source": "calculated"
    },
    "f(x)": {
      "description": "Final transformed signal after applying sign(z) and raising the product (f_adapt(z) * T * extra) to the Exponent",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "nonlinear transformation",
        "parameters": {}
      },
      "learnable": false,
      "source": "calculated"
    },
    "beta": {
      "description": "Learnable base tendency parameter for latent utility",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": -10,
          "max": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Learnable scaling parameter modulating the impact of the transformed signal f(x) on utility",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": 0,
          "max": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "U": {
      "description": "Latent utility computed as a linear combination of beta and the scaled transformed signal f(x)",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "linear",
        "parameters": {}
      },
      "learnable": false,
      "source": "calculated"
    },
    "P_accept": {
      "description": "Probability of accepting the proposal, computed via a logistic transformation of U",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "logistic",
        "parameters": {}
      },
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "A highly nonlinear utility model that aggregates 11 fixed task\u2010components with a constant offset and subjects the sum to multiple nested nonlinear transformations including sinusoidal, exponential, sigmoidal, and softplus layers. A piecewise adaptation function with a steep penalty for extreme negative signals is applied to a composite product, which is then modulated by an extended dynamic threshold and an extra composite term raised to an oscillatory exponent. The latent utility is computed via three learnable parameters (beta, gamma, phi) and transformed by a logistic function to predict responder accept/reject behavior.",
  "target_variable": "accept",
  "full_reasoning": "<MODEL>\na = \u2211(i=1,11) F_i + \u03b4\na_mod = 1.08 * a * (1 + 0.012 * sin(a + 0.045))\nz = a_mod * (1 + 0.008 * cos(a + 0.065)) * (1 + 0.005 * sin(a + 0.115)) * (1 + 0.004 * cos(a + 0.085)) * (1 + 0.006 * (sin(a + 0.035) * cos(a + 0.055))) * (1 + 0.003 * (sin(a + 0.03) * cos(a + 0.05)))\nw = (phi - 0.5) / phi\nf_adapt(z) = { if z \u2265 0: clip[ 1.002 * (z^w * (ln(1+z))^(1-w) * (z/(1+|z|)) ) , -30, 30] ; if z < 0: phi * ( (z + 1e-6)/(1 + |z + 1e-6|) )^40 }\nT = \u2211(k=0,90) (a^k * (\u00bd)^k)\nnested_SP = softplus( softplus( softplus( softplus( softplus(0.865/(1+a)) ) ) ) )\nP_extra = exp(\u2013a/0.1) * (z/(1+|z|)) * (1 + 0.005 * sin(1/(1+a))) * (1 + 0.002 * cos(0.5*a)) * (1 + 0.003 * cos(0.3*a))^2 * (1 + 0.004 * cos(0.3*a))^2 * (1 + 0.0025 * cos(0.7*a)) * (1 + tanh(0.05*a)) * (1 + sigmoid(0.01*a)) * (1 + 0.002 * cos(3*a)) * (1 + 0.002*( sin(2.5*a) + 0.001*cos(3.5*a) + 0.0015*sin(3*a) )) * (1 + sigmoid(0.03*a)) * (1 + tanh(0.07*a)) * (1 + cos(3.1*a)) * (1 + sigmoid(0.04*a)) * (1 + tanh(0.08*a)) * (1 + cos(3.2*a)) * (1 + sigmoid(0.05*a)) * (1 + tanh(0.1*a)) * (1 + cos(3.4*a)) * (1 + sigmoid(0.06*a)) * (1 + tanh(0.12*a)) * (1 + cos(3.6*a)) * (1 + sigmoid(0.08*a)) * (1 + tanh(0.2*a)) * (1 + cos(4.2*a)) * nested_SP\nextra = (P_extra)^(0.9478 + 0.00018 * ln(1+a))\nExponent = (0.9478 + 0.00018 * ln(1+a)) * (1 + 0.0055*sin(2.9*a) + 0.0015*cos(3.9*a) + 0.0035*sin(3.5*a) + 0.0025*cos(4.5*a) + 0.0015*sin(3.0*a) + 0.0007*cos(4.2*a) + 0.0015*(sin(2.7*a)*cos(3.4*a)) + 0.0025*cos(3.8*a) + 0.0015*sin(2.8*a) + 0.005*tanh(0.5*a) + 0.002*sin(3*a))\nf(x) = sign(z) * ( (f_adapt(z) * T * extra)^(Exponent) )\nU = beta + gamma * f(x)\nP_accept = 1/(1 + exp(\u2013U))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"F_i\": {\n      \"description\": \"Fixed component i (for i=1,\u2026,11) derived from task stimuli and participant contributions\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"\u03b4\": {\n      \"description\": \"A small constant offset added to the sum of fixed components\",\n      \"range\": {\n        \"min\": -1e-3,\n        \"max\": 1e-3,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"constant\",\n        \"parameters\": {\"value\": 1e-6}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a\": {\n      \"description\": \"Core sum computed as the sum of the fixed components F1,\u2026,F11 plus \u03b4\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"calculated\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a_mod\": {\n      \"description\": \"Nonlinear modulation of a\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"calculated\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"z\": {\n      \"description\": \"Composite signal after sequential multiplicative nonlinear transformations\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"calculated\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"phi\": {\n      \"description\": \"Learnable parameter modulating the adaptive exponent and negative-branch penalty\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\"min\": 0.5, \"max\": 1.5}\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"w\": {\n      \"description\": \"Adaptive exponent weight computed from phi\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"calculated\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_adapt\": {\n      \"description\": \"Nonlinear, adapted transformation of z with a piecewise definition and steep penalty for extreme negatives\",\n      \"range\": {\n        \"min\": -30,\n        \"max\": 30,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"piecewise\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"T\": {\n      \"description\": \"Dynamic threshold computed as the sum over k=0 to 90 of (a^k * (1/2)^k)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"discrete summation\",\n        \"parameters\": {\"k_min\": 0, \"k_max\": 90}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"nested_SP\": {\n      \"description\": \"Additional nested softplus transform applied five times to 0.865/(1+a)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"transformation\",\n        \"parameters\": {\"function\": \"softplus\", \"nesting\": 5}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"P_extra\": {\n      \"description\": \"Product of extra composite multiplicative factors capturing oscillatory, exponential and sigmoidal modulations\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"product\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"extra\": {\n      \"description\": \"Extra composite term: P_extra raised to the power (0.9478 + 0.00018 * ln(1+a))\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"exponential power\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"Exponent\": {\n      \"description\": \"Final exponent modulation factor combining a baseline power of (0.9478 + 0.00018*ln(1+a)) with additional oscillatory adjustments\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"oscillatory modulation\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f(x)\": {\n      \"description\": \"Final transformed signal after applying sign(z) and raising the product (f_adapt(z) * T * extra) to the Exponent\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"nonlinear transformation\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Learnable base tendency parameter for latent utility\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\"min\": -10, \"max\": 10}\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Learnable scaling parameter modulating the impact of the transformed signal f(x) on utility\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\"min\": 0, \"max\": 10}\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed as a linear combination of beta and the scaled transformed signal f(x)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"linear\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"P_accept\": {\n      \"description\": \"Probability of accepting the proposal, computed via a logistic transformation of U\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"logistic\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA highly nonlinear utility model that aggregates 11 fixed task\u2010components with a constant offset and subjects the sum to multiple nested nonlinear transformations including sinusoidal, exponential, sigmoidal, and softplus layers. A piecewise adaptation function with a steep penalty for extreme negative signals is applied to a composite product, which is then modulated by an extended dynamic threshold and an extra composite term raised to an oscillatory exponent. The latent utility is computed via three learnable parameters (beta, gamma, phi) and transformed by a logistic function to predict responder accept/reject behavior.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: a = \u2211(i=1,11) F_i + \u03b4\na_mod = 1.08 * a * (1 + 0.012 * sin(a + 0.045))\nz = a_mod * (1 + 0.008 * cos(a + 0.065)) * (1 + 0.005 * sin(a + 0.115)) * (1 + 0.004 * cos(a + 0.085)) * (1 + 0.006 * (sin(a + 0.035) * cos(a + 0.055))) * (1 + 0.003 * (sin(a + 0.03) * cos(a + 0.05)))\nw = (phi - 0.5) / phi\nf_adapt(z) = { if z \u2265 0: clip[ 1.002 * (z^w * (ln(1+z))^(1-w) * (z/(1+|z|)) ) , -30, 30] ; if z < 0: phi * ( (z + 1e-6)/(1 + |z + 1e-6|) )^40 }\nT = \u2211(k=0,90) (a^k * (\u00bd)^k)\nnested_SP = softplus( softplus( softplus( softplus( softplus(0.865/(1+a)) ) ) ) )\nP_extra = exp(\u2013a/0.1) * (z/(1+|z|)) * (1 + 0.005 * sin(1/(1+a))) * (1 + 0.002 * cos(0.5*a)) * (1 + 0.003 * cos(0.3*a))^2 * (1 + 0.004 * cos(0.3*a))^2 * (1 + 0.0025 * cos(0.7*a)) * (1 + tanh(0.05*a)) * (1 + sigmoid(0.01*a)) * (1 + 0.002 * cos(3*a)) * (1 + 0.002*( sin(2.5*a) + 0.001*cos(3.5*a) + 0.0015*sin(3*a) )) * (1 + sigmoid(0.03*a)) * (1 + tanh(0.07*a)) * (1 + cos(3.1*a)) * (1 + sigmoid(0.04*a)) * (1 + tanh(0.08*a)) * (1 + cos(3.2*a)) * (1 + sigmoid(0.05*a)) * (1 + tanh(0.1*a)) * (1 + cos(3.4*a)) * (1 + sigmoid(0.06*a)) * (1 + tanh(0.12*a)) * (1 + cos(3.6*a)) * (1 + sigmoid(0.08*a)) * (1 + tanh(0.2*a)) * (1 + cos(4.2*a)) * nested_SP\nextra = (P_extra)^(0.9478 + 0.00018 * ln(1+a))\nExponent = (0.9478 + 0.00018 * ln(1+a)) * (1 + 0.0055*sin(2.9*a) + 0.0015*cos(3.9*a) + 0.0035*sin(3.5*a) + 0.0025*cos(4.5*a) + 0.0015*sin(3.0*a) + 0.0007*cos(4.2*a) + 0.0015*(sin(2.7*a)*cos(3.4*a)) + 0.0025*cos(3.8*a) + 0.0015*sin(2.8*a) + 0.005*tanh(0.5*a) + 0.002*sin(3*a))\nf(x) = sign(z) * ( (f_adapt(z) * T * extra)^(Exponent) )\nU = beta + gamma * f(x)\nP_accept = 1/(1 + exp(\u2013U))\nSummary: A highly nonlinear utility model that aggregates 11 fixed task\u2010components with a constant offset and subjects the sum to multiple nested nonlinear transformations including sinusoidal, exponential, sigmoidal, and softplus layers. A piecewise adaptation function with a steep penalty for extreme negative signals is applied to a composite product, which is then modulated by an extended dynamic threshold and an extra composite term raised to an oscillatory exponent. The latent utility is computed via three learnable parameters (beta, gamma, phi) and transformed by a logistic function to predict responder accept/reject behavior.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, phi=1, beta=0, gamma=1):\n    model_predictions = []\n    for trial in trial_data:\n        # Get F_i values from trial data (assuming F1 to F11 are present)\n        F_values = [trial.get(f\"F{i}\", 0) for i in range(1, 12)]\n        \n        #If 'F_values' does not exist in the trial dictionary or can't be derived, use trial.get(\"proposed_perc\", 0) as a default value\n        if len(F_values) == 0:\n            F_values = [trial.get(\"proposed_perc\", 0)] * 11\n        \n        # 1. a = \u2211(i=1,11) F_i + \u03b4\n        delta = 1e-06\n        a = sum(F_values) + delta\n\n        # 2. a_mod = 1.08 * a * (1 + 0.012 * sin(a + 0.045))\n        a_mod = 1.08 * a * (1 + 0.012 * math.sin(a + 0.045))\n\n        # 3. z = a_mod * (1 + 0.008 * cos(a + 0.065)) * (1 + 0.005 * sin(a + 0.115)) * (1 + 0.004 * cos(a + 0.085)) * (1 + 0.006 * (sin(a + 0.035) * cos(a + 0.055))) * (1 + 0.003 * (sin(a + 0.03) * cos(a + 0.05)))\n        z = a_mod * (1 + 0.008 * math.cos(a + 0.065)) * (1 + 0.005 * math.sin(a + 0.115)) * (1 + 0.004 * math.cos(a + 0.085)) * (1 + 0.006 * (math.sin(a + 0.035) * math.cos(a + 0.055))) * (1 + 0.003 * (math.sin(a + 0.03) * math.cos(a + 0.05)))\n\n        # 4. w = (phi - 0.5) / phi\n        w = (phi - 0.5) / phi\n\n        # 5. f_adapt(z)\n        def f_adapt(z):\n            if z >= 0:\n                val = 1.002 * (z**w * (math.log(1 + z) ** (1 - w)) * (z / (1 + abs(z))))\n                return max(-30, min(val, 30))  # clip[-30, 30]\n            else:\n                return phi * ((z + 1e-6) / (1 + abs(z + 1e-6)))**40\n\n        # 6. T = \u2211(k=0,90) (a^k * (\u00bd)^k)\n        T = sum(a**k * (0.5)**k for k in range(0, 91))\n\n        # 7. nested_SP = softplus( softplus( softplus( softplus( softplus(0.865/(1+a)) ) ) ) )\n        def softplus(x):\n            return math.log(1 + math.exp(x))\n\n        nested_SP = 0.865 / (1 + a)\n        for _ in range(5):\n            nested_SP = softplus(nested_SP)\n\n        # 8. P_extra = exp(\u2013a/0.1) * (z/(1+|z|)) * (1 + 0.005 * sin(1/(1+a))) * (1 + 0.002 * cos(0.5*a)) * (1 + 0.003 * cos(0.3*a))^2 * (1 + 0.004 * cos(0.3*a))^2 * (1 + 0.0025 * cos(0.7*a)) * (1 + tanh(0.05*a)) * (1 + sigmoid(0.01*a)) * (1 + 0.002 * cos(3*a)) * (1 + 0.002*( sin(2.5*a) + 0.001*cos(3.5*a) + 0.0015*sin(3*a) )) * (1 + sigmoid(0.03*a)) * (1 + tanh(0.07*a)) * (1 + cos(3.1*a)) * (1 + sigmoid(0.04*a)) * (1 + tanh(0.08*a)) * (1 + cos(3.2*a)) * (1 + sigmoid(0.05*a)) * (1 + tanh(0.1*a)) * (1 + cos(3.4*a)) * (1 + sigmoid(0.06*a)) * (1 + tanh(0.12*a)) * (1 + cos(3.6*a)) * (1 + sigmoid(0.08*a)) * (1 + tanh(0.2*a)) * (1 + cos(4.2*a)) * nested_SP\n        def sigmoid(x):\n            return 1 / (1 + math.exp(-x))\n\n        P_extra = math.exp(-a / 0.1) * (z / (1 + abs(z))) * (1 + 0.005 * math.sin(1 / (1 + a))) * (1 + 0.002 * math.cos(0.5 * a)) * (1 + 0.003 * math.cos(0.3 * a))**2 * (1 + 0.004 * math.cos(0.3 * a))**2 * (1 + 0.0025 * math.cos(0.7 * a)) * (1 + math.tanh(0.05 * a)) * (1 + sigmoid(0.01 * a)) * (1 + 0.002 * math.cos(3 * a)) * (1 + 0.002 * (math.sin(2.5 * a) + 0.001 * math.cos(3.5 * a) + 0.0015 * math.sin(3 * a))) * (1 + sigmoid(0.03 * a)) * (1 + math.tanh(0.07 * a)) * (1 + math.cos(3.1 * a)) * (1 + sigmoid(0.04 * a)) * (1 + math.tanh(0.08 * a)) * (1 + math.cos(3.2 * a)) * (1 + sigmoid(0.05 * a)) * (1 + math.tanh(0.1 * a)) * (1 + math.cos(3.4 * a)) * (1 + sigmoid(0.06 * a)) * (1 + math.tanh(0.12 * a)) * (1 + math.cos(3.6 * a)) * (1 + sigmoid(0.08 * a)) * (1 + math.tanh(0.2 * a)) * (1 + math.cos(4.2 * a)) * nested_SP\n\n        # 9. extra = (P_extra)^(0.9478 + 0.00018 * ln(1+a))\n        extra = P_extra**(0.9478 + 0.00018 * math.log(1 + a))\n\n        # 10. Exponent = (0.9478 + 0.00018 * ln(1+a)) * (1 + 0.0055*sin(2.9*a) + 0.0015*cos(3.9*a) + 0.0035*sin(3.5*a) + 0.0025*cos(4.5*a) + 0.0015*sin(3.0*a) + 0.0007*cos(4.2*a) + 0.0015*(sin(2.7*a)*cos(3.4*a)) + 0.0025*cos(3.8*a) + 0.0015*sin(2.8*a) + 0.005*tanh(0.5*a) + 0.002*sin(3*a))\n        Exponent = (0.9478 + 0.00018 * math.log(1 + a)) * (1 + 0.0055 * math.sin(2.9 * a) + 0.0015 * math.cos(3.9 * a) + 0.0035 * math.sin(3.5 * a) + 0.0025 * math.cos(4.5 * a) + 0.0015 * math.sin(3.0 * a) + 0.0007 * math.cos(4.2 * a) + 0.0015 * (math.sin(2.7 * a) * math.cos(3.4 * a)) + 0.0025 * math.cos(3.8 * a) + 0.0015 * math.sin(2.8 * a) + 0.005 * math.tanh(0.5 * a) + 0.002 * math.sin(3 * a))\n\n        # 11. f(x) = sign(z) * ( (f_adapt(z) * T * extra)^(Exponent) )\n        f_x = math.copysign(1, z) * ((f_adapt(z) * T * extra)**(Exponent))\n\n        # 12. U = beta + gamma * f(x)\n        U = beta + gamma * f_x\n\n        # 13. P_accept = 1/(1 + exp(\u2013U))\n        P_accept = 1 / (1 + math.exp(-U))\n\n        model_predictions.append(P_accept)\n\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.5613553113553114,
  "fitting_results": [
    {
      "phi": 0.677451806305732,
      "beta": -10.0,
      "gamma": 4.877392915119176,
      "success": true,
      "log_likelihood": -24.953979470262787,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3333333333333333,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.015298538417913,
      "beta": -10.0,
      "gamma": 5.431117328129968,
      "success": true,
      "log_likelihood": -24.953298502232386,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.749135045422209,
      "beta": -2.0785811853956346,
      "gamma": 3.906968019811469,
      "success": true,
      "log_likelihood": -24.897714328011816,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.8133877928910873,
      "beta": -10.0,
      "gamma": 2.3327615603187226,
      "success": true,
      "log_likelihood": -24.953434695838467,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.4664901841460918,
      "beta": -10.0,
      "gamma": 9.205671965561706,
      "success": true,
      "log_likelihood": -24.953389297969775,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.7806516435804357,
      "beta": 0.284073547909351,
      "gamma": 9.797357438996832,
      "success": true,
      "log_likelihood": -23.54597316384975,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.8435037038224669,
      "beta": 10.0,
      "gamma": 7.246731702480417,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.7614130274055717,
      "beta": 0.8148707553865565,
      "gamma": 4.532977394485782,
      "success": true,
      "log_likelihood": -22.914510051415345,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.365655861091534,
      "beta": 10.0,
      "gamma": 7.821768038006796,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.9407865319215696,
      "beta": -10.0,
      "gamma": 1.5396560268330484,
      "success": true,
      "log_likelihood": -24.95348009370716,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5563511275961751,
      "beta": -10.0,
      "gamma": 6.357253580729482,
      "success": true,
      "log_likelihood": -24.95338929796977,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.492885251395857,
      "beta": -10.0,
      "gamma": 4.03671244184042,
      "success": true,
      "log_likelihood": -24.953934072394095,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.9858280968249253,
      "beta": -10.0,
      "gamma": 8.89839495479894,
      "success": true,
      "log_likelihood": -24.953434695838467,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.4648543334020259,
      "beta": 10.0,
      "gamma": 7.040753443889532,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.9990682561711941,
      "beta": 9.999999999999998,
      "gamma": 9.163058524144175,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.3784755741392982,
      "beta": 10.0,
      "gamma": 3.085451508443464,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.3114087360789568,
      "beta": 10.0,
      "gamma": 7.847555900262742,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.4953115552873042,
      "beta": 10.0,
      "gamma": 7.742485348087028,
      "success": true,
      "log_likelihood": -16.27763329973089,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.6189710041050067,
      "beta": 10.0,
      "gamma": 2.673992452397189,
      "success": true,
      "log_likelihood": -15.27767869783462,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.414907469002103,
      "beta": 10.0,
      "gamma": 6.11518374133194,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.7499393056319777,
      "beta": -1.247454269749695,
      "gamma": 1.3414069790698946,
      "success": true,
      "log_likelihood": -24.730616750329727,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.6735760879665477,
      "beta": 10.0,
      "gamma": 6.77413076481673,
      "success": true,
      "log_likelihood": -16.27763329973089,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.4178030395108157,
      "beta": -10.0,
      "gamma": 5.111905816797449,
      "success": true,
      "log_likelihood": -24.95352549157585,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.8595966861998179,
      "beta": -2.078366214650761,
      "gamma": 0.29865801309603257,
      "success": true,
      "log_likelihood": -24.897714324409073,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.780153085891259,
      "beta": -9.728428275621152,
      "gamma": 1.5028449157248946,
      "success": true,
      "log_likelihood": -24.95329850892253,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.8021392665410879,
      "beta": -0.6790594751300918,
      "gamma": 1.6883406504512855,
      "success": true,
      "log_likelihood": -24.450957568499184,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.307275982101992,
      "beta": -1.2474404934344359,
      "gamma": 6.264812379278593,
      "success": true,
      "log_likelihood": -24.730616750303632,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.7704805751760699,
      "beta": -10.0,
      "gamma": 0.3356420117342729,
      "success": true,
      "log_likelihood": -24.953661685181935,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.9990624923693833,
      "beta": 10.0,
      "gamma": 9.61784080093984,
      "success": true,
      "log_likelihood": -15.27767869783462,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5635403476608951,
      "beta": 10.0,
      "gamma": 2.6775075637751087,
      "success": true,
      "log_likelihood": -19.2774971054197,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.4556001122015725,
      "beta": 10.0,
      "gamma": 2.256061719091822,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.9119095102531508,
      "beta": -10.0,
      "gamma": 2.6019263487490885,
      "success": true,
      "log_likelihood": -24.953979470262787,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.843956962326807,
      "beta": -10.0,
      "gamma": 0.7900960085836572,
      "success": true,
      "log_likelihood": -24.953434695838464,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.8643995935772636,
      "beta": -10.0,
      "gamma": 6.8816308699820725,
      "success": true,
      "log_likelihood": -24.953480093707164,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5849353442708606,
      "beta": 10.0,
      "gamma": 4.720676971050427,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5896630452883631,
      "beta": 0.28409831809867175,
      "gamma": 6.739209907191855,
      "success": true,
      "log_likelihood": -23.545973163990944,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.8345788848748933,
      "beta": 1.5232564597429845,
      "gamma": 6.644832570642562,
      "success": true,
      "log_likelihood": -22.157938159949822,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.2788805059864112,
      "beta": -7.894879666198467,
      "gamma": 1.0272935008277428,
      "success": true,
      "log_likelihood": -24.953299117387715,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.4315206845939272,
      "beta": 0.8150343113211722,
      "gamma": 3.4562526466384536,
      "success": true,
      "log_likelihood": -22.914510056055228,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.382866066593473,
      "beta": 10.0,
      "gamma": 0.7681668292801913,
      "success": true,
      "log_likelihood": -14.277724095938346,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.4398673387853256,
      "beta": -8.935245094145698,
      "gamma": 7.560336748967295,
      "success": true,
      "log_likelihood": -24.95277197783625,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.7291127801698182,
      "beta": -10.0,
      "gamma": 7.310049786658351,
      "success": true,
      "log_likelihood": -24.95375248091932,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.0120231332533571,
      "beta": 10.0,
      "gamma": 9.22208405137367,
      "success": true,
      "log_likelihood": -12.277814892145805,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.8377151528174173,
      "beta": -1.2474119408793782,
      "gamma": 9.01319091552631,
      "success": true,
      "log_likelihood": -24.73061675041097,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.0018188717472465,
      "beta": -0.19265291244879704,
      "gamma": 1.192474069324585,
      "success": true,
      "log_likelihood": -24.05694518872342,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.4934541729729247,
      "beta": 3.0677905315418474,
      "gamma": 9.185144515541188,
      "success": true,
      "log_likelihood": -21.270320862645082,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5055937079953806,
      "beta": -2.0783848768024247,
      "gamma": 5.64705399124869,
      "success": true,
      "log_likelihood": -24.897714324561296,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.1341585010558504,
      "beta": -10.0,
      "gamma": 2.128943610095102,
      "success": true,
      "log_likelihood": -24.95348009370716,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.7691274727174322,
      "beta": -10.0,
      "gamma": 8.709758159009132,
      "success": true,
      "log_likelihood": -24.953434695838464,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.9947032665120398,
      "beta": -2.077779983889141,
      "gamma": 1.9998185577464178,
      "success": true,
      "log_likelihood": -24.897714335176996,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.8686584428563969,
      "beta": 1.5230409335197164,
      "gamma": 7.740172412967629,
      "success": true,
      "log_likelihood": -22.15793815483954,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.9996602774571244,
      "beta": -10.0,
      "gamma": 5.413425255433612,
      "success": true,
      "log_likelihood": -24.9538886745254,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.7571714993888191,
      "beta": -2.078279505084137,
      "gamma": 2.874526114745646,
      "success": true,
      "log_likelihood": -24.897714324102317,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.7021843595681432,
      "beta": -0.6790581608490616,
      "gamma": 0.6079797990978919,
      "success": true,
      "log_likelihood": -24.450957568497007,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.4458397827915226,
      "beta": -10.0,
      "gamma": 6.043127026048994,
      "success": true,
      "log_likelihood": -24.95348009370716,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.8587992833670922,
      "beta": -10.0,
      "gamma": 5.644660205076932,
      "success": true,
      "log_likelihood": -24.953570889444546,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.8460674987288735,
      "beta": -10.0,
      "gamma": 5.6031594210667715,
      "success": true,
      "log_likelihood": -24.953661685181938,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.6877726274329279,
      "beta": 10.0,
      "gamma": 5.294494009456906,
      "success": true,
      "log_likelihood": -15.27767869783462,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.9663321321765456,
      "beta": -10.0,
      "gamma": 3.5080840797268897,
      "success": true,
      "log_likelihood": -24.953934072394095,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.337184099524716,
      "beta": 10.0,
      "gamma": 3.340024160715428,
      "success": true,
      "log_likelihood": -18.27754250352343,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.0050841920838858,
      "beta": -0.1926852976609323,
      "gamma": 3.978246843420694,
      "success": true,
      "log_likelihood": -24.056945188994362,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.6135586594005038,
      "beta": -10.0,
      "gamma": 5.287057455486014,
      "success": true,
      "log_likelihood": -24.953298502232386,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.6165172204493652,
      "beta": -10.0,
      "gamma": 6.29440494051357,
      "success": true,
      "log_likelihood": -24.953979470262787,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.485412047399504,
      "beta": -10.0,
      "gamma": 5.7466914596234595,
      "success": true,
      "log_likelihood": -24.95338929796977,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.4326408210746648,
      "beta": -10.0,
      "gamma": 7.263094176640968,
      "success": true,
      "log_likelihood": -24.95375248091932,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.6333492553734813,
      "beta": -1.247396532392544,
      "gamma": 0.16233682497970192,
      "success": true,
      "log_likelihood": -24.730616750559385,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.4000023585045975,
      "beta": 10.0,
      "gamma": 9.931863551409506,
      "success": true,
      "log_likelihood": -14.277724095938348,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.8912128946178824,
      "beta": 10.0,
      "gamma": 7.8832689694811,
      "success": true,
      "log_likelihood": -16.277633299730887,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.1257858446099713,
      "beta": -1.2474709474442565,
      "gamma": 6.979018472950242,
      "success": true,
      "log_likelihood": -24.730616750429164,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.6152943430743982,
      "beta": 10.0,
      "gamma": 9.98003197366999,
      "success": true,
      "log_likelihood": -14.27772409593835,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.2327254162421855,
      "beta": -10.0,
      "gamma": 3.0208857823454194,
      "success": true,
      "log_likelihood": -24.953934072394095,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.8934570968796629,
      "beta": -10.0,
      "gamma": 9.505126353553186,
      "success": true,
      "log_likelihood": -24.9538886745254,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.0605842237495904,
      "beta": -2.078407123828069,
      "gamma": 5.603764685132143,
      "success": true,
      "log_likelihood": -24.897714324782633,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.9028324855290945,
      "beta": 9.246439389823585,
      "gamma": 6.756858257922619,
      "success": true,
      "log_likelihood": -19.27758298705984,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.6005236436763519,
      "beta": -6.401803794009544,
      "gamma": 3.926495018192705,
      "success": true,
      "log_likelihood": -24.953310830735248,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5506816056166317,
      "beta": 1.5230641648940415,
      "gamma": 4.639324927104921,
      "success": true,
      "log_likelihood": -22.157938155021906,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.7361526850914603,
      "beta": 10.0,
      "gamma": 2.883963010059701,
      "success": true,
      "log_likelihood": -13.277769494042078,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.4739448449873878,
      "beta": -10.0,
      "gamma": 9.941950620525557,
      "success": true,
      "log_likelihood": -24.95402486813148,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.7132466640725721,
      "beta": -0.19264443044049104,
      "gamma": 7.585966983046335,
      "success": true,
      "log_likelihood": -24.056945188743423,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.1933109254422356,
      "beta": -10.0,
      "gamma": 0.7231687257711417,
      "success": true,
      "log_likelihood": -24.953979470262784,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.7016032582684101,
      "beta": -2.078336821687694,
      "gamma": 4.952665020848582,
      "success": true,
      "log_likelihood": -24.897714324231238,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.8315427190905201,
      "beta": 10.0,
      "gamma": 6.081383635993729,
      "success": true,
      "log_likelihood": -14.277724095938348,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.8640409633242668,
      "beta": -10.0,
      "gamma": 5.0583239676698035,
      "success": true,
      "log_likelihood": -24.953934072394095,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.4439582403260443,
      "beta": -6.7884050161207385,
      "gamma": 6.084988070050427,
      "success": true,
      "log_likelihood": -24.953304193296834,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.7145135164640724,
      "beta": -0.19265171288791805,
      "gamma": 0.30358054117957667,
      "success": true,
      "log_likelihood": -24.056945188723954,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.8473735330532893,
      "beta": -10.0,
      "gamma": 4.0275526945599704,
      "success": true,
      "log_likelihood": -24.95393407239409,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.6581556069531066,
      "beta": 6.851467584131249,
      "gamma": 5.550331339917424,
      "success": true,
      "log_likelihood": -22.276031739789214,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.7273155952726845,
      "beta": -10.0,
      "gamma": 4.517113885218107,
      "success": true,
      "log_likelihood": -24.95375248091932,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.0454819113213785,
      "beta": 9.999999999999998,
      "gamma": 0.27609063418819524,
      "success": true,
      "log_likelihood": -13.277769494042078,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.375449837069773,
      "beta": -10.0,
      "gamma": 1.4597507824253753,
      "success": true,
      "log_likelihood": -24.953343900101082,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.7949517895827677,
      "beta": 1.5230486638391791,
      "gamma": 0.2011482937280118,
      "success": true,
      "log_likelihood": -22.157938154890324,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "phi": {
        "r": -0.013789806446272744,
        "p": 0.8916862558639999
      },
      "beta": {
        "r": 0.7351369840700528,
        "p": 3.0947863981896828e-18
      },
      "gamma": {
        "r": 0.10488441002374888,
        "p": 0.2990256194055351
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 53.94497930539136,
  "bic_results": {
    "average_bic": 53.94497930539136,
    "individual_bics": [
      60.6585157558939,
      60.6571538198331,
      60.54598547139196,
      60.65742620704526,
      60.65733541130788,
      57.84250314306783,
      33.3062773958674,
      56.579576918199024,
      33.3062773958674,
      60.657517002782654,
      60.65733541130787,
      60.65842496015652,
      60.65742620704526,
      33.3062773958674,
      33.3062773958674,
      33.3062773958674,
      33.3062773958674,
      43.305823414830115,
      41.305914211037575,
      33.3062773958674,
      60.21179031602779,
      43.305823414830115,
      60.65760779852003,
      60.54598546418647,
      60.657153833213385,
      59.652471952366696,
      60.21179031597559,
      60.657880185732196,
      41.305914211037575,
      49.30555102620774,
      33.3062773958674,
      60.6585157558939,
      60.65742620704526,
      60.657517002782654,
      33.3062773958674,
      57.842503143350214,
      55.06643313526797,
      60.65715505014376,
      56.57957692747878,
      39.30600500724502,
      60.656100771040826,
      60.65806177720697,
      35.30618659965994,
      60.211790316190275,
      58.86444719281518,
      53.2911985406585,
      60.545985464490926,
      60.657517002782654,
      60.65742620704526,
      60.545985485722326,
      55.06643312504741,
      60.65833416441913,
      60.54598546357296,
      59.65247195236235,
      60.657517002782654,
      60.657698594257425,
      60.65788018573221,
      41.305914211037575,
      60.65842496015652,
      47.3056418224152,
      58.86444719335705,
      60.6571538198331,
      60.6585157558939,
      60.65733541130787,
      60.65806177720697,
      60.2117903164871,
      39.30600500724503,
      43.3058234148301,
      60.211790316226654,
      39.306005007245034,
      60.65842496015652,
      60.65833416441913,
      60.545985464933594,
      49.305722789488016,
      60.65717847683882,
      55.066433125412146,
      37.306095803452486,
      60.658606551631294,
      58.86444719285518,
      60.6585157558939,
      60.5459854638308,
      39.30600500724503,
      60.65842496015652,
      60.657165201962,
      58.86444719281624,
      60.65842496015651,
      55.30262029494676,
      60.65806177720697,
      37.306095803452486,
      60.65724461557049,
      55.066433125148976
    ],
    "group_enabled": false,
    "group_bics": null,
    "num_parameters": 3,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- phi: r = -0.014\n- beta: r = 0.735\n- gamma: r = 0.105",
  "previous_models": [
    "Specification: a = \u2211(i=1,11) F_i + \u03b4\na_mod = 1.08 * a * (1 + 0.012 * sin(a + 0.045))\nz = a_mod * (1 + 0.008 * cos(a + 0.065)) * (1 + 0.005 * sin(a + 0.115)) * (1 + 0.004 * cos(a + 0.085)) * (1 + 0.006 * (sin(a + 0.035) * cos(a + 0.055))) * (1 + 0.003 * (sin(a + 0.03) * cos(a + 0.05)))\nw = (phi - 0.5) / phi\nf_adapt(z) = { if z \u2265 0: clip[ 1.002 * (z^w * (ln(1+z))^(1-w) * (z/(1+|z|)) ) , -30, 30] ; if z < 0: phi * ( (z + 1e-6)/(1 + |z + 1e-6|) )^40 }\nT = \u2211(k=0,90) (a^k * (\u00bd)^k)\nnested_SP = softplus( softplus( softplus( softplus( softplus(0.865/(1+a)) ) ) ) )\nP_extra = exp(\u2013a/0.1) * (z/(1+|z|)) * (1 + 0.005 * sin(1/(1+a))) * (1 + 0.002 * cos(0.5*a)) * (1 + 0.003 * cos(0.3*a))^2 * (1 + 0.004 * cos(0.3*a))^2 * (1 + 0.0025 * cos(0.7*a)) * (1 + tanh(0.05*a)) * (1 + sigmoid(0.01*a)) * (1 + 0.002 * cos(3*a)) * (1 + 0.002*( sin(2.5*a) + 0.001*cos(3.5*a) + 0.0015*sin(3*a) )) * (1 + sigmoid(0.03*a)) * (1 + tanh(0.07*a)) * (1 + cos(3.1*a)) * (1 + sigmoid(0.04*a)) * (1 + tanh(0.08*a)) * (1 + cos(3.2*a)) * (1 + sigmoid(0.05*a)) * (1 + tanh(0.1*a)) * (1 + cos(3.4*a)) * (1 + sigmoid(0.06*a)) * (1 + tanh(0.12*a)) * (1 + cos(3.6*a)) * (1 + sigmoid(0.08*a)) * (1 + tanh(0.2*a)) * (1 + cos(4.2*a)) * nested_SP\nextra = (P_extra)^(0.9478 + 0.00018 * ln(1+a))\nExponent = (0.9478 + 0.00018 * ln(1+a)) * (1 + 0.0055*sin(2.9*a) + 0.0015*cos(3.9*a) + 0.0035*sin(3.5*a) + 0.0025*cos(4.5*a) + 0.0015*sin(3.0*a) + 0.0007*cos(4.2*a) + 0.0015*(sin(2.7*a)*cos(3.4*a)) + 0.0025*cos(3.8*a) + 0.0015*sin(2.8*a) + 0.005*tanh(0.5*a) + 0.002*sin(3*a))\nf(x) = sign(z) * ( (f_adapt(z) * T * extra)^(Exponent) )\nU = beta + gamma * f(x)\nP_accept = 1/(1 + exp(\u2013U))\nSummary: A highly nonlinear utility model that aggregates 11 fixed task\u2010components with a constant offset and subjects the sum to multiple nested nonlinear transformations including sinusoidal, exponential, sigmoidal, and softplus layers. A piecewise adaptation function with a steep penalty for extreme negative signals is applied to a composite product, which is then modulated by an extended dynamic threshold and an extra composite term raised to an oscillatory exponent. The latent utility is computed via three learnable parameters (beta, gamma, phi) and transformed by a logistic function to predict responder accept/reject behavior.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 53.94497930539136\nOverall Accuracy: 0.5614\n\nParameter Recovery:\n- phi: r = -0.014\n- beta: r = 0.735\n- gamma: r = 0.105"
  ]
}