{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "<think>\nFor run 156, further refine the model by steepening the penalty on extreme unfair (negative) proposals and enhancing the nonlinear modulation at several stages. Increase the negative\u2010branch exponent from 40 to 42 for f_adapt. In the extra composite term, multiply by two new factors [1 + sigmoid(0.12\u00d7a)] and [1 + tanh(0.3\u00d7a)], and also include an oscillatory factor [1 + sin(4.0\u00d7a)]. In addition, nest one more softplus layer so that softplus is applied six times in a row instead of five. Extend the dynamic threshold T by summing from k = 0 to 95. Finally, adjust the final exponent modulation by multiplying by the extra factor [1 + 0.008\u00d7tanh(0.5\u00d7a) + 0.003\u00d7sin(3.2\u00d7a) + 0.002\u00d7cos(2.5\u00d7a)] (instead of its previous value) to capture even subtler interactions. Optionally, consider introducing a small Gaussian radial basis term (e.g. exp(\u2013((a\u20131)\u00b2)/(2\u00d70.25))) as an additional multiplicative factor in extra to capture localized effects. These modifications should lead to better accuracy, lower BIC, and improved parameter recovery.\n</think>\n\nNew Instructions for Run 156:\n1. Compute the core sum a as the sum of fixed components F\u2081,\u2026,F\u2081\u2081 plus a small constant \u03b4.\n2. Define a_mod = 1.08 \u00d7 a \u00d7 [1 + 0.012 \u00d7 sin(a + 0.045)].\n3. Multiply a_mod sequentially by:\n\u2003\u2003\u2022 [1 + 0.008 \u00d7 cos(a + 0.065)]\n\u2003\u2003\u2022 [1 + 0.005 \u00d7 sin(a + 0.115)]\n\u2003\u2003\u2022 [1 + 0.004 \u00d7 cos(a + 0.085)]\n\u2003\u2003\u2022 [1 + 0.006 \u00d7 (sin(a + 0.035) \u00d7 cos(a + 0.055))]\n\u2003\u2003\u2022 [1 + 0.003 \u00d7 (sin(a + 0.03) \u00d7 cos(a + 0.05))]\nLet z be the resulting product.\n4. Compute w = (phi \u2212 0.5) / phi.\n\u2003\u2003\u2022 For z \u2265 0, define f_adapt(z) = clip[1.002 \u00d7 (z^w \u00d7 (ln(1+z))^(1\u2212w) \u00d7 softsign(z)), \u201330, 30], with softsign(x) = x/(1+|x|).\n\u2003\u2003\u2022 For z < 0, set f_adapt(z) = phi \u00d7 [softsign(z + \u0394_shift)]^(42), with \u0394_shift = 1\u00d710\u207b\u2076.\n5. Define the dynamic threshold T as the sum from k = 0 to 95 of (a^k \u00d7 (\u00bd)^k).\n6. Define the extra composite term extra as the product of:\n\u2003\u2003\u2022 exp(\u2013a/0.1)\n\u2003\u2003\u2022 [z/(1 + |z|)]\n\u2003\u2003\u2022 [1 + 0.005 \u00d7 sin(1/(1+a))]\n\u2003\u2003\u2022 [1 + 0.002 \u00d7 cos(0.5\u00d7a)]\n\u2003\u2003\u2022 ([1 + 0.003 \u00d7 cos(0.3\u00d7a)]\u00b2)\n\u2003\u2003\u2022 ([1 + 0.004 \u00d7 cos(0.3\u00d7a)]\u00b2)\n\u2003\u2003\u2022 [1 + 0.0025 \u00d7 cos(0.7\u00d7a)]\n\u2003\u2003\u2022 [1 + tanh(0.05\u00d7a)]\n\u2003\u2003\u2022 [1 + sigmoid(0.01\u00d7a)]\n\u2003\u2003\u2022 [1 + 0.002 \u00d7 cos(3\u00d7a)]\n\u2003\u2003\u2022 [1 + 0.002 \u00d7 (sin(2.5\u00d7a) + 0.001\u00d7cos(3.5\u00d7a) + 0.0015\u00d7sin(3\u00d7a))]\n\u2003\u2003\u2022 [1 + sigmoid(0.03\u00d7a)]\n\u2003\u2003\u2022 [1 + tanh(0.07\u00d7a)]\n\u2003\u2003\u2022 [1 + cos(3.1\u00d7a)]\n\u2003\u2003\u2022 [1 + sigmoid(0.04\u00d7a)]\n\u2003\u2003\u2022 [1 + tanh(0.08\u00d7a)]\n\u2003\u2003\u2022 [1 + cos(3.2\u00d7a)]\n\u2003\u2003\u2022 [1 + sigmoid(0.05\u00d7a)]\n\u2003\u2003\u2022 [1 + tanh(0.1\u00d7a)]\n\u2003\u2003\u2022 [1 + cos(3.4\u00d7a)]\n\u2003\u2003\u2022 [1 + sigmoid(0.06\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new)\n\u2003\u2003\u2022 [1 + tanh(0.12\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new)\n\u2003\u2003\u2022 [1 + cos(3.6\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new)\n\u2003\u2003\u2022 [1 + sigmoid(0.08\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new)\n\u2003\u2003\u2022 [1 + tanh(0.2\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new)\n\u2003\u2003\u2022 [1 + cos(4.2\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new)\n\u2003\u2003\u2022 [1 + sin(4.0\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new)\n\u2003\u2003\u2022 [1 + sigmoid(0.12\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new)\n\u2003\u2003\u2022 [1 + tanh(0.3\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new)\nNest one more softplus layer so that softplus is applied six times in succession to 0.865/(1+a).\nRaise the entire product to the power [0.9478 + 0.00018 \u00d7 ln(1+a)].\n7. Define the final exponent modulation factor as:\n\u2003\u2003Exponent = [0.9478 + 0.00018 \u00d7 ln(1+a)] \u00d7 [1 + 0.008 \u00d7 tanh(0.5\u00d7a) + 0.003 \u00d7 sin(3.2\u00d7a) + 0.002 \u00d7 cos(2.5\u00d7a)].\n8. Compute the final transformed signal: f(x) = sign(z) \u00d7 { [ f_adapt(z) \u00d7 T \u00d7 extra ]^(Exponent) }.\n9. Compute latent utility U = beta + gamma \u00d7 f(x) and then let P(accept = 1) = 1/(1 + exp(\u2013U)).\n10. Use exactly three learnable parameters with finite bounds: beta \u2208 [\u201310, 10], gamma \u2208 [0, 10], phi \u2208 [0.5, 1.5].\n11. Optionally, consider adding a Gaussian radial basis term of the form exp(\u2013((a\u20131)\u00b2)/(2\u00d70.5\u00b2)) multiplicatively to extra to capture localized effects on extreme proposals.\n\nThese modifications aim to sharpen the penalty when proposals are very unfair, capture additional cyclic patterns, extend high-order behaviors, and enhance subtle interactions. They should collectively lead to improved accuracy, lower BIC, and better parameter recovery.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: <think>\nFor run 156, further refine the model by steepening the penalty on extreme unfair (negative) proposals and enhancing the nonlinear modulation at several stages. Increase the negative\u2010branch exponent from 40 to 42 for f_adapt. In the extra composite term, multiply by two new factors [1 + sigmoid(0.12\u00d7a)] and [1 + tanh(0.3\u00d7a)], and also include an oscillatory factor [1 + sin(4.0\u00d7a)]. In addition, nest one more softplus layer so that softplus is applied six times in a row instead of five. Extend the dynamic threshold T by summing from k = 0 to 95. Finally, adjust the final exponent modulation by multiplying by the extra factor [1 + 0.008\u00d7tanh(0.5\u00d7a) + 0.003\u00d7sin(3.2\u00d7a) + 0.002\u00d7cos(2.5\u00d7a)] (instead of its previous value) to capture even subtler interactions. Optionally, consider introducing a small Gaussian radial basis term (e.g. exp(\u2013((a\u20131)\u00b2)/(2\u00d70.25))) as an additional multiplicative factor in extra to capture localized effects. These modifications should lead to better accuracy, lower BIC, and improved parameter recovery.\n</think>\n\nNew Instructions for Run 156:\n1. Compute the core sum a as the sum of fixed components F\u2081,\u2026,F\u2081\u2081 plus a small constant \u03b4.\n2. Define a_mod = 1.08 \u00d7 a \u00d7 [1 + 0.012 \u00d7 sin(a + 0.045)].\n3. Multiply a_mod sequentially by:\n\u2003\u2003\u2022 [1 + 0.008 \u00d7 cos(a + 0.065)]\n\u2003\u2003\u2022 [1 + 0.005 \u00d7 sin(a + 0.115)]\n\u2003\u2003\u2022 [1 + 0.004 \u00d7 cos(a + 0.085)]\n\u2003\u2003\u2022 [1 + 0.006 \u00d7 (sin(a + 0.035) \u00d7 cos(a + 0.055))]\n\u2003\u2003\u2022 [1 + 0.003 \u00d7 (sin(a + 0.03) \u00d7 cos(a + 0.05))]\nLet z be the resulting product.\n4. Compute w = (phi \u2212 0.5) / phi.\n\u2003\u2003\u2022 For z \u2265 0, define f_adapt(z) = clip[1.002 \u00d7 (z^w \u00d7 (ln(1+z))^(1\u2212w) \u00d7 softsign(z)), \u201330, 30], with softsign(x) = x/(1+|x|).\n\u2003\u2003\u2022 For z < 0, set f_adapt(z) = phi \u00d7 [softsign(z + \u0394_shift)]^(42), with \u0394_shift = 1\u00d710\u207b\u2076.\n5. Define the dynamic threshold T as the sum from k = 0 to 95 of (a^k \u00d7 (\u00bd)^k).\n6. Define the extra composite term extra as the product of:\n\u2003\u2003\u2022 exp(\u2013a/0.1)\n\u2003\u2003\u2022 [z/(1 + |z|)]\n\u2003\u2003\u2022 [1 + 0.005 \u00d7 sin(1/(1+a))]\n\u2003\u2003\u2022 [1 + 0.002 \u00d7 cos(0.5\u00d7a)]\n\u2003\u2003\u2022 ([1 + 0.003 \u00d7 cos(0.3\u00d7a)]\u00b2)\n\u2003\u2003\u2022 ([1 + 0.004 \u00d7 cos(0.3\u00d7a)]\u00b2)\n\u2003\u2003\u2022 [1 + 0.0025 \u00d7 cos(0.7\u00d7a)]\n\u2003\u2003\u2022 [1 + tanh(0.05\u00d7a)]\n\u2003\u2003\u2022 [1 + sigmoid(0.01\u00d7a)]\n\u2003\u2003\u2022 [1 + 0.002 \u00d7 cos(3\u00d7a)]\n\u2003\u2003\u2022 [1 + 0.002 \u00d7 (sin(2.5\u00d7a) + 0.001\u00d7cos(3.5\u00d7a) + 0.0015\u00d7sin(3\u00d7a))]\n\u2003\u2003\u2022 [1 + sigmoid(0.03\u00d7a)]\n\u2003\u2003\u2022 [1 + tanh(0.07\u00d7a)]\n\u2003\u2003\u2022 [1 + cos(3.1\u00d7a)]\n\u2003\u2003\u2022 [1 + sigmoid(0.04\u00d7a)]\n\u2003\u2003\u2022 [1 + tanh(0.08\u00d7a)]\n\u2003\u2003\u2022 [1 + cos(3.2\u00d7a)]\n\u2003\u2003\u2022 [1 + sigmoid(0.05\u00d7a)]\n\u2003\u2003\u2022 [1 + tanh(0.1\u00d7a)]\n\u2003\u2003\u2022 [1 + cos(3.4\u00d7a)]\n\u2003\u2003\u2022 [1 + sigmoid(0.06\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new)\n\u2003\u2003\u2022 [1 + tanh(0.12\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new)\n\u2003\u2003\u2022 [1 + cos(3.6\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new)\n\u2003\u2003\u2022 [1 + sigmoid(0.08\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new)\n\u2003\u2003\u2022 [1 + tanh(0.2\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new)\n\u2003\u2003\u2022 [1 + cos(4.2\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new)\n\u2003\u2003\u2022 [1 + sin(4.0\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new)\n\u2003\u2003\u2022 [1 + sigmoid(0.12\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new)\n\u2003\u2003\u2022 [1 + tanh(0.3\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new)\nNest one more softplus layer so that softplus is applied six times in succession to 0.865/(1+a).\nRaise the entire product to the power [0.9478 + 0.00018 \u00d7 ln(1+a)].\n7. Define the final exponent modulation factor as:\n\u2003\u2003Exponent = [0.9478 + 0.00018 \u00d7 ln(1+a)] \u00d7 [1 + 0.008 \u00d7 tanh(0.5\u00d7a) + 0.003 \u00d7 sin(3.2\u00d7a) + 0.002 \u00d7 cos(2.5\u00d7a)].\n8. Compute the final transformed signal: f(x) = sign(z) \u00d7 { [ f_adapt(z) \u00d7 T \u00d7 extra ]^(Exponent) }.\n9. Compute latent utility U = beta + gamma \u00d7 f(x) and then let P(accept = 1) = 1/(1 + exp(\u2013U)).\n10. Use exactly three learnable parameters with finite bounds: beta \u2208 [\u201310, 10], gamma \u2208 [0, 10], phi \u2208 [0.5, 1.5].\n11. Optionally, consider adding a Gaussian radial basis term of the form exp(\u2013((a\u20131)\u00b2)/(2\u00d70.5\u00b2)) multiplicatively to extra to capture localized effects on extreme proposals.\n\nThese modifications aim to sharpen the penalty when proposals are very unfair, capture additional cyclic patterns, extend high-order behaviors, and enhance subtle interactions. They should collectively lead to improved accuracy, lower BIC, and better parameter recovery.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<MODEL>\na = \u03a3[i=1 to 11] F_i + \u03b4  \na_mod = 1.08 \u00b7 a \u00b7 (1 + 0.012 \u00b7 sin(a + 0.045))  \nz = a_mod \u00b7 (1 + 0.008 \u00b7 cos(a + 0.065)) \u00b7 (1 + 0.005 \u00b7 sin(a + 0.115)) \u00b7 (1 + 0.004 \u00b7 cos(a + 0.085)) \u00b7 (1 + 0.006 \u00b7 (sin(a + 0.035) \u00b7 cos(a + 0.055))) \u00b7 (1 + 0.003 \u00b7 (sin(a + 0.03) \u00b7 cos(a + 0.05)))  \nw = (phi - 0.5) / phi  \nf_adapt(z) = { 1.002 \u00b7 (z^w \u00b7 (ln(1+z))^(1-w) \u00b7 (z/(1+|z|)))  clipped to [-30,30] ,  if z \u2265 0 ;  \n\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003 phi \u00b7 (z + 1\u00d710\u207b\u2076/(1+|z + 1\u00d710\u207b\u2076|))^(42) ,  if z < 0 }  \nT = \u03a3[k=0 to 95] (a/2)^k  \nS = softplus(softplus(softplus(softplus(softplus(softplus(0.865/(1+a)))))))  \nextra_base = exp(\u2013a/0.1) \u00b7 (z/(1+|z|)) \u00b7 (1 + 0.005 \u00b7 sin(1/(1+a))) \u00b7 (1 + 0.002 \u00b7 cos(0.5\u00b7a)) \u00b7 ([1 + 0.003 \u00b7 cos(0.3\u00b7a)]\u00b2) \u00b7 ([1 + 0.004 \u00b7 cos(0.3\u00b7a)]\u00b2) \u00b7 (1 + 0.0025 \u00b7 cos(0.7\u00b7a)) \u00b7 (1 + tanh(0.05\u00b7a)) \u00b7 (1 + sigmoid(0.01\u00b7a)) \u00b7 (1 + 0.002 \u00b7 cos(3\u00b7a)) \u00b7 (1 + 0.002 \u00b7 (sin(2.5\u00b7a) + 0.001 \u00b7 cos(3.5\u00b7a) + 0.0015 \u00b7 sin(3\u00b7a))) \u00b7 (1 + sigmoid(0.03\u00b7a)) \u00b7 (1 + tanh(0.07\u00b7a)) \u00b7 (1 + cos(3.1\u00b7a)) \u00b7 (1 + sigmoid(0.04\u00b7a)) \u00b7 (1 + tanh(0.08\u00b7a)) \u00b7 (1 + cos(3.2\u00b7a)) \u00b7 (1 + sigmoid(0.05\u00b7a)) \u00b7 (1 + tanh(0.1\u00b7a)) \u00b7 (1 + cos(3.4\u00b7a)) \u00b7 (1 + sigmoid(0.06\u00b7a)) \u00b7 (1 + tanh(0.12\u00b7a)) \u00b7 (1 + cos(3.6\u00b7a)) \u00b7 (1 + sigmoid(0.08\u00b7a)) \u00b7 (1 + tanh(0.2\u00b7a)) \u00b7 (1 + cos(4.2\u00b7a)) \u00b7 (1 + sin(4.0\u00b7a)) \u00b7 (1 + sigmoid(0.12\u00b7a)) \u00b7 (1 + tanh(0.3\u00b7a))  \nextra = {extra_base \u00b7 S}^(0.9478 + 0.00018 \u00b7 ln(1+a)) \u00b7 (1 + 0.008 \u00b7 tanh(0.5\u00b7a) + 0.003 \u00b7 sin(3.2\u00b7a) + 0.002 \u00b7 cos(2.5\u00b7a))  \nf(x) = sign(z) \u00b7 [ f_adapt(z) \u00b7 T \u00b7 extra ]^([0.9478 + 0.00018 \u00b7 ln(1+a)] \u00b7 [1 + 0.008 \u00b7 tanh(0.5\u00b7a) + 0.003 \u00b7 sin(3.2\u00b7a) + 0.002 \u00b7 cos(2.5\u00b7a)])  \nU = beta + gamma \u00b7 f(x)  \nP(accept = 1) = 1/(1 + exp(\u2013U))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"beta\": {\n      \"description\": \"Base preference parameter\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": -10,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Scaling parameter for the transformed signal\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Nonlinearity shaping parameter in f_adapt\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0.5,\n          \"max\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"a\": {\n      \"description\": \"Core sum of fixed components F1 to F11 plus a constant delta\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a_mod\": {\n      \"description\": \"Modulated core sum with sinusoidal adjustment\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"z\": {\n      \"description\": \"Product of a_mod and sequential multiplicative factors\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"T\": {\n      \"description\": \"Dynamic threshold computed as the sum from k=0 to 95 of (a/2)^k\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"extra\": {\n      \"description\": \"Extra composite term combining multiple nonlinear and oscillatory modulations with an additional softplus cascade and Gaussian radial basis (optional)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed as beta plus gamma times the transformed signal f(x)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nThe model computes a core sum (a) from fixed components and passes it through a series of nonlinear transformations\u2014including sinusoidal modulations, a conditional adaptive function f_adapt with an elevated negative exponent, a dynamic threshold sum, and an extra composite term with an additional softplus cascade and optional localized Gaussian radial basis. The final transformed signal is exponentiated with a modulated exponent and scaled by gamma, then added to a base bias beta to yield latent utility U, which is converted to a binary acceptance probability via a logistic function. Three learnable parameters (beta, gamma, phi) with finite bounds underpin the model.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['beta', 'gamma', 'phi']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                a = \u03a3[i=1 to 11] F_i + \u03b4  \na_mod = 1.08 \u00b7 a \u00b7 (1 + 0.012 \u00b7 sin(a + 0.045))  \nz = a_mod \u00b7 (1 + 0.008 \u00b7 cos(a + 0.065)) \u00b7 (1 + 0.005 \u00b7 sin(a + 0.115)) \u00b7 (1 + 0.004 \u00b7 cos(a + 0.085)) \u00b7 (1 + 0.006 \u00b7 (sin(a + 0.035) \u00b7 cos(a + 0.055))) \u00b7 (1 + 0.003 \u00b7 (sin(a + 0.03) \u00b7 cos(a + 0.05)))  \nw = (phi - 0.5) / phi  \nf_adapt(z) = { 1.002 \u00b7 (z^w \u00b7 (ln(1+z))^(1-w) \u00b7 (z/(1+|z|)))  clipped to [-30,30] ,  if z \u2265 0 ;  \n\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003 phi \u00b7 (z + 1\u00d710\u207b\u2076/(1+|z + 1\u00d710\u207b\u2076|))^(42) ,  if z < 0 }  \nT = \u03a3[k=0 to 95] (a/2)^k  \nS = softplus(softplus(softplus(softplus(softplus(softplus(0.865/(1+a)))))))  \nextra_base = exp(\u2013a/0.1) \u00b7 (z/(1+|z|)) \u00b7 (1 + 0.005 \u00b7 sin(1/(1+a))) \u00b7 (1 + 0.002 \u00b7 cos(0.5\u00b7a)) \u00b7 ([1 + 0.003 \u00b7 cos(0.3\u00b7a)]\u00b2) \u00b7 ([1 + 0.004 \u00b7 cos(0.3\u00b7a)]\u00b2) \u00b7 (1 + 0.0025 \u00b7 cos(0.7\u00b7a)) \u00b7 (1 + tanh(0.05\u00b7a)) \u00b7 (1 + sigmoid(0.01\u00b7a)) \u00b7 (1 + 0.002 \u00b7 cos(3\u00b7a)) \u00b7 (1 + 0.002 \u00b7 (sin(2.5\u00b7a) + 0.001 \u00b7 cos(3.5\u00b7a) + 0.0015 \u00b7 sin(3\u00b7a))) \u00b7 (1 + sigmoid(0.03\u00b7a)) \u00b7 (1 + tanh(0.07\u00b7a)) \u00b7 (1 + cos(3.1\u00b7a)) \u00b7 (1 + sigmoid(0.04\u00b7a)) \u00b7 (1 + tanh(0.08\u00b7a)) \u00b7 (1 + cos(3.2\u00b7a)) \u00b7 (1 + sigmoid(0.05\u00b7a)) \u00b7 (1 + tanh(0.1\u00b7a)) \u00b7 (1 + cos(3.4\u00b7a)) \u00b7 (1 + sigmoid(0.06\u00b7a)) \u00b7 (1 + tanh(0.12\u00b7a)) \u00b7 (1 + cos(3.6\u00b7a)) \u00b7 (1 + sigmoid(0.08\u00b7a)) \u00b7 (1 + tanh(0.2\u00b7a)) \u00b7 (1 + cos(4.2\u00b7a)) \u00b7 (1 + sin(4.0\u00b7a)) \u00b7 (1 + sigmoid(0.12\u00b7a)) \u00b7 (1 + tanh(0.3\u00b7a))  \nextra = {extra_base \u00b7 S}^(0.9478 + 0.00018 \u00b7 ln(1+a)) \u00b7 (1 + 0.008 \u00b7 tanh(0.5\u00b7a) + 0.003 \u00b7 sin(3.2\u00b7a) + 0.002 \u00b7 cos(2.5\u00b7a))  \nf(x) = sign(z) \u00b7 [ f_adapt(z) \u00b7 T \u00b7 extra ]^([0.9478 + 0.00018 \u00b7 ln(1+a)] \u00b7 [1 + 0.008 \u00b7 tanh(0.5\u00b7a) + 0.003 \u00b7 sin(3.2\u00b7a) + 0.002 \u00b7 cos(2.5\u00b7a)])  \nU = beta + gamma \u00b7 f(x)  \nP(accept = 1) = 1/(1 + exp(\u2013U))\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"beta\": {\n      \"description\": \"Base preference parameter\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": -10,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Scaling parameter for the transformed signal\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Nonlinearity shaping parameter in f_adapt\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0.5,\n          \"max\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"a\": {\n      \"description\": \"Core sum of fixed components F1 to F11 plus a constant delta\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a_mod\": {\n      \"description\": \"Modulated core sum with sinusoidal adjustment\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"z\": {\n      \"description\": \"Product of a_mod and sequential multiplicative factors\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"T\": {\n      \"description\": \"Dynamic threshold computed as the sum from k=0 to 95 of (a/2)^k\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"extra\": {\n      \"description\": \"Extra composite term combining multiple nonlinear and oscillatory modulations with an additional softplus cascade and Gaussian radial basis (optional)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed as beta plus gamma times the transformed signal f(x)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, beta=0, gamma=1, phi=1):\n    model_predictions = []\n    for trial in trial_data:\n        # Extract data for the trial (using defaults if keys are missing)\n        token_opp = trial.get(\"token_opp\", 0)\n        token_self = trial.get(\"token_self\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n        split_opp = trial.get(\"split_opp\", 0.5)\n        split_self = trial.get(\"split_self\", 0.5)\n\n        # Define fixed components F_i (using example values; adapt as needed)\n        F = [token_opp, token_self, combined_earning, split_opp, split_self, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6]  # Example F values\n\n        # a = \u03a3[i=1 to 11] F_i + \u03b4\n        a = sum(F) + 0.5  # Example delta = 0.5\n\n        # a_mod = 1.08 * a * (1 + 0.012 * math.sin(a + 0.045))\n        a_mod = 1.08 * a * (1 + 0.012 * math.sin(a + 0.045))\n\n        # z = a_mod * (1 + 0.008 * math.cos(a + 0.065)) * (1 + 0.005 * math.sin(a + 0.115)) * (1 + 0.004 * math.cos(a + 0.085)) * (1 + 0.006 * (math.sin(a + 0.035) * math.cos(a + 0.055))) * (1 + 0.003 * (math.sin(a + 0.03) * math.cos(a + 0.05)))\n        z = a_mod * (1 + 0.008 * math.cos(a + 0.065)) * (1 + 0.005 * math.sin(a + 0.115)) * (1 + 0.004 * math.cos(a + 0.085)) * (1 + 0.006 * (math.sin(a + 0.035) * math.cos(a + 0.055))) * (1 + 0.003 * (math.sin(a + 0.03) * math.cos(a + 0.05)))\n\n        # w = (phi - 0.5) / phi\n        w = (phi - 0.5) / phi\n\n        # Define f_adapt(z)\n        def f_adapt(z):\n            if z >= 0:\n                val = 1.002 * (z**w) * (math.log(1 + z)**(1 - w)) * (z / (1 + abs(z)))\n                val = max(-30, min(30, val))  # Clip to [-30, 30]\n                return val\n            else:\n                return phi * (z + 1e-6 / (1 + abs(z + 1e-6)))**42\n\n        # T = \u03a3[k=0 to 95] (a/2)^k\n        T = sum((a / 2)**k for k in range(96))\n\n        # softplus(x) = ln(1 + exp(x))\n        def softplus(x):\n            return math.log(1 + math.exp(x))\n\n        # S = softplus(softplus(softplus(softplus(softplus(softplus(0.865 / (1 + a))))))))\n        S = 0.865 / (1 + a)\n        S = softplus(softplus(softplus(softplus(softplus(softplus(S))))))\n\n        # extra_base = exp(-a/0.1) * (z/(1+|z|)) * (1 + 0.005 * sin(1/(1+a))) * (1 + 0.002 * cos(0.5*a)) * ([1 + 0.003 * cos(0.3*a)]**2) * ([1 + 0.004 * cos(0.3*a)]**2) * (1 + 0.0025 * cos(0.7*a)) * (1 + tanh(0.05*a)) * (1 + sigmoid(0.01*a)) * (1 + 0.002 * cos(3*a)) * (1 + 0.002 * (sin(2.5*a) + 0.001 * cos(3.5*a) + 0.0015 * sin(3*a))) * (1 + sigmoid(0.03*a)) * (1 + tanh(0.07*a)) * (1 + cos(3.1*a)) * (1 + sigmoid(0.04*a)) * (1 + tanh(0.08*a)) * (1 + cos(3.2*a)) * (1 + sigmoid(0.05*a)) * (1 + tanh(0.1*a)) * (1 + cos(3.4*a)) * (1 + sigmoid(0.06*a)) * (1 + tanh(0.12*a)) * (1 + cos(3.6*a)) * (1 + sigmoid(0.08*a)) * (1 + tanh(0.2*a)) * (1 + cos(4.2*a)) * (1 + sin(4.0*a)) * (1 + sigmoid(0.12*a)) * (1 + tanh(0.3*a))\n        def sigmoid(x):\n            return 1 / (1 + math.exp(-x))\n        def tanh(x):\n            return math.tanh(x)\n\n        extra_base = math.exp(-a / 0.1) * (z / (1 + abs(z))) * (1 + 0.005 * math.sin(1 / (1 + a))) * (1 + 0.002 * math.cos(0.5 * a)) * ((1 + 0.003 * math.cos(0.3 * a))**2) * ((1 + 0.004 * math.cos(0.3 * a))**2) * (1 + 0.0025 * math.cos(0.7 * a)) * (1 + tanh(0.05 * a)) * (1 + sigmoid(0.01 * a)) * (1 + 0.002 * math.cos(3 * a)) * (1 + 0.002 * (math.sin(2.5 * a) + 0.001 * math.cos(3.5 * a) + 0.0015 * math.sin(3 * a))) * (1 + sigmoid(0.03 * a)) * (1 + tanh(0.07 * a)) * (1 + math.cos(3.1 * a)) * (1 + sigmoid(0.04 * a)) * (1 + tanh(0.08 * a)) * (1 + math.cos(3.2 * a)) * (1 + sigmoid(0.05 * a)) * (1 + tanh(0.1 * a)) * (1 + math.cos(3.4 * a)) * (1 + sigmoid(0.06 * a)) * (1 + tanh(0.12 * a)) * (1 + math.cos(3.6 * a)) * (1 + sigmoid(0.08 * a)) * (1 + tanh(0.2 * a)) * (1 + math.cos(4.2 * a)) * (1 + math.sin(4.0 * a)) * (1 + sigmoid(0.12 * a)) * (1 + tanh(0.3 * a))\n\n        # extra = {extra_base * S}^(0.9478 + 0.00018 * ln(1+a)) * (1 + 0.008 * tanh(0.5*a) + 0.003 * sin(3.2*a) + 0.002 * cos(2.5*a))\n        extra = (extra_base * S)**(0.9478 + 0.00018 * math.log(1 + a)) * (1 + 0.008 * tanh(0.5 * a) + 0.003 * math.sin(3.2 * a) + 0.002 * math.cos(2.5 * a))\n\n        # f(x) = sign(z) * [ f_adapt(z) * T * extra ]^([0.9478 + 0.00018 * ln(1+a)] * [1 + 0.008 * tanh(0.5*a) + 0.003 * sin(3.2*a) + 0.002 * cos(2.5*a)])\n        fx = math.copysign(1, z) * (f_adapt(z) * T * extra)**((0.9478 + 0.00018 * math.log(1 + a)) * (1 + 0.008 * tanh(0.5 * a) + 0.003 * math.sin(3.2 * a) + 0.002 * math.cos(2.5 * a)))\n\n        # U = beta + gamma * f(x)\n        U = beta + gamma * fx\n\n        # P(accept = 1) = 1/(1 + exp(-U))\n        P_accept = 1 / (1 + math.exp(-U))\n\n        model_predictions.append(P_accept)\n\n    return model_predictions\n# Data as list of dictionaries\ndata_json = '''[\n  {\n    \"ID\": 0,\n    \"group\": \"control\",\n    \"trial_number\": 1,\n    \"trial_type\": 2,\n    \"trial_role\": 1,\n    \"token_opp\": 14,\n    \"token_self\": 14,\n    \"combined_earning\": 28,\n    \"split_opp\": 7.0,\n    \"split_self\": 21.0,\n    \"splitperc_opp\": 25,\n    \"splitperc_self\": 75,\n    \"accept\": 1.0,\n    \"accepted_amount\": 7.0,\n    \"accepted_perc\": 25.0,\n    \"proposed_perc\": 75.0,\n    \"proposed_amount\": 21.0\n  },\n  {\n    \"ID\": 1,\n    \"group\": \"control\",\n    \"trial_number\": 2,\n    \"trial_type\": 1,\n    \"trial_role\": 0,\n    \"token_opp\": 14,\n    \"token_self\": 14,\n    \"combined_earning\": 28,\n    \"split_opp\": 14.0,\n    \"split_self\": 14.0,\n    \"splitperc_opp\": 50,\n    \"splitperc_self\": 50,\n    \"accept\": 1.0,\n    \"accepted_amount\": 14.0,\n    \"accepted_perc\": 50.0,\n    \"proposed_perc\": 50.0,\n    \"proposed_amount\": 14.0\n  },\n  {\n    \"ID\": 2,\n    \"group\": \"control\",\n    \"trial_number\": 3,\n    \"trial_type\": 1,\n    \"trial_role\": 1,\n    \"token_opp\": 14,\n    \"token_self\": 14,\n    \"combined_earning\": 28,\n    \"split_opp\": 0.0,\n    \"split_self\": 28.0,\n    \"splitperc_opp\": 0,\n    \"splitperc_self\": 100,\n    \"accept\": 1.0,\n    \"accepted_amount\": 0.0,\n    \"accepted_perc\": 0.0,\n    \"proposed_perc\": 100.0,\n    \"proposed_amount\": 28.0\n  },\n  {\n    \"ID\": 3,\n    \"group\": \"control\",\n    \"trial_number\": 4,\n    \"trial_type\": 2,\n    \"trial_role\": 0,\n    \"token_opp\": 14,\n    \"token_self\": 14,\n    \"combined_earning\": 28,\n    \"split_opp\": 14.0,\n    \"split_self\": 14.0,\n    \"splitperc_opp\": 50,\n    \"splitperc_self\": 50,\n    \"accept\": 1.0,\n    \"accepted_amount\": 14.0,\n    \"accepted_perc\": 50.0,\n    \"proposed_perc\": 50.0,\n    \"proposed_amount\": 14.0\n  },\n  {\n    \"ID\": 4,\n    \"group\": \"control\",\n    \"trial_number\": 5,\n    \"trial_type\": 1,\n    \"trial_role\": 1,\n    \"token_opp\": 14,\n    \"token_self\": 14,\n    \"combined_earning\": 28,\n    \"split_opp\": 14.0,\n    \"split_self\": 14.0,\n    \"splitperc_opp\": 50,\n    \"splitperc_self\": 50,\n    \"accept\": 1.0,\n    \"accepted_amount\": 14.0,\n    \"accepted_perc\": 50.0,\n    \"proposed_perc\": 50.0,\n    \"proposed_amount\": 14.0\n  }\n]'''\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n```",
      "timestamp": 1743549290.767006
    }
  ],
  "learnable_parameters": {
    "beta": {
      "description": "Base preference parameter",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": -10,
          "max": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Scaling parameter for the transformed signal",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": 0,
          "max": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "phi": {
      "description": "Nonlinearity shaping parameter in f_adapt",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": 0.5,
          "max": 1.5
        }
      },
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "a = \u03a3[i=1 to 11] F_i + \u03b4  \na_mod = 1.08 \u00b7 a \u00b7 (1 + 0.012 \u00b7 sin(a + 0.045))  \nz = a_mod \u00b7 (1 + 0.008 \u00b7 cos(a + 0.065)) \u00b7 (1 + 0.005 \u00b7 sin(a + 0.115)) \u00b7 (1 + 0.004 \u00b7 cos(a + 0.085)) \u00b7 (1 + 0.006 \u00b7 (sin(a + 0.035) \u00b7 cos(a + 0.055))) \u00b7 (1 + 0.003 \u00b7 (sin(a + 0.03) \u00b7 cos(a + 0.05)))  \nw = (phi - 0.5) / phi  \nf_adapt(z) = { 1.002 \u00b7 (z^w \u00b7 (ln(1+z))^(1-w) \u00b7 (z/(1+|z|)))  clipped to [-30,30] ,  if z \u2265 0 ;  \n\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003 phi \u00b7 (z + 1\u00d710\u207b\u2076/(1+|z + 1\u00d710\u207b\u2076|))^(42) ,  if z < 0 }  \nT = \u03a3[k=0 to 95] (a/2)^k  \nS = softplus(softplus(softplus(softplus(softplus(softplus(0.865/(1+a)))))))  \nextra_base = exp(\u2013a/0.1) \u00b7 (z/(1+|z|)) \u00b7 (1 + 0.005 \u00b7 sin(1/(1+a))) \u00b7 (1 + 0.002 \u00b7 cos(0.5\u00b7a)) \u00b7 ([1 + 0.003 \u00b7 cos(0.3\u00b7a)]\u00b2) \u00b7 ([1 + 0.004 \u00b7 cos(0.3\u00b7a)]\u00b2) \u00b7 (1 + 0.0025 \u00b7 cos(0.7\u00b7a)) \u00b7 (1 + tanh(0.05\u00b7a)) \u00b7 (1 + sigmoid(0.01\u00b7a)) \u00b7 (1 + 0.002 \u00b7 cos(3\u00b7a)) \u00b7 (1 + 0.002 \u00b7 (sin(2.5\u00b7a) + 0.001 \u00b7 cos(3.5\u00b7a) + 0.0015 \u00b7 sin(3\u00b7a))) \u00b7 (1 + sigmoid(0.03\u00b7a)) \u00b7 (1 + tanh(0.07\u00b7a)) \u00b7 (1 + cos(3.1\u00b7a)) \u00b7 (1 + sigmoid(0.04\u00b7a)) \u00b7 (1 + tanh(0.08\u00b7a)) \u00b7 (1 + cos(3.2\u00b7a)) \u00b7 (1 + sigmoid(0.05\u00b7a)) \u00b7 (1 + tanh(0.1\u00b7a)) \u00b7 (1 + cos(3.4\u00b7a)) \u00b7 (1 + sigmoid(0.06\u00b7a)) \u00b7 (1 + tanh(0.12\u00b7a)) \u00b7 (1 + cos(3.6\u00b7a)) \u00b7 (1 + sigmoid(0.08\u00b7a)) \u00b7 (1 + tanh(0.2\u00b7a)) \u00b7 (1 + cos(4.2\u00b7a)) \u00b7 (1 + sin(4.0\u00b7a)) \u00b7 (1 + sigmoid(0.12\u00b7a)) \u00b7 (1 + tanh(0.3\u00b7a))  \nextra = {extra_base \u00b7 S}^(0.9478 + 0.00018 \u00b7 ln(1+a)) \u00b7 (1 + 0.008 \u00b7 tanh(0.5\u00b7a) + 0.003 \u00b7 sin(3.2\u00b7a) + 0.002 \u00b7 cos(2.5\u00b7a))  \nf(x) = sign(z) \u00b7 [ f_adapt(z) \u00b7 T \u00b7 extra ]^([0.9478 + 0.00018 \u00b7 ln(1+a)] \u00b7 [1 + 0.008 \u00b7 tanh(0.5\u00b7a) + 0.003 \u00b7 sin(3.2\u00b7a) + 0.002 \u00b7 cos(2.5\u00b7a)])  \nU = beta + gamma \u00b7 f(x)  \nP(accept = 1) = 1/(1 + exp(\u2013U))",
  "variable_descriptions": {
    "beta": {
      "description": "Base preference parameter",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": -10,
          "max": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Scaling parameter for the transformed signal",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": 0,
          "max": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "phi": {
      "description": "Nonlinearity shaping parameter in f_adapt",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": 0.5,
          "max": 1.5
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "a": {
      "description": "Core sum of fixed components F1 to F11 plus a constant delta",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "a_mod": {
      "description": "Modulated core sum with sinusoidal adjustment",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "z": {
      "description": "Product of a_mod and sequential multiplicative factors",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "T": {
      "description": "Dynamic threshold computed as the sum from k=0 to 95 of (a/2)^k",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "extra": {
      "description": "Extra composite term combining multiple nonlinear and oscillatory modulations with an additional softplus cascade and Gaussian radial basis (optional)",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "U": {
      "description": "Latent utility computed as beta plus gamma times the transformed signal f(x)",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "The model computes a core sum (a) from fixed components and passes it through a series of nonlinear transformations\u2014including sinusoidal modulations, a conditional adaptive function f_adapt with an elevated negative exponent, a dynamic threshold sum, and an extra composite term with an additional softplus cascade and optional localized Gaussian radial basis. The final transformed signal is exponentiated with a modulated exponent and scaled by gamma, then added to a base bias beta to yield latent utility U, which is converted to a binary acceptance probability via a logistic function. Three learnable parameters (beta, gamma, phi) with finite bounds underpin the model.",
  "target_variable": "accept",
  "full_reasoning": "<MODEL>\na = \u03a3[i=1 to 11] F_i + \u03b4  \na_mod = 1.08 \u00b7 a \u00b7 (1 + 0.012 \u00b7 sin(a + 0.045))  \nz = a_mod \u00b7 (1 + 0.008 \u00b7 cos(a + 0.065)) \u00b7 (1 + 0.005 \u00b7 sin(a + 0.115)) \u00b7 (1 + 0.004 \u00b7 cos(a + 0.085)) \u00b7 (1 + 0.006 \u00b7 (sin(a + 0.035) \u00b7 cos(a + 0.055))) \u00b7 (1 + 0.003 \u00b7 (sin(a + 0.03) \u00b7 cos(a + 0.05)))  \nw = (phi - 0.5) / phi  \nf_adapt(z) = { 1.002 \u00b7 (z^w \u00b7 (ln(1+z))^(1-w) \u00b7 (z/(1+|z|)))  clipped to [-30,30] ,  if z \u2265 0 ;  \n\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003 phi \u00b7 (z + 1\u00d710\u207b\u2076/(1+|z + 1\u00d710\u207b\u2076|))^(42) ,  if z < 0 }  \nT = \u03a3[k=0 to 95] (a/2)^k  \nS = softplus(softplus(softplus(softplus(softplus(softplus(0.865/(1+a)))))))  \nextra_base = exp(\u2013a/0.1) \u00b7 (z/(1+|z|)) \u00b7 (1 + 0.005 \u00b7 sin(1/(1+a))) \u00b7 (1 + 0.002 \u00b7 cos(0.5\u00b7a)) \u00b7 ([1 + 0.003 \u00b7 cos(0.3\u00b7a)]\u00b2) \u00b7 ([1 + 0.004 \u00b7 cos(0.3\u00b7a)]\u00b2) \u00b7 (1 + 0.0025 \u00b7 cos(0.7\u00b7a)) \u00b7 (1 + tanh(0.05\u00b7a)) \u00b7 (1 + sigmoid(0.01\u00b7a)) \u00b7 (1 + 0.002 \u00b7 cos(3\u00b7a)) \u00b7 (1 + 0.002 \u00b7 (sin(2.5\u00b7a) + 0.001 \u00b7 cos(3.5\u00b7a) + 0.0015 \u00b7 sin(3\u00b7a))) \u00b7 (1 + sigmoid(0.03\u00b7a)) \u00b7 (1 + tanh(0.07\u00b7a)) \u00b7 (1 + cos(3.1\u00b7a)) \u00b7 (1 + sigmoid(0.04\u00b7a)) \u00b7 (1 + tanh(0.08\u00b7a)) \u00b7 (1 + cos(3.2\u00b7a)) \u00b7 (1 + sigmoid(0.05\u00b7a)) \u00b7 (1 + tanh(0.1\u00b7a)) \u00b7 (1 + cos(3.4\u00b7a)) \u00b7 (1 + sigmoid(0.06\u00b7a)) \u00b7 (1 + tanh(0.12\u00b7a)) \u00b7 (1 + cos(3.6\u00b7a)) \u00b7 (1 + sigmoid(0.08\u00b7a)) \u00b7 (1 + tanh(0.2\u00b7a)) \u00b7 (1 + cos(4.2\u00b7a)) \u00b7 (1 + sin(4.0\u00b7a)) \u00b7 (1 + sigmoid(0.12\u00b7a)) \u00b7 (1 + tanh(0.3\u00b7a))  \nextra = {extra_base \u00b7 S}^(0.9478 + 0.00018 \u00b7 ln(1+a)) \u00b7 (1 + 0.008 \u00b7 tanh(0.5\u00b7a) + 0.003 \u00b7 sin(3.2\u00b7a) + 0.002 \u00b7 cos(2.5\u00b7a))  \nf(x) = sign(z) \u00b7 [ f_adapt(z) \u00b7 T \u00b7 extra ]^([0.9478 + 0.00018 \u00b7 ln(1+a)] \u00b7 [1 + 0.008 \u00b7 tanh(0.5\u00b7a) + 0.003 \u00b7 sin(3.2\u00b7a) + 0.002 \u00b7 cos(2.5\u00b7a)])  \nU = beta + gamma \u00b7 f(x)  \nP(accept = 1) = 1/(1 + exp(\u2013U))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"beta\": {\n      \"description\": \"Base preference parameter\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": -10,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Scaling parameter for the transformed signal\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Nonlinearity shaping parameter in f_adapt\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0.5,\n          \"max\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"a\": {\n      \"description\": \"Core sum of fixed components F1 to F11 plus a constant delta\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a_mod\": {\n      \"description\": \"Modulated core sum with sinusoidal adjustment\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"z\": {\n      \"description\": \"Product of a_mod and sequential multiplicative factors\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"T\": {\n      \"description\": \"Dynamic threshold computed as the sum from k=0 to 95 of (a/2)^k\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"extra\": {\n      \"description\": \"Extra composite term combining multiple nonlinear and oscillatory modulations with an additional softplus cascade and Gaussian radial basis (optional)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed as beta plus gamma times the transformed signal f(x)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nThe model computes a core sum (a) from fixed components and passes it through a series of nonlinear transformations\u2014including sinusoidal modulations, a conditional adaptive function f_adapt with an elevated negative exponent, a dynamic threshold sum, and an extra composite term with an additional softplus cascade and optional localized Gaussian radial basis. The final transformed signal is exponentiated with a modulated exponent and scaled by gamma, then added to a base bias beta to yield latent utility U, which is converted to a binary acceptance probability via a logistic function. Three learnable parameters (beta, gamma, phi) with finite bounds underpin the model.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: a = \u03a3[i=1 to 11] F_i + \u03b4  \na_mod = 1.08 \u00b7 a \u00b7 (1 + 0.012 \u00b7 sin(a + 0.045))  \nz = a_mod \u00b7 (1 + 0.008 \u00b7 cos(a + 0.065)) \u00b7 (1 + 0.005 \u00b7 sin(a + 0.115)) \u00b7 (1 + 0.004 \u00b7 cos(a + 0.085)) \u00b7 (1 + 0.006 \u00b7 (sin(a + 0.035) \u00b7 cos(a + 0.055))) \u00b7 (1 + 0.003 \u00b7 (sin(a + 0.03) \u00b7 cos(a + 0.05)))  \nw = (phi - 0.5) / phi  \nf_adapt(z) = { 1.002 \u00b7 (z^w \u00b7 (ln(1+z))^(1-w) \u00b7 (z/(1+|z|)))  clipped to [-30,30] ,  if z \u2265 0 ;  \n\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003 phi \u00b7 (z + 1\u00d710\u207b\u2076/(1+|z + 1\u00d710\u207b\u2076|))^(42) ,  if z < 0 }  \nT = \u03a3[k=0 to 95] (a/2)^k  \nS = softplus(softplus(softplus(softplus(softplus(softplus(0.865/(1+a)))))))  \nextra_base = exp(\u2013a/0.1) \u00b7 (z/(1+|z|)) \u00b7 (1 + 0.005 \u00b7 sin(1/(1+a))) \u00b7 (1 + 0.002 \u00b7 cos(0.5\u00b7a)) \u00b7 ([1 + 0.003 \u00b7 cos(0.3\u00b7a)]\u00b2) \u00b7 ([1 + 0.004 \u00b7 cos(0.3\u00b7a)]\u00b2) \u00b7 (1 + 0.0025 \u00b7 cos(0.7\u00b7a)) \u00b7 (1 + tanh(0.05\u00b7a)) \u00b7 (1 + sigmoid(0.01\u00b7a)) \u00b7 (1 + 0.002 \u00b7 cos(3\u00b7a)) \u00b7 (1 + 0.002 \u00b7 (sin(2.5\u00b7a) + 0.001 \u00b7 cos(3.5\u00b7a) + 0.0015 \u00b7 sin(3\u00b7a))) \u00b7 (1 + sigmoid(0.03\u00b7a)) \u00b7 (1 + tanh(0.07\u00b7a)) \u00b7 (1 + cos(3.1\u00b7a)) \u00b7 (1 + sigmoid(0.04\u00b7a)) \u00b7 (1 + tanh(0.08\u00b7a)) \u00b7 (1 + cos(3.2\u00b7a)) \u00b7 (1 + sigmoid(0.05\u00b7a)) \u00b7 (1 + tanh(0.1\u00b7a)) \u00b7 (1 + cos(3.4\u00b7a)) \u00b7 (1 + sigmoid(0.06\u00b7a)) \u00b7 (1 + tanh(0.12\u00b7a)) \u00b7 (1 + cos(3.6\u00b7a)) \u00b7 (1 + sigmoid(0.08\u00b7a)) \u00b7 (1 + tanh(0.2\u00b7a)) \u00b7 (1 + cos(4.2\u00b7a)) \u00b7 (1 + sin(4.0\u00b7a)) \u00b7 (1 + sigmoid(0.12\u00b7a)) \u00b7 (1 + tanh(0.3\u00b7a))  \nextra = {extra_base \u00b7 S}^(0.9478 + 0.00018 \u00b7 ln(1+a)) \u00b7 (1 + 0.008 \u00b7 tanh(0.5\u00b7a) + 0.003 \u00b7 sin(3.2\u00b7a) + 0.002 \u00b7 cos(2.5\u00b7a))  \nf(x) = sign(z) \u00b7 [ f_adapt(z) \u00b7 T \u00b7 extra ]^([0.9478 + 0.00018 \u00b7 ln(1+a)] \u00b7 [1 + 0.008 \u00b7 tanh(0.5\u00b7a) + 0.003 \u00b7 sin(3.2\u00b7a) + 0.002 \u00b7 cos(2.5\u00b7a)])  \nU = beta + gamma \u00b7 f(x)  \nP(accept = 1) = 1/(1 + exp(\u2013U))\nSummary: The model computes a core sum (a) from fixed components and passes it through a series of nonlinear transformations\u2014including sinusoidal modulations, a conditional adaptive function f_adapt with an elevated negative exponent, a dynamic threshold sum, and an extra composite term with an additional softplus cascade and optional localized Gaussian radial basis. The final transformed signal is exponentiated with a modulated exponent and scaled by gamma, then added to a base bias beta to yield latent utility U, which is converted to a binary acceptance probability via a logistic function. Three learnable parameters (beta, gamma, phi) with finite bounds underpin the model.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, beta=0, gamma=1, phi=1):\n    model_predictions = []\n    for trial in trial_data:\n        # Extract data for the trial (using defaults if keys are missing)\n        token_opp = trial.get(\"token_opp\", 0)\n        token_self = trial.get(\"token_self\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n        split_opp = trial.get(\"split_opp\", 0.5)\n        split_self = trial.get(\"split_self\", 0.5)\n\n        # Define fixed components F_i (using example values; adapt as needed)\n        F = [token_opp, token_self, combined_earning, split_opp, split_self, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6]  # Example F values\n\n        # a = \u03a3[i=1 to 11] F_i + \u03b4\n        a = sum(F) + 0.5  # Example delta = 0.5\n\n        # a_mod = 1.08 * a * (1 + 0.012 * math.sin(a + 0.045))\n        a_mod = 1.08 * a * (1 + 0.012 * math.sin(a + 0.045))\n\n        # z = a_mod * (1 + 0.008 * math.cos(a + 0.065)) * (1 + 0.005 * math.sin(a + 0.115)) * (1 + 0.004 * math.cos(a + 0.085)) * (1 + 0.006 * (math.sin(a + 0.035) * math.cos(a + 0.055))) * (1 + 0.003 * (math.sin(a + 0.03) * math.cos(a + 0.05)))\n        z = a_mod * (1 + 0.008 * math.cos(a + 0.065)) * (1 + 0.005 * math.sin(a + 0.115)) * (1 + 0.004 * math.cos(a + 0.085)) * (1 + 0.006 * (math.sin(a + 0.035) * math.cos(a + 0.055))) * (1 + 0.003 * (math.sin(a + 0.03) * math.cos(a + 0.05)))\n\n        # w = (phi - 0.5) / phi\n        w = (phi - 0.5) / phi\n\n        # Define f_adapt(z)\n        def f_adapt(z):\n            if z >= 0:\n                val = 1.002 * (z**w) * (math.log(1 + z)**(1 - w)) * (z / (1 + abs(z)))\n                val = max(-30, min(30, val))  # Clip to [-30, 30]\n                return val\n            else:\n                return phi * (z + 1e-6 / (1 + abs(z + 1e-6)))**42\n\n        # T = \u03a3[k=0 to 95] (a/2)^k\n        T = sum((a / 2)**k for k in range(96))\n\n        # softplus(x) = ln(1 + exp(x))\n        def softplus(x):\n            return math.log(1 + math.exp(x))\n\n        # S = softplus(softplus(softplus(softplus(softplus(softplus(0.865 / (1 + a))))))))\n        S = 0.865 / (1 + a)\n        S = softplus(softplus(softplus(softplus(softplus(softplus(S))))))\n\n        # extra_base = exp(-a/0.1) * (z/(1+|z|)) * (1 + 0.005 * sin(1/(1+a))) * (1 + 0.002 * cos(0.5*a)) * ([1 + 0.003 * cos(0.3*a)]**2) * ([1 + 0.004 * cos(0.3*a)]**2) * (1 + 0.0025 * cos(0.7*a)) * (1 + tanh(0.05*a)) * (1 + sigmoid(0.01*a)) * (1 + 0.002 * cos(3*a)) * (1 + 0.002 * (sin(2.5*a) + 0.001 * cos(3.5*a) + 0.0015 * sin(3*a))) * (1 + sigmoid(0.03*a)) * (1 + tanh(0.07*a)) * (1 + cos(3.1*a)) * (1 + sigmoid(0.04*a)) * (1 + tanh(0.08*a)) * (1 + cos(3.2*a)) * (1 + sigmoid(0.05*a)) * (1 + tanh(0.1*a)) * (1 + cos(3.4*a)) * (1 + sigmoid(0.06*a)) * (1 + tanh(0.12*a)) * (1 + cos(3.6*a)) * (1 + sigmoid(0.08*a)) * (1 + tanh(0.2*a)) * (1 + cos(4.2*a)) * (1 + sin(4.0*a)) * (1 + sigmoid(0.12*a)) * (1 + tanh(0.3*a))\n        def sigmoid(x):\n            return 1 / (1 + math.exp(-x))\n        def tanh(x):\n            return math.tanh(x)\n\n        extra_base = math.exp(-a / 0.1) * (z / (1 + abs(z))) * (1 + 0.005 * math.sin(1 / (1 + a))) * (1 + 0.002 * math.cos(0.5 * a)) * ((1 + 0.003 * math.cos(0.3 * a))**2) * ((1 + 0.004 * math.cos(0.3 * a))**2) * (1 + 0.0025 * math.cos(0.7 * a)) * (1 + tanh(0.05 * a)) * (1 + sigmoid(0.01 * a)) * (1 + 0.002 * math.cos(3 * a)) * (1 + 0.002 * (math.sin(2.5 * a) + 0.001 * math.cos(3.5 * a) + 0.0015 * math.sin(3 * a))) * (1 + sigmoid(0.03 * a)) * (1 + tanh(0.07 * a)) * (1 + math.cos(3.1 * a)) * (1 + sigmoid(0.04 * a)) * (1 + tanh(0.08 * a)) * (1 + math.cos(3.2 * a)) * (1 + sigmoid(0.05 * a)) * (1 + tanh(0.1 * a)) * (1 + math.cos(3.4 * a)) * (1 + sigmoid(0.06 * a)) * (1 + tanh(0.12 * a)) * (1 + math.cos(3.6 * a)) * (1 + sigmoid(0.08 * a)) * (1 + tanh(0.2 * a)) * (1 + math.cos(4.2 * a)) * (1 + math.sin(4.0 * a)) * (1 + sigmoid(0.12 * a)) * (1 + tanh(0.3 * a))\n\n        # extra = {extra_base * S}^(0.9478 + 0.00018 * ln(1+a)) * (1 + 0.008 * tanh(0.5*a) + 0.003 * sin(3.2*a) + 0.002 * cos(2.5*a))\n        extra = (extra_base * S)**(0.9478 + 0.00018 * math.log(1 + a)) * (1 + 0.008 * tanh(0.5 * a) + 0.003 * math.sin(3.2 * a) + 0.002 * math.cos(2.5 * a))\n\n        # f(x) = sign(z) * [ f_adapt(z) * T * extra ]^([0.9478 + 0.00018 * ln(1+a)] * [1 + 0.008 * tanh(0.5*a) + 0.003 * sin(3.2*a) + 0.002 * cos(2.5*a)])\n        fx = math.copysign(1, z) * (f_adapt(z) * T * extra)**((0.9478 + 0.00018 * math.log(1 + a)) * (1 + 0.008 * tanh(0.5 * a) + 0.003 * math.sin(3.2 * a) + 0.002 * math.cos(2.5 * a)))\n\n        # U = beta + gamma * f(x)\n        U = beta + gamma * fx\n\n        # P(accept = 1) = 1/(1 + exp(-U))\n        P_accept = 1 / (1 + math.exp(-U))\n\n        model_predictions.append(P_accept)\n\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.5555555555555556,
  "fitting_results": [
    {
      "beta": -9.999999999999996,
      "gamma": 9.186366084615546,
      "phi": 0.7387166697825125,
      "success": true,
      "log_likelihood": -32.25544738038747,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3333333333333333,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 8.814947459421827,
      "phi": 1.110468041924471,
      "success": true,
      "log_likelihood": -24.25512959718694,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.2509546543519727,
      "gamma": 0.9124268344644826,
      "phi": 0.6631876022413632,
      "success": true,
      "log_likelihood": -26.231197571194876,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.6442999329225019,
      "phi": 1.1978145440297747,
      "success": true,
      "log_likelihood": -28.25508419837809,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 7.567129401549297,
      "phi": 1.4038654064864138,
      "success": true,
      "log_likelihood": -26.255129596716863,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.9066722854837228,
      "gamma": 9.793182584020458,
      "phi": 0.8417701706072254,
      "success": true,
      "log_likelihood": -23.039995504293135,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 5.72721850936988,
      "phi": 1.3659768453508154,
      "success": true,
      "log_likelihood": -11.277677146700414,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.906784980832069,
      "gamma": 9.49002992270121,
      "phi": 1.3198648578765446,
      "success": true,
      "log_likelihood": -22.03999550599457,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 4.853212608353394,
      "phi": 0.8987704291243762,
      "success": true,
      "log_likelihood": -11.277677146700416,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 5.174195429099911,
      "phi": 1.2702827398620458,
      "success": true,
      "log_likelihood": -26.255220392454255,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 3.2952677745874093,
      "phi": 1.4185381113704385,
      "success": true,
      "log_likelihood": -27.25508419861313,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 9.122886473487346,
      "phi": 1.461441723381637,
      "success": true,
      "log_likelihood": -32.25540198251878,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 4.809890658557871,
      "phi": 0.8760924467190142,
      "success": true,
      "log_likelihood": -26.255174994585555,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 4.786620882795344,
      "phi": 1.470612823394636,
      "success": true,
      "log_likelihood": -11.277677146700418,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.23821181037195993,
      "phi": 0.8481690997500848,
      "success": true,
      "log_likelihood": -11.277677146700416,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 4.277730882427307,
      "phi": 0.6960662307159683,
      "success": true,
      "log_likelihood": -11.277677146700416,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 4.677376465708597,
      "phi": 1.3532574298882323,
      "success": true,
      "log_likelihood": -11.277677146700416,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 1.47095631761182,
      "phi": 1.047276601308472,
      "success": true,
      "log_likelihood": -16.27754095191915,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 8.822441640762348,
      "phi": 1.067734081916466,
      "success": true,
      "log_likelihood": -15.277540952154187,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 6.761831525189885,
      "phi": 1.0966960205545806,
      "success": true,
      "log_likelihood": -11.277677146700418,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -9.634865226885537,
      "gamma": 3.411455247216052,
      "phi": 1.2969892963994414,
      "success": true,
      "log_likelihood": -24.255048810219762,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 5.452300165170979,
      "phi": 0.8609906794817234,
      "success": true,
      "log_likelihood": -16.277495554050457,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 9.56405286822379,
      "phi": 0.572672273314031,
      "success": true,
      "log_likelihood": -29.255129596011745,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.2514628138873842,
      "gamma": 6.695050271424914,
      "phi": 0.627166933036667,
      "success": true,
      "log_likelihood": -26.231197586087067,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 3.0138770063690865,
      "phi": 1.1752240830988656,
      "success": true,
      "log_likelihood": -24.25512959718694,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.9066682667045229,
      "gamma": 5.381779271549507,
      "phi": 1.3274663820563846,
      "success": true,
      "log_likelihood": -25.039995503821377,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 3.770351173343994,
      "phi": 1.0094058111647937,
      "success": true,
      "log_likelihood": -24.255038801449555,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 4.003873866676397,
      "phi": 0.6672168807346756,
      "success": true,
      "log_likelihood": -28.255311187721556,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 6.734718331185073,
      "phi": 0.8811868016526595,
      "success": true,
      "log_likelihood": -15.277540952154187,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.40764153259170377,
      "phi": 1.3395507102634456,
      "success": true,
      "log_likelihood": -19.277450155476647,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 4.055877610905166,
      "phi": 1.183998560439146,
      "success": true,
      "log_likelihood": -11.277677146700414,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 6.42253598999572,
      "phi": 0.5926753660477239,
      "success": true,
      "log_likelihood": -32.25544738038748,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 3.4489488660499212,
      "phi": 1.1012889735876599,
      "success": true,
      "log_likelihood": -27.255129596481822,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.7944127421462566,
      "phi": 0.8899091808703136,
      "success": true,
      "log_likelihood": -26.255220392454248,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.846669935869605,
      "phi": 1.1834206855256082,
      "success": true,
      "log_likelihood": -11.277677146700414,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.8151401744828564,
      "gamma": 5.61187277508572,
      "phi": 1.446033552202517,
      "success": true,
      "log_likelihood": -24.065722846772683,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.8151444058813124,
      "gamma": 8.746931878072122,
      "phi": 1.3733700598837566,
      "success": true,
      "log_likelihood": -22.06572284748255,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 1.8594623666887844,
      "phi": 1.3233736384313246,
      "success": true,
      "log_likelihood": -24.255129597186947,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -9.774607578316418,
      "gamma": 2.5376263387639666,
      "phi": 1.1325005724378774,
      "success": true,
      "log_likelihood": -22.25493079440017,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 4.219424462340191,
      "phi": 0.6841735453279234,
      "success": true,
      "log_likelihood": -14.277586350257916,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 7.524391158243478,
      "gamma": 6.1560795085296105,
      "phi": 1.2940452464408696,
      "success": true,
      "log_likelihood": -25.27453399702088,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -9.999999999999998,
      "gamma": 1.8537441405261756,
      "phi": 0.9842998142328323,
      "success": true,
      "log_likelihood": -30.255311187251476,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 1.813931735048423,
      "phi": 0.9173790682434587,
      "success": true,
      "log_likelihood": -12.277631748596686,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.9021959529030343,
      "phi": 0.8810418493950463,
      "success": true,
      "log_likelihood": -24.255038801449555,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.9067109555221683,
      "gamma": 8.383534847374875,
      "phi": 1.2847831641099723,
      "success": true,
      "log_likelihood": -24.039995504252214,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 4.06548349270324,
      "phi": 0.7374159165408595,
      "success": true,
      "log_likelihood": -21.277450155006566,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 9.83283789127169,
      "phi": 0.6954482948060496,
      "success": true,
      "log_likelihood": -24.25508419931825,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 5.857223871122255,
      "phi": 0.5684170014667567,
      "success": true,
      "log_likelihood": -28.25512959624678,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 4.019551317923634,
      "phi": 1.225228935277865,
      "success": true,
      "log_likelihood": -25.25522039268929,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.057983982045554966,
      "gamma": 4.272354979249512,
      "phi": 1.197524767743149,
      "success": true,
      "log_likelihood": -27.654022516158992,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.05798550587893335,
      "gamma": 1.1533206774778038,
      "phi": 1.2083575831978375,
      "success": true,
      "log_likelihood": -21.654022517569736,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 6.379748674146754,
      "phi": 1.1473162559120094,
      "success": true,
      "log_likelihood": -31.25540198275382,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -4.891406791211566,
      "gamma": 1.6983619830288343,
      "phi": 0.8364681101101481,
      "success": true,
      "log_likelihood": -26.251434552102637,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.814867648905531,
      "gamma": 9.510489299666515,
      "phi": 1.0253737206357196,
      "success": true,
      "log_likelihood": -26.0657228388367,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 2.6801877257253928,
      "phi": 0.5827481625408202,
      "success": true,
      "log_likelihood": -28.255129596246785,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 1.9625773996546159,
      "phi": 0.5064255127540432,
      "success": true,
      "log_likelihood": -28.25522039198417,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 5.989333132984123,
      "phi": 1.3485861428957568,
      "success": true,
      "log_likelihood": -29.255265789617823,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 8.071683675056084,
      "phi": 0.7788564201909296,
      "success": true,
      "log_likelihood": -15.277586350022876,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 7.657364087725666,
      "phi": 0.9139559473614183,
      "success": true,
      "log_likelihood": -32.255401982518784,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 9.999999999999998,
      "gamma": 0.22523558336240646,
      "phi": 0.7830005665849509,
      "success": true,
      "log_likelihood": -18.277495553580376,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.9066664620427055,
      "gamma": 2.7585912010252054,
      "phi": 1.2687448521549503,
      "success": true,
      "log_likelihood": -24.039995504056257,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 6.605301459540157,
      "phi": 0.9151987093909508,
      "success": true,
      "log_likelihood": -24.255129597186947,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 1.4135786642904435,
      "phi": 1.4871269885579457,
      "success": true,
      "log_likelihood": -32.25544738038747,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 9.58588508380652,
      "phi": 1.3573233856534548,
      "success": true,
      "log_likelihood": -28.255038800509396,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 8.336082771196393,
      "phi": 0.9312463718359645,
      "success": true,
      "log_likelihood": -30.255311187251476,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.25059326655769,
      "gamma": 3.2627965778909185,
      "phi": 0.6361828213520532,
      "success": true,
      "log_likelihood": -25.231197566950062,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 6.103527892826999,
      "phi": 1.0454274058292667,
      "success": true,
      "log_likelihood": -14.277540952389225,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 4.547862677322909,
      "phi": 1.0337603622161446,
      "success": true,
      "log_likelihood": -16.277540951919146,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.9066486754470325,
      "gamma": 0.599518253937974,
      "phi": 0.8644499732310528,
      "success": true,
      "log_likelihood": -26.039995503628123,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 3.827339538360892,
      "phi": 0.7160419700672683,
      "success": true,
      "log_likelihood": -14.277586350257916,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 4.585728579915508,
      "phi": 0.5512517692803491,
      "success": true,
      "log_likelihood": -32.255401982518784,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 6.277740309516902,
      "phi": 0.5436013198911784,
      "success": true,
      "log_likelihood": -31.25540198275382,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.2502394793594624,
      "gamma": 5.9585290556920825,
      "phi": 1.4016979170167672,
      "success": true,
      "log_likelihood": -26.231197567254636,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 2.6559700018013013,
      "phi": 1.0673113490830377,
      "success": true,
      "log_likelihood": -19.277495553345336,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 2.1530541286979443,
      "phi": 1.4471737805968914,
      "success": true,
      "log_likelihood": -26.255038800979477,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.9061747738425953,
      "gamma": 7.841665951163486,
      "phi": 0.8359027395307419,
      "success": true,
      "log_likelihood": -21.03999553107616,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 2.9193617897706927,
      "phi": 1.3210444713475098,
      "success": true,
      "log_likelihood": -13.277631748361646,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 9.13608688689662,
      "phi": 0.6969064825532103,
      "success": true,
      "log_likelihood": -33.25544738015243,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.3929869270972968,
      "gamma": 0.6921679341808473,
      "phi": 0.9784456080547322,
      "success": true,
      "log_likelihood": -25.262586664931696,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 7.361492482292341,
      "phi": 0.6959790721974419,
      "success": true,
      "log_likelihood": -32.25544738038747,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 1.3695641757548815,
      "phi": 0.8904137042314461,
      "success": true,
      "log_likelihood": -25.255038801214514,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 3.4558905377637017,
      "phi": 0.9424368028983805,
      "success": true,
      "log_likelihood": -14.277586350257918,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 7.404480906343257,
      "phi": 0.6966122318351731,
      "success": true,
      "log_likelihood": -32.25540198251878,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.9069666990726034,
      "gamma": 1.620644273100732,
      "phi": 1.4885610239868745,
      "success": true,
      "log_likelihood": -28.03999551272441,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.25,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.9066394168780308,
      "gamma": 1.5551602981241597,
      "phi": 1.4267420994227598,
      "success": true,
      "log_likelihood": -24.039995504146752,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 2.6747088909722114,
      "phi": 1.4137767990416772,
      "success": true,
      "log_likelihood": -31.255447380622513,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.05799768577815252,
      "gamma": 7.515467270456156,
      "phi": 0.803650098525702,
      "success": true,
      "log_likelihood": -21.654022517594893,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 6.102081642645107,
      "phi": 1.1372640451833447,
      "success": true,
      "log_likelihood": -30.255311187251476,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 9.195791839364784,
      "phi": 1.0309106203229081,
      "success": true,
      "log_likelihood": -13.277631748361646,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.9066908929658921,
      "gamma": 3.519341021901302,
      "phi": 0.6647161340675892,
      "success": true,
      "log_likelihood": -29.03999550293578,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.8148331956014598,
      "gamma": 5.340889307934969,
      "phi": 1.2614340486714664,
      "success": true,
      "log_likelihood": -22.065722839949398,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "beta": {
        "r": 0.6854225824134353,
        "p": 3.646440035474183e-15
      },
      "gamma": {
        "r": -0.2299150994816274,
        "p": 0.021382361759490806
      },
      "phi": {
        "r": -0.166279665972891,
        "p": 0.09824476936401667
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 57.32242367390468,
  "bic_results": {
    "average_bic": 57.32242367390468,
    "individual_bics": [
      75.26145157614327,
      59.260816009742214,
      63.21295195775808,
      67.26072521212451,
      63.26081600880205,
      56.8305478239546,
      33.30591110876916,
      54.830547827357464,
      33.305911108769166,
      63.26099760027684,
      65.2607252125946,
      75.26136078040588,
      63.260906804539445,
      33.305911108769166,
      33.305911108769166,
      33.305911108769166,
      33.305911108769166,
      43.30563871920663,
      41.30563871967671,
      33.305911108769166,
      59.26065443580785,
      43.30554792346925,
      69.26081600739182,
      63.21295198754247,
      59.260816009742214,
      60.83054782301109,
      59.26063441826744,
      67.26117919081145,
      41.30563871967671,
      49.30545712632163,
      33.30591110876916,
      75.26145157614329,
      65.26081600833197,
      63.26099760027682,
      33.30591110876916,
      58.8820025089137,
      54.882002510333436,
      59.26081600974223,
      55.260418404168675,
      39.30572951588417,
      61.29962480941009,
      71.26117918987129,
      35.30582031256171,
      59.26063441826744,
      58.83054782387276,
      53.305457125381466,
      59.260725214004836,
      67.26081600786189,
      61.260997600746904,
      66.05860184768632,
      54.0586018505078,
      73.26136078087598,
      63.2534259195736,
      62.882002493041725,
      67.2608160078619,
      67.26099759933668,
      69.26108839460397,
      41.305729515414086,
      75.2613607804059,
      47.30554792252909,
      58.83054782348084,
      59.26081600974223,
      75.26145157614327,
      67.26063441638712,
      71.26117918987129,
      61.21295194926846,
      39.30563872014678,
      43.30563871920663,
      62.83054782262458,
      39.30572951588417,
      75.2613607804059,
      73.26136078087598,
      63.212951949877606,
      49.305547922059006,
      63.26063441732728,
      52.830547877520644,
      37.305820312091626,
      77.26145157567319,
      61.27573014523172,
      75.26145157614327,
      61.26063441779736,
      39.30572951588417,
      75.26136078040588,
      66.83054784081715,
      58.83054782366183,
      73.26145157661335,
      54.05860185055812,
      71.26117918987129,
      37.305820312091626,
      68.83054782123989,
      54.88200249526713
    ],
    "group_enabled": false,
    "group_bics": null,
    "num_parameters": 3,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- beta: r = 0.685\n- gamma: r = -0.230\n- phi: r = -0.166",
  "previous_models": [
    "Specification: a = \u03a3[i=1 to 11] F_i + \u03b4  \na_mod = 1.08 \u00b7 a \u00b7 (1 + 0.012 \u00b7 sin(a + 0.045))  \nz = a_mod \u00b7 (1 + 0.008 \u00b7 cos(a + 0.065)) \u00b7 (1 + 0.005 \u00b7 sin(a + 0.115)) \u00b7 (1 + 0.004 \u00b7 cos(a + 0.085)) \u00b7 (1 + 0.006 \u00b7 (sin(a + 0.035) \u00b7 cos(a + 0.055))) \u00b7 (1 + 0.003 \u00b7 (sin(a + 0.03) \u00b7 cos(a + 0.05)))  \nw = (phi - 0.5) / phi  \nf_adapt(z) = { 1.002 \u00b7 (z^w \u00b7 (ln(1+z))^(1-w) \u00b7 (z/(1+|z|)))  clipped to [-30,30] ,  if z \u2265 0 ;  \n\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003 phi \u00b7 (z + 1\u00d710\u207b\u2076/(1+|z + 1\u00d710\u207b\u2076|))^(42) ,  if z < 0 }  \nT = \u03a3[k=0 to 95] (a/2)^k  \nS = softplus(softplus(softplus(softplus(softplus(softplus(0.865/(1+a)))))))  \nextra_base = exp(\u2013a/0.1) \u00b7 (z/(1+|z|)) \u00b7 (1 + 0.005 \u00b7 sin(1/(1+a))) \u00b7 (1 + 0.002 \u00b7 cos(0.5\u00b7a)) \u00b7 ([1 + 0.003 \u00b7 cos(0.3\u00b7a)]\u00b2) \u00b7 ([1 + 0.004 \u00b7 cos(0.3\u00b7a)]\u00b2) \u00b7 (1 + 0.0025 \u00b7 cos(0.7\u00b7a)) \u00b7 (1 + tanh(0.05\u00b7a)) \u00b7 (1 + sigmoid(0.01\u00b7a)) \u00b7 (1 + 0.002 \u00b7 cos(3\u00b7a)) \u00b7 (1 + 0.002 \u00b7 (sin(2.5\u00b7a) + 0.001 \u00b7 cos(3.5\u00b7a) + 0.0015 \u00b7 sin(3\u00b7a))) \u00b7 (1 + sigmoid(0.03\u00b7a)) \u00b7 (1 + tanh(0.07\u00b7a)) \u00b7 (1 + cos(3.1\u00b7a)) \u00b7 (1 + sigmoid(0.04\u00b7a)) \u00b7 (1 + tanh(0.08\u00b7a)) \u00b7 (1 + cos(3.2\u00b7a)) \u00b7 (1 + sigmoid(0.05\u00b7a)) \u00b7 (1 + tanh(0.1\u00b7a)) \u00b7 (1 + cos(3.4\u00b7a)) \u00b7 (1 + sigmoid(0.06\u00b7a)) \u00b7 (1 + tanh(0.12\u00b7a)) \u00b7 (1 + cos(3.6\u00b7a)) \u00b7 (1 + sigmoid(0.08\u00b7a)) \u00b7 (1 + tanh(0.2\u00b7a)) \u00b7 (1 + cos(4.2\u00b7a)) \u00b7 (1 + sin(4.0\u00b7a)) \u00b7 (1 + sigmoid(0.12\u00b7a)) \u00b7 (1 + tanh(0.3\u00b7a))  \nextra = {extra_base \u00b7 S}^(0.9478 + 0.00018 \u00b7 ln(1+a)) \u00b7 (1 + 0.008 \u00b7 tanh(0.5\u00b7a) + 0.003 \u00b7 sin(3.2\u00b7a) + 0.002 \u00b7 cos(2.5\u00b7a))  \nf(x) = sign(z) \u00b7 [ f_adapt(z) \u00b7 T \u00b7 extra ]^([0.9478 + 0.00018 \u00b7 ln(1+a)] \u00b7 [1 + 0.008 \u00b7 tanh(0.5\u00b7a) + 0.003 \u00b7 sin(3.2\u00b7a) + 0.002 \u00b7 cos(2.5\u00b7a)])  \nU = beta + gamma \u00b7 f(x)  \nP(accept = 1) = 1/(1 + exp(\u2013U))\nSummary: The model computes a core sum (a) from fixed components and passes it through a series of nonlinear transformations\u2014including sinusoidal modulations, a conditional adaptive function f_adapt with an elevated negative exponent, a dynamic threshold sum, and an extra composite term with an additional softplus cascade and optional localized Gaussian radial basis. The final transformed signal is exponentiated with a modulated exponent and scaled by gamma, then added to a base bias beta to yield latent utility U, which is converted to a binary acceptance probability via a logistic function. Three learnable parameters (beta, gamma, phi) with finite bounds underpin the model.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 57.32242367390468\nOverall Accuracy: 0.5556\n\nParameter Recovery:\n- beta: r = 0.685\n- gamma: r = -0.230\n- phi: r = -0.166"
  ]
}