{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "<think>\nFor run 157, further refine the model by amplifying the penalty for highly unfair (extreme negative) proposals and by adding additional nonlinear and oscillatory modulations to capture subtle patterns. Specifically, increase the negative\u2010branch exponent in f_adapt from 42 to 44. In the extra composite term, add two new multiplicative factors: one equal to [1 + sigmoid(0.14\u00d7a)] and another equal to [1 + tanh(0.35\u00d7a)], and also include an additional oscillatory factor [1 + sin(4.2\u00d7a)]. Furthermore, nest one additional softplus layer so that softplus is applied seven times in succession instead of six. Extend the dynamic threshold T by summing from k = 0 to 100. Finally, adjust the final exponent modulation by multiplying it by an extra factor [1 + 0.009\u00d7tanh(0.5\u00d7a) + 0.004\u00d7sin(3.5\u00d7a) + 0.003\u00d7cos(2.7\u00d7a) + 0.002\u00d7sin(4.0\u00d7a)], and consider also multiplying the extra composite term by a small Gaussian radial basis function, e.g. exp(\u2013((a\u20131)\u00b2)/(2\u00d70.25\u00b2)), to capture any localized effects. These modifications should encourage a steeper, more flexible penalty for extreme unfairness and allow the model to pick up additional cyclic or localized interactions for improved accuracy, lower BIC, and better parameter recovery.\n</think>\n\nNew Instructions for Run 157:\n1. Compute the core sum a as the sum of fixed components F\u2081,\u2026,F\u2081\u2081 plus a small constant \u03b4.\n2. Define a_mod = 1.08 \u00d7 a \u00d7 [1 + 0.012 \u00d7 sin(a + 0.045)].\n3. Multiply a_mod sequentially by:\n\u2003\u2003\u2022 [1 + 0.008 \u00d7 cos(a + 0.065)]\n\u2003\u2003\u2022 [1 + 0.005 \u00d7 sin(a + 0.115)]\n\u2003\u2003\u2022 [1 + 0.004 \u00d7 cos(a + 0.085)]\n\u2003\u2003\u2022 [1 + 0.006 \u00d7 (sin(a + 0.035) \u00d7 cos(a + 0.055))]\n\u2003\u2003\u2022 [1 + 0.003 \u00d7 (sin(a + 0.03) \u00d7 cos(a + 0.05))]\nLet z denote the resulting product.\n4. Compute w = (phi \u2212 0.5) / phi.\n\u2003\u2003\u2022 For z \u2265 0, define f_adapt(z) = clip[1.002 \u00d7 (z^w \u00d7 (ln(1+z))^(1\u2212w) \u00d7 softsign(z)), \u221230, 30], with softsign(x) = x/(1+|x|).\n\u2003\u2003\u2022 For z < 0, set f_adapt(z) = phi \u00d7 [softsign(z + \u0394_shift)]^(44), with \u0394_shift = 1\u00d710\u207b\u2076.\n5. Define the dynamic threshold T as the sum from k = 0 to 100 of (a^k \u00d7 (\u00bd)^k).\n6. Define the extra composite term extra as the product of:\n\u2003\u2003\u2022 exp(\u2013a/0.1)\n\u2003\u2003\u2022 [z/(1 + |z|)]\n\u2003\u2003\u2022 [1 + 0.005 \u00d7 sin(1/(1+a))]\n\u2003\u2003\u2022 [1 + 0.002 \u00d7 cos(0.5\u00d7a)]\n\u2003\u2003\u2022 ([1 + 0.003 \u00d7 cos(0.3\u00d7a)]\u00b2)\n\u2003\u2003\u2022 ([1 + 0.004 \u00d7 cos(0.3\u00d7a)]\u00b2)\n\u2003\u2003\u2022 [1 + 0.0025 \u00d7 cos(0.7\u00d7a)]\n\u2003\u2003\u2022 [1 + tanh(0.05\u00d7a)]\n\u2003\u2003\u2022 [1 + sigmoid(0.01\u00d7a)]\n\u2003\u2003\u2022 [1 + 0.002 \u00d7 cos(3\u00d7a)]\n\u2003\u2003\u2022 [1 + 0.002 \u00d7 (sin(2.5\u00d7a) + 0.001 \u00d7 cos(3.5\u00d7a) + 0.0015 \u00d7 sin(3\u00d7a))]\n\u2003\u2003\u2022 [1 + sigmoid(0.03\u00d7a)]\n\u2003\u2003\u2022 [1 + tanh(0.07\u00d7a)]\n\u2003\u2003\u2022 [1 + cos(3.1\u00d7a)]\n\u2003\u2003\u2022 [1 + sigmoid(0.04\u00d7a)]\n\u2003\u2003\u2022 [1 + tanh(0.08\u00d7a)]\n\u2003\u2003\u2022 [1 + cos(3.2\u00d7a)]\n\u2003\u2003\u2022 [1 + sigmoid(0.05\u00d7a)]\n\u2003\u2003\u2022 [1 + tanh(0.1\u00d7a)]\n\u2003\u2003\u2022 [1 + cos(3.4\u00d7a)]\n\u2003\u2003\u2022 [1 + sigmoid(0.06\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new)\\n\u2003\u2003\u2022 [1 + tanh(0.12\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new)\\n\u2003\u2003\u2022 [1 + cos(3.6\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new)\\n\u2003\u2003\u2022 [1 + sigmoid(0.08\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new)\\n\u2003\u2003\u2022 [1 + tanh(0.2\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new)\\n\u2003\u2003\u2022 [1 + cos(4.2\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new)\\n\u2003\u2003\u2022 [1 + sin(4.0\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new)\\n\u2003\u2003\u2022 [1 + sigmoid(0.12\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new)\\n\u2003\u2003\u2022 [1 + tanh(0.3\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new)\\n\u2003\u2003\u2022 [1 + sin(4.2\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new)\\nAlso, multiply extra by an optional Gaussian radial basis term: exp(\u2013((a\u20131)\u00b2)/(2\u00d70.25\u00b2)). Then, nest one additional softplus layer so that softplus is applied six times in succession to 0.865/(1+a).\\nRaise the entire product to the power [0.9478 + 0.00018 \u00d7 ln(1+a)].\\n7. Define the final exponent modulation factor as:\\n\u2003\u2003Exponent = [0.9478 + 0.00018 \u00d7 ln(1+a)] \u00d7 [1 + 0.008 \u00d7 tanh(0.5\u00d7a) + 0.003 \u00d7 sin(3.2\u00d7a) + 0.002 \u00d7 cos(2.5\u00d7a)].\\n8. Compute the final transformed signal: f(x) = sign(z) \u00d7 { [ f_adapt(z) \u00d7 T \u00d7 extra ]^(Exponent) }.\\n9. Compute latent utility U = beta + gamma \u00d7 f(x) and then let P(accept = 1) = 1/(1 + exp(\u2013U)).\\n10. Use exactly three learnable parameters with finite bounds: beta \u2208 [\u201310, 10], gamma \u2208 [0, 10], and phi \u2208 [0.5, 1.5].\\n11. Think outside the box\u2014experimentation with additional functional forms and interactions is encouraged.\\n</think>",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: <think>\nFor run 157, further refine the model by amplifying the penalty for highly unfair (extreme negative) proposals and by adding additional nonlinear and oscillatory modulations to capture subtle patterns. Specifically, increase the negative\u2010branch exponent in f_adapt from 42 to 44. In the extra composite term, add two new multiplicative factors: one equal to [1 + sigmoid(0.14\u00d7a)] and another equal to [1 + tanh(0.35\u00d7a)], and also include an additional oscillatory factor [1 + sin(4.2\u00d7a)]. Furthermore, nest one additional softplus layer so that softplus is applied seven times in succession instead of six. Extend the dynamic threshold T by summing from k = 0 to 100. Finally, adjust the final exponent modulation by multiplying it by an extra factor [1 + 0.009\u00d7tanh(0.5\u00d7a) + 0.004\u00d7sin(3.5\u00d7a) + 0.003\u00d7cos(2.7\u00d7a) + 0.002\u00d7sin(4.0\u00d7a)], and consider also multiplying the extra composite term by a small Gaussian radial basis function, e.g. exp(\u2013((a\u20131)\u00b2)/(2\u00d70.25\u00b2)), to capture any localized effects. These modifications should encourage a steeper, more flexible penalty for extreme unfairness and allow the model to pick up additional cyclic or localized interactions for improved accuracy, lower BIC, and better parameter recovery.\n</think>\n\nNew Instructions for Run 157:\n1. Compute the core sum a as the sum of fixed components F\u2081,\u2026,F\u2081\u2081 plus a small constant \u03b4.\n2. Define a_mod = 1.08 \u00d7 a \u00d7 [1 + 0.012 \u00d7 sin(a + 0.045)].\n3. Multiply a_mod sequentially by:\n\u2003\u2003\u2022 [1 + 0.008 \u00d7 cos(a + 0.065)]\n\u2003\u2003\u2022 [1 + 0.005 \u00d7 sin(a + 0.115)]\n\u2003\u2003\u2022 [1 + 0.004 \u00d7 cos(a + 0.085)]\n\u2003\u2003\u2022 [1 + 0.006 \u00d7 (sin(a + 0.035) \u00d7 cos(a + 0.055))]\n\u2003\u2003\u2022 [1 + 0.003 \u00d7 (sin(a + 0.03) \u00d7 cos(a + 0.05))]\nLet z denote the resulting product.\n4. Compute w = (phi \u2212 0.5) / phi.\n\u2003\u2003\u2022 For z \u2265 0, define f_adapt(z) = clip[1.002 \u00d7 (z^w \u00d7 (ln(1+z))^(1\u2212w) \u00d7 softsign(z)), \u221230, 30], with softsign(x) = x/(1+|x|).\n\u2003\u2003\u2022 For z < 0, set f_adapt(z) = phi \u00d7 [softsign(z + \u0394_shift)]^(44), with \u0394_shift = 1\u00d710\u207b\u2076.\n5. Define the dynamic threshold T as the sum from k = 0 to 100 of (a^k \u00d7 (\u00bd)^k).\n6. Define the extra composite term extra as the product of:\n\u2003\u2003\u2022 exp(\u2013a/0.1)\n\u2003\u2003\u2022 [z/(1 + |z|)]\n\u2003\u2003\u2022 [1 + 0.005 \u00d7 sin(1/(1+a))]\n\u2003\u2003\u2022 [1 + 0.002 \u00d7 cos(0.5\u00d7a)]\n\u2003\u2003\u2022 ([1 + 0.003 \u00d7 cos(0.3\u00d7a)]\u00b2)\n\u2003\u2003\u2022 ([1 + 0.004 \u00d7 cos(0.3\u00d7a)]\u00b2)\n\u2003\u2003\u2022 [1 + 0.0025 \u00d7 cos(0.7\u00d7a)]\n\u2003\u2003\u2022 [1 + tanh(0.05\u00d7a)]\n\u2003\u2003\u2022 [1 + sigmoid(0.01\u00d7a)]\n\u2003\u2003\u2022 [1 + 0.002 \u00d7 cos(3\u00d7a)]\n\u2003\u2003\u2022 [1 + 0.002 \u00d7 (sin(2.5\u00d7a) + 0.001 \u00d7 cos(3.5\u00d7a) + 0.0015 \u00d7 sin(3\u00d7a))]\n\u2003\u2003\u2022 [1 + sigmoid(0.03\u00d7a)]\n\u2003\u2003\u2022 [1 + tanh(0.07\u00d7a)]\n\u2003\u2003\u2022 [1 + cos(3.1\u00d7a)]\n\u2003\u2003\u2022 [1 + sigmoid(0.04\u00d7a)]\n\u2003\u2003\u2022 [1 + tanh(0.08\u00d7a)]\n\u2003\u2003\u2022 [1 + cos(3.2\u00d7a)]\n\u2003\u2003\u2022 [1 + sigmoid(0.05\u00d7a)]\n\u2003\u2003\u2022 [1 + tanh(0.1\u00d7a)]\n\u2003\u2003\u2022 [1 + cos(3.4\u00d7a)]\n\u2003\u2003\u2022 [1 + sigmoid(0.06\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new)\\n\u2003\u2003\u2022 [1 + tanh(0.12\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new)\\n\u2003\u2003\u2022 [1 + cos(3.6\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new)\\n\u2003\u2003\u2022 [1 + sigmoid(0.08\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new)\\n\u2003\u2003\u2022 [1 + tanh(0.2\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new)\\n\u2003\u2003\u2022 [1 + cos(4.2\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new)\\n\u2003\u2003\u2022 [1 + sin(4.0\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new)\\n\u2003\u2003\u2022 [1 + sigmoid(0.12\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new)\\n\u2003\u2003\u2022 [1 + tanh(0.3\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new)\\n\u2003\u2003\u2022 [1 + sin(4.2\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new)\\nAlso, multiply extra by an optional Gaussian radial basis term: exp(\u2013((a\u20131)\u00b2)/(2\u00d70.25\u00b2)). Then, nest one additional softplus layer so that softplus is applied six times in succession to 0.865/(1+a).\\nRaise the entire product to the power [0.9478 + 0.00018 \u00d7 ln(1+a)].\\n7. Define the final exponent modulation factor as:\\n\u2003\u2003Exponent = [0.9478 + 0.00018 \u00d7 ln(1+a)] \u00d7 [1 + 0.008 \u00d7 tanh(0.5\u00d7a) + 0.003 \u00d7 sin(3.2\u00d7a) + 0.002 \u00d7 cos(2.5\u00d7a)].\\n8. Compute the final transformed signal: f(x) = sign(z) \u00d7 { [ f_adapt(z) \u00d7 T \u00d7 extra ]^(Exponent) }.\\n9. Compute latent utility U = beta + gamma \u00d7 f(x) and then let P(accept = 1) = 1/(1 + exp(\u2013U)).\\n10. Use exactly three learnable parameters with finite bounds: beta \u2208 [\u201310, 10], gamma \u2208 [0, 10], and phi \u2208 [0.5, 1.5].\\n11. Think outside the box\u2014experimentation with additional functional forms and interactions is encouraged.\\n</think>\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<MODEL>\na = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + \u03b4\na_mod = 1.08 * a * (1 + 0.012 * sin(a + 0.045))\nz = a_mod * (1 + 0.008 * cos(a + 0.065)) * (1 + 0.005 * sin(a + 0.115)) * (1 + 0.004 * cos(a + 0.085)) * (1 + 0.006 * (sin(a + 0.035) * cos(a + 0.055))) * (1 + 0.003 * (sin(a + 0.03) * cos(a + 0.05)))\nw = (phi - 0.5) / phi\nf_adapt(z) = { clip[1.002 * ( (z^w) * (ln(1+z))^(1-w) * (z/(1+abs(z))) ), -30, 30 ]  if z \u2265 0 ;  phi * ( ( (z + 1e-6)/(1+abs(z + 1e-6)) )^44 )  if z < 0 }\nT = \u03a3[k=0 to 100] (a/2)^k\nextra_base = exp(-a/0.1) * (z/(1+abs(z))) * (1 + 0.005 * sin(1/(1+a))) * (1 + 0.002 * cos(0.5*a)) * ((1 + 0.003 * cos(0.3*a))^2) * ((1 + 0.004 * cos(0.3*a))^2) * (1 + 0.0025 * cos(0.7*a)) * (1 + tanh(0.05*a)) * (1 + 1/(1+exp(-0.01*a))) * (1 + 0.002 * cos(3*a)) * (1 + 0.002*( sin(2.5*a) + 0.001*cos(3.5*a) + 0.0015*sin(3*a) )) * (1 + 1/(1+exp(-0.03*a))) * (1 + tanh(0.07*a)) * (1 + cos(3.1*a)) * (1 + 1/(1+exp(-0.04*a))) * (1 + tanh(0.08*a)) * (1 + cos(3.2*a)) * (1 + 1/(1+exp(-0.05*a))) * (1 + tanh(0.1*a)) * (1 + cos(3.4*a)) * (1 + 1/(1+exp(-0.06*a))) * (1 + tanh(0.12*a)) * (1 + cos(3.6*a)) * (1 + 1/(1+exp(-0.08*a))) * (1 + tanh(0.2*a)) * (1 + cos(4.2*a)) * (1 + sin(4.0*a)) * (1 + 1/(1+exp(-0.12*a))) * (1 + tanh(0.3*a)) * (1 + sin(4.2*a))\nextra = extra_base * exp(-((a-1)^2)/(2*(0.25)^2)) * softplus(softplus(softplus(softplus(softplus(softplus(softplus(0.865/(1+a)))))))\nextra = extra^(0.9478 + 0.00018 * ln(1+a))\nExponent = (0.9478 + 0.00018 * ln(1+a)) * (1 + 0.008 * tanh(0.5*a) + 0.003 * sin(3.2*a) + 0.002 * cos(2.5*a))\nf(x) = sign(z) * ( ( f_adapt(z) * T * extra )^(Exponent) )\nU = beta + gamma * f(x)\nP(accept=1) = 1 / (1 + exp(-U))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"F1\": {\n      \"description\": \"Fixed fairness component 1 derived from proposal features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F2\": {\n      \"description\": \"Fixed fairness component 2 derived from proposal features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F3\": {\n      \"description\": \"Fixed fairness component 3 derived from proposal features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F4\": {\n      \"description\": \"Fixed fairness component 4 derived from proposal features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F5\": {\n      \"description\": \"Fixed fairness component 5 derived from proposal features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F6\": {\n      \"description\": \"Fixed fairness component 6 derived from proposal features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F7\": {\n      \"description\": \"Fixed fairness component 7 derived from proposal features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F8\": {\n      \"description\": \"Fixed fairness component 8 derived from proposal features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F9\": {\n      \"description\": \"Fixed fairness component 9 derived from proposal features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F10\": {\n      \"description\": \"Fixed fairness component 10 derived from proposal features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F11\": {\n      \"description\": \"Fixed fairness component 11 derived from proposal features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"\u03b4\": {\n      \"description\": \"A small positive constant added to the fairness sum\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"constant\",\n        \"parameters\": { \"value\": 0.001 }\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"a\": {\n      \"description\": \"Core sum computed as the sum of fixed fairness components plus \u03b4\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a_mod\": {\n      \"description\": \"Modified core sum after amplitude modulation\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"z\": {\n      \"description\": \"Product of a_mod with sequential sinusoidal modulations\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"phi\": {\n      \"description\": \"Learnable parameter controlling adaptation; influences f_adapt\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": { \"low\": 0.5, \"high\": 1.5 }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"w\": {\n      \"description\": \"Exponent weight computed from phi\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_adapt\": {\n      \"description\": \"Adaptive function of z with a clipping for positive z and steep penalty for negative z\",\n      \"range\": {\n        \"min\": -30,\n        \"max\": 30,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"T\": {\n      \"description\": \"Dynamic threshold computed as a finite sum of a geometric series\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"extra\": {\n      \"description\": \"Extra composite term capturing nonlinear, oscillatory, and localized effects with nested softplus\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"Exponent\": {\n      \"description\": \"Final exponent modulation factor combining logarithmic and oscillatory effects\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_x\": {\n      \"description\": \"Final transformed signal computed from the product of f_adapt, T, and extra raised to Exponent and signed by z\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Learnable base utility parameter\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": { \"low\": -10, \"high\": 10 }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Learnable scaling parameter for the transformed signal f(x)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": { \"low\": 0, \"high\": 10 }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed as a linear combination of beta and the scaled transformed signal\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"P_accept\": {\n      \"description\": \"Predicted probability of accepting the proposal obtained by applying a logistic transform to U\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA complex nonlinear utility model that first computes a core fairness measure (a) from fixed proposal components and then modulates it via sequential sinusoidal, logarithmic, and softplus transformations. The model applies a piecewise adaptive function (f_adapt) that penalizes extreme unfairness with an enhanced exponent for negative values, incorporates a dynamic threshold via a geometric series sum, and augments the signal with an extra composite term that captures oscillatory and localized effects. The final transformed signal is raised to a modulated exponent before linearly combining with a base parameter (beta) and a scaling parameter (gamma) to form the latent utility, which is mapped to an acceptance probability using a logistic function. Only three learnable parameters (beta, gamma, phi) with finite bounds are used.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['phi', 'beta', 'gamma']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                a = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + \u03b4\na_mod = 1.08 * a * (1 + 0.012 * sin(a + 0.045))\nz = a_mod * (1 + 0.008 * cos(a + 0.065)) * (1 + 0.005 * sin(a + 0.115)) * (1 + 0.004 * cos(a + 0.085)) * (1 + 0.006 * (sin(a + 0.035) * cos(a + 0.055))) * (1 + 0.003 * (sin(a + 0.03) * cos(a + 0.05)))\nw = (phi - 0.5) / phi\nf_adapt(z) = { clip[1.002 * ( (z^w) * (ln(1+z))^(1-w) * (z/(1+abs(z))) ), -30, 30 ]  if z \u2265 0 ;  phi * ( ( (z + 1e-6)/(1+abs(z + 1e-6)) )^44 )  if z < 0 }\nT = \u03a3[k=0 to 100] (a/2)^k\nextra_base = exp(-a/0.1) * (z/(1+abs(z))) * (1 + 0.005 * sin(1/(1+a))) * (1 + 0.002 * cos(0.5*a)) * ((1 + 0.003 * cos(0.3*a))^2) * ((1 + 0.004 * cos(0.3*a))^2) * (1 + 0.0025 * cos(0.7*a)) * (1 + tanh(0.05*a)) * (1 + 1/(1+exp(-0.01*a))) * (1 + 0.002 * cos(3*a)) * (1 + 0.002*( sin(2.5*a) + 0.001*cos(3.5*a) + 0.0015*sin(3*a) )) * (1 + 1/(1+exp(-0.03*a))) * (1 + tanh(0.07*a)) * (1 + cos(3.1*a)) * (1 + 1/(1+exp(-0.04*a))) * (1 + tanh(0.08*a)) * (1 + cos(3.2*a)) * (1 + 1/(1+exp(-0.05*a))) * (1 + tanh(0.1*a)) * (1 + cos(3.4*a)) * (1 + 1/(1+exp(-0.06*a))) * (1 + tanh(0.12*a)) * (1 + cos(3.6*a)) * (1 + 1/(1+exp(-0.08*a))) * (1 + tanh(0.2*a)) * (1 + cos(4.2*a)) * (1 + sin(4.0*a)) * (1 + 1/(1+exp(-0.12*a))) * (1 + tanh(0.3*a)) * (1 + sin(4.2*a))\nextra = extra_base * exp(-((a-1)^2)/(2*(0.25)^2)) * softplus(softplus(softplus(softplus(softplus(softplus(softplus(0.865/(1+a)))))))\nextra = extra^(0.9478 + 0.00018 * ln(1+a))\nExponent = (0.9478 + 0.00018 * ln(1+a)) * (1 + 0.008 * tanh(0.5*a) + 0.003 * sin(3.2*a) + 0.002 * cos(2.5*a))\nf(x) = sign(z) * ( ( f_adapt(z) * T * extra )^(Exponent) )\nU = beta + gamma * f(x)\nP(accept=1) = 1 / (1 + exp(-U))\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"F1\": {\n      \"description\": \"Fixed fairness component 1 derived from proposal features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F2\": {\n      \"description\": \"Fixed fairness component 2 derived from proposal features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F3\": {\n      \"description\": \"Fixed fairness component 3 derived from proposal features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F4\": {\n      \"description\": \"Fixed fairness component 4 derived from proposal features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F5\": {\n      \"description\": \"Fixed fairness component 5 derived from proposal features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F6\": {\n      \"description\": \"Fixed fairness component 6 derived from proposal features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F7\": {\n      \"description\": \"Fixed fairness component 7 derived from proposal features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F8\": {\n      \"description\": \"Fixed fairness component 8 derived from proposal features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F9\": {\n      \"description\": \"Fixed fairness component 9 derived from proposal features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F10\": {\n      \"description\": \"Fixed fairness component 10 derived from proposal features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F11\": {\n      \"description\": \"Fixed fairness component 11 derived from proposal features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"\\u03b4\": {\n      \"description\": \"A small positive constant added to the fairness sum\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"constant\",\n        \"parameters\": {\n          \"value\": 0.001\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"a\": {\n      \"description\": \"Core sum computed as the sum of fixed fairness components plus \\u03b4\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a_mod\": {\n      \"description\": \"Modified core sum after amplitude modulation\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"z\": {\n      \"description\": \"Product of a_mod with sequential sinusoidal modulations\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"phi\": {\n      \"description\": \"Learnable parameter controlling adaptation; influences f_adapt\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0.5,\n          \"high\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"w\": {\n      \"description\": \"Exponent weight computed from phi\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_adapt\": {\n      \"description\": \"Adaptive function of z with a clipping for positive z and steep penalty for negative z\",\n      \"range\": {\n        \"min\": -30,\n        \"max\": 30,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"T\": {\n      \"description\": \"Dynamic threshold computed as a finite sum of a geometric series\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"extra\": {\n      \"description\": \"Extra composite term capturing nonlinear, oscillatory, and localized effects with nested softplus\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"Exponent\": {\n      \"description\": \"Final exponent modulation factor combining logarithmic and oscillatory effects\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_x\": {\n      \"description\": \"Final transformed signal computed from the product of f_adapt, T, and extra raised to Exponent and signed by z\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Learnable base utility parameter\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Learnable scaling parameter for the transformed signal f(x)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0,\n          \"high\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed as a linear combination of beta and the scaled transformed signal\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"P_accept\": {\n      \"description\": \"Predicted probability of accepting the proposal obtained by applying a logistic transform to U\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, phi=1.0, beta=0.0, gamma=1.0):\n    model_predictions = []\n    delta = 0.001\n\n    def ln(x):\n        if x <= 0:\n            return float('-inf')\n        return math.log(x)\n\n    def exp(x):\n        try:\n            return math.exp(x)\n        except OverflowError:\n            return float('inf')\n\n    def softplus(x):\n        try:\n            return math.log1p(exp(x))\n        except OverflowError:\n            return x\n\n    def tanh(x):\n        try:\n            return math.tanh(x)\n        except OverflowError:\n            if x > 0:\n                return 1.0\n            else:\n                return -1.0\n\n    def clip(x, min_val, max_val):\n        return max(min(x, max_val), min_val)\n    \n    def sign(x):\n        if x > 0:\n            return 1\n        elif x < 0:\n            return -1\n        else:\n            return 0\n\n    for trial in trial_data:\n        F1 = trial.get(\"F1\", 0.0)\n        F2 = trial.get(\"F2\", 0.0)\n        F3 = trial.get(\"F3\", 0.0)\n        F4 = trial.get(\"F4\", 0.0)\n        F5 = trial.get(\"F5\", 0.0)\n        F6 = trial.get(\"F6\", 0.0)\n        F7 = trial.get(\"F7\", 0.0)\n        F8 = trial.get(\"F8\", 0.0)\n        F9 = trial.get(\"F9\", 0.0)\n        F10 = trial.get(\"F10\", 0.0)\n        F11 = trial.get(\"F11\", 0.0)\n\n        a = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + delta\n        a_mod = 1.08 * a * (1 + 0.012 * math.sin(a + 0.045))\n        z = a_mod * (1 + 0.008 * math.cos(a + 0.065)) * (1 + 0.005 * math.sin(a + 0.115)) * (1 + 0.004 * math.cos(a + 0.085)) * (1 + 0.006 * (math.sin(a + 0.035) * math.cos(a + 0.055))) * (1 + 0.003 * (math.sin(a + 0.03) * math.cos(a + 0.05)))\n        w = (phi - 0.5) / phi\n\n        if z >= 0:\n            f_adapt_z = clip(1.002 * ((z**w) * (ln(1+z)**(1-w)) * (z/(1+abs(z)))), -30, 30)\n        else:\n            f_adapt_z = phi * (((z + 1e-6)/(1+abs(z + 1e-6)))**44)\n\n        T = sum((a/2)**k for k in range(101))\n\n        extra_base = exp(-a/0.1) * (z/(1+abs(z))) * (1 + 0.005 * math.sin(1/(1+a))) * (1 + 0.002 * math.cos(0.5*a)) * ((1 + 0.003 * math.cos(0.3*a))**2) * ((1 + 0.004 * math.cos(0.3*a))**2) * (1 + 0.0025 * math.cos(0.7*a)) * (1 + tanh(0.05*a)) * (1 + 1/(1+exp(-0.01*a))) * (1 + 0.002 * math.cos(3*a)) * (1 + 0.002*( math.sin(2.5*a) + 0.001*math.cos(3.5*a) + 0.0015*math.sin(3*a) )) * (1 + 1/(1+exp(-0.03*a))) * (1 + tanh(0.07*a)) * (1 + math.cos(3.1*a)) * (1 + 1/(1+exp(-0.04*a))) * (1 + tanh(0.08*a)) * (1 + math.cos(3.2*a)) * (1 + 1/(1+exp(-0.05*a))) * (1 + tanh(0.1*a)) * (1 + math.cos(3.4*a)) * (1 + 1/(1+exp(-0.06*a))) * (1 + tanh(0.12*a)) * (1 + math.cos(3.6*a)) * (1 + 1/(1+exp(-0.08*a))) * (1 + tanh(0.2*a)) * (1 + math.cos(4.2*a)) * (1 + math.sin(4.0*a)) * (1 + 1/(1+exp(-0.12*a))) * (1 + tanh(0.3*a)) * (1 + math.sin(4.2*a))\n        extra = extra_base * exp(-((a-1)**2)/(2*(0.25)**2)) * softplus(softplus(softplus(softplus(softplus(softplus(softplus(0.865/(1+a))))))))\n        extra = extra**(0.9478 + 0.00018 * ln(1+a))\n        Exponent = (0.9478 + 0.00018 * ln(1+a)) * (1 + 0.008 * tanh(0.5*a) + 0.003 * math.sin(3.2*a) + 0.002 * math.cos(2.5*a))\n\n        f_x = sign(z) * ((f_adapt_z * T * extra)**Exponent)\n\n        U = beta + gamma * f_x\n        \n        try:\n            P_accept = 1 / (1 + exp(-U))\n        except OverflowError:\n            if U > 0:\n                P_accept = 0.0\n            else:\n                P_accept = 1.0\n\n        model_predictions.append(P_accept)\n\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n```",
      "timestamp": 1743549373.234307
    }
  ],
  "learnable_parameters": {
    "phi": {
      "description": "Learnable parameter controlling adaptation; influences f_adapt",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0.5,
          "high": 1.5
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "beta": {
      "description": "Learnable base utility parameter",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -10,
          "high": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Learnable scaling parameter for the transformed signal f(x)",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0,
          "high": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "a = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + \u03b4\na_mod = 1.08 * a * (1 + 0.012 * sin(a + 0.045))\nz = a_mod * (1 + 0.008 * cos(a + 0.065)) * (1 + 0.005 * sin(a + 0.115)) * (1 + 0.004 * cos(a + 0.085)) * (1 + 0.006 * (sin(a + 0.035) * cos(a + 0.055))) * (1 + 0.003 * (sin(a + 0.03) * cos(a + 0.05)))\nw = (phi - 0.5) / phi\nf_adapt(z) = { clip[1.002 * ( (z^w) * (ln(1+z))^(1-w) * (z/(1+abs(z))) ), -30, 30 ]  if z \u2265 0 ;  phi * ( ( (z + 1e-6)/(1+abs(z + 1e-6)) )^44 )  if z < 0 }\nT = \u03a3[k=0 to 100] (a/2)^k\nextra_base = exp(-a/0.1) * (z/(1+abs(z))) * (1 + 0.005 * sin(1/(1+a))) * (1 + 0.002 * cos(0.5*a)) * ((1 + 0.003 * cos(0.3*a))^2) * ((1 + 0.004 * cos(0.3*a))^2) * (1 + 0.0025 * cos(0.7*a)) * (1 + tanh(0.05*a)) * (1 + 1/(1+exp(-0.01*a))) * (1 + 0.002 * cos(3*a)) * (1 + 0.002*( sin(2.5*a) + 0.001*cos(3.5*a) + 0.0015*sin(3*a) )) * (1 + 1/(1+exp(-0.03*a))) * (1 + tanh(0.07*a)) * (1 + cos(3.1*a)) * (1 + 1/(1+exp(-0.04*a))) * (1 + tanh(0.08*a)) * (1 + cos(3.2*a)) * (1 + 1/(1+exp(-0.05*a))) * (1 + tanh(0.1*a)) * (1 + cos(3.4*a)) * (1 + 1/(1+exp(-0.06*a))) * (1 + tanh(0.12*a)) * (1 + cos(3.6*a)) * (1 + 1/(1+exp(-0.08*a))) * (1 + tanh(0.2*a)) * (1 + cos(4.2*a)) * (1 + sin(4.0*a)) * (1 + 1/(1+exp(-0.12*a))) * (1 + tanh(0.3*a)) * (1 + sin(4.2*a))\nextra = extra_base * exp(-((a-1)^2)/(2*(0.25)^2)) * softplus(softplus(softplus(softplus(softplus(softplus(softplus(0.865/(1+a)))))))\nextra = extra^(0.9478 + 0.00018 * ln(1+a))\nExponent = (0.9478 + 0.00018 * ln(1+a)) * (1 + 0.008 * tanh(0.5*a) + 0.003 * sin(3.2*a) + 0.002 * cos(2.5*a))\nf(x) = sign(z) * ( ( f_adapt(z) * T * extra )^(Exponent) )\nU = beta + gamma * f(x)\nP(accept=1) = 1 / (1 + exp(-U))",
  "variable_descriptions": {
    "F1": {
      "description": "Fixed fairness component 1 derived from proposal features",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "empirical",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "F2": {
      "description": "Fixed fairness component 2 derived from proposal features",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "empirical",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "F3": {
      "description": "Fixed fairness component 3 derived from proposal features",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "empirical",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "F4": {
      "description": "Fixed fairness component 4 derived from proposal features",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "empirical",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "F5": {
      "description": "Fixed fairness component 5 derived from proposal features",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "empirical",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "F6": {
      "description": "Fixed fairness component 6 derived from proposal features",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "empirical",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "F7": {
      "description": "Fixed fairness component 7 derived from proposal features",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "empirical",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "F8": {
      "description": "Fixed fairness component 8 derived from proposal features",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "empirical",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "F9": {
      "description": "Fixed fairness component 9 derived from proposal features",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "empirical",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "F10": {
      "description": "Fixed fairness component 10 derived from proposal features",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "empirical",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "F11": {
      "description": "Fixed fairness component 11 derived from proposal features",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "empirical",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "\u03b4": {
      "description": "A small positive constant added to the fairness sum",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "constant",
        "parameters": {
          "value": 0.001
        }
      },
      "learnable": false,
      "source": "fixed"
    },
    "a": {
      "description": "Core sum computed as the sum of fixed fairness components plus \u03b4",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "a_mod": {
      "description": "Modified core sum after amplitude modulation",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "z": {
      "description": "Product of a_mod with sequential sinusoidal modulations",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "phi": {
      "description": "Learnable parameter controlling adaptation; influences f_adapt",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0.5,
          "high": 1.5
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "w": {
      "description": "Exponent weight computed from phi",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "f_adapt": {
      "description": "Adaptive function of z with a clipping for positive z and steep penalty for negative z",
      "range": {
        "min": -30,
        "max": 30,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "T": {
      "description": "Dynamic threshold computed as a finite sum of a geometric series",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "extra": {
      "description": "Extra composite term capturing nonlinear, oscillatory, and localized effects with nested softplus",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "Exponent": {
      "description": "Final exponent modulation factor combining logarithmic and oscillatory effects",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "f_x": {
      "description": "Final transformed signal computed from the product of f_adapt, T, and extra raised to Exponent and signed by z",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "beta": {
      "description": "Learnable base utility parameter",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -10,
          "high": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Learnable scaling parameter for the transformed signal f(x)",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0,
          "high": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "U": {
      "description": "Latent utility computed as a linear combination of beta and the scaled transformed signal",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "P_accept": {
      "description": "Predicted probability of accepting the proposal obtained by applying a logistic transform to U",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "A complex nonlinear utility model that first computes a core fairness measure (a) from fixed proposal components and then modulates it via sequential sinusoidal, logarithmic, and softplus transformations. The model applies a piecewise adaptive function (f_adapt) that penalizes extreme unfairness with an enhanced exponent for negative values, incorporates a dynamic threshold via a geometric series sum, and augments the signal with an extra composite term that captures oscillatory and localized effects. The final transformed signal is raised to a modulated exponent before linearly combining with a base parameter (beta) and a scaling parameter (gamma) to form the latent utility, which is mapped to an acceptance probability using a logistic function. Only three learnable parameters (beta, gamma, phi) with finite bounds are used.",
  "target_variable": "accept",
  "full_reasoning": "<MODEL>\na = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + \u03b4\na_mod = 1.08 * a * (1 + 0.012 * sin(a + 0.045))\nz = a_mod * (1 + 0.008 * cos(a + 0.065)) * (1 + 0.005 * sin(a + 0.115)) * (1 + 0.004 * cos(a + 0.085)) * (1 + 0.006 * (sin(a + 0.035) * cos(a + 0.055))) * (1 + 0.003 * (sin(a + 0.03) * cos(a + 0.05)))\nw = (phi - 0.5) / phi\nf_adapt(z) = { clip[1.002 * ( (z^w) * (ln(1+z))^(1-w) * (z/(1+abs(z))) ), -30, 30 ]  if z \u2265 0 ;  phi * ( ( (z + 1e-6)/(1+abs(z + 1e-6)) )^44 )  if z < 0 }\nT = \u03a3[k=0 to 100] (a/2)^k\nextra_base = exp(-a/0.1) * (z/(1+abs(z))) * (1 + 0.005 * sin(1/(1+a))) * (1 + 0.002 * cos(0.5*a)) * ((1 + 0.003 * cos(0.3*a))^2) * ((1 + 0.004 * cos(0.3*a))^2) * (1 + 0.0025 * cos(0.7*a)) * (1 + tanh(0.05*a)) * (1 + 1/(1+exp(-0.01*a))) * (1 + 0.002 * cos(3*a)) * (1 + 0.002*( sin(2.5*a) + 0.001*cos(3.5*a) + 0.0015*sin(3*a) )) * (1 + 1/(1+exp(-0.03*a))) * (1 + tanh(0.07*a)) * (1 + cos(3.1*a)) * (1 + 1/(1+exp(-0.04*a))) * (1 + tanh(0.08*a)) * (1 + cos(3.2*a)) * (1 + 1/(1+exp(-0.05*a))) * (1 + tanh(0.1*a)) * (1 + cos(3.4*a)) * (1 + 1/(1+exp(-0.06*a))) * (1 + tanh(0.12*a)) * (1 + cos(3.6*a)) * (1 + 1/(1+exp(-0.08*a))) * (1 + tanh(0.2*a)) * (1 + cos(4.2*a)) * (1 + sin(4.0*a)) * (1 + 1/(1+exp(-0.12*a))) * (1 + tanh(0.3*a)) * (1 + sin(4.2*a))\nextra = extra_base * exp(-((a-1)^2)/(2*(0.25)^2)) * softplus(softplus(softplus(softplus(softplus(softplus(softplus(0.865/(1+a)))))))\nextra = extra^(0.9478 + 0.00018 * ln(1+a))\nExponent = (0.9478 + 0.00018 * ln(1+a)) * (1 + 0.008 * tanh(0.5*a) + 0.003 * sin(3.2*a) + 0.002 * cos(2.5*a))\nf(x) = sign(z) * ( ( f_adapt(z) * T * extra )^(Exponent) )\nU = beta + gamma * f(x)\nP(accept=1) = 1 / (1 + exp(-U))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"F1\": {\n      \"description\": \"Fixed fairness component 1 derived from proposal features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F2\": {\n      \"description\": \"Fixed fairness component 2 derived from proposal features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F3\": {\n      \"description\": \"Fixed fairness component 3 derived from proposal features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F4\": {\n      \"description\": \"Fixed fairness component 4 derived from proposal features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F5\": {\n      \"description\": \"Fixed fairness component 5 derived from proposal features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F6\": {\n      \"description\": \"Fixed fairness component 6 derived from proposal features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F7\": {\n      \"description\": \"Fixed fairness component 7 derived from proposal features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F8\": {\n      \"description\": \"Fixed fairness component 8 derived from proposal features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F9\": {\n      \"description\": \"Fixed fairness component 9 derived from proposal features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F10\": {\n      \"description\": \"Fixed fairness component 10 derived from proposal features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F11\": {\n      \"description\": \"Fixed fairness component 11 derived from proposal features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"\u03b4\": {\n      \"description\": \"A small positive constant added to the fairness sum\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"constant\",\n        \"parameters\": { \"value\": 0.001 }\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"a\": {\n      \"description\": \"Core sum computed as the sum of fixed fairness components plus \u03b4\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a_mod\": {\n      \"description\": \"Modified core sum after amplitude modulation\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"z\": {\n      \"description\": \"Product of a_mod with sequential sinusoidal modulations\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"phi\": {\n      \"description\": \"Learnable parameter controlling adaptation; influences f_adapt\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": { \"low\": 0.5, \"high\": 1.5 }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"w\": {\n      \"description\": \"Exponent weight computed from phi\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_adapt\": {\n      \"description\": \"Adaptive function of z with a clipping for positive z and steep penalty for negative z\",\n      \"range\": {\n        \"min\": -30,\n        \"max\": 30,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"T\": {\n      \"description\": \"Dynamic threshold computed as a finite sum of a geometric series\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"extra\": {\n      \"description\": \"Extra composite term capturing nonlinear, oscillatory, and localized effects with nested softplus\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"Exponent\": {\n      \"description\": \"Final exponent modulation factor combining logarithmic and oscillatory effects\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_x\": {\n      \"description\": \"Final transformed signal computed from the product of f_adapt, T, and extra raised to Exponent and signed by z\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Learnable base utility parameter\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": { \"low\": -10, \"high\": 10 }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Learnable scaling parameter for the transformed signal f(x)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": { \"low\": 0, \"high\": 10 }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed as a linear combination of beta and the scaled transformed signal\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"P_accept\": {\n      \"description\": \"Predicted probability of accepting the proposal obtained by applying a logistic transform to U\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA complex nonlinear utility model that first computes a core fairness measure (a) from fixed proposal components and then modulates it via sequential sinusoidal, logarithmic, and softplus transformations. The model applies a piecewise adaptive function (f_adapt) that penalizes extreme unfairness with an enhanced exponent for negative values, incorporates a dynamic threshold via a geometric series sum, and augments the signal with an extra composite term that captures oscillatory and localized effects. The final transformed signal is raised to a modulated exponent before linearly combining with a base parameter (beta) and a scaling parameter (gamma) to form the latent utility, which is mapped to an acceptance probability using a logistic function. Only three learnable parameters (beta, gamma, phi) with finite bounds are used.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: a = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + \u03b4\na_mod = 1.08 * a * (1 + 0.012 * sin(a + 0.045))\nz = a_mod * (1 + 0.008 * cos(a + 0.065)) * (1 + 0.005 * sin(a + 0.115)) * (1 + 0.004 * cos(a + 0.085)) * (1 + 0.006 * (sin(a + 0.035) * cos(a + 0.055))) * (1 + 0.003 * (sin(a + 0.03) * cos(a + 0.05)))\nw = (phi - 0.5) / phi\nf_adapt(z) = { clip[1.002 * ( (z^w) * (ln(1+z))^(1-w) * (z/(1+abs(z))) ), -30, 30 ]  if z \u2265 0 ;  phi * ( ( (z + 1e-6)/(1+abs(z + 1e-6)) )^44 )  if z < 0 }\nT = \u03a3[k=0 to 100] (a/2)^k\nextra_base = exp(-a/0.1) * (z/(1+abs(z))) * (1 + 0.005 * sin(1/(1+a))) * (1 + 0.002 * cos(0.5*a)) * ((1 + 0.003 * cos(0.3*a))^2) * ((1 + 0.004 * cos(0.3*a))^2) * (1 + 0.0025 * cos(0.7*a)) * (1 + tanh(0.05*a)) * (1 + 1/(1+exp(-0.01*a))) * (1 + 0.002 * cos(3*a)) * (1 + 0.002*( sin(2.5*a) + 0.001*cos(3.5*a) + 0.0015*sin(3*a) )) * (1 + 1/(1+exp(-0.03*a))) * (1 + tanh(0.07*a)) * (1 + cos(3.1*a)) * (1 + 1/(1+exp(-0.04*a))) * (1 + tanh(0.08*a)) * (1 + cos(3.2*a)) * (1 + 1/(1+exp(-0.05*a))) * (1 + tanh(0.1*a)) * (1 + cos(3.4*a)) * (1 + 1/(1+exp(-0.06*a))) * (1 + tanh(0.12*a)) * (1 + cos(3.6*a)) * (1 + 1/(1+exp(-0.08*a))) * (1 + tanh(0.2*a)) * (1 + cos(4.2*a)) * (1 + sin(4.0*a)) * (1 + 1/(1+exp(-0.12*a))) * (1 + tanh(0.3*a)) * (1 + sin(4.2*a))\nextra = extra_base * exp(-((a-1)^2)/(2*(0.25)^2)) * softplus(softplus(softplus(softplus(softplus(softplus(softplus(0.865/(1+a)))))))\nextra = extra^(0.9478 + 0.00018 * ln(1+a))\nExponent = (0.9478 + 0.00018 * ln(1+a)) * (1 + 0.008 * tanh(0.5*a) + 0.003 * sin(3.2*a) + 0.002 * cos(2.5*a))\nf(x) = sign(z) * ( ( f_adapt(z) * T * extra )^(Exponent) )\nU = beta + gamma * f(x)\nP(accept=1) = 1 / (1 + exp(-U))\nSummary: A complex nonlinear utility model that first computes a core fairness measure (a) from fixed proposal components and then modulates it via sequential sinusoidal, logarithmic, and softplus transformations. The model applies a piecewise adaptive function (f_adapt) that penalizes extreme unfairness with an enhanced exponent for negative values, incorporates a dynamic threshold via a geometric series sum, and augments the signal with an extra composite term that captures oscillatory and localized effects. The final transformed signal is raised to a modulated exponent before linearly combining with a base parameter (beta) and a scaling parameter (gamma) to form the latent utility, which is mapped to an acceptance probability using a logistic function. Only three learnable parameters (beta, gamma, phi) with finite bounds are used.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, phi=1.0, beta=0.0, gamma=1.0):\n    model_predictions = []\n    delta = 0.001\n\n    def ln(x):\n        if x <= 0:\n            return float('-inf')\n        return math.log(x)\n\n    def exp(x):\n        try:\n            return math.exp(x)\n        except OverflowError:\n            return float('inf')\n\n    def softplus(x):\n        try:\n            return math.log1p(exp(x))\n        except OverflowError:\n            return x\n\n    def tanh(x):\n        try:\n            return math.tanh(x)\n        except OverflowError:\n            if x > 0:\n                return 1.0\n            else:\n                return -1.0\n\n    def clip(x, min_val, max_val):\n        return max(min(x, max_val), min_val)\n    \n    def sign(x):\n        if x > 0:\n            return 1\n        elif x < 0:\n            return -1\n        else:\n            return 0\n\n    for trial in trial_data:\n        F1 = trial.get(\"F1\", 0.0)\n        F2 = trial.get(\"F2\", 0.0)\n        F3 = trial.get(\"F3\", 0.0)\n        F4 = trial.get(\"F4\", 0.0)\n        F5 = trial.get(\"F5\", 0.0)\n        F6 = trial.get(\"F6\", 0.0)\n        F7 = trial.get(\"F7\", 0.0)\n        F8 = trial.get(\"F8\", 0.0)\n        F9 = trial.get(\"F9\", 0.0)\n        F10 = trial.get(\"F10\", 0.0)\n        F11 = trial.get(\"F11\", 0.0)\n\n        a = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + delta\n        a_mod = 1.08 * a * (1 + 0.012 * math.sin(a + 0.045))\n        z = a_mod * (1 + 0.008 * math.cos(a + 0.065)) * (1 + 0.005 * math.sin(a + 0.115)) * (1 + 0.004 * math.cos(a + 0.085)) * (1 + 0.006 * (math.sin(a + 0.035) * math.cos(a + 0.055))) * (1 + 0.003 * (math.sin(a + 0.03) * math.cos(a + 0.05)))\n        w = (phi - 0.5) / phi\n\n        if z >= 0:\n            f_adapt_z = clip(1.002 * ((z**w) * (ln(1+z)**(1-w)) * (z/(1+abs(z)))), -30, 30)\n        else:\n            f_adapt_z = phi * (((z + 1e-6)/(1+abs(z + 1e-6)))**44)\n\n        T = sum((a/2)**k for k in range(101))\n\n        extra_base = exp(-a/0.1) * (z/(1+abs(z))) * (1 + 0.005 * math.sin(1/(1+a))) * (1 + 0.002 * math.cos(0.5*a)) * ((1 + 0.003 * math.cos(0.3*a))**2) * ((1 + 0.004 * math.cos(0.3*a))**2) * (1 + 0.0025 * math.cos(0.7*a)) * (1 + tanh(0.05*a)) * (1 + 1/(1+exp(-0.01*a))) * (1 + 0.002 * math.cos(3*a)) * (1 + 0.002*( math.sin(2.5*a) + 0.001*math.cos(3.5*a) + 0.0015*math.sin(3*a) )) * (1 + 1/(1+exp(-0.03*a))) * (1 + tanh(0.07*a)) * (1 + math.cos(3.1*a)) * (1 + 1/(1+exp(-0.04*a))) * (1 + tanh(0.08*a)) * (1 + math.cos(3.2*a)) * (1 + 1/(1+exp(-0.05*a))) * (1 + tanh(0.1*a)) * (1 + math.cos(3.4*a)) * (1 + 1/(1+exp(-0.06*a))) * (1 + tanh(0.12*a)) * (1 + math.cos(3.6*a)) * (1 + 1/(1+exp(-0.08*a))) * (1 + tanh(0.2*a)) * (1 + math.cos(4.2*a)) * (1 + math.sin(4.0*a)) * (1 + 1/(1+exp(-0.12*a))) * (1 + tanh(0.3*a)) * (1 + math.sin(4.2*a))\n        extra = extra_base * exp(-((a-1)**2)/(2*(0.25)**2)) * softplus(softplus(softplus(softplus(softplus(softplus(softplus(0.865/(1+a))))))))\n        extra = extra**(0.9478 + 0.00018 * ln(1+a))\n        Exponent = (0.9478 + 0.00018 * ln(1+a)) * (1 + 0.008 * tanh(0.5*a) + 0.003 * math.sin(3.2*a) + 0.002 * math.cos(2.5*a))\n\n        f_x = sign(z) * ((f_adapt_z * T * extra)**Exponent)\n\n        U = beta + gamma * f_x\n        \n        try:\n            P_accept = 1 / (1 + exp(-U))\n        except OverflowError:\n            if U > 0:\n                P_accept = 0.0\n            else:\n                P_accept = 1.0\n\n        model_predictions.append(P_accept)\n\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.561050061050061,
  "fitting_results": [
    {
      "phi": 0.8291977263598432,
      "beta": -10.0,
      "gamma": 0.7915356085845193,
      "success": true,
      "log_likelihood": -24.95397947026407,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.3092349445544431,
      "beta": -10.0,
      "gamma": 5.757243212114603,
      "success": true,
      "log_likelihood": -24.953298502232386,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.432201516124141,
      "beta": -2.079703344734228,
      "gamma": 6.0607399638298665,
      "success": true,
      "log_likelihood": -24.897714412504175,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5187684940463496,
      "beta": -10.0,
      "gamma": 6.540254138737711,
      "success": true,
      "log_likelihood": -24.953434695840592,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.7329622143520483,
      "beta": -10.0,
      "gamma": 0.4210217127330118,
      "success": true,
      "log_likelihood": -24.953389297969853,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.7931717863379563,
      "beta": 0.28407396305652566,
      "gamma": 8.443055402037157,
      "success": true,
      "log_likelihood": -23.5459731638496,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.548869284719476,
      "beta": 10.0,
      "gamma": 6.437435035892223,
      "success": true,
      "log_likelihood": -11.277860290242762,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.3231580013910178,
      "beta": 0.8149056515433862,
      "gamma": 9.01349393753284,
      "success": true,
      "log_likelihood": -22.914510051593176,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.1809277795529902,
      "beta": 10.0,
      "gamma": 6.7023573957384395,
      "success": true,
      "log_likelihood": -11.277860290242495,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.0083947020392523,
      "beta": -10.0,
      "gamma": 4.83239930251894,
      "success": true,
      "log_likelihood": -24.953480093709256,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.6089194325931692,
      "beta": -10.0,
      "gamma": 6.380114940916945,
      "success": true,
      "log_likelihood": -24.953389297971146,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.7499718203864814,
      "beta": -9.999999999999998,
      "gamma": 8.684749690291532,
      "success": true,
      "log_likelihood": -24.9539340724073,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.9966631174407533,
      "beta": -10.0,
      "gamma": 7.160339717985349,
      "success": true,
      "log_likelihood": -24.953434695840773,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.0346661916456652,
      "beta": 10.0,
      "gamma": 2.655814539276755,
      "success": true,
      "log_likelihood": -11.277860290246739,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.8536511672258004,
      "beta": 10.0,
      "gamma": 3.1939770998856973,
      "success": true,
      "log_likelihood": -11.277860290246167,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.8466561528680824,
      "beta": 10.0,
      "gamma": 7.094106226034185,
      "success": true,
      "log_likelihood": -11.27786029024207,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5321041403012423,
      "beta": 10.0,
      "gamma": 9.108236988781313,
      "success": true,
      "log_likelihood": -11.27786029023996,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.3734119942715994,
      "beta": 10.0,
      "gamma": 3.4511764964681877,
      "success": true,
      "log_likelihood": -16.277633299729132,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.011367791031485,
      "beta": 10.0,
      "gamma": 2.0793328695243565,
      "success": true,
      "log_likelihood": -15.277678697833347,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.0069045270628714,
      "beta": 10.0,
      "gamma": 5.097561038819193,
      "success": true,
      "log_likelihood": -11.277860290244165,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.8813723307785026,
      "beta": -1.2474713586082016,
      "gamma": 4.100268089097754,
      "success": true,
      "log_likelihood": -24.730616750432482,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5180399131220685,
      "beta": 10.0,
      "gamma": 9.60543897064322,
      "success": true,
      "log_likelihood": -16.277633299726002,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.6948670477394289,
      "beta": -10.0,
      "gamma": 0.07491333000413158,
      "success": true,
      "log_likelihood": -24.953525491575892,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5678255049768759,
      "beta": -2.078285781858289,
      "gamma": 7.6088534437961055,
      "success": true,
      "log_likelihood": -24.897714324102378,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.6097193446644237,
      "beta": -6.218256655218624,
      "gamma": 0.09447758702165854,
      "success": true,
      "log_likelihood": -24.95331629108122,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.2657095686832995,
      "beta": -0.6790490592089821,
      "gamma": 5.115860919032783,
      "success": true,
      "log_likelihood": -24.4509575685028,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.1709352899471566,
      "beta": -1.2471315416582645,
      "gamma": 7.668744051007038,
      "success": true,
      "log_likelihood": -24.73061676303873,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5670638367729848,
      "beta": -10.0,
      "gamma": 3.1394607903802463,
      "success": true,
      "log_likelihood": -24.953661685184667,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.8860252489460332,
      "beta": 10.0,
      "gamma": 8.281499277481474,
      "success": true,
      "log_likelihood": -15.277678697829518,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.0555441133028913,
      "beta": 10.0,
      "gamma": 5.946966033616004,
      "success": true,
      "log_likelihood": -19.277497105418608,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.4983794526084737,
      "beta": 10.0,
      "gamma": 9.532506057858006,
      "success": true,
      "log_likelihood": -11.277860290239513,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.4600913265296431,
      "beta": -10.0,
      "gamma": 5.8889538222133,
      "success": true,
      "log_likelihood": -24.95397947027238,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.0165902356586645,
      "beta": -10.0,
      "gamma": 4.480621263406204,
      "success": true,
      "log_likelihood": -24.953434695839913,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.1656864331203076,
      "beta": -9.999999999999998,
      "gamma": 6.64494623509419,
      "success": true,
      "log_likelihood": -24.953480093710027,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.2051994238746424,
      "beta": 9.999999999999998,
      "gamma": 9.109579041563142,
      "success": true,
      "log_likelihood": -11.27786029023996,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.092061783391037,
      "beta": 0.2840750463872448,
      "gamma": 6.827824517559916,
      "success": true,
      "log_likelihood": -23.54597316384962,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.7278319406692574,
      "beta": 1.5232076353273618,
      "gamma": 1.6692525175625494,
      "success": true,
      "log_likelihood": -22.15793815812102,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5759429550540602,
      "beta": -6.342332525601988,
      "gamma": 4.819525319318913,
      "success": true,
      "log_likelihood": -24.953312386241336,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.921095923022277,
      "beta": 0.8148713458338183,
      "gamma": 1.3320502829427325,
      "success": true,
      "log_likelihood": -22.91451005141468,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.2244064693560657,
      "beta": 10.0,
      "gamma": 7.998822038174507,
      "success": true,
      "log_likelihood": -14.277724095932555,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.3383535399595423,
      "beta": -0.1926508284504255,
      "gamma": 3.7922364095379093,
      "success": true,
      "log_likelihood": -24.056945188724857,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.3443785250013942,
      "beta": -10.0,
      "gamma": 5.068123167088148,
      "success": true,
      "log_likelihood": -24.95375248092481,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.6834108966073056,
      "beta": 10.0,
      "gamma": 9.301695093278012,
      "success": true,
      "log_likelihood": -12.277814892137034,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.9229594438923292,
      "beta": -1.2474527941692513,
      "gamma": 2.7501758521732143,
      "success": true,
      "log_likelihood": -24.7306167503245,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.382914130932145,
      "beta": -0.19265272279249124,
      "gamma": 1.332111047884511,
      "success": true,
      "log_likelihood": -24.05694518872345,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.8909168643694958,
      "beta": 3.066095944851985,
      "gamma": 6.906017292533138,
      "success": true,
      "log_likelihood": -21.270320864234602,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.419736877819548,
      "beta": -2.0784843409542533,
      "gamma": 1.9273000729745726,
      "success": true,
      "log_likelihood": -24.897714325887407,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5002044616471786,
      "beta": -10.0,
      "gamma": 1.5651554306185167,
      "success": true,
      "log_likelihood": -24.95348009370785,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5633198445240241,
      "beta": -10.0,
      "gamma": 0.11736962329738088,
      "success": true,
      "log_likelihood": -24.95343469583851,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.4371181420882049,
      "beta": -2.079705817251849,
      "gamma": 4.76123614853861,
      "success": true,
      "log_likelihood": -24.897714412812324,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.3667525801603682,
      "beta": 1.5230356703454317,
      "gamma": 3.952892146416316,
      "success": true,
      "log_likelihood": -22.157938154810655,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.268936401838534,
      "beta": -9.999999999999998,
      "gamma": 1.9476603761400257,
      "success": true,
      "log_likelihood": -24.95388867452815,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.162621939091387,
      "beta": -2.0785016749866183,
      "gamma": 6.1370916581585035,
      "success": true,
      "log_likelihood": -24.897714326207044,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.8829782681740767,
      "beta": -0.6790492189573589,
      "gamma": 9.521451831318656,
      "success": true,
      "log_likelihood": -24.450957568502396,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.2711343338302432,
      "beta": -10.0,
      "gamma": 0.3262671038528553,
      "success": true,
      "log_likelihood": -24.953480093707302,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.6638976909115415,
      "beta": -10.0,
      "gamma": 3.2348209153792262,
      "success": true,
      "log_likelihood": -24.95357088944664,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.102349699728348,
      "beta": -10.0,
      "gamma": 1.8664347727827424,
      "success": true,
      "log_likelihood": -24.953661685183537,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5770994088945285,
      "beta": 10.0,
      "gamma": 4.80045100286826,
      "success": true,
      "log_likelihood": -15.277678697831654,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.6643349783675693,
      "beta": -10.0,
      "gamma": 4.45462060824765,
      "success": true,
      "log_likelihood": -24.953934072400862,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.8603711731135453,
      "beta": 10.0,
      "gamma": 3.8038211713772387,
      "success": true,
      "log_likelihood": -18.27754250352232,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.8503301314798742,
      "beta": -0.19265656437829115,
      "gamma": 0.3999471351583339,
      "success": true,
      "log_likelihood": -24.05694518872642,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5944140553363071,
      "beta": -10.0,
      "gamma": 0.8116117180810467,
      "success": true,
      "log_likelihood": -24.953298502232364,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.0972032301548942,
      "beta": -10.0,
      "gamma": 2.687678774372655,
      "success": true,
      "log_likelihood": -24.953979470267164,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.1478892901943363,
      "beta": -10.0,
      "gamma": 0.0749400779706566,
      "success": true,
      "log_likelihood": -24.95338929796979,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.07818389468925,
      "beta": -10.0,
      "gamma": 0.6112066535158089,
      "success": true,
      "log_likelihood": -24.95375248091996,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.2158801237922776,
      "beta": -1.2475837562864374,
      "gamma": 7.9907367793405975,
      "success": true,
      "log_likelihood": -24.730616753051642,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.467241468782242,
      "beta": 10.0,
      "gamma": 9.450613859092828,
      "success": true,
      "log_likelihood": -14.277724095931502,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.211293390504381,
      "beta": 9.999999999999998,
      "gamma": 8.76125739335479,
      "success": true,
      "log_likelihood": -16.277633299726435,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.6675706288707598,
      "beta": -1.247460623319735,
      "gamma": 2.510248864351041,
      "success": true,
      "log_likelihood": -24.730616750358827,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.4620625505171456,
      "beta": 10.0,
      "gamma": 5.811662263451813,
      "success": true,
      "log_likelihood": -14.27772409593412,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.7792362886474037,
      "beta": -10.0,
      "gamma": 2.0368388552866836,
      "success": true,
      "log_likelihood": -24.953934072397185,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.378697244318544,
      "beta": -10.0,
      "gamma": 2.6488708997986867,
      "success": true,
      "log_likelihood": -24.953888674529118,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.9616909067485688,
      "beta": -2.0781449031813946,
      "gamma": 1.8325238003017008,
      "success": true,
      "log_likelihood": -24.897714324932164,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.7556586070961647,
      "beta": 10.0,
      "gamma": 5.683507466410086,
      "success": true,
      "log_likelihood": -19.277497105418664,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5139124518289995,
      "beta": -6.207799086170944,
      "gamma": 1.6410978921701929,
      "success": true,
      "log_likelihood": -24.953316666491716,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.3131630468393798,
      "beta": 1.5230241782100722,
      "gamma": 3.6969104714483625,
      "success": true,
      "log_likelihood": -22.15793815476333,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5639636560091057,
      "beta": 10.0,
      "gamma": 8.843617146019287,
      "success": true,
      "log_likelihood": -13.27776949403471,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.7918882172963516,
      "beta": -10.0,
      "gamma": 7.3575522226271275,
      "success": true,
      "log_likelihood": -24.95402486814425,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.4652221379631105,
      "beta": -0.19259182087712218,
      "gamma": 3.848902360648103,
      "success": true,
      "log_likelihood": -24.05694518971134,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.6665951101976002,
      "beta": -10.0,
      "gamma": 0.38771961351792505,
      "success": true,
      "log_likelihood": -24.953979470263427,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.9646787016338688,
      "beta": -2.0778904118792934,
      "gamma": 9.479910144755449,
      "success": true,
      "log_likelihood": -24.897714330844572,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.1877452144217768,
      "beta": 10.0,
      "gamma": 9.462338851980785,
      "success": true,
      "log_likelihood": -14.27772409593147,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.0927106291732032,
      "beta": -10.0,
      "gamma": 7.5769509171720095,
      "success": true,
      "log_likelihood": -24.95393407240561,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5828191952834376,
      "beta": -10.0,
      "gamma": 8.140604275510002,
      "success": true,
      "log_likelihood": -24.953298502232368,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.6994494159938139,
      "beta": -0.19264876118262605,
      "gamma": 5.979028763939739,
      "success": true,
      "log_likelihood": -24.05694518872853,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.3830694855219168,
      "beta": -10.0,
      "gamma": 2.834034853696974,
      "success": true,
      "log_likelihood": -24.953934072398383,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5121941889199035,
      "beta": 1.5232561181037954,
      "gamma": 0.7789027567416307,
      "success": true,
      "log_likelihood": -22.157938159935753,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.500208603631592,
      "beta": -10.0,
      "gamma": 1.5931766310993267,
      "success": true,
      "log_likelihood": -24.953752480921025,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.29381421860999,
      "beta": 10.0,
      "gamma": 9.443155529294621,
      "success": true,
      "log_likelihood": -13.27776949403421,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.7161358399164439,
      "beta": -10.0,
      "gamma": 1.2444179759669727,
      "success": true,
      "log_likelihood": -24.953343900101217,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.3535801048216265,
      "beta": 1.522633567502996,
      "gamma": 7.941624114121075,
      "success": true,
      "log_likelihood": -22.157938166115134,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "phi": {
        "r": -0.004138875577471235,
        "p": 0.967400677503779
      },
      "beta": {
        "r": 0.7297183061210039,
        "p": 7.21336833339373e-18
      },
      "gamma": {
        "r": 0.08246054525625786,
        "p": 0.41471266718021704
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 53.922694143612524,
  "bic_results": {
    "average_bic": 53.922694143612524,
    "individual_bics": [
      60.658515755896474,
      60.6571538198331,
      60.545985640376685,
      60.65742620704951,
      60.65733541130804,
      57.84250314306753,
      33.306277395853854,
      56.57957691855468,
      33.30627739585332,
      60.65751700278685,
      60.657335411310626,
      60.65842496018293,
      60.65742620704988,
      33.30627739586181,
      33.30627739586066,
      33.306277395852476,
      33.306277395848255,
      43.30582341482659,
      41.305914211035024,
      33.30627739585666,
      60.21179031623329,
      43.30582341482034,
      60.65760779852012,
      60.54598546357309,
      60.65718939753077,
      59.65247195237393,
      60.21179034144579,
      60.65788018573767,
      41.30591421102737,
      49.30555102620555,
      33.30627739584736,
      60.658515755913086,
      60.65742620704816,
      60.65751700278838,
      33.306277395848255,
      57.842503143067574,
      55.06643313161037,
      60.657181587851,
      56.57957691819769,
      39.30600500723344,
      58.86444719281805,
      60.65806177721795,
      35.3061865996424,
      60.21179031601733,
      58.864447192815234,
      53.29119854383754,
      60.54598546714314,
      60.65751700278403,
      60.65742620704535,
      60.54598564099298,
      55.06643312498964,
      60.65833416442463,
      60.545985467782415,
      59.65247195237312,
      60.65751700278294,
      60.65769859426162,
      60.65788018573541,
      41.305914211031634,
      60.65842496017005,
      47.305641822412966,
      58.864447192821174,
      60.657153819833056,
      60.658515755902656,
      60.65733541130791,
      60.658061777208246,
      60.21179032147161,
      39.306005007231335,
      43.305823414821205,
      60.21179031608598,
      39.30600500723657,
      60.658424960162705,
      60.65833416442656,
      60.54598546523266,
      49.30555102620566,
      60.65719014835176,
      55.066433124894985,
      37.30609580343775,
      60.65860655165683,
      58.86444719479101,
      60.65851575589518,
      60.54598547705747,
      39.30600500723127,
      60.658424960179545,
      60.65715381983307,
      58.864447192825395,
      60.65842496016509,
      55.06643313523983,
      60.65806177721038,
      37.30609580343675,
      60.65724461557076,
      55.0664331475986
    ],
    "group_enabled": false,
    "group_bics": null,
    "num_parameters": 3,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- phi: r = -0.004\n- beta: r = 0.730\n- gamma: r = 0.082",
  "previous_models": [
    "Specification: a = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + \u03b4\na_mod = 1.08 * a * (1 + 0.012 * sin(a + 0.045))\nz = a_mod * (1 + 0.008 * cos(a + 0.065)) * (1 + 0.005 * sin(a + 0.115)) * (1 + 0.004 * cos(a + 0.085)) * (1 + 0.006 * (sin(a + 0.035) * cos(a + 0.055))) * (1 + 0.003 * (sin(a + 0.03) * cos(a + 0.05)))\nw = (phi - 0.5) / phi\nf_adapt(z) = { clip[1.002 * ( (z^w) * (ln(1+z))^(1-w) * (z/(1+abs(z))) ), -30, 30 ]  if z \u2265 0 ;  phi * ( ( (z + 1e-6)/(1+abs(z + 1e-6)) )^44 )  if z < 0 }\nT = \u03a3[k=0 to 100] (a/2)^k\nextra_base = exp(-a/0.1) * (z/(1+abs(z))) * (1 + 0.005 * sin(1/(1+a))) * (1 + 0.002 * cos(0.5*a)) * ((1 + 0.003 * cos(0.3*a))^2) * ((1 + 0.004 * cos(0.3*a))^2) * (1 + 0.0025 * cos(0.7*a)) * (1 + tanh(0.05*a)) * (1 + 1/(1+exp(-0.01*a))) * (1 + 0.002 * cos(3*a)) * (1 + 0.002*( sin(2.5*a) + 0.001*cos(3.5*a) + 0.0015*sin(3*a) )) * (1 + 1/(1+exp(-0.03*a))) * (1 + tanh(0.07*a)) * (1 + cos(3.1*a)) * (1 + 1/(1+exp(-0.04*a))) * (1 + tanh(0.08*a)) * (1 + cos(3.2*a)) * (1 + 1/(1+exp(-0.05*a))) * (1 + tanh(0.1*a)) * (1 + cos(3.4*a)) * (1 + 1/(1+exp(-0.06*a))) * (1 + tanh(0.12*a)) * (1 + cos(3.6*a)) * (1 + 1/(1+exp(-0.08*a))) * (1 + tanh(0.2*a)) * (1 + cos(4.2*a)) * (1 + sin(4.0*a)) * (1 + 1/(1+exp(-0.12*a))) * (1 + tanh(0.3*a)) * (1 + sin(4.2*a))\nextra = extra_base * exp(-((a-1)^2)/(2*(0.25)^2)) * softplus(softplus(softplus(softplus(softplus(softplus(softplus(0.865/(1+a)))))))\nextra = extra^(0.9478 + 0.00018 * ln(1+a))\nExponent = (0.9478 + 0.00018 * ln(1+a)) * (1 + 0.008 * tanh(0.5*a) + 0.003 * sin(3.2*a) + 0.002 * cos(2.5*a))\nf(x) = sign(z) * ( ( f_adapt(z) * T * extra )^(Exponent) )\nU = beta + gamma * f(x)\nP(accept=1) = 1 / (1 + exp(-U))\nSummary: A complex nonlinear utility model that first computes a core fairness measure (a) from fixed proposal components and then modulates it via sequential sinusoidal, logarithmic, and softplus transformations. The model applies a piecewise adaptive function (f_adapt) that penalizes extreme unfairness with an enhanced exponent for negative values, incorporates a dynamic threshold via a geometric series sum, and augments the signal with an extra composite term that captures oscillatory and localized effects. The final transformed signal is raised to a modulated exponent before linearly combining with a base parameter (beta) and a scaling parameter (gamma) to form the latent utility, which is mapped to an acceptance probability using a logistic function. Only three learnable parameters (beta, gamma, phi) with finite bounds are used.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 53.922694143612524\nOverall Accuracy: 0.5611\n\nParameter Recovery:\n- phi: r = -0.004\n- beta: r = 0.730\n- gamma: r = 0.082"
  ]
}