{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "<think>\nFor run 158, the aim is to further improve accuracy, lower BIC, and enhance parameter recovery by increasing model flexibility in its nonlinear and oscillatory components. In this new version, explicitly increase the penalty for extreme negative proposals by raising the negative\u2010branch exponent in f_adapt from 44 to 46. In the extra composite term, add two new multiplicative factors: one equal to [1 + sigmoid(0.14 \u00d7 a)] and another equal to [1 + tanh(0.35 \u00d7 a)]. Also, include an additional oscillatory factor [1 + sin(4.2 \u00d7 a)]. Additionally, nest one extra softplus layer so that softplus is applied seven times in succession (instead of six). Extend the dynamic threshold T by summing from k = 0 to 100 (if not already done) and consider allowing additional polynomial terms or even using a rational function form for T to boost flexibility. Finally, modify the final exponent modulation by multiplying it by an extra factor [1 + 0.009 \u00d7 tanh(0.5 \u00d7 a) + 0.004 \u00d7 sin(3.5 \u00d7 a) + 0.003 \u00d7 cos(2.7 \u00d7 a) + 0.002 \u00d7 sin(4.0 \u00d7 a)] and also multiply the extra composite term by a small Gaussian radial basis function exp(\u2013((a \u2013 1)\u00b2)/(2 \u00d7 (0.25)\u00b2)). These suggestions aim to capture localized nonlinear effects and additional cyclic patterns that might improve model performance.\n</think>\n\nNew Instructions for Run 158:\n\n1. Compute the core sum a as the sum of fixed components F\u2081,\u2026,F\u2081\u2081 plus a small constant \u03b4.\n2. Define a_mod = 1.08 \u00d7 a \u00d7 [1 + 0.012 \u00d7 sin(a + 0.045)].\n3. Multiply a_mod sequentially by:\n\u2003\u2003\u2022 [1 + 0.008 \u00d7 cos(a + 0.065)]\n\u2003\u2003\u2022 [1 + 0.005 \u00d7 sin(a + 0.115)]\n\u2003\u2003\u2022 [1 + 0.004 \u00d7 cos(a + 0.085)]\n\u2003\u2003\u2022 [1 + 0.006 \u00d7 (sin(a + 0.035) \u00d7 cos(a + 0.055))]\n\u2003\u2003\u2022 [1 + 0.003 \u00d7 (sin(a + 0.03) \u00d7 cos(a + 0.05))]\n\u2003Define z as the resulting product.\n4. Compute w = (phi \u2212 0.5) / phi.\n\u2003\u2003\u2022 For z \u2265 0, set f_adapt(z) = clip[1.002 \u00d7 (z^w \u00d7 (ln(1+z))^(1\u2212w) \u00d7 softsign(z)), \u221230, 30], where softsign(x) = x/(1+|x|).\n\u2003\u2003\u2022 For z < 0, set f_adapt(z) = phi \u00d7 [softsign(z + \u0394_shift)]^(46), with \u0394_shift = 1\u00d710\u207b\u2076.\n5. Define the dynamic threshold T as the sum from k = 0 to 100 of (a^k \u00d7 (\u00bd)^k).\n6. Define the extra composite term extra as the product of:\n\u2003\u2003\u2022 exp(\u2013a/0.1)\n\u2003\u2003\u2022 [z/(1 + |z|)]\n\u2003\u2003\u2022 [1 + 0.005 \u00d7 sin(1/(1+a))]\n\u2003\u2003\u2022 [1 + 0.002 \u00d7 cos(0.5\u00d7a)]\n\u2003\u2003\u2022 ([1 + 0.003 \u00d7 cos(0.3\u00d7a)]\u00b2)\n\u2003\u2003\u2022 ([1 + 0.004 \u00d7 cos(0.3\u00d7a)]\u00b2)\n\u2003\u2003\u2022 [1 + 0.0025 \u00d7 cos(0.7\u00d7a)]\n\u2003\u2003\u2022 [1 + tanh(0.05\u00d7a)]\n\u2003\u2003\u2022 [1 + sigmoid(0.01\u00d7a)]\n\u2003\u2003\u2022 [1 + 0.002 \u00d7 cos(3\u00d7a)]\n\u2003\u2003\u2022 [1 + 0.002 \u00d7 (sin(2.5\u00d7a) + 0.001 \u00d7 cos(3.5\u00d7a) + 0.0015 \u00d7 sin(3\u00d7a))]\n\u2003\u2003\u2022 [1 + sigmoid(0.03\u00d7a)]\n\u2003\u2003\u2022 [1 + tanh(0.07\u00d7a)]\n\u2003\u2003\u2022 [1 + cos(3.1\u00d7a)]\n\u2003\u2003\u2022 [1 + sigmoid(0.04\u00d7a)]\n\u2003\u2003\u2022 [1 + tanh(0.08\u00d7a)]\n\u2003\u2003\u2022 [1 + cos(3.2\u00d7a)]\n\u2003\u2003\u2022 [1 + sigmoid(0.05\u00d7a)]\n\u2003\u2003\u2022 [1 + tanh(0.1\u00d7a)]\n\u2003\u2003\u2022 [1 + cos(3.4\u00d7a)]\n\u2003\u2003\u2022 [1 + sigmoid(0.06\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new)\n\u2003\u2003\u2022 [1 + tanh(0.12\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new)\n\u2003\u2003\u2022 [1 + cos(3.6\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new)\n\u2003\u2003\u2022 [1 + sigmoid(0.08\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new)\n\u2003\u2003\u2022 [1 + tanh(0.2\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new)\n\u2003\u2003\u2022 [1 + cos(4.2\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new)\n\u2003\u2003\u2022 [1 + sin(4.0\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new)\n\u2003\u2003\u2022 [1 + sigmoid(0.12\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new)\n\u2003\u2003\u2022 [1 + tanh(0.3\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new)\n\u2003\u2003\u2022 [1 + sin(4.2\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new)\nAlso, multiply extra by a Gaussian radial basis function exp(\u2013((a\u20131)\u00b2)/(2\u00d7(0.25)\u00b2)). Then, nest one additional softplus layer so that softplus is applied seven times in succession to 0.865/(1+a). Finally, raise the entire product to the power [0.9478 + 0.00018 \u00d7 ln(1+a)].\n7. Define the final exponent modulation factor as:\n\u2003\u2003Exponent = [0.9478 + 0.00018 \u00d7 ln(1+a)] \u00d7 [1 + 0.008 \u00d7 tanh(0.5\u00d7a) + 0.003 \u00d7 sin(3.2\u00d7a) + 0.002 \u00d7 cos(2.5\u00d7a) + 0.002 \u00d7 sin(4.0\u00d7a)].\n8. Compute the final transformed signal: f(x) = sign(z) \u00d7 { [ f_adapt(z) \u00d7 T \u00d7 extra ]^(Exponent) }.\n9. Compute latent utility U = beta + gamma \u00d7 f(x) and then define P(accept = 1) = 1/(1 + exp(\u2013U)).\n10. Use exactly three learnable parameters with finite bounds: beta \u2208 [\u201310, 10], gamma \u2208 [0, 10], and phi \u2208 [0.5, 1.5].\n\nRemember to choose creative nonlinear interactions and oscillatory patterns beyond the obvious ones.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: <think>\nFor run 158, the aim is to further improve accuracy, lower BIC, and enhance parameter recovery by increasing model flexibility in its nonlinear and oscillatory components. In this new version, explicitly increase the penalty for extreme negative proposals by raising the negative\u2010branch exponent in f_adapt from 44 to 46. In the extra composite term, add two new multiplicative factors: one equal to [1 + sigmoid(0.14 \u00d7 a)] and another equal to [1 + tanh(0.35 \u00d7 a)]. Also, include an additional oscillatory factor [1 + sin(4.2 \u00d7 a)]. Additionally, nest one extra softplus layer so that softplus is applied seven times in succession (instead of six). Extend the dynamic threshold T by summing from k = 0 to 100 (if not already done) and consider allowing additional polynomial terms or even using a rational function form for T to boost flexibility. Finally, modify the final exponent modulation by multiplying it by an extra factor [1 + 0.009 \u00d7 tanh(0.5 \u00d7 a) + 0.004 \u00d7 sin(3.5 \u00d7 a) + 0.003 \u00d7 cos(2.7 \u00d7 a) + 0.002 \u00d7 sin(4.0 \u00d7 a)] and also multiply the extra composite term by a small Gaussian radial basis function exp(\u2013((a \u2013 1)\u00b2)/(2 \u00d7 (0.25)\u00b2)). These suggestions aim to capture localized nonlinear effects and additional cyclic patterns that might improve model performance.\n</think>\n\nNew Instructions for Run 158:\n\n1. Compute the core sum a as the sum of fixed components F\u2081,\u2026,F\u2081\u2081 plus a small constant \u03b4.\n2. Define a_mod = 1.08 \u00d7 a \u00d7 [1 + 0.012 \u00d7 sin(a + 0.045)].\n3. Multiply a_mod sequentially by:\n\u2003\u2003\u2022 [1 + 0.008 \u00d7 cos(a + 0.065)]\n\u2003\u2003\u2022 [1 + 0.005 \u00d7 sin(a + 0.115)]\n\u2003\u2003\u2022 [1 + 0.004 \u00d7 cos(a + 0.085)]\n\u2003\u2003\u2022 [1 + 0.006 \u00d7 (sin(a + 0.035) \u00d7 cos(a + 0.055))]\n\u2003\u2003\u2022 [1 + 0.003 \u00d7 (sin(a + 0.03) \u00d7 cos(a + 0.05))]\n\u2003Define z as the resulting product.\n4. Compute w = (phi \u2212 0.5) / phi.\n\u2003\u2003\u2022 For z \u2265 0, set f_adapt(z) = clip[1.002 \u00d7 (z^w \u00d7 (ln(1+z))^(1\u2212w) \u00d7 softsign(z)), \u221230, 30], where softsign(x) = x/(1+|x|).\n\u2003\u2003\u2022 For z < 0, set f_adapt(z) = phi \u00d7 [softsign(z + \u0394_shift)]^(46), with \u0394_shift = 1\u00d710\u207b\u2076.\n5. Define the dynamic threshold T as the sum from k = 0 to 100 of (a^k \u00d7 (\u00bd)^k).\n6. Define the extra composite term extra as the product of:\n\u2003\u2003\u2022 exp(\u2013a/0.1)\n\u2003\u2003\u2022 [z/(1 + |z|)]\n\u2003\u2003\u2022 [1 + 0.005 \u00d7 sin(1/(1+a))]\n\u2003\u2003\u2022 [1 + 0.002 \u00d7 cos(0.5\u00d7a)]\n\u2003\u2003\u2022 ([1 + 0.003 \u00d7 cos(0.3\u00d7a)]\u00b2)\n\u2003\u2003\u2022 ([1 + 0.004 \u00d7 cos(0.3\u00d7a)]\u00b2)\n\u2003\u2003\u2022 [1 + 0.0025 \u00d7 cos(0.7\u00d7a)]\n\u2003\u2003\u2022 [1 + tanh(0.05\u00d7a)]\n\u2003\u2003\u2022 [1 + sigmoid(0.01\u00d7a)]\n\u2003\u2003\u2022 [1 + 0.002 \u00d7 cos(3\u00d7a)]\n\u2003\u2003\u2022 [1 + 0.002 \u00d7 (sin(2.5\u00d7a) + 0.001 \u00d7 cos(3.5\u00d7a) + 0.0015 \u00d7 sin(3\u00d7a))]\n\u2003\u2003\u2022 [1 + sigmoid(0.03\u00d7a)]\n\u2003\u2003\u2022 [1 + tanh(0.07\u00d7a)]\n\u2003\u2003\u2022 [1 + cos(3.1\u00d7a)]\n\u2003\u2003\u2022 [1 + sigmoid(0.04\u00d7a)]\n\u2003\u2003\u2022 [1 + tanh(0.08\u00d7a)]\n\u2003\u2003\u2022 [1 + cos(3.2\u00d7a)]\n\u2003\u2003\u2022 [1 + sigmoid(0.05\u00d7a)]\n\u2003\u2003\u2022 [1 + tanh(0.1\u00d7a)]\n\u2003\u2003\u2022 [1 + cos(3.4\u00d7a)]\n\u2003\u2003\u2022 [1 + sigmoid(0.06\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new)\n\u2003\u2003\u2022 [1 + tanh(0.12\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new)\n\u2003\u2003\u2022 [1 + cos(3.6\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new)\n\u2003\u2003\u2022 [1 + sigmoid(0.08\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new)\n\u2003\u2003\u2022 [1 + tanh(0.2\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new)\n\u2003\u2003\u2022 [1 + cos(4.2\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new)\n\u2003\u2003\u2022 [1 + sin(4.0\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new)\n\u2003\u2003\u2022 [1 + sigmoid(0.12\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new)\n\u2003\u2003\u2022 [1 + tanh(0.3\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new)\n\u2003\u2003\u2022 [1 + sin(4.2\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new)\nAlso, multiply extra by a Gaussian radial basis function exp(\u2013((a\u20131)\u00b2)/(2\u00d7(0.25)\u00b2)). Then, nest one additional softplus layer so that softplus is applied seven times in succession to 0.865/(1+a). Finally, raise the entire product to the power [0.9478 + 0.00018 \u00d7 ln(1+a)].\n7. Define the final exponent modulation factor as:\n\u2003\u2003Exponent = [0.9478 + 0.00018 \u00d7 ln(1+a)] \u00d7 [1 + 0.008 \u00d7 tanh(0.5\u00d7a) + 0.003 \u00d7 sin(3.2\u00d7a) + 0.002 \u00d7 cos(2.5\u00d7a) + 0.002 \u00d7 sin(4.0\u00d7a)].\n8. Compute the final transformed signal: f(x) = sign(z) \u00d7 { [ f_adapt(z) \u00d7 T \u00d7 extra ]^(Exponent) }.\n9. Compute latent utility U = beta + gamma \u00d7 f(x) and then define P(accept = 1) = 1/(1 + exp(\u2013U)).\n10. Use exactly three learnable parameters with finite bounds: beta \u2208 [\u201310, 10], gamma \u2208 [0, 10], and phi \u2208 [0.5, 1.5].\n\nRemember to choose creative nonlinear interactions and oscillatory patterns beyond the obvious ones.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<MODEL>\na = \u2211(i=1)^(11) F_i + \u03b4\na_mod = 1.08 \u00b7 a \u00b7 (1 + 0.012 \u00b7 sin(a + 0.045))\nz = a_mod \u00b7 (1 + 0.008 \u00b7 cos(a + 0.065)) \u00b7 (1 + 0.005 \u00b7 sin(a + 0.115)) \u00b7 (1 + 0.004 \u00b7 cos(a + 0.085)) \u00b7 (1 + 0.006 \u00b7 (sin(a + 0.035) \u00b7 cos(a + 0.055))) \u00b7 (1 + 0.003 \u00b7 (sin(a + 0.03) \u00b7 cos(a + 0.05)))\nw = (phi - 0.5) / phi\nf_adapt = { if z \u2265 0: clip[1.002 \u00b7 (z^w \u00b7 (ln(1+z))^(1-w) \u00b7 (z/(1+|z|))), -30, 30] ; if z < 0: phi \u00b7 ( (z + 1\u00d710^(-6))/(1 + |z + 1\u00d710^(-6)|) )^(46) }\nT = \u03a3(k=0)^(100) [a^k \u00b7 (0.5)^k]\nextra_base = exp(-a/0.1) \u00b7 (z/(1+|z|)) \u00b7 (1 + 0.005 \u00b7 sin(1/(1+a))) \u00b7 (1 + 0.002 \u00b7 cos(0.5 \u00b7 a)) \u00b7 (1 + 0.003 \u00b7 cos(0.3 \u00b7 a))^2 \u00b7 (1 + 0.004 \u00b7 cos(0.3 \u00b7 a))^2 \u00b7 (1 + 0.0025 \u00b7 cos(0.7 \u00b7 a)) \u00b7 (1 + tanh(0.05 \u00b7 a)) \u00b7 (1 + sigmoid(0.01 \u00b7 a)) \u00b7 (1 + 0.002 \u00b7 cos(3 \u00b7 a)) \u00b7 (1 + 0.002 \u00b7 (sin(2.5 \u00b7 a) + 0.001 \u00b7 cos(3.5 \u00b7 a) + 0.0015 \u00b7 sin(3 \u00b7 a))) \u00b7 (1 + sigmoid(0.03 \u00b7 a)) \u00b7 (1 + tanh(0.07 \u00b7 a)) \u00b7 (1 + cos(3.1 \u00b7 a)) \u00b7 (1 + sigmoid(0.04 \u00b7 a)) \u00b7 (1 + tanh(0.08 \u00b7 a)) \u00b7 (1 + cos(3.2 \u00b7 a)) \u00b7 (1 + sigmoid(0.05 \u00b7 a)) \u00b7 (1 + tanh(0.1 \u00b7 a)) \u00b7 (1 + cos(3.4 \u00b7 a)) \u00b7 (1 + sigmoid(0.06 \u00b7 a)) \u00b7 (1 + tanh(0.12 \u00b7 a)) \u00b7 (1 + cos(3.6 \u00b7 a)) \u00b7 (1 + sigmoid(0.08 \u00b7 a)) \u00b7 (1 + tanh(0.2 \u00b7 a)) \u00b7 (1 + cos(4.2 \u00b7 a)) \u00b7 (1 + sin(4.0 \u00b7 a)) \u00b7 (1 + sigmoid(0.12 \u00b7 a)) \u00b7 (1 + tanh(0.3 \u00b7 a)) \u00b7 (1 + sin(4.2 \u00b7 a))\nextra = extra_base \u00b7 exp(-((a - 1)^2)/(2 \u00b7 (0.25)^2)) \u00b7 softplus\u2077(0.865/(1+a))\nExponent = (0.9478 + 0.00018 \u00b7 ln(1+a)) \u00b7 (1 + 0.008 \u00b7 tanh(0.5 \u00b7 a) + 0.003 \u00b7 sin(3.2 \u00b7 a) + 0.002 \u00b7 cos(2.5 \u00b7 a) + 0.002 \u00b7 sin(4.0 \u00b7 a))\nf(x) = sign(z) \u00b7 [ f_adapt \u00b7 T \u00b7 extra ]^(Exponent)\nU = beta + gamma \u00b7 f(x)\nP(accept=1) = 1 / (1 + exp(-U))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"beta\": {\n      \"description\": \"Baseline utility parameter\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Scaling parameter for the transformed signal\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0,\n          \"high\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Parameter modulating the adaptation function and negative-branch penalty\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0.5,\n          \"high\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"F1\": {\n      \"description\": \"Fixed component 1 extracted from task data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F2\": {\n      \"description\": \"Fixed component 2 extracted from task data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F3\": {\n      \"description\": \"Fixed component 3 extracted from task data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F4\": {\n      \"description\": \"Fixed component 4 extracted from task data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F5\": {\n      \"description\": \"Fixed component 5 extracted from task data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F6\": {\n      \"description\": \"Fixed component 6 extracted from task data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F7\": {\n      \"description\": \"Fixed component 7 extracted from task data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F8\": {\n      \"description\": \"Fixed component 8 extracted from task data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F9\": {\n      \"description\": \"Fixed component 9 extracted from task data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F10\": {\n      \"description\": \"Fixed component 10 extracted from task data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F11\": {\n      \"description\": \"Fixed component 11 extracted from task data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"delta\": {\n      \"description\": \"Small constant added to the core sum a\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"a\": {\n      \"description\": \"Core sum computed as the sum of F1,...,F11 plus delta\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a_mod\": {\n      \"description\": \"Modified core sum after applying a sinusoidal adjustment\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"z\": {\n      \"description\": \"Intermediate signal incorporating multiple oscillatory factors\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"w\": {\n      \"description\": \"Weight exponent derived from phi for the adaptation function\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_adapt\": {\n      \"description\": \"Adaptation function applied to z, with increased penalty for negative z\",\n      \"range\": {\n        \"min\": -30,\n        \"max\": 30,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"T\": {\n      \"description\": \"Dynamic threshold computed as a finite geometric series sum from k = 0 to 100\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"extra\": {\n      \"description\": \"Composite term integrating exponential decay, oscillatory factors, a Gaussian RBF, and nested softplus (applied 7 times), raised to a flexible power\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"Exponent\": {\n      \"description\": \"Final exponent modulation factor combining a baseline exponent and additional cyclic adjustments\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_x\": {\n      \"description\": \"Final transformed signal computed as the sign of z multiplied by the product f_adapt, T, and extra raised to Exponent\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed as the linear combination of beta and gamma times the transformed signal f(x)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"P_accept\": {\n      \"description\": \"Probability of accepting the proposal, obtained via a logistic transform on U\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA nonlinear utility model that computes a core sum from 11 fixed data components and a constant, applies multiple sinusoidal and oscillatory modulations, and an adaptation function with an increased penalty for negative signals. A dynamic threshold and a rich composite term\u2014including nested softplus, Gaussian RBF, and numerous oscillatory factors\u2014are used to transform the signal. The latent utility is then formed as a linear combination of this transformed signal with beta and gamma, and converted to a choice probability via a logistic function.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['beta', 'gamma', 'phi']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                a = \u2211(i=1)^(11) F_i + \u03b4\na_mod = 1.08 \u00b7 a \u00b7 (1 + 0.012 \u00b7 sin(a + 0.045))\nz = a_mod \u00b7 (1 + 0.008 \u00b7 cos(a + 0.065)) \u00b7 (1 + 0.005 \u00b7 sin(a + 0.115)) \u00b7 (1 + 0.004 \u00b7 cos(a + 0.085)) \u00b7 (1 + 0.006 \u00b7 (sin(a + 0.035) \u00b7 cos(a + 0.055))) \u00b7 (1 + 0.003 \u00b7 (sin(a + 0.03) \u00b7 cos(a + 0.05)))\nw = (phi - 0.5) / phi\nf_adapt = { if z \u2265 0: clip[1.002 \u00b7 (z^w \u00b7 (ln(1+z))^(1-w) \u00b7 (z/(1+|z|))), -30, 30] ; if z < 0: phi \u00b7 ( (z + 1\u00d710^(-6))/(1 + |z + 1\u00d710^(-6)|) )^(46) }\nT = \u03a3(k=0)^(100) [a^k \u00b7 (0.5)^k]\nextra_base = exp(-a/0.1) \u00b7 (z/(1+|z|)) \u00b7 (1 + 0.005 \u00b7 sin(1/(1+a))) \u00b7 (1 + 0.002 \u00b7 cos(0.5 \u00b7 a)) \u00b7 (1 + 0.003 \u00b7 cos(0.3 \u00b7 a))^2 \u00b7 (1 + 0.004 \u00b7 cos(0.3 \u00b7 a))^2 \u00b7 (1 + 0.0025 \u00b7 cos(0.7 \u00b7 a)) \u00b7 (1 + tanh(0.05 \u00b7 a)) \u00b7 (1 + sigmoid(0.01 \u00b7 a)) \u00b7 (1 + 0.002 \u00b7 cos(3 \u00b7 a)) \u00b7 (1 + 0.002 \u00b7 (sin(2.5 \u00b7 a) + 0.001 \u00b7 cos(3.5 \u00b7 a) + 0.0015 \u00b7 sin(3 \u00b7 a))) \u00b7 (1 + sigmoid(0.03 \u00b7 a)) \u00b7 (1 + tanh(0.07 \u00b7 a)) \u00b7 (1 + cos(3.1 \u00b7 a)) \u00b7 (1 + sigmoid(0.04 \u00b7 a)) \u00b7 (1 + tanh(0.08 \u00b7 a)) \u00b7 (1 + cos(3.2 \u00b7 a)) \u00b7 (1 + sigmoid(0.05 \u00b7 a)) \u00b7 (1 + tanh(0.1 \u00b7 a)) \u00b7 (1 + cos(3.4 \u00b7 a)) \u00b7 (1 + sigmoid(0.06 \u00b7 a)) \u00b7 (1 + tanh(0.12 \u00b7 a)) \u00b7 (1 + cos(3.6 \u00b7 a)) \u00b7 (1 + sigmoid(0.08 \u00b7 a)) \u00b7 (1 + tanh(0.2 \u00b7 a)) \u00b7 (1 + cos(4.2 \u00b7 a)) \u00b7 (1 + sin(4.0 \u00b7 a)) \u00b7 (1 + sigmoid(0.12 \u00b7 a)) \u00b7 (1 + tanh(0.3 \u00b7 a)) \u00b7 (1 + sin(4.2 \u00b7 a))\nextra = extra_base \u00b7 exp(-((a - 1)^2)/(2 \u00b7 (0.25)^2)) \u00b7 softplus\u2077(0.865/(1+a))\nExponent = (0.9478 + 0.00018 \u00b7 ln(1+a)) \u00b7 (1 + 0.008 \u00b7 tanh(0.5 \u00b7 a) + 0.003 \u00b7 sin(3.2 \u00b7 a) + 0.002 \u00b7 cos(2.5 \u00b7 a) + 0.002 \u00b7 sin(4.0 \u00b7 a))\nf(x) = sign(z) \u00b7 [ f_adapt \u00b7 T \u00b7 extra ]^(Exponent)\nU = beta + gamma \u00b7 f(x)\nP(accept=1) = 1 / (1 + exp(-U))\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"beta\": {\n      \"description\": \"Baseline utility parameter\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Scaling parameter for the transformed signal\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0,\n          \"high\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Parameter modulating the adaptation function and negative-branch penalty\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0.5,\n          \"high\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"F1\": {\n      \"description\": \"Fixed component 1 extracted from task data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F2\": {\n      \"description\": \"Fixed component 2 extracted from task data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F3\": {\n      \"description\": \"Fixed component 3 extracted from task data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F4\": {\n      \"description\": \"Fixed component 4 extracted from task data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F5\": {\n      \"description\": \"Fixed component 5 extracted from task data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F6\": {\n      \"description\": \"Fixed component 6 extracted from task data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F7\": {\n      \"description\": \"Fixed component 7 extracted from task data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F8\": {\n      \"description\": \"Fixed component 8 extracted from task data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F9\": {\n      \"description\": \"Fixed component 9 extracted from task data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F10\": {\n      \"description\": \"Fixed component 10 extracted from task data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F11\": {\n      \"description\": \"Fixed component 11 extracted from task data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"delta\": {\n      \"description\": \"Small constant added to the core sum a\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"a\": {\n      \"description\": \"Core sum computed as the sum of F1,...,F11 plus delta\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a_mod\": {\n      \"description\": \"Modified core sum after applying a sinusoidal adjustment\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"z\": {\n      \"description\": \"Intermediate signal incorporating multiple oscillatory factors\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"w\": {\n      \"description\": \"Weight exponent derived from phi for the adaptation function\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_adapt\": {\n      \"description\": \"Adaptation function applied to z, with increased penalty for negative z\",\n      \"range\": {\n        \"min\": -30,\n        \"max\": 30,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"T\": {\n      \"description\": \"Dynamic threshold computed as a finite geometric series sum from k = 0 to 100\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"extra\": {\n      \"description\": \"Composite term integrating exponential decay, oscillatory factors, a Gaussian RBF, and nested softplus (applied 7 times), raised to a flexible power\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"Exponent\": {\n      \"description\": \"Final exponent modulation factor combining a baseline exponent and additional cyclic adjustments\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_x\": {\n      \"description\": \"Final transformed signal computed as the sign of z multiplied by the product f_adapt, T, and extra raised to Exponent\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed as the linear combination of beta and gamma times the transformed signal f(x)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"P_accept\": {\n      \"description\": \"Probability of accepting the proposal, obtained via a logistic transform on U\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, beta=0, gamma=1, phi=1):\n    model_predictions = []\n    for trial in trial_data:\n        # Extract fixed components\n        F1 = trial.get(\"F1\", 0)\n        F2 = trial.get(\"F2\", 0)\n        F3 = trial.get(\"F3\", 0)\n        F4 = trial.get(\"F4\", 0)\n        F5 = trial.get(\"F5\", 0)\n        F6 = trial.get(\"F6\", 0)\n        F7 = trial.get(\"F7\", 0)\n        F8 = trial.get(\"F8\", 0)\n        F9 = trial.get(\"F9\", 0)\n        F10 = trial.get(\"F10\", 0)\n        F11 = trial.get(\"F11\", 0)\n        delta = 0.5  # Assuming delta is a fixed constant (e.g., 0.5)\n\n        # Core sum\n        a = F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11 + delta\n\n        # Modified core sum\n        a_mod = 1.08 * a * (1 + 0.012 * math.sin(a + 0.045))\n\n        # Intermediate signal\n        z = a_mod * (1 + 0.008 * math.cos(a + 0.065)) * (1 + 0.005 * math.sin(a + 0.115)) * (1 + 0.004 * math.cos(a + 0.085)) * (1 + 0.006 * (math.sin(a + 0.035) * math.cos(a + 0.055))) * (1 + 0.003 * (math.sin(a + 0.03) * math.cos(a + 0.05)))\n\n        # Weight exponent\n        w = (phi - 0.5) / phi\n\n        # Adaptation function\n        if z >= 0:\n            f_adapt = min(max(1.002 * (z**w) * (math.log(1+z)**(1-w)) * (z/(1+abs(z))), -30), 30)\n        else:\n            f_adapt = phi * (((z + 1e-6) / (1 + abs(z + 1e-6)))**46)\n\n        # Dynamic threshold\n        T = sum([a**k * (0.5)**k for k in range(101)])\n\n        # Helper functions\n        def sigmoid(x):\n            return 1 / (1 + math.exp(-x))\n\n        def tanh(x):\n            return math.tanh(x)\n\n        def softplus(x):\n            return math.log(1 + math.exp(x))\n\n        # Extra base\n        extra_base = math.exp(-a/0.1) * (z/(1+abs(z))) * (1 + 0.005 * math.sin(1/(1+a))) * (1 + 0.002 * math.cos(0.5 * a)) * (1 + 0.003 * math.cos(0.3 * a))**2 * (1 + 0.004 * math.cos(0.3 * a))**2 * (1 + 0.0025 * math.cos(0.7 * a)) * (1 + tanh(0.05 * a)) * (1 + sigmoid(0.01 * a)) * (1 + 0.002 * math.cos(3 * a)) * (1 + 0.002 * (math.sin(2.5 * a) + 0.001 * math.cos(3.5 * a) + 0.0015 * math.sin(3 * a))) * (1 + sigmoid(0.03 * a)) * (1 + tanh(0.07 * a)) * (1 + math.cos(3.1 * a)) * (1 + sigmoid(0.04 * a)) * (1 + tanh(0.08 * a)) * (1 + math.cos(3.2 * a)) * (1 + sigmoid(0.05 * a)) * (1 + tanh(0.1 * a)) * (1 + math.cos(3.4 * a)) * (1 + sigmoid(0.06 * a)) * (1 + tanh(0.12 * a)) * (1 + math.cos(3.6 * a)) * (1 + sigmoid(0.08 * a)) * (1 + tanh(0.2 * a)) * (1 + math.cos(4.2 * a)) * (1 + math.sin(4.0 * a)) * (1 + sigmoid(0.12 * a)) * (1 + tanh(0.3 * a)) * (1 + math.sin(4.2 * a))\n\n        # Extra\n        def softplus_7(x):\n            val = x\n            for _ in range(7):\n              val = softplus(val)\n            return val\n        extra = extra_base * math.exp(-((a - 1)**2)/(2 * (0.25)**2)) * softplus_7(0.865/(1+a))\n\n        # Exponent\n        Exponent = (0.9478 + 0.00018 * math.log(1+a)) * (1 + 0.008 * tanh(0.5 * a) + 0.003 * math.sin(3.2 * a) + 0.002 * math.cos(2.5 * a) + 0.002 * math.sin(4.0 * a))\n\n        # Transformed signal\n        f_x = math.copysign(1, z) * ( (f_adapt * T * extra)**Exponent)\n\n        # Latent utility\n        U = beta + gamma * f_x\n\n        # Probability of accepting\n        P_accept = 1 / (1 + math.exp(-U))\n\n        model_predictions.append(P_accept)\n\n    return model_predictions\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n```",
      "timestamp": 1743549463.361502
    }
  ],
  "learnable_parameters": {
    "beta": {
      "description": "Baseline utility parameter",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -10,
          "high": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Scaling parameter for the transformed signal",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0,
          "high": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "phi": {
      "description": "Parameter modulating the adaptation function and negative-branch penalty",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0.5,
          "high": 1.5
        }
      },
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "a = \u2211(i=1)^(11) F_i + \u03b4\na_mod = 1.08 \u00b7 a \u00b7 (1 + 0.012 \u00b7 sin(a + 0.045))\nz = a_mod \u00b7 (1 + 0.008 \u00b7 cos(a + 0.065)) \u00b7 (1 + 0.005 \u00b7 sin(a + 0.115)) \u00b7 (1 + 0.004 \u00b7 cos(a + 0.085)) \u00b7 (1 + 0.006 \u00b7 (sin(a + 0.035) \u00b7 cos(a + 0.055))) \u00b7 (1 + 0.003 \u00b7 (sin(a + 0.03) \u00b7 cos(a + 0.05)))\nw = (phi - 0.5) / phi\nf_adapt = { if z \u2265 0: clip[1.002 \u00b7 (z^w \u00b7 (ln(1+z))^(1-w) \u00b7 (z/(1+|z|))), -30, 30] ; if z < 0: phi \u00b7 ( (z + 1\u00d710^(-6))/(1 + |z + 1\u00d710^(-6)|) )^(46) }\nT = \u03a3(k=0)^(100) [a^k \u00b7 (0.5)^k]\nextra_base = exp(-a/0.1) \u00b7 (z/(1+|z|)) \u00b7 (1 + 0.005 \u00b7 sin(1/(1+a))) \u00b7 (1 + 0.002 \u00b7 cos(0.5 \u00b7 a)) \u00b7 (1 + 0.003 \u00b7 cos(0.3 \u00b7 a))^2 \u00b7 (1 + 0.004 \u00b7 cos(0.3 \u00b7 a))^2 \u00b7 (1 + 0.0025 \u00b7 cos(0.7 \u00b7 a)) \u00b7 (1 + tanh(0.05 \u00b7 a)) \u00b7 (1 + sigmoid(0.01 \u00b7 a)) \u00b7 (1 + 0.002 \u00b7 cos(3 \u00b7 a)) \u00b7 (1 + 0.002 \u00b7 (sin(2.5 \u00b7 a) + 0.001 \u00b7 cos(3.5 \u00b7 a) + 0.0015 \u00b7 sin(3 \u00b7 a))) \u00b7 (1 + sigmoid(0.03 \u00b7 a)) \u00b7 (1 + tanh(0.07 \u00b7 a)) \u00b7 (1 + cos(3.1 \u00b7 a)) \u00b7 (1 + sigmoid(0.04 \u00b7 a)) \u00b7 (1 + tanh(0.08 \u00b7 a)) \u00b7 (1 + cos(3.2 \u00b7 a)) \u00b7 (1 + sigmoid(0.05 \u00b7 a)) \u00b7 (1 + tanh(0.1 \u00b7 a)) \u00b7 (1 + cos(3.4 \u00b7 a)) \u00b7 (1 + sigmoid(0.06 \u00b7 a)) \u00b7 (1 + tanh(0.12 \u00b7 a)) \u00b7 (1 + cos(3.6 \u00b7 a)) \u00b7 (1 + sigmoid(0.08 \u00b7 a)) \u00b7 (1 + tanh(0.2 \u00b7 a)) \u00b7 (1 + cos(4.2 \u00b7 a)) \u00b7 (1 + sin(4.0 \u00b7 a)) \u00b7 (1 + sigmoid(0.12 \u00b7 a)) \u00b7 (1 + tanh(0.3 \u00b7 a)) \u00b7 (1 + sin(4.2 \u00b7 a))\nextra = extra_base \u00b7 exp(-((a - 1)^2)/(2 \u00b7 (0.25)^2)) \u00b7 softplus\u2077(0.865/(1+a))\nExponent = (0.9478 + 0.00018 \u00b7 ln(1+a)) \u00b7 (1 + 0.008 \u00b7 tanh(0.5 \u00b7 a) + 0.003 \u00b7 sin(3.2 \u00b7 a) + 0.002 \u00b7 cos(2.5 \u00b7 a) + 0.002 \u00b7 sin(4.0 \u00b7 a))\nf(x) = sign(z) \u00b7 [ f_adapt \u00b7 T \u00b7 extra ]^(Exponent)\nU = beta + gamma \u00b7 f(x)\nP(accept=1) = 1 / (1 + exp(-U))",
  "variable_descriptions": {
    "beta": {
      "description": "Baseline utility parameter",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -10,
          "high": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Scaling parameter for the transformed signal",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0,
          "high": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "phi": {
      "description": "Parameter modulating the adaptation function and negative-branch penalty",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0.5,
          "high": 1.5
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "F1": {
      "description": "Fixed component 1 extracted from task data",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "F2": {
      "description": "Fixed component 2 extracted from task data",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "F3": {
      "description": "Fixed component 3 extracted from task data",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "F4": {
      "description": "Fixed component 4 extracted from task data",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "F5": {
      "description": "Fixed component 5 extracted from task data",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "F6": {
      "description": "Fixed component 6 extracted from task data",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "F7": {
      "description": "Fixed component 7 extracted from task data",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "F8": {
      "description": "Fixed component 8 extracted from task data",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "F9": {
      "description": "Fixed component 9 extracted from task data",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "F10": {
      "description": "Fixed component 10 extracted from task data",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "F11": {
      "description": "Fixed component 11 extracted from task data",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "delta": {
      "description": "Small constant added to the core sum a",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "fixed"
    },
    "a": {
      "description": "Core sum computed as the sum of F1,...,F11 plus delta",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "a_mod": {
      "description": "Modified core sum after applying a sinusoidal adjustment",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "z": {
      "description": "Intermediate signal incorporating multiple oscillatory factors",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "w": {
      "description": "Weight exponent derived from phi for the adaptation function",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "f_adapt": {
      "description": "Adaptation function applied to z, with increased penalty for negative z",
      "range": {
        "min": -30,
        "max": 30,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "T": {
      "description": "Dynamic threshold computed as a finite geometric series sum from k = 0 to 100",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "extra": {
      "description": "Composite term integrating exponential decay, oscillatory factors, a Gaussian RBF, and nested softplus (applied 7 times), raised to a flexible power",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "Exponent": {
      "description": "Final exponent modulation factor combining a baseline exponent and additional cyclic adjustments",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "f_x": {
      "description": "Final transformed signal computed as the sign of z multiplied by the product f_adapt, T, and extra raised to Exponent",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "U": {
      "description": "Latent utility computed as the linear combination of beta and gamma times the transformed signal f(x)",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "P_accept": {
      "description": "Probability of accepting the proposal, obtained via a logistic transform on U",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "A nonlinear utility model that computes a core sum from 11 fixed data components and a constant, applies multiple sinusoidal and oscillatory modulations, and an adaptation function with an increased penalty for negative signals. A dynamic threshold and a rich composite term\u2014including nested softplus, Gaussian RBF, and numerous oscillatory factors\u2014are used to transform the signal. The latent utility is then formed as a linear combination of this transformed signal with beta and gamma, and converted to a choice probability via a logistic function.",
  "target_variable": "accept",
  "full_reasoning": "<MODEL>\na = \u2211(i=1)^(11) F_i + \u03b4\na_mod = 1.08 \u00b7 a \u00b7 (1 + 0.012 \u00b7 sin(a + 0.045))\nz = a_mod \u00b7 (1 + 0.008 \u00b7 cos(a + 0.065)) \u00b7 (1 + 0.005 \u00b7 sin(a + 0.115)) \u00b7 (1 + 0.004 \u00b7 cos(a + 0.085)) \u00b7 (1 + 0.006 \u00b7 (sin(a + 0.035) \u00b7 cos(a + 0.055))) \u00b7 (1 + 0.003 \u00b7 (sin(a + 0.03) \u00b7 cos(a + 0.05)))\nw = (phi - 0.5) / phi\nf_adapt = { if z \u2265 0: clip[1.002 \u00b7 (z^w \u00b7 (ln(1+z))^(1-w) \u00b7 (z/(1+|z|))), -30, 30] ; if z < 0: phi \u00b7 ( (z + 1\u00d710^(-6))/(1 + |z + 1\u00d710^(-6)|) )^(46) }\nT = \u03a3(k=0)^(100) [a^k \u00b7 (0.5)^k]\nextra_base = exp(-a/0.1) \u00b7 (z/(1+|z|)) \u00b7 (1 + 0.005 \u00b7 sin(1/(1+a))) \u00b7 (1 + 0.002 \u00b7 cos(0.5 \u00b7 a)) \u00b7 (1 + 0.003 \u00b7 cos(0.3 \u00b7 a))^2 \u00b7 (1 + 0.004 \u00b7 cos(0.3 \u00b7 a))^2 \u00b7 (1 + 0.0025 \u00b7 cos(0.7 \u00b7 a)) \u00b7 (1 + tanh(0.05 \u00b7 a)) \u00b7 (1 + sigmoid(0.01 \u00b7 a)) \u00b7 (1 + 0.002 \u00b7 cos(3 \u00b7 a)) \u00b7 (1 + 0.002 \u00b7 (sin(2.5 \u00b7 a) + 0.001 \u00b7 cos(3.5 \u00b7 a) + 0.0015 \u00b7 sin(3 \u00b7 a))) \u00b7 (1 + sigmoid(0.03 \u00b7 a)) \u00b7 (1 + tanh(0.07 \u00b7 a)) \u00b7 (1 + cos(3.1 \u00b7 a)) \u00b7 (1 + sigmoid(0.04 \u00b7 a)) \u00b7 (1 + tanh(0.08 \u00b7 a)) \u00b7 (1 + cos(3.2 \u00b7 a)) \u00b7 (1 + sigmoid(0.05 \u00b7 a)) \u00b7 (1 + tanh(0.1 \u00b7 a)) \u00b7 (1 + cos(3.4 \u00b7 a)) \u00b7 (1 + sigmoid(0.06 \u00b7 a)) \u00b7 (1 + tanh(0.12 \u00b7 a)) \u00b7 (1 + cos(3.6 \u00b7 a)) \u00b7 (1 + sigmoid(0.08 \u00b7 a)) \u00b7 (1 + tanh(0.2 \u00b7 a)) \u00b7 (1 + cos(4.2 \u00b7 a)) \u00b7 (1 + sin(4.0 \u00b7 a)) \u00b7 (1 + sigmoid(0.12 \u00b7 a)) \u00b7 (1 + tanh(0.3 \u00b7 a)) \u00b7 (1 + sin(4.2 \u00b7 a))\nextra = extra_base \u00b7 exp(-((a - 1)^2)/(2 \u00b7 (0.25)^2)) \u00b7 softplus\u2077(0.865/(1+a))\nExponent = (0.9478 + 0.00018 \u00b7 ln(1+a)) \u00b7 (1 + 0.008 \u00b7 tanh(0.5 \u00b7 a) + 0.003 \u00b7 sin(3.2 \u00b7 a) + 0.002 \u00b7 cos(2.5 \u00b7 a) + 0.002 \u00b7 sin(4.0 \u00b7 a))\nf(x) = sign(z) \u00b7 [ f_adapt \u00b7 T \u00b7 extra ]^(Exponent)\nU = beta + gamma \u00b7 f(x)\nP(accept=1) = 1 / (1 + exp(-U))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"beta\": {\n      \"description\": \"Baseline utility parameter\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Scaling parameter for the transformed signal\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0,\n          \"high\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Parameter modulating the adaptation function and negative-branch penalty\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0.5,\n          \"high\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"F1\": {\n      \"description\": \"Fixed component 1 extracted from task data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F2\": {\n      \"description\": \"Fixed component 2 extracted from task data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F3\": {\n      \"description\": \"Fixed component 3 extracted from task data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F4\": {\n      \"description\": \"Fixed component 4 extracted from task data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F5\": {\n      \"description\": \"Fixed component 5 extracted from task data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F6\": {\n      \"description\": \"Fixed component 6 extracted from task data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F7\": {\n      \"description\": \"Fixed component 7 extracted from task data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F8\": {\n      \"description\": \"Fixed component 8 extracted from task data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F9\": {\n      \"description\": \"Fixed component 9 extracted from task data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F10\": {\n      \"description\": \"Fixed component 10 extracted from task data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F11\": {\n      \"description\": \"Fixed component 11 extracted from task data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"delta\": {\n      \"description\": \"Small constant added to the core sum a\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"a\": {\n      \"description\": \"Core sum computed as the sum of F1,...,F11 plus delta\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a_mod\": {\n      \"description\": \"Modified core sum after applying a sinusoidal adjustment\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"z\": {\n      \"description\": \"Intermediate signal incorporating multiple oscillatory factors\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"w\": {\n      \"description\": \"Weight exponent derived from phi for the adaptation function\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_adapt\": {\n      \"description\": \"Adaptation function applied to z, with increased penalty for negative z\",\n      \"range\": {\n        \"min\": -30,\n        \"max\": 30,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"T\": {\n      \"description\": \"Dynamic threshold computed as a finite geometric series sum from k = 0 to 100\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"extra\": {\n      \"description\": \"Composite term integrating exponential decay, oscillatory factors, a Gaussian RBF, and nested softplus (applied 7 times), raised to a flexible power\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"Exponent\": {\n      \"description\": \"Final exponent modulation factor combining a baseline exponent and additional cyclic adjustments\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_x\": {\n      \"description\": \"Final transformed signal computed as the sign of z multiplied by the product f_adapt, T, and extra raised to Exponent\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed as the linear combination of beta and gamma times the transformed signal f(x)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"P_accept\": {\n      \"description\": \"Probability of accepting the proposal, obtained via a logistic transform on U\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA nonlinear utility model that computes a core sum from 11 fixed data components and a constant, applies multiple sinusoidal and oscillatory modulations, and an adaptation function with an increased penalty for negative signals. A dynamic threshold and a rich composite term\u2014including nested softplus, Gaussian RBF, and numerous oscillatory factors\u2014are used to transform the signal. The latent utility is then formed as a linear combination of this transformed signal with beta and gamma, and converted to a choice probability via a logistic function.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: a = \u2211(i=1)^(11) F_i + \u03b4\na_mod = 1.08 \u00b7 a \u00b7 (1 + 0.012 \u00b7 sin(a + 0.045))\nz = a_mod \u00b7 (1 + 0.008 \u00b7 cos(a + 0.065)) \u00b7 (1 + 0.005 \u00b7 sin(a + 0.115)) \u00b7 (1 + 0.004 \u00b7 cos(a + 0.085)) \u00b7 (1 + 0.006 \u00b7 (sin(a + 0.035) \u00b7 cos(a + 0.055))) \u00b7 (1 + 0.003 \u00b7 (sin(a + 0.03) \u00b7 cos(a + 0.05)))\nw = (phi - 0.5) / phi\nf_adapt = { if z \u2265 0: clip[1.002 \u00b7 (z^w \u00b7 (ln(1+z))^(1-w) \u00b7 (z/(1+|z|))), -30, 30] ; if z < 0: phi \u00b7 ( (z + 1\u00d710^(-6))/(1 + |z + 1\u00d710^(-6)|) )^(46) }\nT = \u03a3(k=0)^(100) [a^k \u00b7 (0.5)^k]\nextra_base = exp(-a/0.1) \u00b7 (z/(1+|z|)) \u00b7 (1 + 0.005 \u00b7 sin(1/(1+a))) \u00b7 (1 + 0.002 \u00b7 cos(0.5 \u00b7 a)) \u00b7 (1 + 0.003 \u00b7 cos(0.3 \u00b7 a))^2 \u00b7 (1 + 0.004 \u00b7 cos(0.3 \u00b7 a))^2 \u00b7 (1 + 0.0025 \u00b7 cos(0.7 \u00b7 a)) \u00b7 (1 + tanh(0.05 \u00b7 a)) \u00b7 (1 + sigmoid(0.01 \u00b7 a)) \u00b7 (1 + 0.002 \u00b7 cos(3 \u00b7 a)) \u00b7 (1 + 0.002 \u00b7 (sin(2.5 \u00b7 a) + 0.001 \u00b7 cos(3.5 \u00b7 a) + 0.0015 \u00b7 sin(3 \u00b7 a))) \u00b7 (1 + sigmoid(0.03 \u00b7 a)) \u00b7 (1 + tanh(0.07 \u00b7 a)) \u00b7 (1 + cos(3.1 \u00b7 a)) \u00b7 (1 + sigmoid(0.04 \u00b7 a)) \u00b7 (1 + tanh(0.08 \u00b7 a)) \u00b7 (1 + cos(3.2 \u00b7 a)) \u00b7 (1 + sigmoid(0.05 \u00b7 a)) \u00b7 (1 + tanh(0.1 \u00b7 a)) \u00b7 (1 + cos(3.4 \u00b7 a)) \u00b7 (1 + sigmoid(0.06 \u00b7 a)) \u00b7 (1 + tanh(0.12 \u00b7 a)) \u00b7 (1 + cos(3.6 \u00b7 a)) \u00b7 (1 + sigmoid(0.08 \u00b7 a)) \u00b7 (1 + tanh(0.2 \u00b7 a)) \u00b7 (1 + cos(4.2 \u00b7 a)) \u00b7 (1 + sin(4.0 \u00b7 a)) \u00b7 (1 + sigmoid(0.12 \u00b7 a)) \u00b7 (1 + tanh(0.3 \u00b7 a)) \u00b7 (1 + sin(4.2 \u00b7 a))\nextra = extra_base \u00b7 exp(-((a - 1)^2)/(2 \u00b7 (0.25)^2)) \u00b7 softplus\u2077(0.865/(1+a))\nExponent = (0.9478 + 0.00018 \u00b7 ln(1+a)) \u00b7 (1 + 0.008 \u00b7 tanh(0.5 \u00b7 a) + 0.003 \u00b7 sin(3.2 \u00b7 a) + 0.002 \u00b7 cos(2.5 \u00b7 a) + 0.002 \u00b7 sin(4.0 \u00b7 a))\nf(x) = sign(z) \u00b7 [ f_adapt \u00b7 T \u00b7 extra ]^(Exponent)\nU = beta + gamma \u00b7 f(x)\nP(accept=1) = 1 / (1 + exp(-U))\nSummary: A nonlinear utility model that computes a core sum from 11 fixed data components and a constant, applies multiple sinusoidal and oscillatory modulations, and an adaptation function with an increased penalty for negative signals. A dynamic threshold and a rich composite term\u2014including nested softplus, Gaussian RBF, and numerous oscillatory factors\u2014are used to transform the signal. The latent utility is then formed as a linear combination of this transformed signal with beta and gamma, and converted to a choice probability via a logistic function.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, beta=0, gamma=1, phi=1):\n    model_predictions = []\n    for trial in trial_data:\n        # Extract fixed components\n        F1 = trial.get(\"F1\", 0)\n        F2 = trial.get(\"F2\", 0)\n        F3 = trial.get(\"F3\", 0)\n        F4 = trial.get(\"F4\", 0)\n        F5 = trial.get(\"F5\", 0)\n        F6 = trial.get(\"F6\", 0)\n        F7 = trial.get(\"F7\", 0)\n        F8 = trial.get(\"F8\", 0)\n        F9 = trial.get(\"F9\", 0)\n        F10 = trial.get(\"F10\", 0)\n        F11 = trial.get(\"F11\", 0)\n        delta = 0.5  # Assuming delta is a fixed constant (e.g., 0.5)\n\n        # Core sum\n        a = F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11 + delta\n\n        # Modified core sum\n        a_mod = 1.08 * a * (1 + 0.012 * math.sin(a + 0.045))\n\n        # Intermediate signal\n        z = a_mod * (1 + 0.008 * math.cos(a + 0.065)) * (1 + 0.005 * math.sin(a + 0.115)) * (1 + 0.004 * math.cos(a + 0.085)) * (1 + 0.006 * (math.sin(a + 0.035) * math.cos(a + 0.055))) * (1 + 0.003 * (math.sin(a + 0.03) * math.cos(a + 0.05)))\n\n        # Weight exponent\n        w = (phi - 0.5) / phi\n\n        # Adaptation function\n        if z >= 0:\n            f_adapt = min(max(1.002 * (z**w) * (math.log(1+z)**(1-w)) * (z/(1+abs(z))), -30), 30)\n        else:\n            f_adapt = phi * (((z + 1e-6) / (1 + abs(z + 1e-6)))**46)\n\n        # Dynamic threshold\n        T = sum([a**k * (0.5)**k for k in range(101)])\n\n        # Helper functions\n        def sigmoid(x):\n            return 1 / (1 + math.exp(-x))\n\n        def tanh(x):\n            return math.tanh(x)\n\n        def softplus(x):\n            return math.log(1 + math.exp(x))\n\n        # Extra base\n        extra_base = math.exp(-a/0.1) * (z/(1+abs(z))) * (1 + 0.005 * math.sin(1/(1+a))) * (1 + 0.002 * math.cos(0.5 * a)) * (1 + 0.003 * math.cos(0.3 * a))**2 * (1 + 0.004 * math.cos(0.3 * a))**2 * (1 + 0.0025 * math.cos(0.7 * a)) * (1 + tanh(0.05 * a)) * (1 + sigmoid(0.01 * a)) * (1 + 0.002 * math.cos(3 * a)) * (1 + 0.002 * (math.sin(2.5 * a) + 0.001 * math.cos(3.5 * a) + 0.0015 * math.sin(3 * a))) * (1 + sigmoid(0.03 * a)) * (1 + tanh(0.07 * a)) * (1 + math.cos(3.1 * a)) * (1 + sigmoid(0.04 * a)) * (1 + tanh(0.08 * a)) * (1 + math.cos(3.2 * a)) * (1 + sigmoid(0.05 * a)) * (1 + tanh(0.1 * a)) * (1 + math.cos(3.4 * a)) * (1 + sigmoid(0.06 * a)) * (1 + tanh(0.12 * a)) * (1 + math.cos(3.6 * a)) * (1 + sigmoid(0.08 * a)) * (1 + tanh(0.2 * a)) * (1 + math.cos(4.2 * a)) * (1 + math.sin(4.0 * a)) * (1 + sigmoid(0.12 * a)) * (1 + tanh(0.3 * a)) * (1 + math.sin(4.2 * a))\n\n        # Extra\n        def softplus_7(x):\n            val = x\n            for _ in range(7):\n              val = softplus(val)\n            return val\n        extra = extra_base * math.exp(-((a - 1)**2)/(2 * (0.25)**2)) * softplus_7(0.865/(1+a))\n\n        # Exponent\n        Exponent = (0.9478 + 0.00018 * math.log(1+a)) * (1 + 0.008 * tanh(0.5 * a) + 0.003 * math.sin(3.2 * a) + 0.002 * math.cos(2.5 * a) + 0.002 * math.sin(4.0 * a))\n\n        # Transformed signal\n        f_x = math.copysign(1, z) * ( (f_adapt * T * extra)**Exponent)\n\n        # Latent utility\n        U = beta + gamma * f_x\n\n        # Probability of accepting\n        P_accept = 1 / (1 + math.exp(-U))\n\n        model_predictions.append(P_accept)\n\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.5708180708180708,
  "fitting_results": [
    {
      "beta": -10.0,
      "gamma": 4.14239698131581,
      "phi": 0.8577125435461752,
      "success": true,
      "log_likelihood": -24.953998816279046,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -9.999999999999998,
      "gamma": 5.921297284535158,
      "phi": 1.022266368652865,
      "success": true,
      "log_likelihood": -24.95329850302229,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.086122183055112,
      "gamma": 1.159471421523011,
      "phi": 0.7038772380729204,
      "success": true,
      "log_likelihood": -24.897714326089954,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 2.1324253113786056,
      "phi": 1.1965961851892524,
      "success": true,
      "log_likelihood": -24.95343674726101,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 2.4005435202457157,
      "phi": 1.42902080798968,
      "success": true,
      "log_likelihood": -24.953390862268225,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.24478953908200898,
      "gamma": 5.505872341345928,
      "phi": 1.4848347081457842,
      "success": true,
      "log_likelihood": -23.54597316384957,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 8.533884802455892,
      "phi": 0.9274342183014157,
      "success": true,
      "log_likelihood": -11.277835412282462,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.7596510967230193,
      "gamma": 8.446738583120716,
      "phi": 0.6772483438113143,
      "success": true,
      "log_likelihood": -22.914510051413323,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 7.796978289490314,
      "phi": 0.9545304605174021,
      "success": true,
      "log_likelihood": -11.277837429754488,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.03777773049232514,
      "phi": 1.185601683325898,
      "success": true,
      "log_likelihood": -24.95348014176693,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 5.09114403087494,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.95339265995146,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 1.493499676333387,
      "phi": 0.6499294511475556,
      "success": true,
      "log_likelihood": -24.953940266387054,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.8008539357762733,
      "phi": 0.9919326752273198,
      "success": true,
      "log_likelihood": -24.953435448377693,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 8.951540537496491,
      "phi": 1.2070345160605904,
      "success": true,
      "log_likelihood": -11.277833535585728,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 5.339580320407143,
      "phi": 1.13410801392635,
      "success": true,
      "log_likelihood": -11.27784422108549,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 6.243369871177022,
      "phi": 0.7956103586060437,
      "success": true,
      "log_likelihood": -11.277842293880362,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 8.774799383133333,
      "phi": 0.6875290034128437,
      "success": true,
      "log_likelihood": -11.277835727301897,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 9.106268183941888,
      "phi": 1.4816588485674584,
      "success": true,
      "log_likelihood": -16.277619930278824,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 9.411126359905854,
      "phi": 0.7767880209681977,
      "success": true,
      "log_likelihood": -15.277662994592003,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 6.223795937179915,
      "phi": 1.1587960271167694,
      "success": true,
      "log_likelihood": -11.277841579968808,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.2874029867603412,
      "gamma": 5.790751078960823,
      "phi": 1.0199191539443024,
      "success": true,
      "log_likelihood": -24.730616750304613,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 6.619672377555622,
      "phi": 0.9227996060869605,
      "success": true,
      "log_likelihood": -16.277623912362365,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 2.48487185510463,
      "phi": 0.8604284251624748,
      "success": true,
      "log_likelihood": -24.95352933996386,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -8.381885318434955,
      "gamma": 9.754286617503055,
      "phi": 1.4222275445871717,
      "success": true,
      "log_likelihood": -24.953053397101733,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.9568767665284741,
      "phi": 0.5795141348965451,
      "success": true,
      "log_likelihood": -24.953298502345998,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.7278434685730694,
      "gamma": 6.983066569472773,
      "phi": 1.118141183932831,
      "success": true,
      "log_likelihood": -24.450957573188656,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.2930245588478924,
      "gamma": 6.469801405454483,
      "phi": 1.2774976482560214,
      "success": true,
      "log_likelihood": -24.730616750447865,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.211319609212193,
      "phi": 0.6998951698301832,
      "success": true,
      "log_likelihood": -24.95366218991768,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 8.011259513836182,
      "phi": 1.2203902155242445,
      "success": true,
      "log_likelihood": -15.277664586112447,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 5.079822453060969,
      "phi": 1.2911230204262671,
      "success": true,
      "log_likelihood": -19.27749441629656,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 5.025088111810563,
      "phi": 1.3464770181346288,
      "success": true,
      "log_likelihood": -11.277844924173573,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 2.6871011504289513,
      "phi": 0.7813720367124599,
      "success": true,
      "log_likelihood": -24.95399180257283,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 7.053019632177354,
      "phi": 0.9319909156164317,
      "success": true,
      "log_likelihood": -24.953441419311144,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -7.721694875988363,
      "gamma": 7.059523629118478,
      "phi": 1.175185767573728,
      "success": true,
      "log_likelihood": -24.95516080715056,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 7.904752264551668,
      "phi": 1.4618672713186336,
      "success": true,
      "log_likelihood": -11.277836212945418,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.22618059871259535,
      "gamma": 9.095245176776713,
      "phi": 0.5807535008829346,
      "success": true,
      "log_likelihood": -23.545973163851023,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.4641632328092626,
      "gamma": 8.29292580939005,
      "phi": 1.4947770389955188,
      "success": true,
      "log_likelihood": -22.157938165340653,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -9.999999999999998,
      "gamma": 8.115052734328614,
      "phi": 1.4291355330773805,
      "success": true,
      "log_likelihood": -24.95329850336756,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.8090827362762392,
      "gamma": 0.8874192480997437,
      "phi": 0.6722650453360638,
      "success": true,
      "log_likelihood": -22.914510051415476,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 6.628048821308357,
      "phi": 1.3809544138535388,
      "success": true,
      "log_likelihood": -14.277710159273704,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.24252079361281556,
      "gamma": 7.090660391662127,
      "phi": 1.2411216380357526,
      "success": true,
      "log_likelihood": -24.056945188724793,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -9.999999999999998,
      "gamma": 5.629534473088584,
      "phi": 0.9904767183001415,
      "success": true,
      "log_likelihood": -24.953770405712728,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 3.9570519527419186,
      "phi": 1.0221333909814774,
      "success": true,
      "log_likelihood": -12.277804272945797,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.28110900577789,
      "gamma": 4.750017501836568,
      "phi": 1.3030320120684364,
      "success": true,
      "log_likelihood": -24.73061675227273,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.2137155978739466,
      "gamma": 3.0979846719789954,
      "phi": 0.9002970595088099,
      "success": true,
      "log_likelihood": -24.05694518877974,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 7.080547565656989,
      "gamma": 1.5190378519880725,
      "phi": 1.0543512096821697,
      "success": true,
      "log_likelihood": -21.277158584232016,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.109759377229981,
      "gamma": 4.496978638626247,
      "phi": 1.1770301378904322,
      "success": true,
      "log_likelihood": -24.897714324101926,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 1.9044329433370288,
      "phi": 0.7126703882459436,
      "success": true,
      "log_likelihood": -24.953482387317884,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 1.1032812344117053,
      "phi": 0.832416923476846,
      "success": true,
      "log_likelihood": -24.953435711961667,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.100913404663634,
      "gamma": 3.3959051690205935,
      "phi": 0.8128848176889786,
      "success": true,
      "log_likelihood": -24.897714325438763,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.4731110280882953,
      "gamma": 7.230825628636858,
      "phi": 1.0197016424763388,
      "success": true,
      "log_likelihood": -22.157938154733337,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 6.237552800120328,
      "phi": 0.8896550711743227,
      "success": true,
      "log_likelihood": -24.953914220579357,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.1160960358314256,
      "gamma": 5.299953199980157,
      "phi": 1.4803618524981421,
      "success": true,
      "log_likelihood": -24.897714324103404,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.7066668751386388,
      "gamma": 4.078702701677378,
      "phi": 0.8627579058218411,
      "success": true,
      "log_likelihood": -24.450957568509057,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 1.1036466395030358,
      "phi": 0.6426926619203159,
      "success": true,
      "log_likelihood": -24.95348139743472,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3333333333333333,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 6.3901439797713575,
      "phi": 0.5080791864457427,
      "success": true,
      "log_likelihood": -24.953581892839345,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.7291806863783419,
      "phi": 1.3277365884219599,
      "success": true,
      "log_likelihood": -24.95366356329126,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3333333333333333,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 9.106791355430866,
      "phi": 1.4611015713553195,
      "success": true,
      "log_likelihood": -15.27766248833018,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 4.883041532165149,
      "phi": 0.5222754945055481,
      "success": true,
      "log_likelihood": -24.953953714776578,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 8.648062720419759,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -18.2775352120723,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.2218331700444976,
      "gamma": 4.100909573803019,
      "phi": 1.4299438079686497,
      "success": true,
      "log_likelihood": -24.056945188724,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -9.999999999999998,
      "gamma": 3.2889867556455634,
      "phi": 0.6372062294162638,
      "success": true,
      "log_likelihood": -24.95329850263572,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 1.164439705884206,
      "phi": 1.480197964342112,
      "success": true,
      "log_likelihood": -24.953985150229045,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 1.9588837491743205,
      "phi": 1.0741553370894419,
      "success": true,
      "log_likelihood": -24.95339054056316,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 4.791075359389327,
      "phi": 0.6922738424537884,
      "success": true,
      "log_likelihood": -24.95376697733646,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.2908117062407907,
      "gamma": 6.2223380791874146,
      "phi": 1.1815782711213443,
      "success": true,
      "log_likelihood": -24.730616755564217,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 9.999999999999998,
      "gamma": 5.337246617644488,
      "phi": 1.0083335179682438,
      "success": true,
      "log_likelihood": -14.277713140035527,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 9.930087314330777,
      "phi": 0.6650773203236129,
      "success": true,
      "log_likelihood": -16.277619976845525,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.3102600510387774,
      "gamma": 8.930275240091003,
      "phi": 1.2442384424239592,
      "success": true,
      "log_likelihood": -24.73061675030438,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 2.0790872344827265,
      "phi": 1.2414357664724318,
      "success": true,
      "log_likelihood": -14.277719692424519,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 3.0512074831357006,
      "phi": 1.2481571297048333,
      "success": true,
      "log_likelihood": -24.953947865609056,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 7.038551391421454,
      "phi": 0.972834803344311,
      "success": true,
      "log_likelihood": -24.953917891634024,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -9.257106787415127,
      "gamma": 7.725915588775954,
      "phi": 0.9155031051631356,
      "success": true,
      "log_likelihood": -24.953197956616247,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 4.786185843975851,
      "phi": 1.3752809187896486,
      "success": true,
      "log_likelihood": -19.277494556229847,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -6.326412681053689,
      "gamma": 0.06839408010410179,
      "phi": 0.5422472192536254,
      "success": true,
      "log_likelihood": -24.953312847213738,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.4940707782067748,
      "gamma": 4.318719360630964,
      "phi": 0.7648118805522621,
      "success": true,
      "log_likelihood": -22.15793815724703,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 9.601737972684422,
      "phi": 1.0691164627297474,
      "success": true,
      "log_likelihood": -13.277747029488117,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 1.7521785534676457,
      "phi": 1.37968907283672,
      "success": true,
      "log_likelihood": -24.954033954820208,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.19675031462409925,
      "gamma": 0.6307788493117987,
      "phi": 0.6506687852591234,
      "success": true,
      "log_likelihood": -24.056945188723393,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 1.6007278551492383,
      "phi": 1.0640931352900915,
      "success": true,
      "log_likelihood": -24.953987067620144,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.140378565864242,
      "gamma": 9.49132104965485,
      "phi": 1.0737189148723698,
      "success": true,
      "log_likelihood": -24.897714942891213,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 9.999999999999998,
      "gamma": 7.087459439188864,
      "phi": 0.8537591211246368,
      "success": true,
      "log_likelihood": -14.277709907473218,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 1.7130305387710152,
      "phi": 0.5320258393256206,
      "success": true,
      "log_likelihood": -24.95394092146321,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -6.349602427828115,
      "gamma": 2.2511396333802445,
      "phi": 0.8244112699550458,
      "success": true,
      "log_likelihood": -24.953312606433165,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.20507940788626475,
      "gamma": 1.9911278776974275,
      "phi": 0.525009167639773,
      "success": true,
      "log_likelihood": -24.056945188723898,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.22784469760622844,
      "phi": 1.4770583834354092,
      "success": true,
      "log_likelihood": -24.953935106072464,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.4797035252216983,
      "gamma": 6.177052939304832,
      "phi": 1.2589523822301367,
      "success": true,
      "log_likelihood": -22.15793815793225,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 5.257998974919528,
      "phi": 0.8503616207660057,
      "success": true,
      "log_likelihood": -24.953768895769585,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 1.9569189793160209,
      "phi": 0.8230949696453972,
      "success": true,
      "log_likelihood": -13.277764933405846,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 3.947191202953349,
      "phi": 1.2753456612051874,
      "success": true,
      "log_likelihood": -24.95334518158847,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.4750985393217468,
      "gamma": 6.92864140617689,
      "phi": 1.3186509519941347,
      "success": true,
      "log_likelihood": -22.15793825017826,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "beta": {
        "r": 0.7486276382639159,
        "p": 3.43034946025589e-19
      },
      "gamma": {
        "r": 0.0902993244372044,
        "p": 0.3716068770185491
      },
      "phi": {
        "r": 0.10580266139839246,
        "p": 0.2947913476046664
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 53.92531386369347,
  "bic_results": {
    "average_bic": 53.92531386369347,
    "individual_bics": [
      60.65855444792642,
      60.657153821412905,
      60.545985467548235,
      60.657430309890344,
      60.657338539904785,
      57.842503143067475,
      33.306227639933255,
      56.579576918194974,
      33.30623167487731,
      60.65751709890219,
      60.65734213527125,
      60.65843734814244,
      60.65742771212372,
      33.30622388653978,
      33.30624525753931,
      33.30624140312905,
      33.306228269972124,
      43.305796675925976,
      41.30588280455234,
      33.30623997530594,
      60.21179031597755,
      43.30580464009306,
      60.65761549529606,
      60.656663609571794,
      60.65715382006033,
      59.65247196174565,
      60.21179031626406,
      60.657881195203686,
      41.30588598759323,
      49.30554564796145,
      33.30624666371548,
      60.65854042051399,
      60.65743965399062,
      60.66087842966945,
      33.30622924125917,
      57.842503143070374,
      55.06643314604963,
      60.65715382210345,
      56.57957691819928,
      39.30597713391574,
      58.86444719281792,
      60.65809762679379,
      35.30616536125993,
      60.21179031991379,
      58.86444719292781,
      53.304873983832366,
      60.54598546357218,
      60.657521590004094,
      60.65742823929166,
      60.54598546624585,
      55.066433124835,
      60.65838525652704,
      60.545985463575136,
      59.65247195238645,
      60.65751961023777,
      60.65772060104702,
      60.65788394195086,
      41.305881792028686,
      60.65846424492149,
      47.30562723951293,
      58.86444719281633,
      60.65715382063978,
      60.658527115826416,
      60.65733789649465,
      60.658090770041255,
      60.21179032649677,
      39.30598309543939,
      43.305796769059384,
      60.2117903159771,
      39.305996200217365,
      60.658452546586446,
      60.65839259863638,
      60.65695272860083,
      49.30554592782802,
      60.6571825097958,
      55.06643312986239,
      37.306050874344564,
      60.65862472500875,
      58.86444719281512,
      60.65853095060862,
      60.54598670115075,
      39.30597663031477,
      60.658438658294756,
      60.65718202823466,
      58.86444719281613,
      60.658427027513255,
      55.06643313123283,
      60.6580946069075,
      37.30608668218002,
      60.657247178545276,
      55.06643331572485
    ],
    "group_enabled": false,
    "group_bics": null,
    "num_parameters": 3,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- beta: r = 0.749\n- gamma: r = 0.090\n- phi: r = 0.106",
  "previous_models": [
    "Specification: a = \u2211(i=1)^(11) F_i + \u03b4\na_mod = 1.08 \u00b7 a \u00b7 (1 + 0.012 \u00b7 sin(a + 0.045))\nz = a_mod \u00b7 (1 + 0.008 \u00b7 cos(a + 0.065)) \u00b7 (1 + 0.005 \u00b7 sin(a + 0.115)) \u00b7 (1 + 0.004 \u00b7 cos(a + 0.085)) \u00b7 (1 + 0.006 \u00b7 (sin(a + 0.035) \u00b7 cos(a + 0.055))) \u00b7 (1 + 0.003 \u00b7 (sin(a + 0.03) \u00b7 cos(a + 0.05)))\nw = (phi - 0.5) / phi\nf_adapt = { if z \u2265 0: clip[1.002 \u00b7 (z^w \u00b7 (ln(1+z))^(1-w) \u00b7 (z/(1+|z|))), -30, 30] ; if z < 0: phi \u00b7 ( (z + 1\u00d710^(-6))/(1 + |z + 1\u00d710^(-6)|) )^(46) }\nT = \u03a3(k=0)^(100) [a^k \u00b7 (0.5)^k]\nextra_base = exp(-a/0.1) \u00b7 (z/(1+|z|)) \u00b7 (1 + 0.005 \u00b7 sin(1/(1+a))) \u00b7 (1 + 0.002 \u00b7 cos(0.5 \u00b7 a)) \u00b7 (1 + 0.003 \u00b7 cos(0.3 \u00b7 a))^2 \u00b7 (1 + 0.004 \u00b7 cos(0.3 \u00b7 a))^2 \u00b7 (1 + 0.0025 \u00b7 cos(0.7 \u00b7 a)) \u00b7 (1 + tanh(0.05 \u00b7 a)) \u00b7 (1 + sigmoid(0.01 \u00b7 a)) \u00b7 (1 + 0.002 \u00b7 cos(3 \u00b7 a)) \u00b7 (1 + 0.002 \u00b7 (sin(2.5 \u00b7 a) + 0.001 \u00b7 cos(3.5 \u00b7 a) + 0.0015 \u00b7 sin(3 \u00b7 a))) \u00b7 (1 + sigmoid(0.03 \u00b7 a)) \u00b7 (1 + tanh(0.07 \u00b7 a)) \u00b7 (1 + cos(3.1 \u00b7 a)) \u00b7 (1 + sigmoid(0.04 \u00b7 a)) \u00b7 (1 + tanh(0.08 \u00b7 a)) \u00b7 (1 + cos(3.2 \u00b7 a)) \u00b7 (1 + sigmoid(0.05 \u00b7 a)) \u00b7 (1 + tanh(0.1 \u00b7 a)) \u00b7 (1 + cos(3.4 \u00b7 a)) \u00b7 (1 + sigmoid(0.06 \u00b7 a)) \u00b7 (1 + tanh(0.12 \u00b7 a)) \u00b7 (1 + cos(3.6 \u00b7 a)) \u00b7 (1 + sigmoid(0.08 \u00b7 a)) \u00b7 (1 + tanh(0.2 \u00b7 a)) \u00b7 (1 + cos(4.2 \u00b7 a)) \u00b7 (1 + sin(4.0 \u00b7 a)) \u00b7 (1 + sigmoid(0.12 \u00b7 a)) \u00b7 (1 + tanh(0.3 \u00b7 a)) \u00b7 (1 + sin(4.2 \u00b7 a))\nextra = extra_base \u00b7 exp(-((a - 1)^2)/(2 \u00b7 (0.25)^2)) \u00b7 softplus\u2077(0.865/(1+a))\nExponent = (0.9478 + 0.00018 \u00b7 ln(1+a)) \u00b7 (1 + 0.008 \u00b7 tanh(0.5 \u00b7 a) + 0.003 \u00b7 sin(3.2 \u00b7 a) + 0.002 \u00b7 cos(2.5 \u00b7 a) + 0.002 \u00b7 sin(4.0 \u00b7 a))\nf(x) = sign(z) \u00b7 [ f_adapt \u00b7 T \u00b7 extra ]^(Exponent)\nU = beta + gamma \u00b7 f(x)\nP(accept=1) = 1 / (1 + exp(-U))\nSummary: A nonlinear utility model that computes a core sum from 11 fixed data components and a constant, applies multiple sinusoidal and oscillatory modulations, and an adaptation function with an increased penalty for negative signals. A dynamic threshold and a rich composite term\u2014including nested softplus, Gaussian RBF, and numerous oscillatory factors\u2014are used to transform the signal. The latent utility is then formed as a linear combination of this transformed signal with beta and gamma, and converted to a choice probability via a logistic function.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 53.92531386369347\nOverall Accuracy: 0.5708\n\nParameter Recovery:\n- beta: r = 0.749\n- gamma: r = 0.090\n- phi: r = 0.106"
  ]
}