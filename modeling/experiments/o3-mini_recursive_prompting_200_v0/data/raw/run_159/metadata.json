{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "<think>\nFor the new instructions, we want to further enhance model flexibility by adding extra nonlinear interactions and oscillatory modulations, increase the negative\u2010branch penalty (raise its exponent from 46 to 48), and include additional multiplicative factors in the extra composite term. Encourage the inclusion of two new factors: one based on a sigmoid (e.g., [1 + sigmoid(0.14\u00d7a)]) and one on tanh (e.g., [1 + tanh(0.35\u00d7a)]), as well as an extra oscillatory term [1 + sin(4.2\u00d7a)]. In addition, instruct that the nested softplus should be applied eight times in succession instead of seven to add further smoothness. Extend the dynamic threshold T by either extending the summation (for instance, sum from k=0 to 120) or by using a flexible rational-function formulation. Finally, modify the exponent modulation term by multiplying it by an extra factor [1 + 0.009\u00d7tanh(0.5\u00d7a) + 0.004\u00d7sin(3.5\u00d7a) + 0.003\u00d7cos(2.7\u00d7a) + 0.002\u00d7sin(4.0\u00d7a)]. Also encourage integrating additional novel interactions (for example, piecewise behavior in f_adapt or extra polynomial terms) to capture localized nonlinear effects. These changes should help improve overall accuracy, lower BIC, and boost parameter recovery.\n</think>\n\nNew Instructions for Run 159:\n\n1. Compute the core sum a as the sum of fixed components F\u2081,\u2026,F\u2081\u2081 plus a small constant \u03b4.\n2. Define a_mod = 1.08 \u00d7 a \u00d7 [1 + 0.012 \u00d7 sin(a + 0.045)].\n3. Multiply a_mod sequentially by the following factors:\n\u2003\u2003\u2022 [1 + 0.008 \u00d7 cos(a + 0.065)]\n\u2003\u2003\u2022 [1 + 0.005 \u00d7 sin(a + 0.115)]\n\u2003\u2003\u2022 [1 + 0.004 \u00d7 cos(a + 0.085)]\n\u2003\u2003\u2022 [1 + 0.006 \u00d7 (sin(a + 0.035) \u00d7 cos(a + 0.055))]\n\u2003\u2003\u2022 [1 + 0.003 \u00d7 (sin(a + 0.03) \u00d7 cos(a + 0.05))]\n\u2003Define z as the resulting product.\n4. Compute w = (phi \u2212 0.5) / phi.\n\u2003\u2003\u2022 For z \u2265 0, set f_adapt(z) = clip[1.002 \u00d7 (z^w \u00d7 (ln(1+z))^(1\u2212w) \u00d7 softsign(z)), \u221230, 30] where softsign(x) = x/(1+|x|).\n\u2003\u2003\u2022 For z < 0, set f_adapt(z) = phi \u00d7 [softsign(z + \u0394_shift)]^(48), with \u0394_shift = 1\u00d710^(\u20136).\n5. Define the dynamic threshold T as the sum from k = 0 to 120 of (a^k \u00d7 (\u00bd)^k); alternatively, a flexible rational function that allows extra flexibility may be used.\n6. Define the extra composite term extra as the product of:\n\u2003\u2003\u2022 exp(\u2013a/0.1)\n\u2003\u2003\u2022 [z/(1 + |z|)]\n\u2003\u2003\u2022 [1 + 0.005 \u00d7 sin(1/(1+a))]\n\u2003\u2003\u2022 [1 + 0.002 \u00d7 cos(0.5\u00d7a)]\n\u2003\u2003\u2022 ([1 + 0.003 \u00d7 cos(0.3\u00d7a)]\u00b2)\n\u2003\u2003\u2022 ([1 + 0.004 \u00d7 cos(0.3\u00d7a)]\u00b2)\n\u2003\u2003\u2022 [1 + 0.0025 \u00d7 cos(0.7\u00d7a)]\n\u2003\u2003\u2022 [1 + tanh(0.05\u00d7a)]\n\u2003\u2003\u2022 [1 + sigmoid(0.01\u00d7a)]\n\u2003\u2003\u2022 [1 + 0.002 \u00d7 cos(3\u00d7a)]\n\u2003\u2003\u2022 [1 + 0.002 \u00d7 (sin(2.5\u00d7a) + 0.001 \u00d7 cos(3.5\u00d7a) + 0.0015 \u00d7 sin(3\u00d7a))]\n\u2003\u2003\u2022 [1 + sigmoid(0.03\u00d7a)]\n\u2003\u2003\u2022 [1 + tanh(0.07\u00d7a)]\n\u2003\u2003\u2022 [1 + cos(3.1\u00d7a)]\n\u2003\u2003\u2022 [1 + sigmoid(0.04\u00d7a)]\n\u2003\u2003\u2022 [1 + tanh(0.08\u00d7a)]\n\u2003\u2003\u2022 [1 + cos(3.2\u00d7a)]\n\u2003\u2003\u2022 [1 + sigmoid(0.05\u00d7a)]\n\u2003\u2003\u2022 [1 + tanh(0.1\u00d7a)]\n\u2003\u2003\u2022 [1 + cos(3.4\u00d7a)]\n\u2003\u2003\u2022 [1 + sigmoid(0.06\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new)\\n\u2003\u2003\u2022 [1 + tanh(0.12\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new)\\n\u2003\u2003\u2022 [1 + cos(3.6\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new)\\n\u2003\u2003\u2022 [1 + sigmoid(0.08\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new)\\n\u2003\u2003\u2022 [1 + tanh(0.2\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new)\\n\u2003\u2003\u2022 [1 + cos(4.2\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new)\\n\u2003\u2003\u2022 [1 + sin(4.0\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new)\\n\u2003\u2003\u2022 [1 + sigmoid(0.12\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new)\\n\u2003\u2003\u2022 [1 + tanh(0.3\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new)\\n\u2003\u2003\u2022 [1 + sin(4.2\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new)\\nAlso, multiply extra by a Gaussian radial basis function exp(\u2013((a \u2013 1)\u00b2)/(2\u00d7(0.25)\u00b2)). Then, nest one additional softplus layer so that softplus is applied eight times in succession to 0.865/(1+a).\n7. Define the final exponent modulation factor as:\n\u2003\u2003Exponent = [0.9478 + 0.00018 \u00d7 ln(1+a)] \u00d7 [1 + 0.009 \u00d7 tanh(0.5\u00d7a) + 0.004 \u00d7 sin(3.5\u00d7a) + 0.003 \u00d7 cos(2.7\u00d7a) + 0.002 \u00d7 sin(4.0\u00d7a)].\n8. Compute the final transformed signal: f(x) = sign(z) \u00d7 { [ f_adapt(z) \u00d7 T \u00d7 extra ]^(Exponent) }.\n9. Compute latent utility U = beta + gamma \u00d7 f(x) and then define P(accept = 1) = 1/(1 + exp(\u2013U)).\n10. Use exactly three learnable parameters with finite bounds: beta \u2208 [\u201310, 10], gamma \u2208 [0, 10], and phi \u2208 [0.5, 1.5].\n\nEncourage creative nonlinear interactions and the exploration of additional piecewise or rational formulations to better capture localized nonlinear effects and cyclic patterns.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: <think>\nFor the new instructions, we want to further enhance model flexibility by adding extra nonlinear interactions and oscillatory modulations, increase the negative\u2010branch penalty (raise its exponent from 46 to 48), and include additional multiplicative factors in the extra composite term. Encourage the inclusion of two new factors: one based on a sigmoid (e.g., [1 + sigmoid(0.14\u00d7a)]) and one on tanh (e.g., [1 + tanh(0.35\u00d7a)]), as well as an extra oscillatory term [1 + sin(4.2\u00d7a)]. In addition, instruct that the nested softplus should be applied eight times in succession instead of seven to add further smoothness. Extend the dynamic threshold T by either extending the summation (for instance, sum from k=0 to 120) or by using a flexible rational-function formulation. Finally, modify the exponent modulation term by multiplying it by an extra factor [1 + 0.009\u00d7tanh(0.5\u00d7a) + 0.004\u00d7sin(3.5\u00d7a) + 0.003\u00d7cos(2.7\u00d7a) + 0.002\u00d7sin(4.0\u00d7a)]. Also encourage integrating additional novel interactions (for example, piecewise behavior in f_adapt or extra polynomial terms) to capture localized nonlinear effects. These changes should help improve overall accuracy, lower BIC, and boost parameter recovery.\n</think>\n\nNew Instructions for Run 159:\n\n1. Compute the core sum a as the sum of fixed components F\u2081,\u2026,F\u2081\u2081 plus a small constant \u03b4.\n2. Define a_mod = 1.08 \u00d7 a \u00d7 [1 + 0.012 \u00d7 sin(a + 0.045)].\n3. Multiply a_mod sequentially by the following factors:\n\u2003\u2003\u2022 [1 + 0.008 \u00d7 cos(a + 0.065)]\n\u2003\u2003\u2022 [1 + 0.005 \u00d7 sin(a + 0.115)]\n\u2003\u2003\u2022 [1 + 0.004 \u00d7 cos(a + 0.085)]\n\u2003\u2003\u2022 [1 + 0.006 \u00d7 (sin(a + 0.035) \u00d7 cos(a + 0.055))]\n\u2003\u2003\u2022 [1 + 0.003 \u00d7 (sin(a + 0.03) \u00d7 cos(a + 0.05))]\n\u2003Define z as the resulting product.\n4. Compute w = (phi \u2212 0.5) / phi.\n\u2003\u2003\u2022 For z \u2265 0, set f_adapt(z) = clip[1.002 \u00d7 (z^w \u00d7 (ln(1+z))^(1\u2212w) \u00d7 softsign(z)), \u221230, 30] where softsign(x) = x/(1+|x|).\n\u2003\u2003\u2022 For z < 0, set f_adapt(z) = phi \u00d7 [softsign(z + \u0394_shift)]^(48), with \u0394_shift = 1\u00d710^(\u20136).\n5. Define the dynamic threshold T as the sum from k = 0 to 120 of (a^k \u00d7 (\u00bd)^k); alternatively, a flexible rational function that allows extra flexibility may be used.\n6. Define the extra composite term extra as the product of:\n\u2003\u2003\u2022 exp(\u2013a/0.1)\n\u2003\u2003\u2022 [z/(1 + |z|)]\n\u2003\u2003\u2022 [1 + 0.005 \u00d7 sin(1/(1+a))]\n\u2003\u2003\u2022 [1 + 0.002 \u00d7 cos(0.5\u00d7a)]\n\u2003\u2003\u2022 ([1 + 0.003 \u00d7 cos(0.3\u00d7a)]\u00b2)\n\u2003\u2003\u2022 ([1 + 0.004 \u00d7 cos(0.3\u00d7a)]\u00b2)\n\u2003\u2003\u2022 [1 + 0.0025 \u00d7 cos(0.7\u00d7a)]\n\u2003\u2003\u2022 [1 + tanh(0.05\u00d7a)]\n\u2003\u2003\u2022 [1 + sigmoid(0.01\u00d7a)]\n\u2003\u2003\u2022 [1 + 0.002 \u00d7 cos(3\u00d7a)]\n\u2003\u2003\u2022 [1 + 0.002 \u00d7 (sin(2.5\u00d7a) + 0.001 \u00d7 cos(3.5\u00d7a) + 0.0015 \u00d7 sin(3\u00d7a))]\n\u2003\u2003\u2022 [1 + sigmoid(0.03\u00d7a)]\n\u2003\u2003\u2022 [1 + tanh(0.07\u00d7a)]\n\u2003\u2003\u2022 [1 + cos(3.1\u00d7a)]\n\u2003\u2003\u2022 [1 + sigmoid(0.04\u00d7a)]\n\u2003\u2003\u2022 [1 + tanh(0.08\u00d7a)]\n\u2003\u2003\u2022 [1 + cos(3.2\u00d7a)]\n\u2003\u2003\u2022 [1 + sigmoid(0.05\u00d7a)]\n\u2003\u2003\u2022 [1 + tanh(0.1\u00d7a)]\n\u2003\u2003\u2022 [1 + cos(3.4\u00d7a)]\n\u2003\u2003\u2022 [1 + sigmoid(0.06\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new)\\n\u2003\u2003\u2022 [1 + tanh(0.12\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new)\\n\u2003\u2003\u2022 [1 + cos(3.6\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new)\\n\u2003\u2003\u2022 [1 + sigmoid(0.08\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new)\\n\u2003\u2003\u2022 [1 + tanh(0.2\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new)\\n\u2003\u2003\u2022 [1 + cos(4.2\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new)\\n\u2003\u2003\u2022 [1 + sin(4.0\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new)\\n\u2003\u2003\u2022 [1 + sigmoid(0.12\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new)\\n\u2003\u2003\u2022 [1 + tanh(0.3\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new)\\n\u2003\u2003\u2022 [1 + sin(4.2\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new)\\nAlso, multiply extra by a Gaussian radial basis function exp(\u2013((a \u2013 1)\u00b2)/(2\u00d7(0.25)\u00b2)). Then, nest one additional softplus layer so that softplus is applied eight times in succession to 0.865/(1+a).\n7. Define the final exponent modulation factor as:\n\u2003\u2003Exponent = [0.9478 + 0.00018 \u00d7 ln(1+a)] \u00d7 [1 + 0.009 \u00d7 tanh(0.5\u00d7a) + 0.004 \u00d7 sin(3.5\u00d7a) + 0.003 \u00d7 cos(2.7\u00d7a) + 0.002 \u00d7 sin(4.0\u00d7a)].\n8. Compute the final transformed signal: f(x) = sign(z) \u00d7 { [ f_adapt(z) \u00d7 T \u00d7 extra ]^(Exponent) }.\n9. Compute latent utility U = beta + gamma \u00d7 f(x) and then define P(accept = 1) = 1/(1 + exp(\u2013U)).\n10. Use exactly three learnable parameters with finite bounds: beta \u2208 [\u201310, 10], gamma \u2208 [0, 10], and phi \u2208 [0.5, 1.5].\n\nEncourage creative nonlinear interactions and the exploration of additional piecewise or rational formulations to better capture localized nonlinear effects and cyclic patterns.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<MODEL>\na = (trial_type + trial_role + token_opp + token_self + combined_earning + split_opp + split_self + splitperc_opp + splitperc_self + accepted_amount + accepted_perc) + 1e-6\na_mod = 1.08 * a * (1 + 0.012 * sin(a + 0.045))\nz = a_mod * (1 + 0.008 * cos(a + 0.065)) * (1 + 0.005 * sin(a + 0.115)) * (1 + 0.004 * cos(a + 0.085)) * (1 + 0.006 * (sin(a + 0.035) * cos(a + 0.055))) * (1 + 0.003 * (sin(a + 0.03) * cos(a + 0.05)))\nw = (phi - 0.5) / phi\nsoftsign(x) = x / (1 + abs(x))\nf_adapt = { 1.002 * ( (z^w) * (ln(1+z))^(1-w) * softsign(z) )  if z >= 0,  phi * (softsign(z + 1e-6))^(48)  if z < 0 }\nT = sum_{k=0}^{120} (a^k * (0.5)^k)\nS = softplus(softplus(softplus(softplus(softplus(softplus(softplus(softplus(0.865/(1+a)))))))))\nextra = exp(-a/0.1) * (z/(1+abs(z))) * (1 + 0.005*sin(1/(1+a))) * (1 + 0.002*cos(0.5*a)) * (1 + 0.003*cos(0.3*a))^2 * (1 + 0.004*cos(0.3*a))^2 * (1 + 0.0025*cos(0.7*a)) * (1 + tanh(0.05*a)) * (1 + (1/(1+exp(-0.01*a)))) * (1 + 0.002*cos(3*a)) * (1 + 0.002*(sin(2.5*a) + 0.001*cos(3.5*a) + 0.0015*sin(3*a))) * (1 + (1/(1+exp(-0.03*a)))) * (1 + tanh(0.07*a)) * (1 + cos(3.1*a)) * (1 + (1/(1+exp(-0.04*a)))) * (1 + tanh(0.08*a)) * (1 + cos(3.2*a)) * (1 + (1/(1+exp(-0.05*a)))) * (1 + tanh(0.1*a)) * (1 + cos(3.4*a)) * (1 + (1/(1+exp(-0.06*a)))) * (1 + tanh(0.12*a)) * (1 + cos(3.6*a)) * (1 + (1/(1+exp(-0.08*a)))) * (1 + tanh(0.2*a)) * (1 + cos(4.2*a)) * (1 + sin(4.0*a)) * (1 + (1/(1+exp(-0.12*a)))) * (1 + tanh(0.3*a)) * (1 + sin(4.2*a))\nextra = extra * exp(-((a-1)^2)/(2*(0.25)^2)) * S\nExponent = (0.9478 + 0.00018 * ln(1+a)) * (1 + 0.009*tanh(0.5*a) + 0.004*sin(3.5*a) + 0.003*cos(2.7*a) + 0.002*sin(4.0*a))\nf = sign(z) * ( (f_adapt * T * extra)^(Exponent) )\nU = beta + gamma * f\nP_accept = 1 / (1 + exp(-U))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"trial_type\": {\n      \"description\": \"Indicator of contribution type (1: equal, 2: opponent more, 3: participant more)\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": 3,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"categorical\",\n        \"parameters\": {\"values\": [1,2,3]}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"trial_role\": {\n      \"description\": \"Role of the participant (1: responder, 2: proposer)\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": 2,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"categorical\",\n        \"parameters\": {\"values\": [1,2]}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"integer\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"integer\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total money earned (each token is \u00a33)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"integer\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_opp\": {\n      \"description\": \"Proposed share for the opponent in \u00a3\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"float\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant in \u00a3\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"float\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"splitperc_opp\": {\n      \"description\": \"Proposed share for the opponent in percentage\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"integer\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"splitperc_self\": {\n      \"description\": \"Proposed share for the participant in percentage\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"integer\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"accepted_amount\": {\n      \"description\": \"Amount gained (in \u00a3) if the proposal is accepted\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"float\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"accepted_perc\": {\n      \"description\": \"Accepted share in percentage\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"float\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"beta\": {\n      \"description\": \"Base utility parameter\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\"min\": -10, \"max\": 10}\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Scaling parameter for transformed signal\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\"min\": 0, \"max\": 10}\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Adaptation shape parameter affecting negative branch\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\"min\": 0.5, \"max\": 1.5}\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA highly flexible nonlinear utility model for binary responder decisions. The model computes a composite signal by summing eleven fixed task components (derived from key task variables) and applying extensive nonlinear, oscillatory, and multiplicative modulations\u2014including sequential sinusoidal, cosine, softplus nestings, and a dynamic threshold summation\u2014before raising the result to a modulated exponent. Finally, the latent utility is formed as an affine function of the transformed signal using three learnable parameters (beta, gamma, and phi), and a logistic function maps utility to acceptance probability.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['beta', 'gamma', 'phi']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                a = (trial_type + trial_role + token_opp + token_self + combined_earning + split_opp + split_self + splitperc_opp + splitperc_self + accepted_amount + accepted_perc) + 1e-6\na_mod = 1.08 * a * (1 + 0.012 * sin(a + 0.045))\nz = a_mod * (1 + 0.008 * cos(a + 0.065)) * (1 + 0.005 * sin(a + 0.115)) * (1 + 0.004 * cos(a + 0.085)) * (1 + 0.006 * (sin(a + 0.035) * cos(a + 0.055))) * (1 + 0.003 * (sin(a + 0.03) * cos(a + 0.05)))\nw = (phi - 0.5) / phi\nsoftsign(x) = x / (1 + abs(x))\nf_adapt = { 1.002 * ( (z^w) * (ln(1+z))^(1-w) * softsign(z) )  if z >= 0,  phi * (softsign(z + 1e-6))^(48)  if z < 0 }\nT = sum_{k=0}^{120} (a^k * (0.5)^k)\nS = softplus(softplus(softplus(softplus(softplus(softplus(softplus(softplus(0.865/(1+a)))))))))\nextra = exp(-a/0.1) * (z/(1+abs(z))) * (1 + 0.005*sin(1/(1+a))) * (1 + 0.002*cos(0.5*a)) * (1 + 0.003*cos(0.3*a))^2 * (1 + 0.004*cos(0.3*a))^2 * (1 + 0.0025*cos(0.7*a)) * (1 + tanh(0.05*a)) * (1 + (1/(1+exp(-0.01*a)))) * (1 + 0.002*cos(3*a)) * (1 + 0.002*(sin(2.5*a) + 0.001*cos(3.5*a) + 0.0015*sin(3*a))) * (1 + (1/(1+exp(-0.03*a)))) * (1 + tanh(0.07*a)) * (1 + cos(3.1*a)) * (1 + (1/(1+exp(-0.04*a)))) * (1 + tanh(0.08*a)) * (1 + cos(3.2*a)) * (1 + (1/(1+exp(-0.05*a)))) * (1 + tanh(0.1*a)) * (1 + cos(3.4*a)) * (1 + (1/(1+exp(-0.06*a)))) * (1 + tanh(0.12*a)) * (1 + cos(3.6*a)) * (1 + (1/(1+exp(-0.08*a)))) * (1 + tanh(0.2*a)) * (1 + cos(4.2*a)) * (1 + sin(4.0*a)) * (1 + (1/(1+exp(-0.12*a)))) * (1 + tanh(0.3*a)) * (1 + sin(4.2*a))\nextra = extra * exp(-((a-1)^2)/(2*(0.25)^2)) * S\nExponent = (0.9478 + 0.00018 * ln(1+a)) * (1 + 0.009*tanh(0.5*a) + 0.004*sin(3.5*a) + 0.003*cos(2.7*a) + 0.002*sin(4.0*a))\nf = sign(z) * ( (f_adapt * T * extra)^(Exponent) )\nU = beta + gamma * f\nP_accept = 1 / (1 + exp(-U))\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"trial_type\": {\n      \"description\": \"Indicator of contribution type (1: equal, 2: opponent more, 3: participant more)\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": 3,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"categorical\",\n        \"parameters\": {\n          \"values\": [\n            1,\n            2,\n            3\n          ]\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"trial_role\": {\n      \"description\": \"Role of the participant (1: responder, 2: proposer)\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": 2,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"categorical\",\n        \"parameters\": {\n          \"values\": [\n            1,\n            2\n          ]\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"integer\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"integer\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total money earned (each token is \\u00a33)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"integer\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_opp\": {\n      \"description\": \"Proposed share for the opponent in \\u00a3\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"float\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant in \\u00a3\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"float\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"splitperc_opp\": {\n      \"description\": \"Proposed share for the opponent in percentage\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"integer\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"splitperc_self\": {\n      \"description\": \"Proposed share for the participant in percentage\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"integer\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"accepted_amount\": {\n      \"description\": \"Amount gained (in \\u00a3) if the proposal is accepted\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"float\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"accepted_perc\": {\n      \"description\": \"Accepted share in percentage\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"float\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"beta\": {\n      \"description\": \"Base utility parameter\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": -10,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Scaling parameter for transformed signal\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Adaptation shape parameter affecting negative branch\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0.5,\n          \"max\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, beta=0, gamma=1, phi=1):\n\n    def softsign(x):\n        return x / (1 + abs(x))\n\n    def softplus(x):\n        return math.log(1 + math.exp(x))\n\n    def sign(x):\n        if x > 0:\n            return 1\n        elif x < 0:\n            return -1\n        else:\n            return 0\n\n    model_predictions = []\n\n    for trial in trial_data:\n        trial_type = trial.get(\"trial_type\", 0)\n        trial_role = trial.get(\"trial_role\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        token_self = trial.get(\"token_self\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n        split_opp = trial.get(\"split_opp\", 0)\n        split_self = trial.get(\"split_self\", 0)\n        splitperc_opp = trial.get(\"splitperc_opp\", 0)\n        splitperc_self = trial.get(\"splitperc_self\", 0)\n        accepted_amount = trial.get(\"accepted_amount\", 0)\n        accepted_perc = trial.get(\"accepted_perc\", 0)\n\n        a = (trial_type + trial_role + token_opp + token_self + combined_earning + split_opp + split_self + splitperc_opp + splitperc_self + accepted_amount + accepted_perc) + 1e-6\n        a_mod = 1.08 * a * (1 + 0.012 * math.sin(a + 0.045))\n        z = a_mod * (1 + 0.008 * math.cos(a + 0.065)) * (1 + 0.005 * math.sin(a + 0.115)) * (1 + 0.004 * math.cos(a + 0.085)) * (1 + 0.006 * (math.sin(a + 0.035) * math.cos(a + 0.055))) * (1 + 0.003 * (math.sin(a + 0.03) * math.cos(a + 0.05)))\n        w = (phi - 0.5) / phi\n\n        if z >= 0:\n            f_adapt = 1.002 * ( (z**w) * (math.log(1+z))**(1-w) * softsign(z) )\n        else:\n            f_adapt = phi * (softsign(z + 1e-6))**(48)\n\n        T = sum(a**k * (0.5)**k for k in range(121))\n\n        S = softplus(softplus(softplus(softplus(softplus(softplus(softplus(softplus(0.865/(1+a)))))))))\n\n        extra = math.exp(-a/0.1) * (z/(1+abs(z))) * (1 + 0.005*math.sin(1/(1+a))) * (1 + 0.002*math.cos(0.5*a)) * (1 + 0.003*math.cos(0.3*a))**2 * (1 + 0.004*math.cos(0.3*a))**2 * (1 + 0.0025*math.cos(0.7*a)) * (1 + math.tanh(0.05*a)) * (1 + (1/(1+math.exp(-0.01*a)))) * (1 + 0.002*math.cos(3*a)) * (1 + 0.002*(math.sin(2.5*a) + 0.001*math.cos(3.5*a) + 0.0015*math.sin(3*a))) * (1 + (1/(1+math.exp(-0.03*a)))) * (1 + math.tanh(0.07*a)) * (1 + math.cos(3.1*a)) * (1 + (1/(1+math.exp(-0.04*a)))) * (1 + math.tanh(0.08*a)) * (1 + math.cos(3.2*a)) * (1 + (1/(1+math.exp(-0.05*a)))) * (1 + math.tanh(0.1*a)) * (1 + math.cos(3.4*a)) * (1 + (1/(1+math.exp(-0.06*a)))) * (1 + math.tanh(0.12*a)) * (1 + math.cos(3.6*a)) * (1 + (1/(1+math.exp(-0.08*a)))) * (1 + math.tanh(0.2*a)) * (1 + math.cos(4.2*a)) * (1 + math.sin(4.0*a)) * (1 + (1/(1+math.exp(-0.12*a)))) * (1 + math.tanh(0.3*a)) * (1 + math.sin(4.2*a))\n        extra = extra * math.exp(-((a-1)**2)/(2*(0.25)**2)) * S\n        Exponent = (0.9478 + 0.00018 * math.log(1+a)) * (1 + 0.009*math.tanh(0.5*a) + 0.004*math.sin(3.5*a) + 0.003*math.cos(2.7*a) + 0.002*math.sin(4.0*a))\n\n        f = sign(z) * ( (f_adapt * T * extra)**(Exponent) )\n        U = beta + gamma * f\n        P_accept = 1 / (1 + math.exp(-U))\n\n        model_predictions.append(P_accept)\n\n    return model_predictions\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n```",
      "timestamp": 1743549539.4462929
    }
  ],
  "learnable_parameters": {
    "beta": {
      "description": "Base utility parameter",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": -10,
          "max": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Scaling parameter for transformed signal",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": 0,
          "max": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "phi": {
      "description": "Adaptation shape parameter affecting negative branch",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": 0.5,
          "max": 1.5
        }
      },
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "a = (trial_type + trial_role + token_opp + token_self + combined_earning + split_opp + split_self + splitperc_opp + splitperc_self + accepted_amount + accepted_perc) + 1e-6\na_mod = 1.08 * a * (1 + 0.012 * sin(a + 0.045))\nz = a_mod * (1 + 0.008 * cos(a + 0.065)) * (1 + 0.005 * sin(a + 0.115)) * (1 + 0.004 * cos(a + 0.085)) * (1 + 0.006 * (sin(a + 0.035) * cos(a + 0.055))) * (1 + 0.003 * (sin(a + 0.03) * cos(a + 0.05)))\nw = (phi - 0.5) / phi\nsoftsign(x) = x / (1 + abs(x))\nf_adapt = { 1.002 * ( (z^w) * (ln(1+z))^(1-w) * softsign(z) )  if z >= 0,  phi * (softsign(z + 1e-6))^(48)  if z < 0 }\nT = sum_{k=0}^{120} (a^k * (0.5)^k)\nS = softplus(softplus(softplus(softplus(softplus(softplus(softplus(softplus(0.865/(1+a)))))))))\nextra = exp(-a/0.1) * (z/(1+abs(z))) * (1 + 0.005*sin(1/(1+a))) * (1 + 0.002*cos(0.5*a)) * (1 + 0.003*cos(0.3*a))^2 * (1 + 0.004*cos(0.3*a))^2 * (1 + 0.0025*cos(0.7*a)) * (1 + tanh(0.05*a)) * (1 + (1/(1+exp(-0.01*a)))) * (1 + 0.002*cos(3*a)) * (1 + 0.002*(sin(2.5*a) + 0.001*cos(3.5*a) + 0.0015*sin(3*a))) * (1 + (1/(1+exp(-0.03*a)))) * (1 + tanh(0.07*a)) * (1 + cos(3.1*a)) * (1 + (1/(1+exp(-0.04*a)))) * (1 + tanh(0.08*a)) * (1 + cos(3.2*a)) * (1 + (1/(1+exp(-0.05*a)))) * (1 + tanh(0.1*a)) * (1 + cos(3.4*a)) * (1 + (1/(1+exp(-0.06*a)))) * (1 + tanh(0.12*a)) * (1 + cos(3.6*a)) * (1 + (1/(1+exp(-0.08*a)))) * (1 + tanh(0.2*a)) * (1 + cos(4.2*a)) * (1 + sin(4.0*a)) * (1 + (1/(1+exp(-0.12*a)))) * (1 + tanh(0.3*a)) * (1 + sin(4.2*a))\nextra = extra * exp(-((a-1)^2)/(2*(0.25)^2)) * S\nExponent = (0.9478 + 0.00018 * ln(1+a)) * (1 + 0.009*tanh(0.5*a) + 0.004*sin(3.5*a) + 0.003*cos(2.7*a) + 0.002*sin(4.0*a))\nf = sign(z) * ( (f_adapt * T * extra)^(Exponent) )\nU = beta + gamma * f\nP_accept = 1 / (1 + exp(-U))",
  "variable_descriptions": {
    "trial_type": {
      "description": "Indicator of contribution type (1: equal, 2: opponent more, 3: participant more)",
      "range": {
        "min": 1,
        "max": 3,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "categorical",
        "parameters": {
          "values": [
            1,
            2,
            3
          ]
        }
      },
      "learnable": false,
      "source": "data"
    },
    "trial_role": {
      "description": "Role of the participant (1: responder, 2: proposer)",
      "range": {
        "min": 1,
        "max": 2,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "categorical",
        "parameters": {
          "values": [
            1,
            2
          ]
        }
      },
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent",
      "range": {
        "min": 0,
        "max": 10000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "integer",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Number of tokens found by the participant",
      "range": {
        "min": 0,
        "max": 10000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "integer",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "combined_earning": {
      "description": "Total money earned (each token is \u00a33)",
      "range": {
        "min": 0,
        "max": 100000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "integer",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "split_opp": {
      "description": "Proposed share for the opponent in \u00a3",
      "range": {
        "min": 0,
        "max": 10000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "float",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "split_self": {
      "description": "Proposed share for the participant in \u00a3",
      "range": {
        "min": 0,
        "max": 10000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "float",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "splitperc_opp": {
      "description": "Proposed share for the opponent in percentage",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "integer",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "splitperc_self": {
      "description": "Proposed share for the participant in percentage",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "integer",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "accepted_amount": {
      "description": "Amount gained (in \u00a3) if the proposal is accepted",
      "range": {
        "min": 0,
        "max": 10000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "float",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "accepted_perc": {
      "description": "Accepted share in percentage",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "float",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "beta": {
      "description": "Base utility parameter",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": -10,
          "max": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Scaling parameter for transformed signal",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": 0,
          "max": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "phi": {
      "description": "Adaptation shape parameter affecting negative branch",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": 0.5,
          "max": 1.5
        }
      },
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_summary": "A highly flexible nonlinear utility model for binary responder decisions. The model computes a composite signal by summing eleven fixed task components (derived from key task variables) and applying extensive nonlinear, oscillatory, and multiplicative modulations\u2014including sequential sinusoidal, cosine, softplus nestings, and a dynamic threshold summation\u2014before raising the result to a modulated exponent. Finally, the latent utility is formed as an affine function of the transformed signal using three learnable parameters (beta, gamma, and phi), and a logistic function maps utility to acceptance probability.",
  "target_variable": "accept",
  "full_reasoning": "<MODEL>\na = (trial_type + trial_role + token_opp + token_self + combined_earning + split_opp + split_self + splitperc_opp + splitperc_self + accepted_amount + accepted_perc) + 1e-6\na_mod = 1.08 * a * (1 + 0.012 * sin(a + 0.045))\nz = a_mod * (1 + 0.008 * cos(a + 0.065)) * (1 + 0.005 * sin(a + 0.115)) * (1 + 0.004 * cos(a + 0.085)) * (1 + 0.006 * (sin(a + 0.035) * cos(a + 0.055))) * (1 + 0.003 * (sin(a + 0.03) * cos(a + 0.05)))\nw = (phi - 0.5) / phi\nsoftsign(x) = x / (1 + abs(x))\nf_adapt = { 1.002 * ( (z^w) * (ln(1+z))^(1-w) * softsign(z) )  if z >= 0,  phi * (softsign(z + 1e-6))^(48)  if z < 0 }\nT = sum_{k=0}^{120} (a^k * (0.5)^k)\nS = softplus(softplus(softplus(softplus(softplus(softplus(softplus(softplus(0.865/(1+a)))))))))\nextra = exp(-a/0.1) * (z/(1+abs(z))) * (1 + 0.005*sin(1/(1+a))) * (1 + 0.002*cos(0.5*a)) * (1 + 0.003*cos(0.3*a))^2 * (1 + 0.004*cos(0.3*a))^2 * (1 + 0.0025*cos(0.7*a)) * (1 + tanh(0.05*a)) * (1 + (1/(1+exp(-0.01*a)))) * (1 + 0.002*cos(3*a)) * (1 + 0.002*(sin(2.5*a) + 0.001*cos(3.5*a) + 0.0015*sin(3*a))) * (1 + (1/(1+exp(-0.03*a)))) * (1 + tanh(0.07*a)) * (1 + cos(3.1*a)) * (1 + (1/(1+exp(-0.04*a)))) * (1 + tanh(0.08*a)) * (1 + cos(3.2*a)) * (1 + (1/(1+exp(-0.05*a)))) * (1 + tanh(0.1*a)) * (1 + cos(3.4*a)) * (1 + (1/(1+exp(-0.06*a)))) * (1 + tanh(0.12*a)) * (1 + cos(3.6*a)) * (1 + (1/(1+exp(-0.08*a)))) * (1 + tanh(0.2*a)) * (1 + cos(4.2*a)) * (1 + sin(4.0*a)) * (1 + (1/(1+exp(-0.12*a)))) * (1 + tanh(0.3*a)) * (1 + sin(4.2*a))\nextra = extra * exp(-((a-1)^2)/(2*(0.25)^2)) * S\nExponent = (0.9478 + 0.00018 * ln(1+a)) * (1 + 0.009*tanh(0.5*a) + 0.004*sin(3.5*a) + 0.003*cos(2.7*a) + 0.002*sin(4.0*a))\nf = sign(z) * ( (f_adapt * T * extra)^(Exponent) )\nU = beta + gamma * f\nP_accept = 1 / (1 + exp(-U))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"trial_type\": {\n      \"description\": \"Indicator of contribution type (1: equal, 2: opponent more, 3: participant more)\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": 3,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"categorical\",\n        \"parameters\": {\"values\": [1,2,3]}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"trial_role\": {\n      \"description\": \"Role of the participant (1: responder, 2: proposer)\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": 2,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"categorical\",\n        \"parameters\": {\"values\": [1,2]}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"integer\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"integer\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total money earned (each token is \u00a33)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"integer\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_opp\": {\n      \"description\": \"Proposed share for the opponent in \u00a3\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"float\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant in \u00a3\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"float\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"splitperc_opp\": {\n      \"description\": \"Proposed share for the opponent in percentage\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"integer\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"splitperc_self\": {\n      \"description\": \"Proposed share for the participant in percentage\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"integer\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"accepted_amount\": {\n      \"description\": \"Amount gained (in \u00a3) if the proposal is accepted\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"float\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"accepted_perc\": {\n      \"description\": \"Accepted share in percentage\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"float\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"beta\": {\n      \"description\": \"Base utility parameter\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\"min\": -10, \"max\": 10}\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Scaling parameter for transformed signal\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\"min\": 0, \"max\": 10}\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Adaptation shape parameter affecting negative branch\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\"min\": 0.5, \"max\": 1.5}\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA highly flexible nonlinear utility model for binary responder decisions. The model computes a composite signal by summing eleven fixed task components (derived from key task variables) and applying extensive nonlinear, oscillatory, and multiplicative modulations\u2014including sequential sinusoidal, cosine, softplus nestings, and a dynamic threshold summation\u2014before raising the result to a modulated exponent. Finally, the latent utility is formed as an affine function of the transformed signal using three learnable parameters (beta, gamma, and phi), and a logistic function maps utility to acceptance probability.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: a = (trial_type + trial_role + token_opp + token_self + combined_earning + split_opp + split_self + splitperc_opp + splitperc_self + accepted_amount + accepted_perc) + 1e-6\na_mod = 1.08 * a * (1 + 0.012 * sin(a + 0.045))\nz = a_mod * (1 + 0.008 * cos(a + 0.065)) * (1 + 0.005 * sin(a + 0.115)) * (1 + 0.004 * cos(a + 0.085)) * (1 + 0.006 * (sin(a + 0.035) * cos(a + 0.055))) * (1 + 0.003 * (sin(a + 0.03) * cos(a + 0.05)))\nw = (phi - 0.5) / phi\nsoftsign(x) = x / (1 + abs(x))\nf_adapt = { 1.002 * ( (z^w) * (ln(1+z))^(1-w) * softsign(z) )  if z >= 0,  phi * (softsign(z + 1e-6))^(48)  if z < 0 }\nT = sum_{k=0}^{120} (a^k * (0.5)^k)\nS = softplus(softplus(softplus(softplus(softplus(softplus(softplus(softplus(0.865/(1+a)))))))))\nextra = exp(-a/0.1) * (z/(1+abs(z))) * (1 + 0.005*sin(1/(1+a))) * (1 + 0.002*cos(0.5*a)) * (1 + 0.003*cos(0.3*a))^2 * (1 + 0.004*cos(0.3*a))^2 * (1 + 0.0025*cos(0.7*a)) * (1 + tanh(0.05*a)) * (1 + (1/(1+exp(-0.01*a)))) * (1 + 0.002*cos(3*a)) * (1 + 0.002*(sin(2.5*a) + 0.001*cos(3.5*a) + 0.0015*sin(3*a))) * (1 + (1/(1+exp(-0.03*a)))) * (1 + tanh(0.07*a)) * (1 + cos(3.1*a)) * (1 + (1/(1+exp(-0.04*a)))) * (1 + tanh(0.08*a)) * (1 + cos(3.2*a)) * (1 + (1/(1+exp(-0.05*a)))) * (1 + tanh(0.1*a)) * (1 + cos(3.4*a)) * (1 + (1/(1+exp(-0.06*a)))) * (1 + tanh(0.12*a)) * (1 + cos(3.6*a)) * (1 + (1/(1+exp(-0.08*a)))) * (1 + tanh(0.2*a)) * (1 + cos(4.2*a)) * (1 + sin(4.0*a)) * (1 + (1/(1+exp(-0.12*a)))) * (1 + tanh(0.3*a)) * (1 + sin(4.2*a))\nextra = extra * exp(-((a-1)^2)/(2*(0.25)^2)) * S\nExponent = (0.9478 + 0.00018 * ln(1+a)) * (1 + 0.009*tanh(0.5*a) + 0.004*sin(3.5*a) + 0.003*cos(2.7*a) + 0.002*sin(4.0*a))\nf = sign(z) * ( (f_adapt * T * extra)^(Exponent) )\nU = beta + gamma * f\nP_accept = 1 / (1 + exp(-U))\nSummary: A highly flexible nonlinear utility model for binary responder decisions. The model computes a composite signal by summing eleven fixed task components (derived from key task variables) and applying extensive nonlinear, oscillatory, and multiplicative modulations\u2014including sequential sinusoidal, cosine, softplus nestings, and a dynamic threshold summation\u2014before raising the result to a modulated exponent. Finally, the latent utility is formed as an affine function of the transformed signal using three learnable parameters (beta, gamma, and phi), and a logistic function maps utility to acceptance probability.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, beta=0, gamma=1, phi=1):\n\n    def softsign(x):\n        return x / (1 + abs(x))\n\n    def softplus(x):\n        return math.log(1 + math.exp(x))\n\n    def sign(x):\n        if x > 0:\n            return 1\n        elif x < 0:\n            return -1\n        else:\n            return 0\n\n    model_predictions = []\n\n    for trial in trial_data:\n        trial_type = trial.get(\"trial_type\", 0)\n        trial_role = trial.get(\"trial_role\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        token_self = trial.get(\"token_self\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n        split_opp = trial.get(\"split_opp\", 0)\n        split_self = trial.get(\"split_self\", 0)\n        splitperc_opp = trial.get(\"splitperc_opp\", 0)\n        splitperc_self = trial.get(\"splitperc_self\", 0)\n        accepted_amount = trial.get(\"accepted_amount\", 0)\n        accepted_perc = trial.get(\"accepted_perc\", 0)\n\n        a = (trial_type + trial_role + token_opp + token_self + combined_earning + split_opp + split_self + splitperc_opp + splitperc_self + accepted_amount + accepted_perc) + 1e-6\n        a_mod = 1.08 * a * (1 + 0.012 * math.sin(a + 0.045))\n        z = a_mod * (1 + 0.008 * math.cos(a + 0.065)) * (1 + 0.005 * math.sin(a + 0.115)) * (1 + 0.004 * math.cos(a + 0.085)) * (1 + 0.006 * (math.sin(a + 0.035) * math.cos(a + 0.055))) * (1 + 0.003 * (math.sin(a + 0.03) * math.cos(a + 0.05)))\n        w = (phi - 0.5) / phi\n\n        if z >= 0:\n            f_adapt = 1.002 * ( (z**w) * (math.log(1+z))**(1-w) * softsign(z) )\n        else:\n            f_adapt = phi * (softsign(z + 1e-6))**(48)\n\n        T = sum(a**k * (0.5)**k for k in range(121))\n\n        S = softplus(softplus(softplus(softplus(softplus(softplus(softplus(softplus(0.865/(1+a)))))))))\n\n        extra = math.exp(-a/0.1) * (z/(1+abs(z))) * (1 + 0.005*math.sin(1/(1+a))) * (1 + 0.002*math.cos(0.5*a)) * (1 + 0.003*math.cos(0.3*a))**2 * (1 + 0.004*math.cos(0.3*a))**2 * (1 + 0.0025*math.cos(0.7*a)) * (1 + math.tanh(0.05*a)) * (1 + (1/(1+math.exp(-0.01*a)))) * (1 + 0.002*math.cos(3*a)) * (1 + 0.002*(math.sin(2.5*a) + 0.001*math.cos(3.5*a) + 0.0015*math.sin(3*a))) * (1 + (1/(1+math.exp(-0.03*a)))) * (1 + math.tanh(0.07*a)) * (1 + math.cos(3.1*a)) * (1 + (1/(1+math.exp(-0.04*a)))) * (1 + math.tanh(0.08*a)) * (1 + math.cos(3.2*a)) * (1 + (1/(1+math.exp(-0.05*a)))) * (1 + math.tanh(0.1*a)) * (1 + math.cos(3.4*a)) * (1 + (1/(1+math.exp(-0.06*a)))) * (1 + math.tanh(0.12*a)) * (1 + math.cos(3.6*a)) * (1 + (1/(1+math.exp(-0.08*a)))) * (1 + math.tanh(0.2*a)) * (1 + math.cos(4.2*a)) * (1 + math.sin(4.0*a)) * (1 + (1/(1+math.exp(-0.12*a)))) * (1 + math.tanh(0.3*a)) * (1 + math.sin(4.2*a))\n        extra = extra * math.exp(-((a-1)**2)/(2*(0.25)**2)) * S\n        Exponent = (0.9478 + 0.00018 * math.log(1+a)) * (1 + 0.009*math.tanh(0.5*a) + 0.004*math.sin(3.5*a) + 0.003*math.cos(2.7*a) + 0.002*math.sin(4.0*a))\n\n        f = sign(z) * ( (f_adapt * T * extra)**(Exponent) )\n        U = beta + gamma * f\n        P_accept = 1 / (1 + math.exp(-U))\n\n        model_predictions.append(P_accept)\n\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.5570818070818071,
  "fitting_results": [
    {
      "beta": -10.0,
      "gamma": 3.864100445490939,
      "phi": 0.5662383519819603,
      "success": true,
      "log_likelihood": -24.953979470262787,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -9.193520028255662,
      "gamma": 3.424034536416336,
      "phi": 0.984133416403406,
      "success": true,
      "log_likelihood": -24.953298539488156,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.077806197765366,
      "gamma": 6.453033894121742,
      "phi": 1.451387555892801,
      "success": true,
      "log_likelihood": -24.897714334051482,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 6.72576382439242,
      "phi": 0.7120264397971798,
      "success": true,
      "log_likelihood": -24.953434695838467,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 6.671848374092658,
      "phi": 0.5382940774049735,
      "success": true,
      "log_likelihood": -24.953389297969775,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.2840881931365519,
      "gamma": 8.044509564945718,
      "phi": 0.9856630507678275,
      "success": true,
      "log_likelihood": -23.545973163896242,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 5.027740715133,
      "phi": 0.8148164693484165,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.8148123229960514,
      "gamma": 2.009293147817348,
      "phi": 0.7198835543000269,
      "success": true,
      "log_likelihood": -22.914510052104824,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 2.1592960141319817,
      "phi": 1.0343383612095471,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 1.4389121658977,
      "phi": 0.6547786400985717,
      "success": true,
      "log_likelihood": -24.95348009370716,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 7.551514825580363,
      "phi": 1.2585910139405025,
      "success": true,
      "log_likelihood": -24.95338929796977,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 7.417509442480456,
      "phi": 1.2127058308095557,
      "success": true,
      "log_likelihood": -24.953934072394095,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 6.619330533624156,
      "phi": 0.928636012683126,
      "success": true,
      "log_likelihood": -24.953434695838467,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 5.868196918842571,
      "phi": 1.3408244179306597,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 8.30485506573553,
      "phi": 0.548312165924724,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 7.264046420229951,
      "phi": 0.99548406025082,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.2472692924501696,
      "phi": 0.9880129160320201,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 1.1613457659827742,
      "phi": 1.069666002032593,
      "success": true,
      "log_likelihood": -16.27763329973089,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 6.435206828223618,
      "phi": 0.6627091890875388,
      "success": true,
      "log_likelihood": -15.27767869783462,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 8.908070902656128,
      "phi": 1.3859700636685321,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.2474423435947612,
      "gamma": 3.5505299908960852,
      "phi": 0.9743337097601975,
      "success": true,
      "log_likelihood": -24.73061675030421,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 8.115609605382026,
      "phi": 0.7834095901741388,
      "success": true,
      "log_likelihood": -16.27763329973089,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 3.8119660386874408,
      "phi": 0.6203655107690459,
      "success": true,
      "log_likelihood": -24.95352549157585,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.0782864826810035,
      "gamma": 2.5455521434416273,
      "phi": 1.0316465840554037,
      "success": true,
      "log_likelihood": -24.897714324102612,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -7.104924601645817,
      "gamma": 8.276051532462391,
      "phi": 1.440564685691755,
      "success": true,
      "log_likelihood": -24.95330152154841,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.6790554896498003,
      "gamma": 0.4274336449132654,
      "phi": 0.8696034811118452,
      "success": true,
      "log_likelihood": -24.450957568494978,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.2474363630761787,
      "gamma": 1.9165051395967991,
      "phi": 1.005551347734721,
      "success": true,
      "log_likelihood": -24.730616750305682,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.5435706751343106,
      "phi": 1.2401996103992803,
      "success": true,
      "log_likelihood": -24.953661685181935,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 3.57981645452658,
      "phi": 0.6225163360646015,
      "success": true,
      "log_likelihood": -15.27767869783462,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.6986376772038827,
      "phi": 0.615675381366799,
      "success": true,
      "log_likelihood": -19.2774971054197,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 7.098097072828793,
      "phi": 1.0719939606965965,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 3.139831490491419,
      "phi": 1.173549358092815,
      "success": true,
      "log_likelihood": -24.953979470262787,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 6.722626869190788,
      "phi": 1.058921514369226,
      "success": true,
      "log_likelihood": -24.953434695838464,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 6.046550103014077,
      "phi": 0.8118362581000177,
      "success": true,
      "log_likelihood": -24.953480093707164,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 9.952541568776343,
      "phi": 0.7546960217136276,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.2840745756257645,
      "gamma": 5.024955629433142,
      "phi": 0.6224026409772626,
      "success": true,
      "log_likelihood": -23.545973163849528,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.5236656927443122,
      "gamma": 1.2114536244777674,
      "phi": 1.13021591878482,
      "success": true,
      "log_likelihood": -22.157938190733407,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 9.463731383971808,
      "phi": 1.0050524430512668,
      "success": true,
      "log_likelihood": -24.953298502232386,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 6.652251966293896,
      "gamma": 7.64820572120498,
      "phi": 1.12528238830108,
      "success": true,
      "log_likelihood": -23.27443755105289,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 3.9784588503515605,
      "phi": 0.545476012895089,
      "success": true,
      "log_likelihood": -14.277724095938346,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.1927528445828321,
      "gamma": 1.3396632294518296,
      "phi": 0.6859873629737043,
      "success": true,
      "log_likelihood": -24.056945191331074,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 3.5472388587445725,
      "phi": 0.9144472248388832,
      "success": true,
      "log_likelihood": -24.95375248091932,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 8.945457347941087,
      "phi": 1.036730381547652,
      "success": true,
      "log_likelihood": -12.277814892145805,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.2474839447626205,
      "gamma": 9.949956878825855,
      "phi": 1.3291660416969662,
      "success": true,
      "log_likelihood": -24.730616750558166,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.19265026401586216,
      "gamma": 4.926944179831356,
      "phi": 1.0971124441202402,
      "success": true,
      "log_likelihood": -24.056945188725596,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 3.0674959111918176,
      "gamma": 6.220628088624803,
      "phi": 0.5309811918225643,
      "success": true,
      "log_likelihood": -21.270320860230836,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.0781239108302,
      "gamma": 3.7755786929280335,
      "phi": 0.5509467674874825,
      "success": true,
      "log_likelihood": -24.897714325204745,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -8.599499380510418,
      "gamma": 6.604716044009611,
      "phi": 0.8077433052066605,
      "success": true,
      "log_likelihood": -24.954035301825865,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 8.856665375981352,
      "phi": 1.4709161369224577,
      "success": true,
      "log_likelihood": -24.953434695838464,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.07834353577245,
      "gamma": 3.7475670951501905,
      "phi": 1.4466300048508802,
      "success": true,
      "log_likelihood": -24.897714324265184,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.5229187317006654,
      "gamma": 2.5444753119633177,
      "phi": 0.8316938549318776,
      "success": true,
      "log_likelihood": -22.15793815534652,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 2.210496963247659,
      "phi": 1.470052959200817,
      "success": true,
      "log_likelihood": -24.9538886745254,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -6.226630720389017,
      "gamma": 4.740739425360588,
      "phi": 1.107833149663342,
      "success": true,
      "log_likelihood": -24.951343794602025,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.6790702226067998,
      "gamma": 9.930534725193384,
      "phi": 1.1524851457604999,
      "success": true,
      "log_likelihood": -24.450957568545075,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.3655923868125277,
      "phi": 1.1269823424366716,
      "success": true,
      "log_likelihood": -24.95348009370716,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 5.808858684702164,
      "phi": 0.6279524247381929,
      "success": true,
      "log_likelihood": -24.953570889444546,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 3.1323347297010007,
      "phi": 1.4640522325230414,
      "success": true,
      "log_likelihood": -24.953661685181938,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 5.152333824678857,
      "phi": 0.5751144187422205,
      "success": true,
      "log_likelihood": -15.27767869783462,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 1.1078741671983794,
      "phi": 0.8006874382341631,
      "success": true,
      "log_likelihood": -24.953934072394095,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 6.311773277549291,
      "phi": 1.4780934636603935,
      "success": true,
      "log_likelihood": -18.27754250352343,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.19263998424468404,
      "gamma": 1.141585950249755,
      "phi": 0.7501085855130648,
      "success": true,
      "log_likelihood": -24.056945188769,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -8.783855757626682,
      "gamma": 5.71359819994962,
      "phi": 1.112326771229759,
      "success": true,
      "log_likelihood": -24.953298598522867,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 1.5441137305650077,
      "phi": 1.3828888234117578,
      "success": true,
      "log_likelihood": -24.953979470262787,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 6.737731811706386,
      "phi": 0.6484303027756525,
      "success": true,
      "log_likelihood": -24.95338929796977,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 4.7488666465251335,
      "phi": 0.7034041521001297,
      "success": true,
      "log_likelihood": -24.95375248091932,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.2475949270935633,
      "gamma": 9.342909654653353,
      "phi": 0.8272876657691269,
      "success": true,
      "log_likelihood": -24.730616753497074,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 5.973675611436862,
      "phi": 1.112579624821311,
      "success": true,
      "log_likelihood": -14.277724095938348,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 5.46969874673544,
      "phi": 0.6519154999894992,
      "success": true,
      "log_likelihood": -16.277633299730887,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.2473591306317315,
      "gamma": 7.2780297055603285,
      "phi": 1.1378560387029246,
      "success": true,
      "log_likelihood": -24.73061675118339,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.29007174795961155,
      "phi": 1.4194410585883634,
      "success": true,
      "log_likelihood": -14.27772409593835,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 9.39608222714294,
      "phi": 1.1510221219932335,
      "success": true,
      "log_likelihood": -24.953934072394095,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 5.583793664316275,
      "phi": 0.5270263663589623,
      "success": true,
      "log_likelihood": -24.9538886745254,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.077912972974391,
      "gamma": 4.312365027436297,
      "phi": 0.6671869300830962,
      "success": true,
      "log_likelihood": -24.89771433009018,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 7.589848177490994,
      "phi": 0.8190598739026408,
      "success": true,
      "log_likelihood": -19.2774971054197,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -9.721491770419439,
      "gamma": 7.456974916000355,
      "phi": 0.6247209559650472,
      "success": true,
      "log_likelihood": -24.953298509145533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.522958790198734,
      "gamma": 9.508139124029784,
      "phi": 1.2541152133860995,
      "success": true,
      "log_likelihood": -22.157938154908837,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 3.281825153039415,
      "phi": 1.088600727823421,
      "success": true,
      "log_likelihood": -13.277769494042078,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 7.930932561659581,
      "phi": 0.5289497805470367,
      "success": true,
      "log_likelihood": -24.95402486813148,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.1926554218878286,
      "gamma": 3.176613779760192,
      "phi": 1.0261474896475555,
      "success": true,
      "log_likelihood": -24.056945188724736,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 8.359066396218944,
      "phi": 0.6628384467856433,
      "success": true,
      "log_likelihood": -24.953979470262784,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.078094936386826,
      "gamma": 3.20356465816666,
      "phi": 0.9918761377391572,
      "success": true,
      "log_likelihood": -24.89771432564454,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 8.180416090223297,
      "phi": 0.5443001866750516,
      "success": true,
      "log_likelihood": -14.277724095938348,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 2.5555361671410717,
      "phi": 0.5429905377927876,
      "success": true,
      "log_likelihood": -24.953934072394095,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -6.5603699621479565,
      "gamma": 4.896867495606367,
      "phi": 1.4802207523100672,
      "success": true,
      "log_likelihood": -24.953307482116383,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.1926516889205224,
      "gamma": 5.842050012452459,
      "phi": 1.3830425897130552,
      "success": true,
      "log_likelihood": -24.056945188723976,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 7.938625177475148,
      "phi": 0.6229621169379416,
      "success": true,
      "log_likelihood": -24.95393407239409,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.5230084652439606,
      "gamma": 6.773825458057331,
      "phi": 1.0577548873691642,
      "success": true,
      "log_likelihood": -22.15793815473388,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 1.6715467681735063,
      "phi": 0.9005633940430228,
      "success": true,
      "log_likelihood": -24.95375248091932,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 1.6154296663857748,
      "phi": 0.7910824373191093,
      "success": true,
      "log_likelihood": -13.277769494042078,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.8778513657755926,
      "phi": 0.9616871043900723,
      "success": true,
      "log_likelihood": -24.953343900101082,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.2777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.5230125565466082,
      "gamma": 8.146063797620231,
      "phi": 1.237829479503909,
      "success": true,
      "log_likelihood": -22.15793815473763,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "beta": {
        "r": 0.7413712347343834,
        "p": 1.1390290742883226e-18
      },
      "gamma": {
        "r": -0.07797492309600157,
        "p": 0.4406352466382543
      },
      "phi": {
        "r": -0.07835470176481178,
        "p": 0.43840567931704477
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 53.931794677999505,
  "bic_results": {
    "average_bic": 53.931794677999505,
    "individual_bics": [
      60.6585157558939,
      60.657153894344646,
      60.5459854834713,
      60.65742620704526,
      60.65733541130788,
      57.84250314316081,
      33.3062773958674,
      56.579576919577974,
      33.3062773958674,
      60.657517002782654,
      60.65733541130787,
      60.65842496015652,
      60.65742620704526,
      33.3062773958674,
      33.3062773958674,
      33.3062773958674,
      33.3062773958674,
      43.305823414830115,
      41.305914211037575,
      33.3062773958674,
      60.21179031597676,
      43.305823414830115,
      60.65760779852003,
      60.54598546357356,
      60.65715985846515,
      59.65247195235828,
      60.2117903159797,
      60.657880185732196,
      41.305914211037575,
      49.30555102620774,
      33.3062773958674,
      60.6585157558939,
      60.65742620704526,
      60.657517002782654,
      33.3062773958674,
      57.84250314306739,
      55.06643319683515,
      60.6571538198331,
      57.29943191747411,
      39.30600500724502,
      58.864447198030476,
      60.65806177720697,
      35.30618659965994,
      60.21179031648467,
      58.864447192819526,
      53.291198535830006,
      60.54598546577782,
      60.658627419020064,
      60.65742620704526,
      60.5459854638987,
      55.06643312606137,
      60.65833416441913,
      60.653244404572376,
      59.652471952458484,
      60.657517002782654,
      60.657698594257425,
      60.65788018573221,
      41.305914211037575,
      60.65842496015652,
      47.3056418224152,
      58.864447192906326,
      60.65715401241407,
      60.6585157558939,
      60.65733541130787,
      60.65806177720697,
      60.211790322362475,
      39.30600500724503,
      43.3058234148301,
      60.21179031773511,
      39.306005007245034,
      60.65842496015652,
      60.65833416441913,
      60.54598547554869,
      49.30555102620774,
      60.65715383365939,
      55.06643312518601,
      37.306095803452486,
      60.658606551631294,
      58.864447192817806,
      60.6585157558939,
      60.54598546665741,
      39.30600500724503,
      60.65842496015652,
      60.6571717796011,
      58.864447192816286,
      60.65842496015651,
      55.066433124836095,
      60.65806177720697,
      37.306095803452486,
      60.65724461557049,
      55.066433124843584
    ],
    "group_enabled": false,
    "group_bics": null,
    "num_parameters": 3,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- beta: r = 0.741\n- gamma: r = -0.078\n- phi: r = -0.078",
  "previous_models": [
    "Specification: a = (trial_type + trial_role + token_opp + token_self + combined_earning + split_opp + split_self + splitperc_opp + splitperc_self + accepted_amount + accepted_perc) + 1e-6\na_mod = 1.08 * a * (1 + 0.012 * sin(a + 0.045))\nz = a_mod * (1 + 0.008 * cos(a + 0.065)) * (1 + 0.005 * sin(a + 0.115)) * (1 + 0.004 * cos(a + 0.085)) * (1 + 0.006 * (sin(a + 0.035) * cos(a + 0.055))) * (1 + 0.003 * (sin(a + 0.03) * cos(a + 0.05)))\nw = (phi - 0.5) / phi\nsoftsign(x) = x / (1 + abs(x))\nf_adapt = { 1.002 * ( (z^w) * (ln(1+z))^(1-w) * softsign(z) )  if z >= 0,  phi * (softsign(z + 1e-6))^(48)  if z < 0 }\nT = sum_{k=0}^{120} (a^k * (0.5)^k)\nS = softplus(softplus(softplus(softplus(softplus(softplus(softplus(softplus(0.865/(1+a)))))))))\nextra = exp(-a/0.1) * (z/(1+abs(z))) * (1 + 0.005*sin(1/(1+a))) * (1 + 0.002*cos(0.5*a)) * (1 + 0.003*cos(0.3*a))^2 * (1 + 0.004*cos(0.3*a))^2 * (1 + 0.0025*cos(0.7*a)) * (1 + tanh(0.05*a)) * (1 + (1/(1+exp(-0.01*a)))) * (1 + 0.002*cos(3*a)) * (1 + 0.002*(sin(2.5*a) + 0.001*cos(3.5*a) + 0.0015*sin(3*a))) * (1 + (1/(1+exp(-0.03*a)))) * (1 + tanh(0.07*a)) * (1 + cos(3.1*a)) * (1 + (1/(1+exp(-0.04*a)))) * (1 + tanh(0.08*a)) * (1 + cos(3.2*a)) * (1 + (1/(1+exp(-0.05*a)))) * (1 + tanh(0.1*a)) * (1 + cos(3.4*a)) * (1 + (1/(1+exp(-0.06*a)))) * (1 + tanh(0.12*a)) * (1 + cos(3.6*a)) * (1 + (1/(1+exp(-0.08*a)))) * (1 + tanh(0.2*a)) * (1 + cos(4.2*a)) * (1 + sin(4.0*a)) * (1 + (1/(1+exp(-0.12*a)))) * (1 + tanh(0.3*a)) * (1 + sin(4.2*a))\nextra = extra * exp(-((a-1)^2)/(2*(0.25)^2)) * S\nExponent = (0.9478 + 0.00018 * ln(1+a)) * (1 + 0.009*tanh(0.5*a) + 0.004*sin(3.5*a) + 0.003*cos(2.7*a) + 0.002*sin(4.0*a))\nf = sign(z) * ( (f_adapt * T * extra)^(Exponent) )\nU = beta + gamma * f\nP_accept = 1 / (1 + exp(-U))\nSummary: A highly flexible nonlinear utility model for binary responder decisions. The model computes a composite signal by summing eleven fixed task components (derived from key task variables) and applying extensive nonlinear, oscillatory, and multiplicative modulations\u2014including sequential sinusoidal, cosine, softplus nestings, and a dynamic threshold summation\u2014before raising the result to a modulated exponent. Finally, the latent utility is formed as an affine function of the transformed signal using three learnable parameters (beta, gamma, and phi), and a logistic function maps utility to acceptance probability.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 53.931794677999505\nOverall Accuracy: 0.5571\n\nParameter Recovery:\n- beta: r = 0.741\n- gamma: r = -0.078\n- phi: r = -0.078"
  ]
}