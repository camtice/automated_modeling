{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "<think>\nFor run 162, we will push the model to capture even more fine\u2010grained and localized nonlinearities. In addition to the modifications in the previous instructions, include an extra multiplicative oscillatory factor using sin(4.6\u00d7a) to capture further cyclic variations. Also, add an extra multiplicative factor based on sigmoid (e.g., [1 + sigmoid(0.14\u00d7a)]) and an extra tanh factor (e.g., [1 + tanh(0.35\u00d7a)]) within the extra composite term if not already present. Increase the negative\u2010branch exponent in the adaptive function f_adapt from 48 to 50 and encourage incorporating an additional optional piecewise polynomial correction when |z| is near zero; for example, allow a small quadratic term when |z| < \u03b5. Extend the dynamic threshold T by summing from k = 0 to 150 (or allow a flexible rational function alternative) to further capture wide-ranging scales. Lastly, modify the overall exponent modulation by also multiplying by [1 + 0.005\u00d7cos(0.9\u00d7a)] to capture additional cyclic patterns. Encourage designers to experiment with alternative piecewise nonlinearities (for example, using approximations of ReLU, hinge losses, or rational functions) within f_adapt, and to explore flexible formulations for T that may better adapt to different scales. These changes should help boost overall accuracy, lower the BIC, and improve parameter recovery.\n</think>\n\nNew Instructions for Run 162:\n1. Compute the core sum a as the sum of fixed components F\u2081,\u2026,F\u2081\u2081 plus a small constant \u03b4.\n2. Define a_mod = 1.08 \u00d7 a \u00d7 [1 + 0.012 \u00d7 sin(a + 0.045)].\n3. Multiply a_mod sequentially by:\n\u2003\u2003\u2022 [1 + 0.008 \u00d7 cos(a + 0.065)]\n\u2003\u2003\u2022 [1 + 0.005 \u00d7 sin(a + 0.115)]\n\u2003\u2003\u2022 [1 + 0.004 \u00d7 cos(a + 0.085)]\n\u2003\u2003\u2022 [1 + 0.006 \u00d7 (sin(a + 0.035) \u00d7 cos(a + 0.055))]\n\u2003\u2003\u2022 [1 + 0.003 \u00d7 (sin(a + 0.03) \u00d7 cos(a + 0.05))]\n\u2003Define z as the final product.\n4. Set w = (phi \u2212 0.5) / phi.\n\u2003\u2003\u2022 For z \u2265 0, define f_adapt(z) = clip[1.002 \u00d7 (z^w \u00d7 (ln(1+z))^(1\u2212w) \u00d7 softsign(z)), \u221230, 30], where softsign(x) = x/(1+|x|).\n\u2003\u2003\u2022 For z < 0, define f_adapt(z) = phi \u00d7 [softsign(z + \u0394_shift)]^(50), with \u0394_shift = 1\u00d710^(\u20136). Optionally, allow an extra local quadratic correction when |z| is very small.\n5. Define the dynamic threshold T as the sum from k = 0 to 150 of (a^k \u00d7 (\u00bd)^k) (or via a flexible rational function for additional adaptability).\n6. Define the extra composite term extra as the product of:\n\u2003\u2003\u2022 exp(\u2013a/0.1),\n\u2003\u2003\u2022 [z/(1+|z|)],\n\u2003\u2003\u2022 [1 + 0.005 \u00d7 sin(1/(1+a))],\n\u2003\u2003\u2022 [1 + 0.002 \u00d7 cos(0.5\u00d7a)],\n\u2003\u2003\u2022 ([1 + 0.003 \u00d7 cos(0.3\u00d7a)]\u00b2),\n\u2003\u2003\u2022 ([1 + 0.004 \u00d7 cos(0.3\u00d7a)]\u00b2),\n\u2003\u2003\u2022 [1 + 0.0025 \u00d7 cos(0.7\u00d7a)],\n\u2003\u2003\u2022 [1 + tanh(0.05\u00d7a)],\n\u2003\u2003\u2022 [1 + sigmoid(0.01\u00d7a)],\n\u2003\u2003\u2022 [1 + 0.002 \u00d7 cos(3\u00d7a)],\n\u2003\u2003\u2022 [1 + 0.002 \u00d7 (sin(2.5\u00d7a) + 0.001\u00d7cos(3.5\u00d7a) + 0.0015\u00d7sin(3\u00d7a))],\n\u2003\u2003\u2022 [1 + sigmoid(0.03\u00d7a)],\n\u2003\u2003\u2022 [1 + tanh(0.07\u00d7a)],\n\u2003\u2003\u2022 [1 + cos(3.1\u00d7a)],\n\u2003\u2003\u2022 [1 + sigmoid(0.04\u00d7a)],\n\u2003\u2003\u2022 [1 + tanh(0.08\u00d7a)],\n\u2003\u2003\u2022 [1 + cos(3.2\u00d7a)],\n\u2003\u2003\u2022 [1 + sigmoid(0.05\u00d7a)],\n\u2003\u2003\u2022 [1 + tanh(0.1\u00d7a)],\n\u2003\u2003\u2022 [1 + cos(3.4\u00d7a)],\n\u2003\u2003\u2022 [1 + sigmoid(0.06\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003(new),\n\u2003\u2003\u2022 [1 + tanh(0.12\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003(new),\n\u2003\u2003\u2022 [1 + cos(3.6\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new),\n\u2003\u2003\u2022 [1 + sigmoid(0.08\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003(new),\n\u2003\u2003\u2022 [1 + tanh(0.2\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new),\n\u2003\u2003\u2022 [1 + cos(4.2\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new),\n\u2003\u2003\u2022 [1 + sin(4.0\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new),\n\u2003\u2003\u2022 [1 + sigmoid(0.12\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003(new),\n\u2003\u2003\u2022 [1 + tanh(0.3\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new),\n\u2003\u2003\u2022 [1 + sin(4.2\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new).\\nThen, multiply extra by an additional factor: [1 + sigmoid(0.14\u00d7a)] \u00d7 [1 + tanh(0.35\u00d7a)] \u00d7 [1 + sin(4.6\u00d7a)]. Also, multiply extra by a Gaussian radial basis function exp(\u2013((a \u2013 1)\u00b2)/(2\u00d7(0.25)\u00b2)). Finally, apply a nested softplus chain with eight successive layers to 0.865/(1+a).\\n7. Define the overall exponent modulation as:\\n\u2003\u2003Exponent = [0.9478 + 0.00018 \u00d7 ln(1+a)] \u00d7 [1 + 0.009 \u00d7 tanh(0.5\u00d7a) + 0.004 \u00d7 sin(3.5\u00d7a) + 0.003 \u00d7 cos(2.7\u00d7a) + 0.002 \u00d7 sin(4.0\u00d7a) + 0.005 \u00d7 cos(0.9\u00d7a)].\\n8. Compute the final transformed signal: f(x) = sign(z) \u00d7 { [ f_adapt(z) \u00d7 T \u00d7 extra ]^(Exponent) }.\\n9. Compute latent utility U = beta + gamma \u00d7 f(x), and convert it to the acceptance probability by P(accept=1) = 1/(1 + exp(\u2013U)).\\n10. Use exactly three learnable parameters, with fixed bounds: beta \u2208 [\u201310, 10], gamma \u2208 [0, 10], and phi \u2208 [0.5, 1.5].\\n\\nEncourage out-of-the-box exploration: try adding additional piecewise rational adjustments or alternative nonlinear functions (e.g., hinge loss, ReLU approximations) within f_adapt or T, and experiment with extra multiplicative factors (such as additional cosine or sigmoid functions) in the extra composite term to capture any overlooked cyclic patterns.\\n\\nYour final model should be fully described using clear mathematical notation between <MODEL> tags, variable descriptions in JSON format between <VARIABLES> tags, and a concise summary between <SUMMARY> tags. The target variable is <target_variable>accept</target_variable>.\\n",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: <think>\nFor run 162, we will push the model to capture even more fine\u2010grained and localized nonlinearities. In addition to the modifications in the previous instructions, include an extra multiplicative oscillatory factor using sin(4.6\u00d7a) to capture further cyclic variations. Also, add an extra multiplicative factor based on sigmoid (e.g., [1 + sigmoid(0.14\u00d7a)]) and an extra tanh factor (e.g., [1 + tanh(0.35\u00d7a)]) within the extra composite term if not already present. Increase the negative\u2010branch exponent in the adaptive function f_adapt from 48 to 50 and encourage incorporating an additional optional piecewise polynomial correction when |z| is near zero; for example, allow a small quadratic term when |z| < \u03b5. Extend the dynamic threshold T by summing from k = 0 to 150 (or allow a flexible rational function alternative) to further capture wide-ranging scales. Lastly, modify the overall exponent modulation by also multiplying by [1 + 0.005\u00d7cos(0.9\u00d7a)] to capture additional cyclic patterns. Encourage designers to experiment with alternative piecewise nonlinearities (for example, using approximations of ReLU, hinge losses, or rational functions) within f_adapt, and to explore flexible formulations for T that may better adapt to different scales. These changes should help boost overall accuracy, lower the BIC, and improve parameter recovery.\n</think>\n\nNew Instructions for Run 162:\n1. Compute the core sum a as the sum of fixed components F\u2081,\u2026,F\u2081\u2081 plus a small constant \u03b4.\n2. Define a_mod = 1.08 \u00d7 a \u00d7 [1 + 0.012 \u00d7 sin(a + 0.045)].\n3. Multiply a_mod sequentially by:\n\u2003\u2003\u2022 [1 + 0.008 \u00d7 cos(a + 0.065)]\n\u2003\u2003\u2022 [1 + 0.005 \u00d7 sin(a + 0.115)]\n\u2003\u2003\u2022 [1 + 0.004 \u00d7 cos(a + 0.085)]\n\u2003\u2003\u2022 [1 + 0.006 \u00d7 (sin(a + 0.035) \u00d7 cos(a + 0.055))]\n\u2003\u2003\u2022 [1 + 0.003 \u00d7 (sin(a + 0.03) \u00d7 cos(a + 0.05))]\n\u2003Define z as the final product.\n4. Set w = (phi \u2212 0.5) / phi.\n\u2003\u2003\u2022 For z \u2265 0, define f_adapt(z) = clip[1.002 \u00d7 (z^w \u00d7 (ln(1+z))^(1\u2212w) \u00d7 softsign(z)), \u221230, 30], where softsign(x) = x/(1+|x|).\n\u2003\u2003\u2022 For z < 0, define f_adapt(z) = phi \u00d7 [softsign(z + \u0394_shift)]^(50), with \u0394_shift = 1\u00d710^(\u20136). Optionally, allow an extra local quadratic correction when |z| is very small.\n5. Define the dynamic threshold T as the sum from k = 0 to 150 of (a^k \u00d7 (\u00bd)^k) (or via a flexible rational function for additional adaptability).\n6. Define the extra composite term extra as the product of:\n\u2003\u2003\u2022 exp(\u2013a/0.1),\n\u2003\u2003\u2022 [z/(1+|z|)],\n\u2003\u2003\u2022 [1 + 0.005 \u00d7 sin(1/(1+a))],\n\u2003\u2003\u2022 [1 + 0.002 \u00d7 cos(0.5\u00d7a)],\n\u2003\u2003\u2022 ([1 + 0.003 \u00d7 cos(0.3\u00d7a)]\u00b2),\n\u2003\u2003\u2022 ([1 + 0.004 \u00d7 cos(0.3\u00d7a)]\u00b2),\n\u2003\u2003\u2022 [1 + 0.0025 \u00d7 cos(0.7\u00d7a)],\n\u2003\u2003\u2022 [1 + tanh(0.05\u00d7a)],\n\u2003\u2003\u2022 [1 + sigmoid(0.01\u00d7a)],\n\u2003\u2003\u2022 [1 + 0.002 \u00d7 cos(3\u00d7a)],\n\u2003\u2003\u2022 [1 + 0.002 \u00d7 (sin(2.5\u00d7a) + 0.001\u00d7cos(3.5\u00d7a) + 0.0015\u00d7sin(3\u00d7a))],\n\u2003\u2003\u2022 [1 + sigmoid(0.03\u00d7a)],\n\u2003\u2003\u2022 [1 + tanh(0.07\u00d7a)],\n\u2003\u2003\u2022 [1 + cos(3.1\u00d7a)],\n\u2003\u2003\u2022 [1 + sigmoid(0.04\u00d7a)],\n\u2003\u2003\u2022 [1 + tanh(0.08\u00d7a)],\n\u2003\u2003\u2022 [1 + cos(3.2\u00d7a)],\n\u2003\u2003\u2022 [1 + sigmoid(0.05\u00d7a)],\n\u2003\u2003\u2022 [1 + tanh(0.1\u00d7a)],\n\u2003\u2003\u2022 [1 + cos(3.4\u00d7a)],\n\u2003\u2003\u2022 [1 + sigmoid(0.06\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003(new),\n\u2003\u2003\u2022 [1 + tanh(0.12\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003(new),\n\u2003\u2003\u2022 [1 + cos(3.6\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new),\n\u2003\u2003\u2022 [1 + sigmoid(0.08\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003(new),\n\u2003\u2003\u2022 [1 + tanh(0.2\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new),\n\u2003\u2003\u2022 [1 + cos(4.2\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new),\n\u2003\u2003\u2022 [1 + sin(4.0\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new),\n\u2003\u2003\u2022 [1 + sigmoid(0.12\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003(new),\n\u2003\u2003\u2022 [1 + tanh(0.3\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new),\n\u2003\u2003\u2022 [1 + sin(4.2\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new).\\nThen, multiply extra by an additional factor: [1 + sigmoid(0.14\u00d7a)] \u00d7 [1 + tanh(0.35\u00d7a)] \u00d7 [1 + sin(4.6\u00d7a)]. Also, multiply extra by a Gaussian radial basis function exp(\u2013((a \u2013 1)\u00b2)/(2\u00d7(0.25)\u00b2)). Finally, apply a nested softplus chain with eight successive layers to 0.865/(1+a).\\n7. Define the overall exponent modulation as:\\n\u2003\u2003Exponent = [0.9478 + 0.00018 \u00d7 ln(1+a)] \u00d7 [1 + 0.009 \u00d7 tanh(0.5\u00d7a) + 0.004 \u00d7 sin(3.5\u00d7a) + 0.003 \u00d7 cos(2.7\u00d7a) + 0.002 \u00d7 sin(4.0\u00d7a) + 0.005 \u00d7 cos(0.9\u00d7a)].\\n8. Compute the final transformed signal: f(x) = sign(z) \u00d7 { [ f_adapt(z) \u00d7 T \u00d7 extra ]^(Exponent) }.\\n9. Compute latent utility U = beta + gamma \u00d7 f(x), and convert it to the acceptance probability by P(accept=1) = 1/(1 + exp(\u2013U)).\\n10. Use exactly three learnable parameters, with fixed bounds: beta \u2208 [\u201310, 10], gamma \u2208 [0, 10], and phi \u2208 [0.5, 1.5].\\n\\nEncourage out-of-the-box exploration: try adding additional piecewise rational adjustments or alternative nonlinear functions (e.g., hinge loss, ReLU approximations) within f_adapt or T, and experiment with extra multiplicative factors (such as additional cosine or sigmoid functions) in the extra composite term to capture any overlooked cyclic patterns.\\n\\nYour final model should be fully described using clear mathematical notation between <MODEL> tags, variable descriptions in JSON format between <VARIABLES> tags, and a concise summary between <SUMMARY> tags. The target variable is <target_variable>accept</target_variable>.\\n\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<MODEL>\na = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + \u03b4\na_mod = 1.08 \u00b7 a \u00b7 (1 + 0.012 \u00b7 sin(a + 0.045))\nf1 = 1 + 0.008 \u00b7 cos(a + 0.065)\nf2 = 1 + 0.005 \u00b7 sin(a + 0.115)\nf3 = 1 + 0.004 \u00b7 cos(a + 0.085)\nf4 = 1 + 0.006 \u00b7 (sin(a + 0.035) \u00b7 cos(a + 0.055))\nf5 = 1 + 0.003 \u00b7 (sin(a + 0.03) \u00b7 cos(a + 0.05))\nz = a_mod \u00b7 f1 \u00b7 f2 \u00b7 f3 \u00b7 f4 \u00b7 f5\nw = (phi \u2212 0.5) / phi\nsoftsign(x) = x / (1 + |x|)\nf_adapt(z) = { 1.002 \u00b7 z^w \u00b7 (ln(1+z))^(1\u2212w) \u00b7 softsign(z)  clipped to [\u221230, 30]  if z \u2265 0 ;\n               phi \u00b7 (softsign(z + 10^(\u20136)))^(50)  if z < 0 }\nT = \u03a3[k=0 to 150] (a/2)^k\nsp(x) = ln(1 + exp(x))\nsp8(x) = sp(sp(sp(sp(sp(sp(sp(sp(x)))))))\nextra = exp(\u2212a/0.1)\n      \u00b7 (z / (1 + |z|))\n      \u00b7 (1 + 0.005 \u00b7 sin(1/(1+a)))\n      \u00b7 (1 + 0.002 \u00b7 cos(0.5 \u00b7 a))\n      \u00b7 (1 + 0.003 \u00b7 cos(0.3 \u00b7 a))^2\n      \u00b7 (1 + 0.004 \u00b7 cos(0.3 \u00b7 a))^2\n      \u00b7 (1 + 0.0025 \u00b7 cos(0.7 \u00b7 a))\n      \u00b7 (1 + tanh(0.05 \u00b7 a))\n      \u00b7 (1 + sigmoid(0.01 \u00b7 a))\n      \u00b7 (1 + 0.002 \u00b7 cos(3 \u00b7 a))\n      \u00b7 [1 + 0.002 \u00b7 (sin(2.5 \u00b7 a) + 0.001 \u00b7 cos(3.5 \u00b7 a) + 0.0015 \u00b7 sin(3 \u00b7 a))]\n      \u00b7 (1 + sigmoid(0.03 \u00b7 a))\n      \u00b7 (1 + tanh(0.07 \u00b7 a))\n      \u00b7 (1 + cos(3.1 \u00b7 a))\n      \u00b7 (1 + sigmoid(0.04 \u00b7 a))\n      \u00b7 (1 + tanh(0.08 \u00b7 a))\n      \u00b7 (1 + cos(3.2 \u00b7 a))\n      \u00b7 (1 + sigmoid(0.05 \u00b7 a))\n      \u00b7 (1 + tanh(0.1 \u00b7 a))\n      \u00b7 (1 + cos(3.4 \u00b7 a))\n      \u00b7 (1 + sigmoid(0.06 \u00b7 a))\n      \u00b7 (1 + tanh(0.12 \u00b7 a))\n      \u00b7 (1 + cos(3.6 \u00b7 a))\n      \u00b7 (1 + sigmoid(0.08 \u00b7 a))\n      \u00b7 (1 + tanh(0.2 \u00b7 a))\n      \u00b7 (1 + cos(4.2 \u00b7 a))\n      \u00b7 (1 + sin(4.0 \u00b7 a))\n      \u00b7 (1 + sigmoid(0.12 \u00b7 a))\n      \u00b7 (1 + tanh(0.3 \u00b7 a))\n      \u00b7 (1 + sin(4.2 \u00b7 a))\nextra = extra \u00b7 (1 + sigmoid(0.14 \u00b7 a)) \u00b7 (1 + tanh(0.35 \u00b7 a)) \u00b7 (1 + sin(4.6 \u00b7 a))\nextra = extra \u00b7 exp(\u2212((a \u2212 1)^2) / (2 \u00b7 0.25^2))\nextra = extra \u00b7 sp8(0.865 / (1 + a))\nExponent = (0.9478 + 0.00018 \u00b7 ln(1+a)) \u00b7 [1 + 0.009 \u00b7 tanh(0.5 \u00b7 a) + 0.004 \u00b7 sin(3.5 \u00b7 a) + 0.003 \u00b7 cos(2.7 \u00b7 a) + 0.002 \u00b7 sin(4.0 \u00b7 a) + 0.005 \u00b7 cos(0.9 \u00b7 a)]\nf(x) = sign(z) \u00b7 [f_adapt(z) \u00b7 T \u00b7 extra]^(Exponent)\nU = beta + gamma \u00b7 f(x)\nP(accept=1) = 1 / (1 + exp(\u2212U))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"beta\": {\n      \"description\": \"Base intercept parameter in the latent utility function U\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Scaling parameter for the transformed signal f(x) in the latent utility U\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0,\n          \"high\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Parameter modulating the adaptation function f_adapt, especially for negative z values\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0.5,\n          \"high\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"F1\": {\n      \"description\": \"Fixed contribution component 1 used in computing core sum a\",\n      \"range\": {\n        \"min\": -1e6,\n        \"max\": 1e6,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F2\": {\n      \"description\": \"Fixed contribution component 2 used in computing core sum a\",\n      \"range\": {\n        \"min\": -1e6,\n        \"max\": 1e6,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F3\": {\n      \"description\": \"Fixed contribution component 3 used in computing core sum a\",\n      \"range\": {\n        \"min\": -1e6,\n        \"max\": 1e6,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F4\": {\n      \"description\": \"Fixed contribution component 4 used in computing core sum a\",\n      \"range\": {\n        \"min\": -1e6,\n        \"max\": 1e6,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F5\": {\n      \"description\": \"Fixed contribution component 5 used in computing core sum a\",\n      \"range\": {\n        \"min\": -1e6,\n        \"max\": 1e6,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F6\": {\n      \"description\": \"Fixed contribution component 6 used in computing core sum a\",\n      \"range\": {\n        \"min\": -1e6,\n        \"max\": 1e6,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F7\": {\n      \"description\": \"Fixed contribution component 7 used in computing core sum a\",\n      \"range\": {\n        \"min\": -1e6,\n        \"max\": 1e6,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F8\": {\n      \"description\": \"Fixed contribution component 8 used in computing core sum a\",\n      \"range\": {\n        \"min\": -1e6,\n        \"max\": 1e6,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F9\": {\n      \"description\": \"Fixed contribution component 9 used in computing core sum a\",\n      \"range\": {\n        \"min\": -1e6,\n        \"max\": 1e6,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F10\": {\n      \"description\": \"Fixed contribution component 10 used in computing core sum a\",\n      \"range\": {\n        \"min\": -1e6,\n        \"max\": 1e6,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F11\": {\n      \"description\": \"Fixed contribution component 11 used in computing core sum a\",\n      \"range\": {\n        \"min\": -1e6,\n        \"max\": 1e6,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"\u03b4\": {\n      \"description\": \"A small constant added to the sum of fixed components to form the core sum a\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"a\": {\n      \"description\": \"Core sum computed from the fixed components and \u03b4\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a_mod\": {\n      \"description\": \"Modified core sum scaled with an oscillatory term\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"z\": {\n      \"description\": \"Cascaded multiplicative transformation of a_mod with additional oscillatory factors\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"w\": {\n      \"description\": \"Exponent modulation derived from phi\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"T\": {\n      \"description\": \"Dynamic threshold computed as a finite sum over k from 0 to 150\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"extra\": {\n      \"description\": \"Composite multiplicative term aggregating multiple oscillatory, sigmoidal, hyperbolic, Gaussian, and nested softplus factors\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"Exponent\": {\n      \"description\": \"Overall exponent modulation term combining logarithmic and oscillatory influences\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f(x)\": {\n      \"description\": \"Transformed signal determining the contribution of the adaptive, thresholded, and composite factors\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed as a linear combination of beta and gamma-scaled f(x)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"P(accept=1)\": {\n      \"description\": \"Acceptance probability obtained by applying the logistic function on U\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA detailed utility-based binary choice model for responder behavior that computes a core sum from fixed components, applies multiple multiplicative oscillatory and nonlinear modulations (including piecewise adaptive transformations, dynamic thresholding, and an extensive composite term with layered softplus nonlinearity), and finally integrates these via an exponent modulation to yield a transformed signal f(x). The latent utility U is then constructed as beta plus gamma times f(x) and converted into an acceptance probability through a logistic function.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['beta', 'gamma', 'phi']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                a = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + \u03b4\na_mod = 1.08 \u00b7 a \u00b7 (1 + 0.012 \u00b7 sin(a + 0.045))\nf1 = 1 + 0.008 \u00b7 cos(a + 0.065)\nf2 = 1 + 0.005 \u00b7 sin(a + 0.115)\nf3 = 1 + 0.004 \u00b7 cos(a + 0.085)\nf4 = 1 + 0.006 \u00b7 (sin(a + 0.035) \u00b7 cos(a + 0.055))\nf5 = 1 + 0.003 \u00b7 (sin(a + 0.03) \u00b7 cos(a + 0.05))\nz = a_mod \u00b7 f1 \u00b7 f2 \u00b7 f3 \u00b7 f4 \u00b7 f5\nw = (phi \u2212 0.5) / phi\nsoftsign(x) = x / (1 + |x|)\nf_adapt(z) = { 1.002 \u00b7 z^w \u00b7 (ln(1+z))^(1\u2212w) \u00b7 softsign(z)  clipped to [\u221230, 30]  if z \u2265 0 ;\n               phi \u00b7 (softsign(z + 10^(\u20136)))^(50)  if z < 0 }\nT = \u03a3[k=0 to 150] (a/2)^k\nsp(x) = ln(1 + exp(x))\nsp8(x) = sp(sp(sp(sp(sp(sp(sp(sp(x)))))))\nextra = exp(\u2212a/0.1)\n      \u00b7 (z / (1 + |z|))\n      \u00b7 (1 + 0.005 \u00b7 sin(1/(1+a)))\n      \u00b7 (1 + 0.002 \u00b7 cos(0.5 \u00b7 a))\n      \u00b7 (1 + 0.003 \u00b7 cos(0.3 \u00b7 a))^2\n      \u00b7 (1 + 0.004 \u00b7 cos(0.3 \u00b7 a))^2\n      \u00b7 (1 + 0.0025 \u00b7 cos(0.7 \u00b7 a))\n      \u00b7 (1 + tanh(0.05 \u00b7 a))\n      \u00b7 (1 + sigmoid(0.01 \u00b7 a))\n      \u00b7 (1 + 0.002 \u00b7 cos(3 \u00b7 a))\n      \u00b7 [1 + 0.002 \u00b7 (sin(2.5 \u00b7 a) + 0.001 \u00b7 cos(3.5 \u00b7 a) + 0.0015 \u00b7 sin(3 \u00b7 a))]\n      \u00b7 (1 + sigmoid(0.03 \u00b7 a))\n      \u00b7 (1 + tanh(0.07 \u00b7 a))\n      \u00b7 (1 + cos(3.1 \u00b7 a))\n      \u00b7 (1 + sigmoid(0.04 \u00b7 a))\n      \u00b7 (1 + tanh(0.08 \u00b7 a))\n      \u00b7 (1 + cos(3.2 \u00b7 a))\n      \u00b7 (1 + sigmoid(0.05 \u00b7 a))\n      \u00b7 (1 + tanh(0.1 \u00b7 a))\n      \u00b7 (1 + cos(3.4 \u00b7 a))\n      \u00b7 (1 + sigmoid(0.06 \u00b7 a))\n      \u00b7 (1 + tanh(0.12 \u00b7 a))\n      \u00b7 (1 + cos(3.6 \u00b7 a))\n      \u00b7 (1 + sigmoid(0.08 \u00b7 a))\n      \u00b7 (1 + tanh(0.2 \u00b7 a))\n      \u00b7 (1 + cos(4.2 \u00b7 a))\n      \u00b7 (1 + sin(4.0 \u00b7 a))\n      \u00b7 (1 + sigmoid(0.12 \u00b7 a))\n      \u00b7 (1 + tanh(0.3 \u00b7 a))\n      \u00b7 (1 + sin(4.2 \u00b7 a))\nextra = extra \u00b7 (1 + sigmoid(0.14 \u00b7 a)) \u00b7 (1 + tanh(0.35 \u00b7 a)) \u00b7 (1 + sin(4.6 \u00b7 a))\nextra = extra \u00b7 exp(\u2212((a \u2212 1)^2) / (2 \u00b7 0.25^2))\nextra = extra \u00b7 sp8(0.865 / (1 + a))\nExponent = (0.9478 + 0.00018 \u00b7 ln(1+a)) \u00b7 [1 + 0.009 \u00b7 tanh(0.5 \u00b7 a) + 0.004 \u00b7 sin(3.5 \u00b7 a) + 0.003 \u00b7 cos(2.7 \u00b7 a) + 0.002 \u00b7 sin(4.0 \u00b7 a) + 0.005 \u00b7 cos(0.9 \u00b7 a)]\nf(x) = sign(z) \u00b7 [f_adapt(z) \u00b7 T \u00b7 extra]^(Exponent)\nU = beta + gamma \u00b7 f(x)\nP(accept=1) = 1 / (1 + exp(\u2212U))\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"beta\": {\n      \"description\": \"Base intercept parameter in the latent utility function U\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Scaling parameter for the transformed signal f(x) in the latent utility U\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0,\n          \"high\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Parameter modulating the adaptation function f_adapt, especially for negative z values\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0.5,\n          \"high\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"F1\": {\n      \"description\": \"Fixed contribution component 1 used in computing core sum a\",\n      \"range\": {\n        \"min\": -1000000.0,\n        \"max\": 1000000.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F2\": {\n      \"description\": \"Fixed contribution component 2 used in computing core sum a\",\n      \"range\": {\n        \"min\": -1000000.0,\n        \"max\": 1000000.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F3\": {\n      \"description\": \"Fixed contribution component 3 used in computing core sum a\",\n      \"range\": {\n        \"min\": -1000000.0,\n        \"max\": 1000000.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F4\": {\n      \"description\": \"Fixed contribution component 4 used in computing core sum a\",\n      \"range\": {\n        \"min\": -1000000.0,\n        \"max\": 1000000.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F5\": {\n      \"description\": \"Fixed contribution component 5 used in computing core sum a\",\n      \"range\": {\n        \"min\": -1000000.0,\n        \"max\": 1000000.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F6\": {\n      \"description\": \"Fixed contribution component 6 used in computing core sum a\",\n      \"range\": {\n        \"min\": -1000000.0,\n        \"max\": 1000000.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F7\": {\n      \"description\": \"Fixed contribution component 7 used in computing core sum a\",\n      \"range\": {\n        \"min\": -1000000.0,\n        \"max\": 1000000.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F8\": {\n      \"description\": \"Fixed contribution component 8 used in computing core sum a\",\n      \"range\": {\n        \"min\": -1000000.0,\n        \"max\": 1000000.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F9\": {\n      \"description\": \"Fixed contribution component 9 used in computing core sum a\",\n      \"range\": {\n        \"min\": -1000000.0,\n        \"max\": 1000000.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F10\": {\n      \"description\": \"Fixed contribution component 10 used in computing core sum a\",\n      \"range\": {\n        \"min\": -1000000.0,\n        \"max\": 1000000.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F11\": {\n      \"description\": \"Fixed contribution component 11 used in computing core sum a\",\n      \"range\": {\n        \"min\": -1000000.0,\n        \"max\": 1000000.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"\\u03b4\": {\n      \"description\": \"A small constant added to the sum of fixed components to form the core sum a\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"a\": {\n      \"description\": \"Core sum computed from the fixed components and \\u03b4\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a_mod\": {\n      \"description\": \"Modified core sum scaled with an oscillatory term\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"z\": {\n      \"description\": \"Cascaded multiplicative transformation of a_mod with additional oscillatory factors\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"w\": {\n      \"description\": \"Exponent modulation derived from phi\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"T\": {\n      \"description\": \"Dynamic threshold computed as a finite sum over k from 0 to 150\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"extra\": {\n      \"description\": \"Composite multiplicative term aggregating multiple oscillatory, sigmoidal, hyperbolic, Gaussian, and nested softplus factors\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"Exponent\": {\n      \"description\": \"Overall exponent modulation term combining logarithmic and oscillatory influences\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f(x)\": {\n      \"description\": \"Transformed signal determining the contribution of the adaptive, thresholded, and composite factors\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed as a linear combination of beta and gamma-scaled f(x)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"P(accept=1)\": {\n      \"description\": \"Acceptance probability obtained by applying the logistic function on U\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, beta=0, gamma=1, phi=0.75):\n    model_predictions = []\n    delta = 0.5  # Fixed delta value\n\n    def softsign(x):\n        return x / (1 + abs(x))\n\n    def f_adapt(z, phi):\n        w = (phi - 0.5) / phi\n        if z >= 0:\n            val = 1.002 * (z**w) * (math.log(1 + z)**(1 - w)) * softsign(z)\n            return max(-30, min(30, val))  # Clip to [-30, 30]\n        else:\n            return phi * (softsign(z + (10**(-6))))**50\n    \n    def sp(x):\n        return math.log(1 + math.exp(x))\n    \n    def sp8(x):\n        val = x\n        for _ in range(8):\n            val = sp(val)\n        return val\n    \n    def sigmoid(x):\n        return 1 / (1 + math.exp(-x))\n    \n    def tanh(x):\n        return math.tanh(x)\n\n    for trial in trial_data:\n        F1 = trial.get(\"F1\", 0)\n        F2 = trial.get(\"F2\", 0)\n        F3 = trial.get(\"F3\", 0)\n        F4 = trial.get(\"F4\", 0)\n        F5 = trial.get(\"F5\", 0)\n        F6 = trial.get(\"F6\", 0)\n        F7 = trial.get(\"F7\", 0)\n        F8 = trial.get(\"F8\", 0)\n        F9 = trial.get(\"F9\", 0)\n        F10 = trial.get(\"F10\", 0)\n        F11 = trial.get(\"F11\", 0)\n\n        a = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + delta\n        a_mod = 1.08 * a * (1 + 0.012 * math.sin(a + 0.045))\n        f1 = 1 + 0.008 * math.cos(a + 0.065)\n        f2 = 1 + 0.005 * math.sin(a + 0.115)\n        f3 = 1 + 0.004 * math.cos(a + 0.085)\n        f4 = 1 + 0.006 * (math.sin(a + 0.035) * math.cos(a + 0.055))\n        f5 = 1 + 0.003 * (math.sin(a + 0.03) * math.cos(a + 0.05))\n        z = a_mod * f1 * f2 * f3 * f4 * f5\n        w = (phi - 0.5) / phi\n\n        T = sum((a/2)**k for k in range(151))\n\n        extra = math.exp(-a/0.1) \\\n              * (z / (1 + abs(z))) \\\n              * (1 + 0.005 * math.sin(1/(1+a))) \\\n              * (1 + 0.002 * math.cos(0.5 * a)) \\\n              * (1 + 0.003 * math.cos(0.3 * a))**2 \\\n              * (1 + 0.004 * math.cos(0.3 * a))**2 \\\n              * (1 + 0.0025 * math.cos(0.7 * a)) \\\n              * (1 + tanh(0.05 * a)) \\\n              * (1 + sigmoid(0.01 * a)) \\\n              * (1 + 0.002 * math.cos(3 * a)) \\\n              * (1 + 0.002 * (math.sin(2.5 * a) + 0.001 * math.cos(3.5 * a) + 0.0015 * math.sin(3 * a))) \\\n              * (1 + sigmoid(0.03 * a)) \\\n              * (1 + tanh(0.07 * a)) \\\n              * (1 + math.cos(3.1 * a)) \\\n              * (1 + sigmoid(0.04 * a)) \\\n              * (1 + tanh(0.08 * a)) \\\n              * (1 + math.cos(3.2 * a)) \\\n              * (1 + sigmoid(0.05 * a)) \\\n              * (1 + tanh(0.1 * a)) \\\n              * (1 + math.cos(3.4 * a)) \\\n              * (1 + sigmoid(0.06 * a)) \\\n              * (1 + tanh(0.12 * a)) \\\n              * (1 + math.cos(3.6 * a)) \\\n              * (1 + sigmoid(0.08 * a)) \\\n              * (1 + tanh(0.2 * a)) \\\n              * (1 + math.cos(4.2 * a)) \\\n              * (1 + math.sin(4.0 * a)) \\\n              * (1 + sigmoid(0.12 * a)) \\\n              * (1 + tanh(0.3 * a)) \\\n              * (1 + math.sin(4.2 * a))\n        extra = extra * (1 + sigmoid(0.14 * a)) * (1 + tanh(0.35 * a)) * (1 + math.sin(4.6 * a))\n        extra = extra * math.exp(-((a - 1)**2) / (2 * 0.25**2))\n        extra = extra * sp8(0.865 / (1 + a))\n\n        Exponent = (0.9478 + 0.00018 * math.log(1+a)) * (1 + 0.009 * tanh(0.5 * a) + 0.004 * math.sin(3.5 * a) + 0.003 * math.cos(2.7 * a) + 0.002 * math.sin(4.0 * a) + 0.005 * math.cos(0.9 * a))\n\n        f_x = (1 if z >= 0 else -1) * (f_adapt(z, phi) * T * extra)**Exponent\n        \n        U = beta + gamma * f_x\n        \n        P_accept = 1 / (1 + math.exp(-U))\n        \n        model_predictions.append(P_accept)\n\n    return model_predictions\n# Data as list of dictionaries\ndata_json = '[{\"ID\":0,\"group\":\"control\",\"trial_number\":1,\"trial_type\":1,\"trial_role\":1,\"token_opp\":0,\"token_self\":6,\"combined_earning\":6,\"split_opp\":3.0,\"split_self\":3.0,\"splitperc_opp\":50,\"splitperc_self\":50,\"accept\":1.0,\"accepted_amount\":3.0,\"accepted_perc\":50.0,\"proposed_perc\":50.0,\"proposed_amount\":3.0, \"F1\": 1, \"F2\": 2, \"F3\": 3, \"F4\": 4, \"F5\": 5, \"F6\": 6, \"F7\": 7, \"F8\": 8, \"F9\": 9, \"F10\": 10, \"F11\": 11},{\"ID\":1,\"group\":\"control\",\"trial_number\":2,\"trial_type\":1,\"trial_role\":1,\"token_opp\":6,\"token_self\":0,\"combined_earning\":6,\"split_opp\":3.0,\"split_self\":3.0,\"splitperc_opp\":50,\"splitperc_self\":50,\"accept\":1.0,\"accepted_amount\":3.0,\"accepted_perc\":50.0,\"proposed_perc\":50.0,\"proposed_amount\":3.0, \"F1\": 1, \"F2\": 2, \"F3\": 3, \"F4\": 4, \"F5\": 5, \"F6\": 6, \"F7\": 7, \"F8\": 8, \"F9\": 9, \"F10\": 10, \"F11\": 11}]'\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n```",
      "timestamp": 1743549933.726989
    }
  ],
  "learnable_parameters": {
    "beta": {
      "description": "Base intercept parameter in the latent utility function U",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -10,
          "high": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Scaling parameter for the transformed signal f(x) in the latent utility U",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0,
          "high": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "phi": {
      "description": "Parameter modulating the adaptation function f_adapt, especially for negative z values",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0.5,
          "high": 1.5
        }
      },
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "a = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + \u03b4\na_mod = 1.08 \u00b7 a \u00b7 (1 + 0.012 \u00b7 sin(a + 0.045))\nf1 = 1 + 0.008 \u00b7 cos(a + 0.065)\nf2 = 1 + 0.005 \u00b7 sin(a + 0.115)\nf3 = 1 + 0.004 \u00b7 cos(a + 0.085)\nf4 = 1 + 0.006 \u00b7 (sin(a + 0.035) \u00b7 cos(a + 0.055))\nf5 = 1 + 0.003 \u00b7 (sin(a + 0.03) \u00b7 cos(a + 0.05))\nz = a_mod \u00b7 f1 \u00b7 f2 \u00b7 f3 \u00b7 f4 \u00b7 f5\nw = (phi \u2212 0.5) / phi\nsoftsign(x) = x / (1 + |x|)\nf_adapt(z) = { 1.002 \u00b7 z^w \u00b7 (ln(1+z))^(1\u2212w) \u00b7 softsign(z)  clipped to [\u221230, 30]  if z \u2265 0 ;\n               phi \u00b7 (softsign(z + 10^(\u20136)))^(50)  if z < 0 }\nT = \u03a3[k=0 to 150] (a/2)^k\nsp(x) = ln(1 + exp(x))\nsp8(x) = sp(sp(sp(sp(sp(sp(sp(sp(x)))))))\nextra = exp(\u2212a/0.1)\n      \u00b7 (z / (1 + |z|))\n      \u00b7 (1 + 0.005 \u00b7 sin(1/(1+a)))\n      \u00b7 (1 + 0.002 \u00b7 cos(0.5 \u00b7 a))\n      \u00b7 (1 + 0.003 \u00b7 cos(0.3 \u00b7 a))^2\n      \u00b7 (1 + 0.004 \u00b7 cos(0.3 \u00b7 a))^2\n      \u00b7 (1 + 0.0025 \u00b7 cos(0.7 \u00b7 a))\n      \u00b7 (1 + tanh(0.05 \u00b7 a))\n      \u00b7 (1 + sigmoid(0.01 \u00b7 a))\n      \u00b7 (1 + 0.002 \u00b7 cos(3 \u00b7 a))\n      \u00b7 [1 + 0.002 \u00b7 (sin(2.5 \u00b7 a) + 0.001 \u00b7 cos(3.5 \u00b7 a) + 0.0015 \u00b7 sin(3 \u00b7 a))]\n      \u00b7 (1 + sigmoid(0.03 \u00b7 a))\n      \u00b7 (1 + tanh(0.07 \u00b7 a))\n      \u00b7 (1 + cos(3.1 \u00b7 a))\n      \u00b7 (1 + sigmoid(0.04 \u00b7 a))\n      \u00b7 (1 + tanh(0.08 \u00b7 a))\n      \u00b7 (1 + cos(3.2 \u00b7 a))\n      \u00b7 (1 + sigmoid(0.05 \u00b7 a))\n      \u00b7 (1 + tanh(0.1 \u00b7 a))\n      \u00b7 (1 + cos(3.4 \u00b7 a))\n      \u00b7 (1 + sigmoid(0.06 \u00b7 a))\n      \u00b7 (1 + tanh(0.12 \u00b7 a))\n      \u00b7 (1 + cos(3.6 \u00b7 a))\n      \u00b7 (1 + sigmoid(0.08 \u00b7 a))\n      \u00b7 (1 + tanh(0.2 \u00b7 a))\n      \u00b7 (1 + cos(4.2 \u00b7 a))\n      \u00b7 (1 + sin(4.0 \u00b7 a))\n      \u00b7 (1 + sigmoid(0.12 \u00b7 a))\n      \u00b7 (1 + tanh(0.3 \u00b7 a))\n      \u00b7 (1 + sin(4.2 \u00b7 a))\nextra = extra \u00b7 (1 + sigmoid(0.14 \u00b7 a)) \u00b7 (1 + tanh(0.35 \u00b7 a)) \u00b7 (1 + sin(4.6 \u00b7 a))\nextra = extra \u00b7 exp(\u2212((a \u2212 1)^2) / (2 \u00b7 0.25^2))\nextra = extra \u00b7 sp8(0.865 / (1 + a))\nExponent = (0.9478 + 0.00018 \u00b7 ln(1+a)) \u00b7 [1 + 0.009 \u00b7 tanh(0.5 \u00b7 a) + 0.004 \u00b7 sin(3.5 \u00b7 a) + 0.003 \u00b7 cos(2.7 \u00b7 a) + 0.002 \u00b7 sin(4.0 \u00b7 a) + 0.005 \u00b7 cos(0.9 \u00b7 a)]\nf(x) = sign(z) \u00b7 [f_adapt(z) \u00b7 T \u00b7 extra]^(Exponent)\nU = beta + gamma \u00b7 f(x)\nP(accept=1) = 1 / (1 + exp(\u2212U))",
  "variable_descriptions": {
    "beta": {
      "description": "Base intercept parameter in the latent utility function U",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -10,
          "high": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Scaling parameter for the transformed signal f(x) in the latent utility U",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0,
          "high": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "phi": {
      "description": "Parameter modulating the adaptation function f_adapt, especially for negative z values",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0.5,
          "high": 1.5
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "F1": {
      "description": "Fixed contribution component 1 used in computing core sum a",
      "range": {
        "min": -1000000.0,
        "max": 1000000.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "F2": {
      "description": "Fixed contribution component 2 used in computing core sum a",
      "range": {
        "min": -1000000.0,
        "max": 1000000.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "F3": {
      "description": "Fixed contribution component 3 used in computing core sum a",
      "range": {
        "min": -1000000.0,
        "max": 1000000.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "F4": {
      "description": "Fixed contribution component 4 used in computing core sum a",
      "range": {
        "min": -1000000.0,
        "max": 1000000.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "F5": {
      "description": "Fixed contribution component 5 used in computing core sum a",
      "range": {
        "min": -1000000.0,
        "max": 1000000.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "F6": {
      "description": "Fixed contribution component 6 used in computing core sum a",
      "range": {
        "min": -1000000.0,
        "max": 1000000.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "F7": {
      "description": "Fixed contribution component 7 used in computing core sum a",
      "range": {
        "min": -1000000.0,
        "max": 1000000.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "F8": {
      "description": "Fixed contribution component 8 used in computing core sum a",
      "range": {
        "min": -1000000.0,
        "max": 1000000.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "F9": {
      "description": "Fixed contribution component 9 used in computing core sum a",
      "range": {
        "min": -1000000.0,
        "max": 1000000.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "F10": {
      "description": "Fixed contribution component 10 used in computing core sum a",
      "range": {
        "min": -1000000.0,
        "max": 1000000.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "F11": {
      "description": "Fixed contribution component 11 used in computing core sum a",
      "range": {
        "min": -1000000.0,
        "max": 1000000.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "\u03b4": {
      "description": "A small constant added to the sum of fixed components to form the core sum a",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "fixed"
    },
    "a": {
      "description": "Core sum computed from the fixed components and \u03b4",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "a_mod": {
      "description": "Modified core sum scaled with an oscillatory term",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "z": {
      "description": "Cascaded multiplicative transformation of a_mod with additional oscillatory factors",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "w": {
      "description": "Exponent modulation derived from phi",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "T": {
      "description": "Dynamic threshold computed as a finite sum over k from 0 to 150",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "extra": {
      "description": "Composite multiplicative term aggregating multiple oscillatory, sigmoidal, hyperbolic, Gaussian, and nested softplus factors",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "Exponent": {
      "description": "Overall exponent modulation term combining logarithmic and oscillatory influences",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "f(x)": {
      "description": "Transformed signal determining the contribution of the adaptive, thresholded, and composite factors",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "U": {
      "description": "Latent utility computed as a linear combination of beta and gamma-scaled f(x)",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "P(accept=1)": {
      "description": "Acceptance probability obtained by applying the logistic function on U",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "A detailed utility-based binary choice model for responder behavior that computes a core sum from fixed components, applies multiple multiplicative oscillatory and nonlinear modulations (including piecewise adaptive transformations, dynamic thresholding, and an extensive composite term with layered softplus nonlinearity), and finally integrates these via an exponent modulation to yield a transformed signal f(x). The latent utility U is then constructed as beta plus gamma times f(x) and converted into an acceptance probability through a logistic function.",
  "target_variable": "accept",
  "full_reasoning": "<MODEL>\na = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + \u03b4\na_mod = 1.08 \u00b7 a \u00b7 (1 + 0.012 \u00b7 sin(a + 0.045))\nf1 = 1 + 0.008 \u00b7 cos(a + 0.065)\nf2 = 1 + 0.005 \u00b7 sin(a + 0.115)\nf3 = 1 + 0.004 \u00b7 cos(a + 0.085)\nf4 = 1 + 0.006 \u00b7 (sin(a + 0.035) \u00b7 cos(a + 0.055))\nf5 = 1 + 0.003 \u00b7 (sin(a + 0.03) \u00b7 cos(a + 0.05))\nz = a_mod \u00b7 f1 \u00b7 f2 \u00b7 f3 \u00b7 f4 \u00b7 f5\nw = (phi \u2212 0.5) / phi\nsoftsign(x) = x / (1 + |x|)\nf_adapt(z) = { 1.002 \u00b7 z^w \u00b7 (ln(1+z))^(1\u2212w) \u00b7 softsign(z)  clipped to [\u221230, 30]  if z \u2265 0 ;\n               phi \u00b7 (softsign(z + 10^(\u20136)))^(50)  if z < 0 }\nT = \u03a3[k=0 to 150] (a/2)^k\nsp(x) = ln(1 + exp(x))\nsp8(x) = sp(sp(sp(sp(sp(sp(sp(sp(x)))))))\nextra = exp(\u2212a/0.1)\n      \u00b7 (z / (1 + |z|))\n      \u00b7 (1 + 0.005 \u00b7 sin(1/(1+a)))\n      \u00b7 (1 + 0.002 \u00b7 cos(0.5 \u00b7 a))\n      \u00b7 (1 + 0.003 \u00b7 cos(0.3 \u00b7 a))^2\n      \u00b7 (1 + 0.004 \u00b7 cos(0.3 \u00b7 a))^2\n      \u00b7 (1 + 0.0025 \u00b7 cos(0.7 \u00b7 a))\n      \u00b7 (1 + tanh(0.05 \u00b7 a))\n      \u00b7 (1 + sigmoid(0.01 \u00b7 a))\n      \u00b7 (1 + 0.002 \u00b7 cos(3 \u00b7 a))\n      \u00b7 [1 + 0.002 \u00b7 (sin(2.5 \u00b7 a) + 0.001 \u00b7 cos(3.5 \u00b7 a) + 0.0015 \u00b7 sin(3 \u00b7 a))]\n      \u00b7 (1 + sigmoid(0.03 \u00b7 a))\n      \u00b7 (1 + tanh(0.07 \u00b7 a))\n      \u00b7 (1 + cos(3.1 \u00b7 a))\n      \u00b7 (1 + sigmoid(0.04 \u00b7 a))\n      \u00b7 (1 + tanh(0.08 \u00b7 a))\n      \u00b7 (1 + cos(3.2 \u00b7 a))\n      \u00b7 (1 + sigmoid(0.05 \u00b7 a))\n      \u00b7 (1 + tanh(0.1 \u00b7 a))\n      \u00b7 (1 + cos(3.4 \u00b7 a))\n      \u00b7 (1 + sigmoid(0.06 \u00b7 a))\n      \u00b7 (1 + tanh(0.12 \u00b7 a))\n      \u00b7 (1 + cos(3.6 \u00b7 a))\n      \u00b7 (1 + sigmoid(0.08 \u00b7 a))\n      \u00b7 (1 + tanh(0.2 \u00b7 a))\n      \u00b7 (1 + cos(4.2 \u00b7 a))\n      \u00b7 (1 + sin(4.0 \u00b7 a))\n      \u00b7 (1 + sigmoid(0.12 \u00b7 a))\n      \u00b7 (1 + tanh(0.3 \u00b7 a))\n      \u00b7 (1 + sin(4.2 \u00b7 a))\nextra = extra \u00b7 (1 + sigmoid(0.14 \u00b7 a)) \u00b7 (1 + tanh(0.35 \u00b7 a)) \u00b7 (1 + sin(4.6 \u00b7 a))\nextra = extra \u00b7 exp(\u2212((a \u2212 1)^2) / (2 \u00b7 0.25^2))\nextra = extra \u00b7 sp8(0.865 / (1 + a))\nExponent = (0.9478 + 0.00018 \u00b7 ln(1+a)) \u00b7 [1 + 0.009 \u00b7 tanh(0.5 \u00b7 a) + 0.004 \u00b7 sin(3.5 \u00b7 a) + 0.003 \u00b7 cos(2.7 \u00b7 a) + 0.002 \u00b7 sin(4.0 \u00b7 a) + 0.005 \u00b7 cos(0.9 \u00b7 a)]\nf(x) = sign(z) \u00b7 [f_adapt(z) \u00b7 T \u00b7 extra]^(Exponent)\nU = beta + gamma \u00b7 f(x)\nP(accept=1) = 1 / (1 + exp(\u2212U))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"beta\": {\n      \"description\": \"Base intercept parameter in the latent utility function U\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Scaling parameter for the transformed signal f(x) in the latent utility U\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0,\n          \"high\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Parameter modulating the adaptation function f_adapt, especially for negative z values\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0.5,\n          \"high\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"F1\": {\n      \"description\": \"Fixed contribution component 1 used in computing core sum a\",\n      \"range\": {\n        \"min\": -1e6,\n        \"max\": 1e6,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F2\": {\n      \"description\": \"Fixed contribution component 2 used in computing core sum a\",\n      \"range\": {\n        \"min\": -1e6,\n        \"max\": 1e6,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F3\": {\n      \"description\": \"Fixed contribution component 3 used in computing core sum a\",\n      \"range\": {\n        \"min\": -1e6,\n        \"max\": 1e6,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F4\": {\n      \"description\": \"Fixed contribution component 4 used in computing core sum a\",\n      \"range\": {\n        \"min\": -1e6,\n        \"max\": 1e6,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F5\": {\n      \"description\": \"Fixed contribution component 5 used in computing core sum a\",\n      \"range\": {\n        \"min\": -1e6,\n        \"max\": 1e6,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F6\": {\n      \"description\": \"Fixed contribution component 6 used in computing core sum a\",\n      \"range\": {\n        \"min\": -1e6,\n        \"max\": 1e6,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F7\": {\n      \"description\": \"Fixed contribution component 7 used in computing core sum a\",\n      \"range\": {\n        \"min\": -1e6,\n        \"max\": 1e6,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F8\": {\n      \"description\": \"Fixed contribution component 8 used in computing core sum a\",\n      \"range\": {\n        \"min\": -1e6,\n        \"max\": 1e6,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F9\": {\n      \"description\": \"Fixed contribution component 9 used in computing core sum a\",\n      \"range\": {\n        \"min\": -1e6,\n        \"max\": 1e6,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F10\": {\n      \"description\": \"Fixed contribution component 10 used in computing core sum a\",\n      \"range\": {\n        \"min\": -1e6,\n        \"max\": 1e6,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F11\": {\n      \"description\": \"Fixed contribution component 11 used in computing core sum a\",\n      \"range\": {\n        \"min\": -1e6,\n        \"max\": 1e6,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"\u03b4\": {\n      \"description\": \"A small constant added to the sum of fixed components to form the core sum a\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"a\": {\n      \"description\": \"Core sum computed from the fixed components and \u03b4\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a_mod\": {\n      \"description\": \"Modified core sum scaled with an oscillatory term\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"z\": {\n      \"description\": \"Cascaded multiplicative transformation of a_mod with additional oscillatory factors\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"w\": {\n      \"description\": \"Exponent modulation derived from phi\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"T\": {\n      \"description\": \"Dynamic threshold computed as a finite sum over k from 0 to 150\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"extra\": {\n      \"description\": \"Composite multiplicative term aggregating multiple oscillatory, sigmoidal, hyperbolic, Gaussian, and nested softplus factors\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"Exponent\": {\n      \"description\": \"Overall exponent modulation term combining logarithmic and oscillatory influences\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f(x)\": {\n      \"description\": \"Transformed signal determining the contribution of the adaptive, thresholded, and composite factors\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed as a linear combination of beta and gamma-scaled f(x)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"P(accept=1)\": {\n      \"description\": \"Acceptance probability obtained by applying the logistic function on U\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA detailed utility-based binary choice model for responder behavior that computes a core sum from fixed components, applies multiple multiplicative oscillatory and nonlinear modulations (including piecewise adaptive transformations, dynamic thresholding, and an extensive composite term with layered softplus nonlinearity), and finally integrates these via an exponent modulation to yield a transformed signal f(x). The latent utility U is then constructed as beta plus gamma times f(x) and converted into an acceptance probability through a logistic function.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: a = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + \u03b4\na_mod = 1.08 \u00b7 a \u00b7 (1 + 0.012 \u00b7 sin(a + 0.045))\nf1 = 1 + 0.008 \u00b7 cos(a + 0.065)\nf2 = 1 + 0.005 \u00b7 sin(a + 0.115)\nf3 = 1 + 0.004 \u00b7 cos(a + 0.085)\nf4 = 1 + 0.006 \u00b7 (sin(a + 0.035) \u00b7 cos(a + 0.055))\nf5 = 1 + 0.003 \u00b7 (sin(a + 0.03) \u00b7 cos(a + 0.05))\nz = a_mod \u00b7 f1 \u00b7 f2 \u00b7 f3 \u00b7 f4 \u00b7 f5\nw = (phi \u2212 0.5) / phi\nsoftsign(x) = x / (1 + |x|)\nf_adapt(z) = { 1.002 \u00b7 z^w \u00b7 (ln(1+z))^(1\u2212w) \u00b7 softsign(z)  clipped to [\u221230, 30]  if z \u2265 0 ;\n               phi \u00b7 (softsign(z + 10^(\u20136)))^(50)  if z < 0 }\nT = \u03a3[k=0 to 150] (a/2)^k\nsp(x) = ln(1 + exp(x))\nsp8(x) = sp(sp(sp(sp(sp(sp(sp(sp(x)))))))\nextra = exp(\u2212a/0.1)\n      \u00b7 (z / (1 + |z|))\n      \u00b7 (1 + 0.005 \u00b7 sin(1/(1+a)))\n      \u00b7 (1 + 0.002 \u00b7 cos(0.5 \u00b7 a))\n      \u00b7 (1 + 0.003 \u00b7 cos(0.3 \u00b7 a))^2\n      \u00b7 (1 + 0.004 \u00b7 cos(0.3 \u00b7 a))^2\n      \u00b7 (1 + 0.0025 \u00b7 cos(0.7 \u00b7 a))\n      \u00b7 (1 + tanh(0.05 \u00b7 a))\n      \u00b7 (1 + sigmoid(0.01 \u00b7 a))\n      \u00b7 (1 + 0.002 \u00b7 cos(3 \u00b7 a))\n      \u00b7 [1 + 0.002 \u00b7 (sin(2.5 \u00b7 a) + 0.001 \u00b7 cos(3.5 \u00b7 a) + 0.0015 \u00b7 sin(3 \u00b7 a))]\n      \u00b7 (1 + sigmoid(0.03 \u00b7 a))\n      \u00b7 (1 + tanh(0.07 \u00b7 a))\n      \u00b7 (1 + cos(3.1 \u00b7 a))\n      \u00b7 (1 + sigmoid(0.04 \u00b7 a))\n      \u00b7 (1 + tanh(0.08 \u00b7 a))\n      \u00b7 (1 + cos(3.2 \u00b7 a))\n      \u00b7 (1 + sigmoid(0.05 \u00b7 a))\n      \u00b7 (1 + tanh(0.1 \u00b7 a))\n      \u00b7 (1 + cos(3.4 \u00b7 a))\n      \u00b7 (1 + sigmoid(0.06 \u00b7 a))\n      \u00b7 (1 + tanh(0.12 \u00b7 a))\n      \u00b7 (1 + cos(3.6 \u00b7 a))\n      \u00b7 (1 + sigmoid(0.08 \u00b7 a))\n      \u00b7 (1 + tanh(0.2 \u00b7 a))\n      \u00b7 (1 + cos(4.2 \u00b7 a))\n      \u00b7 (1 + sin(4.0 \u00b7 a))\n      \u00b7 (1 + sigmoid(0.12 \u00b7 a))\n      \u00b7 (1 + tanh(0.3 \u00b7 a))\n      \u00b7 (1 + sin(4.2 \u00b7 a))\nextra = extra \u00b7 (1 + sigmoid(0.14 \u00b7 a)) \u00b7 (1 + tanh(0.35 \u00b7 a)) \u00b7 (1 + sin(4.6 \u00b7 a))\nextra = extra \u00b7 exp(\u2212((a \u2212 1)^2) / (2 \u00b7 0.25^2))\nextra = extra \u00b7 sp8(0.865 / (1 + a))\nExponent = (0.9478 + 0.00018 \u00b7 ln(1+a)) \u00b7 [1 + 0.009 \u00b7 tanh(0.5 \u00b7 a) + 0.004 \u00b7 sin(3.5 \u00b7 a) + 0.003 \u00b7 cos(2.7 \u00b7 a) + 0.002 \u00b7 sin(4.0 \u00b7 a) + 0.005 \u00b7 cos(0.9 \u00b7 a)]\nf(x) = sign(z) \u00b7 [f_adapt(z) \u00b7 T \u00b7 extra]^(Exponent)\nU = beta + gamma \u00b7 f(x)\nP(accept=1) = 1 / (1 + exp(\u2212U))\nSummary: A detailed utility-based binary choice model for responder behavior that computes a core sum from fixed components, applies multiple multiplicative oscillatory and nonlinear modulations (including piecewise adaptive transformations, dynamic thresholding, and an extensive composite term with layered softplus nonlinearity), and finally integrates these via an exponent modulation to yield a transformed signal f(x). The latent utility U is then constructed as beta plus gamma times f(x) and converted into an acceptance probability through a logistic function.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, beta=0, gamma=1, phi=0.75):\n    model_predictions = []\n    delta = 0.5  # Fixed delta value\n\n    def softsign(x):\n        return x / (1 + abs(x))\n\n    def f_adapt(z, phi):\n        w = (phi - 0.5) / phi\n        if z >= 0:\n            val = 1.002 * (z**w) * (math.log(1 + z)**(1 - w)) * softsign(z)\n            return max(-30, min(30, val))  # Clip to [-30, 30]\n        else:\n            return phi * (softsign(z + (10**(-6))))**50\n    \n    def sp(x):\n        return math.log(1 + math.exp(x))\n    \n    def sp8(x):\n        val = x\n        for _ in range(8):\n            val = sp(val)\n        return val\n    \n    def sigmoid(x):\n        return 1 / (1 + math.exp(-x))\n    \n    def tanh(x):\n        return math.tanh(x)\n\n    for trial in trial_data:\n        F1 = trial.get(\"F1\", 0)\n        F2 = trial.get(\"F2\", 0)\n        F3 = trial.get(\"F3\", 0)\n        F4 = trial.get(\"F4\", 0)\n        F5 = trial.get(\"F5\", 0)\n        F6 = trial.get(\"F6\", 0)\n        F7 = trial.get(\"F7\", 0)\n        F8 = trial.get(\"F8\", 0)\n        F9 = trial.get(\"F9\", 0)\n        F10 = trial.get(\"F10\", 0)\n        F11 = trial.get(\"F11\", 0)\n\n        a = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + delta\n        a_mod = 1.08 * a * (1 + 0.012 * math.sin(a + 0.045))\n        f1 = 1 + 0.008 * math.cos(a + 0.065)\n        f2 = 1 + 0.005 * math.sin(a + 0.115)\n        f3 = 1 + 0.004 * math.cos(a + 0.085)\n        f4 = 1 + 0.006 * (math.sin(a + 0.035) * math.cos(a + 0.055))\n        f5 = 1 + 0.003 * (math.sin(a + 0.03) * math.cos(a + 0.05))\n        z = a_mod * f1 * f2 * f3 * f4 * f5\n        w = (phi - 0.5) / phi\n\n        T = sum((a/2)**k for k in range(151))\n\n        extra = math.exp(-a/0.1) \\\n              * (z / (1 + abs(z))) \\\n              * (1 + 0.005 * math.sin(1/(1+a))) \\\n              * (1 + 0.002 * math.cos(0.5 * a)) \\\n              * (1 + 0.003 * math.cos(0.3 * a))**2 \\\n              * (1 + 0.004 * math.cos(0.3 * a))**2 \\\n              * (1 + 0.0025 * math.cos(0.7 * a)) \\\n              * (1 + tanh(0.05 * a)) \\\n              * (1 + sigmoid(0.01 * a)) \\\n              * (1 + 0.002 * math.cos(3 * a)) \\\n              * (1 + 0.002 * (math.sin(2.5 * a) + 0.001 * math.cos(3.5 * a) + 0.0015 * math.sin(3 * a))) \\\n              * (1 + sigmoid(0.03 * a)) \\\n              * (1 + tanh(0.07 * a)) \\\n              * (1 + math.cos(3.1 * a)) \\\n              * (1 + sigmoid(0.04 * a)) \\\n              * (1 + tanh(0.08 * a)) \\\n              * (1 + math.cos(3.2 * a)) \\\n              * (1 + sigmoid(0.05 * a)) \\\n              * (1 + tanh(0.1 * a)) \\\n              * (1 + math.cos(3.4 * a)) \\\n              * (1 + sigmoid(0.06 * a)) \\\n              * (1 + tanh(0.12 * a)) \\\n              * (1 + math.cos(3.6 * a)) \\\n              * (1 + sigmoid(0.08 * a)) \\\n              * (1 + tanh(0.2 * a)) \\\n              * (1 + math.cos(4.2 * a)) \\\n              * (1 + math.sin(4.0 * a)) \\\n              * (1 + sigmoid(0.12 * a)) \\\n              * (1 + tanh(0.3 * a)) \\\n              * (1 + math.sin(4.2 * a))\n        extra = extra * (1 + sigmoid(0.14 * a)) * (1 + tanh(0.35 * a)) * (1 + math.sin(4.6 * a))\n        extra = extra * math.exp(-((a - 1)**2) / (2 * 0.25**2))\n        extra = extra * sp8(0.865 / (1 + a))\n\n        Exponent = (0.9478 + 0.00018 * math.log(1+a)) * (1 + 0.009 * tanh(0.5 * a) + 0.004 * math.sin(3.5 * a) + 0.003 * math.cos(2.7 * a) + 0.002 * math.sin(4.0 * a) + 0.005 * math.cos(0.9 * a))\n\n        f_x = (1 if z >= 0 else -1) * (f_adapt(z, phi) * T * extra)**Exponent\n        \n        U = beta + gamma * f_x\n        \n        P_accept = 1 / (1 + math.exp(-U))\n        \n        model_predictions.append(P_accept)\n\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.5732600732600732,
  "fitting_results": [
    {
      "beta": -10.0,
      "gamma": 1.0819355302708071,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.953993370532434,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -6.227671051258644,
      "gamma": 4.2845117393464385,
      "phi": 0.9657535250279415,
      "success": true,
      "log_likelihood": -24.953319352340458,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.083730360360757,
      "gamma": 0.25689470867016384,
      "phi": 1.1313816877148875,
      "success": true,
      "log_likelihood": -24.89771432413201,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 2.019486256359826,
      "phi": 0.7830671233616394,
      "success": true,
      "log_likelihood": -24.95344037148491,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 1.545048688662192,
      "phi": 0.6363682262591734,
      "success": true,
      "log_likelihood": -24.95339208631638,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.22703741255335108,
      "gamma": 2.939221996048298,
      "phi": 0.605930839315828,
      "success": true,
      "log_likelihood": -23.545973163849787,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 7.992980770279819,
      "phi": 1.481523078702919,
      "success": true,
      "log_likelihood": -11.277790616277661,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.6870935603811412,
      "gamma": 5.915176351361789,
      "phi": 1.488758357832217,
      "success": true,
      "log_likelihood": -22.914510051430383,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 9.35987124987618,
      "phi": 1.4154297782321923,
      "success": true,
      "log_likelihood": -11.277780109445949,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -9.336471294873343,
      "gamma": 1.353603487112054,
      "phi": 1.2831948549507437,
      "success": true,
      "log_likelihood": -24.953661434239702,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 4.2354498710963,
      "phi": 0.6172087095040245,
      "success": true,
      "log_likelihood": -24.95339710403756,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 3.606253868753525,
      "phi": 0.7524865716223046,
      "success": true,
      "log_likelihood": -24.953981854222935,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 1.8275613708256488,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.95343942527553,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 8.989787864177009,
      "phi": 1.292455334043662,
      "success": true,
      "log_likelihood": -11.277783496790653,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 5.60585991135571,
      "phi": 1.026265449351926,
      "success": true,
      "log_likelihood": -11.27781170364158,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 9.509268790961983,
      "phi": 1.0839574698652061,
      "success": true,
      "log_likelihood": -11.2777806734808,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 1.8912688989067226,
      "phi": 0.8155009260247479,
      "success": true,
      "log_likelihood": -11.277843712711798,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 8.952303959969662,
      "phi": 1.302307748831903,
      "success": true,
      "log_likelihood": -16.277596282355272,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 6.186654050009644,
      "phi": 1.2488732832553728,
      "success": true,
      "log_likelihood": -15.277646854230742,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 6.408046612063109,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -11.277803444938735,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.2963322393243815,
      "gamma": 2.3094113739014333,
      "phi": 1.168743594923932,
      "success": true,
      "log_likelihood": -24.730616750304115,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 4.565392694355182,
      "phi": 0.6304037454598974,
      "success": true,
      "log_likelihood": -16.27761515734085,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -9.999999999999998,
      "gamma": 2.5499308364381084,
      "phi": 0.7713707174567291,
      "success": true,
      "log_likelihood": -24.95353747357401,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.1054072556847934,
      "gamma": 1.2500954656660843,
      "phi": 1.0919088989225965,
      "success": true,
      "log_likelihood": -24.897714354588345,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -6.512933145968159,
      "gamma": 5.751543067136357,
      "phi": 1.2590845005090565,
      "success": true,
      "log_likelihood": -24.953311116087136,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.8164694911904313,
      "gamma": 6.530537506982291,
      "phi": 1.098234629023429,
      "success": true,
      "log_likelihood": -24.45095756850759,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.263230415038101,
      "gamma": 0.7494192558445715,
      "phi": 1.1057343224088512,
      "success": true,
      "log_likelihood": -24.730616750315544,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 9.436361101871439,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.95373168088848,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 7.332860038428272,
      "phi": 0.8649187165761039,
      "success": true,
      "log_likelihood": -15.27764272068448,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 7.365396136916206,
      "phi": 1.0048335696309787,
      "success": true,
      "log_likelihood": -19.277486234800286,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 8.422272268666081,
      "phi": 0.7608580982162226,
      "success": true,
      "log_likelihood": -11.277791736488062,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.2056912150443567,
      "phi": 0.9978099575214004,
      "success": true,
      "log_likelihood": -24.953982394519983,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.0,
      "phi": 1.438400156505947,
      "success": true,
      "log_likelihood": -24.953434695838464,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 6.11175907191908,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.953502052960516,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 7.740863417601952,
      "phi": 1.373538064042364,
      "success": true,
      "log_likelihood": -11.277792995507534,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.09137026013728408,
      "gamma": 9.579915446885536,
      "phi": 0.7552521785963682,
      "success": true,
      "log_likelihood": -23.545973164188048,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.5189892048559832,
      "gamma": 0.4495945153404347,
      "phi": 0.8518643476912157,
      "success": true,
      "log_likelihood": -22.157940357647323,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -9.631175297145841,
      "gamma": 6.507118337373759,
      "phi": 1.2107309995195525,
      "success": true,
      "log_likelihood": -24.95329851852367,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3333333333333333,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.7091049553798408,
      "gamma": 5.255209331537535,
      "phi": 0.7591584960386816,
      "success": true,
      "log_likelihood": -22.914510051413274,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 5.722542094778128,
      "phi": 1.4442356571600568,
      "success": true,
      "log_likelihood": -14.27768889938884,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.31315879958750514,
      "gamma": 5.848727480219002,
      "phi": 0.9064428406418219,
      "success": true,
      "log_likelihood": -24.05694518872342,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 3.0967111189399548,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.95377951186424,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 9.999999999999998,
      "gamma": 6.464460902150747,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -12.277763499807055,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.2593662140771629,
      "gamma": 0.5614330060398371,
      "phi": 1.212394966718875,
      "success": true,
      "log_likelihood": -24.730616750303657,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.2924903381911375,
      "gamma": 4.797538895531805,
      "phi": 0.9881498871897112,
      "success": true,
      "log_likelihood": -24.056945188724942,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.93741382269076,
      "gamma": 6.211395392064932,
      "phi": 0.8895129127921815,
      "success": true,
      "log_likelihood": -21.270320882731678,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.166311719626662,
      "gamma": 4.120165660518428,
      "phi": 1.35118949114182,
      "success": true,
      "log_likelihood": -24.897714328171347,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 2.952036458362387,
      "phi": 0.5845391046812033,
      "success": true,
      "log_likelihood": -24.953490728255623,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 1.5865156820297948,
      "phi": 1.2849752355021369,
      "success": true,
      "log_likelihood": -24.953439388466027,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.211774006321117,
      "gamma": 6.637616633633738,
      "phi": 0.7868524998857604,
      "success": true,
      "log_likelihood": -24.897714350856916,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.4710253880166237,
      "gamma": 2.4877083721759563,
      "phi": 1.0260260348758032,
      "success": true,
      "log_likelihood": -22.157938154733753,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.0,
      "phi": 1.0432309878485324,
      "success": true,
      "log_likelihood": -24.9538886745254,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.2182539129326977,
      "gamma": 6.911972362069774,
      "phi": 0.791702596051224,
      "success": true,
      "log_likelihood": -24.897714324140725,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.8684483457644039,
      "gamma": 8.821260773770035,
      "phi": 1.3682036896717698,
      "success": true,
      "log_likelihood": -24.45095756989628,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 7.458899390500669,
      "phi": 1.3453510070721566,
      "success": true,
      "log_likelihood": -24.95351157337207,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 3.9864791252184744,
      "phi": 0.8944969270669163,
      "success": true,
      "log_likelihood": -24.953594168261198,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 3.340779971929914,
      "phi": 1.2497394219408522,
      "success": true,
      "log_likelihood": -24.953688469079925,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 8.537034821826452,
      "phi": 1.4392524102799813,
      "success": true,
      "log_likelihood": -15.277635358982717,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.45289780958489084,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.953939471260632,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 9.999999999999998,
      "gamma": 7.008819388999849,
      "phi": 1.2618725063023077,
      "success": true,
      "log_likelihood": -18.277525605513734,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.3948736567796172,
      "gamma": 9.478625819595964,
      "phi": 1.2738782949430458,
      "success": true,
      "log_likelihood": -24.056945188723873,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -6.439552034908446,
      "gamma": 7.051070443871907,
      "phi": 0.6087308355011194,
      "success": true,
      "log_likelihood": -24.953313532990368,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 2.3290156083020506,
      "phi": 0.7878090224558344,
      "success": true,
      "log_likelihood": -24.95401232600568,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 2.8495936483553956,
      "phi": 0.8488848968921509,
      "success": true,
      "log_likelihood": -24.95339474319682,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 6.672438498636368,
      "phi": 0.94130222498568,
      "success": true,
      "log_likelihood": -24.953819707006136,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.3721466141946634,
      "gamma": 6.046822831096456,
      "phi": 0.8977711482287404,
      "success": true,
      "log_likelihood": -24.730616759619238,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 1.4540837579308048,
      "phi": 1.2202286206434152,
      "success": true,
      "log_likelihood": -14.277714864529468,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 9.819770978192462,
      "phi": 1.4409351638578016,
      "success": true,
      "log_likelihood": -16.277592764198623,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.3592369500271073,
      "gamma": 5.2997996729108845,
      "phi": 1.1108240965989957,
      "success": true,
      "log_likelihood": -24.73061675318723,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 8.04577363767419,
      "gamma": 2.8820706115355033,
      "phi": 0.5863227903626378,
      "success": true,
      "log_likelihood": -14.279445903666163,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 1.6919915732671171,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.953954477665604,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 4.189735720452144,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.95393671079016,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.228810035566129,
      "gamma": 7.310349150635397,
      "phi": 0.8976213930151523,
      "success": true,
      "log_likelihood": -24.897714324420942,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 6.967362082822547,
      "phi": 1.2485383448383396,
      "success": true,
      "log_likelihood": -19.277486574689824,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -7.160927006531837,
      "gamma": 3.405608993973172,
      "phi": 1.2260942516715454,
      "success": true,
      "log_likelihood": -24.95330162251515,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.510687157628807,
      "gamma": 0.6007043876052682,
      "phi": 0.8057713088307162,
      "success": true,
      "log_likelihood": -22.157938156050996,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 9.999999999999998,
      "gamma": 9.599032727706183,
      "phi": 1.489208184958832,
      "success": true,
      "log_likelihood": -13.277704187333802,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.95402486813148,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.342189537493346,
      "gamma": 7.9098362415796375,
      "phi": 0.5293674081594935,
      "success": true,
      "log_likelihood": -24.056945188723876,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 2.0541542383424436e-16,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.953979470262784,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.2259438937834752,
      "gamma": 7.108673651204236,
      "phi": 0.8447339755766038,
      "success": true,
      "log_likelihood": -24.897714593726334,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 6.616466779875581,
      "phi": 1.22557232410179,
      "success": true,
      "log_likelihood": -14.277684287150231,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.0,
      "phi": 1.036076807251315,
      "success": true,
      "log_likelihood": -24.953934072394095,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -9.999999999999998,
      "gamma": 5.140421216495648,
      "phi": 0.9686749129558794,
      "success": true,
      "log_likelihood": -24.9532985044393,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.2514878051680387,
      "gamma": 3.0162260654976345,
      "phi": 0.6236600681777622,
      "success": true,
      "log_likelihood": -24.05694518872358,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 2.972209881821253,
      "phi": 1.0378824573440857,
      "success": true,
      "log_likelihood": -24.95397484775795,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.3442746961358691,
      "gamma": 8.607336029430908,
      "phi": 0.969106905300453,
      "success": true,
      "log_likelihood": -22.157938154734115,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 2.3744149068239144,
      "phi": 0.8156497956904591,
      "success": true,
      "log_likelihood": -24.953774931179012,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 9.8133859556554,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -13.277702846349639,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 1.8225450647168078,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.95334547261447,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.4027116534106256,
      "gamma": 5.68458445181385,
      "phi": 1.1634750206762907,
      "success": true,
      "log_likelihood": -22.157938154733248,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "beta": {
        "r": 0.684593121569524,
        "p": 4.054482641635206e-15
      },
      "gamma": {
        "r": -0.06812347680507887,
        "p": 0.5006591855649211
      },
      "phi": {
        "r": -0.021892743590423112,
        "p": 0.8288311716509192
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 53.92272464988445,
  "bic_results": {
    "average_bic": 53.92272464988445,
    "individual_bics": [
      60.6585435564332,
      60.65719552004924,
      60.54598546363235,
      60.657437558338145,
      60.657340988001096,
      57.8425031430679,
      33.30613804792365,
      56.579576918229094,
      33.306117034260225,
      60.65787968384774,
      60.657351023443454,
      60.658520523814204,
      60.657435665919394,
      33.306123808949636,
      33.30618022265149,
      33.30611816232993,
      33.306244240791926,
      43.30574938007888,
      41.30585052382982,
      33.3061637052458,
      60.21179031597656,
      43.305787130050035,
      60.657631762516345,
      60.54598552454502,
      60.6571790475426,
      59.65247195238351,
      60.21179031599942,
      60.65802017714529,
      41.30584225673729,
      49.3055292849689,
      33.30614028834445,
      60.65852160440829,
      60.65742620704526,
      60.65756092128936,
      33.3061428063834,
      57.84250314374442,
      55.06643753066298,
      60.657153852415675,
      56.579576918194874,
      39.30593461414601,
      58.86444719281518,
      60.65811583909681,
      35.30608381498244,
      60.21179031597565,
      58.86444719281822,
      53.29119858083169,
      60.54598547171102,
      60.657538271879574,
      60.65743559230039,
      60.54598551708216,
      55.06643312483584,
      60.65833416441913,
      60.545985463649785,
      59.65247195516089,
      60.657579962112465,
      60.65774515189072,
      60.657933753528184,
      41.30582753333377,
      60.65843575788959,
      47.3056080263958,
      58.86444719281607,
      60.65718388134907,
      60.65858146737969,
      60.657346301761976,
      60.65819622938061,
      60.2117903346068,
      39.30598654442727,
      43.30574234376557,
      60.2117903217428,
      39.30944862270066,
      60.658465770699536,
      60.65843023694865,
      60.54598546421022,
      49.305529964747976,
      60.657160060398624,
      55.06643312747032,
      37.305965190035934,
      60.658606551631294,
      58.86444719281609,
      60.6585157558939,
      60.545986002820996,
      39.30592538966879,
      60.65842496015652,
      60.65715382424693,
      58.86444719281549,
      60.65850651088424,
      55.066433124836564,
      60.65810667772635,
      37.30596250806761,
      60.65724776059727,
      55.06643312483483
    ],
    "group_enabled": false,
    "group_bics": null,
    "num_parameters": 3,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- beta: r = 0.685\n- gamma: r = -0.068\n- phi: r = -0.022",
  "previous_models": [
    "Specification: a = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + \u03b4\na_mod = 1.08 \u00b7 a \u00b7 (1 + 0.012 \u00b7 sin(a + 0.045))\nf1 = 1 + 0.008 \u00b7 cos(a + 0.065)\nf2 = 1 + 0.005 \u00b7 sin(a + 0.115)\nf3 = 1 + 0.004 \u00b7 cos(a + 0.085)\nf4 = 1 + 0.006 \u00b7 (sin(a + 0.035) \u00b7 cos(a + 0.055))\nf5 = 1 + 0.003 \u00b7 (sin(a + 0.03) \u00b7 cos(a + 0.05))\nz = a_mod \u00b7 f1 \u00b7 f2 \u00b7 f3 \u00b7 f4 \u00b7 f5\nw = (phi \u2212 0.5) / phi\nsoftsign(x) = x / (1 + |x|)\nf_adapt(z) = { 1.002 \u00b7 z^w \u00b7 (ln(1+z))^(1\u2212w) \u00b7 softsign(z)  clipped to [\u221230, 30]  if z \u2265 0 ;\n               phi \u00b7 (softsign(z + 10^(\u20136)))^(50)  if z < 0 }\nT = \u03a3[k=0 to 150] (a/2)^k\nsp(x) = ln(1 + exp(x))\nsp8(x) = sp(sp(sp(sp(sp(sp(sp(sp(x)))))))\nextra = exp(\u2212a/0.1)\n      \u00b7 (z / (1 + |z|))\n      \u00b7 (1 + 0.005 \u00b7 sin(1/(1+a)))\n      \u00b7 (1 + 0.002 \u00b7 cos(0.5 \u00b7 a))\n      \u00b7 (1 + 0.003 \u00b7 cos(0.3 \u00b7 a))^2\n      \u00b7 (1 + 0.004 \u00b7 cos(0.3 \u00b7 a))^2\n      \u00b7 (1 + 0.0025 \u00b7 cos(0.7 \u00b7 a))\n      \u00b7 (1 + tanh(0.05 \u00b7 a))\n      \u00b7 (1 + sigmoid(0.01 \u00b7 a))\n      \u00b7 (1 + 0.002 \u00b7 cos(3 \u00b7 a))\n      \u00b7 [1 + 0.002 \u00b7 (sin(2.5 \u00b7 a) + 0.001 \u00b7 cos(3.5 \u00b7 a) + 0.0015 \u00b7 sin(3 \u00b7 a))]\n      \u00b7 (1 + sigmoid(0.03 \u00b7 a))\n      \u00b7 (1 + tanh(0.07 \u00b7 a))\n      \u00b7 (1 + cos(3.1 \u00b7 a))\n      \u00b7 (1 + sigmoid(0.04 \u00b7 a))\n      \u00b7 (1 + tanh(0.08 \u00b7 a))\n      \u00b7 (1 + cos(3.2 \u00b7 a))\n      \u00b7 (1 + sigmoid(0.05 \u00b7 a))\n      \u00b7 (1 + tanh(0.1 \u00b7 a))\n      \u00b7 (1 + cos(3.4 \u00b7 a))\n      \u00b7 (1 + sigmoid(0.06 \u00b7 a))\n      \u00b7 (1 + tanh(0.12 \u00b7 a))\n      \u00b7 (1 + cos(3.6 \u00b7 a))\n      \u00b7 (1 + sigmoid(0.08 \u00b7 a))\n      \u00b7 (1 + tanh(0.2 \u00b7 a))\n      \u00b7 (1 + cos(4.2 \u00b7 a))\n      \u00b7 (1 + sin(4.0 \u00b7 a))\n      \u00b7 (1 + sigmoid(0.12 \u00b7 a))\n      \u00b7 (1 + tanh(0.3 \u00b7 a))\n      \u00b7 (1 + sin(4.2 \u00b7 a))\nextra = extra \u00b7 (1 + sigmoid(0.14 \u00b7 a)) \u00b7 (1 + tanh(0.35 \u00b7 a)) \u00b7 (1 + sin(4.6 \u00b7 a))\nextra = extra \u00b7 exp(\u2212((a \u2212 1)^2) / (2 \u00b7 0.25^2))\nextra = extra \u00b7 sp8(0.865 / (1 + a))\nExponent = (0.9478 + 0.00018 \u00b7 ln(1+a)) \u00b7 [1 + 0.009 \u00b7 tanh(0.5 \u00b7 a) + 0.004 \u00b7 sin(3.5 \u00b7 a) + 0.003 \u00b7 cos(2.7 \u00b7 a) + 0.002 \u00b7 sin(4.0 \u00b7 a) + 0.005 \u00b7 cos(0.9 \u00b7 a)]\nf(x) = sign(z) \u00b7 [f_adapt(z) \u00b7 T \u00b7 extra]^(Exponent)\nU = beta + gamma \u00b7 f(x)\nP(accept=1) = 1 / (1 + exp(\u2212U))\nSummary: A detailed utility-based binary choice model for responder behavior that computes a core sum from fixed components, applies multiple multiplicative oscillatory and nonlinear modulations (including piecewise adaptive transformations, dynamic thresholding, and an extensive composite term with layered softplus nonlinearity), and finally integrates these via an exponent modulation to yield a transformed signal f(x). The latent utility U is then constructed as beta plus gamma times f(x) and converted into an acceptance probability through a logistic function.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 53.92272464988445\nOverall Accuracy: 0.5733\n\nParameter Recovery:\n- beta: r = 0.685\n- gamma: r = -0.068\n- phi: r = -0.022"
  ]
}