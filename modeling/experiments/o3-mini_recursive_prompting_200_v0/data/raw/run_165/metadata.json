{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "<think>\nFor run 165, update the instructions to push for even more nuanced local nonlinearities. We now want to further increase the sensitivity of the negative branch by raising its exponent from 50 to 52 (or 52\u2013? but I'll specify \u201c52\u201d) and include an optional local quadratic correction when |z| is very small (e.g., below a threshold \u03b5). Also, extend the dynamic threshold T by summing from k = 0 to 200 (or suggest a flexible rational function alternative). Within the extra composite term, in addition to the previously added multiplicative factors [1 + sigmoid(0.14\u00d7a)] and [1 + tanh(0.35\u00d7a)] and the sin(4.6\u00d7a) term, also multiply by an extra factor [1 + 0.005\u00d7cos(0.9\u00d7a)] to capture additional cyclic variations. Finally, encourage the experimenter to explore alternative piecewise nonlinearities for f_adapt (such as ReLU approximations, hinge losses, or rational function approximations) and to consider alternative formulations for T that can better handle a wide range of a. These modifications should help further improve overall accuracy, reduce the BIC, and achieve better parameter recovery.\n</think>\n\nNew Instructions for Run 165:\n1. Compute the core sum a as the sum of fixed components F\u2081,\u2026,F\u2081\u2081 plus a small constant \u03b4.\n2. Define a_mod = 1.08 \u00d7 a \u00d7 [1 + 0.012 \u00d7 sin(a + 0.045)].\n3. Multiply a_mod sequentially by:\n\u2003\u2003\u2022 [1 + 0.008 \u00d7 cos(a + 0.065)]\n\u2003\u2003\u2022 [1 + 0.005 \u00d7 sin(a + 0.115)]\n\u2003\u2003\u2022 [1 + 0.004 \u00d7 cos(a + 0.085)]\n\u2003\u2003\u2022 [1 + 0.006 \u00d7 (sin(a + 0.035) \u00d7 cos(a + 0.055))]\n\u2003\u2003\u2022 [1 + 0.003 \u00d7 (sin(a + 0.03) \u00d7 cos(a + 0.05))]\n\u2003Define z as the final product.\n4. Set w = (phi \u2212 0.5) / phi.\n\u2003\u2003\u2022 For z \u2265 0, define f_adapt(z) = clip[1.002 \u00d7 (z^w \u00d7 (ln(1+z))^(1\u2212w) \u00d7 softsign(z))] with softsign(x) = x/(1+|x|) and clipped to [\u201330, 30].\n\u2003\u2003\u2022 For z < 0, define f_adapt(z) = phi \u00d7 [softsign(z + \u0394_shift)]^(52), where \u0394_shift = 1\u00d710^(\u20136). Additionally, if |z| < \u03b5 (e.g., \u03b5 = 0.01), add a small quadratic correction (e.g., add 0.001\u00d7z\u00b2).\n5. Define the dynamic threshold T as the sum from k = 0 to 200 of (a^k \u00d7 (\u00bd)^k); alternatively, consider a flexible rational function for T.\n6. Define the extra composite term extra as the product of:\n\u2003\u2003\u2022 exp(\u2013a/0.1)\n\u2003\u2003\u2022 [z/(1+|z|)],\n\u2003\u2003\u2022 [1 + 0.005 \u00d7 sin(1/(1+a))],\n\u2003\u2003\u2022 [1 + 0.002 \u00d7 cos(0.5\u00d7a)],\n\u2003\u2003\u2022 ([1 + 0.003 \u00d7 cos(0.3\u00d7a)]\u00b2),\n\u2003\u2003\u2022 ([1 + 0.004 \u00d7 cos(0.3\u00d7a)]\u00b2),\n\u2003\u2003\u2022 [1 + 0.0025 \u00d7 cos(0.7\u00d7a)],\n\u2003\u2003\u2022 [1 + tanh(0.05\u00d7a)],\n\u2003\u2003\u2022 [1 + sigmoid(0.01\u00d7a)],\n\u2003\u2003\u2022 [1 + 0.002 \u00d7 cos(3\u00d7a)],\n\u2003\u2003\u2022 [1 + 0.002 \u00d7 (sin(2.5\u00d7a)+0.001\u00d7cos(3.5\u00d7a)+0.0015\u00d7sin(3\u00d7a))],\n\u2003\u2003\u2022 [1 + sigmoid(0.03\u00d7a)],\n\u2003\u2003\u2022 [1 + tanh(0.07\u00d7a)],\n\u2003\u2003\u2022 [1 + cos(3.1\u00d7a)],\n\u2003\u2003\u2022 [1 + sigmoid(0.04\u00d7a)],\n\u2003\u2003\u2022 [1 + tanh(0.08\u00d7a)],\n\u2003\u2003\u2022 [1 + cos(3.2\u00d7a)],\n\u2003\u2003\u2022 [1 + sigmoid(0.05\u00d7a)],\n\u2003\u2003\u2022 [1 + tanh(0.1\u00d7a)],\n\u2003\u2003\u2022 [1 + cos(3.4\u00d7a)],\n\u2003\u2003\u2022 [1 + sigmoid(0.06\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new),\n\u2003\u2003\u2022 [1 + tanh(0.12\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new),\n\u2003\u2003\u2022 [1 + cos(3.6\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new),\n\u2003\u2003\u2022 [1 + sigmoid(0.08\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003(new),\n\u2003\u2003\u2022 [1 + tanh(0.2\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new),\n\u2003\u2003\u2022 [1 + cos(4.2\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new),\n\u2003\u2003\u2022 [1 + sin(4.0\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new),\n\u2003\u2003\u2022 [1 + sigmoid(0.12\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003(new),\n\u2003\u2003\u2022 [1 + tanh(0.3\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new),\n\u2003\u2003\u2022 [1 + sin(4.2\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new).\nThen, multiply extra by additional factors: [1 + sigmoid(0.14\u00d7a)], [1 + tanh(0.35\u00d7a)], [1 + sin(4.6\u00d7a)], and [1 + 0.005\u00d7cos(0.9\u00d7a)]. Also, multiply extra by a Gaussian radial basis function exp(\u2013((a\u20131)\u00b2)/(2\u00d7(0.25)\u00b2)). Finally, apply an eight-layer nested softplus chain to 0.865/(1+a).\n7. Define the overall exponent modulation as:\n\u2003\u2003Exponent = [0.9478 + 0.00018 \u00d7 ln(1+a)] \u00d7 [1 + 0.009 \u00d7 tanh(0.5\u00d7a) + 0.004 \u00d7 sin(3.5\u00d7a) + 0.003 \u00d7 cos(2.7\u00d7a) + 0.002 \u00d7 sin(4.0\u00d7a) + 0.005 \u00d7 cos(0.9\u00d7a)] \u00d7 [1 + 0.005\u00d7cos(0.9\u00d7a)].\n8. Compute the final transformed signal: f(x) = sign(z) \u00d7 { [ f_adapt(z) \u00d7 T \u00d7 extra ]^(Exponent) }.\n9. Compute latent utility U = beta + gamma \u00d7 f(x), and convert it to the acceptance probability by P(accept=1) = 1/(1 + exp(\u2013U)).\n10. Use exactly three learnable parameters, with fixed bounds: beta \u2208 [\u201310, 10], gamma \u2208 [0, 10], and phi \u2208 [0.5, 1.5].\\n\\nEncourage exploration by experimenting with alternative piecewise nonlinear functions for f_adapt (such as ReLU approximations, hinge loss, or rational function approximations) and flexible formulations for T. These modifications are intended to further boost accuracy, reduce the BIC, and improve parameter recovery.\\n\\n<target_variable>accept</target_variable>\",\n  <MODEL>\na = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + \u03b4\na_mod = 1.08 * a * (1 + 0.012 * sin(a + 0.045))\nz = a_mod * (1 + 0.008 * cos(a + 0.065)) * (1 + 0.005 * sin(a + 0.115)) * (1 + 0.004 * cos(a + 0.085)) * (1 + 0.006 * (sin(a + 0.035) * cos(a + 0.055))) * (1 + 0.003 * (sin(a + 0.03) * cos(a + 0.05)))\nw = (phi \u2212 0.5) / phi\nsoftsign(x) = x/(1 + |x|)\nf_adapt(z) = { if z \u2265 0 then clip[1.002 \u00b7 z^w \u00b7 (ln(1+z))^(1\u2212w) \u00b7 softsign(z), \u221230, 30] + I(|z| < \u03b5)\u00b7(0.001\u00b7z^2) else phi \u00b7 [softsign(z + \u0394)]^(52) + I(|z| < \u03b5)\u00b7(0.001\u00b7z^2) }\nT = \u03a3[k=0 to 200] (a^k \u00b7 (1/2)^k)\nextra = exp(\u2212a/0.1) \u00b7 (z/(1+|z|)) \u00b7 (1 + 0.005 \u00b7 sin(1/(1+a))) \u00b7 (1 + 0.002 \u00b7 cos(0.5\u00b7a)) \u00b7 ([1+0.003\u00b7cos(0.3\u00b7a)]^2) \u00b7 ([1+0.004\u00b7cos(0.3\u00b7a)]^2) \u00b7 (1 + 0.0025\u00b7cos(0.7\u00b7a)) \u00b7 (1 + tanh(0.05\u00b7a)) \u00b7 (1 + sigmoid(0.01\u00b7a)) \u00b7 (1 + 0.002\u00b7cos(3\u00b7a)) \u00b7 [1 + 0.002\u00b7(sin(2.5\u00b7a)+0.001\u00b7cos(3.5\u00b7a)+0.0015\u00b7sin(3\u00b7a))] \u00b7 (1 + sigmoid(0.03\u00b7a)) \u00b7 (1 + tanh(0.07\u00b7a)) \u00b7 (1 + cos(3.1\u00b7a)) \u00b7 (1 + sigmoid(0.04\u00b7a)) \u00b7 (1 + tanh(0.08\u00b7a)) \u00b7 (1 + cos(3.2\u00b7a)) \u00b7 (1 + sigmoid(0.05\u00b7a)) \u00b7 (1 + tanh(0.1\u00b7a)) \u00b7 (1 + cos(3.4\u00b7a)) \u00b7 (1 + sigmoid(0.06\u00b7a)) \u00b7 (1 + tanh(0.12\u00b7a)) \u00b7 (1 + cos(3.6\u00b7a)) \u00b7 (1 + sigmoid(0.08\u00b7a)) \u00b7 (1 + tanh(0.2\u00b7a)) \u00b7 (1 + cos(4.2\u00b7a)) \u00b7 (1 + sin(4.0\u00b7a)) \u00b7 (1 + sigmoid(0.12\u00b7a)) \u00b7 (1 + tanh(0.3\u00b7a)) \u00b7 (1 + sin(4.2\u00b7a))\nextra = extra \u00b7 [1 + sigmoid(0.14\u00b7a)] \u00b7 [1 + tanh(0.35\u00b7a)] \u00b7 [1 + sin(4.6\u00b7a)] \u00b7 [1 + 0.005\u00b7cos(0.9\u00b7a)]\nextra = extra \u00b7 exp(\u2212((a \u2212 1)\u00b2)/(2\u00b7(0.25)\u00b2))\nextra = extra \u00b7 sp( sp( sp( sp( sp( sp( sp( sp(0.865/(1+a))))))) )\nExponent = [0.9478 + 0.00018\u00b7ln(1+a)] \u00b7 [1 + 0.009\u00b7tanh(0.5\u00b7a) + 0.004\u00b7sin(3.5\u00b7a) + 0.003\u00b7cos(2.7\u00b7a) + 0.002\u00b7sin(4.0\u00b7a) + 0.005\u00b7cos(0.9\u00b7a)] \u00b7 [1 + 0.005\u00b7cos(0.9\u00b7a)]\nf(x) = sign(z) \u00b7 { [ f_adapt(z) \u00b7 T \u00b7 extra ]^(Exponent) }\nU = beta + gamma \u00b7 f(x)\nP_accept = 1/(1 + exp(\u2212U))\n</MODEL>\n<VARIABLES>\n{\n  \"variables\": {\n    \"beta\": {\n      \"description\": \"Base intercept parameter of the latent utility U.\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\"low\": -10, \"high\": 10}\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Scaling parameter for the transformed signal f(x) in U.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\"low\": 0, \"high\": 10}\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Modulates the adaptive transformation f_adapt, especially influencing negative outputs.\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\"low\": 0.5, \"high\": 1.5}\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"F1\": {\"description\": \"Fixed component 1 (e.g., normalized offer measure).\", \"range\": {\"min\": -1e6, \"max\": 1e6}, \"learnable\": false, \"source\": \"data\"},\n    \"F2\": {\"description\": \"Fixed component 2 (e.g., token opponent).\", \"range\": {\"min\": -1e6, \"max\": 1e6}, \"learnable\": false, \"source\": \"data\"},\n    \"F3\": {\"description\": \"Fixed component 3 (e.g., combined earning).\", \"range\": {\"min\": -1e6, \"max\": 1e6}, \"learnable\": false, \"source\": \"data\"},\n    \"F4\": {\"description\": \"Fixed component 4 (e.g., proposed share for self).\", \"range\": {\"min\": -1e6, \"max\": 1e6}, \"learnable\": false, \"source\": \"data\"},\n    \"F5\": {\"description\": \"Fixed component 5 (e.g., proposed share for opponent).\", \"range\": {\"min\": -1e6, \"max\": 1e6}, \"learnable\": false, \"source\": \"data\"},\n    \"F6\": {\"description\": \"Fixed component 6 (e.g., split percentage self).\", \"range\": {\"min\": -1e6, \"max\": 1e6}, \"learnable\": false, \"source\": \"data\"},\n    \"F7\": {\"description\": \"Fixed component 7 (e.g., split percentage opponent).\", \"range\": {\"min\": -1e6, \"max\": 1e6}, \"learnable\": false, \"source\": \"data\"},\n    \"F8\": {\"description\": \"Fixed component 8 (e.g., accepted amount).\", \"range\": {\"min\": -1e6, \"max\": 1e6}, \"learnable\": false, \"source\": \"data\"},\n    \"F9\": {\"description\": \"Fixed component 9 (e.g., accepted percentage).\", \"range\": {\"min\": -1e6, \"max\": 1e6}, \"learnable\": false, \"source\": \"data\"},\n    \"F10\": {\"description\": \"Fixed component 10 (e.g., additional measure 1).\", \"range\": {\"min\": -1e6, \"max\": 1e6}, \"learnable\": false, \"source\": \"data\"},\n    \"F11\": {\"description\": \"Fixed component 11 (e.g., additional measure 2).\", \"range\": {\"min\": -1e6, \"max\": 1e6}, \"learnable\": false, \"source\": \"data\"},\n    \"\u03b4\": {\"description\": \"A small constant added to the core sum.\", \"range\": {\"min\": 0, \"max\": 1, \"inclusive_min\": true, \"inclusive_max\": true}, \"learnable\": false, \"source\": \"fixed\"},\n    \"\u0394_shift\": {\"description\": \"A tiny positive constant (1e-6) used for numerical stability in f_adapt.\", \"range\": {\"min\": 0, \"max\": 1e-3}, \"learnable\": false, \"source\": \"fixed\"}\n  }\n}\n</VARIABLES>\n<SUMMARY>\nThis model computes a core sum from 11 fixed task components plus a constant and successively modulates it through sinusoidal and cosine transformations. An adaptive function f_adapt applies a piecewise nonlinear mapping\u2014with a power\u2013log blend for positive signals (clipped to [\u201330,30]) and a steep exponent (50) for negative signals; a small quadratic term is added when |z| is very small. A dynamic threshold T (summed from k = 0 to 200) and an extra composite term (capturing extensive oscillatory, sigmoidal, tanh, softplus, and Gaussian radial basis effects, further multiplied by additional factors including [1+sigmoid(0.14\u00d7a)], [1+tanh(0.35\u00d7a)], [1+sin(4.6\u00d7a)], and [1+0.005\u00d7cos(0.9\u00d7a)]) modulate the signal. The overall exponent is further modulated by these factors. Finally, latent utility is given by U = beta + gamma\u00b7f(x), which is converted via a logistic function into the acceptance probability. Only three learnable parameters (beta, gamma, phi) with fixed bounds are used to allow robust parameter recovery and improved accuracy.\\n</SUMMARY>",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: <think>\nFor run 165, update the instructions to push for even more nuanced local nonlinearities. We now want to further increase the sensitivity of the negative branch by raising its exponent from 50 to 52 (or 52\u2013? but I'll specify \u201c52\u201d) and include an optional local quadratic correction when |z| is very small (e.g., below a threshold \u03b5). Also, extend the dynamic threshold T by summing from k = 0 to 200 (or suggest a flexible rational function alternative). Within the extra composite term, in addition to the previously added multiplicative factors [1 + sigmoid(0.14\u00d7a)] and [1 + tanh(0.35\u00d7a)] and the sin(4.6\u00d7a) term, also multiply by an extra factor [1 + 0.005\u00d7cos(0.9\u00d7a)] to capture additional cyclic variations. Finally, encourage the experimenter to explore alternative piecewise nonlinearities for f_adapt (such as ReLU approximations, hinge losses, or rational function approximations) and to consider alternative formulations for T that can better handle a wide range of a. These modifications should help further improve overall accuracy, reduce the BIC, and achieve better parameter recovery.\n</think>\n\nNew Instructions for Run 165:\n1. Compute the core sum a as the sum of fixed components F\u2081,\u2026,F\u2081\u2081 plus a small constant \u03b4.\n2. Define a_mod = 1.08 \u00d7 a \u00d7 [1 + 0.012 \u00d7 sin(a + 0.045)].\n3. Multiply a_mod sequentially by:\n\u2003\u2003\u2022 [1 + 0.008 \u00d7 cos(a + 0.065)]\n\u2003\u2003\u2022 [1 + 0.005 \u00d7 sin(a + 0.115)]\n\u2003\u2003\u2022 [1 + 0.004 \u00d7 cos(a + 0.085)]\n\u2003\u2003\u2022 [1 + 0.006 \u00d7 (sin(a + 0.035) \u00d7 cos(a + 0.055))]\n\u2003\u2003\u2022 [1 + 0.003 \u00d7 (sin(a + 0.03) \u00d7 cos(a + 0.05))]\n\u2003Define z as the final product.\n4. Set w = (phi \u2212 0.5) / phi.\n\u2003\u2003\u2022 For z \u2265 0, define f_adapt(z) = clip[1.002 \u00d7 (z^w \u00d7 (ln(1+z))^(1\u2212w) \u00d7 softsign(z))] with softsign(x) = x/(1+|x|) and clipped to [\u201330, 30].\n\u2003\u2003\u2022 For z < 0, define f_adapt(z) = phi \u00d7 [softsign(z + \u0394_shift)]^(52), where \u0394_shift = 1\u00d710^(\u20136). Additionally, if |z| < \u03b5 (e.g., \u03b5 = 0.01), add a small quadratic correction (e.g., add 0.001\u00d7z\u00b2).\n5. Define the dynamic threshold T as the sum from k = 0 to 200 of (a^k \u00d7 (\u00bd)^k); alternatively, consider a flexible rational function for T.\n6. Define the extra composite term extra as the product of:\n\u2003\u2003\u2022 exp(\u2013a/0.1)\n\u2003\u2003\u2022 [z/(1+|z|)],\n\u2003\u2003\u2022 [1 + 0.005 \u00d7 sin(1/(1+a))],\n\u2003\u2003\u2022 [1 + 0.002 \u00d7 cos(0.5\u00d7a)],\n\u2003\u2003\u2022 ([1 + 0.003 \u00d7 cos(0.3\u00d7a)]\u00b2),\n\u2003\u2003\u2022 ([1 + 0.004 \u00d7 cos(0.3\u00d7a)]\u00b2),\n\u2003\u2003\u2022 [1 + 0.0025 \u00d7 cos(0.7\u00d7a)],\n\u2003\u2003\u2022 [1 + tanh(0.05\u00d7a)],\n\u2003\u2003\u2022 [1 + sigmoid(0.01\u00d7a)],\n\u2003\u2003\u2022 [1 + 0.002 \u00d7 cos(3\u00d7a)],\n\u2003\u2003\u2022 [1 + 0.002 \u00d7 (sin(2.5\u00d7a)+0.001\u00d7cos(3.5\u00d7a)+0.0015\u00d7sin(3\u00d7a))],\n\u2003\u2003\u2022 [1 + sigmoid(0.03\u00d7a)],\n\u2003\u2003\u2022 [1 + tanh(0.07\u00d7a)],\n\u2003\u2003\u2022 [1 + cos(3.1\u00d7a)],\n\u2003\u2003\u2022 [1 + sigmoid(0.04\u00d7a)],\n\u2003\u2003\u2022 [1 + tanh(0.08\u00d7a)],\n\u2003\u2003\u2022 [1 + cos(3.2\u00d7a)],\n\u2003\u2003\u2022 [1 + sigmoid(0.05\u00d7a)],\n\u2003\u2003\u2022 [1 + tanh(0.1\u00d7a)],\n\u2003\u2003\u2022 [1 + cos(3.4\u00d7a)],\n\u2003\u2003\u2022 [1 + sigmoid(0.06\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new),\n\u2003\u2003\u2022 [1 + tanh(0.12\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new),\n\u2003\u2003\u2022 [1 + cos(3.6\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new),\n\u2003\u2003\u2022 [1 + sigmoid(0.08\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003(new),\n\u2003\u2003\u2022 [1 + tanh(0.2\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new),\n\u2003\u2003\u2022 [1 + cos(4.2\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new),\n\u2003\u2003\u2022 [1 + sin(4.0\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new),\n\u2003\u2003\u2022 [1 + sigmoid(0.12\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003(new),\n\u2003\u2003\u2022 [1 + tanh(0.3\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new),\n\u2003\u2003\u2022 [1 + sin(4.2\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new).\nThen, multiply extra by additional factors: [1 + sigmoid(0.14\u00d7a)], [1 + tanh(0.35\u00d7a)], [1 + sin(4.6\u00d7a)], and [1 + 0.005\u00d7cos(0.9\u00d7a)]. Also, multiply extra by a Gaussian radial basis function exp(\u2013((a\u20131)\u00b2)/(2\u00d7(0.25)\u00b2)). Finally, apply an eight-layer nested softplus chain to 0.865/(1+a).\n7. Define the overall exponent modulation as:\n\u2003\u2003Exponent = [0.9478 + 0.00018 \u00d7 ln(1+a)] \u00d7 [1 + 0.009 \u00d7 tanh(0.5\u00d7a) + 0.004 \u00d7 sin(3.5\u00d7a) + 0.003 \u00d7 cos(2.7\u00d7a) + 0.002 \u00d7 sin(4.0\u00d7a) + 0.005 \u00d7 cos(0.9\u00d7a)] \u00d7 [1 + 0.005\u00d7cos(0.9\u00d7a)].\n8. Compute the final transformed signal: f(x) = sign(z) \u00d7 { [ f_adapt(z) \u00d7 T \u00d7 extra ]^(Exponent) }.\n9. Compute latent utility U = beta + gamma \u00d7 f(x), and convert it to the acceptance probability by P(accept=1) = 1/(1 + exp(\u2013U)).\n10. Use exactly three learnable parameters, with fixed bounds: beta \u2208 [\u201310, 10], gamma \u2208 [0, 10], and phi \u2208 [0.5, 1.5].\\n\\nEncourage exploration by experimenting with alternative piecewise nonlinear functions for f_adapt (such as ReLU approximations, hinge loss, or rational function approximations) and flexible formulations for T. These modifications are intended to further boost accuracy, reduce the BIC, and improve parameter recovery.\\n\\n<target_variable>accept</target_variable>\",\n  <MODEL>\na = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + \u03b4\na_mod = 1.08 * a * (1 + 0.012 * sin(a + 0.045))\nz = a_mod * (1 + 0.008 * cos(a + 0.065)) * (1 + 0.005 * sin(a + 0.115)) * (1 + 0.004 * cos(a + 0.085)) * (1 + 0.006 * (sin(a + 0.035) * cos(a + 0.055))) * (1 + 0.003 * (sin(a + 0.03) * cos(a + 0.05)))\nw = (phi \u2212 0.5) / phi\nsoftsign(x) = x/(1 + |x|)\nf_adapt(z) = { if z \u2265 0 then clip[1.002 \u00b7 z^w \u00b7 (ln(1+z))^(1\u2212w) \u00b7 softsign(z), \u221230, 30] + I(|z| < \u03b5)\u00b7(0.001\u00b7z^2) else phi \u00b7 [softsign(z + \u0394)]^(52) + I(|z| < \u03b5)\u00b7(0.001\u00b7z^2) }\nT = \u03a3[k=0 to 200] (a^k \u00b7 (1/2)^k)\nextra = exp(\u2212a/0.1) \u00b7 (z/(1+|z|)) \u00b7 (1 + 0.005 \u00b7 sin(1/(1+a))) \u00b7 (1 + 0.002 \u00b7 cos(0.5\u00b7a)) \u00b7 ([1+0.003\u00b7cos(0.3\u00b7a)]^2) \u00b7 ([1+0.004\u00b7cos(0.3\u00b7a)]^2) \u00b7 (1 + 0.0025\u00b7cos(0.7\u00b7a)) \u00b7 (1 + tanh(0.05\u00b7a)) \u00b7 (1 + sigmoid(0.01\u00b7a)) \u00b7 (1 + 0.002\u00b7cos(3\u00b7a)) \u00b7 [1 + 0.002\u00b7(sin(2.5\u00b7a)+0.001\u00b7cos(3.5\u00b7a)+0.0015\u00b7sin(3\u00b7a))] \u00b7 (1 + sigmoid(0.03\u00b7a)) \u00b7 (1 + tanh(0.07\u00b7a)) \u00b7 (1 + cos(3.1\u00b7a)) \u00b7 (1 + sigmoid(0.04\u00b7a)) \u00b7 (1 + tanh(0.08\u00b7a)) \u00b7 (1 + cos(3.2\u00b7a)) \u00b7 (1 + sigmoid(0.05\u00b7a)) \u00b7 (1 + tanh(0.1\u00b7a)) \u00b7 (1 + cos(3.4\u00b7a)) \u00b7 (1 + sigmoid(0.06\u00b7a)) \u00b7 (1 + tanh(0.12\u00b7a)) \u00b7 (1 + cos(3.6\u00b7a)) \u00b7 (1 + sigmoid(0.08\u00b7a)) \u00b7 (1 + tanh(0.2\u00b7a)) \u00b7 (1 + cos(4.2\u00b7a)) \u00b7 (1 + sin(4.0\u00b7a)) \u00b7 (1 + sigmoid(0.12\u00b7a)) \u00b7 (1 + tanh(0.3\u00b7a)) \u00b7 (1 + sin(4.2\u00b7a))\nextra = extra \u00b7 [1 + sigmoid(0.14\u00b7a)] \u00b7 [1 + tanh(0.35\u00b7a)] \u00b7 [1 + sin(4.6\u00b7a)] \u00b7 [1 + 0.005\u00b7cos(0.9\u00b7a)]\nextra = extra \u00b7 exp(\u2212((a \u2212 1)\u00b2)/(2\u00b7(0.25)\u00b2))\nextra = extra \u00b7 sp( sp( sp( sp( sp( sp( sp( sp(0.865/(1+a))))))) )\nExponent = [0.9478 + 0.00018\u00b7ln(1+a)] \u00b7 [1 + 0.009\u00b7tanh(0.5\u00b7a) + 0.004\u00b7sin(3.5\u00b7a) + 0.003\u00b7cos(2.7\u00b7a) + 0.002\u00b7sin(4.0\u00b7a) + 0.005\u00b7cos(0.9\u00b7a)] \u00b7 [1 + 0.005\u00b7cos(0.9\u00b7a)]\nf(x) = sign(z) \u00b7 { [ f_adapt(z) \u00b7 T \u00b7 extra ]^(Exponent) }\nU = beta + gamma \u00b7 f(x)\nP_accept = 1/(1 + exp(\u2212U))\n</MODEL>\n<VARIABLES>\n{\n  \"variables\": {\n    \"beta\": {\n      \"description\": \"Base intercept parameter of the latent utility U.\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\"low\": -10, \"high\": 10}\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Scaling parameter for the transformed signal f(x) in U.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\"low\": 0, \"high\": 10}\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Modulates the adaptive transformation f_adapt, especially influencing negative outputs.\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\"low\": 0.5, \"high\": 1.5}\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"F1\": {\"description\": \"Fixed component 1 (e.g., normalized offer measure).\", \"range\": {\"min\": -1e6, \"max\": 1e6}, \"learnable\": false, \"source\": \"data\"},\n    \"F2\": {\"description\": \"Fixed component 2 (e.g., token opponent).\", \"range\": {\"min\": -1e6, \"max\": 1e6}, \"learnable\": false, \"source\": \"data\"},\n    \"F3\": {\"description\": \"Fixed component 3 (e.g., combined earning).\", \"range\": {\"min\": -1e6, \"max\": 1e6}, \"learnable\": false, \"source\": \"data\"},\n    \"F4\": {\"description\": \"Fixed component 4 (e.g., proposed share for self).\", \"range\": {\"min\": -1e6, \"max\": 1e6}, \"learnable\": false, \"source\": \"data\"},\n    \"F5\": {\"description\": \"Fixed component 5 (e.g., proposed share for opponent).\", \"range\": {\"min\": -1e6, \"max\": 1e6}, \"learnable\": false, \"source\": \"data\"},\n    \"F6\": {\"description\": \"Fixed component 6 (e.g., split percentage self).\", \"range\": {\"min\": -1e6, \"max\": 1e6}, \"learnable\": false, \"source\": \"data\"},\n    \"F7\": {\"description\": \"Fixed component 7 (e.g., split percentage opponent).\", \"range\": {\"min\": -1e6, \"max\": 1e6}, \"learnable\": false, \"source\": \"data\"},\n    \"F8\": {\"description\": \"Fixed component 8 (e.g., accepted amount).\", \"range\": {\"min\": -1e6, \"max\": 1e6}, \"learnable\": false, \"source\": \"data\"},\n    \"F9\": {\"description\": \"Fixed component 9 (e.g., accepted percentage).\", \"range\": {\"min\": -1e6, \"max\": 1e6}, \"learnable\": false, \"source\": \"data\"},\n    \"F10\": {\"description\": \"Fixed component 10 (e.g., additional measure 1).\", \"range\": {\"min\": -1e6, \"max\": 1e6}, \"learnable\": false, \"source\": \"data\"},\n    \"F11\": {\"description\": \"Fixed component 11 (e.g., additional measure 2).\", \"range\": {\"min\": -1e6, \"max\": 1e6}, \"learnable\": false, \"source\": \"data\"},\n    \"\u03b4\": {\"description\": \"A small constant added to the core sum.\", \"range\": {\"min\": 0, \"max\": 1, \"inclusive_min\": true, \"inclusive_max\": true}, \"learnable\": false, \"source\": \"fixed\"},\n    \"\u0394_shift\": {\"description\": \"A tiny positive constant (1e-6) used for numerical stability in f_adapt.\", \"range\": {\"min\": 0, \"max\": 1e-3}, \"learnable\": false, \"source\": \"fixed\"}\n  }\n}\n</VARIABLES>\n<SUMMARY>\nThis model computes a core sum from 11 fixed task components plus a constant and successively modulates it through sinusoidal and cosine transformations. An adaptive function f_adapt applies a piecewise nonlinear mapping\u2014with a power\u2013log blend for positive signals (clipped to [\u201330,30]) and a steep exponent (50) for negative signals; a small quadratic term is added when |z| is very small. A dynamic threshold T (summed from k = 0 to 200) and an extra composite term (capturing extensive oscillatory, sigmoidal, tanh, softplus, and Gaussian radial basis effects, further multiplied by additional factors including [1+sigmoid(0.14\u00d7a)], [1+tanh(0.35\u00d7a)], [1+sin(4.6\u00d7a)], and [1+0.005\u00d7cos(0.9\u00d7a)]) modulate the signal. The overall exponent is further modulated by these factors. Finally, latent utility is given by U = beta + gamma\u00b7f(x), which is converted via a logistic function into the acceptance probability. Only three learnable parameters (beta, gamma, phi) with fixed bounds are used to allow robust parameter recovery and improved accuracy.\\n</SUMMARY>\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<MODEL>\na = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + \u03b4\na_mod = 1.08 * a * (1 + 0.012 * sin(a + 0.045))\nz = a_mod * (1 + 0.008 * cos(a + 0.065)) * (1 + 0.005 * sin(a + 0.115)) * (1 + 0.004 * cos(a + 0.085)) * (1 + 0.006 * (sin(a + 0.035) * cos(a + 0.055))) * (1 + 0.003 * (sin(a + 0.03) * cos(a + 0.05)))\nw = (phi - 0.5) / phi\nsoftsign(x) = x/(1+abs(x))\nf_adapt(z) = { if z >= 0 then clip( 1.002 * ( z^w * (ln(1+z))^(1-w) * softsign(z) ), -30, 30 ) + I(abs(z)<\u03b5)*0.001*z^2 else phi * (softsign(z + \u0394_shift))^52 + I(abs(z)<\u03b5)*0.001*z^2 }\nT = \u03a3[k=0 to 200] ( a^k * (1/2)^k )\nextra = exp(-a/0.1) * ( z/(1+abs(z)) ) * (1+0.005*sin(1/(1+a))) * (1+0.002*cos(0.5*a)) * (1+0.003*cos(0.3*a))^2 * (1+0.004*cos(0.3*a))^2 * (1+0.0025*cos(0.7*a)) * (1+tanh(0.05*a)) * (1+sigmoid(0.01*a)) * (1+0.002*cos(3*a)) * (1+0.002*(sin(2.5*a)+0.001*cos(3.5*a)+0.0015*sin(3*a))) * (1+sigmoid(0.03*a)) * (1+tanh(0.07*a)) * (1+cos(3.1*a)) * (1+sigmoid(0.04*a)) * (1+tanh(0.08*a)) * (1+cos(3.2*a)) * (1+sigmoid(0.05*a)) * (1+tanh(0.1*a)) * (1+cos(3.4*a)) * (1+sigmoid(0.06*a)) * (1+tanh(0.12*a)) * (1+cos(3.6*a)) * (1+sigmoid(0.08*a)) * (1+tanh(0.2*a)) * (1+cos(4.2*a)) * (1+sin(4.0*a)) * (1+sigmoid(0.12*a)) * (1+tanh(0.3*a)) * (1+sin(4.2*a))\nextra = extra * (1+sigmoid(0.14*a)) * (1+tanh(0.35*a)) * (1+sin(4.6*a)) * (1+0.005*cos(0.9*a))\nextra = extra * exp(-((a-1)^2)/(2*(0.25)^2))\nextra = extra * sp(sp(sp(sp(sp(sp(sp(sp(0.865/(1+a))))))))\nExponent = (0.9478 + 0.00018*ln(1+a)) * (1 + 0.009*tanh(0.5*a) + 0.004*sin(3.5*a) + 0.003*cos(2.7*a) + 0.002*sin(4.0*a) + 0.005*cos(0.9*a)) * (1+0.005*cos(0.9*a))\nf(x) = sign(z) * ((f_adapt(z) * T * extra)^(Exponent))\nU = beta + gamma * f(x)\nP_accept = 1/(1+exp(-U))\n</MODEL>\n<VARIABLES>\n{\n  \"variables\": {\n    \"beta\": {\n      \"description\": \"Base intercept parameter of the latent utility U.\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\"low\": -10, \"high\": 10}\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Scaling parameter for the transformed signal f(x) in U.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\"low\": 0, \"high\": 10}\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Adaptive modulation parameter that influences f_adapt, especially for negative z.\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\"low\": 0.5, \"high\": 1.5}\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"F1\": {\n      \"description\": \"Fixed component 1 from the dataset (e.g., normalized offer measure).\",\n      \"range\": {\n        \"min\": -1000000,\n        \"max\": 1000000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F2\": {\n      \"description\": \"Fixed component 2 from the dataset (e.g., token_opp).\",\n      \"range\": {\n        \"min\": -1000000,\n        \"max\": 1000000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F3\": {\n      \"description\": \"Fixed component 3 from the dataset (e.g., combined_earning).\",\n      \"range\": {\n        \"min\": -1000000,\n        \"max\": 1000000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F4\": {\n      \"description\": \"Fixed component 4 from the dataset (e.g., split_self).\",\n      \"range\": {\n        \"min\": -1000000,\n        \"max\": 1000000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F5\": {\n      \"description\": \"Fixed component 5 from the dataset (e.g., split_opp).\",\n      \"range\": {\n        \"min\": -1000000,\n        \"max\": 1000000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F6\": {\n      \"description\": \"Fixed component 6 from the dataset (e.g., splitperc_self).\",\n      \"range\": {\n        \"min\": -1000000,\n        \"max\": 1000000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F7\": {\n      \"description\": \"Fixed component 7 from the dataset (e.g., splitperc_opp).\",\n      \"range\": {\n        \"min\": -1000000,\n        \"max\": 1000000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F8\": {\n      \"description\": \"Fixed component 8 from the dataset (e.g., accepted_amount).\",\n      \"range\": {\n        \"min\": -1000000,\n        \"max\": 1000000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F9\": {\n      \"description\": \"Fixed component 9 from the dataset (e.g., accepted_perc).\",\n      \"range\": {\n        \"min\": -1000000,\n        \"max\": 1000000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F10\": {\n      \"description\": \"Fixed component 10 from the dataset (e.g., additional measure 1).\",\n      \"range\": {\n        \"min\": -1000000,\n        \"max\": 1000000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F11\": {\n      \"description\": \"Fixed component 11 from the dataset (e.g., additional measure 2).\",\n      \"range\": {\n        \"min\": -1000000,\n        \"max\": 1000000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"\u03b4\": {\n      \"description\": \"Small constant added to the core sum to avoid degenerate cases.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"\u0394_shift\": {\n      \"description\": \"Tiny positive constant (1e-6) used for numerical stability in f_adapt.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 0.001,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"\u03b5\": {\n      \"description\": \"Threshold for applying a small quadratic correction when |z| is very small.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 0.1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    }\n  }\n}\n</VARIABLES>\n<target_variable>accept</target_variable>\n<SUMMARY>\nThe model computes a core sum from 11 fixed components and a small constant, then applies a series of multiplicative sinusoidal and cosine modulations to produce an intermediate signal z. An adaptive nonlinearity f_adapt is applied in a piecewise manner, using a power\u2010log blend for nonnegative z (with clipping) and an enhanced exponent (52) for negative z, with an added quadratic correction for small |z|. A dynamic threshold T (a finite power series) and an extra composite term\u2014aggregating multiple oscillatory, sigmoidal, tanh, and Gaussian factors, further modulated by an eight-layer nested softplus chain\u2014are used to modulate the transformed signal. The final transformed signal f(x) is raised to an exponent that depends on a logarithmic and oscillatory adjustment. Latent utility is computed as U = beta + gamma\u00b7f(x) and converted to an acceptance probability via a logistic function. Only three learnable parameters (beta, gamma, phi) with fixed bounds govern the model.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['beta', 'gamma', 'phi']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                a = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + \u03b4\na_mod = 1.08 * a * (1 + 0.012 * sin(a + 0.045))\nz = a_mod * (1 + 0.008 * cos(a + 0.065)) * (1 + 0.005 * sin(a + 0.115)) * (1 + 0.004 * cos(a + 0.085)) * (1 + 0.006 * (sin(a + 0.035) * cos(a + 0.055))) * (1 + 0.003 * (sin(a + 0.03) * cos(a + 0.05)))\nw = (phi - 0.5) / phi\nsoftsign(x) = x/(1+abs(x))\nf_adapt(z) = { if z >= 0 then clip( 1.002 * ( z^w * (ln(1+z))^(1-w) * softsign(z) ), -30, 30 ) + I(abs(z)<\u03b5)*0.001*z^2 else phi * (softsign(z + \u0394_shift))^52 + I(abs(z)<\u03b5)*0.001*z^2 }\nT = \u03a3[k=0 to 200] ( a^k * (1/2)^k )\nextra = exp(-a/0.1) * ( z/(1+abs(z)) ) * (1+0.005*sin(1/(1+a))) * (1+0.002*cos(0.5*a)) * (1+0.003*cos(0.3*a))^2 * (1+0.004*cos(0.3*a))^2 * (1+0.0025*cos(0.7*a)) * (1+tanh(0.05*a)) * (1+sigmoid(0.01*a)) * (1+0.002*cos(3*a)) * (1+0.002*(sin(2.5*a)+0.001*cos(3.5*a)+0.0015*sin(3*a))) * (1+sigmoid(0.03*a)) * (1+tanh(0.07*a)) * (1+cos(3.1*a)) * (1+sigmoid(0.04*a)) * (1+tanh(0.08*a)) * (1+cos(3.2*a)) * (1+sigmoid(0.05*a)) * (1+tanh(0.1*a)) * (1+cos(3.4*a)) * (1+sigmoid(0.06*a)) * (1+tanh(0.12*a)) * (1+cos(3.6*a)) * (1+sigmoid(0.08*a)) * (1+tanh(0.2*a)) * (1+cos(4.2*a)) * (1+sin(4.0*a)) * (1+sigmoid(0.12*a)) * (1+tanh(0.3*a)) * (1+sin(4.2*a))\nextra = extra * (1+sigmoid(0.14*a)) * (1+tanh(0.35*a)) * (1+sin(4.6*a)) * (1+0.005*cos(0.9*a))\nextra = extra * exp(-((a-1)^2)/(2*(0.25)^2))\nextra = extra * sp(sp(sp(sp(sp(sp(sp(sp(0.865/(1+a))))))))\nExponent = (0.9478 + 0.00018*ln(1+a)) * (1 + 0.009*tanh(0.5*a) + 0.004*sin(3.5*a) + 0.003*cos(2.7*a) + 0.002*sin(4.0*a) + 0.005*cos(0.9*a)) * (1+0.005*cos(0.9*a))\nf(x) = sign(z) * ((f_adapt(z) * T * extra)^(Exponent))\nU = beta + gamma * f(x)\nP_accept = 1/(1+exp(-U))\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"beta\": {\n      \"description\": \"Base intercept parameter of the latent utility U.\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Scaling parameter for the transformed signal f(x) in U.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0,\n          \"high\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Adaptive modulation parameter that influences f_adapt, especially for negative z.\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0.5,\n          \"high\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"F1\": {\n      \"description\": \"Fixed component 1 from the dataset (e.g., normalized offer measure).\",\n      \"range\": {\n        \"min\": -1000000,\n        \"max\": 1000000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F2\": {\n      \"description\": \"Fixed component 2 from the dataset (e.g., token_opp).\",\n      \"range\": {\n        \"min\": -1000000,\n        \"max\": 1000000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F3\": {\n      \"description\": \"Fixed component 3 from the dataset (e.g., combined_earning).\",\n      \"range\": {\n        \"min\": -1000000,\n        \"max\": 1000000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F4\": {\n      \"description\": \"Fixed component 4 from the dataset (e.g., split_self).\",\n      \"range\": {\n        \"min\": -1000000,\n        \"max\": 1000000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F5\": {\n      \"description\": \"Fixed component 5 from the dataset (e.g., split_opp).\",\n      \"range\": {\n        \"min\": -1000000,\n        \"max\": 1000000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F6\": {\n      \"description\": \"Fixed component 6 from the dataset (e.g., splitperc_self).\",\n      \"range\": {\n        \"min\": -1000000,\n        \"max\": 1000000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F7\": {\n      \"description\": \"Fixed component 7 from the dataset (e.g., splitperc_opp).\",\n      \"range\": {\n        \"min\": -1000000,\n        \"max\": 1000000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F8\": {\n      \"description\": \"Fixed component 8 from the dataset (e.g., accepted_amount).\",\n      \"range\": {\n        \"min\": -1000000,\n        \"max\": 1000000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F9\": {\n      \"description\": \"Fixed component 9 from the dataset (e.g., accepted_perc).\",\n      \"range\": {\n        \"min\": -1000000,\n        \"max\": 1000000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F10\": {\n      \"description\": \"Fixed component 10 from the dataset (e.g., additional measure 1).\",\n      \"range\": {\n        \"min\": -1000000,\n        \"max\": 1000000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F11\": {\n      \"description\": \"Fixed component 11 from the dataset (e.g., additional measure 2).\",\n      \"range\": {\n        \"min\": -1000000,\n        \"max\": 1000000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"\\u03b4\": {\n      \"description\": \"Small constant added to the core sum to avoid degenerate cases.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"\\u0394_shift\": {\n      \"description\": \"Tiny positive constant (1e-6) used for numerical stability in f_adapt.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 0.001,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"\\u03b5\": {\n      \"description\": \"Threshold for applying a small quadratic correction when |z| is very small.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 0.1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, beta=0, gamma=1, phi=1):\n    model_predictions = []\n    delta = 0.5 #Fixed parameter\n    delta_shift = 0.000001 #Fixed parameter\n    epsilon = 0.05 #Fixed parameter\n\n    def softsign(x):\n        return x / (1 + abs(x))\n\n    def clip(x, lower, upper):\n        return max(lower, min(x, upper))\n\n    def indicator(condition):\n        return 1 if condition else 0\n\n    def sp(x):\n        return math.log(1 + math.exp(x))\n    \n    def sigmoid(x):\n        return 1 / (1 + math.exp(-x))\n\n    for trial in trial_data:\n        F1 = trial.get(\"F1\", 0)\n        F2 = trial.get(\"token_opp\", 0)\n        F3 = trial.get(\"combined_earning\", 0)\n        F4 = trial.get(\"split_self\", 0)\n        F5 = trial.get(\"split_opp\", 0)\n        F6 = trial.get(\"splitperc_self\", 0)\n        F7 = trial.get(\"splitperc_opp\", 0)\n        F8 = trial.get(\"accepted_amount\", 0)\n        F9 = trial.get(\"accepted_perc\", 0)\n        F10 = trial.get(\"F10\", 0)\n        F11 = trial.get(\"F11\", 0)\n        \n\n        a = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + delta\n        a_mod = 1.08 * a * (1 + 0.012 * math.sin(a + 0.045))\n        z = a_mod * (1 + 0.008 * math.cos(a + 0.065)) * (1 + 0.005 * math.sin(a + 0.115)) * (1 + 0.004 * math.cos(a + 0.085)) * (1 + 0.006 * (math.sin(a + 0.035) * math.cos(a + 0.055))) * (1 + 0.003 * (math.sin(a + 0.03) * math.cos(a + 0.05)))\n        w = (phi - 0.5) / phi\n        \n        if z >= 0:\n            f_adapt_z = clip(1.002 * (z**w * (math.log(1 + z))**(1 - w) * softsign(z)), -30, 30) + indicator(abs(z) < epsilon) * 0.001 * z**2\n        else:\n            f_adapt_z = phi * (softsign(z + delta_shift))**52 + indicator(abs(z) < epsilon) * 0.001 * z**2\n        \n        T = sum(a**k * (1/2)**k for k in range(201))\n        \n        extra = math.exp(-a/0.1) * (z / (1 + abs(z))) * (1 + 0.005 * math.sin(1 / (1 + a))) * (1 + 0.002 * math.cos(0.5 * a))\n        extra = extra * (1 + 0.003 * math.cos(0.3 * a))**2 * (1 + 0.004 * math.cos(0.3 * a))**2 * (1 + 0.0025 * math.cos(0.7 * a))\n        extra = extra * (1 + math.tanh(0.05 * a)) * (1 + sigmoid(0.01 * a)) * (1 + 0.002 * math.cos(3 * a))\n        extra = extra * (1 + 0.002 * (math.sin(2.5 * a) + 0.001 * math.cos(3.5 * a) + 0.0015 * math.sin(3 * a)))\n        extra = extra * (1 + sigmoid(0.03 * a)) * (1 + math.tanh(0.07 * a)) * (1 + math.cos(3.1 * a))\n        extra = extra * (1 + sigmoid(0.04 * a)) * (1 + math.tanh(0.08 * a)) * (1 + math.cos(3.2 * a))\n        extra = extra * (1 + sigmoid(0.05 * a)) * (1 + math.tanh(0.1 * a)) * (1 + math.cos(3.4 * a))\n        extra = extra * (1 + sigmoid(0.06 * a)) * (1 + math.tanh(0.12 * a)) * (1 + math.cos(3.6 * a))\n        extra = extra * (1 + sigmoid(0.08 * a)) * (1 + math.tanh(0.2 * a)) * (1 + math.cos(4.2 * a))\n        extra = extra * (1 + math.sin(4.0 * a)) * (1 + sigmoid(0.12 * a)) * (1 + math.tanh(0.3 * a)) * (1 + math.sin(4.2 * a))\n        extra = extra * (1 + sigmoid(0.14 * a)) * (1 + math.tanh(0.35 * a)) * (1 + math.sin(4.6 * a)) * (1 + 0.005 * math.cos(0.9 * a))\n        extra = extra * math.exp(-((a - 1)**2) / (2 * (0.25)**2))\n        extra = extra * sp(sp(sp(sp(sp(sp(sp(sp(0.865 / (1 + a))))))))\n\n        exponent = (0.9478 + 0.00018 * math.log(1 + a)) * (1 + 0.009 * math.tanh(0.5 * a) + 0.004 * math.sin(3.5 * a) + 0.003 * math.cos(2.7 * a) + 0.002 * math.sin(4.0 * a) + 0.005 * math.cos(0.9 * a)) * (1 + 0.005 * math.cos(0.9 * a))\n\n        if z >= 0:\n            fx = math.copysign(1,((f_adapt_z * T * extra)**exponent) if (f_adapt_z * T * extra) > 0 else 0) * ((abs(f_adapt_z * T * extra))**exponent if abs(f_adapt_z * T * extra) > 0 else 0) #Sign(z) * ((f_adapt(z) * T * extra)^(Exponent))\n        else:\n            fx = math.copysign(1,((f_adapt_z * T * extra)**exponent) if (f_adapt_z * T * extra) > 0 else 0) * ((abs(f_adapt_z * T * extra))**exponent if abs(f_adapt_z * T * extra) > 0 else 0) #Sign(z) * ((f_adapt(z) * T * extra)^(Exponent))\n\n\n        U = beta + gamma * fx\n        P_accept = 1 / (1 + math.exp(-U))\n        model_predictions.append(P_accept)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n```",
      "timestamp": 1743550050.583175
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['beta', 'gamma', 'phi']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                a = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + \u03b4\na_mod = 1.08 * a * (1 + 0.012 * sin(a + 0.045))\nz = a_mod * (1 + 0.008 * cos(a + 0.065)) * (1 + 0.005 * sin(a + 0.115)) * (1 + 0.004 * cos(a + 0.085)) * (1 + 0.006 * (sin(a + 0.035) * cos(a + 0.055))) * (1 + 0.003 * (sin(a + 0.03) * cos(a + 0.05)))\nw = (phi - 0.5) / phi\nsoftsign(x) = x/(1+abs(x))\nf_adapt(z) = { if z >= 0 then clip( 1.002 * ( z^w * (ln(1+z))^(1-w) * softsign(z) ), -30, 30 ) + I(abs(z)<\u03b5)*0.001*z^2 else phi * (softsign(z + \u0394_shift))^52 + I(abs(z)<\u03b5)*0.001*z^2 }\nT = \u03a3[k=0 to 200] ( a^k * (1/2)^k )\nextra = exp(-a/0.1) * ( z/(1+abs(z)) ) * (1+0.005*sin(1/(1+a))) * (1+0.002*cos(0.5*a)) * (1+0.003*cos(0.3*a))^2 * (1+0.004*cos(0.3*a))^2 * (1+0.0025*cos(0.7*a)) * (1+tanh(0.05*a)) * (1+sigmoid(0.01*a)) * (1+0.002*cos(3*a)) * (1+0.002*(sin(2.5*a)+0.001*cos(3.5*a)+0.0015*sin(3*a))) * (1+sigmoid(0.03*a)) * (1+tanh(0.07*a)) * (1+cos(3.1*a)) * (1+sigmoid(0.04*a)) * (1+tanh(0.08*a)) * (1+cos(3.2*a)) * (1+sigmoid(0.05*a)) * (1+tanh(0.1*a)) * (1+cos(3.4*a)) * (1+sigmoid(0.06*a)) * (1+tanh(0.12*a)) * (1+cos(3.6*a)) * (1+sigmoid(0.08*a)) * (1+tanh(0.2*a)) * (1+cos(4.2*a)) * (1+sin(4.0*a)) * (1+sigmoid(0.12*a)) * (1+tanh(0.3*a)) * (1+sin(4.2*a))\nextra = extra * (1+sigmoid(0.14*a)) * (1+tanh(0.35*a)) * (1+sin(4.6*a)) * (1+0.005*cos(0.9*a))\nextra = extra * exp(-((a-1)^2)/(2*(0.25)^2))\nextra = extra * sp(sp(sp(sp(sp(sp(sp(sp(0.865/(1+a))))))))\nExponent = (0.9478 + 0.00018*ln(1+a)) * (1 + 0.009*tanh(0.5*a) + 0.004*sin(3.5*a) + 0.003*cos(2.7*a) + 0.002*sin(4.0*a) + 0.005*cos(0.9*a)) * (1+0.005*cos(0.9*a))\nf(x) = sign(z) * ((f_adapt(z) * T * extra)^(Exponent))\nU = beta + gamma * f(x)\nP_accept = 1/(1+exp(-U))\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"beta\": {\n      \"description\": \"Base intercept parameter of the latent utility U.\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Scaling parameter for the transformed signal f(x) in U.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0,\n          \"high\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Adaptive modulation parameter that influences f_adapt, especially for negative z.\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0.5,\n          \"high\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"F1\": {\n      \"description\": \"Fixed component 1 from the dataset (e.g., normalized offer measure).\",\n      \"range\": {\n        \"min\": -1000000,\n        \"max\": 1000000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F2\": {\n      \"description\": \"Fixed component 2 from the dataset (e.g., token_opp).\",\n      \"range\": {\n        \"min\": -1000000,\n        \"max\": 1000000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F3\": {\n      \"description\": \"Fixed component 3 from the dataset (e.g., combined_earning).\",\n      \"range\": {\n        \"min\": -1000000,\n        \"max\": 1000000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F4\": {\n      \"description\": \"Fixed component 4 from the dataset (e.g., split_self).\",\n      \"range\": {\n        \"min\": -1000000,\n        \"max\": 1000000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F5\": {\n      \"description\": \"Fixed component 5 from the dataset (e.g., split_opp).\",\n      \"range\": {\n        \"min\": -1000000,\n        \"max\": 1000000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F6\": {\n      \"description\": \"Fixed component 6 from the dataset (e.g., splitperc_self).\",\n      \"range\": {\n        \"min\": -1000000,\n        \"max\": 1000000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F7\": {\n      \"description\": \"Fixed component 7 from the dataset (e.g., splitperc_opp).\",\n      \"range\": {\n        \"min\": -1000000,\n        \"max\": 1000000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F8\": {\n      \"description\": \"Fixed component 8 from the dataset (e.g., accepted_amount).\",\n      \"range\": {\n        \"min\": -1000000,\n        \"max\": 1000000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F9\": {\n      \"description\": \"Fixed component 9 from the dataset (e.g., accepted_perc).\",\n      \"range\": {\n        \"min\": -1000000,\n        \"max\": 1000000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F10\": {\n      \"description\": \"Fixed component 10 from the dataset (e.g., additional measure 1).\",\n      \"range\": {\n        \"min\": -1000000,\n        \"max\": 1000000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F11\": {\n      \"description\": \"Fixed component 11 from the dataset (e.g., additional measure 2).\",\n      \"range\": {\n        \"min\": -1000000,\n        \"max\": 1000000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"\\u03b4\": {\n      \"description\": \"Small constant added to the core sum to avoid degenerate cases.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"\\u0394_shift\": {\n      \"description\": \"Tiny positive constant (1e-6) used for numerical stability in f_adapt.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 0.001,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"\\u03b5\": {\n      \"description\": \"Threshold for applying a small quadratic correction when |z| is very small.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 0.1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "```python\nimport json\nimport math\n\ndef simulate_model(trial_data, beta=0, gamma=1, phi=1):\n    model_predictions = []\n    delta = 0.0001\n    delta_shift = 0.000001\n    epsilon = 0.001\n\n    def softsign(x):\n        return x / (1 + abs(x))\n\n    def clip(x, min_val, max_val):\n        return max(min(x, max_val), min_val)\n\n    def I(condition):\n        return 1 if condition else 0\n\n    def ln(x):\n      if x <= 0:\n        return -float('inf')\n      else:\n        return math.log(x)\n\n    def exp(x):\n      return math.exp(x)\n\n    def sin(x):\n      return math.sin(x)\n\n    def cos(x):\n      return math.cos(x)\n\n    def tanh(x):\n      return math.tanh(x)\n\n    def sigmoid(x):\n        return 1 / (1 + exp(-x))\n\n    def sp(x):\n        return math.log(1 + math.exp(x))\n\n    def sign(x):\n      if x > 0:\n        return 1\n      elif x < 0:\n        return -1\n      else:\n        return 0\n\n    for trial in trial_data:\n        F1 = trial.get(\"F1\", 0)\n        F2 = trial.get(\"F2\", 0)\n        F3 = trial.get(\"F3\", 0)\n        F4 = trial.get(\"F4\", 0)\n        F5 = trial.get(\"F5\", 0)\n        F6 = trial.get(\"F6\", 0)\n        F7 = trial.get(\"F7\", 0)\n        F8 = trial.get(\"F8\", 0)\n        F9 = trial.get(\"F9\", 0)\n        F10 = trial.get(\"F10\", 0)\n        F11 = trial.get(\"F11\", 0)\n\n        a = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + delta\n        a_mod = 1.08 * a * (1 + 0.012 * sin(a + 0.045))\n        z = a_mod * (1 + 0.008 * cos(a + 0.065)) * (1 + 0.005 * sin(a + 0.115)) * (1 + 0.004 * cos(a + 0.085)) * (1 + 0.006 * (sin(a + 0.035) * cos(a + 0.055))) * (1 + 0.003 * (sin(a + 0.03) * cos(a + 0.05)))\n        w = (phi - 0.5) / phi\n\n        def f_adapt(z):\n            if z >= 0:\n                return clip(1.002 * (z**w * (ln(1 + z))**(1 - w) * softsign(z)), -30, 30) + I(abs(z) < epsilon) * 0.001 * z**2\n            else:\n                return phi * (softsign(z + delta_shift))**52 + I(abs(z) < epsilon) * 0.001 * z**2\n\n        T = sum(a**k * (1/2)**k for k in range(201))\n        extra = exp(-a/0.1) * ( z/(1+abs(z)) ) * (1+0.005*sin(1/(1+a))) * (1+0.002*cos(0.5*a)) * (1+0.003*cos(0.3*a))**2 * (1+0.004*cos(0.3*a))**2 * (1+0.0025*cos(0.7*a)) * (1+tanh(0.05*a)) * (1+sigmoid(0.01*a)) * (1+0.002*cos(3*a)) * (1+0.002*(sin(2.5*a)+0.001*cos(3.5*a)+0.0015*sin(3*a))) * (1+sigmoid(0.03*a)) * (1+tanh(0.07*a)) * (1+cos(3.1*a)) * (1+sigmoid(0.04*a)) * (1+tanh(0.08*a)) * (1+cos(3.2*a)) * (1+sigmoid(0.05*a)) * (1+tanh(0.1*a)) * (1+cos(3.4*a)) * (1+sigmoid(0.06*a)) * (1+tanh(0.12*a)) * (1+cos(3.6*a)) * (1+sigmoid(0.08*a)) * (1+tanh(0.2*a)) * (1+cos(4.2*a)) * (1+sin(4.0*a)) * (1+sigmoid(0.12*a)) * (1+tanh(0.3*a)) * (1+sin(4.2*a))\n        extra = extra * (1+sigmoid(0.14*a)) * (1+tanh(0.35*a)) * (1+sin(4.6*a)) * (1+0.005*cos(0.9*a))\n        extra = extra * exp(-((a-1)**2)/(2*(0.25)**2))\n        extra = extra * sp(sp(sp(sp(sp(sp(sp(sp(0.865/(1+a)))))))))\n\n        Exponent = (0.9478 + 0.00018*ln(1+a)) * (1 + 0.009*tanh(0.5*a) + 0.004*sin(3.5*a) + 0.003*cos(2.7*a) + 0.002*sin(4.0*a) + 0.005*cos(0.9*a)) * (1+0.005*cos(0.9*a))\n\n        fx = sign(z) * ((f_adapt(z) * T * extra)**(Exponent))\n\n        U = beta + gamma * fx\n        P_accept = 1/(1+exp(-U))\n\n        model_predictions.append(P_accept)\n\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '''\n[\n  {\n    \"ID\": 0,\n    \"group\": \"1\",\n    \"trial_number\": 1,\n    \"trial_type\": 1,\n    \"trial_role\": 1,\n    \"token_opp\": 20,\n    \"token_self\": 20,\n    \"combined_earning\": 40,\n    \"split_opp\": 10.0,\n    \"split_self\": 10.0,\n    \"splitperc_opp\": 50,\n    \"splitperc_self\": 50,\n    \"accept\": 1.0,\n    \"accepted_amount\": 10.0,\n    \"accepted_perc\": 50.0,\n    \"proposed_perc\": 50.0,\n    \"proposed_amount\": 10.0,\n    \"F1\": 1,\n    \"F2\": 20,\n    \"F3\": 40,\n    \"F4\": 10,\n    \"F5\": 10,\n    \"F6\": 50,\n    \"F7\": 50,\n    \"F8\": 10,\n    \"F9\": 50,\n    \"F10\": 1,\n    \"F11\": 1\n  },\n  {\n    \"ID\": 1,\n    \"group\": \"1\",\n    \"trial_number\": 2,\n    \"trial_type\": 1,\n    \"trial_role\": 1,\n    \"token_opp\": 20,\n    \"token_self\": 20,\n    \"combined_earning\": 40,\n    \"split_opp\": 14.0,\n    \"split_self\": 6.0,\n    \"splitperc_opp\": 70,\n    \"splitperc_self\": 30,\n    \"accept\": 0.0,\n    \"accepted_amount\": 0.0,\n    \"accepted_perc\": 0.0,\n    \"proposed_perc\": 70.0,\n    \"proposed_amount\": 14.0,\n    \"F1\": 1,\n    \"F2\": 20,\n    \"F3\": 40,\n    \"F4\": 6,\n    \"F5\": 14,\n    \"F6\": 30,\n    \"F7\": 70,\n    \"F8\": 0,\n    \"F9\": 0,\n    \"F10\": 1,\n    \"F11\": 1\n  }\n]\n'''\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))\n```",
      "timestamp": 1743550060.7033632
    }
  ],
  "learnable_parameters": {
    "beta": {
      "description": "Base intercept parameter of the latent utility U.",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -10,
          "high": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Scaling parameter for the transformed signal f(x) in U.",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0,
          "high": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "phi": {
      "description": "Adaptive modulation parameter that influences f_adapt, especially for negative z.",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0.5,
          "high": 1.5
        }
      },
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "a = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + \u03b4\na_mod = 1.08 * a * (1 + 0.012 * sin(a + 0.045))\nz = a_mod * (1 + 0.008 * cos(a + 0.065)) * (1 + 0.005 * sin(a + 0.115)) * (1 + 0.004 * cos(a + 0.085)) * (1 + 0.006 * (sin(a + 0.035) * cos(a + 0.055))) * (1 + 0.003 * (sin(a + 0.03) * cos(a + 0.05)))\nw = (phi - 0.5) / phi\nsoftsign(x) = x/(1+abs(x))\nf_adapt(z) = { if z >= 0 then clip( 1.002 * ( z^w * (ln(1+z))^(1-w) * softsign(z) ), -30, 30 ) + I(abs(z)<\u03b5)*0.001*z^2 else phi * (softsign(z + \u0394_shift))^52 + I(abs(z)<\u03b5)*0.001*z^2 }\nT = \u03a3[k=0 to 200] ( a^k * (1/2)^k )\nextra = exp(-a/0.1) * ( z/(1+abs(z)) ) * (1+0.005*sin(1/(1+a))) * (1+0.002*cos(0.5*a)) * (1+0.003*cos(0.3*a))^2 * (1+0.004*cos(0.3*a))^2 * (1+0.0025*cos(0.7*a)) * (1+tanh(0.05*a)) * (1+sigmoid(0.01*a)) * (1+0.002*cos(3*a)) * (1+0.002*(sin(2.5*a)+0.001*cos(3.5*a)+0.0015*sin(3*a))) * (1+sigmoid(0.03*a)) * (1+tanh(0.07*a)) * (1+cos(3.1*a)) * (1+sigmoid(0.04*a)) * (1+tanh(0.08*a)) * (1+cos(3.2*a)) * (1+sigmoid(0.05*a)) * (1+tanh(0.1*a)) * (1+cos(3.4*a)) * (1+sigmoid(0.06*a)) * (1+tanh(0.12*a)) * (1+cos(3.6*a)) * (1+sigmoid(0.08*a)) * (1+tanh(0.2*a)) * (1+cos(4.2*a)) * (1+sin(4.0*a)) * (1+sigmoid(0.12*a)) * (1+tanh(0.3*a)) * (1+sin(4.2*a))\nextra = extra * (1+sigmoid(0.14*a)) * (1+tanh(0.35*a)) * (1+sin(4.6*a)) * (1+0.005*cos(0.9*a))\nextra = extra * exp(-((a-1)^2)/(2*(0.25)^2))\nextra = extra * sp(sp(sp(sp(sp(sp(sp(sp(0.865/(1+a))))))))\nExponent = (0.9478 + 0.00018*ln(1+a)) * (1 + 0.009*tanh(0.5*a) + 0.004*sin(3.5*a) + 0.003*cos(2.7*a) + 0.002*sin(4.0*a) + 0.005*cos(0.9*a)) * (1+0.005*cos(0.9*a))\nf(x) = sign(z) * ((f_adapt(z) * T * extra)^(Exponent))\nU = beta + gamma * f(x)\nP_accept = 1/(1+exp(-U))",
  "variable_descriptions": {
    "beta": {
      "description": "Base intercept parameter of the latent utility U.",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -10,
          "high": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Scaling parameter for the transformed signal f(x) in U.",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0,
          "high": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "phi": {
      "description": "Adaptive modulation parameter that influences f_adapt, especially for negative z.",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0.5,
          "high": 1.5
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "F1": {
      "description": "Fixed component 1 from the dataset (e.g., normalized offer measure).",
      "range": {
        "min": -1000000,
        "max": 1000000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "F2": {
      "description": "Fixed component 2 from the dataset (e.g., token_opp).",
      "range": {
        "min": -1000000,
        "max": 1000000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "F3": {
      "description": "Fixed component 3 from the dataset (e.g., combined_earning).",
      "range": {
        "min": -1000000,
        "max": 1000000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "F4": {
      "description": "Fixed component 4 from the dataset (e.g., split_self).",
      "range": {
        "min": -1000000,
        "max": 1000000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "F5": {
      "description": "Fixed component 5 from the dataset (e.g., split_opp).",
      "range": {
        "min": -1000000,
        "max": 1000000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "F6": {
      "description": "Fixed component 6 from the dataset (e.g., splitperc_self).",
      "range": {
        "min": -1000000,
        "max": 1000000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "F7": {
      "description": "Fixed component 7 from the dataset (e.g., splitperc_opp).",
      "range": {
        "min": -1000000,
        "max": 1000000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "F8": {
      "description": "Fixed component 8 from the dataset (e.g., accepted_amount).",
      "range": {
        "min": -1000000,
        "max": 1000000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "F9": {
      "description": "Fixed component 9 from the dataset (e.g., accepted_perc).",
      "range": {
        "min": -1000000,
        "max": 1000000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "F10": {
      "description": "Fixed component 10 from the dataset (e.g., additional measure 1).",
      "range": {
        "min": -1000000,
        "max": 1000000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "F11": {
      "description": "Fixed component 11 from the dataset (e.g., additional measure 2).",
      "range": {
        "min": -1000000,
        "max": 1000000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "\u03b4": {
      "description": "Small constant added to the core sum to avoid degenerate cases.",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "fixed"
    },
    "\u0394_shift": {
      "description": "Tiny positive constant (1e-6) used for numerical stability in f_adapt.",
      "range": {
        "min": 0,
        "max": 0.001,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "fixed"
    },
    "\u03b5": {
      "description": "Threshold for applying a small quadratic correction when |z| is very small.",
      "range": {
        "min": 0,
        "max": 0.1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "fixed"
    }
  },
  "model_summary": "The model computes a core sum from 11 fixed components and a small constant, then applies a series of multiplicative sinusoidal and cosine modulations to produce an intermediate signal z. An adaptive nonlinearity f_adapt is applied in a piecewise manner, using a power\u2010log blend for nonnegative z (with clipping) and an enhanced exponent (52) for negative z, with an added quadratic correction for small |z|. A dynamic threshold T (a finite power series) and an extra composite term\u2014aggregating multiple oscillatory, sigmoidal, tanh, and Gaussian factors, further modulated by an eight-layer nested softplus chain\u2014are used to modulate the transformed signal. The final transformed signal f(x) is raised to an exponent that depends on a logarithmic and oscillatory adjustment. Latent utility is computed as U = beta + gamma\u00b7f(x) and converted to an acceptance probability via a logistic function. Only three learnable parameters (beta, gamma, phi) with fixed bounds govern the model.",
  "target_variable": "accept",
  "full_reasoning": "<MODEL>\na = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + \u03b4\na_mod = 1.08 * a * (1 + 0.012 * sin(a + 0.045))\nz = a_mod * (1 + 0.008 * cos(a + 0.065)) * (1 + 0.005 * sin(a + 0.115)) * (1 + 0.004 * cos(a + 0.085)) * (1 + 0.006 * (sin(a + 0.035) * cos(a + 0.055))) * (1 + 0.003 * (sin(a + 0.03) * cos(a + 0.05)))\nw = (phi - 0.5) / phi\nsoftsign(x) = x/(1+abs(x))\nf_adapt(z) = { if z >= 0 then clip( 1.002 * ( z^w * (ln(1+z))^(1-w) * softsign(z) ), -30, 30 ) + I(abs(z)<\u03b5)*0.001*z^2 else phi * (softsign(z + \u0394_shift))^52 + I(abs(z)<\u03b5)*0.001*z^2 }\nT = \u03a3[k=0 to 200] ( a^k * (1/2)^k )\nextra = exp(-a/0.1) * ( z/(1+abs(z)) ) * (1+0.005*sin(1/(1+a))) * (1+0.002*cos(0.5*a)) * (1+0.003*cos(0.3*a))^2 * (1+0.004*cos(0.3*a))^2 * (1+0.0025*cos(0.7*a)) * (1+tanh(0.05*a)) * (1+sigmoid(0.01*a)) * (1+0.002*cos(3*a)) * (1+0.002*(sin(2.5*a)+0.001*cos(3.5*a)+0.0015*sin(3*a))) * (1+sigmoid(0.03*a)) * (1+tanh(0.07*a)) * (1+cos(3.1*a)) * (1+sigmoid(0.04*a)) * (1+tanh(0.08*a)) * (1+cos(3.2*a)) * (1+sigmoid(0.05*a)) * (1+tanh(0.1*a)) * (1+cos(3.4*a)) * (1+sigmoid(0.06*a)) * (1+tanh(0.12*a)) * (1+cos(3.6*a)) * (1+sigmoid(0.08*a)) * (1+tanh(0.2*a)) * (1+cos(4.2*a)) * (1+sin(4.0*a)) * (1+sigmoid(0.12*a)) * (1+tanh(0.3*a)) * (1+sin(4.2*a))\nextra = extra * (1+sigmoid(0.14*a)) * (1+tanh(0.35*a)) * (1+sin(4.6*a)) * (1+0.005*cos(0.9*a))\nextra = extra * exp(-((a-1)^2)/(2*(0.25)^2))\nextra = extra * sp(sp(sp(sp(sp(sp(sp(sp(0.865/(1+a))))))))\nExponent = (0.9478 + 0.00018*ln(1+a)) * (1 + 0.009*tanh(0.5*a) + 0.004*sin(3.5*a) + 0.003*cos(2.7*a) + 0.002*sin(4.0*a) + 0.005*cos(0.9*a)) * (1+0.005*cos(0.9*a))\nf(x) = sign(z) * ((f_adapt(z) * T * extra)^(Exponent))\nU = beta + gamma * f(x)\nP_accept = 1/(1+exp(-U))\n</MODEL>\n<VARIABLES>\n{\n  \"variables\": {\n    \"beta\": {\n      \"description\": \"Base intercept parameter of the latent utility U.\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\"low\": -10, \"high\": 10}\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Scaling parameter for the transformed signal f(x) in U.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\"low\": 0, \"high\": 10}\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Adaptive modulation parameter that influences f_adapt, especially for negative z.\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\"low\": 0.5, \"high\": 1.5}\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"F1\": {\n      \"description\": \"Fixed component 1 from the dataset (e.g., normalized offer measure).\",\n      \"range\": {\n        \"min\": -1000000,\n        \"max\": 1000000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F2\": {\n      \"description\": \"Fixed component 2 from the dataset (e.g., token_opp).\",\n      \"range\": {\n        \"min\": -1000000,\n        \"max\": 1000000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F3\": {\n      \"description\": \"Fixed component 3 from the dataset (e.g., combined_earning).\",\n      \"range\": {\n        \"min\": -1000000,\n        \"max\": 1000000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F4\": {\n      \"description\": \"Fixed component 4 from the dataset (e.g., split_self).\",\n      \"range\": {\n        \"min\": -1000000,\n        \"max\": 1000000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F5\": {\n      \"description\": \"Fixed component 5 from the dataset (e.g., split_opp).\",\n      \"range\": {\n        \"min\": -1000000,\n        \"max\": 1000000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F6\": {\n      \"description\": \"Fixed component 6 from the dataset (e.g., splitperc_self).\",\n      \"range\": {\n        \"min\": -1000000,\n        \"max\": 1000000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F7\": {\n      \"description\": \"Fixed component 7 from the dataset (e.g., splitperc_opp).\",\n      \"range\": {\n        \"min\": -1000000,\n        \"max\": 1000000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F8\": {\n      \"description\": \"Fixed component 8 from the dataset (e.g., accepted_amount).\",\n      \"range\": {\n        \"min\": -1000000,\n        \"max\": 1000000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F9\": {\n      \"description\": \"Fixed component 9 from the dataset (e.g., accepted_perc).\",\n      \"range\": {\n        \"min\": -1000000,\n        \"max\": 1000000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F10\": {\n      \"description\": \"Fixed component 10 from the dataset (e.g., additional measure 1).\",\n      \"range\": {\n        \"min\": -1000000,\n        \"max\": 1000000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F11\": {\n      \"description\": \"Fixed component 11 from the dataset (e.g., additional measure 2).\",\n      \"range\": {\n        \"min\": -1000000,\n        \"max\": 1000000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"\u03b4\": {\n      \"description\": \"Small constant added to the core sum to avoid degenerate cases.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"\u0394_shift\": {\n      \"description\": \"Tiny positive constant (1e-6) used for numerical stability in f_adapt.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 0.001,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"\u03b5\": {\n      \"description\": \"Threshold for applying a small quadratic correction when |z| is very small.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 0.1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    }\n  }\n}\n</VARIABLES>\n<target_variable>accept</target_variable>\n<SUMMARY>\nThe model computes a core sum from 11 fixed components and a small constant, then applies a series of multiplicative sinusoidal and cosine modulations to produce an intermediate signal z. An adaptive nonlinearity f_adapt is applied in a piecewise manner, using a power\u2010log blend for nonnegative z (with clipping) and an enhanced exponent (52) for negative z, with an added quadratic correction for small |z|. A dynamic threshold T (a finite power series) and an extra composite term\u2014aggregating multiple oscillatory, sigmoidal, tanh, and Gaussian factors, further modulated by an eight-layer nested softplus chain\u2014are used to modulate the transformed signal. The final transformed signal f(x) is raised to an exponent that depends on a logarithmic and oscillatory adjustment. Latent utility is computed as U = beta + gamma\u00b7f(x) and converted to an acceptance probability via a logistic function. Only three learnable parameters (beta, gamma, phi) with fixed bounds govern the model.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: a = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + \u03b4\na_mod = 1.08 * a * (1 + 0.012 * sin(a + 0.045))\nz = a_mod * (1 + 0.008 * cos(a + 0.065)) * (1 + 0.005 * sin(a + 0.115)) * (1 + 0.004 * cos(a + 0.085)) * (1 + 0.006 * (sin(a + 0.035) * cos(a + 0.055))) * (1 + 0.003 * (sin(a + 0.03) * cos(a + 0.05)))\nw = (phi - 0.5) / phi\nsoftsign(x) = x/(1+abs(x))\nf_adapt(z) = { if z >= 0 then clip( 1.002 * ( z^w * (ln(1+z))^(1-w) * softsign(z) ), -30, 30 ) + I(abs(z)<\u03b5)*0.001*z^2 else phi * (softsign(z + \u0394_shift))^52 + I(abs(z)<\u03b5)*0.001*z^2 }\nT = \u03a3[k=0 to 200] ( a^k * (1/2)^k )\nextra = exp(-a/0.1) * ( z/(1+abs(z)) ) * (1+0.005*sin(1/(1+a))) * (1+0.002*cos(0.5*a)) * (1+0.003*cos(0.3*a))^2 * (1+0.004*cos(0.3*a))^2 * (1+0.0025*cos(0.7*a)) * (1+tanh(0.05*a)) * (1+sigmoid(0.01*a)) * (1+0.002*cos(3*a)) * (1+0.002*(sin(2.5*a)+0.001*cos(3.5*a)+0.0015*sin(3*a))) * (1+sigmoid(0.03*a)) * (1+tanh(0.07*a)) * (1+cos(3.1*a)) * (1+sigmoid(0.04*a)) * (1+tanh(0.08*a)) * (1+cos(3.2*a)) * (1+sigmoid(0.05*a)) * (1+tanh(0.1*a)) * (1+cos(3.4*a)) * (1+sigmoid(0.06*a)) * (1+tanh(0.12*a)) * (1+cos(3.6*a)) * (1+sigmoid(0.08*a)) * (1+tanh(0.2*a)) * (1+cos(4.2*a)) * (1+sin(4.0*a)) * (1+sigmoid(0.12*a)) * (1+tanh(0.3*a)) * (1+sin(4.2*a))\nextra = extra * (1+sigmoid(0.14*a)) * (1+tanh(0.35*a)) * (1+sin(4.6*a)) * (1+0.005*cos(0.9*a))\nextra = extra * exp(-((a-1)^2)/(2*(0.25)^2))\nextra = extra * sp(sp(sp(sp(sp(sp(sp(sp(0.865/(1+a))))))))\nExponent = (0.9478 + 0.00018*ln(1+a)) * (1 + 0.009*tanh(0.5*a) + 0.004*sin(3.5*a) + 0.003*cos(2.7*a) + 0.002*sin(4.0*a) + 0.005*cos(0.9*a)) * (1+0.005*cos(0.9*a))\nf(x) = sign(z) * ((f_adapt(z) * T * extra)^(Exponent))\nU = beta + gamma * f(x)\nP_accept = 1/(1+exp(-U))\nSummary: The model computes a core sum from 11 fixed components and a small constant, then applies a series of multiplicative sinusoidal and cosine modulations to produce an intermediate signal z. An adaptive nonlinearity f_adapt is applied in a piecewise manner, using a power\u2010log blend for nonnegative z (with clipping) and an enhanced exponent (52) for negative z, with an added quadratic correction for small |z|. A dynamic threshold T (a finite power series) and an extra composite term\u2014aggregating multiple oscillatory, sigmoidal, tanh, and Gaussian factors, further modulated by an eight-layer nested softplus chain\u2014are used to modulate the transformed signal. The final transformed signal f(x) is raised to an exponent that depends on a logarithmic and oscillatory adjustment. Latent utility is computed as U = beta + gamma\u00b7f(x) and converted to an acceptance probability via a logistic function. Only three learnable parameters (beta, gamma, phi) with fixed bounds govern the model.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [
    {
      "retry_number": 0,
      "error": "  File \"<string>\", line 65\n    extra = extra * sp(sp(sp(sp(sp(sp(sp(sp(0.865 / (1 + a))))))))\n                      ^\nSyntaxError: '(' was never closed\n",
      "timestamp": 1743550050.645752
    }
  ],
  "current_retry": 1,
  "simulation_error": "  File \"<string>\", line 65\n    extra = extra * sp(sp(sp(sp(sp(sp(sp(sp(0.865 / (1 + a))))))))\n                      ^\nSyntaxError: '(' was never closed\n",
  "simulation_code": "def simulate_model(trial_data, beta=0, gamma=1, phi=1):\n    model_predictions = []\n    delta = 0.0001\n    delta_shift = 0.000001\n    epsilon = 0.001\n\n    def softsign(x):\n        return x / (1 + abs(x))\n\n    def clip(x, min_val, max_val):\n        return max(min(x, max_val), min_val)\n\n    def I(condition):\n        return 1 if condition else 0\n\n    def ln(x):\n      if x <= 0:\n        return -float('inf')\n      else:\n        return math.log(x)\n\n    def exp(x):\n      return math.exp(x)\n\n    def sin(x):\n      return math.sin(x)\n\n    def cos(x):\n      return math.cos(x)\n\n    def tanh(x):\n      return math.tanh(x)\n\n    def sigmoid(x):\n        return 1 / (1 + exp(-x))\n\n    def sp(x):\n        return math.log(1 + math.exp(x))\n\n    def sign(x):\n      if x > 0:\n        return 1\n      elif x < 0:\n        return -1\n      else:\n        return 0\n\n    for trial in trial_data:\n        F1 = trial.get(\"F1\", 0)\n        F2 = trial.get(\"F2\", 0)\n        F3 = trial.get(\"F3\", 0)\n        F4 = trial.get(\"F4\", 0)\n        F5 = trial.get(\"F5\", 0)\n        F6 = trial.get(\"F6\", 0)\n        F7 = trial.get(\"F7\", 0)\n        F8 = trial.get(\"F8\", 0)\n        F9 = trial.get(\"F9\", 0)\n        F10 = trial.get(\"F10\", 0)\n        F11 = trial.get(\"F11\", 0)\n\n        a = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + delta\n        a_mod = 1.08 * a * (1 + 0.012 * sin(a + 0.045))\n        z = a_mod * (1 + 0.008 * cos(a + 0.065)) * (1 + 0.005 * sin(a + 0.115)) * (1 + 0.004 * cos(a + 0.085)) * (1 + 0.006 * (sin(a + 0.035) * cos(a + 0.055))) * (1 + 0.003 * (sin(a + 0.03) * cos(a + 0.05)))\n        w = (phi - 0.5) / phi\n\n        def f_adapt(z):\n            if z >= 0:\n                return clip(1.002 * (z**w * (ln(1 + z))**(1 - w) * softsign(z)), -30, 30) + I(abs(z) < epsilon) * 0.001 * z**2\n            else:\n                return phi * (softsign(z + delta_shift))**52 + I(abs(z) < epsilon) * 0.001 * z**2\n\n        T = sum(a**k * (1/2)**k for k in range(201))\n        extra = exp(-a/0.1) * ( z/(1+abs(z)) ) * (1+0.005*sin(1/(1+a))) * (1+0.002*cos(0.5*a)) * (1+0.003*cos(0.3*a))**2 * (1+0.004*cos(0.3*a))**2 * (1+0.0025*cos(0.7*a)) * (1+tanh(0.05*a)) * (1+sigmoid(0.01*a)) * (1+0.002*cos(3*a)) * (1+0.002*(sin(2.5*a)+0.001*cos(3.5*a)+0.0015*sin(3*a))) * (1+sigmoid(0.03*a)) * (1+tanh(0.07*a)) * (1+cos(3.1*a)) * (1+sigmoid(0.04*a)) * (1+tanh(0.08*a)) * (1+cos(3.2*a)) * (1+sigmoid(0.05*a)) * (1+tanh(0.1*a)) * (1+cos(3.4*a)) * (1+sigmoid(0.06*a)) * (1+tanh(0.12*a)) * (1+cos(3.6*a)) * (1+sigmoid(0.08*a)) * (1+tanh(0.2*a)) * (1+cos(4.2*a)) * (1+sin(4.0*a)) * (1+sigmoid(0.12*a)) * (1+tanh(0.3*a)) * (1+sin(4.2*a))\n        extra = extra * (1+sigmoid(0.14*a)) * (1+tanh(0.35*a)) * (1+sin(4.6*a)) * (1+0.005*cos(0.9*a))\n        extra = extra * exp(-((a-1)**2)/(2*(0.25)**2))\n        extra = extra * sp(sp(sp(sp(sp(sp(sp(sp(0.865/(1+a)))))))))\n\n        Exponent = (0.9478 + 0.00018*ln(1+a)) * (1 + 0.009*tanh(0.5*a) + 0.004*sin(3.5*a) + 0.003*cos(2.7*a) + 0.002*sin(4.0*a) + 0.005*cos(0.9*a)) * (1+0.005*cos(0.9*a))\n\n        fx = sign(z) * ((f_adapt(z) * T * extra)**(Exponent))\n\n        U = beta + gamma * fx\n        P_accept = 1/(1+exp(-U))\n\n        model_predictions.append(P_accept)\n\n    return model_predictions",
  "total_retries": 1,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.5726495726495727,
  "fitting_results": [
    {
      "beta": -10.0,
      "gamma": 2.9815773371494583,
      "phi": 0.8038461980021486,
      "success": true,
      "log_likelihood": -24.95397947026279,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -9.999999999999998,
      "gamma": 0.9356617271870749,
      "phi": 0.7588521057368736,
      "success": true,
      "log_likelihood": -24.953298502232386,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.0782643157526772,
      "gamma": 1.7963872026459993,
      "phi": 1.368663627049576,
      "success": true,
      "log_likelihood": -24.89771432411642,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 8.43673795347907,
      "phi": 1.432372365157333,
      "success": true,
      "log_likelihood": -24.95343469583847,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.33760254255064237,
      "phi": 1.4431694901320016,
      "success": true,
      "log_likelihood": -24.953389297969775,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.2841683576975119,
      "gamma": 0.31173574509101964,
      "phi": 1.3742629363533965,
      "success": true,
      "log_likelihood": -23.545973166045613,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 9.912274055444147,
      "phi": 0.720826655810053,
      "success": true,
      "log_likelihood": -11.277860290249517,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.8148737404511239,
      "gamma": 7.529532684333766,
      "phi": 1.402913566874106,
      "success": true,
      "log_likelihood": -22.914510051413302,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 4.465972038490112,
      "phi": 1.1723289734883318,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.30602040095892735,
      "phi": 1.3933916704656806,
      "success": true,
      "log_likelihood": -24.95348009370716,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.09268760493302386,
      "phi": 1.329963943443873,
      "success": true,
      "log_likelihood": -24.95338929796977,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.7131028229464875,
      "phi": 0.646583815693716,
      "success": true,
      "log_likelihood": -24.953934072394095,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 8.54906301006659,
      "phi": 0.7803666782601388,
      "success": true,
      "log_likelihood": -24.953434695838467,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 6.156094959966073,
      "phi": 0.8194826764938449,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 1.8147795336879247,
      "phi": 1.0065297908217794,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 6.890710327834365,
      "phi": 1.224266276397604,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 8.70984882182996,
      "phi": 0.8393436088466717,
      "success": true,
      "log_likelihood": -11.277860290249517,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 1.7994872819571195,
      "phi": 1.0820930368621111,
      "success": true,
      "log_likelihood": -16.27763329973089,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 2.816429335732705,
      "phi": 0.9334285922143821,
      "success": true,
      "log_likelihood": -15.27767869783462,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 5.0822178567529015,
      "phi": 0.7508902356565688,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -7.772177180554079,
      "gamma": 3.5693779220977886,
      "phi": 0.9690970765563229,
      "success": true,
      "log_likelihood": -24.952457055753438,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 5.807631256993857,
      "phi": 1.0256943306984327,
      "success": true,
      "log_likelihood": -16.277633299730894,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.05173887647934139,
      "phi": 1.0516347603998017,
      "success": true,
      "log_likelihood": -24.95352549157585,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.0781761616669496,
      "gamma": 0.16176874370662508,
      "phi": 1.1843305043619874,
      "success": true,
      "log_likelihood": -24.897714324597768,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 1.6891159665713795,
      "phi": 1.3237012013888902,
      "success": true,
      "log_likelihood": -24.95329850223239,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.6790306171976949,
      "gamma": 9.865654092063386,
      "phi": 1.0493610966576337,
      "success": true,
      "log_likelihood": -24.450957568625185,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.2473611127154607,
      "gamma": 7.464947432114756,
      "phi": 0.6672040005263029,
      "success": true,
      "log_likelihood": -24.730616751140953,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 7.950536270323761,
      "phi": 0.6811516320751256,
      "success": true,
      "log_likelihood": -24.953661685181935,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 9.942000088189761,
      "phi": 1.2090841568477209,
      "success": true,
      "log_likelihood": -15.277678697834615,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 7.787369787049458,
      "phi": 1.0555775546590964,
      "success": true,
      "log_likelihood": -19.27749710541971,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 1.002528158687075,
      "phi": 1.2468463669732226,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 1.1998613012934056,
      "phi": 1.3554956652892818,
      "success": true,
      "log_likelihood": -24.953979470262787,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 2.1184927277504317,
      "phi": 0.837772445782182,
      "success": true,
      "log_likelihood": -24.953434695838467,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 3.38402944843181,
      "phi": 0.9613347019589822,
      "success": true,
      "log_likelihood": -24.953480093707167,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3333333333333333,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 1.051946855275827,
      "phi": 1.4388237794808245,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.28405958280933974,
      "gamma": 9.397037783226029,
      "phi": 1.0950069557038289,
      "success": true,
      "log_likelihood": -23.54597316390505,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.5229816303497574,
      "gamma": 5.559771083901023,
      "phi": 0.5562159142263476,
      "success": true,
      "log_likelihood": -22.15793815477784,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -6.242244566995575,
      "gamma": 8.652437835625866,
      "phi": 0.7677564696945887,
      "success": true,
      "log_likelihood": -24.9533154589603,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.8149657887957298,
      "gamma": 4.922100227903491,
      "phi": 1.045179003921974,
      "success": true,
      "log_likelihood": -22.914510052933057,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 5.534347791044945,
      "phi": 0.6449150422781473,
      "success": true,
      "log_likelihood": -14.27772409593835,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.19265538739074137,
      "gamma": 7.262958706413137,
      "phi": 0.8245237652211869,
      "success": true,
      "log_likelihood": -24.056945188724672,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 6.611781829099556,
      "phi": 1.2523204154667478,
      "success": true,
      "log_likelihood": -24.953752480919327,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 3.3289421743235446,
      "phi": 0.7354812503153568,
      "success": true,
      "log_likelihood": -12.277814892145805,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.2475775906827813,
      "gamma": 4.5066312149268,
      "phi": 0.7679259056622878,
      "success": true,
      "log_likelihood": -24.730616752821184,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.19265359081883016,
      "gamma": 5.446847254922225,
      "phi": 1.432282421629551,
      "success": true,
      "log_likelihood": -24.056945188723446,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 3.0645605435614196,
      "gamma": 7.29495451443184,
      "phi": 1.2393156750259107,
      "success": true,
      "log_likelihood": -21.270320898114136,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.078360884841631,
      "gamma": 1.6383356081482514,
      "phi": 1.1955901478707955,
      "success": true,
      "log_likelihood": -24.897714324371208,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 1.856151284578197,
      "phi": 0.9305244381219387,
      "success": true,
      "log_likelihood": -24.95348009370716,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 9.915278992725684,
      "phi": 1.4834498428635257,
      "success": true,
      "log_likelihood": -24.953434695838464,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.078322640875136,
      "gamma": 9.201670504842657,
      "phi": 1.3167381668586353,
      "success": true,
      "log_likelihood": -24.897714324172526,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.5230813859027608,
      "gamma": 7.520712057366481,
      "phi": 1.1102102727771832,
      "success": true,
      "log_likelihood": -22.15793815521453,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 5.073206588271214,
      "phi": 1.1180716445308372,
      "success": true,
      "log_likelihood": -24.953888674525402,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.080224033383552,
      "gamma": 5.437794831814893,
      "phi": 1.3953384221760534,
      "success": true,
      "log_likelihood": -24.897714489105997,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.6790593850875208,
      "gamma": 0.5548534089635526,
      "phi": 1.2867373062706937,
      "success": true,
      "log_likelihood": -24.450957568499,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -9.999999999999998,
      "gamma": 4.281629148025345,
      "phi": 0.6272325909405395,
      "success": true,
      "log_likelihood": -24.953480093707164,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 4.025764321254002,
      "phi": 1.423848018325992,
      "success": true,
      "log_likelihood": -24.95357088944455,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 4.212833376114689,
      "phi": 1.344342784964274,
      "success": true,
      "log_likelihood": -24.95366168518194,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 4.378327198294775,
      "phi": 1.2111905867834185,
      "success": true,
      "log_likelihood": -15.27767869783462,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.7556851265114817,
      "phi": 1.2473311198888155,
      "success": true,
      "log_likelihood": -24.953934072394095,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 4.0408185000001,
      "phi": 1.1110858068183875,
      "success": true,
      "log_likelihood": -18.27754250352343,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.19263832995683985,
      "gamma": 4.2370648195345515,
      "phi": 0.6302099019262908,
      "success": true,
      "log_likelihood": -24.056945188781157,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -6.184765598556197,
      "gamma": 5.625320363109725,
      "phi": 1.4853057104789578,
      "success": true,
      "log_likelihood": -24.953317521492227,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 7.644833383448235,
      "phi": 1.1829190005643548,
      "success": true,
      "log_likelihood": -24.953979470262794,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -9.999999999999998,
      "gamma": 3.5625684378416036,
      "phi": 0.5769092780908268,
      "success": true,
      "log_likelihood": -24.953389297969775,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 3.0458779374526745,
      "phi": 0.6972997380557077,
      "success": true,
      "log_likelihood": -24.953752480919324,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.247805021755093,
      "gamma": 9.106886860097601,
      "phi": 1.2124158240696459,
      "success": true,
      "log_likelihood": -24.73061676806711,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 1.3048049118846483,
      "phi": 0.8731356652692381,
      "success": true,
      "log_likelihood": -14.277724095938348,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 2.206894439463162,
      "phi": 0.8954173314799929,
      "success": true,
      "log_likelihood": -16.277633299730887,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.247426190640718,
      "gamma": 0.4083663542324478,
      "phi": 0.5151260141842753,
      "success": true,
      "log_likelihood": -24.730616750330203,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 8.719841283411537,
      "phi": 0.9631499926827364,
      "success": true,
      "log_likelihood": -14.277724095938341,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 3.4595199641207905,
      "phi": 0.8315541530449688,
      "success": true,
      "log_likelihood": -24.953934072394098,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 8.276872865405707,
      "phi": 0.5023248635277824,
      "success": true,
      "log_likelihood": -24.953888674525405,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.07828584212766,
      "gamma": 7.652801932186717,
      "phi": 0.7282190236970987,
      "success": true,
      "log_likelihood": -24.897714324102402,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 3.9723815262786353,
      "phi": 1.4106373420274254,
      "success": true,
      "log_likelihood": -19.2774971054197,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 5.183487431789173,
      "phi": 0.5630480214171022,
      "success": true,
      "log_likelihood": -24.953298502232386,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.5230010299817713,
      "gamma": 4.173803781697077,
      "phi": 1.2166529554167211,
      "success": true,
      "log_likelihood": -22.157938154734133,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 5.4858148243223805,
      "phi": 1.4130950099275088,
      "success": true,
      "log_likelihood": -13.277769494042078,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -9.999999999999998,
      "gamma": 6.060593334087548,
      "phi": 1.2628421545570836,
      "success": true,
      "log_likelihood": -24.954024868131487,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.19263724308310978,
      "gamma": 0.055557149113040216,
      "phi": 0.9028723178250636,
      "success": true,
      "log_likelihood": -24.056945188789914,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 8.063318757657939,
      "phi": 1.427351959506373,
      "success": true,
      "log_likelihood": -24.95397947026279,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.078344445747059,
      "gamma": 2.512422007634841,
      "phi": 1.0983487260500637,
      "success": true,
      "log_likelihood": -24.897714324270094,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 2.070180487042265,
      "phi": 1.1169596494765612,
      "success": true,
      "log_likelihood": -14.277724095938348,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.6326359250507985,
      "phi": 0.5168839860176112,
      "success": true,
      "log_likelihood": -24.953934072394095,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -8.07004267875726,
      "gamma": 5.737690871233237,
      "phi": 1.3738218004947242,
      "success": true,
      "log_likelihood": -24.953298932895418,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.1925588326022932,
      "gamma": 9.958451072620477,
      "phi": 0.6959732479636005,
      "success": true,
      "log_likelihood": -24.05694519105889,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.2824866132785053,
      "phi": 1.4813938524273227,
      "success": true,
      "log_likelihood": -24.95393407239409,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.5230571742128163,
      "gamma": 7.414483663391911,
      "phi": 0.5524031384494633,
      "success": true,
      "log_likelihood": -22.157938154957648,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.0184056229238716,
      "phi": 0.5570805496551009,
      "success": true,
      "log_likelihood": -24.95375248091932,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 2.388675392382341,
      "phi": 1.1277987558427207,
      "success": true,
      "log_likelihood": -13.277769494042078,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -5.923260582270903,
      "gamma": 6.235423197475206,
      "phi": 1.1047803401601684,
      "success": true,
      "log_likelihood": -24.95599987134206,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.5230272095311215,
      "gamma": 3.039745839110032,
      "phi": 0.8011841280838087,
      "success": true,
      "log_likelihood": -22.15793815477364,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "beta": {
        "r": 0.7578903446468116,
        "p": 6.976566503092012e-20
      },
      "gamma": {
        "r": 0.0529435612262475,
        "p": 0.6008723587118222
      },
      "phi": {
        "r": -0.07626996633143404,
        "p": 0.45072303662014923
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 53.92762783259985,
  "bic_results": {
    "average_bic": 53.92762783259985,
    "individual_bics": [
      60.658515755893916,
      60.6571538198331,
      60.54598546360117,
      60.657426207045276,
      60.65733541130788,
      57.84250314745955,
      33.30627739586737,
      56.57957691819493,
      33.3062773958674,
      60.657517002782654,
      60.65733541130787,
      60.65842496015652,
      60.65742620704526,
      33.3062773958674,
      33.3062773958674,
      33.3062773958674,
      33.30627739586737,
      43.305823414830115,
      41.305914211037575,
      33.3062773958674,
      60.65547092687521,
      43.305823414830115,
      60.65760779852003,
      60.54598546456387,
      60.65715381983311,
      59.6524719526187,
      60.21179031765024,
      60.657880185732196,
      41.30591421103756,
      49.30555102620775,
      33.3062773958674,
      60.6585157558939,
      60.65742620704526,
      60.65751700278267,
      33.3062773958674,
      57.84250314317843,
      55.066433124924,
      60.657187733288936,
      56.57957692123445,
      39.306005007245034,
      58.86444719281768,
      60.65806177720698,
      35.30618659965994,
      60.211790321010696,
      58.86444719281522,
      53.2911986115966,
      60.54598546411074,
      60.657517002782654,
      60.65742620704526,
      60.54598546371338,
      55.06643312579739,
      60.65833416441913,
      60.54598579358033,
      59.65247195236633,
      60.657517002782654,
      60.657698594257425,
      60.65788018573221,
      41.305914211037575,
      60.65842496015652,
      47.3056418224152,
      58.86444719293064,
      60.65719185835279,
      60.658515755893916,
      60.65733541130788,
      60.65806177720698,
      60.21179035150256,
      39.30600500724503,
      43.3058234148301,
      60.21179031602874,
      39.30600500724501,
      60.65842496015652,
      60.658334164419145,
      60.54598546357313,
      49.30555102620774,
      60.6571538198331,
      55.06643312483659,
      37.306095803452486,
      60.65860655163131,
      58.86444719294816,
      60.658515755893916,
      60.54598546390852,
      39.30600500724503,
      60.65842496015652,
      60.65715468115917,
      58.864447197486115,
      60.65842496015651,
      55.06643312528362,
      60.65806177720697,
      37.306095803452486,
      60.662556558052444,
      55.066433124915605
    ],
    "group_enabled": false,
    "group_bics": null,
    "num_parameters": 3,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- beta: r = 0.758\n- gamma: r = 0.053\n- phi: r = -0.076",
  "previous_models": [
    "Specification: a = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + \u03b4\na_mod = 1.08 * a * (1 + 0.012 * sin(a + 0.045))\nz = a_mod * (1 + 0.008 * cos(a + 0.065)) * (1 + 0.005 * sin(a + 0.115)) * (1 + 0.004 * cos(a + 0.085)) * (1 + 0.006 * (sin(a + 0.035) * cos(a + 0.055))) * (1 + 0.003 * (sin(a + 0.03) * cos(a + 0.05)))\nw = (phi - 0.5) / phi\nsoftsign(x) = x/(1+abs(x))\nf_adapt(z) = { if z >= 0 then clip( 1.002 * ( z^w * (ln(1+z))^(1-w) * softsign(z) ), -30, 30 ) + I(abs(z)<\u03b5)*0.001*z^2 else phi * (softsign(z + \u0394_shift))^52 + I(abs(z)<\u03b5)*0.001*z^2 }\nT = \u03a3[k=0 to 200] ( a^k * (1/2)^k )\nextra = exp(-a/0.1) * ( z/(1+abs(z)) ) * (1+0.005*sin(1/(1+a))) * (1+0.002*cos(0.5*a)) * (1+0.003*cos(0.3*a))^2 * (1+0.004*cos(0.3*a))^2 * (1+0.0025*cos(0.7*a)) * (1+tanh(0.05*a)) * (1+sigmoid(0.01*a)) * (1+0.002*cos(3*a)) * (1+0.002*(sin(2.5*a)+0.001*cos(3.5*a)+0.0015*sin(3*a))) * (1+sigmoid(0.03*a)) * (1+tanh(0.07*a)) * (1+cos(3.1*a)) * (1+sigmoid(0.04*a)) * (1+tanh(0.08*a)) * (1+cos(3.2*a)) * (1+sigmoid(0.05*a)) * (1+tanh(0.1*a)) * (1+cos(3.4*a)) * (1+sigmoid(0.06*a)) * (1+tanh(0.12*a)) * (1+cos(3.6*a)) * (1+sigmoid(0.08*a)) * (1+tanh(0.2*a)) * (1+cos(4.2*a)) * (1+sin(4.0*a)) * (1+sigmoid(0.12*a)) * (1+tanh(0.3*a)) * (1+sin(4.2*a))\nextra = extra * (1+sigmoid(0.14*a)) * (1+tanh(0.35*a)) * (1+sin(4.6*a)) * (1+0.005*cos(0.9*a))\nextra = extra * exp(-((a-1)^2)/(2*(0.25)^2))\nextra = extra * sp(sp(sp(sp(sp(sp(sp(sp(0.865/(1+a))))))))\nExponent = (0.9478 + 0.00018*ln(1+a)) * (1 + 0.009*tanh(0.5*a) + 0.004*sin(3.5*a) + 0.003*cos(2.7*a) + 0.002*sin(4.0*a) + 0.005*cos(0.9*a)) * (1+0.005*cos(0.9*a))\nf(x) = sign(z) * ((f_adapt(z) * T * extra)^(Exponent))\nU = beta + gamma * f(x)\nP_accept = 1/(1+exp(-U))\nSummary: The model computes a core sum from 11 fixed components and a small constant, then applies a series of multiplicative sinusoidal and cosine modulations to produce an intermediate signal z. An adaptive nonlinearity f_adapt is applied in a piecewise manner, using a power\u2010log blend for nonnegative z (with clipping) and an enhanced exponent (52) for negative z, with an added quadratic correction for small |z|. A dynamic threshold T (a finite power series) and an extra composite term\u2014aggregating multiple oscillatory, sigmoidal, tanh, and Gaussian factors, further modulated by an eight-layer nested softplus chain\u2014are used to modulate the transformed signal. The final transformed signal f(x) is raised to an exponent that depends on a logarithmic and oscillatory adjustment. Latent utility is computed as U = beta + gamma\u00b7f(x) and converted to an acceptance probability via a logistic function. Only three learnable parameters (beta, gamma, phi) with fixed bounds govern the model.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 53.92762783259985\nOverall Accuracy: 0.5726\n\nParameter Recovery:\n- beta: r = 0.758\n- gamma: r = 0.053\n- phi: r = -0.076"
  ]
}