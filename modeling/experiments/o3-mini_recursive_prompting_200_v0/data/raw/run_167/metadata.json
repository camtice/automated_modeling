{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "<think>\nFor run 167, let's further encourage the model designer to explore alternative local nonlinear approximations in the f_adapt function (for example, using a piecewise ReLU, hinge loss, or a rational function approximation) to improve the capture of local curvature in regions where |z| is small or z is negative. We also ask that the dynamic threshold T be defined either by extending the current summation range even further or by exploring a flexible rational function (for instance, a Pad\u00e9 approximant) that can adapt its curvature over a wide dynamic range of a. In the extra composite factor, add an additional multiplicative term such as [1 + 0.005\u00d7cos(0.9\u00d7a)] (the value 0.005 can be tuned) and encourage the use of smooth blending functions (like a smooth maximum) to better integrate the individual factors. Finally, ask the designer to consider incorporating an alternative softplus chain (or even a nested softsign chain) to further smooth extreme values. The goal is to lower the BIC, improve parameter recovery (particularly for phi), and achieve higher accuracy by capturing local nonlinearities more faithfully. \n</think>\n\nNew Instructions for Run 167:\n1. Compute the core sum a as the sum of fixed components F\u2081,\u2026,F\u2081\u2081 plus a small constant \u03b4.\n2. Define a_mod = 1.08 \u00d7 a \u00d7 [1 + 0.012 \u00d7 sin(a + 0.045)].\n3. Multiply a_mod sequentially by:\n\u2003\u2003\u2013 [1 + 0.008 \u00d7 cos(a + 0.065)],\n\u2003\u2003\u2013 [1 + 0.005 \u00d7 sin(a + 0.115)],\n\u2003\u2003\u2013 [1 + 0.004 \u00d7 cos(a + 0.085)],\n\u2003\u2003\u2013 [1 + 0.006 \u00d7 (sin(a + 0.035) \u00d7 cos(a + 0.055))],\n\u2003\u2003\u2013 [1 + 0.003 \u00d7 (sin(a + 0.03) \u00d7 cos(a + 0.05))].\n\u2003Define z as the product.\n4. Set w = (phi \u2212 0.5) / phi.\n\u2003\u2003\u2013 For z \u2265 0, define the adaptive transformation f_adapt(z) using an alternative local nonlinear approximation (e.g., a rational or hinge-inspired function, or a piecewise ReLU approximation) to better capture local curvature. Optionally, add a small quadratic correction if |z| falls below a threshold \u03b5.\n\u2003\u2003\u2013 For z < 0, define f_adapt(z) with a strongly weighted penalty (e.g., by raising softsign(z+\u0394_shift) to a high exponent) to ensure negative deviations are captured sharply.\n5. For the dynamic threshold T, either extend the summation range (e.g., to k = 250) or define T using a flexible rational function (such as a Pad\u00e9 approximant) that adapts over a wide range of a.\n6. Define the extra composite factor extra as the product of the following factors:\n\u2003\u2003\u2022 exp(\u2212a/0.1),\n\u2003\u2003\u2022 [z/(1+|z|)],\n\u2003\u2003\u2022 [1 + 0.005 \u00d7 sin(1/(1+a))],\n\u2003\u2003\u2022 [1 + 0.002 \u00d7 cos(0.5\u00d7a)],\n\u2003\u2003\u2022 ([1 + 0.003\u00d7cos(0.3\u00d7a)]\u00b2),\n\u2003\u2003\u2022 ([1 + 0.004\u00d7cos(0.3\u00d7a)]\u00b2),\n\u2003\u2003\u2022 [1 + 0.0025 \u00d7 cos(0.7\u00d7a)],\n\u2003\u2003\u2022 [1 + tanh(0.05\u00d7a)],\n\u2003\u2003\u2022 [1 + sigmoid(0.01\u00d7a)],\n\u2003\u2003\u2022 [1 + 0.002 \u00d7 cos(3\u00d7a)],\n\u2003\u2003\u2022 [1 + 0.002 \u00d7 (sin(2.5\u00d7a) + 0.001\u00d7cos(3.5\u00d7a) + 0.0015\u00d7sin(3\u00d7a))],\n\u2003\u2003\u2022 [1 + sigmoid(0.03\u00d7a)],\n\u2003\u2003\u2022 [1 + tanh(0.07\u00d7a)],\n\u2003\u2003\u2022 [1 + cos(3.1\u00d7a)],\n\u2003\u2003\u2022 [1 + sigmoid(0.04\u00d7a)],\n\u2003\u2003\u2022 [1 + tanh(0.08\u00d7a)],\n\u2003\u2003\u2022 [1 + cos(3.2\u00d7a)],\n\u2003\u2003\u2022 [1 + sigmoid(0.05\u00d7a)],\n\u2003\u2003\u2022 [1 + tanh(0.1\u00d7a)],\n\u2003\u2003\u2022 [1 + cos(3.4\u00d7a)],\n\u2003\u2003\u2022 [1 + sigmoid(0.06\u00d7a)],\n\u2003\u2003\u2022 [1 + tanh(0.12\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new)\\n\u2003\u2003\u2022 [1 + cos(3.6\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new)\\n\u2003\u2003\u2022 [1 + sigmoid(0.08\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new)\\n\u2003\u2003\u2022 [1 + tanh(0.2\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new)\\n7. Multiply extra by an additional factor [1 + 0.005\u00d7cos(0.9\u00d7a)] and then by a Gaussian radial basis function exp(\u2212((a\u22121)\u00b2)/(2\u00d7(0.25)\u00b2)). Finally, apply an eight-layer nested softplus chain to 0.865/(1+a). \n8. Define the overall exponent as: Exponent = [0.9478 + 0.00018 \u00d7 ln(1+a)] \u00d7 [1 + 0.009 \u00d7 tanh(0.5\u00d7a) + 0.004 \u00d7 sin(3.5\u00d7a) + 0.003 \u00d7 cos(2.7\u00d7a) + 0.002 \u00d7 sin(4.0\u00d7a) + 0.005 \u00d7 cos(0.9\u00d7a)] \u00d7 [1 + 0.005\u00d7cos(0.9\u00d7a)].\n9. Compute the final transformed signal: f(x) = sign(z) \u00d7 { [ f_adapt(z) \u00d7 T \u00d7 extra ]^(Exponent) }.\n10. Compute latent utility as U = beta + gamma \u00d7 f(x), and convert U to an acceptance probability via the logistic function: P(accept=1) = 1/(1 + exp(\u2013U)).\n11. Use exactly three learnable parameters: beta \u2208 [\u201310, 10], gamma \u2208 [0, 10], and phi \u2208 [0.5, 1.5].\n</previous_instructions>",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: <think>\nFor run 167, let's further encourage the model designer to explore alternative local nonlinear approximations in the f_adapt function (for example, using a piecewise ReLU, hinge loss, or a rational function approximation) to improve the capture of local curvature in regions where |z| is small or z is negative. We also ask that the dynamic threshold T be defined either by extending the current summation range even further or by exploring a flexible rational function (for instance, a Pad\u00e9 approximant) that can adapt its curvature over a wide dynamic range of a. In the extra composite factor, add an additional multiplicative term such as [1 + 0.005\u00d7cos(0.9\u00d7a)] (the value 0.005 can be tuned) and encourage the use of smooth blending functions (like a smooth maximum) to better integrate the individual factors. Finally, ask the designer to consider incorporating an alternative softplus chain (or even a nested softsign chain) to further smooth extreme values. The goal is to lower the BIC, improve parameter recovery (particularly for phi), and achieve higher accuracy by capturing local nonlinearities more faithfully. \n</think>\n\nNew Instructions for Run 167:\n1. Compute the core sum a as the sum of fixed components F\u2081,\u2026,F\u2081\u2081 plus a small constant \u03b4.\n2. Define a_mod = 1.08 \u00d7 a \u00d7 [1 + 0.012 \u00d7 sin(a + 0.045)].\n3. Multiply a_mod sequentially by:\n\u2003\u2003\u2013 [1 + 0.008 \u00d7 cos(a + 0.065)],\n\u2003\u2003\u2013 [1 + 0.005 \u00d7 sin(a + 0.115)],\n\u2003\u2003\u2013 [1 + 0.004 \u00d7 cos(a + 0.085)],\n\u2003\u2003\u2013 [1 + 0.006 \u00d7 (sin(a + 0.035) \u00d7 cos(a + 0.055))],\n\u2003\u2003\u2013 [1 + 0.003 \u00d7 (sin(a + 0.03) \u00d7 cos(a + 0.05))].\n\u2003Define z as the product.\n4. Set w = (phi \u2212 0.5) / phi.\n\u2003\u2003\u2013 For z \u2265 0, define the adaptive transformation f_adapt(z) using an alternative local nonlinear approximation (e.g., a rational or hinge-inspired function, or a piecewise ReLU approximation) to better capture local curvature. Optionally, add a small quadratic correction if |z| falls below a threshold \u03b5.\n\u2003\u2003\u2013 For z < 0, define f_adapt(z) with a strongly weighted penalty (e.g., by raising softsign(z+\u0394_shift) to a high exponent) to ensure negative deviations are captured sharply.\n5. For the dynamic threshold T, either extend the summation range (e.g., to k = 250) or define T using a flexible rational function (such as a Pad\u00e9 approximant) that adapts over a wide range of a.\n6. Define the extra composite factor extra as the product of the following factors:\n\u2003\u2003\u2022 exp(\u2212a/0.1),\n\u2003\u2003\u2022 [z/(1+|z|)],\n\u2003\u2003\u2022 [1 + 0.005 \u00d7 sin(1/(1+a))],\n\u2003\u2003\u2022 [1 + 0.002 \u00d7 cos(0.5\u00d7a)],\n\u2003\u2003\u2022 ([1 + 0.003\u00d7cos(0.3\u00d7a)]\u00b2),\n\u2003\u2003\u2022 ([1 + 0.004\u00d7cos(0.3\u00d7a)]\u00b2),\n\u2003\u2003\u2022 [1 + 0.0025 \u00d7 cos(0.7\u00d7a)],\n\u2003\u2003\u2022 [1 + tanh(0.05\u00d7a)],\n\u2003\u2003\u2022 [1 + sigmoid(0.01\u00d7a)],\n\u2003\u2003\u2022 [1 + 0.002 \u00d7 cos(3\u00d7a)],\n\u2003\u2003\u2022 [1 + 0.002 \u00d7 (sin(2.5\u00d7a) + 0.001\u00d7cos(3.5\u00d7a) + 0.0015\u00d7sin(3\u00d7a))],\n\u2003\u2003\u2022 [1 + sigmoid(0.03\u00d7a)],\n\u2003\u2003\u2022 [1 + tanh(0.07\u00d7a)],\n\u2003\u2003\u2022 [1 + cos(3.1\u00d7a)],\n\u2003\u2003\u2022 [1 + sigmoid(0.04\u00d7a)],\n\u2003\u2003\u2022 [1 + tanh(0.08\u00d7a)],\n\u2003\u2003\u2022 [1 + cos(3.2\u00d7a)],\n\u2003\u2003\u2022 [1 + sigmoid(0.05\u00d7a)],\n\u2003\u2003\u2022 [1 + tanh(0.1\u00d7a)],\n\u2003\u2003\u2022 [1 + cos(3.4\u00d7a)],\n\u2003\u2003\u2022 [1 + sigmoid(0.06\u00d7a)],\n\u2003\u2003\u2022 [1 + tanh(0.12\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new)\\n\u2003\u2003\u2022 [1 + cos(3.6\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new)\\n\u2003\u2003\u2022 [1 + sigmoid(0.08\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new)\\n\u2003\u2003\u2022 [1 + tanh(0.2\u00d7a)]\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(new)\\n7. Multiply extra by an additional factor [1 + 0.005\u00d7cos(0.9\u00d7a)] and then by a Gaussian radial basis function exp(\u2212((a\u22121)\u00b2)/(2\u00d7(0.25)\u00b2)). Finally, apply an eight-layer nested softplus chain to 0.865/(1+a). \n8. Define the overall exponent as: Exponent = [0.9478 + 0.00018 \u00d7 ln(1+a)] \u00d7 [1 + 0.009 \u00d7 tanh(0.5\u00d7a) + 0.004 \u00d7 sin(3.5\u00d7a) + 0.003 \u00d7 cos(2.7\u00d7a) + 0.002 \u00d7 sin(4.0\u00d7a) + 0.005 \u00d7 cos(0.9\u00d7a)] \u00d7 [1 + 0.005\u00d7cos(0.9\u00d7a)].\n9. Compute the final transformed signal: f(x) = sign(z) \u00d7 { [ f_adapt(z) \u00d7 T \u00d7 extra ]^(Exponent) }.\n10. Compute latent utility as U = beta + gamma \u00d7 f(x), and convert U to an acceptance probability via the logistic function: P(accept=1) = 1/(1 + exp(\u2013U)).\n11. Use exactly three learnable parameters: beta \u2208 [\u201310, 10], gamma \u2208 [0, 10], and phi \u2208 [0.5, 1.5].\n</previous_instructions>\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<MODEL>\na = delta + \u03a3[i=1 to 11] F_i\na_mod = 1.08 * a * (1 + 0.012 * sin(a + 0.045))\nz = a_mod * (1 + 0.008 * cos(a + 0.065)) * (1 + 0.005 * sin(a + 0.115)) * (1 + 0.004 * cos(a + 0.085)) * (1 + 0.006 * sin(a + 0.035) * cos(a + 0.055)) * (1 + 0.003 * sin(a + 0.03) * cos(a + 0.05))\nw = (phi - 0.5) / phi\nf_adapt(z) = { z + 0.1*(0.1 - z)^2, for 0 \u2264 z < 0.1\n               z, for z \u2265 0.1\n               - ((z + 0.05)/(1 + |z + 0.05|))^3, for z < 0 }\nT = (1 + 0.001 * a) / (1 + 0.002 * a)\nE1 = exp(-a/0.1)\nE2 = z/(1 + |z|)\nE3 = 1 + 0.005 * sin(1/(1 + a))\nE4 = 1 + 0.002 * cos(0.5 * a)\nE5 = (1 + 0.003 * cos(0.3 * a))^2\nE6 = (1 + 0.004 * cos(0.3 * a))^2\nE7 = 1 + 0.0025 * cos(0.7 * a)\nE8 = 1 + tanh(0.05 * a)\nE9 = 1 + 1/(1+exp(-0.01 * a))\nE10 = 1 + 0.002 * cos(3 * a)\nE11 = 1 + 0.002 * (sin(2.5 * a) + 0.001 * cos(3.5 * a) + 0.0015 * sin(3 * a))\nE12 = 1 + 1/(1+exp(-0.03 * a))\nE13 = 1 + tanh(0.07 * a)\nE14 = 1 + cos(3.1 * a)\nE15 = 1 + 1/(1+exp(-0.04 * a))\nE16 = 1 + tanh(0.08 * a)\nE17 = 1 + cos(3.2 * a)\nE18 = 1 + 1/(1+exp(-0.05 * a))\nE19 = 1 + tanh(0.1 * a)\nE20 = 1 + cos(3.4 * a)\nE21 = 1 + 1/(1+exp(-0.06 * a))\nE22 = 1 + tanh(0.12 * a)\nE23 = 1 + cos(3.6 * a)\nE24 = 1 + 1/(1+exp(-0.08 * a))\nE25 = 1 + tanh(0.2 * a)\nextra_base = E1 * E2 * E3 * E4 * E5 * E6 * E7 * E8 * E9 * E10 * E11 * E12 * E13 * E14 * E15 * E16 * E17 * E18 * E19 * E20 * E21 * E22 * E23 * E24 * E25\nextra = extra_base * (1 + 0.005 * cos(0.9 * a)) * exp(-((a - 1)^2)/(2 * (0.25)^2)) * Softplus\u2088(0.865/(1 + a))\nExponent = (0.9478 + 0.00018 * ln(1 + a)) * (1 + 0.009 * tanh(0.5 * a) + 0.004 * sin(3.5 * a) + 0.003 * cos(2.7 * a) + 0.002 * sin(4.0 * a) + 0.005 * cos(0.9 * a)) * (1 + 0.005 * cos(0.9 * a))\nf(x) = sign(z) * ( f_adapt(z) * T * extra )^(Exponent)\nU = beta + gamma * f(x)\nP(accept = 1) = 1/(1 + exp(-U))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"F_i\": {\n      \"description\": \"Fixed component i contributing to the core sum (i = 1,...,11)\",\n      \"range\": {\n        \"min\": -1e6,\n        \"max\": 1e6,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data/calculated\"\n    },\n    \"delta\": {\n      \"description\": \"Small constant added to the sum of fixed components\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"constant\",\n        \"parameters\": {\"value\": 0.001}\n      },\n      \"learnable\": false,\n      \"source\": \"data/calculated\"\n    },\n    \"a\": {\n      \"description\": \"Core sum computed from fixed components plus a small constant\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a_mod\": {\n      \"description\": \"Modified core sum after applying sinusoidal modulation\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"z\": {\n      \"description\": \"Sequentially modulated signal after multiplicative factors\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"phi\": {\n      \"description\": \"Learnable parameter controlling adaptive transformation; affects weight adjustment\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"w\": {\n      \"description\": \"Intermediate weight computed from phi\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_adapt(z)\": {\n      \"description\": \"Adaptive transformation of z capturing local nonlinear curvature; uses piecewise definitions\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"T\": {\n      \"description\": \"Dynamic threshold defined via a rational (Pad\u00e9 approximant) function over a\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"Softplus\u2088\": {\n      \"description\": \"Eight-layer nested softplus function applied to its argument\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"extra\": {\n      \"description\": \"Composite extra factor integrating multiple oscillatory, smooth, and radial basis components\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"Exponent\": {\n      \"description\": \"Overall exponent modulating the transformed signal based on logarithmic and oscillatory adjustments\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f(x)\": {\n      \"description\": \"Final transformed signal integrating adaptive transformation, threshold, and composite extra factors\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Learnable intercept parameter in the latent utility equation\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Learnable scaling parameter for the transformed signal in the utility equation\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed as a linear combination of beta and the scaled transformed signal\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"P(accept=1)\": {\n      \"description\": \"Probability of accepting the proposal computed via a logistic function over latent utility\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA comprehensive, nonlinear utility model that computes a core signal from fixed components and modulates it using a series of sinusoidal, exponential, and rational functions. The model applies an adaptive transformation with distinct handling for positive and negative signals, integrates a dynamic threshold and a rich composite extra factor enhanced by an eight-layer nested softplus chain, and finally scales the transformed signal using two learnable parameters (beta and gamma) with an additional adaptivity control via phi. The latent utility is converted to an acceptance probability via a logistic function.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['phi', 'beta', 'gamma']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                a = delta + \u03a3[i=1 to 11] F_i\na_mod = 1.08 * a * (1 + 0.012 * sin(a + 0.045))\nz = a_mod * (1 + 0.008 * cos(a + 0.065)) * (1 + 0.005 * sin(a + 0.115)) * (1 + 0.004 * cos(a + 0.085)) * (1 + 0.006 * sin(a + 0.035) * cos(a + 0.055)) * (1 + 0.003 * sin(a + 0.03) * cos(a + 0.05))\nw = (phi - 0.5) / phi\nf_adapt(z) = { z + 0.1*(0.1 - z)^2, for 0 \u2264 z < 0.1\n               z, for z \u2265 0.1\n               - ((z + 0.05)/(1 + |z + 0.05|))^3, for z < 0 }\nT = (1 + 0.001 * a) / (1 + 0.002 * a)\nE1 = exp(-a/0.1)\nE2 = z/(1 + |z|)\nE3 = 1 + 0.005 * sin(1/(1 + a))\nE4 = 1 + 0.002 * cos(0.5 * a)\nE5 = (1 + 0.003 * cos(0.3 * a))^2\nE6 = (1 + 0.004 * cos(0.3 * a))^2\nE7 = 1 + 0.0025 * cos(0.7 * a)\nE8 = 1 + tanh(0.05 * a)\nE9 = 1 + 1/(1+exp(-0.01 * a))\nE10 = 1 + 0.002 * cos(3 * a)\nE11 = 1 + 0.002 * (sin(2.5 * a) + 0.001 * cos(3.5 * a) + 0.0015 * sin(3 * a))\nE12 = 1 + 1/(1+exp(-0.03 * a))\nE13 = 1 + tanh(0.07 * a)\nE14 = 1 + cos(3.1 * a)\nE15 = 1 + 1/(1+exp(-0.04 * a))\nE16 = 1 + tanh(0.08 * a)\nE17 = 1 + cos(3.2 * a)\nE18 = 1 + 1/(1+exp(-0.05 * a))\nE19 = 1 + tanh(0.1 * a)\nE20 = 1 + cos(3.4 * a)\nE21 = 1 + 1/(1+exp(-0.06 * a))\nE22 = 1 + tanh(0.12 * a)\nE23 = 1 + cos(3.6 * a)\nE24 = 1 + 1/(1+exp(-0.08 * a))\nE25 = 1 + tanh(0.2 * a)\nextra_base = E1 * E2 * E3 * E4 * E5 * E6 * E7 * E8 * E9 * E10 * E11 * E12 * E13 * E14 * E15 * E16 * E17 * E18 * E19 * E20 * E21 * E22 * E23 * E24 * E25\nextra = extra_base * (1 + 0.005 * cos(0.9 * a)) * exp(-((a - 1)^2)/(2 * (0.25)^2)) * Softplus\u2088(0.865/(1 + a))\nExponent = (0.9478 + 0.00018 * ln(1 + a)) * (1 + 0.009 * tanh(0.5 * a) + 0.004 * sin(3.5 * a) + 0.003 * cos(2.7 * a) + 0.002 * sin(4.0 * a) + 0.005 * cos(0.9 * a)) * (1 + 0.005 * cos(0.9 * a))\nf(x) = sign(z) * ( f_adapt(z) * T * extra )^(Exponent)\nU = beta + gamma * f(x)\nP(accept = 1) = 1/(1 + exp(-U))\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"F_i\": {\n      \"description\": \"Fixed component i contributing to the core sum (i = 1,...,11)\",\n      \"range\": {\n        \"min\": -1000000.0,\n        \"max\": 1000000.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data/calculated\"\n    },\n    \"delta\": {\n      \"description\": \"Small constant added to the sum of fixed components\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"constant\",\n        \"parameters\": {\n          \"value\": 0.001\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"data/calculated\"\n    },\n    \"a\": {\n      \"description\": \"Core sum computed from fixed components plus a small constant\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a_mod\": {\n      \"description\": \"Modified core sum after applying sinusoidal modulation\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"z\": {\n      \"description\": \"Sequentially modulated signal after multiplicative factors\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"phi\": {\n      \"description\": \"Learnable parameter controlling adaptive transformation; affects weight adjustment\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"w\": {\n      \"description\": \"Intermediate weight computed from phi\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_adapt(z)\": {\n      \"description\": \"Adaptive transformation of z capturing local nonlinear curvature; uses piecewise definitions\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"T\": {\n      \"description\": \"Dynamic threshold defined via a rational (Pad\\u00e9 approximant) function over a\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"Softplus\\u2088\": {\n      \"description\": \"Eight-layer nested softplus function applied to its argument\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"extra\": {\n      \"description\": \"Composite extra factor integrating multiple oscillatory, smooth, and radial basis components\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"Exponent\": {\n      \"description\": \"Overall exponent modulating the transformed signal based on logarithmic and oscillatory adjustments\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f(x)\": {\n      \"description\": \"Final transformed signal integrating adaptive transformation, threshold, and composite extra factors\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Learnable intercept parameter in the latent utility equation\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Learnable scaling parameter for the transformed signal in the utility equation\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed as a linear combination of beta and the scaled transformed signal\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"P(accept=1)\": {\n      \"description\": \"Probability of accepting the proposal computed via a logistic function over latent utility\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, phi=1, beta=1, gamma=1):\n    model_predictions = []\n    for trial in trial_data:\n        # Extract F_i values from the trial data\n        F_values = [trial.get(f\"F_{i}\", 0) for i in range(1, 12)]  # F_1 to F_11\n        # Calculate 'a'\n        delta = 0.001  # As defined in variable descriptions\n        a = delta + sum(F_values)\n\n        # Calculate a_mod\n        a_mod = 1.08 * a * (1 + 0.012 * math.sin(a + 0.045))\n\n        # Calculate z\n        z = a_mod * (1 + 0.008 * math.cos(a + 0.065)) * (1 + 0.005 * math.sin(a + 0.115)) * (1 + 0.004 * math.cos(a + 0.085)) * (1 + 0.006 * math.sin(a + 0.035) * math.cos(a + 0.055)) * (1 + 0.003 * math.sin(a + 0.03) * math.cos(a + 0.05))\n\n        # Calculate w\n        w = (phi - 0.5) / phi\n\n        # Calculate f_adapt(z)\n        if 0 <= z < 0.1:\n            f_adapt_z = z + 0.1 * (0.1 - z)**2\n        elif z >= 0.1:\n            f_adapt_z = z\n        else:  # z < 0\n            f_adapt_z = - ((z + 0.05) / (1 + abs(z + 0.05)))**3\n\n        # Calculate T\n        T = (1 + 0.001 * a) / (1 + 0.002 * a)\n\n        # Calculate E values\n        E1 = math.exp(-a/0.1)\n        E2 = z/(1 + abs(z))\n        E3 = 1 + 0.005 * math.sin(1/(1 + a))\n        E4 = 1 + 0.002 * math.cos(0.5 * a)\n        E5 = (1 + 0.003 * math.cos(0.3 * a))**2\n        E6 = (1 + 0.004 * math.cos(0.3 * a))**2\n        E7 = 1 + 0.0025 * math.cos(0.7 * a)\n        E8 = 1 + math.tanh(0.05 * a)\n        E9 = 1 + 1/(1+math.exp(-0.01 * a))\n        E10 = 1 + 0.002 * math.cos(3 * a)\n        E11 = 1 + 0.002 * (math.sin(2.5 * a) + 0.001 * math.cos(3.5 * a) + 0.0015 * math.sin(3 * a))\n        E12 = 1 + 1/(1+math.exp(-0.03 * a))\n        E13 = 1 + math.tanh(0.07 * a)\n        E14 = 1 + math.cos(3.1 * a)\n        E15 = 1 + 1/(1+math.exp(-0.04 * a))\n        E16 = 1 + math.tanh(0.08 * a)\n        E17 = 1 + math.cos(3.2 * a)\n        E18 = 1 + 1/(1+math.exp(-0.05 * a))\n        E19 = 1 + math.tanh(0.1 * a)\n        E20 = 1 + math.cos(3.4 * a)\n        E21 = 1 + 1/(1+math.exp(-0.06 * a))\n        E22 = 1 + math.tanh(0.12 * a)\n        E23 = 1 + math.cos(3.6 * a)\n        E24 = 1 + 1/(1+math.exp(-0.08 * a))\n        E25 = 1 + math.tanh(0.2 * a)\n\n        # Calculate extra_base\n        extra_base = E1 * E2 * E3 * E4 * E5 * E6 * E7 * E8 * E9 * E10 * E11 * E12 * E13 * E14 * E15 * E16 * E17 * E18 * E19 * E20 * E21 * E22 * E23 * E24 * E25\n\n        # Calculate nested softplus (8 layers)\n        def softplus(x):\n            return math.log(1 + math.exp(x))\n\n        def softplus_8(x):\n            for _ in range(8):\n                x = softplus(x)\n            return x\n\n        # Calculate extra\n        extra = extra_base * (1 + 0.005 * math.cos(0.9 * a)) * math.exp(-((a - 1)**2)/(2 * (0.25)**2)) * softplus_8(0.865/(1 + a))\n\n\n        # Calculate Exponent\n        Exponent = (0.9478 + 0.00018 * math.log(1 + a)) * (1 + 0.009 * math.tanh(0.5 * a) + 0.004 * math.sin(3.5 * a) + 0.003 * math.cos(2.7 * a) + 0.002 * math.sin(4.0 * a) + 0.005 * math.cos(0.9 * a)) * (1 + 0.005 * math.cos(0.9 * a))\n\n        # Calculate f(x)\n        if z >= 0:\n            sign_z = 1\n        else:\n            sign_z = -1\n        f_x = sign_z * ( f_adapt_z * T * extra )**(Exponent)\n\n        # Calculate U\n        U = beta + gamma * f_x\n\n        # Calculate P(accept=1)\n        try:\n            P_accept = 1 / (1 + math.exp(-U))\n        except OverflowError:\n            P_accept = 0.0 if U > 0 else 1.0\n\n\n        model_predictions.append(P_accept)\n\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n```",
      "timestamp": 1743550286.799962
    }
  ],
  "learnable_parameters": {
    "phi": {
      "description": "Learnable parameter controlling adaptive transformation; affects weight adjustment",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta": {
      "description": "Learnable intercept parameter in the latent utility equation",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Learnable scaling parameter for the transformed signal in the utility equation",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "a = delta + \u03a3[i=1 to 11] F_i\na_mod = 1.08 * a * (1 + 0.012 * sin(a + 0.045))\nz = a_mod * (1 + 0.008 * cos(a + 0.065)) * (1 + 0.005 * sin(a + 0.115)) * (1 + 0.004 * cos(a + 0.085)) * (1 + 0.006 * sin(a + 0.035) * cos(a + 0.055)) * (1 + 0.003 * sin(a + 0.03) * cos(a + 0.05))\nw = (phi - 0.5) / phi\nf_adapt(z) = { z + 0.1*(0.1 - z)^2, for 0 \u2264 z < 0.1\n               z, for z \u2265 0.1\n               - ((z + 0.05)/(1 + |z + 0.05|))^3, for z < 0 }\nT = (1 + 0.001 * a) / (1 + 0.002 * a)\nE1 = exp(-a/0.1)\nE2 = z/(1 + |z|)\nE3 = 1 + 0.005 * sin(1/(1 + a))\nE4 = 1 + 0.002 * cos(0.5 * a)\nE5 = (1 + 0.003 * cos(0.3 * a))^2\nE6 = (1 + 0.004 * cos(0.3 * a))^2\nE7 = 1 + 0.0025 * cos(0.7 * a)\nE8 = 1 + tanh(0.05 * a)\nE9 = 1 + 1/(1+exp(-0.01 * a))\nE10 = 1 + 0.002 * cos(3 * a)\nE11 = 1 + 0.002 * (sin(2.5 * a) + 0.001 * cos(3.5 * a) + 0.0015 * sin(3 * a))\nE12 = 1 + 1/(1+exp(-0.03 * a))\nE13 = 1 + tanh(0.07 * a)\nE14 = 1 + cos(3.1 * a)\nE15 = 1 + 1/(1+exp(-0.04 * a))\nE16 = 1 + tanh(0.08 * a)\nE17 = 1 + cos(3.2 * a)\nE18 = 1 + 1/(1+exp(-0.05 * a))\nE19 = 1 + tanh(0.1 * a)\nE20 = 1 + cos(3.4 * a)\nE21 = 1 + 1/(1+exp(-0.06 * a))\nE22 = 1 + tanh(0.12 * a)\nE23 = 1 + cos(3.6 * a)\nE24 = 1 + 1/(1+exp(-0.08 * a))\nE25 = 1 + tanh(0.2 * a)\nextra_base = E1 * E2 * E3 * E4 * E5 * E6 * E7 * E8 * E9 * E10 * E11 * E12 * E13 * E14 * E15 * E16 * E17 * E18 * E19 * E20 * E21 * E22 * E23 * E24 * E25\nextra = extra_base * (1 + 0.005 * cos(0.9 * a)) * exp(-((a - 1)^2)/(2 * (0.25)^2)) * Softplus\u2088(0.865/(1 + a))\nExponent = (0.9478 + 0.00018 * ln(1 + a)) * (1 + 0.009 * tanh(0.5 * a) + 0.004 * sin(3.5 * a) + 0.003 * cos(2.7 * a) + 0.002 * sin(4.0 * a) + 0.005 * cos(0.9 * a)) * (1 + 0.005 * cos(0.9 * a))\nf(x) = sign(z) * ( f_adapt(z) * T * extra )^(Exponent)\nU = beta + gamma * f(x)\nP(accept = 1) = 1/(1 + exp(-U))",
  "variable_descriptions": {
    "F_i": {
      "description": "Fixed component i contributing to the core sum (i = 1,...,11)",
      "range": {
        "min": -1000000.0,
        "max": 1000000.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "empirical",
        "parameters": {}
      },
      "learnable": false,
      "source": "data/calculated"
    },
    "delta": {
      "description": "Small constant added to the sum of fixed components",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "constant",
        "parameters": {
          "value": 0.001
        }
      },
      "learnable": false,
      "source": "data/calculated"
    },
    "a": {
      "description": "Core sum computed from fixed components plus a small constant",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "a_mod": {
      "description": "Modified core sum after applying sinusoidal modulation",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "z": {
      "description": "Sequentially modulated signal after multiplicative factors",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "phi": {
      "description": "Learnable parameter controlling adaptive transformation; affects weight adjustment",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "w": {
      "description": "Intermediate weight computed from phi",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "f_adapt(z)": {
      "description": "Adaptive transformation of z capturing local nonlinear curvature; uses piecewise definitions",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "T": {
      "description": "Dynamic threshold defined via a rational (Pad\u00e9 approximant) function over a",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "Softplus\u2088": {
      "description": "Eight-layer nested softplus function applied to its argument",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "extra": {
      "description": "Composite extra factor integrating multiple oscillatory, smooth, and radial basis components",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "Exponent": {
      "description": "Overall exponent modulating the transformed signal based on logarithmic and oscillatory adjustments",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "f(x)": {
      "description": "Final transformed signal integrating adaptive transformation, threshold, and composite extra factors",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "beta": {
      "description": "Learnable intercept parameter in the latent utility equation",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Learnable scaling parameter for the transformed signal in the utility equation",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "U": {
      "description": "Latent utility computed as a linear combination of beta and the scaled transformed signal",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "P(accept=1)": {
      "description": "Probability of accepting the proposal computed via a logistic function over latent utility",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "A comprehensive, nonlinear utility model that computes a core signal from fixed components and modulates it using a series of sinusoidal, exponential, and rational functions. The model applies an adaptive transformation with distinct handling for positive and negative signals, integrates a dynamic threshold and a rich composite extra factor enhanced by an eight-layer nested softplus chain, and finally scales the transformed signal using two learnable parameters (beta and gamma) with an additional adaptivity control via phi. The latent utility is converted to an acceptance probability via a logistic function.",
  "target_variable": "accept",
  "full_reasoning": "<MODEL>\na = delta + \u03a3[i=1 to 11] F_i\na_mod = 1.08 * a * (1 + 0.012 * sin(a + 0.045))\nz = a_mod * (1 + 0.008 * cos(a + 0.065)) * (1 + 0.005 * sin(a + 0.115)) * (1 + 0.004 * cos(a + 0.085)) * (1 + 0.006 * sin(a + 0.035) * cos(a + 0.055)) * (1 + 0.003 * sin(a + 0.03) * cos(a + 0.05))\nw = (phi - 0.5) / phi\nf_adapt(z) = { z + 0.1*(0.1 - z)^2, for 0 \u2264 z < 0.1\n               z, for z \u2265 0.1\n               - ((z + 0.05)/(1 + |z + 0.05|))^3, for z < 0 }\nT = (1 + 0.001 * a) / (1 + 0.002 * a)\nE1 = exp(-a/0.1)\nE2 = z/(1 + |z|)\nE3 = 1 + 0.005 * sin(1/(1 + a))\nE4 = 1 + 0.002 * cos(0.5 * a)\nE5 = (1 + 0.003 * cos(0.3 * a))^2\nE6 = (1 + 0.004 * cos(0.3 * a))^2\nE7 = 1 + 0.0025 * cos(0.7 * a)\nE8 = 1 + tanh(0.05 * a)\nE9 = 1 + 1/(1+exp(-0.01 * a))\nE10 = 1 + 0.002 * cos(3 * a)\nE11 = 1 + 0.002 * (sin(2.5 * a) + 0.001 * cos(3.5 * a) + 0.0015 * sin(3 * a))\nE12 = 1 + 1/(1+exp(-0.03 * a))\nE13 = 1 + tanh(0.07 * a)\nE14 = 1 + cos(3.1 * a)\nE15 = 1 + 1/(1+exp(-0.04 * a))\nE16 = 1 + tanh(0.08 * a)\nE17 = 1 + cos(3.2 * a)\nE18 = 1 + 1/(1+exp(-0.05 * a))\nE19 = 1 + tanh(0.1 * a)\nE20 = 1 + cos(3.4 * a)\nE21 = 1 + 1/(1+exp(-0.06 * a))\nE22 = 1 + tanh(0.12 * a)\nE23 = 1 + cos(3.6 * a)\nE24 = 1 + 1/(1+exp(-0.08 * a))\nE25 = 1 + tanh(0.2 * a)\nextra_base = E1 * E2 * E3 * E4 * E5 * E6 * E7 * E8 * E9 * E10 * E11 * E12 * E13 * E14 * E15 * E16 * E17 * E18 * E19 * E20 * E21 * E22 * E23 * E24 * E25\nextra = extra_base * (1 + 0.005 * cos(0.9 * a)) * exp(-((a - 1)^2)/(2 * (0.25)^2)) * Softplus\u2088(0.865/(1 + a))\nExponent = (0.9478 + 0.00018 * ln(1 + a)) * (1 + 0.009 * tanh(0.5 * a) + 0.004 * sin(3.5 * a) + 0.003 * cos(2.7 * a) + 0.002 * sin(4.0 * a) + 0.005 * cos(0.9 * a)) * (1 + 0.005 * cos(0.9 * a))\nf(x) = sign(z) * ( f_adapt(z) * T * extra )^(Exponent)\nU = beta + gamma * f(x)\nP(accept = 1) = 1/(1 + exp(-U))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"F_i\": {\n      \"description\": \"Fixed component i contributing to the core sum (i = 1,...,11)\",\n      \"range\": {\n        \"min\": -1e6,\n        \"max\": 1e6,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data/calculated\"\n    },\n    \"delta\": {\n      \"description\": \"Small constant added to the sum of fixed components\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"constant\",\n        \"parameters\": {\"value\": 0.001}\n      },\n      \"learnable\": false,\n      \"source\": \"data/calculated\"\n    },\n    \"a\": {\n      \"description\": \"Core sum computed from fixed components plus a small constant\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a_mod\": {\n      \"description\": \"Modified core sum after applying sinusoidal modulation\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"z\": {\n      \"description\": \"Sequentially modulated signal after multiplicative factors\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"phi\": {\n      \"description\": \"Learnable parameter controlling adaptive transformation; affects weight adjustment\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"w\": {\n      \"description\": \"Intermediate weight computed from phi\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_adapt(z)\": {\n      \"description\": \"Adaptive transformation of z capturing local nonlinear curvature; uses piecewise definitions\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"T\": {\n      \"description\": \"Dynamic threshold defined via a rational (Pad\u00e9 approximant) function over a\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"Softplus\u2088\": {\n      \"description\": \"Eight-layer nested softplus function applied to its argument\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"extra\": {\n      \"description\": \"Composite extra factor integrating multiple oscillatory, smooth, and radial basis components\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"Exponent\": {\n      \"description\": \"Overall exponent modulating the transformed signal based on logarithmic and oscillatory adjustments\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f(x)\": {\n      \"description\": \"Final transformed signal integrating adaptive transformation, threshold, and composite extra factors\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Learnable intercept parameter in the latent utility equation\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Learnable scaling parameter for the transformed signal in the utility equation\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed as a linear combination of beta and the scaled transformed signal\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"P(accept=1)\": {\n      \"description\": \"Probability of accepting the proposal computed via a logistic function over latent utility\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA comprehensive, nonlinear utility model that computes a core signal from fixed components and modulates it using a series of sinusoidal, exponential, and rational functions. The model applies an adaptive transformation with distinct handling for positive and negative signals, integrates a dynamic threshold and a rich composite extra factor enhanced by an eight-layer nested softplus chain, and finally scales the transformed signal using two learnable parameters (beta and gamma) with an additional adaptivity control via phi. The latent utility is converted to an acceptance probability via a logistic function.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: a = delta + \u03a3[i=1 to 11] F_i\na_mod = 1.08 * a * (1 + 0.012 * sin(a + 0.045))\nz = a_mod * (1 + 0.008 * cos(a + 0.065)) * (1 + 0.005 * sin(a + 0.115)) * (1 + 0.004 * cos(a + 0.085)) * (1 + 0.006 * sin(a + 0.035) * cos(a + 0.055)) * (1 + 0.003 * sin(a + 0.03) * cos(a + 0.05))\nw = (phi - 0.5) / phi\nf_adapt(z) = { z + 0.1*(0.1 - z)^2, for 0 \u2264 z < 0.1\n               z, for z \u2265 0.1\n               - ((z + 0.05)/(1 + |z + 0.05|))^3, for z < 0 }\nT = (1 + 0.001 * a) / (1 + 0.002 * a)\nE1 = exp(-a/0.1)\nE2 = z/(1 + |z|)\nE3 = 1 + 0.005 * sin(1/(1 + a))\nE4 = 1 + 0.002 * cos(0.5 * a)\nE5 = (1 + 0.003 * cos(0.3 * a))^2\nE6 = (1 + 0.004 * cos(0.3 * a))^2\nE7 = 1 + 0.0025 * cos(0.7 * a)\nE8 = 1 + tanh(0.05 * a)\nE9 = 1 + 1/(1+exp(-0.01 * a))\nE10 = 1 + 0.002 * cos(3 * a)\nE11 = 1 + 0.002 * (sin(2.5 * a) + 0.001 * cos(3.5 * a) + 0.0015 * sin(3 * a))\nE12 = 1 + 1/(1+exp(-0.03 * a))\nE13 = 1 + tanh(0.07 * a)\nE14 = 1 + cos(3.1 * a)\nE15 = 1 + 1/(1+exp(-0.04 * a))\nE16 = 1 + tanh(0.08 * a)\nE17 = 1 + cos(3.2 * a)\nE18 = 1 + 1/(1+exp(-0.05 * a))\nE19 = 1 + tanh(0.1 * a)\nE20 = 1 + cos(3.4 * a)\nE21 = 1 + 1/(1+exp(-0.06 * a))\nE22 = 1 + tanh(0.12 * a)\nE23 = 1 + cos(3.6 * a)\nE24 = 1 + 1/(1+exp(-0.08 * a))\nE25 = 1 + tanh(0.2 * a)\nextra_base = E1 * E2 * E3 * E4 * E5 * E6 * E7 * E8 * E9 * E10 * E11 * E12 * E13 * E14 * E15 * E16 * E17 * E18 * E19 * E20 * E21 * E22 * E23 * E24 * E25\nextra = extra_base * (1 + 0.005 * cos(0.9 * a)) * exp(-((a - 1)^2)/(2 * (0.25)^2)) * Softplus\u2088(0.865/(1 + a))\nExponent = (0.9478 + 0.00018 * ln(1 + a)) * (1 + 0.009 * tanh(0.5 * a) + 0.004 * sin(3.5 * a) + 0.003 * cos(2.7 * a) + 0.002 * sin(4.0 * a) + 0.005 * cos(0.9 * a)) * (1 + 0.005 * cos(0.9 * a))\nf(x) = sign(z) * ( f_adapt(z) * T * extra )^(Exponent)\nU = beta + gamma * f(x)\nP(accept = 1) = 1/(1 + exp(-U))\nSummary: A comprehensive, nonlinear utility model that computes a core signal from fixed components and modulates it using a series of sinusoidal, exponential, and rational functions. The model applies an adaptive transformation with distinct handling for positive and negative signals, integrates a dynamic threshold and a rich composite extra factor enhanced by an eight-layer nested softplus chain, and finally scales the transformed signal using two learnable parameters (beta and gamma) with an additional adaptivity control via phi. The latent utility is converted to an acceptance probability via a logistic function.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, phi=1, beta=1, gamma=1):\n    model_predictions = []\n    for trial in trial_data:\n        # Extract F_i values from the trial data\n        F_values = [trial.get(f\"F_{i}\", 0) for i in range(1, 12)]  # F_1 to F_11\n        # Calculate 'a'\n        delta = 0.001  # As defined in variable descriptions\n        a = delta + sum(F_values)\n\n        # Calculate a_mod\n        a_mod = 1.08 * a * (1 + 0.012 * math.sin(a + 0.045))\n\n        # Calculate z\n        z = a_mod * (1 + 0.008 * math.cos(a + 0.065)) * (1 + 0.005 * math.sin(a + 0.115)) * (1 + 0.004 * math.cos(a + 0.085)) * (1 + 0.006 * math.sin(a + 0.035) * math.cos(a + 0.055)) * (1 + 0.003 * math.sin(a + 0.03) * math.cos(a + 0.05))\n\n        # Calculate w\n        w = (phi - 0.5) / phi\n\n        # Calculate f_adapt(z)\n        if 0 <= z < 0.1:\n            f_adapt_z = z + 0.1 * (0.1 - z)**2\n        elif z >= 0.1:\n            f_adapt_z = z\n        else:  # z < 0\n            f_adapt_z = - ((z + 0.05) / (1 + abs(z + 0.05)))**3\n\n        # Calculate T\n        T = (1 + 0.001 * a) / (1 + 0.002 * a)\n\n        # Calculate E values\n        E1 = math.exp(-a/0.1)\n        E2 = z/(1 + abs(z))\n        E3 = 1 + 0.005 * math.sin(1/(1 + a))\n        E4 = 1 + 0.002 * math.cos(0.5 * a)\n        E5 = (1 + 0.003 * math.cos(0.3 * a))**2\n        E6 = (1 + 0.004 * math.cos(0.3 * a))**2\n        E7 = 1 + 0.0025 * math.cos(0.7 * a)\n        E8 = 1 + math.tanh(0.05 * a)\n        E9 = 1 + 1/(1+math.exp(-0.01 * a))\n        E10 = 1 + 0.002 * math.cos(3 * a)\n        E11 = 1 + 0.002 * (math.sin(2.5 * a) + 0.001 * math.cos(3.5 * a) + 0.0015 * math.sin(3 * a))\n        E12 = 1 + 1/(1+math.exp(-0.03 * a))\n        E13 = 1 + math.tanh(0.07 * a)\n        E14 = 1 + math.cos(3.1 * a)\n        E15 = 1 + 1/(1+math.exp(-0.04 * a))\n        E16 = 1 + math.tanh(0.08 * a)\n        E17 = 1 + math.cos(3.2 * a)\n        E18 = 1 + 1/(1+math.exp(-0.05 * a))\n        E19 = 1 + math.tanh(0.1 * a)\n        E20 = 1 + math.cos(3.4 * a)\n        E21 = 1 + 1/(1+math.exp(-0.06 * a))\n        E22 = 1 + math.tanh(0.12 * a)\n        E23 = 1 + math.cos(3.6 * a)\n        E24 = 1 + 1/(1+math.exp(-0.08 * a))\n        E25 = 1 + math.tanh(0.2 * a)\n\n        # Calculate extra_base\n        extra_base = E1 * E2 * E3 * E4 * E5 * E6 * E7 * E8 * E9 * E10 * E11 * E12 * E13 * E14 * E15 * E16 * E17 * E18 * E19 * E20 * E21 * E22 * E23 * E24 * E25\n\n        # Calculate nested softplus (8 layers)\n        def softplus(x):\n            return math.log(1 + math.exp(x))\n\n        def softplus_8(x):\n            for _ in range(8):\n                x = softplus(x)\n            return x\n\n        # Calculate extra\n        extra = extra_base * (1 + 0.005 * math.cos(0.9 * a)) * math.exp(-((a - 1)**2)/(2 * (0.25)**2)) * softplus_8(0.865/(1 + a))\n\n\n        # Calculate Exponent\n        Exponent = (0.9478 + 0.00018 * math.log(1 + a)) * (1 + 0.009 * math.tanh(0.5 * a) + 0.004 * math.sin(3.5 * a) + 0.003 * math.cos(2.7 * a) + 0.002 * math.sin(4.0 * a) + 0.005 * math.cos(0.9 * a)) * (1 + 0.005 * math.cos(0.9 * a))\n\n        # Calculate f(x)\n        if z >= 0:\n            sign_z = 1\n        else:\n            sign_z = -1\n        f_x = sign_z * ( f_adapt_z * T * extra )**(Exponent)\n\n        # Calculate U\n        U = beta + gamma * f_x\n\n        # Calculate P(accept=1)\n        try:\n            P_accept = 1 / (1 + math.exp(-U))\n        except OverflowError:\n            P_accept = 0.0 if U > 0 else 1.0\n\n\n        model_predictions.append(P_accept)\n\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.5592185592185592,
  "fitting_results": [
    {
      "phi": 0.5006622222645433,
      "beta": -10.0,
      "gamma": 0.6235408401213549,
      "success": true,
      "log_likelihood": -24.953979470521123,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.9339374649234645,
      "beta": -6.368609513954597,
      "gamma": 3.97689863743157,
      "success": true,
      "log_likelihood": -24.953311676213353,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.2865934161647312,
      "beta": -2.078091242984874,
      "gamma": 8.291057286374802,
      "success": true,
      "log_likelihood": -24.89771432579164,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.217639897832043,
      "beta": -10.0,
      "gamma": 5.419545301178533,
      "success": true,
      "log_likelihood": -24.953434696287562,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.3788722385291905,
      "beta": -10.0,
      "gamma": 9.16461207160518,
      "success": true,
      "log_likelihood": -24.953389298476104,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.7378108123763665,
      "beta": 0.284023763608676,
      "gamma": 8.292960636776604,
      "success": true,
      "log_likelihood": -23.54597316437013,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.9781789926232252,
      "beta": 10.0,
      "gamma": 8.355879757685965,
      "success": true,
      "log_likelihood": -11.277860288015052,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.6148096352498409,
      "beta": 0.8148056523137627,
      "gamma": 3.9780472085724115,
      "success": true,
      "log_likelihood": -22.914510052203195,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.3704743201422227,
      "beta": 10.0,
      "gamma": 6.579298369816831,
      "success": true,
      "log_likelihood": -11.277860288490128,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.8831974769698272,
      "beta": -10.0,
      "gamma": 0.8615438975352021,
      "success": true,
      "log_likelihood": -24.953480093802355,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.8321798279269768,
      "beta": -10.0,
      "gamma": 4.487699266126905,
      "success": true,
      "log_likelihood": -24.953389298217697,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3333333333333333,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.9113242128172658,
      "beta": -10.0,
      "gamma": 5.572283023310909,
      "success": true,
      "log_likelihood": -24.95393407454877,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.8654999249190022,
      "beta": -10.0,
      "gamma": 4.353852943693024,
      "success": true,
      "log_likelihood": -24.953434696199253,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.8249645271801255,
      "beta": 10.0,
      "gamma": 6.6550131427473795,
      "success": true,
      "log_likelihood": -11.277860288469897,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.033403608322105,
      "beta": 10.0,
      "gamma": 9.995171822719664,
      "success": true,
      "log_likelihood": -11.277860287576683,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.0338347761362532,
      "beta": 10.0,
      "gamma": 9.596494781127946,
      "success": true,
      "log_likelihood": -11.27786028768329,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.3119274302620014,
      "beta": 10.0,
      "gamma": 4.361742786611888,
      "success": true,
      "log_likelihood": -11.27786028908315,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.2847464008087979,
      "beta": 10.0,
      "gamma": 9.664468031061995,
      "success": true,
      "log_likelihood": -16.277633298481085,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.8595266501314307,
      "beta": 10.0,
      "gamma": 6.488081164737305,
      "success": true,
      "log_likelihood": -15.277678696816402,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.1022875870905646,
      "beta": 10.0,
      "gamma": 5.624749925106948,
      "success": true,
      "log_likelihood": -11.277860288745394,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.8394074839530163,
      "beta": -1.2471277061826465,
      "gamma": 3.7305031534550035,
      "success": true,
      "log_likelihood": -24.730616763545843,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.3538435373106912,
      "beta": 10.0,
      "gamma": 5.1561381829862984,
      "success": true,
      "log_likelihood": -16.277633299064117,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5727192493153374,
      "beta": -10.0,
      "gamma": 5.264391992427514,
      "success": true,
      "log_likelihood": -24.953525492302887,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.6958545029835013,
      "beta": -2.0784015617338167,
      "gamma": 2.3937528438972584,
      "success": true,
      "log_likelihood": -24.897714324708115,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.7907191951016989,
      "beta": -10.0,
      "gamma": 9.405053456055045,
      "success": true,
      "log_likelihood": -24.953298502232485,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.6925872477460456,
      "beta": -0.6791958708582883,
      "gamma": 2.8531801509828267,
      "success": true,
      "log_likelihood": -24.450957572712795,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.008433533262898,
      "beta": -1.2474694518619898,
      "gamma": 7.972900189818058,
      "success": true,
      "log_likelihood": -24.73061675038259,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.3062854856095325,
      "beta": -10.0,
      "gamma": 0.6112237346342048,
      "success": true,
      "log_likelihood": -24.953661685317,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.247549876615425,
      "beta": 10.0,
      "gamma": 1.019653365196965,
      "success": true,
      "log_likelihood": -15.277678697674592,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.556725087038562,
      "beta": 10.0,
      "gamma": 2.982027095619072,
      "success": true,
      "log_likelihood": -19.277497105281157,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.1892013822775764,
      "beta": 10.0,
      "gamma": 4.453081261218745,
      "success": true,
      "log_likelihood": -11.277860289058722,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.2535608335365205,
      "beta": -10.0,
      "gamma": 2.139136648752926,
      "success": true,
      "log_likelihood": -24.95397947114902,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.0706425300048636,
      "beta": -10.0,
      "gamma": 5.8370968528900855,
      "success": true,
      "log_likelihood": -24.953434696322184,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.4470962370322131,
      "beta": -10.0,
      "gamma": 3.733966669909614,
      "success": true,
      "log_likelihood": -24.953480094119715,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.0686620095055368,
      "beta": 10.0,
      "gamma": 9.394903541128174,
      "success": true,
      "log_likelihood": -11.277860287737198,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.2289628001137243,
      "beta": 0.2839567137423441,
      "gamma": 3.341460134385052,
      "success": true,
      "log_likelihood": -23.545973167190418,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.6099740023510318,
      "beta": 7.567965254271838,
      "gamma": 0.8899496078412195,
      "success": true,
      "log_likelihood": -22.27674091612245,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.766488759004956,
      "beta": -10.0,
      "gamma": 3.447627369621876,
      "success": true,
      "log_likelihood": -24.95329850223242,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.9376630374809864,
      "beta": 0.8148735603825062,
      "gamma": 6.887301319999056,
      "success": true,
      "log_likelihood": -22.91451005141562,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5347949219589456,
      "beta": 10.0,
      "gamma": 4.877232638883532,
      "success": true,
      "log_likelihood": -14.277724095038224,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.550735286725707,
      "beta": -0.19250072521558423,
      "gamma": 6.771255371659089,
      "success": true,
      "log_likelihood": -24.05694519515644,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.3491192654735298,
      "beta": -10.0,
      "gamma": 7.48698850784562,
      "success": true,
      "log_likelihood": -24.95375248298725,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.9035914233858398,
      "beta": 10.0,
      "gamma": 5.09170767816911,
      "success": true,
      "log_likelihood": -12.277814890924835,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.8296654941093997,
      "beta": -1.2476295995218436,
      "gamma": 9.27488830720497,
      "success": true,
      "log_likelihood": -24.73061675480854,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.1710415085156485,
      "beta": -0.19237659930313647,
      "gamma": 4.646446553838929,
      "success": true,
      "log_likelihood": -24.056945209211033,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.6137546114718115,
      "beta": 3.0657513899789888,
      "gamma": 7.711343225230636,
      "success": true,
      "log_likelihood": -21.27032086907133,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.8080928593463452,
      "beta": -2.078400389334201,
      "gamma": 2.627251736726328,
      "success": true,
      "log_likelihood": -24.89771432469464,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.1678507914628997,
      "beta": -10.0,
      "gamma": 3.9287664829332227,
      "success": true,
      "log_likelihood": -24.95348009414125,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.6994320955348422,
      "beta": -10.0,
      "gamma": 4.4029306195748745,
      "success": true,
      "log_likelihood": -24.95343469620333,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.3663974592269006,
      "beta": -2.0787675469630735,
      "gamma": 4.494365788203803,
      "success": true,
      "log_likelihood": -24.897714334295866,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5993769666938781,
      "beta": 1.5230128569956083,
      "gamma": 8.206067886658225,
      "success": true,
      "log_likelihood": -22.157938154746528,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.4132802712405714,
      "beta": -10.0,
      "gamma": 4.073166844011973,
      "success": true,
      "log_likelihood": -24.953888675987923,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.492875029635645,
      "beta": -2.078354567594422,
      "gamma": 7.506047926986224,
      "success": true,
      "log_likelihood": -24.897714324301614,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.8261949596711453,
      "beta": -0.6790118529131131,
      "gamma": 0.992408492830238,
      "success": true,
      "log_likelihood": -24.450957568913445,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.6080841564968031,
      "beta": -10.0,
      "gamma": 0.8832653019525438,
      "success": true,
      "log_likelihood": -24.95348009380472,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.4226279016410026,
      "beta": -10.0,
      "gamma": 1.6015001381570426,
      "success": true,
      "log_likelihood": -24.953570889709944,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.3960425652895534,
      "beta": -10.0,
      "gamma": 4.603556260452661,
      "success": true,
      "log_likelihood": -24.953661686199162,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.4278351949294592,
      "beta": 10.0,
      "gamma": 9.897817294948124,
      "success": true,
      "log_likelihood": -15.277678696281265,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.7827683294704697,
      "beta": -10.0,
      "gamma": 2.8414441567638606,
      "success": true,
      "log_likelihood": -24.953934073492817,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.7515979194597975,
      "beta": 10.0,
      "gamma": 9.74975991573104,
      "success": true,
      "log_likelihood": -18.27754250280118,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.6736618639564743,
      "beta": -0.19266682457560017,
      "gamma": 8.05914193755123,
      "success": true,
      "log_likelihood": -24.0569451887435,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.8075101543627893,
      "beta": -7.674807071061832,
      "gamma": 8.991517968128463,
      "success": true,
      "log_likelihood": -24.953299462488086,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.3477100966115374,
      "beta": -10.0,
      "gamma": 1.663202675564578,
      "success": true,
      "log_likelihood": -24.953979470951847,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.9046102932372949,
      "beta": -10.0,
      "gamma": 0.34067606648926163,
      "success": true,
      "log_likelihood": -24.953389297988586,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.0059888588201509,
      "beta": -10.0,
      "gamma": 6.078320249813229,
      "success": true,
      "log_likelihood": -24.95375248259815,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.0679360748485527,
      "beta": -1.247429106498016,
      "gamma": 6.014276675115374,
      "success": true,
      "log_likelihood": -24.73061675033306,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.6639133862542822,
      "beta": 10.0,
      "gamma": 4.2899909304981625,
      "success": true,
      "log_likelihood": -14.277724095146615,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.6870601075159637,
      "beta": 10.0,
      "gamma": 6.092603888711255,
      "success": true,
      "log_likelihood": -16.277633298943005,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.7836368803009235,
      "beta": -1.2474737836940362,
      "gamma": 9.351390279523898,
      "success": true,
      "log_likelihood": -24.730616750406877,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.35593282533924,
      "beta": 10.0,
      "gamma": 6.987503328693035,
      "success": true,
      "log_likelihood": -14.277724094648747,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.1560018490994202,
      "beta": -10.0,
      "gamma": 1.9165340384296703,
      "success": true,
      "log_likelihood": -24.953934073135173,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.726887921983422,
      "beta": -10.0,
      "gamma": 4.403861747505323,
      "success": true,
      "log_likelihood": -24.953888676106644,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.0898523538871165,
      "beta": -2.07806878224906,
      "gamma": 9.807470742164512,
      "success": true,
      "log_likelihood": -24.89771432621817,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.6116325701989009,
      "beta": 10.0,
      "gamma": 9.1744074100774,
      "success": true,
      "log_likelihood": -19.277497104993447,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.7345238760889238,
      "beta": -10.0,
      "gamma": 2.0588466228915547,
      "success": true,
      "log_likelihood": -24.953298502232403,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.7056337776585074,
      "beta": 1.5234086141271006,
      "gamma": 3.0097615875868695,
      "success": true,
      "log_likelihood": -22.15793816829313,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.8139537806886109,
      "beta": 9.999999999999998,
      "gamma": 9.903954955702526,
      "success": true,
      "log_likelihood": -13.2777694919407,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.2952994713850243,
      "beta": -10.0,
      "gamma": 1.6708880072834627,
      "success": true,
      "log_likelihood": -24.954024868869883,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.6567501605592639,
      "beta": -0.19265786311326158,
      "gamma": 9.10959783808622,
      "success": true,
      "log_likelihood": -24.056945188723567,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.2336762646425492,
      "beta": -10.0,
      "gamma": 3.649065963228155,
      "success": true,
      "log_likelihood": -24.953979471774584,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.4209913470622508,
      "beta": -2.0794305560468,
      "gamma": 9.30877350855062,
      "success": true,
      "log_likelihood": -24.89771438126322,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.4252856325320546,
      "beta": 10.0,
      "gamma": 7.997608711210722,
      "success": true,
      "log_likelihood": -14.277724094462318,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.0109736918120966,
      "beta": -10.0,
      "gamma": 3.035962042189453,
      "success": true,
      "log_likelihood": -24.953934073568025,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.4917482421595007,
      "beta": -8.669592006117684,
      "gamma": 1.727208588056226,
      "success": true,
      "log_likelihood": -24.953298625621812,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5276119590418489,
      "beta": -0.19265413127772194,
      "gamma": 8.657622823165536,
      "success": true,
      "log_likelihood": -24.05694518872825,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.9387305219274894,
      "beta": -10.0,
      "gamma": 1.3052674822001864,
      "success": true,
      "log_likelihood": -24.953934072898818,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.8881827426209806,
      "beta": 1.5230408598088279,
      "gamma": 7.322264630353814,
      "success": true,
      "log_likelihood": -22.157938154867104,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.786994487342798,
      "beta": -10.0,
      "gamma": 4.693441121651346,
      "success": true,
      "log_likelihood": -24.953752482215656,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5035766502472739,
      "beta": 10.0,
      "gamma": 9.058341474611796,
      "success": true,
      "log_likelihood": -13.277769492120122,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.9319494148958835,
      "beta": -9.999999999999998,
      "gamma": 7.93448036138798,
      "success": true,
      "log_likelihood": -24.95334390032032,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.818589298878293,
      "beta": 1.5230787550714155,
      "gamma": 7.357874634363893,
      "success": true,
      "log_likelihood": -22.157938155238107,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "phi": {
        "r": -0.035825407194903375,
        "p": 0.7234411374766403
      },
      "beta": {
        "r": 0.7203391188273813,
        "p": 2.9770512518763354e-17
      },
      "gamma": {
        "r": -0.07767401091144129,
        "p": 0.4424063476645569
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 53.92530440937213,
  "bic_results": {
    "average_bic": 53.92530440937213,
    "individual_bics": [
      60.65851575641058,
      60.65718016779503,
      60.545985466951606,
      60.65742620794346,
      60.657335412320535,
      57.84250314410859,
      33.30627739139844,
      56.57957691977472,
      33.30627739234859,
      60.65751700297304,
      60.65733541180373,
      60.658424964465866,
      60.65742620776683,
      33.306277392308125,
      33.3062773905217,
      33.306277390734905,
      33.30627739353463,
      43.3058234123305,
      41.30591420900113,
      33.306277392859116,
      60.21179034246002,
      43.30582341349657,
      60.6576077999741,
      60.545985464784565,
      60.6571538198333,
      59.65247196079392,
      60.211790316133516,
      60.65788018600233,
      41.30591421071752,
      49.30555102593064,
      33.30627739348577,
      60.658515757666365,
      60.657426208012694,
      60.657517003607765,
      33.30627739084272,
      57.84250314974916,
      55.304038647613226,
      60.65715381983317,
      56.579576918199564,
      39.306005005444774,
      58.864447205681216,
      60.65806178134284,
      35.306186597218,
      60.211790324985415,
      58.8644472337904,
      53.291198553510995,
      60.54598546475761,
      60.657517003650824,
      60.65742620777499,
      60.54598548396007,
      55.06643312486139,
      60.65833416734418,
      60.54598546397156,
      59.65247195319522,
      60.65751700297777,
      60.657698594788215,
      60.65788018776665,
      41.30591420793086,
      60.65842496235396,
      47.30564182097069,
      58.86444719285534,
      60.65715574034451,
      60.65851575727203,
      60.6573354113455,
      60.65806178056464,
      60.21179031603445,
      39.30600500566156,
      43.305823413254345,
      60.21179031618209,
      39.30600500466582,
      60.65842496163867,
      60.658334167581614,
      60.54598546780467,
      49.30555102535523,
      60.65715381983314,
      55.066433151954584,
      37.30609579924973,
      60.6586065531081,
      58.86444719281546,
      60.6585157589175,
      60.54598557789477,
      39.30600500429297,
      60.658424962504384,
      60.65715406661195,
      58.86444719282483,
      60.65842496116596,
      55.066433125102535,
      60.65806177979964,
      37.30609579960857,
      60.65724461600897,
      55.06643312584454
    ],
    "group_enabled": false,
    "group_bics": null,
    "num_parameters": 3,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- phi: r = -0.036\n- beta: r = 0.720\n- gamma: r = -0.078",
  "previous_models": [
    "Specification: a = delta + \u03a3[i=1 to 11] F_i\na_mod = 1.08 * a * (1 + 0.012 * sin(a + 0.045))\nz = a_mod * (1 + 0.008 * cos(a + 0.065)) * (1 + 0.005 * sin(a + 0.115)) * (1 + 0.004 * cos(a + 0.085)) * (1 + 0.006 * sin(a + 0.035) * cos(a + 0.055)) * (1 + 0.003 * sin(a + 0.03) * cos(a + 0.05))\nw = (phi - 0.5) / phi\nf_adapt(z) = { z + 0.1*(0.1 - z)^2, for 0 \u2264 z < 0.1\n               z, for z \u2265 0.1\n               - ((z + 0.05)/(1 + |z + 0.05|))^3, for z < 0 }\nT = (1 + 0.001 * a) / (1 + 0.002 * a)\nE1 = exp(-a/0.1)\nE2 = z/(1 + |z|)\nE3 = 1 + 0.005 * sin(1/(1 + a))\nE4 = 1 + 0.002 * cos(0.5 * a)\nE5 = (1 + 0.003 * cos(0.3 * a))^2\nE6 = (1 + 0.004 * cos(0.3 * a))^2\nE7 = 1 + 0.0025 * cos(0.7 * a)\nE8 = 1 + tanh(0.05 * a)\nE9 = 1 + 1/(1+exp(-0.01 * a))\nE10 = 1 + 0.002 * cos(3 * a)\nE11 = 1 + 0.002 * (sin(2.5 * a) + 0.001 * cos(3.5 * a) + 0.0015 * sin(3 * a))\nE12 = 1 + 1/(1+exp(-0.03 * a))\nE13 = 1 + tanh(0.07 * a)\nE14 = 1 + cos(3.1 * a)\nE15 = 1 + 1/(1+exp(-0.04 * a))\nE16 = 1 + tanh(0.08 * a)\nE17 = 1 + cos(3.2 * a)\nE18 = 1 + 1/(1+exp(-0.05 * a))\nE19 = 1 + tanh(0.1 * a)\nE20 = 1 + cos(3.4 * a)\nE21 = 1 + 1/(1+exp(-0.06 * a))\nE22 = 1 + tanh(0.12 * a)\nE23 = 1 + cos(3.6 * a)\nE24 = 1 + 1/(1+exp(-0.08 * a))\nE25 = 1 + tanh(0.2 * a)\nextra_base = E1 * E2 * E3 * E4 * E5 * E6 * E7 * E8 * E9 * E10 * E11 * E12 * E13 * E14 * E15 * E16 * E17 * E18 * E19 * E20 * E21 * E22 * E23 * E24 * E25\nextra = extra_base * (1 + 0.005 * cos(0.9 * a)) * exp(-((a - 1)^2)/(2 * (0.25)^2)) * Softplus\u2088(0.865/(1 + a))\nExponent = (0.9478 + 0.00018 * ln(1 + a)) * (1 + 0.009 * tanh(0.5 * a) + 0.004 * sin(3.5 * a) + 0.003 * cos(2.7 * a) + 0.002 * sin(4.0 * a) + 0.005 * cos(0.9 * a)) * (1 + 0.005 * cos(0.9 * a))\nf(x) = sign(z) * ( f_adapt(z) * T * extra )^(Exponent)\nU = beta + gamma * f(x)\nP(accept = 1) = 1/(1 + exp(-U))\nSummary: A comprehensive, nonlinear utility model that computes a core signal from fixed components and modulates it using a series of sinusoidal, exponential, and rational functions. The model applies an adaptive transformation with distinct handling for positive and negative signals, integrates a dynamic threshold and a rich composite extra factor enhanced by an eight-layer nested softplus chain, and finally scales the transformed signal using two learnable parameters (beta and gamma) with an additional adaptivity control via phi. The latent utility is converted to an acceptance probability via a logistic function.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 53.92530440937213\nOverall Accuracy: 0.5592\n\nParameter Recovery:\n- phi: r = -0.036\n- beta: r = 0.720\n- gamma: r = -0.078"
  ]
}