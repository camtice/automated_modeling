{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "<think>\nFor Run 168, I will instruct the model designer to explore alternative local nonlinear approximations in the f_adapt function. Emphasize trying different piecewise approximations \u2013 for example, consider a piecewise ReLU or a hinge loss\u2013in order to seamlessly capture the local curvature when |z| is small and specifically treat negative values with a sharper penalty. In addition, ask the designer to explore alternative forms for the dynamic threshold T. Instead of relying solely on an extended summation, suggest using a flexible rational function (such as a Pad\u00e9 approximant) that can adapt its curvature across a wide range of a values. \n\nFurthermore, encourage an enhancement to the extra composite factor by including an additional multiplicative term such as [1 + 0.005\u00d7cos(0.9\u00d7a)] or a smooth maximum function to blend terms more gently. Finally, request that the designer considers replacing or augmenting the nested softplus chain with an alternative smoothing function (for example, a nested softsign chain) to better control extreme outputs. These modifications should help further reduce the BIC, improve the parameter recovery (especially for phi), and elevate accuracy.\n</think>\n\nNew Instructions for Run 168:\n1. Compute the core sum a as the sum of the fixed components F\u2081,\u2026,F\u2081\u2081 plus a small constant \u03b4.\n2. Set a_mod = 1.08 \u00d7 a \u00d7 [1 + 0.012 \u00d7 sin(a + 0.045)] and compute z by multiplying a_mod sequentially by [1 + 0.008 \u00d7 cos(a + 0.065)], [1 + 0.005 \u00d7 sin(a + 0.115)], [1 + 0.004 \u00d7 cos(a + 0.085)], [1 + 0.006 \u00d7 (sin(a + 0.035) \u00d7 cos(a + 0.055))], and [1 + 0.003 \u00d7 (sin(a + 0.03) \u00d7 cos(a + 0.05))].\n3. Define w = (phi \u2212 0.5)/phi.\n4. For the adaptive transformation f_adapt(z), use an alternative local nonlinear approximation:\n\u2003\u2003\u2013 For z \u2265 0, implement a piecewise approach (for instance, a piecewise ReLU or a rational function approximation) that smoothly transitions between a near-linear behavior and a logarithmic saturation; include an optional small quadratic correction when |z| is below a threshold \u03b5.\n\u2003\u2003\u2013 For z < 0, enforce a sharp penalty by using a high-degree exponent on a nested softsign (or consider a hinge-inspired formulation) so that negative values are penalized aggressively.\n5. Redefine the dynamic threshold T by either extending the current summation range (e.g., up to k = 250) or by using a flexible rational function (such as a Pad\u00e9 approximant) that self-adjusts with a over a wide dynamic range.\n6. In the extra composite factor, multiply by an additional term [1 + 0.005 \u00d7 cos(0.9 \u00d7 a)] (or a similarly smooth blending function such as a soft maximum) to better integrate the individual oscillatory factors. Also encourage the use of a nested softsign chain as an alternative to the current nested softplus chain to further smooth extreme values.\n7. Finally, compute the final transformed signal f(x) = sign(z) \u00d7 { [ f_adapt(z) \u00d7 T \u00d7 extra ]^(Exponent) }, with Exponent defined as before but potentially modulated by additional oscillatory terms.\n8. Set the latent utility U = beta + gamma \u00d7 f(x) and convert U to an acceptance probability using the logistic function.\n9. Use exactly three learnable parameters: beta \u2208 [\u201310, 10], gamma \u2208 [0, 10], and phi \u2208 [0.5, 1.5].\n\nBe creative and explore these alternative nonlinear approximations to capture local nonlinearities more faithfully, while aiming to reduce the BIC, enhance parameter recovery (especially for phi), and improve overall accuracy.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: <think>\nFor Run 168, I will instruct the model designer to explore alternative local nonlinear approximations in the f_adapt function. Emphasize trying different piecewise approximations \u2013 for example, consider a piecewise ReLU or a hinge loss\u2013in order to seamlessly capture the local curvature when |z| is small and specifically treat negative values with a sharper penalty. In addition, ask the designer to explore alternative forms for the dynamic threshold T. Instead of relying solely on an extended summation, suggest using a flexible rational function (such as a Pad\u00e9 approximant) that can adapt its curvature across a wide range of a values. \n\nFurthermore, encourage an enhancement to the extra composite factor by including an additional multiplicative term such as [1 + 0.005\u00d7cos(0.9\u00d7a)] or a smooth maximum function to blend terms more gently. Finally, request that the designer considers replacing or augmenting the nested softplus chain with an alternative smoothing function (for example, a nested softsign chain) to better control extreme outputs. These modifications should help further reduce the BIC, improve the parameter recovery (especially for phi), and elevate accuracy.\n</think>\n\nNew Instructions for Run 168:\n1. Compute the core sum a as the sum of the fixed components F\u2081,\u2026,F\u2081\u2081 plus a small constant \u03b4.\n2. Set a_mod = 1.08 \u00d7 a \u00d7 [1 + 0.012 \u00d7 sin(a + 0.045)] and compute z by multiplying a_mod sequentially by [1 + 0.008 \u00d7 cos(a + 0.065)], [1 + 0.005 \u00d7 sin(a + 0.115)], [1 + 0.004 \u00d7 cos(a + 0.085)], [1 + 0.006 \u00d7 (sin(a + 0.035) \u00d7 cos(a + 0.055))], and [1 + 0.003 \u00d7 (sin(a + 0.03) \u00d7 cos(a + 0.05))].\n3. Define w = (phi \u2212 0.5)/phi.\n4. For the adaptive transformation f_adapt(z), use an alternative local nonlinear approximation:\n\u2003\u2003\u2013 For z \u2265 0, implement a piecewise approach (for instance, a piecewise ReLU or a rational function approximation) that smoothly transitions between a near-linear behavior and a logarithmic saturation; include an optional small quadratic correction when |z| is below a threshold \u03b5.\n\u2003\u2003\u2013 For z < 0, enforce a sharp penalty by using a high-degree exponent on a nested softsign (or consider a hinge-inspired formulation) so that negative values are penalized aggressively.\n5. Redefine the dynamic threshold T by either extending the current summation range (e.g., up to k = 250) or by using a flexible rational function (such as a Pad\u00e9 approximant) that self-adjusts with a over a wide dynamic range.\n6. In the extra composite factor, multiply by an additional term [1 + 0.005 \u00d7 cos(0.9 \u00d7 a)] (or a similarly smooth blending function such as a soft maximum) to better integrate the individual oscillatory factors. Also encourage the use of a nested softsign chain as an alternative to the current nested softplus chain to further smooth extreme values.\n7. Finally, compute the final transformed signal f(x) = sign(z) \u00d7 { [ f_adapt(z) \u00d7 T \u00d7 extra ]^(Exponent) }, with Exponent defined as before but potentially modulated by additional oscillatory terms.\n8. Set the latent utility U = beta + gamma \u00d7 f(x) and convert U to an acceptance probability using the logistic function.\n9. Use exactly three learnable parameters: beta \u2208 [\u201310, 10], gamma \u2208 [0, 10], and phi \u2208 [0.5, 1.5].\n\nBe creative and explore these alternative nonlinear approximations to capture local nonlinearities more faithfully, while aiming to reduce the BIC, enhance parameter recovery (especially for phi), and improve overall accuracy.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<MODEL>\na = \u03a3[i=1,11](F_i) + \u03b4\na_mod = 1.08 * a * (1 + 0.012 * sin(a + 0.045))\nz = a_mod * (1 + 0.008 * cos(a + 0.065)) * (1 + 0.005 * sin(a + 0.115)) * (1 + 0.004 * cos(a + 0.085)) * (1 + 0.006 * sin(a + 0.035) * cos(a + 0.055)) * (1 + 0.003 * sin(a + 0.03) * cos(a + 0.05))\nw = (phi - 0.5) / phi\nf_adapt = { if z \u2265 0: { if z < \u03b5 then z + k1 * z^2 else ln(1 + z) } else - (|z|/(1 + |z|))^4 }\nT = (1 + 0.5 * a + 0.01 * a^2) / (1 + 0.02 * a + 0.001 * a^2)\nsoftsign(x) = x / (1 + |x|)\nextra = softsign(softsign(softsign(a))) * (1 + 0.005 * cos(0.9 * a))\nf_x = sign(z) * ( | f_adapt * T * extra | )^(w)\nU = beta + gamma * f_x\np_accept = 1 / (1 + exp(-U))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"F_i\": {\n      \"description\": \"Fixed component i, for i = 1,...,11, derived from trial features (e.g., contributions, splits, tokens, etc.)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"observed\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"\u03b4\": {\n      \"description\": \"Small constant offset for numerical stability\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1e-2,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"constant\",\n        \"parameters\": {\n          \"value\": 1e-6\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"a\": {\n      \"description\": \"Core sum computed as the sum of fixed components plus \u03b4\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a_mod\": {\n      \"description\": \"Modified core sum integrating a sinusoidal adjustment\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"z\": {\n      \"description\": \"Transformed signal after sequential oscillatory multiplicative adjustments\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"\u03b5\": {\n      \"description\": \"Threshold for local nonlinear approximation in f_adapt\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"constant\",\n        \"parameters\": {\n          \"value\": 0.1\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"k1\": {\n      \"description\": \"Quadratic correction coefficient for |z| < \u03b5 in f_adapt\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"constant\",\n        \"parameters\": {\n          \"value\": 0.05\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"f_adapt\": {\n      \"description\": \"Adaptive nonlinear transformation of z with piecewise behavior\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"T\": {\n      \"description\": \"Dynamic threshold computed via a Pad\u00e9 approximant form\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"softsign\": {\n      \"description\": \"Softsign function defined as x/(1+|x|)\",\n      \"range\": {\n        \"min\": \"-1\",\n        \"max\": \"1\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"function\"\n    },\n    \"extra\": {\n      \"description\": \"Extra composite factor combining a nested softsign chain and an oscillatory blending term\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"w\": {\n      \"description\": \"Exponent factor derived from phi to modulate nonlinearity\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_x\": {\n      \"description\": \"Final transformed signal resulting from the adaptive transformation, dynamic threshold, and extra composite factor\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Intercept parameter capturing baseline utility\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": -10,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Gain parameter scaling the transformed signal f_x\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Parameter controlling the sharpness of the transformation via exponent modulation\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0.5,\n          \"max\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed as a linear combination of beta and gamma-scaled transformed signal f_x\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"p_accept\": {\n      \"description\": \"Probability of acceptance computed by applying the logistic function to U\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA nonlinear utility model predicting responder acceptance. The model computes a core sum from eleven fixed components, applies multiple oscillatory adjustments, and processes the signal through an adaptive nonlinear transformation f_adapt that differentiates between positive (using a piecewise linear-logarithmic function with a quadratic correction) and negative values (penalized via a high-degree softsign). A dynamic threshold T is obtained via a Pad\u00e9 approximant, and an extra composite factor based on a nested softsign chain and a cosine blending term further modulates the signal. The final transformed signal is exponentiated with an exponent derived from phi, and combined with learnable parameters beta and gamma to yield a latent utility, which is converted via a logistic function into the probability of acceptance.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['beta', 'gamma', 'phi']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                a = \u03a3[i=1,11](F_i) + \u03b4\na_mod = 1.08 * a * (1 + 0.012 * sin(a + 0.045))\nz = a_mod * (1 + 0.008 * cos(a + 0.065)) * (1 + 0.005 * sin(a + 0.115)) * (1 + 0.004 * cos(a + 0.085)) * (1 + 0.006 * sin(a + 0.035) * cos(a + 0.055)) * (1 + 0.003 * sin(a + 0.03) * cos(a + 0.05))\nw = (phi - 0.5) / phi\nf_adapt = { if z \u2265 0: { if z < \u03b5 then z + k1 * z^2 else ln(1 + z) } else - (|z|/(1 + |z|))^4 }\nT = (1 + 0.5 * a + 0.01 * a^2) / (1 + 0.02 * a + 0.001 * a^2)\nsoftsign(x) = x / (1 + |x|)\nextra = softsign(softsign(softsign(a))) * (1 + 0.005 * cos(0.9 * a))\nf_x = sign(z) * ( | f_adapt * T * extra | )^(w)\nU = beta + gamma * f_x\np_accept = 1 / (1 + exp(-U))\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"F_i\": {\n      \"description\": \"Fixed component i, for i = 1,...,11, derived from trial features (e.g., contributions, splits, tokens, etc.)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"observed\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"\\u03b4\": {\n      \"description\": \"Small constant offset for numerical stability\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 0.01,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"constant\",\n        \"parameters\": {\n          \"value\": 1e-06\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"a\": {\n      \"description\": \"Core sum computed as the sum of fixed components plus \\u03b4\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a_mod\": {\n      \"description\": \"Modified core sum integrating a sinusoidal adjustment\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"z\": {\n      \"description\": \"Transformed signal after sequential oscillatory multiplicative adjustments\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"\\u03b5\": {\n      \"description\": \"Threshold for local nonlinear approximation in f_adapt\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"constant\",\n        \"parameters\": {\n          \"value\": 0.1\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"k1\": {\n      \"description\": \"Quadratic correction coefficient for |z| < \\u03b5 in f_adapt\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"constant\",\n        \"parameters\": {\n          \"value\": 0.05\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"f_adapt\": {\n      \"description\": \"Adaptive nonlinear transformation of z with piecewise behavior\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"T\": {\n      \"description\": \"Dynamic threshold computed via a Pad\\u00e9 approximant form\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"softsign\": {\n      \"description\": \"Softsign function defined as x/(1+|x|)\",\n      \"range\": {\n        \"min\": \"-1\",\n        \"max\": \"1\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"function\"\n    },\n    \"extra\": {\n      \"description\": \"Extra composite factor combining a nested softsign chain and an oscillatory blending term\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"w\": {\n      \"description\": \"Exponent factor derived from phi to modulate nonlinearity\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_x\": {\n      \"description\": \"Final transformed signal resulting from the adaptive transformation, dynamic threshold, and extra composite factor\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Intercept parameter capturing baseline utility\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": -10,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Gain parameter scaling the transformed signal f_x\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Parameter controlling the sharpness of the transformation via exponent modulation\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0.5,\n          \"max\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed as a linear combination of beta and gamma-scaled transformed signal f_x\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"p_accept\": {\n      \"description\": \"Probability of acceptance computed by applying the logistic function to U\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, beta=0, gamma=1, phi=1):\n    model_predictions = []\n    delta = 1e-6\n    epsilon = 0.1\n    k1 = 0.05\n\n    def softsign(x):\n        return x / (1 + abs(x))\n\n    for trial in trial_data:\n        # Extract F_i values from the trial data. Handle missing keys gracefully.\n        F = [trial.get(f\"F{i+1}\", 0) for i in range(11)] # Default to 0 if F_i is missing\n        a = sum(F) + delta\n\n        a_mod = 1.08 * a * (1 + 0.012 * math.sin(a + 0.045))\n        z = a_mod * (1 + 0.008 * math.cos(a + 0.065)) * (1 + 0.005 * math.sin(a + 0.115)) * (1 + 0.004 * math.cos(a + 0.085)) * (1 + 0.006 * math.sin(a + 0.035) * math.cos(a + 0.055)) * (1 + 0.003 * math.sin(a + 0.03) * math.cos(a + 0.05))\n        w = (phi - 0.5) / phi\n\n        if z >= 0:\n            if z < epsilon:\n                f_adapt = z + k1 * z**2\n            else:\n                f_adapt = math.log(1 + z)\n        else:\n            f_adapt = - (abs(z) / (1 + abs(z)))**4\n\n        T = (1 + 0.5 * a + 0.01 * a**2) / (1 + 0.02 * a + 0.001 * a**2)\n        extra = softsign(softsign(softsign(a))) * (1 + 0.005 * math.cos(0.9 * a))\n\n        f_x = (1 if z >= 0 else -1) * (abs(f_adapt * T * extra))**w # sign(z) implemented here\n\n        U = beta + gamma * f_x\n        p_accept = 1 / (1 + math.exp(-U))\n        model_predictions.append(p_accept)\n\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '''\n[\n    {\n        \"ID\": 1,\n        \"group\": \"control\",\n        \"trial_number\": 1,\n        \"trial_type\": 1,\n        \"trial_role\": 0,\n        \"token_opp\": 10,\n        \"token_self\": 20,\n        \"combined_earning\": 30,\n        \"split_opp\": 0.333333333,\n        \"split_self\": 0.666666667,\n        \"splitperc_opp\": 33,\n        \"splitperc_self\": 67,\n        \"accept\": 0.0,\n        \"accepted_amount\": 0.0,\n        \"accepted_perc\": 0.0,\n        \"proposed_perc\": 33.33333333,\n        \"proposed_amount\": 10.0,\n    \"F1\": 1, \"F2\": 2, \"F3\": 3, \"F4\": 4, \"F5\": 5, \"F6\": 6, \"F7\": 7, \"F8\": 8, \"F9\": 9, \"F10\": 10, \"F11\": 11\n    },\n    {\n        \"ID\": 2,\n        \"group\": \"control\",\n        \"trial_number\": 2,\n        \"trial_type\": 1,\n        \"trial_role\": 1,\n        \"token_opp\": 10,\n        \"token_self\": 20,\n        \"combined_earning\": 30,\n        \"split_opp\": 0.333333333,\n        \"split_self\": 0.666666667,\n        \"splitperc_opp\": 33,\n        \"splitperc_self\": 67,\n        \"accept\": 1.0,\n        \"accepted_amount\": 10.0,\n        \"accepted_perc\": 33.0,\n        \"proposed_perc\": 33.33333333,\n        \"proposed_amount\": 10.0,\n    \"F1\": 1, \"F2\": 2, \"F3\": 3, \"F4\": 4, \"F5\": 5, \"F6\": 6, \"F7\": 7, \"F8\": 8, \"F9\": 9, \"F10\": 10, \"F11\": 11\n    }\n]\n'''\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n```",
      "timestamp": 1743550352.482372
    }
  ],
  "learnable_parameters": {
    "beta": {
      "description": "Intercept parameter capturing baseline utility",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": -10,
          "max": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Gain parameter scaling the transformed signal f_x",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": 0,
          "max": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "phi": {
      "description": "Parameter controlling the sharpness of the transformation via exponent modulation",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": 0.5,
          "max": 1.5
        }
      },
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "a = \u03a3[i=1,11](F_i) + \u03b4\na_mod = 1.08 * a * (1 + 0.012 * sin(a + 0.045))\nz = a_mod * (1 + 0.008 * cos(a + 0.065)) * (1 + 0.005 * sin(a + 0.115)) * (1 + 0.004 * cos(a + 0.085)) * (1 + 0.006 * sin(a + 0.035) * cos(a + 0.055)) * (1 + 0.003 * sin(a + 0.03) * cos(a + 0.05))\nw = (phi - 0.5) / phi\nf_adapt = { if z \u2265 0: { if z < \u03b5 then z + k1 * z^2 else ln(1 + z) } else - (|z|/(1 + |z|))^4 }\nT = (1 + 0.5 * a + 0.01 * a^2) / (1 + 0.02 * a + 0.001 * a^2)\nsoftsign(x) = x / (1 + |x|)\nextra = softsign(softsign(softsign(a))) * (1 + 0.005 * cos(0.9 * a))\nf_x = sign(z) * ( | f_adapt * T * extra | )^(w)\nU = beta + gamma * f_x\np_accept = 1 / (1 + exp(-U))",
  "variable_descriptions": {
    "F_i": {
      "description": "Fixed component i, for i = 1,...,11, derived from trial features (e.g., contributions, splits, tokens, etc.)",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "observed",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "\u03b4": {
      "description": "Small constant offset for numerical stability",
      "range": {
        "min": 0,
        "max": 0.01,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "constant",
        "parameters": {
          "value": 1e-06
        }
      },
      "learnable": false,
      "source": "fixed"
    },
    "a": {
      "description": "Core sum computed as the sum of fixed components plus \u03b4",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "a_mod": {
      "description": "Modified core sum integrating a sinusoidal adjustment",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "z": {
      "description": "Transformed signal after sequential oscillatory multiplicative adjustments",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "\u03b5": {
      "description": "Threshold for local nonlinear approximation in f_adapt",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "constant",
        "parameters": {
          "value": 0.1
        }
      },
      "learnable": false,
      "source": "fixed"
    },
    "k1": {
      "description": "Quadratic correction coefficient for |z| < \u03b5 in f_adapt",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "constant",
        "parameters": {
          "value": 0.05
        }
      },
      "learnable": false,
      "source": "fixed"
    },
    "f_adapt": {
      "description": "Adaptive nonlinear transformation of z with piecewise behavior",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "T": {
      "description": "Dynamic threshold computed via a Pad\u00e9 approximant form",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "softsign": {
      "description": "Softsign function defined as x/(1+|x|)",
      "range": {
        "min": "-1",
        "max": "1",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "function"
    },
    "extra": {
      "description": "Extra composite factor combining a nested softsign chain and an oscillatory blending term",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "w": {
      "description": "Exponent factor derived from phi to modulate nonlinearity",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "f_x": {
      "description": "Final transformed signal resulting from the adaptive transformation, dynamic threshold, and extra composite factor",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "beta": {
      "description": "Intercept parameter capturing baseline utility",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": -10,
          "max": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Gain parameter scaling the transformed signal f_x",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": 0,
          "max": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "phi": {
      "description": "Parameter controlling the sharpness of the transformation via exponent modulation",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": 0.5,
          "max": 1.5
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "U": {
      "description": "Latent utility computed as a linear combination of beta and gamma-scaled transformed signal f_x",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "p_accept": {
      "description": "Probability of acceptance computed by applying the logistic function to U",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "A nonlinear utility model predicting responder acceptance. The model computes a core sum from eleven fixed components, applies multiple oscillatory adjustments, and processes the signal through an adaptive nonlinear transformation f_adapt that differentiates between positive (using a piecewise linear-logarithmic function with a quadratic correction) and negative values (penalized via a high-degree softsign). A dynamic threshold T is obtained via a Pad\u00e9 approximant, and an extra composite factor based on a nested softsign chain and a cosine blending term further modulates the signal. The final transformed signal is exponentiated with an exponent derived from phi, and combined with learnable parameters beta and gamma to yield a latent utility, which is converted via a logistic function into the probability of acceptance.",
  "target_variable": "accept",
  "full_reasoning": "<MODEL>\na = \u03a3[i=1,11](F_i) + \u03b4\na_mod = 1.08 * a * (1 + 0.012 * sin(a + 0.045))\nz = a_mod * (1 + 0.008 * cos(a + 0.065)) * (1 + 0.005 * sin(a + 0.115)) * (1 + 0.004 * cos(a + 0.085)) * (1 + 0.006 * sin(a + 0.035) * cos(a + 0.055)) * (1 + 0.003 * sin(a + 0.03) * cos(a + 0.05))\nw = (phi - 0.5) / phi\nf_adapt = { if z \u2265 0: { if z < \u03b5 then z + k1 * z^2 else ln(1 + z) } else - (|z|/(1 + |z|))^4 }\nT = (1 + 0.5 * a + 0.01 * a^2) / (1 + 0.02 * a + 0.001 * a^2)\nsoftsign(x) = x / (1 + |x|)\nextra = softsign(softsign(softsign(a))) * (1 + 0.005 * cos(0.9 * a))\nf_x = sign(z) * ( | f_adapt * T * extra | )^(w)\nU = beta + gamma * f_x\np_accept = 1 / (1 + exp(-U))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"F_i\": {\n      \"description\": \"Fixed component i, for i = 1,...,11, derived from trial features (e.g., contributions, splits, tokens, etc.)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"observed\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"\u03b4\": {\n      \"description\": \"Small constant offset for numerical stability\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1e-2,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"constant\",\n        \"parameters\": {\n          \"value\": 1e-6\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"a\": {\n      \"description\": \"Core sum computed as the sum of fixed components plus \u03b4\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a_mod\": {\n      \"description\": \"Modified core sum integrating a sinusoidal adjustment\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"z\": {\n      \"description\": \"Transformed signal after sequential oscillatory multiplicative adjustments\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"\u03b5\": {\n      \"description\": \"Threshold for local nonlinear approximation in f_adapt\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"constant\",\n        \"parameters\": {\n          \"value\": 0.1\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"k1\": {\n      \"description\": \"Quadratic correction coefficient for |z| < \u03b5 in f_adapt\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"constant\",\n        \"parameters\": {\n          \"value\": 0.05\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"f_adapt\": {\n      \"description\": \"Adaptive nonlinear transformation of z with piecewise behavior\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"T\": {\n      \"description\": \"Dynamic threshold computed via a Pad\u00e9 approximant form\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"softsign\": {\n      \"description\": \"Softsign function defined as x/(1+|x|)\",\n      \"range\": {\n        \"min\": \"-1\",\n        \"max\": \"1\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"function\"\n    },\n    \"extra\": {\n      \"description\": \"Extra composite factor combining a nested softsign chain and an oscillatory blending term\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"w\": {\n      \"description\": \"Exponent factor derived from phi to modulate nonlinearity\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_x\": {\n      \"description\": \"Final transformed signal resulting from the adaptive transformation, dynamic threshold, and extra composite factor\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Intercept parameter capturing baseline utility\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": -10,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Gain parameter scaling the transformed signal f_x\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Parameter controlling the sharpness of the transformation via exponent modulation\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0.5,\n          \"max\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed as a linear combination of beta and gamma-scaled transformed signal f_x\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"p_accept\": {\n      \"description\": \"Probability of acceptance computed by applying the logistic function to U\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA nonlinear utility model predicting responder acceptance. The model computes a core sum from eleven fixed components, applies multiple oscillatory adjustments, and processes the signal through an adaptive nonlinear transformation f_adapt that differentiates between positive (using a piecewise linear-logarithmic function with a quadratic correction) and negative values (penalized via a high-degree softsign). A dynamic threshold T is obtained via a Pad\u00e9 approximant, and an extra composite factor based on a nested softsign chain and a cosine blending term further modulates the signal. The final transformed signal is exponentiated with an exponent derived from phi, and combined with learnable parameters beta and gamma to yield a latent utility, which is converted via a logistic function into the probability of acceptance.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: a = \u03a3[i=1,11](F_i) + \u03b4\na_mod = 1.08 * a * (1 + 0.012 * sin(a + 0.045))\nz = a_mod * (1 + 0.008 * cos(a + 0.065)) * (1 + 0.005 * sin(a + 0.115)) * (1 + 0.004 * cos(a + 0.085)) * (1 + 0.006 * sin(a + 0.035) * cos(a + 0.055)) * (1 + 0.003 * sin(a + 0.03) * cos(a + 0.05))\nw = (phi - 0.5) / phi\nf_adapt = { if z \u2265 0: { if z < \u03b5 then z + k1 * z^2 else ln(1 + z) } else - (|z|/(1 + |z|))^4 }\nT = (1 + 0.5 * a + 0.01 * a^2) / (1 + 0.02 * a + 0.001 * a^2)\nsoftsign(x) = x / (1 + |x|)\nextra = softsign(softsign(softsign(a))) * (1 + 0.005 * cos(0.9 * a))\nf_x = sign(z) * ( | f_adapt * T * extra | )^(w)\nU = beta + gamma * f_x\np_accept = 1 / (1 + exp(-U))\nSummary: A nonlinear utility model predicting responder acceptance. The model computes a core sum from eleven fixed components, applies multiple oscillatory adjustments, and processes the signal through an adaptive nonlinear transformation f_adapt that differentiates between positive (using a piecewise linear-logarithmic function with a quadratic correction) and negative values (penalized via a high-degree softsign). A dynamic threshold T is obtained via a Pad\u00e9 approximant, and an extra composite factor based on a nested softsign chain and a cosine blending term further modulates the signal. The final transformed signal is exponentiated with an exponent derived from phi, and combined with learnable parameters beta and gamma to yield a latent utility, which is converted via a logistic function into the probability of acceptance.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, beta=0, gamma=1, phi=1):\n    model_predictions = []\n    delta = 1e-6\n    epsilon = 0.1\n    k1 = 0.05\n\n    def softsign(x):\n        return x / (1 + abs(x))\n\n    for trial in trial_data:\n        # Extract F_i values from the trial data. Handle missing keys gracefully.\n        F = [trial.get(f\"F{i+1}\", 0) for i in range(11)] # Default to 0 if F_i is missing\n        a = sum(F) + delta\n\n        a_mod = 1.08 * a * (1 + 0.012 * math.sin(a + 0.045))\n        z = a_mod * (1 + 0.008 * math.cos(a + 0.065)) * (1 + 0.005 * math.sin(a + 0.115)) * (1 + 0.004 * math.cos(a + 0.085)) * (1 + 0.006 * math.sin(a + 0.035) * math.cos(a + 0.055)) * (1 + 0.003 * math.sin(a + 0.03) * math.cos(a + 0.05))\n        w = (phi - 0.5) / phi\n\n        if z >= 0:\n            if z < epsilon:\n                f_adapt = z + k1 * z**2\n            else:\n                f_adapt = math.log(1 + z)\n        else:\n            f_adapt = - (abs(z) / (1 + abs(z)))**4\n\n        T = (1 + 0.5 * a + 0.01 * a**2) / (1 + 0.02 * a + 0.001 * a**2)\n        extra = softsign(softsign(softsign(a))) * (1 + 0.005 * math.cos(0.9 * a))\n\n        f_x = (1 if z >= 0 else -1) * (abs(f_adapt * T * extra))**w # sign(z) implemented here\n\n        U = beta + gamma * f_x\n        p_accept = 1 / (1 + math.exp(-U))\n        model_predictions.append(p_accept)\n\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.5558608058608059,
  "fitting_results": [
    {
      "beta": -10.0,
      "gamma": 4.040603789907757,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.9539794702921,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -8.904829740620116,
      "gamma": 2.5339057526290807,
      "phi": 0.6739681827826897,
      "success": true,
      "log_likelihood": -24.953298576184164,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.2777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.078163746496148,
      "gamma": 5.963370838473047,
      "phi": 1.12299617506402,
      "success": true,
      "log_likelihood": -24.8977143247348,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 1.696196024477853,
      "phi": 1.2359277094994754,
      "success": true,
      "log_likelihood": -24.95343469585596,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 8.123968134436195,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.953389297977637,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.2840778314190792,
      "gamma": 3.8710341165756814,
      "phi": 1.2119353775633928,
      "success": true,
      "log_likelihood": -23.54597316385295,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 4.378336166233402,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -11.277426260509005,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.8148742757360367,
      "gamma": 0.6487417498591729,
      "phi": 1.2559296271414182,
      "success": true,
      "log_likelihood": -22.91451005141327,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 5.507433303153099,
      "phi": 1.1478974004702776,
      "success": true,
      "log_likelihood": -11.27786028981877,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 2.5152771766277917,
      "phi": 1.2684060680427918,
      "success": true,
      "log_likelihood": -24.953480093733177,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 7.954158984914362,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.95338929797745,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 3.0641963536791437,
      "phi": 0.9320841658776072,
      "success": true,
      "log_likelihood": -24.953934077963968,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 6.94411437358673,
      "phi": 1.0323818772849953,
      "success": true,
      "log_likelihood": -24.953434696482567,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 9.703767484734817,
      "gamma": 8.635171890084491,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -11.277420850797114,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 8.467204955755667,
      "phi": 1.181851242887277,
      "success": true,
      "log_likelihood": -11.2778602897803,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 7.192730086322176,
      "gamma": 8.615264321970315,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -11.277422065918541,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 6.268664655408481,
      "phi": 0.9942509681833376,
      "success": true,
      "log_likelihood": -11.277860287120369,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 8.303917420276555,
      "phi": 1.2108955674402844,
      "success": true,
      "log_likelihood": -16.277633299562595,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 3.082173795872544,
      "gamma": 9.936546329874425,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -15.277433349541486,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 6.469362332768877,
      "gamma": 7.736896719096521,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -11.277427296015142,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.247455985764111,
      "gamma": 5.190954155567091,
      "phi": 1.226660498391614,
      "success": true,
      "log_likelihood": -24.73061675033478,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 3.479872296870102,
      "phi": 0.9083537707284023,
      "success": true,
      "log_likelihood": -16.277633296619282,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 6.013859758628054,
      "phi": 1.162575565432108,
      "success": true,
      "log_likelihood": -24.95352549178465,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.0782994542738793,
      "gamma": 9.015861946185769,
      "phi": 1.0485578231644304,
      "success": true,
      "log_likelihood": -24.897714324108186,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -6.357911571188355,
      "gamma": 1.894470398467346,
      "phi": 1.4517854295030357,
      "success": true,
      "log_likelihood": -24.953311960759738,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -3.882203538675273,
      "gamma": 3.203372474660738,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.45095757943688,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.2483589099657162,
      "gamma": 7.395889270262455,
      "phi": 1.403800140714484,
      "success": true,
      "log_likelihood": -24.73061686291474,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 1.307849623465267,
      "phi": 1.1723275914092262,
      "success": true,
      "log_likelihood": -24.953661685247763,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 8.321781065800039,
      "gamma": 5.264386742345032,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -15.277427891317792,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 9.922665678177506,
      "phi": 0.7138274643009123,
      "success": true,
      "log_likelihood": -19.277496907381057,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 5.386352668233426,
      "gamma": 8.950351852018771,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -11.27742649494428,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 2.3914185702927435,
      "phi": 1.0330406106682282,
      "success": true,
      "log_likelihood": -24.95397947136236,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 1.2998753519744048,
      "phi": 1.0380746287284106,
      "success": true,
      "log_likelihood": -24.95343469595053,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 3.3843514233518213,
      "phi": 1.4633623834339005,
      "success": true,
      "log_likelihood": -24.95348009371541,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.2777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 7.425926444419418,
      "gamma": 7.778137702544513,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -11.27742316074184,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.28395457418434655,
      "gamma": 6.426346295346777,
      "phi": 1.2895259228578282,
      "success": true,
      "log_likelihood": -23.545973167417305,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.5229982456078415,
      "gamma": 8.4958533730914,
      "phi": 1.4811708414956115,
      "success": true,
      "log_likelihood": -22.157938154736478,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -7.500153025342858,
      "gamma": 0.5266394628802328,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.95329986757649,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.8148765188638954,
      "gamma": 6.881913662183235,
      "phi": 1.1138900467001414,
      "success": true,
      "log_likelihood": -22.91451005141638,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 8.149080100295102,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -14.277420832697153,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.19279417790221692,
      "gamma": 3.5197199634076983,
      "phi": 0.7909665798157869,
      "success": true,
      "log_likelihood": -24.056945188723493,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 5.027516782294436,
      "phi": 1.1248223914361315,
      "success": true,
      "log_likelihood": -24.95375248143875,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.7249990083716829,
      "phi": 1.1721171875262322,
      "success": true,
      "log_likelihood": -12.27781489210612,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.247206193923687,
      "gamma": 7.55719365399038,
      "phi": 1.3525805135554863,
      "success": true,
      "log_likelihood": -24.730616757637353,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.19265470641465868,
      "gamma": 2.199854032497023,
      "phi": 1.138232002304103,
      "success": true,
      "log_likelihood": -24.056945188723724,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.4087285818932056,
      "gamma": 7.168144960678805,
      "phi": 0.5050050449330619,
      "success": true,
      "log_likelihood": -21.27032340915172,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.0782868964200705,
      "gamma": 5.379681391810937,
      "phi": 1.4999998273734934,
      "success": true,
      "log_likelihood": -24.897714324102733,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -9.999999999999998,
      "gamma": 6.196067939733177,
      "phi": 1.1397824435239705,
      "success": true,
      "log_likelihood": -24.95348009392522,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.6955884614472663,
      "phi": 1.3713362995723195,
      "success": true,
      "log_likelihood": -24.95343469584085,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.078285594114082,
      "gamma": 4.850527288577261,
      "phi": 1.2903702230257017,
      "success": true,
      "log_likelihood": -24.89771432410228,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.5227876601307369,
      "gamma": 8.145670061179459,
      "phi": 0.8087901326449294,
      "success": true,
      "log_likelihood": -22.15793815473426,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 5.045732383733795,
      "phi": 1.3288221597914518,
      "success": true,
      "log_likelihood": -24.953888674628885,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3333333333333333,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.0782886714256295,
      "gamma": 4.194098596957261,
      "phi": 0.9559843085297214,
      "success": true,
      "log_likelihood": -24.897714324102125,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.6790695944829299,
      "gamma": 8.157312059717551,
      "phi": 1.3143967506707035,
      "success": true,
      "log_likelihood": -24.450957568538996,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.37828789331229906,
      "phi": 1.2813881929880921,
      "success": true,
      "log_likelihood": -24.953480093710642,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 2.54859905270928,
      "phi": 1.0624262024986573,
      "success": true,
      "log_likelihood": -24.953570889768777,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 1.8778013638674065,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.953661685189196,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 3.8220977074567783,
      "gamma": 9.87217821532199,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -15.277427159017503,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -9.999999999999996,
      "gamma": 9.397309540125327,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.95393407245774,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.123375858661968,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -18.277435309628938,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -6.069161886370672,
      "gamma": 5.8765019055576335,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.056945188735575,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -8.92378854355801,
      "gamma": 3.5061147696870396,
      "phi": 0.971746916483399,
      "success": true,
      "log_likelihood": -24.953298572757028,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 3.040734829882812,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.953979470284857,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 5.859661216757828,
      "phi": 1.4317591250263628,
      "success": true,
      "log_likelihood": -24.953389297978564,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -9.999999999999998,
      "gamma": 8.006028895758481,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.953752480958048,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.2474910743298657,
      "gamma": 4.8230399074806,
      "phi": 1.2761438640166856,
      "success": true,
      "log_likelihood": -24.730616750644604,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 6.297266000118872,
      "phi": 0.7749338015454849,
      "success": true,
      "log_likelihood": -14.277723986721742,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 4.921810026809116,
      "phi": 0.7124228173950877,
      "success": true,
      "log_likelihood": -16.277633015543145,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.249992861719494,
      "gamma": 3.1016285825124923,
      "phi": 1.4889430504281567,
      "success": true,
      "log_likelihood": -24.730617619273257,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 6.7254339803243175,
      "gamma": 8.699993685754418,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -14.27742208076441,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.0037890397647065963,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.953934072394098,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 7.660810183190003,
      "phi": 1.214123227348626,
      "success": true,
      "log_likelihood": -24.953888674943638,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.078355803322453,
      "gamma": 5.8345901777658655,
      "phi": 1.1404198261009513,
      "success": true,
      "log_likelihood": -24.897714324330256,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.963571370370452,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -19.277431461213727,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -7.833816268711244,
      "gamma": 0.013129188971059413,
      "phi": 0.9740115079999963,
      "success": true,
      "log_likelihood": -24.95329919846641,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.5227822315704502,
      "gamma": 1.1713864451213303,
      "phi": 0.7424039865514602,
      "success": true,
      "log_likelihood": -22.15793815522001,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 9.657609656057742,
      "gamma": 2.196165212088369,
      "phi": 1.1775415776934048,
      "success": true,
      "log_likelihood": -13.277911886575195,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.40803545489111026,
      "phi": 1.4333479088155516,
      "success": true,
      "log_likelihood": -24.954024868136297,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.19265299167970576,
      "gamma": 0.4768500591069772,
      "phi": 0.9720577149511931,
      "success": true,
      "log_likelihood": -24.0569451887236,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 4.712881034720465,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.953979470297,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.07771804313271,
      "gamma": 5.765961930422103,
      "phi": 0.8400377867336392,
      "success": true,
      "log_likelihood": -24.89771434250079,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.0240634325365234,
      "gamma": 9.756039901584328,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -14.277471897184459,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 4.281761593445307,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.953934072423078,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -8.393839507625351,
      "gamma": 2.1026585787244736,
      "phi": 1.4000046544029017,
      "success": true,
      "log_likelihood": -24.953298723218673,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.1926752827540749,
      "gamma": 4.988324308156148,
      "phi": 0.8958749800410571,
      "success": true,
      "log_likelihood": -24.05694518872719,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 2.9758156448513877,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.95393407241422,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.5230108288547632,
      "gamma": 0.2485510467074618,
      "phi": 1.0111062634579613,
      "success": true,
      "log_likelihood": -22.15793815473591,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 7.3534556138336065,
      "phi": 1.265170502971239,
      "success": true,
      "log_likelihood": -24.953752481114737,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 6.459744802592923,
      "gamma": 7.393063274095303,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -13.277428145910749,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 2.1374674731108927,
      "phi": 0.7843499586555266,
      "success": true,
      "log_likelihood": -24.953343904586074,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.5229383013132356,
      "gamma": 1.6271540464643741,
      "phi": 0.9865889714303968,
      "success": true,
      "log_likelihood": -22.157938155077343,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "beta": {
        "r": 0.7364825529685992,
        "p": 2.500204657850812e-18
      },
      "gamma": {
        "r": -0.14372583649468454,
        "p": 0.15369324422969421
      },
      "phi": {
        "r": 0.0037855365688238716,
        "p": 0.9701823713289999
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 53.92259252229972,
  "bic_results": {
    "average_bic": 53.92259252229972,
    "individual_bics": [
      60.658515755952536,
      60.65715396773666,
      60.545985464837926,
      60.65742620708025,
      60.6573354113236,
      57.842503143074225,
      33.30540933638634,
      56.579576918194874,
      33.30627739500587,
      60.65751700283468,
      60.65733541132323,
      60.65842497129627,
      60.65742620833346,
      33.305398516962555,
      33.30627739492893,
      33.30540094720541,
      33.306277389609065,
      43.30582341449352,
      41.305423514451306,
      33.305411407398616,
      60.21179031603789,
      43.3058234086069,
      60.65760779893763,
      60.5459854635847,
      60.65718073688781,
      59.65247197424209,
      60.211790541197814,
      60.65788018586386,
      41.30541259800391,
      49.30555063013044,
      33.305409805256886,
      60.658515758093046,
      60.657426207269395,
      60.65751700279915,
      33.30540313685201,
      57.842503150202944,
      55.06643312484128,
      60.65715655052131,
      56.579576918201084,
      39.30539848076263,
      58.86444719281532,
      60.65806177824584,
      35.30618659958057,
      60.21179033064304,
      58.864447192815774,
      53.29120363367177,
      60.5459854635738,
      60.65751700321877,
      60.65742620705004,
      60.54598546357289,
      55.06643312483685,
      60.6583341646261,
      60.54598546357258,
      59.65247195244632,
      60.65751700278962,
      60.65769859490588,
      60.65788018574672,
      41.30541113340334,
      60.65842496028381,
      47.30542743462621,
      58.86444719283948,
      60.65715396088238,
      60.65851575593804,
      60.65733541132546,
      60.65806177728443,
      60.21179031665754,
      39.30600478881182,
      43.30582284645462,
      60.21179205391485,
      39.30540097689715,
      60.65842496015652,
      60.65833416525561,
      60.545985464028846,
      49.30541973779579,
      60.65715521230115,
      55.066433125808345,
      37.30638058851872,
      60.65860655164093,
      58.86444719281553,
      60.65851575596233,
      60.54598550036991,
      39.30550060973725,
      60.65842496021449,
      60.65715426180567,
      58.86444719282271,
      60.65842496019677,
      55.066433124840145,
      60.65806177759781,
      37.30541310718983,
      60.65724462454048,
      55.06643312552302
    ],
    "group_enabled": false,
    "group_bics": null,
    "num_parameters": 3,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- beta: r = 0.736\n- gamma: r = -0.144\n- phi: r = 0.004",
  "previous_models": [
    "Specification: a = \u03a3[i=1,11](F_i) + \u03b4\na_mod = 1.08 * a * (1 + 0.012 * sin(a + 0.045))\nz = a_mod * (1 + 0.008 * cos(a + 0.065)) * (1 + 0.005 * sin(a + 0.115)) * (1 + 0.004 * cos(a + 0.085)) * (1 + 0.006 * sin(a + 0.035) * cos(a + 0.055)) * (1 + 0.003 * sin(a + 0.03) * cos(a + 0.05))\nw = (phi - 0.5) / phi\nf_adapt = { if z \u2265 0: { if z < \u03b5 then z + k1 * z^2 else ln(1 + z) } else - (|z|/(1 + |z|))^4 }\nT = (1 + 0.5 * a + 0.01 * a^2) / (1 + 0.02 * a + 0.001 * a^2)\nsoftsign(x) = x / (1 + |x|)\nextra = softsign(softsign(softsign(a))) * (1 + 0.005 * cos(0.9 * a))\nf_x = sign(z) * ( | f_adapt * T * extra | )^(w)\nU = beta + gamma * f_x\np_accept = 1 / (1 + exp(-U))\nSummary: A nonlinear utility model predicting responder acceptance. The model computes a core sum from eleven fixed components, applies multiple oscillatory adjustments, and processes the signal through an adaptive nonlinear transformation f_adapt that differentiates between positive (using a piecewise linear-logarithmic function with a quadratic correction) and negative values (penalized via a high-degree softsign). A dynamic threshold T is obtained via a Pad\u00e9 approximant, and an extra composite factor based on a nested softsign chain and a cosine blending term further modulates the signal. The final transformed signal is exponentiated with an exponent derived from phi, and combined with learnable parameters beta and gamma to yield a latent utility, which is converted via a logistic function into the probability of acceptance.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 53.92259252229972\nOverall Accuracy: 0.5559\n\nParameter Recovery:\n- beta: r = 0.736\n- gamma: r = -0.144\n- phi: r = 0.004"
  ]
}